'use strict';



;define("ghost-admin/adapters/-json-api", ["exports", "@ember-data/adapter/json-api"], function (_exports, _jsonApi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _jsonApi.default;
    }
  });
});
;define("ghost-admin/adapters/api-key", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    queryRecord(store, type, query) {
      if (!query || query.id !== 'me') {
        return this._super(...arguments);
      }

      let url = `${this.buildURL('users', 'me')}token/`;
      return this.ajax(url, 'GET', {
        data: {}
      }).then(data => {
        return data;
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/application", ["exports", "ghost-admin/adapters/embedded-relation-adapter"], function (_exports, _embeddedRelationAdapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _embeddedRelationAdapter.default.extend({
    shouldBackgroundReloadRecord() {
      return false;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/base", ["exports", "ember-ajax/mixins/ajax-support", "@ember-data/adapter/rest", "ghost-admin/utils/ghost-paths"], function (_exports, _ajaxSupport, _rest, _ghostPaths) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _rest.default.extend(_ajaxSupport.default, {
    host: window.location.origin,
    namespace: (0, _ghostPaths.default)().apiRoot.slice(1),
    session: Ember.inject.service(),

    shouldBackgroundReloadRecord() {
      return false;
    },

    query(store, type, query) {
      let id;

      if (query.id) {
        id = query.id;
        delete query.id;
      }

      return this.ajax(this.buildURL(type.modelName, id), 'GET', {
        data: query
      });
    },

    pathForType() {
      const type = this._super(...arguments);

      return Ember.String.underscore(type);
    },

    buildURL() {
      // Ensure trailing slashes
      let url = this._super(...arguments);

      let parsedUrl = new URL(url);

      if (!parsedUrl.pathname.endsWith('/')) {
        parsedUrl.pathname += '/';
      }

      return parsedUrl.toString();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/custom-theme-setting-list", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class CustomThemeSettingListAdapter extends _application.default {
    // we use `custom-theme-setting-list` model as a workaround for saving all
    // custom theme setting records in one request so it uses the base model url
    pathForType() {
      return 'custom_theme_settings';
    } // there's no custom theme setting creation
    // newListModel.save() acts as an overall update request so force a PUT


    createRecord(store, type, snapshot) {
      return this.saveRecord(store, type, snapshot, {
        method: 'PUT'
      }, 'createRecord');
    }

  }

  _exports.default = CustomThemeSettingListAdapter;

  window.__CLASSIC_OWN_CLASSES__.set(CustomThemeSettingListAdapter, true);
});
;define("ghost-admin/adapters/email", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    retry(model) {
      let url = `${this.buildURL('email', model.get('id'))}retry/`;
      return this.ajax(url, 'PUT', {
        data: {}
      }).then(data => {
        this.store.pushPayload(data);
        return model;
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/embedded-relation-adapter", ["exports", "ghost-admin/adapters/base"], function (_exports, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // EmbeddedRelationAdapter will augment the query object in calls made to
  // DS.Store#findRecord, findAll, query, and queryRecord with the correct "includes"
  // (?include=relatedType) by introspecting on the provided subclass of the DS.Model.
  // In cases where there is no query object (DS.Model#save, or simple finds) the URL
  // that is built will be augmented with ?include=... where appropriate.
  //
  // Example:
  // If a model has an embedded hasMany relation, the related type will be included:
  // roles: DS.hasMany('role', { embedded: 'always' }) => ?include=roles
  var _default = _base.default.extend({
    find(store, type, id, snapshot) {
      return this.ajax(this.buildIncludeURL(store, type.modelName, id, snapshot, 'find'), 'GET');
    },

    findRecord(store, type, id, snapshot) {
      return this.ajax(this.buildIncludeURL(store, type.modelName, id, snapshot, 'findRecord'), 'GET');
    },

    findAll(store, type, sinceToken) {
      let query, url;

      if (sinceToken) {
        query = {
          since: sinceToken
        };
      }

      url = this.buildIncludeURL(store, type.modelName, null, null, 'findAll');
      return this.ajax(url, 'GET', {
        data: query
      });
    },

    query(store, type, query) {
      return this._super(store, type, this.buildQuery(store, type.modelName, query));
    },

    queryRecord(store, type, query) {
      return this._super(store, type, this.buildQuery(store, type.modelName, query));
    },

    createRecord(store, type, snapshot) {
      return this.saveRecord(store, type, snapshot, {
        method: 'POST'
      }, 'createRecord');
    },

    updateRecord(store, type, snapshot) {
      let options = {
        method: 'PUT',
        id: Ember.get(snapshot, 'id')
      };
      return this.saveRecord(store, type, snapshot, options, 'updateRecord');
    },

    saveRecord(store, type, snapshot, options, requestType) {
      let _options = options || {};

      let url = this.buildIncludeURL(store, type.modelName, _options.id, snapshot, requestType);
      let payload = this.preparePayload(store, type, snapshot);
      return this.ajax(url, _options.method, payload);
    },

    preparePayload(store, type, snapshot) {
      let serializer = store.serializerFor(type.modelName);
      let payload = {};
      serializer.serializeIntoHash(payload, type, snapshot);
      return {
        data: payload
      };
    },

    buildIncludeURL(store, modelName, id, snapshot, requestType, query) {
      let includes = this.getEmbeddedRelations(store, modelName);
      let url = this.buildURL(modelName, id, snapshot, requestType, query);
      let parsedUrl = new URL(url);

      if (includes.length) {
        parsedUrl.searchParams.append('include', includes.map(Ember.String.underscore).join(','));
      }

      return parsedUrl.toString();
    },

    buildQuery(store, modelName, options) {
      let deDupe = {};
      let toInclude = this.getEmbeddedRelations(store, modelName);
      let query = options || {};

      if (toInclude.length) {
        // If this is a find by id, build a query object and attach the includes
        if (typeof options === 'string' || typeof options === 'number') {
          query = {};
          query.id = options;
          query.include = toInclude.map(Ember.String.underscore).join(',');
        } else if (typeof options === 'object' || Ember.isNone(options)) {
          // If this is a find all (no existing query object) build one and attach
          // the includes.
          // If this is a find with an existing query object then merge the includes
          // into the existing object. Existing properties and includes are preserved.
          query = query || {};
          toInclude = toInclude.concat(query.include ? query.include.split(',') : []);
          toInclude.forEach(include => {
            deDupe[include] = true;
          });
          query.include = Object.keys(deDupe).join(',');
        }
      }

      return query;
    },

    getEmbeddedRelations(store, modelName) {
      let model = store.modelFor(modelName);
      let ret = [];
      let embedded = []; // Iterate through the model's relationships and build a list
      // of those that need to be pulled in via "include" from the API

      model.eachRelationship((name, meta) => {
        if (meta.kind === 'hasMany' && Object.prototype.hasOwnProperty.call(meta.options, 'embedded') && meta.options.embedded === 'always') {
          ret.push(name);
          embedded.push([name, meta.type]);
        }
      });
      embedded.forEach(_ref => {
        let [relName, embeddedModelName] = _ref;
        this.getEmbeddedRelations(store, embeddedModelName).forEach(name => {
          ret.push(`${relName}.${name}`);
        });
      });
      return ret;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/label", ["exports", "ghost-admin/adapters/application", "ghost-admin/mixins/slug-url"], function (_exports, _application, _slugUrl) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend(_slugUrl.default);

  _exports.default = _default;
});
;define("ghost-admin/adapters/member", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    queryRecord(store, type, query) {
      if (query && query.id) {
        let {
          id
        } = query;
        delete query.id;
        let url = this.buildURL(type.modelName, id, query, 'findRecord');
        return this.ajax(url, 'GET', {
          data: query
        });
      }

      return this._super(...arguments);
    },

    urlForDeleteRecord(id, modelName, snapshot) {
      let url = this._super(...arguments);

      let parsedUrl = new URL(url);

      if (snapshot && snapshot.adapterOptions && snapshot.adapterOptions.cancel) {
        parsedUrl.searchParams.set('cancel', 'true');
      }

      return parsedUrl.toString();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/offer", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    queryRecord(store, type, query) {
      if (query && query.id) {
        let {
          id
        } = query;
        delete query.id;
        let url = this.buildURL(type.modelName, id, query, 'findRecord');
        return this.ajax(url, 'GET', {
          data: query
        });
      }

      return this._super(...arguments);
    },

    urlForDeleteRecord() {
      let url = this._super(...arguments);

      let parsedUrl = new URL(url);
      return parsedUrl.toString();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/page", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    // posts and pages now include everything by default
    buildIncludeURL(store, modelName, id, snapshot, requestType, query) {
      return this.buildURL(modelName, id, snapshot, requestType, query);
    },

    buildQuery(store, modelName, options) {
      return options;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/post", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    // posts and pages now include everything by default
    buildIncludeURL(store, modelName, id, snapshot, requestType, query) {
      let url = this.buildURL(modelName, id, snapshot, requestType, query);
      let parsedUrl = new URL(url);

      if (snapshot && snapshot.adapterOptions && snapshot.adapterOptions.sendEmailWhenPublished) {
        let emailRecipientFilter = snapshot.adapterOptions.sendEmailWhenPublished;

        if (emailRecipientFilter === 'status:free,status:-free') {
          emailRecipientFilter = 'all';
        }

        parsedUrl.searchParams.append('email_recipient_filter', emailRecipientFilter);
      }

      return parsedUrl.toString();
    },

    buildQuery(store, modelName, options) {
      return options;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/product", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    queryRecord(store, type, query) {
      if (query && query.id) {
        let {
          id
        } = query;
        delete query.id;
        let url = this.buildURL(type.modelName, id, query, 'findRecord');
        return this.ajax(url, 'GET', {
          data: query
        });
      }

      return this._super(...arguments);
    },

    urlForDeleteRecord() {
      let url = this._super(...arguments);

      let parsedUrl = new URL(url);
      return parsedUrl.toString();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/setting", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    updateRecord(store, type, record) {
      let data = {};
      let serializer = store.serializerFor(type.modelName); // remove the fake id that we added onto the model.

      delete record.id; // use the SettingSerializer to transform the model back into
      // an array of settings objects like the API expects

      serializer.serializeIntoHash(data, type, record); // use the ApplicationAdapter's buildURL method but do not
      // pass in an id.

      return this.ajax(this.buildURL(type.modelName), 'PUT', {
        data
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/tag", ["exports", "ghost-admin/adapters/application", "ghost-admin/mixins/slug-url"], function (_exports, _application, _slugUrl) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend(_slugUrl.default);

  _exports.default = _default;
});
;define("ghost-admin/adapters/theme", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    activate(model) {
      let url = `${this.buildURL('theme', model.get('id'))}activate/`;
      return this.ajax(url, 'PUT', {
        data: {}
      }).then(data => {
        this.store.pushPayload(data);
        return model;
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/user", ["exports", "ghost-admin/adapters/application", "ghost-admin/mixins/slug-url"], function (_exports, _application, _slugUrl) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend(_slugUrl.default, {
    queryRecord(store, type, query) {
      if (!query || query.id !== 'me') {
        return this._super(...arguments);
      }

      let url = this.buildURL(type.modelName, 'me', null, 'findRecord');
      return this.ajax(url, 'GET', {
        data: {
          include: 'roles'
        }
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/app", ["exports", "ghost-admin/utils/link-component", "ghost-admin/utils/route", "ember-resolver", "ghost-admin/config/environment", "ember-load-initializers", "moment"], function (_exports, _linkComponent, _route, _emberResolver, _environment, _emberLoadInitializers, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  _moment.default.updateLocale('en', {
    relativeTime: {
      m: '1 minute'
    }
  });

  const App = Ember.Application.extend({
    Resolver: _emberResolver.default,
    modulePrefix: _environment.default.modulePrefix,
    podModulePrefix: _environment.default.podModulePrefix,
    // eslint-disable-next-line
    customEvents: {
      touchstart: null,
      touchmove: null,
      touchend: null,
      touchcancel: null
    }
  }); // TODO: remove once the validations refactor is complete
  // eslint-disable-next-line

  Ember.Debug.registerWarnHandler((message, options, next) => {
    let skip = ['ds.errors.add', 'ds.errors.remove', 'ds.errors.clear'];

    if (skip.includes(options.id)) {
      return;
    }

    next(message, options);
  });
  (0, _emberLoadInitializers.default)(App, _environment.default.modulePrefix);
  var _default = App;
  _exports.default = _default;
});
;define("ghost-admin/authenticators/cookie", ["exports", "ember-simple-auth/authenticators/base"], function (_exports, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.extend({
    ajax: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    sessionEndpoint: Ember.computed('ghostPaths.apiRoot', function () {
      return `${this.ghostPaths.apiRoot}/session`;
    }),
    restore: function () {
      return Ember.RSVP.resolve();
    },

    authenticate(identification, password) {
      const data = {
        username: identification,
        password
      };
      const options = {
        data,
        contentType: 'application/json;charset=utf-8',
        // ember-ajax will try and parse the response as JSON if not explicitly set
        dataType: 'text'
      };
      return this.ajax.post(this.sessionEndpoint, options);
    },

    invalidate() {
      // if we're invalidating because of a 401 we can end up in an infinite
      // loop if we then try to perform a DELETE /session/ request
      // TODO: find a more elegant way to handle this
      if (this.ajax.skipSessionDeletion) {
        this.ajax.skipSessionDeletion = false;
        return Ember.RSVP.resolve();
      }

      return this.ajax.del(this.sessionEndpoint);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/component-managers/glimmer", ["exports", "@glimmer/component/-private/ember-component-manager"], function (_exports, _emberComponentManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberComponentManager.default;
    }
  });
});
;define("ghost-admin/components/-dynamic-element-alt", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // avoiding reexport directly here because in some circumstances (ember-engines
  // for example) a simple reexport is transformed to `define.alias`,
  // unfortunately at the moment (ember-source@3.13) there is no _actual_
  // `@ember/component` module to alias so this causes issues
  //
  // tldr; we can replace this with a simple reexport when we can rely on Ember
  // actually providing a `@ember/component` module
  var _default = Ember.Component.extend();

  _exports.default = _default;
});
;define("ghost-admin/components/-dynamic-element", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // avoiding reexport directly here because in some circumstances (ember-engines
  // for example) a simple reexport is transformed to `define.alias`,
  // unfortunately at the moment (ember-source@3.13) there is no _actual_
  // `@ember/component` module to alias so this causes issues
  //
  // tldr; we can replace this with a simple reexport when we can rely on Ember
  // actually providing a `@ember/component` module
  var _default = Ember.Component.extend();

  _exports.default = _default;
});
;define("ghost-admin/components/aspect-ratio-box", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#unless this.isResizing}}
  {{yield}}
  {{/unless}}
  */
  {
    "id": "wR7ITMwk",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[6,[37,0],[[32,0,[\"isResizing\"]]],null,[[\"default\"],[{\"statements\":[[18,1,null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"unless\"]}",
    "moduleName": "ghost-admin/components/aspect-ratio-box.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    ratio: '1/1',
    base: 'height',
    isResizing: true,
    _ratio: 1,

    init() {
      this._super(...arguments);

      this._onResizeHandler = () => {
        Ember.run.debounce(this, this._resize, 200);
      };
    },

    didReceiveAttrs() {
      this._super(...arguments);

      (true && !(this.ratio.match(/\d+\/\d+/)) && Ember.assert('{{aspect-ratio-box}} requires a `ratio` property in the format `"16/9"`', this.ratio.match(/\d+\/\d+/)));
      this._ratio = this.ratio.split('/').reduce((prev, curr) => prev / curr);
    },

    didInsertElement() {
      this._super(...arguments);

      this._resize();

      window.addEventListener('resize', this._onResizeHandler);
    },

    willDestroyElement() {
      this._super(...arguments);

      window.removeEventListener('resize', this._onResizeHandler);
    },

    _resize() {
      this.set('isResizing', true);
      Ember.run.schedule('afterRender', this, function () {
        if (this.base === 'height') {
          this.element.style.width = `${this.element.clientHeight * this._ratio}px`;
        } else {
          this.element.style.height = `${this.element.clientWidth * this._ratio}px`;
        }

        this.set('isResizing', false);
      });
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/basic-dropdown-content", ["exports", "ember-basic-dropdown/components/basic-dropdown-content"], function (_exports, _basicDropdownContent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _basicDropdownContent.default;
    }
  });
});
;define("ghost-admin/components/basic-dropdown-trigger", ["exports", "ember-basic-dropdown/components/basic-dropdown-trigger"], function (_exports, _basicDropdownTrigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _basicDropdownTrigger.default;
    }
  });
});
;define("ghost-admin/components/basic-dropdown", ["exports", "ember-basic-dropdown/components/basic-dropdown"], function (_exports, _basicDropdown) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _basicDropdown.default;
    }
  });
});
;define("ghost-admin/components/custom-theme-settings/boolean", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-stack-item {{if (eq @index 0) "gh-setting-first" "gh-setting"}}">
      <div class="flex-grow-1">
          <div class="flex justify-between items-center relative">
              <span class="gh-setting-title" for={{this.checkboxId}}>
                  {{humanize-setting-key @setting.key}}
              </span>
              <div class="for-switch x-small">
                  <label for={{this.checkboxId}} class="switch">
                      <input type="checkbox" class="gh-input" id={{this.checkboxId}} checked={{@setting.value}} {{on "input" this.toggleValue}}>
                      <span class="input-toggle-component mt1"></span>
                  </label>
              </div>
          </div>
      </div>
  </div>
  */
  {
    "id": "KgpZ0UOD",
    "block": "{\"symbols\":[\"@index\",\"@setting\"],\"statements\":[[10,\"div\"],[15,0,[31,[\"gh-stack-item \",[30,[36,1],[[30,[36,0],[[32,1],0],null],\"gh-setting-first\",\"gh-setting\"],null]]]],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"flex-grow-1\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"flex justify-between items-center relative\"],[12],[2,\"\\n            \"],[10,\"span\"],[14,0,\"gh-setting-title\"],[15,\"for\",[32,0,[\"checkboxId\"]]],[12],[2,\"\\n                \"],[1,[30,[36,2],[[32,2,[\"key\"]]],null]],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"for-switch x-small\"],[12],[2,\"\\n                \"],[10,\"label\"],[15,\"for\",[32,0,[\"checkboxId\"]]],[14,0,\"switch\"],[12],[2,\"\\n                    \"],[11,\"input\"],[24,0,\"gh-input\"],[16,1,[32,0,[\"checkboxId\"]]],[16,\"checked\",[32,2,[\"value\"]]],[24,4,\"checkbox\"],[4,[38,3],[\"input\",[32,0,[\"toggleValue\"]]],null],[12],[13],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"input-toggle-component mt1\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"eq\",\"if\",\"humanize-setting-key\",\"on\"]}",
    "moduleName": "ghost-admin/components/custom-theme-settings/boolean.hbs"
  });

  let CustomThemeSettingsBooleanComponent = (_dec = Ember._action, (_class = class CustomThemeSettingsBooleanComponent extends _component.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "checkboxId", `checkbox-${Ember.guidFor(this)}`);

      _defineProperty(this, "checkboxName", Ember.String.camelize(this.args.setting.key));
    }

    toggleValue(changeEvent) {
      const value = changeEvent.target.checked;
      this.args.setting.set('value', value);
      this.args.onChange?.();
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "toggleValue", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "toggleValue"), _class.prototype)), _class));
  _exports.default = CustomThemeSettingsBooleanComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, CustomThemeSettingsBooleanComponent);
});
;define("ghost-admin/components/custom-theme-settings/color", ["exports", "@glimmer/component", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _component, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-stack-item {{if (eq @index 0) "gh-setting-first" "gh-setting"}}">
      <div class="flex flex-grow-1 justify-between">
          <div class="flex justify-between items-center relative">
              <span class="gh-setting-title" for={{this.inputId}}>
                  {{humanize-setting-key @setting.key}}
              </span>
          </div>
          <div>
              <div class="input-color">
                  <input
                      type="text"
                      id={{this.inputId}}
                      name={{this.inputName}}
                      autocorrect="off"
                      maxlength="6"
                      value={{this.colorWithoutHash}}
                      class="gh-input"
                      {{on "input" (perform this.debounceValueUpdate)}}
                      {{on "blur" this.updateValue}}
                      {{on-key "Enter" this.blurElement}}
                      data-test-input="accentColor"
                  />
                  <div class="color-picker-horizontal-divider"></div>
                  <div
                      class="color-box-container"
                      style={{this.this.colorPickerBgStyle}}
                  >
                      <input
                          type="color"
                          name={{this.inputName}}
                          class="color-picker"
                          value={{@setting.value}}
                          {{on "input" (perform this.debounceValueUpdate)}}
                      >
                  </div>
              </div>
  
              {{#if this.isInvalid}}
                  <div class="w-100 red">Please enter a color in hex format</div>
              {{/if}}
          </div>
      </div>
  </div>
  */
  {
    "id": "U4x76uF0",
    "block": "{\"symbols\":[\"@index\",\"@setting\"],\"statements\":[[10,\"div\"],[15,0,[31,[\"gh-stack-item \",[30,[36,1],[[30,[36,0],[[32,1],0],null],\"gh-setting-first\",\"gh-setting\"],null]]]],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"flex flex-grow-1 justify-between\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"flex justify-between items-center relative\"],[12],[2,\"\\n            \"],[10,\"span\"],[14,0,\"gh-setting-title\"],[15,\"for\",[32,0,[\"inputId\"]]],[12],[2,\"\\n                \"],[1,[30,[36,2],[[32,2,[\"key\"]]],null]],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"input-color\"],[12],[2,\"\\n                \"],[11,\"input\"],[16,1,[32,0,[\"inputId\"]]],[16,3,[32,0,[\"inputName\"]]],[24,\"autocorrect\",\"off\"],[24,\"maxlength\",\"6\"],[16,2,[32,0,[\"colorWithoutHash\"]]],[24,0,\"gh-input\"],[24,\"data-test-input\",\"accentColor\"],[24,4,\"text\"],[4,[38,4],[\"input\",[30,[36,3],[[32,0,[\"debounceValueUpdate\"]]],null]],null],[4,[38,4],[\"blur\",[32,0,[\"updateValue\"]]],null],[4,[38,5],[\"Enter\",[32,0,[\"blurElement\"]]],null],[12],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"color-picker-horizontal-divider\"],[12],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"color-box-container\"],[15,5,[32,0,[\"colorPickerBgStyle\"]]],[12],[2,\"\\n                    \"],[11,\"input\"],[16,3,[32,0,[\"inputName\"]]],[24,0,\"color-picker\"],[16,2,[32,2,[\"value\"]]],[24,4,\"color\"],[4,[38,4],[\"input\",[30,[36,3],[[32,0,[\"debounceValueUpdate\"]]],null]],null],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"isInvalid\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"w-100 red\"],[12],[2,\"Please enter a color in hex format\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"eq\",\"if\",\"humanize-setting-key\",\"perform\",\"on\",\"on-key\"]}",
    "moduleName": "ghost-admin/components/custom-theme-settings/color.hbs"
  });

  let CustomThemeSettingsColorComponent = (_dec = Ember._tracked, _dec2 = Ember._action, _dec3 = (0, _emberConcurrencyDecorators.task)({
    restartable: true
  }), _dec4 = Ember._action, (_class = class CustomThemeSettingsColorComponent extends _component.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "inputId", `input-${Ember.guidFor(this)}`);

      _defineProperty(this, "inputName", Ember.String.camelize(this.args.setting.key));

      _initializerDefineProperty(this, "isInvalid", _descriptor, this);
    }

    get colorWithoutHash() {
      const color = this.args.setting.value;

      if (color && color[0] === '#') {
        return color.slice(1);
      }

      return color;
    }

    get colorPickerBgStyle() {
      return Ember.String.htmlSafe(`background-color: ${this.args.setting.value || '#ffffff'}`);
    }

    updateValue(event) {
      const oldColor = this.args.setting.value;
      let newColor = event.target.value;

      if (!newColor) {
        this.isInvalid = true;
        return;
      }

      if (newColor[0] !== '#') {
        newColor = `#${newColor}`;
      }

      if (newColor.match(/#[0-9A-Fa-f]{6}$/)) {
        this.isInvalid = false;

        if (newColor === oldColor) {
          return;
        }

        this.args.setting.set('value', newColor);
        this.args.onChange?.();
      } else {
        this.isInvalid = true;
      }
    }

    *debounceValueUpdate(event) {
      yield (0, _emberConcurrency.timeout)(500);
      this.updateValue(event);
    }

    blurElement(event) {
      event.target.blur();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "isInvalid", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "updateValue", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "updateValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "debounceValueUpdate", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "debounceValueUpdate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "blurElement", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "blurElement"), _class.prototype)), _class));
  _exports.default = CustomThemeSettingsColorComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, CustomThemeSettingsColorComponent);
});
;define("ghost-admin/components/custom-theme-settings/image", ["exports", "@glimmer/component", "ghost-admin/components/gh-image-uploader"], function (_exports, _component, _ghImageUploader) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-stack-item {{if (eq @index 0) "gh-setting-first" "gh-setting"}}">
      <GhUploader
          @extensions={{this.imageExtensions}}
          @onComplete={{this.imageUploaded}}
          as |uploader|
      >
          <div class="{{if @setting.value "" "flex flex-grow-1 items-center justify-between"}}">
              <div class="gh-setting-content">
                  <div class="gh-setting-title {{if @setting.value "gh-theme-setting-title"}}">{{humanize-setting-key @setting.key}}</div>
                  {{#each uploader.errors as |error|}}
                      <div class="gh-setting-error" data-test-error="icon">{{or error.context error.message}}</div>
                  {{/each}}
              </div>
              <div class="gh-setting-action gh-uploadbutton-container flex flex-column items-stretch">
                  {{#if uploader.isUploading}}
                      {{uploader.progressBar}}
                  {{else if @setting.value}}
                      <div class="gh-branding-image-container largeimg justify-start">
                          <img class="blog-cover" src={{@setting.value}} {{on "click" uploader.triggerFileDialog}}>
                          <button type="button" class="gh-setting-action-largeimg-delete" {{on "click" (fn this.updateValue null)}} data-test-delete-image="icon">
                              {{svg-jar "trash" class="w4 h4 fill-white"}}
                          </button>
                      </div>
                  {{else}}
                      <button type="button" class="gh-btn gh-btn-white self-start" {{on "click" uploader.triggerFileDialog}} data-test-image-upload-btn="icon">
                          <span>Upload</span>
                      </button>
                  {{/if}}
                  <div style="display:none">
                      <GhFileInput @multiple={{false}} @action={{uploader.setFiles}} @accept={{this.imageMimeTypes}} @onInsert={{uploader.registerFileInput}} data-test-file-input="icon" />
                  </div>
              </div>
          </div>
      </GhUploader>
  </div>
  */
  {
    "id": "lZmyftyU",
    "block": "{\"symbols\":[\"uploader\",\"error\",\"@setting\",\"@index\"],\"statements\":[[10,\"div\"],[15,0,[31,[\"gh-stack-item \",[30,[36,3],[[30,[36,5],[[32,4],0],null],\"gh-setting-first\",\"gh-setting\"],null]]]],[12],[2,\"\\n    \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@onComplete\"],[[32,0,[\"imageExtensions\"]],[32,0,[\"imageUploaded\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[15,0,[31,[[30,[36,3],[[32,3,[\"value\"]],\"\",\"flex flex-grow-1 items-center justify-between\"],null]]]],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-content\"],[12],[2,\"\\n                \"],[10,\"div\"],[15,0,[31,[\"gh-setting-title \",[30,[36,3],[[32,3,[\"value\"]],\"gh-theme-setting-title\"],null]]]],[12],[1,[30,[36,6],[[32,3,[\"key\"]]],null]],[13],[2,\"\\n\"],[6,[37,8],[[30,[36,7],[[30,[36,7],[[32,1,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-setting-error\"],[14,\"data-test-error\",\"icon\"],[12],[1,[30,[36,4],[[32,2,[\"context\"]],[32,2,[\"message\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-action gh-uploadbutton-container flex flex-column items-stretch\"],[12],[2,\"\\n\"],[6,[37,3],[[32,1,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[1,[32,1,[\"progressBar\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[32,3,[\"value\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-branding-image-container largeimg justify-start\"],[12],[2,\"\\n                        \"],[11,\"img\"],[24,0,\"blog-cover\"],[16,\"src\",[32,3,[\"value\"]]],[4,[38,0],[\"click\",[32,1,[\"triggerFileDialog\"]]],null],[12],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-setting-action-largeimg-delete\"],[24,\"data-test-delete-image\",\"icon\"],[24,4,\"button\"],[4,[38,0],[\"click\",[30,[36,1],[[32,0,[\"updateValue\"]],null],null]],null],[12],[2,\"\\n                            \"],[1,[30,[36,2],[\"trash\"],[[\"class\"],[\"w4 h4 fill-white\"]]]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-white self-start\"],[24,\"data-test-image-upload-btn\",\"icon\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,1,[\"triggerFileDialog\"]]],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Upload\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                    \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"icon\"]],[[\"@multiple\",\"@action\",\"@accept\",\"@onInsert\"],[false,[32,1,[\"setFiles\"]],[32,0,[\"imageMimeTypes\"]],[32,1,[\"registerFileInput\"]]]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[1]}]]],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\",\"fn\",\"svg-jar\",\"if\",\"or\",\"eq\",\"humanize-setting-key\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/custom-theme-settings/image.hbs"
  });

  let CustomThemeSettingsImageComponent = (_dec = Ember._action, _dec2 = Ember._action, (_class = class CustomThemeSettingsImageComponent extends _component.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "inputId", `input-${Ember.guidFor(this)}`);

      _defineProperty(this, "inputName", Ember.String.camelize(this.args.setting.key));

      _defineProperty(this, "imageExtensions", _ghImageUploader.IMAGE_EXTENSIONS);

      _defineProperty(this, "imageMimeTypes", _ghImageUploader.IMAGE_MIME_TYPES);
    }

    imageUploaded(images) {
      if (images[0]) {
        this.updateValue(images[0].url);
      }
    }

    updateValue(value) {
      this.args.setting.set('value', value);
      this.args.onChange?.();
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "imageUploaded", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "imageUploaded"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateValue", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "updateValue"), _class.prototype)), _class));
  _exports.default = CustomThemeSettingsImageComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, CustomThemeSettingsImageComponent);
});
;define("ghost-admin/components/custom-theme-settings/select", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-stack-item {{if (eq @index 0) "gh-setting-first" "gh-setting"}}">
      <div class="flex-grow-1">
          <label class="gh-setting-title gh-theme-setting-title" for={{this.selectId}}>
              {{humanize-setting-key @setting.key}}
          </label>
  
          <span class="gh-select">
              <select class="ember-select" name={{this.selectName}} id={{this.selectId}} {{on "change" this.setSelection}}>
                  {{#each @setting.options as |settingOption|}}
                      <option value={{settingOption}} selected={{eq settingOption @setting.value}}>
                          {{settingOption}}
                          {{#if (eq settingOption @setting.default)}}(default){{/if}}
                      </option>
                  {{/each}}
              </select>
              {{svg-jar "arrow-down-small"}}
          </span>
      </div>
  </div>
  */
  {
    "id": "sVLglPY/",
    "block": "{\"symbols\":[\"settingOption\",\"@setting\",\"@index\"],\"statements\":[[10,\"div\"],[15,0,[31,[\"gh-stack-item \",[30,[36,1],[[30,[36,0],[[32,3],0],null],\"gh-setting-first\",\"gh-setting\"],null]]]],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"flex-grow-1\"],[12],[2,\"\\n        \"],[10,\"label\"],[14,0,\"gh-setting-title gh-theme-setting-title\"],[15,\"for\",[32,0,[\"selectId\"]]],[12],[2,\"\\n            \"],[1,[30,[36,2],[[32,2,[\"key\"]]],null]],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n            \"],[11,\"select\"],[24,0,\"ember-select\"],[16,3,[32,0,[\"selectName\"]]],[16,1,[32,0,[\"selectId\"]]],[4,[38,3],[\"change\",[32,0,[\"setSelection\"]]],null],[12],[2,\"\\n\"],[6,[37,5],[[30,[36,4],[[30,[36,4],[[32,2,[\"options\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"option\"],[15,2,[32,1]],[15,\"selected\",[30,[36,0],[[32,1],[32,2,[\"value\"]]],null]],[12],[2,\"\\n                        \"],[1,[32,1]],[2,\"\\n                        \"],[6,[37,1],[[30,[36,0],[[32,1],[32,2,[\"default\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"(default)\"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"            \"],[13],[2,\"\\n            \"],[1,[30,[36,6],[\"arrow-down-small\"],null]],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"eq\",\"if\",\"humanize-setting-key\",\"on\",\"-track-array\",\"each\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/custom-theme-settings/select.hbs"
  });

  let CustomThemeSettingsSelectComponent = (_dec = Ember._action, (_class = class CustomThemeSettingsSelectComponent extends _component.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "selectId", `select-${Ember.guidFor(this)}`);

      _defineProperty(this, "selectName", Ember.String.camelize(this.args.setting.key));
    }

    setSelection(changeEvent) {
      const value = changeEvent.target.value;
      this.args.setting.set('value', value);
      this.args.onChange?.();
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "setSelection", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "setSelection"), _class.prototype)), _class));
  _exports.default = CustomThemeSettingsSelectComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, CustomThemeSettingsSelectComponent);
});
;define("ghost-admin/components/custom-theme-settings/text", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-stack-item {{if (eq @index 0) "gh-setting-first" "gh-setting"}}">
      <div class="flex-grow-1">
          <label class="gh-setting-title gh-theme-setting-title" for={{this.inputId}}>
              {{humanize-setting-key @setting.key}}
          </label>
  
          <input
              type="text"
              class="gh-input"
              value={{@setting.value}}
              id={{this.inputId}}
              name={{this.inputName}}
              {{on "input" this.updateValue}}
              {{on "blur" this.triggerOnChange}}
          />
      </div>
  </div>
  */
  {
    "id": "O7jULB7o",
    "block": "{\"symbols\":[\"@index\",\"@setting\"],\"statements\":[[10,\"div\"],[15,0,[31,[\"gh-stack-item \",[30,[36,1],[[30,[36,0],[[32,1],0],null],\"gh-setting-first\",\"gh-setting\"],null]]]],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"flex-grow-1\"],[12],[2,\"\\n        \"],[10,\"label\"],[14,0,\"gh-setting-title gh-theme-setting-title\"],[15,\"for\",[32,0,[\"inputId\"]]],[12],[2,\"\\n            \"],[1,[30,[36,2],[[32,2,[\"key\"]]],null]],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[11,\"input\"],[24,0,\"gh-input\"],[16,2,[32,2,[\"value\"]]],[16,1,[32,0,[\"inputId\"]]],[16,3,[32,0,[\"inputName\"]]],[24,4,\"text\"],[4,[38,3],[\"input\",[32,0,[\"updateValue\"]]],null],[4,[38,3],[\"blur\",[32,0,[\"triggerOnChange\"]]],null],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"eq\",\"if\",\"humanize-setting-key\",\"on\"]}",
    "moduleName": "ghost-admin/components/custom-theme-settings/text.hbs"
  });

  let CustomThemeSettingsTextComponent = (_dec = Ember._action, _dec2 = Ember._action, (_class = class CustomThemeSettingsTextComponent extends _component.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "inputId", `input-${Ember.guidFor(this)}`);

      _defineProperty(this, "inputName", Ember.String.camelize(this.args.setting.key));
    }

    updateValue(event) {
      this.args.setting.set('value', event.target.value);
    }

    triggerOnChange() {
      this.args.onChange?.();
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "updateValue", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "updateValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "triggerOnChange", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "triggerOnChange"), _class.prototype)), _class));
  _exports.default = CustomThemeSettingsTextComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, CustomThemeSettingsTextComponent);
});
;define("ghost-admin/components/dashboard/latest-member-activity", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if this.shouldDisplay}}
      <div class="gh-dashboard-box activity" data-test-dashboard-member-activity>
          <h4 class="gh-dashboard-header-container">
              <h4 class="gh-dashboard-header">
                  Activity
              </h4>
          </h4>
          <div class="content">
              {{#let (members-event-fetcher filter=(if (feature "membersActivityFeed") (members-event-filter excludeEmailEvents=true)) pageSize=(if (feature "membersActivityFeed") 10 5)) as |eventsFetcher|}}
                  {{#if eventsFetcher.isLoading}}
                      Loading...
                  {{/if}}
  
                  {{#if eventsFetcher.isError}}
                      <p class="error">
                          There was an error loading events
                          {{#if eventsFetcher.errorMessage}}
                              <code>{{eventsFetcher.errorMessage}}</code>
                          {{/if}}
                      </p>
                  {{/if}}
  
                  {{#unless (or eventsFetcher.isLoading eventsFetcher.isError)}}
                      <div class="gh-event-timeline">
                          {{#if eventsFetcher.data}}
                              <ul class="gh-dashboard-activity-list">
                                  {{#each eventsFetcher.data as |event|}}
                                      {{#let (parse-member-event event) as |parsedEvent|}}
                                          <li class="gh-dashboard-activity-item" data-test-dashboard-member-activity-item>
                                              <LinkTo class="member-details" @route="member" @model="{{parsedEvent.memberId}}">
                                                  <div class="gh-dashboard-activity-container">
                                                      {{svg-jar parsedEvent.icon}}
                                                      <div class="gh-dashboard-activity-detail">
                                                          <div class="gh-dashboard-activity-name">
                                                              {{parsedEvent.subject}}
                                                          </div>
                                                          <div class="gh-dashboard-activity-event">
                                                              {{parsedEvent.action}}
                                                              {{parsedEvent.object}}
                                                              <span class="highlight">{{parsedEvent.info}}</span>
                                                          </div>
                                                      </div>
                                                  </div>
                                              </LinkTo>
                                              <span class="gh-dashboard-activity-time">{{moment-from-now parsedEvent.timestamp}}</span>
                                          </li>
                                      {{/let}}
                                  {{/each}}
                              </ul>
                          {{else}}
                              <div class="gh-no-data-list" data-test-no-member-activities>
                                  {{svg-jar "no-data-list"}}
                                  <span>No member activity available.</span>
                              </div>
                          {{/if}}
                      </div>
  
                      {{#if (feature "membersActivityFeed")}}
                          <div class="footer">
                              <LinkTo @route="members-activity" @query={{reset-query-params "members-activity"}}>See all activity →</LinkTo>
                          </div>
                      {{/if}}
                  {{/unless}}
              {{/let}}
          </div>
      </div>
  {{/if}}
  
  */
  {
    "id": "Um5o36Ck",
    "block": "{\"symbols\":[\"eventsFetcher\",\"event\",\"parsedEvent\"],\"statements\":[[6,[37,7],[[32,0,[\"shouldDisplay\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"gh-dashboard-box activity\"],[14,\"data-test-dashboard-member-activity\",\"\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"gh-dashboard-header-container\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-dashboard-header\"],[12],[2,\"\\n                Activity\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"content\"],[12],[2,\"\\n\"],[6,[37,4],[[30,[36,12],null,[[\"filter\",\"pageSize\"],[[30,[36,7],[[30,[36,8],[\"membersActivityFeed\"],null],[30,[36,11],null,[[\"excludeEmailEvents\"],[true]]]],null],[30,[36,7],[[30,[36,8],[\"membersActivityFeed\"],null],10,5],null]]]]],null,[[\"default\"],[{\"statements\":[[6,[37,7],[[32,1,[\"isLoading\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    Loading...\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,7],[[32,1,[\"isError\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"p\"],[14,0,\"error\"],[12],[2,\"\\n                        There was an error loading events\\n\"],[6,[37,7],[[32,1,[\"errorMessage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"code\"],[12],[1,[32,1,[\"errorMessage\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,10],[[30,[36,9],[[32,1,[\"isLoading\"]],[32,1,[\"isError\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-event-timeline\"],[12],[2,\"\\n\"],[6,[37,7],[[32,1,[\"data\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[10,\"ul\"],[14,0,\"gh-dashboard-activity-list\"],[12],[2,\"\\n\"],[6,[37,6],[[30,[36,5],[[30,[36,5],[[32,1,[\"data\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,4],[[30,[36,3],[[32,2]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                        \"],[10,\"li\"],[14,0,\"gh-dashboard-activity-item\"],[14,\"data-test-dashboard-member-activity-item\",\"\"],[12],[2,\"\\n                                            \"],[8,\"link-to\",[[24,0,\"member-details\"]],[[\"@route\",\"@model\"],[\"member\",[31,[[32,3,[\"memberId\"]]]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"gh-dashboard-activity-container\"],[12],[2,\"\\n                                                    \"],[1,[30,[36,1],[[32,3,[\"icon\"]]],null]],[2,\"\\n                                                    \"],[10,\"div\"],[14,0,\"gh-dashboard-activity-detail\"],[12],[2,\"\\n                                                        \"],[10,\"div\"],[14,0,\"gh-dashboard-activity-name\"],[12],[2,\"\\n                                                            \"],[1,[32,3,[\"subject\"]]],[2,\"\\n                                                        \"],[13],[2,\"\\n                                                        \"],[10,\"div\"],[14,0,\"gh-dashboard-activity-event\"],[12],[2,\"\\n                                                            \"],[1,[32,3,[\"action\"]]],[2,\"\\n                                                            \"],[1,[32,3,[\"object\"]]],[2,\"\\n                                                            \"],[10,\"span\"],[14,0,\"highlight\"],[12],[1,[32,3,[\"info\"]]],[13],[2,\"\\n                                                        \"],[13],[2,\"\\n                                                    \"],[13],[2,\"\\n                                                \"],[13],[2,\"\\n                                            \"]],\"parameters\":[]}]]],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-dashboard-activity-time\"],[12],[1,[30,[36,2],[[32,3,[\"timestamp\"]]],null]],[13],[2,\"\\n                                        \"],[13],[2,\"\\n\"]],\"parameters\":[3]}]]]],\"parameters\":[2]}]]],[2,\"                            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"gh-no-data-list\"],[14,\"data-test-no-member-activities\",\"\"],[12],[2,\"\\n                                \"],[1,[30,[36,1],[\"no-data-list\"],null]],[2,\"\\n                                \"],[10,\"span\"],[12],[2,\"No member activity available.\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n\\n\"],[6,[37,7],[[30,[36,8],[\"membersActivityFeed\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"footer\"],[12],[2,\"\\n                            \"],[8,\"link-to\",[],[[\"@route\",\"@query\"],[\"members-activity\",[30,[36,0],[\"members-activity\"],null]]],[[\"default\"],[{\"statements\":[[2,\"See all activity →\"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[1]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"reset-query-params\",\"svg-jar\",\"moment-from-now\",\"parse-member-event\",\"let\",\"-track-array\",\"each\",\"if\",\"feature\",\"or\",\"unless\",\"members-event-filter\",\"members-event-fetcher\"]}",
    "moduleName": "ghost-admin/components/dashboard/latest-member-activity.hbs"
  });

  let DashboardLatestMemberActivityComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, (_class = class DashboardLatestMemberActivityComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "session", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);
    }

    get shouldDisplay() {
      const isOwner = this.session.user?.isOwnerOnly;
      const hasCompletedLaunchWizard = this.settings.get('editorIsLaunchComplete');

      if (isOwner && !hasCompletedLaunchWizard) {
        return false;
      }

      return true;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = DashboardLatestMemberActivityComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, DashboardLatestMemberActivityComponent);
});
;define("ghost-admin/components/draggable-object-target", ["exports", "ember-drag-drop/components/draggable-object-target"], function (_exports, _draggableObjectTarget) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _draggableObjectTarget.default;
  _exports.default = _default;
});
;define("ghost-admin/components/draggable-object", ["exports", "ember-drag-drop/components/draggable-object"], function (_exports, _draggableObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _draggableObject.default;
  _exports.default = _default;
});
;define("ghost-admin/components/ember-chart", ["exports", "ember-cli-chart/components/ember-chart"], function (_exports, _emberChart) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _emberChart.default;
  _exports.default = _default;
});
;define("ghost-admin/components/ember-load-remover", ["exports", "ember-load/components/ember-load-remover"], function (_exports, _emberLoadRemover) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberLoadRemover.default;
    }
  });
});
;define("ghost-admin/components/ember-popover", ["exports", "ember-tooltips/components/ember-popover"], function (_exports, _emberPopover) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberPopover.default;
    }
  });
});
;define("ghost-admin/components/ember-tooltip", ["exports", "ember-tooltips/components/ember-tooltip"], function (_exports, _emberTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberTooltip.default;
    }
  });
});
;define("ghost-admin/components/epm-modal-container", ["exports", "ember-promise-modals/components/modal-container"], function (_exports, _modalContainer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#each this.modals._stack as |modal index|}}
      {{#unless modal._options.omitBackdrop}}
          <div
              class="epm-backdrop {{if modal.isClosing "epm-out"}}"
              tabindex="-1"
              role="presentation"
              aria-hidden="true"
              data-test-epm-backdrop="{{index}}"
          />
      {{/unless}}
      <div class="epm-modal-container">
          <EpmModal @modal={{modal}} data-test-epm-modal="{{index}}" />
      </div>
  {{/each}}
  */
  {
    "id": "ONqpmlA0",
    "block": "{\"symbols\":[\"modal\",\"index\"],\"statements\":[[6,[37,3],[[30,[36,2],[[30,[36,2],[[32,0,[\"modals\",\"_stack\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[32,1,[\"_options\",\"omitBackdrop\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[15,0,[31,[\"epm-backdrop \",[30,[36,0],[[32,1,[\"isClosing\"]],\"epm-out\"],null]]]],[14,\"tabindex\",\"-1\"],[14,\"role\",\"presentation\"],[14,\"aria-hidden\",\"true\"],[15,\"data-test-epm-backdrop\",[31,[[32,2]]]],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[10,\"div\"],[14,0,\"epm-modal-container\"],[12],[2,\"\\n        \"],[8,\"epm-modal\",[[16,\"data-test-epm-modal\",[31,[[32,2]]]]],[[\"@modal\"],[[32,1]]],null],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[1,2]}]]]],\"hasEval\":false,\"upvars\":[\"if\",\"unless\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/epm-modal-container.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, class extends _modalContainer.default {});

  _exports.default = _default;
});
;define("ghost-admin/components/epm-modal", ["exports", "ember-promise-modals/components/modal"], function (_exports, _modal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _modal.default;
    }
  });
});
;define("ghost-admin/components/gh-activating-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <LinkTo @route={{this.route}} @alternateActive={{action "setActive"}} @class={{@linkClasses}}>{{this.title}}{{yield}}</LinkTo>
  
  */
  {
    "id": "+FA20OZJ",
    "block": "{\"symbols\":[\"@linkClasses\",\"&default\"],\"statements\":[[8,\"link-to\",[],[[\"@route\",\"@alternateActive\",\"@class\"],[[32,0,[\"route\"]],[30,[36,0],[[32,0],\"setActive\"],null],[32,1]]],[[\"default\"],[{\"statements\":[[1,[32,0,[\"title\"]]],[18,2,null]],\"parameters\":[]}]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\"]}",
    "moduleName": "ghost-admin/components/gh-activating-list-item.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    active: false,
    classNameBindings: ['active'],
    linkClasses: null,
    tagName: 'li',
    actions: {
      setActive(value) {
        Ember.run.schedule('afterRender', this, function () {
          this.set('active', value);
        });
      }

    },

    click() {
      this.element.querySelector('a').blur();
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-alert", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-alert-content">
      {{message.message}}
  </div>
  <button class="gh-alert-close" {{action "closeNotification"}} data-test-button="close-notification">
      {{svg-jar "close-stroke"}}<span class="hidden">Close</span>
  </button>
  
  */
  {
    "id": "/xMsdb0U",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"gh-alert-content\"],[12],[2,\"\\n    \"],[1,[35,0,[\"message\"]]],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"button\"],[24,0,\"gh-alert-close\"],[24,\"data-test-button\",\"close-notification\"],[4,[38,1],[[32,0],\"closeNotification\"],null],[12],[2,\"\\n    \"],[1,[30,[36,2],[\"close-stroke\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"message\",\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/gh-alert.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    notifications: Ember.inject.service(),
    classNameBindings: ['typeClass'],
    classNames: ['gh-alert'],
    tagName: 'article',
    typeClass: Ember.computed('message.type', function () {
      let type = this.get('message.type');
      let classes = '';
      let typeMapping;
      typeMapping = {
        success: 'green',
        error: 'red',
        warn: 'blue',
        info: 'blue'
      };

      if (typeMapping[type] !== undefined) {
        classes += `gh-alert-${typeMapping[type]}`;
      }

      return classes;
    }),
    actions: {
      closeNotification() {
        this.notifications.closeNotification(this.message);
      }

    }
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-alerts", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#each this.messages as |message|}}
      <GhAlert @message={{message}} />
  {{/each}}
  */
  {
    "id": "3UyWDqYU",
    "block": "{\"symbols\":[\"message\"],\"statements\":[[6,[37,1],[[30,[36,0],[[30,[36,0],[[32,0,[\"messages\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-alert\",[],[[\"@message\"],[[32,1]]],null],[2,\"\\n\"]],\"parameters\":[1]}]]]],\"hasEval\":false,\"upvars\":[\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/gh-alerts.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    notifications: Ember.inject.service(),
    classNames: 'gh-alerts',
    tagName: 'aside',
    messages: Ember.computed.alias('notifications.alerts')
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-app", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-app" ...attributes>
      {{yield}}
  </div>
  
  */
  {
    "id": "8aitR5i8",
    "block": "{\"symbols\":[\"&attrs\",\"&default\"],\"statements\":[[11,\"div\"],[24,0,\"gh-app\"],[17,1],[12],[2,\"\\n    \"],[18,2,null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-app.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-basic-dropdown", ["exports", "ember-basic-dropdown/components/basic-dropdown"], function (_exports, _basicDropdown) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{!-- no changes from upstream --}}
  {{#with
    (hash
      uniqueId=this.publicAPI.uniqueId
      isOpen=this.publicAPI.isOpen
      disabled=this.publicAPI.disabled
      actions=this.publicAPI.actions
      Trigger=(component
        (or @triggerComponent "basic-dropdown-trigger")
        dropdown=(readonly this.publicAPI)
        hPosition=(readonly this.hPosition)
        renderInPlace=(readonly this.renderInPlace)
        vPosition=(readonly this.vPosition)
      )
      Content=(component
        (or @contentComponent "basic-dropdown-content")
        dropdown=(readonly this.publicAPI)
        hPosition=(readonly this.hPosition)
        renderInPlace=(readonly this.renderInPlace)
        preventScroll=(readonly @preventScroll)
        rootEventType=(or @rootEventType "click")
        vPosition=(readonly this.vPosition)
        destination=(readonly this.destination)
        top=(readonly this.top)
        left=(readonly this.left)
        right=(readonly this.right)
        width=(readonly this.width)
        height=(readonly this.height)
        otherStyles=(readonly this.otherStyles)
      )
    )
  as |api|
  }}
    {{#if this.renderInPlace}}
      <div class="ember-basic-dropdown" ...attributes>{{yield api}}</div>
    {{else}}
      {{yield api}}
    {{/if}}
  {{/with}}
  */
  {
    "id": "6xEeMbwo",
    "block": "{\"symbols\":[\"api\",\"&default\",\"&attrs\",\"@rootEventType\",\"@preventScroll\",\"@contentComponent\",\"@triggerComponent\"],\"statements\":[[6,[37,5],[[30,[36,4],null,[[\"uniqueId\",\"isOpen\",\"disabled\",\"actions\",\"Trigger\",\"Content\"],[[32,0,[\"publicAPI\",\"uniqueId\"]],[32,0,[\"publicAPI\",\"isOpen\"]],[32,0,[\"publicAPI\",\"disabled\"]],[32,0,[\"publicAPI\",\"actions\"]],[30,[36,3],[[30,[36,2],[[32,7],\"basic-dropdown-trigger\"],null]],[[\"dropdown\",\"hPosition\",\"renderInPlace\",\"vPosition\"],[[30,[36,1],[[32,0,[\"publicAPI\"]]],null],[30,[36,1],[[32,0,[\"hPosition\"]]],null],[30,[36,1],[[32,0,[\"renderInPlace\"]]],null],[30,[36,1],[[32,0,[\"vPosition\"]]],null]]]],[30,[36,3],[[30,[36,2],[[32,6],\"basic-dropdown-content\"],null]],[[\"dropdown\",\"hPosition\",\"renderInPlace\",\"preventScroll\",\"rootEventType\",\"vPosition\",\"destination\",\"top\",\"left\",\"right\",\"width\",\"height\",\"otherStyles\"],[[30,[36,1],[[32,0,[\"publicAPI\"]]],null],[30,[36,1],[[32,0,[\"hPosition\"]]],null],[30,[36,1],[[32,0,[\"renderInPlace\"]]],null],[30,[36,1],[[32,5]],null],[30,[36,2],[[32,4],\"click\"],null],[30,[36,1],[[32,0,[\"vPosition\"]]],null],[30,[36,1],[[32,0,[\"destination\"]]],null],[30,[36,1],[[32,0,[\"top\"]]],null],[30,[36,1],[[32,0,[\"left\"]]],null],[30,[36,1],[[32,0,[\"right\"]]],null],[30,[36,1],[[32,0,[\"width\"]]],null],[30,[36,1],[[32,0,[\"height\"]]],null],[30,[36,1],[[32,0,[\"otherStyles\"]]],null]]]]]]]],null,[[\"default\"],[{\"statements\":[[6,[37,0],[[32,0,[\"renderInPlace\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[11,\"div\"],[24,0,\"ember-basic-dropdown\"],[17,3],[12],[18,2,[[32,1]]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[18,2,[[32,1]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[1]}]]]],\"hasEval\":false,\"upvars\":[\"if\",\"readonly\",\"or\",\"component\",\"hash\",\"with\"]}",
    "moduleName": "ghost-admin/components/gh-basic-dropdown.hbs"
  });

  let GhBasicDropdown = (_dec = Ember.inject.service, (_class = class GhBasicDropdown extends _basicDropdown.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "dropdown", _descriptor, this);

      this.dropdown.on('close', this, this.close);
    }

    willDestroy() {
      this.dropdown.off('close', this, this.close);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "dropdown", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(GhBasicDropdown, true);

  window.__CLASSIC_OWN_CLASSES__.set(GhBasicDropdown, true);

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhBasicDropdown);

  _exports.default = _default;
});
;define("ghost-admin/components/gh-benefit-item", ["exports", "ghost-admin/mixins/validation-state", "ghost-admin/utils/bound-one-way"], function (_exports, _validationState, _boundOneWay) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#unless this.benefitItem.isNew}}
      <span class="gh-blognav-grab">
          {{svg-jar "grab"}}
          <span class="sr-only">Reorder</span>
      </span>
  {{/unless}}
  
  <div class="gh-blognav-line {{unless this.name "placeholder"}}">
      {{svg-jar "check-2"}}
      <GhValidationStatusContainer
          @tagName="span"
          @class="gh-blognav-label"
          @errors={{this.benefitItem.errors}}
          @property="name"
          @hasValidated={{this.benefitItem.hasValidated}}
      >
          <GhTrimFocusInput
              @shouldFocus={{this.benefitItem.last}}
              @placeholder={{if this.isFreeProduct "Access to all public posts" "Expert analysis"}}
              @value={{readonly this.name}}
              @input={{action "updateLabel" value="target.value"}}
              @keyPress={{action "clearLabelErrors"}}
              @stopEnterKeyDownPropagation={{true}}
              @focus-out={{action "updateLabel" this.name}} data-test-input="name" />
          <GhErrorMessage
              @errors={{this.benefitItem.errors}}
              @property="name" data-test-error="name" />
      </GhValidationStatusContainer>
  </div>
  
  {{#if this.benefitItem.isNew}}
      <button type="button" class="gh-blognav-add" {{action "addItem" this.benefitItem}}>
          {{svg-jar "add"}}<span class="sr-only">Add</span>
      </button>
  {{else}}
      <button type="button" class="gh-blognav-delete" {{action "deleteItem" this.benefitItem}}>
          {{svg-jar "trash"}}<span class="sr-only">Delete</span>
      </button>
  {{/if}}
  
  */
  {
    "id": "Zy/9mfQ8",
    "block": "{\"symbols\":[],\"statements\":[[6,[37,2],[[32,0,[\"benefitItem\",\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"span\"],[14,0,\"gh-blognav-grab\"],[12],[2,\"\\n        \"],[1,[30,[36,1],[\"grab\"],null]],[2,\"\\n        \"],[10,\"span\"],[14,0,\"sr-only\"],[12],[2,\"Reorder\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[10,\"div\"],[15,0,[31,[\"gh-blognav-line \",[30,[36,2],[[32,0,[\"name\"]],\"placeholder\"],null]]]],[12],[2,\"\\n    \"],[1,[30,[36,1],[\"check-2\"],null]],[2,\"\\n    \"],[8,\"gh-validation-status-container\",[],[[\"@tagName\",\"@class\",\"@errors\",\"@property\",\"@hasValidated\"],[\"span\",\"gh-blognav-label\",[32,0,[\"benefitItem\",\"errors\"]],\"name\",[32,0,[\"benefitItem\",\"hasValidated\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[8,\"gh-trim-focus-input\",[[24,\"data-test-input\",\"name\"]],[[\"@shouldFocus\",\"@placeholder\",\"@value\",\"@input\",\"@keyPress\",\"@stopEnterKeyDownPropagation\",\"@focus-out\"],[[32,0,[\"benefitItem\",\"last\"]],[30,[36,3],[[32,0,[\"isFreeProduct\"]],\"Access to all public posts\",\"Expert analysis\"],null],[30,[36,4],[[32,0,[\"name\"]]],null],[30,[36,0],[[32,0],\"updateLabel\"],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"clearLabelErrors\"],null],true,[30,[36,0],[[32,0],\"updateLabel\",[32,0,[\"name\"]]],null]]],null],[2,\"\\n        \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"name\"]],[[\"@errors\",\"@property\"],[[32,0,[\"benefitItem\",\"errors\"]],\"name\"]],null],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"benefitItem\",\"isNew\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[11,\"button\"],[24,0,\"gh-blognav-add\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"addItem\",[32,0,[\"benefitItem\"]]],null],[12],[2,\"\\n        \"],[1,[30,[36,1],[\"add\"],null]],[10,\"span\"],[14,0,\"sr-only\"],[12],[2,\"Add\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[11,\"button\"],[24,0,\"gh-blognav-delete\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"deleteItem\",[32,0,[\"benefitItem\"]]],null],[12],[2,\"\\n        \"],[1,[30,[36,1],[\"trash\"],null]],[10,\"span\"],[14,0,\"sr-only\"],[12],[2,\"Delete\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"unless\",\"if\",\"readonly\"]}",
    "moduleName": "ghost-admin/components/gh-benefit-item.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend(_validationState.default, {
    classNames: 'gh-blognav-item',
    classNameBindings: ['errorClass', 'benefitItem.isNew::gh-blognav-item--sortable'],
    new: false,

    // closure actions
    addItem() {},

    deleteItem() {},

    updateLabel() {},

    name: (0, _boundOneWay.default)('benefitItem.name'),
    errors: Ember.computed.readOnly('benefitItem.errors'),
    errorClass: Ember.computed('hasError', function () {
      return this.hasError ? 'gh-blognav-item--error' : '';
    }),
    actions: {
      addItem(item) {
        this.addItem(item);
      },

      deleteItem(item) {
        this.deleteItem(item);
      },

      updateLabel(value) {
        this.set('name', value);
        return this.updateLabel(value, this.benefitItem);
      },

      clearLabelErrors() {
        if (this.get('benefitItem.errors')) {
          this.get('benefitItem.errors').remove('name');
        }
      }

    },

    keyPress(event) {
      // enter key
      if (event.keyCode === 13) {
        event.preventDefault();

        if (this.get('benefitItem.isNew')) {
          Ember.run.scheduleOnce('actions', this, this.send, 'addItem', this.benefitItem);
        } else {
          Ember.run.scheduleOnce('actions', this, this.send, 'focusItem', this.benefitItem);
        }
      }
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-billing-iframe", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <iframe id="billing-frame" class="billing-frame" frameborder="0"></iframe>
  */
  {
    "id": "RpnqqOsD",
    "block": "{\"symbols\":[],\"statements\":[[10,\"iframe\"],[14,1,\"billing-frame\"],[14,0,\"billing-frame\"],[14,\"frameborder\",\"0\"],[12],[13]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-billing-iframe.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    billing: Ember.inject.service(),
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),
    notifications: Ember.inject.service(),
    isOwner: null,
    fetchingSubscription: false,

    didInsertElement() {
      this._super(...arguments);

      this.billing.getBillingIframe().src = this.billing.getIframeURL();
      window.addEventListener('message', event => {
        if (event?.data) {
          if (event.data?.request === 'token') {
            this._handleTokenRequest();
          }

          if (event.data?.request === 'forceUpgradeInfo') {
            this._handleForceUpgradeRequest();
          }

          if (event.data?.subscription) {
            this._handleSubscriptionUpdate(event.data);
          }
        }
      });
    },

    _handleTokenRequest() {
      this.set('fetchingSubscription', false);
      let token;
      const ghostIdentityUrl = this.get('ghostPaths.url').api('identities');
      this.ajax.request(ghostIdentityUrl).then(response => {
        token = response && response.identities && response.identities[0] && response.identities[0].token;
        this.billing.getBillingIframe().contentWindow.postMessage({
          request: 'token',
          response: token
        }, '*');
        this.set('isOwner', true);
      }).catch(error => {
        if (error.payload?.errors && error.payload.errors[0]?.type === 'NoPermissionError') {
          // no permission means the current user requesting the token is not the owner of the site.
          this.set('isOwner', false); // Avoid letting the BMA waiting for a message and send an empty token response instead

          this.billing.getBillingIframe().contentWindow.postMessage({
            request: 'token',
            response: null
          }, '*');
        } else {
          throw error;
        }
      }); // NOTE: the handler is placed here to avoid additional logic to check if iframe has loaded
      //       receiving a 'token' request is an indication that page is ready

      if (!this.fetchingSubscription && !this.billing.get('subscription') && token) {
        this.set('fetchingSubscription', true);
        this.billing.getBillingIframe().contentWindow.postMessage({
          query: 'getSubscription',
          response: 'subscription'
        }, '*');
      }
    },

    _handleForceUpgradeRequest() {
      // Send BMA requested information about forceUpgrade and owner name/email
      let ownerUser = null;
      const owner = this.billing.ownerUser;

      if (owner) {
        ownerUser = {
          name: owner?.name,
          email: owner?.email
        };
      }

      this.billing.getBillingIframe().contentWindow.postMessage({
        request: 'forceUpgradeInfo',
        response: {
          forceUpgrade: this.config.get('hostSettings.forceUpgrade'),
          isOwner: this.isOwner,
          ownerUser
        }
      }, '*');
    },

    _handleSubscriptionUpdate(data) {
      this.billing.set('subscription', data.subscription);
      this.billing.set('checkoutRoute', data?.checkoutRoute || '/plans');

      if (data.subscription.status === 'active' && this.config.get('hostSettings.forceUpgrade')) {
        // config might not be updated after a subscription has been set to active.
        // Until then assume the forceUpgrade is over and the subscription
        // was activated successfully.
        this.config.set('hostSettings.forceUpgrade', false);
      } // Detect if the current subscription is in a grace state and render a notification


      if (data.subscription.status === 'past_due' || data.subscription.status === 'unpaid') {
        // This notification needs to be shown to every user regardless their permissions to see billing
        this.notifications.showAlert('Billing error: This site is queued for suspension. The owner of this site must update payment information.', {
          type: 'error',
          key: 'billing.overdue'
        });
      } else {
        this.notifications.closeAlerts('billing.overdue');
      } // Detect if the current member limits are exceeded and render a notification


      if (data?.exceededLimits && data?.exceededLimits.length && data?.exceededLimits.indexOf('members') >= 0 && data?.checkoutRoute) {
        // The action param will be picked up on a transition from the router and can
        // then send the destination route as a message to the BMA, which then handles the redirect.
        const checkoutAction = this.billing.get('billingRouteRoot') + '?action=checkout';
        this.notifications.showAlert(Ember.String.htmlSafe(`Your audience has grown! To continue publishing, the site owner must confirm pricing for this number of members <a href="${checkoutAction}">here</a>`), {
          type: 'warn',
          key: 'billing.exceeded'
        });
      } else {
        this.notifications.closeAlerts('billing.exceeded');
      }
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-billing-modal", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="{{this.visibilityClass}}">
      <div class="gh-billing-container">
          <GhBillingIframe></GhBillingIframe>
      </div>
  </div>
  */
  {
    "id": "lzYnLSWw",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[15,0,[31,[[32,0,[\"visibilityClass\"]]]]],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-billing-container\"],[12],[2,\"\\n        \"],[8,\"gh-billing-iframe\",[],[[],[]],[[\"default\"],[{\"statements\":[],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-billing-modal.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    billing: Ember.inject.service(),
    visibilityClass: Ember.computed('billingWindowOpen', function () {
      return this.billingWindowOpen ? 'gh-billing' : 'gh-billing closed';
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-billing-update-button", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if this.showUpgradeButton}}
      <button class="gh-btn gh-btn-green" {{action "openBilling"}}><span>Upgrade</span></button>
  {{/if}}
  
  */
  {
    "id": "u6WZOdt+",
    "block": "{\"symbols\":[],\"statements\":[[6,[37,1],[[32,0,[\"showUpgradeButton\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green\"],[4,[38,0],[[32,0],\"openBilling\"],null],[12],[10,\"span\"],[12],[2,\"Upgrade\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-billing-update-button.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    router: Ember.inject.service(),
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),
    billing: Ember.inject.service(),
    subscription: null,
    showUpgradeButton: Ember.computed.reads('billing.subscription.isActiveTrial'),
    actions: {
      openBilling() {
        this.billing.openBillingWindow(this.router.currentURL, '/pro/billing/plans');
      }

    }
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-blog-url", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{{this.config.blogUrl}}}
  */
  {
    "id": "PxxYavE9",
    "block": "{\"symbols\":[],\"statements\":[[2,[32,0,[\"config\",\"blogUrl\"]]]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-blog-url.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    config: Ember.inject.service(),
    tagName: ''
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-brand-settings-form", ["exports", "@glimmer/component", "ghost-admin/config/environment", "ghost-admin/components/gh-image-uploader", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _component, _environment, _ghImageUploader, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-stack" ...attributes>
      <div class="gh-stack-item gh-setting-first gh-accent-color">
          <div class="gh-setting-content">
              <div class="gh-setting-title">Accent color</div>
              <div class="gh-setting-desc">Primary color used in your publication theme</div>
              {{#each uploader.errors as |error|}}
                  <div class="gh-setting-error" data-test-error="icon">{{or error.context error.message}}</div>
              {{/each}}
              <div class="w-100 flex flex-column flex-row-ns">
                  <GhErrorMessage @errors={{settings.errors}} @property="accentColor" class="w-100 red"/>
              </div>
          </div>
  
          <div class="gh-setting-action" data-test-setting="accentColor">
              <GhFormGroup
                  @errors={{this.settings.errors}}
                  @hasValidated={{this.settings.hasValidated}}
                  @property="accentColor"
                  @class="input-color-form-group"
              >
                  <div class="input-color">
                      <input
                          type="text"
                          placeholder="15171A"
                          name="accent-color"
                          autocorrect="off"
                          maxlength="6"
                          value={{this.accentColor}}
                          class="gh-input"
                          {{on "input" (perform this.debounceUpdateAccentColor)}}
                          {{on "blur" this.updateAccentColor}}
                          {{on-key "Enter" this.blurElement}}
                          data-test-input="accentColor"
                      />
                      <div class="color-picker-horizontal-divider"></div>
                      <div
                          class="color-box-container"
                          style={{this.accentColorBgStlye}}
                      >
                          <input
                              type="color"
                              name="accent-color"
                              class="color-picker"
                              value="{{this.accentColorPickerValue}}"
                              {{on "input" (perform this.debounceUpdateAccentColor)}}
                          >
                      </div>
                  </div>
              </GhFormGroup>
          </div>
      </div>
  
      <div class="gh-stack-item gh-setting" data-test-setting="icon">
          <GhUploader
              @extensions={{this.iconExtensions}}
              @paramsHash={{hash purpose="icon"}}
              @onComplete={{fn this.imageUploaded "icon"}}
              as |uploader|
          >
          <div class="gh-setting-content">
              <div class="gh-setting-title">Publication icon</div>
              <div class="gh-setting-desc">A square, social icon used in the UI of your publication, at least 60x60px</div>
              {{#each uploader.errors as |error|}}
                  <div class="gh-setting-error" data-test-error="icon">{{or error.context error.message}}</div>
              {{/each}}
          </div>
          <div class="gh-setting-action gh-uploadbutton-container gh-setting-action-smallimg flex flex-column">
              {{#if uploader.isUploading}}
                  {{uploader.progressBar}}
              {{else if this.settings.icon}}
                  <div class="gh-branding-image-container transparent-bg">
                      <img class="blog-icon" src="{{this.settings.icon}}" {{on "click" this.triggerFileDialog}} alt="icon" data-test-icon-img>
                      <button type="button" class="gh-setting-action-smallimg-delete" {{on "click" (fn this.removeImage "icon")}} data-test-delete-image="icon">
                          {{svg-jar "trash" class="w4 h4 fill-white"}}
                      </button>
                  </div>
              {{else}}
                  <button type="button" class="gh-btn self-center" {{on "click" triggerFileDialog}} data-test-image-upload-btn="icon">
                      <span>Upload icon</span>
                  </button>
              {{/if}}
              <div style="display:none">
                  <GhFileInput @multiple={{false}} @action={{uploader.setFiles}} @accept={{this.iconMimeTypes}} data-test-file-input="icon" />
              </div>
          </div>
          </GhUploader>
      </div>
  
      <div class="gh-stack-item gh-setting" data-test-setting="logo">
          <GhUploader
              @extensions={{this.imageExtensions}}
              @onComplete={{fn this.imageUploaded "logo"}}
              as |uploader|
          >
          <div>
              <div class="gh-setting-title">Publication logo</div>
              <div class="gh-setting-desc mb3">The primary logo for your brand displayed across your theme, should be transparent and at least 600px x 72px</div>
  
              <div class="gh-setting-action gh-uploadbutton-container gh-setting-action-smallimg flex flex-column">
                  {{#each uploader.errors as |error|}}
                      <div class="gh-setting-error" data-test-error="logo">{{or error.context error.message}}</div>
                  {{/each}}
                  {{#if uploader.isUploading}}
                      {{uploader.progressBar}}
                  {{else if this.settings.logo}}
                      <div class="gh-branding-image-container largeimg justify-center transparent-bg">
                          <img class="blog-logo" src="{{this.settings.logo}}" {{on "click" this.triggerFileDialog}} alt="logo" data-test-logo-img>
                          <button type="button" class="gh-setting-action-smallimg-delete" {{on "click" (fn this.removeImage "logo")}} data-test-delete-image="logo">
                              {{svg-jar "trash" class="w4 h4 fill-white"}}
                          </button>
                      </div>
                  {{else}}
                      <button type="button" class="gh-btn self-start" {{on "click" this.triggerFileDialog}} data-test-image-upload-btn="logo">
                          <span>Upload logo</span>
                      </button>
                  {{/if}}
                  <div style="display:none">
                      <GhFileInput @multiple={{false}} @action={{uploader.setFiles}} @accept={{this.imageMimeTypes}} data-test-file-input="logo" />
                  </div>
              </div>
          </div>
          </GhUploader>
      </div>
  
      <div class="gh-stack-item gh-setting" data-test-setting="coverImage">
          <GhUploader
              @extensions={{this.imageExtensions}}
              @onComplete={{fn this.imageUploaded "coverImage"}}
              as |uploader|
          >
          <div>
              <div class="gh-setting-title">Publication cover</div>
              <div class="gh-setting-desc mb3">An optional large background image for your site</div>
              {{#each uploader.errors as |error|}}
                  <div class="gh-setting-error" data-test-error="coverImage">{{or error.context error.message}}</div>
              {{/each}}
  
              <div class="gh-setting-action gh-uploadbutton-container flex flex-column items-stretch">
                  {{#if uploader.isUploading}}
                      {{uploader.progressBar}}
                  {{else if this.settings.coverImage}}
                      <div class="gh-branding-image-container largeimg justify-start">
                          <img class="blog-cover" src="{{this.settings.coverImage}}" {{on "click" this.triggerFileDialog}} alt="cover photo" data-test-cover-img>
                          <button type="button" class="gh-setting-action-largeimg-delete" {{on "click" (fn this.removeImage "coverImage")}} data-test-delete-image="coverImage">
                              {{svg-jar "trash" class="w4 h4 fill-white"}}
                          </button>
                      </div>
                  {{else}}
                      <button type="button" class="gh-btn self-start" {{on "click" this.triggerFileDialog}} data-test-image-upload-btn="coverImage">
                          <span>Upload cover</span>
                      </button>
                  {{/if}}
                  <div style="display:none">
                      <GhFileInput @multiple={{false}} @action={{uploader.setFiles}} @accept={{this.imageMimeTypes}} data-test-file-input="coverImage" />
                  </div>
              </div>
          </div>
          </GhUploader>
      </div>
  </div>
  */
  {
    "id": "riTgk0eE",
    "block": "{\"symbols\":[\"uploader\",\"error\",\"uploader\",\"error\",\"uploader\",\"error\",\"error\",\"&attrs\"],\"statements\":[[11,\"div\"],[24,0,\"gh-stack\"],[17,8],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting-first gh-accent-color\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-setting-content\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Accent color\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-desc\"],[12],[2,\"Primary color used in your publication theme\"],[13],[2,\"\\n\"],[6,[37,8],[[30,[36,7],[[30,[36,7],[[35,6,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-setting-error\"],[14,\"data-test-error\",\"icon\"],[12],[1,[30,[36,4],[[32,7,[\"context\"]],[32,7,[\"message\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[7]}]]],[2,\"            \"],[10,\"div\"],[14,0,\"w-100 flex flex-column flex-row-ns\"],[12],[2,\"\\n                \"],[8,\"gh-error-message\",[[24,0,\"w-100 red\"]],[[\"@errors\",\"@property\"],[[34,9,[\"errors\"]],\"accentColor\"]],null],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-setting-action\"],[14,\"data-test-setting\",\"accentColor\"],[12],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@class\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"accentColor\",\"input-color-form-group\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"div\"],[14,0,\"input-color\"],[12],[2,\"\\n                    \"],[11,\"input\"],[24,\"placeholder\",\"15171A\"],[24,3,\"accent-color\"],[24,\"autocorrect\",\"off\"],[24,\"maxlength\",\"6\"],[16,2,[32,0,[\"accentColor\"]]],[24,0,\"gh-input\"],[24,\"data-test-input\",\"accentColor\"],[24,4,\"text\"],[4,[38,0],[\"input\",[30,[36,10],[[32,0,[\"debounceUpdateAccentColor\"]]],null]],null],[4,[38,0],[\"blur\",[32,0,[\"updateAccentColor\"]]],null],[4,[38,11],[\"Enter\",[32,0,[\"blurElement\"]]],null],[12],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"color-picker-horizontal-divider\"],[12],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"color-box-container\"],[15,5,[32,0,[\"accentColorBgStlye\"]]],[12],[2,\"\\n                        \"],[11,\"input\"],[24,3,\"accent-color\"],[24,0,\"color-picker\"],[16,2,[31,[[32,0,[\"accentColorPickerValue\"]]]]],[24,4,\"color\"],[4,[38,0],[\"input\",[30,[36,10],[[32,0,[\"debounceUpdateAccentColor\"]]],null]],null],[12],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting\"],[14,\"data-test-setting\",\"icon\"],[12],[2,\"\\n        \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@paramsHash\",\"@onComplete\"],[[32,0,[\"iconExtensions\"]],[30,[36,12],null,[[\"purpose\"],[\"icon\"]]],[30,[36,1],[[32,0,[\"imageUploaded\"]],\"icon\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-setting-content\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Publication icon\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-desc\"],[12],[2,\"A square, social icon used in the UI of your publication, at least 60x60px\"],[13],[2,\"\\n\"],[6,[37,8],[[30,[36,7],[[30,[36,7],[[32,5,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-setting-error\"],[14,\"data-test-error\",\"icon\"],[12],[1,[30,[36,4],[[32,6,[\"context\"]],[32,6,[\"message\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[6]}]]],[2,\"        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-setting-action gh-uploadbutton-container gh-setting-action-smallimg flex flex-column\"],[12],[2,\"\\n\"],[6,[37,3],[[32,5,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[1,[32,5,[\"progressBar\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[32,0,[\"settings\",\"icon\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-branding-image-container transparent-bg\"],[12],[2,\"\\n                    \"],[11,\"img\"],[24,0,\"blog-icon\"],[16,\"src\",[31,[[32,0,[\"settings\",\"icon\"]]]]],[24,\"alt\",\"icon\"],[24,\"data-test-icon-img\",\"\"],[4,[38,0],[\"click\",[32,0,[\"triggerFileDialog\"]]],null],[12],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-setting-action-smallimg-delete\"],[24,\"data-test-delete-image\",\"icon\"],[24,4,\"button\"],[4,[38,0],[\"click\",[30,[36,1],[[32,0,[\"removeImage\"]],\"icon\"],null]],null],[12],[2,\"\\n                        \"],[1,[30,[36,2],[\"trash\"],[[\"class\"],[\"w4 h4 fill-white\"]]]],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[11,\"button\"],[24,0,\"gh-btn self-center\"],[24,\"data-test-image-upload-btn\",\"icon\"],[24,4,\"button\"],[4,[38,0],[\"click\",[35,5]],null],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Upload icon\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"            \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"icon\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[32,5,[\"setFiles\"]],[32,0,[\"iconMimeTypes\"]]]],null],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"]],\"parameters\":[5]}]]],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting\"],[14,\"data-test-setting\",\"logo\"],[12],[2,\"\\n        \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@onComplete\"],[[32,0,[\"imageExtensions\"]],[30,[36,1],[[32,0,[\"imageUploaded\"]],\"logo\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Publication logo\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-desc mb3\"],[12],[2,\"The primary logo for your brand displayed across your theme, should be transparent and at least 600px x 72px\"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-setting-action gh-uploadbutton-container gh-setting-action-smallimg flex flex-column\"],[12],[2,\"\\n\"],[6,[37,8],[[30,[36,7],[[30,[36,7],[[32,3,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-setting-error\"],[14,\"data-test-error\",\"logo\"],[12],[1,[30,[36,4],[[32,4,[\"context\"]],[32,4,[\"message\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[4]}]]],[6,[37,3],[[32,3,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[1,[32,3,[\"progressBar\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[32,0,[\"settings\",\"logo\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-branding-image-container largeimg justify-center transparent-bg\"],[12],[2,\"\\n                        \"],[11,\"img\"],[24,0,\"blog-logo\"],[16,\"src\",[31,[[32,0,[\"settings\",\"logo\"]]]]],[24,\"alt\",\"logo\"],[24,\"data-test-logo-img\",\"\"],[4,[38,0],[\"click\",[32,0,[\"triggerFileDialog\"]]],null],[12],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-setting-action-smallimg-delete\"],[24,\"data-test-delete-image\",\"logo\"],[24,4,\"button\"],[4,[38,0],[\"click\",[30,[36,1],[[32,0,[\"removeImage\"]],\"logo\"],null]],null],[12],[2,\"\\n                            \"],[1,[30,[36,2],[\"trash\"],[[\"class\"],[\"w4 h4 fill-white\"]]]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn self-start\"],[24,\"data-test-image-upload-btn\",\"logo\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"triggerFileDialog\"]]],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Upload logo\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                    \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"logo\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[32,3,[\"setFiles\"]],[32,0,[\"imageMimeTypes\"]]]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"]],\"parameters\":[3]}]]],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting\"],[14,\"data-test-setting\",\"coverImage\"],[12],[2,\"\\n        \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@onComplete\"],[[32,0,[\"imageExtensions\"]],[30,[36,1],[[32,0,[\"imageUploaded\"]],\"coverImage\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Publication cover\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-desc mb3\"],[12],[2,\"An optional large background image for your site\"],[13],[2,\"\\n\"],[6,[37,8],[[30,[36,7],[[30,[36,7],[[32,1,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-setting-error\"],[14,\"data-test-error\",\"coverImage\"],[12],[1,[30,[36,4],[[32,2,[\"context\"]],[32,2,[\"message\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-action gh-uploadbutton-container flex flex-column items-stretch\"],[12],[2,\"\\n\"],[6,[37,3],[[32,1,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[1,[32,1,[\"progressBar\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[32,0,[\"settings\",\"coverImage\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-branding-image-container largeimg justify-start\"],[12],[2,\"\\n                        \"],[11,\"img\"],[24,0,\"blog-cover\"],[16,\"src\",[31,[[32,0,[\"settings\",\"coverImage\"]]]]],[24,\"alt\",\"cover photo\"],[24,\"data-test-cover-img\",\"\"],[4,[38,0],[\"click\",[32,0,[\"triggerFileDialog\"]]],null],[12],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-setting-action-largeimg-delete\"],[24,\"data-test-delete-image\",\"coverImage\"],[24,4,\"button\"],[4,[38,0],[\"click\",[30,[36,1],[[32,0,[\"removeImage\"]],\"coverImage\"],null]],null],[12],[2,\"\\n                            \"],[1,[30,[36,2],[\"trash\"],[[\"class\"],[\"w4 h4 fill-white\"]]]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn self-start\"],[24,\"data-test-image-upload-btn\",\"coverImage\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"triggerFileDialog\"]]],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Upload cover\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                    \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"coverImage\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[32,1,[\"setFiles\"]],[32,0,[\"imageMimeTypes\"]]]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"]],\"parameters\":[1]}]]],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\",\"fn\",\"svg-jar\",\"if\",\"or\",\"triggerFileDialog\",\"uploader\",\"-track-array\",\"each\",\"settings\",\"perform\",\"on-key\",\"hash\"]}",
    "moduleName": "ghost-admin/components/gh-brand-settings-form.hbs"
  });

  let GhBrandSettingsFormComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember._action, _dec7 = Ember._action, _dec8 = Ember._action, _dec9 = Ember._action, _dec10 = Ember._action, _dec11 = (0, _emberConcurrencyDecorators.task)({
    restartable: true
  }), (_class = class GhBrandSettingsFormComponent extends _component.default {
    get accentColor() {
      const color = this.settings.get('accentColor');

      if (color && color[0] === '#') {
        return color.slice(1);
      }

      return color;
    }

    get accentColorPickerValue() {
      return this.settings.get('accentColor') || '#ffffff';
    }

    get accentColorBgStyle() {
      return Ember.String.htmlSafe(`background-color: ${this.accentColorPickerValue}`);
    }

    get previewData() {
      const params = new URLSearchParams();
      params.append('c', this.accentColorPickerValue);
      params.append('icon', this.settings.get('icon'));
      params.append('logo', this.settings.get('logo'));
      params.append('cover', this.settings.get('coverImage'));
      return params.toString();
    }

    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ajax", _descriptor, this);

      _initializerDefineProperty(this, "config", _descriptor2, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor3, this);

      _initializerDefineProperty(this, "settings", _descriptor4, this);

      _initializerDefineProperty(this, "frontend", _descriptor5, this);

      _defineProperty(this, "iconExtensions", _ghImageUploader.ICON_EXTENSIONS);

      _defineProperty(this, "iconMimeTypes", _ghImageUploader.ICON_MIME_TYPES);

      _defineProperty(this, "imageExtensions", _ghImageUploader.IMAGE_EXTENSIONS);

      _defineProperty(this, "imageMimeTypes", _ghImageUploader.IMAGE_MIME_TYPES);

      this.updatePreviewTask.perform();
    }

    willDestroy() {
      super.willDestroy?.(...arguments);
      this.settings.errors.remove('accentColor');
      this.settings.rollbackAttributes();
    }

    triggerFileDialog(_ref2) {
      let {
        target
      } = _ref2;
      target.closest('.gh-setting-action')?.querySelector('input[type="file"]')?.click();
    }

    async imageUploaded(property, results) {
      if (results[0]) {
        this.settings.set(property, results[0].url);
        this.updatePreviewTask.perform();
      }
    }

    async removeImage(imageName) {
      this.settings.set(imageName, '');
      this.updatePreviewTask.perform();
    }

    blurElement(event) {
      event.preventDefault();
      event.target.blur();
    }

    async updateAccentColor(event) {
      let newColor = event.target.value;
      const oldColor = this.settings.get('accentColor'); // reset errors and validation

      this.settings.errors.remove('accentColor');
      this.settings.hasValidated.removeObject('accentColor');

      if (newColor === '') {
        if (newColor === oldColor) {
          return;
        } // Don't allow empty accent color


        this.settings.errors.add('accentColor', 'Please select an accent color');
        this.settings.hasValidated.pushObject('accentColor');
        return;
      } // accentColor will be null unless the user has input something


      if (!newColor) {
        newColor = oldColor;
      }

      if (newColor[0] !== '#') {
        newColor = `#${newColor}`;
      }

      if (newColor.match(/#[0-9A-Fa-f]{6}$/)) {
        if (newColor === oldColor) {
          return;
        }

        this.settings.set('accentColor', newColor);
        this.updatePreviewTask.perform();
      } else {
        this.settings.errors.add('accentColor', 'Please enter a color in hex format');
        this.settings.hasValidated.pushObject('accentColor');
      }
    }

    *debounceUpdateAccentColor(event) {
      yield (0, _emberConcurrency.timeout)(500);
      this.updateAccentColor(event);
    }

    *updatePreviewTask() {
      // skip during testing because we don't have mocks for the front-end
      if (_environment.default.environment === 'test') {
        return;
      }

      const previewResponse = yield this.frontend.fetch('/', {
        method: 'POST',
        headers: {
          'Content-Type': 'text/html;charset=utf-8',
          'x-ghost-preview': this.previewData,
          Accept: 'text/plain'
        }
      });
      const previewContents = yield previewResponse.text(); // inject extra CSS to disable navigation and prevent clicks

      const injectedCss = `html { pointer-events: none; }`;
      const domParser = new DOMParser();
      const htmlDoc = domParser.parseFromString(previewContents, 'text/html');
      const stylesheet = htmlDoc.querySelector('style');
      const originalCSS = stylesheet.innerHTML;
      stylesheet.innerHTML = `${originalCSS}\n\n${injectedCss}`;
      const doctype = new XMLSerializer().serializeToString(htmlDoc.doctype);
      const html = doctype + htmlDoc.documentElement.outerHTML; // replace the iframe contents with the doctored preview html

      this.args.replacePreviewContents(html);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "frontend", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "triggerFileDialog", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "triggerFileDialog"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "imageUploaded", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "imageUploaded"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "removeImage", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "removeImage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "blurElement", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "blurElement"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateAccentColor", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "updateAccentColor"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "debounceUpdateAccentColor", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "debounceUpdateAccentColor"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updatePreviewTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "updatePreviewTask"), _class.prototype)), _class));
  _exports.default = GhBrandSettingsFormComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhBrandSettingsFormComponent);
});
;define("ghost-admin/components/gh-browser-preview", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    
  
  <div class="gh-browserpreview-previewcontainer" ...attributes>
      <div class="gh-browserpreview-browser">
          <div class="tabs">
              <ul><li></li><li></li><li></li></ul>
              <div>
                  {{#if @icon}}
                      <span class="favicon"><img src={{@icon}} alt="icon"></span>
                  {{else}}
                      <span class="favicon default">{{svg-jar "default-favicon"}}</span>
                  {{/if}}
                  <span class="site-title">{{@title}}</span>
              </div>
          </div>
      </div>
      <div class="gh-browserpreview-iframecontainer">
          {{yield}}
      </div>
  </div>
  */
  {
    "id": "8mxMtso6",
    "block": "{\"symbols\":[\"@icon\",\"&attrs\",\"@title\",\"&default\"],\"statements\":[[2,\"\\n\\n\"],[11,\"div\"],[24,0,\"gh-browserpreview-previewcontainer\"],[17,2],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-browserpreview-browser\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"tabs\"],[12],[2,\"\\n            \"],[10,\"ul\"],[12],[10,\"li\"],[12],[13],[10,\"li\"],[12],[13],[10,\"li\"],[12],[13],[13],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n\"],[6,[37,1],[[32,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"span\"],[14,0,\"favicon\"],[12],[10,\"img\"],[15,\"src\",[32,1]],[14,\"alt\",\"icon\"],[12],[13],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[10,\"span\"],[14,0,\"favicon default\"],[12],[1,[30,[36,0],[\"default-favicon\"],null]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[10,\"span\"],[14,0,\"site-title\"],[12],[1,[32,3]],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-browserpreview-iframecontainer\"],[12],[2,\"\\n        \"],[18,4,null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-browser-preview.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-canvas-header", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div
      {{did-insert (action "initScrollWatch")}}
      {{will-destroy (action "clearScrollWatch")}}
      ...attributes
  >
      <header class="gh-canvas-header-content">
          {{yield}}
      </header>
  </div>
  */
  {
    "id": "d6l4mIfS",
    "block": "{\"symbols\":[\"&attrs\",\"&default\"],\"statements\":[[11,\"div\"],[17,1],[4,[38,1],[[30,[36,0],[[32,0],\"initScrollWatch\"],null]],null],[4,[38,2],[[30,[36,0],[[32,0],\"clearScrollWatch\"],null]],null],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"gh-canvas-header-content\"],[12],[2,\"\\n        \"],[18,2,null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"action\",\"did-insert\",\"will-destroy\"]}",
    "moduleName": "ghost-admin/components/gh-canvas-header.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    tagName: '',
    actions: {
      initScrollWatch(element) {
        this._onScroll = Ember.run.bind(this, this.onScroll, element);
        this._scrollContainer = element.closest('.gh-main');

        if (this._scrollContainer) {
          this._scrollContainer.addEventListener('scroll', this._onScroll, {
            passive: true
          });
        }
      },

      clearScrollWatch() {
        if (this._scrollContainer) {
          this._scrollContainer.removeEventListener('scroll', this._onScroll);
        }
      }

    },

    onScroll(element) {
      if (this._isSticky && this._scrollContainer.scrollTop < 10) {
        element.classList.remove('gh-canvas-header--sticky');
        this._isSticky = false;
      } else if (!this._isSticky && this._scrollContainer.scrollTop > 10) {
        element.classList.add('gh-canvas-header--sticky');
        this._isSticky = true;
      }
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-cm-editor", ["exports", "ghost-admin/utils/bound-one-way", "ember-concurrency"], function (_exports, _boundOneWay, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{!-- display a standard textarea whilst waiting for CodeMirror to load/initialize --}}
  <GhTextarea
      @class={{concat "gh-cm-editor-textarea " this.textareaClass}}
      @value={{readonly this._value}}
      @input={{action "updateFromTextarea" value="target.value"}}
  />
  
  */
  {
    "id": "RBJCUHDq",
    "block": "{\"symbols\":[],\"statements\":[[8,\"gh-textarea\",[],[[\"@class\",\"@value\",\"@input\"],[[30,[36,0],[\"gh-cm-editor-textarea \",[32,0,[\"textareaClass\"]]],null],[30,[36,1],[[32,0,[\"_value\"]]],null],[30,[36,2],[[32,0],\"updateFromTextarea\"],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"concat\",\"readonly\",\"action\"]}",
    "moduleName": "ghost-admin/components/gh-cm-editor.hbs"
  });
  /* global CodeMirror */


  const CmEditorComponent = Ember.Component.extend({
    lazyLoader: Ember.inject.service(),
    classNameBindings: ['isFocused:focus'],
    textareaClass: '',
    isFocused: false,
    // options for the editor
    autofocus: false,
    indentUnit: 4,
    lineNumbers: true,
    lineWrapping: false,
    mode: 'htmlmixed',
    theme: 'xq-light',
    _editor: null,
    // reference to CodeMirror editor
    // Allowed actions
    'focus-in': () => {},
    update: () => {},
    _value: (0, _boundOneWay.default)('value'),

    // make sure a value exists
    didReceiveAttrs() {
      this._super(...arguments);

      if (this._value === null || undefined) {
        this.set('_value', '');
      }

      if (this.mode !== this._lastMode && this._editor) {
        this._editor.setOption('mode', this.mode);
      }

      this._lastMode = this.mode;
    },

    didInsertElement() {
      this._super(...arguments);

      this.initCodeMirror.perform();
    },

    willDestroyElement() {
      this._super(...arguments); // Ensure the editor exists before trying to destroy it. This fixes
      // an error that occurs if codemirror hasn't finished loading before
      // the component is destroyed.


      if (this._editor) {
        let editor = this._editor.getWrapperElement();

        editor.parentNode.removeChild(editor);
        this._editor = null;
      }
    },

    actions: {
      updateFromTextarea(value) {
        this.update(value);
      }

    },
    initCodeMirror: (0, _emberConcurrency.task)(function* () {
      let loader = this.lazyLoader;
      yield loader.loadScript('codemirror', 'assets/codemirror/codemirror.js');
      Ember.run.scheduleOnce('afterRender', this, this._initCodeMirror);
    }),

    _initCodeMirror() {
      let options = this.getProperties('lineNumbers', 'lineWrapping', 'indentUnit', 'mode', 'theme', 'autofocus');
      Ember.assign(options, {
        value: this._value
      });
      let textarea = this.element.querySelector('textarea');

      if (textarea && textarea === document.activeElement) {
        options.autofocus = true;
      }

      this._editor = new CodeMirror.fromTextArea(textarea, options); // by default CodeMirror will place the cursor at the beginning of the
      // content, it makes more sense for the cursor to be at the end

      if (options.autofocus) {
        this._editor.setCursor(this._editor.lineCount(), 0);
      } // events


      this._setupCodeMirrorEventHandler('focus', this, this._focus);

      this._setupCodeMirrorEventHandler('blur', this, this._blur);

      this._setupCodeMirrorEventHandler('change', this, this._update);
    },

    _setupCodeMirrorEventHandler(event, target, method) {
      let callback = Ember.run.bind(target, method);

      this._editor.on(event, callback);

      this.one('willDestroyElement', this, function () {
        this._editor.off(event, callback);
      });
    },

    _update(codeMirror, changeObj) {
      Ember.run.once(this, this.update, codeMirror.getValue(), codeMirror, changeObj);
    },

    _focus(codeMirror, event) {
      this.set('isFocused', true);
      Ember.run.once(this, this['focus-in'], codeMirror.getValue(), codeMirror, event);
    },

    _blur() {
      this.set('isFocused', false);
    }

  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, CmEditorComponent);

  _exports.default = _default;
});
;define("ghost-admin/components/gh-content-cover", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    ui: Ember.inject.service(),
    classNames: ['content-cover'],

    click() {
      this.ui.closeMenus();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-contentfilter", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-contentfilter view-actions-bottom-row" ...attributes>
      {{#unless @currentUser.isContributor}}
          <div class="gh-contentfilter-menu gh-contentfilter-type {{if @selectedType.value "gh-contentfilter-selected"}}" data-test-type-select="true">
              <PowerSelect
                  @selected={{@selectedType}}
                  @options={{@availableTypes}}
                  @searchEnabled={{false}}
                  @onChange={{@onTypeChange}}
                  @triggerComponent="gh-power-select/trigger"
                  @triggerClass="gh-contentfilter-menu-trigger"
                  @dropdownClass="gh-contentfilter-menu-dropdown"
                  @matchTriggerWidth={{false}}
                  as |type|
              >
                  {{#if type.name}}{{type.name}}{{else}}<span class="red">Unknown type</span>{{/if}}
              </PowerSelect>
          </div>
      {{/unless}}
  
      <div class="gh-contentfilter-menu gh-contentfilter-visibility {{if @selectedVisibility.value "gh-contentfilter-selected"}}" data-test-visibility-select="true">
          <PowerSelect
              @selected={{@selectedVisibility}}
              @options={{@availableVisibilities}}
              @searchEnabled={{false}}
              @onChange={{@onVisibilityChange}}
              @triggerComponent="gh-power-select/trigger"
              @triggerClass="gh-contentfilter-menu-trigger"
              @dropdownClass="gh-contentfilter-menu-dropdown"
              @matchTriggerWidth={{false}}
              as |visibility|
          >
              {{#if visibility.name}}{{visibility.name}}{{else}}<span class="red">Unknown visibility</span>{{/if}}
          </PowerSelect>
      </div>
  
      {{#unless @currentUser.isAuthorOrContributor}}
          <div class="gh-contentfilter-menu gh-contentfilter-author {{if @selectedAuthor.slug "gh-contentfilter-selected"}}" data-test-author-select="true">
              <PowerSelect
                  @selected={{@selectedAuthor}}
                  @options={{@availableAuthors}}
                  @searchField="name"
                  @onChange={{@onAuthorChange}}
                  @triggerComponent="gh-power-select/trigger"
                  @triggerClass="gh-contentfilter-menu-trigger"
                  @dropdownClass="gh-contentfilter-menu-dropdown"
                  @searchPlaceholder="Search authors"
                  @matchTriggerWidth={{false}}
                  as |author|
              >
                  {{#if author.name}}{{author.name}}{{else}}<span class="red">Unknown author</span>{{/if}}
              </PowerSelect>
          </div>
      {{/unless}}
  
      {{#unless @currentUser.isContributor}}
          <div class="gh-contentfilter-menu gh-contentfilter-tag {{if @selectedTag.slug "gh-contentfilter-selected"}}" data-test-tag-select="true">
              <PowerSelect
                  @selected={{@selectedTag}}
                  @options={{@availableTags}}
                  @searchField="name"
                  @onChange={{@onTagChange}}
                  @triggerComponent="gh-power-select/trigger"
                  @triggerClass="gh-contentfilter-menu-trigger"
                  @dropdownClass="gh-contentfilter-menu-dropdown"
                  @searchPlaceholder="Search tags"
                  @matchTriggerWidth={{false}}
                  @optionsComponent="power-select-vertical-collection-options"
                  as |tag|
              >
                  {{#if tag.name}}{{tag.name}}{{else}}<span class="red">Unknown tag</span>{{/if}}
              </PowerSelect>
          </div>
      {{/unless}}
  
      <div class="gh-contentfilter-menu gh-contentfilter-sort" data-test-order-select="true">
          <PowerSelect
              @selected={{@selectedOrder}}
              @options={{@availableOrders}}
              @searchEnabled={{false}}
              @onChange={{@onOrderChange}}
              @triggerComponent="gh-power-select/trigger"
              @triggerClass="gh-contentfilter-menu-trigger"
              @dropdownClass="gh-contentfilter-menu-dropdown"
              @matchTriggerWidth={{false}}
              as |order|
          >
              {{#if order.name}}{{order.name}}{{else}}<span class="red">Unknown</span>{{/if}}
          </PowerSelect>
      </div>
  
      {{#if this.showCustomViewManagement}}
          <div class="dropdown gh-contentfilter-menu gh-contentfilter-actions">
              {{#if this.customViews.activeView}}
                  <button
                      type="button"
                      class="gh-contentfilter-menu-trigger gh-contentfilter-button gh-btn-save-view"
                      title="Edit current view..."
                      data-test-button="edit-view"
                      {{on "click" this.customViews.toggleFormModal}}
                  >
                      {{svg-jar "edit-view"}}
                  </button>
              {{else}}
                  <button
                      type="button"
                      class="gh-contentfilter-menu-trigger gh-contentfilter-button gh-btn-save-view"
                      title="Save as view..."
                      data-test-button="add-view"
                      {{on "click" this.customViews.toggleFormModal}}
                  >
                      {{svg-jar "add-view"}}
                  </button>
              {{/if}}
          </div>
      {{/if}}
  </div>
  */
  {
    "id": "hJhr8xYO",
    "block": "{\"symbols\":[\"order\",\"tag\",\"author\",\"visibility\",\"type\",\"@selectedTag\",\"@availableTags\",\"@onTagChange\",\"@selectedAuthor\",\"@availableAuthors\",\"@onAuthorChange\",\"@selectedType\",\"@availableTypes\",\"@onTypeChange\",\"&attrs\",\"@currentUser\",\"@selectedVisibility\",\"@availableVisibilities\",\"@onVisibilityChange\",\"@selectedOrder\",\"@availableOrders\",\"@onOrderChange\"],\"statements\":[[11,\"div\"],[24,0,\"gh-contentfilter view-actions-bottom-row\"],[17,15],[12],[2,\"\\n\"],[6,[37,3],[[32,16,[\"isContributor\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[15,0,[31,[\"gh-contentfilter-menu gh-contentfilter-type \",[30,[36,2],[[32,12,[\"value\"]],\"gh-contentfilter-selected\"],null]]]],[14,\"data-test-type-select\",\"true\"],[12],[2,\"\\n            \"],[8,\"power-select\",[],[[\"@selected\",\"@options\",\"@searchEnabled\",\"@onChange\",\"@triggerComponent\",\"@triggerClass\",\"@dropdownClass\",\"@matchTriggerWidth\"],[[32,12],[32,13],false,[32,14],\"gh-power-select/trigger\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[6,[37,2],[[32,5,[\"name\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,[32,5,[\"name\"]]]],\"parameters\":[]},{\"statements\":[[10,\"span\"],[14,0,\"red\"],[12],[2,\"Unknown type\"],[13]],\"parameters\":[]}]]],[2,\"\\n            \"]],\"parameters\":[5]}]]],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"div\"],[15,0,[31,[\"gh-contentfilter-menu gh-contentfilter-visibility \",[30,[36,2],[[32,17,[\"value\"]],\"gh-contentfilter-selected\"],null]]]],[14,\"data-test-visibility-select\",\"true\"],[12],[2,\"\\n        \"],[8,\"power-select\",[],[[\"@selected\",\"@options\",\"@searchEnabled\",\"@onChange\",\"@triggerComponent\",\"@triggerClass\",\"@dropdownClass\",\"@matchTriggerWidth\"],[[32,17],[32,18],false,[32,19],\"gh-power-select/trigger\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[6,[37,2],[[32,4,[\"name\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,[32,4,[\"name\"]]]],\"parameters\":[]},{\"statements\":[[10,\"span\"],[14,0,\"red\"],[12],[2,\"Unknown visibility\"],[13]],\"parameters\":[]}]]],[2,\"\\n        \"]],\"parameters\":[4]}]]],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,16,[\"isAuthorOrContributor\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[15,0,[31,[\"gh-contentfilter-menu gh-contentfilter-author \",[30,[36,2],[[32,9,[\"slug\"]],\"gh-contentfilter-selected\"],null]]]],[14,\"data-test-author-select\",\"true\"],[12],[2,\"\\n            \"],[8,\"power-select\",[],[[\"@selected\",\"@options\",\"@searchField\",\"@onChange\",\"@triggerComponent\",\"@triggerClass\",\"@dropdownClass\",\"@searchPlaceholder\",\"@matchTriggerWidth\"],[[32,9],[32,10],\"name\",[32,11],\"gh-power-select/trigger\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"Search authors\",false]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[6,[37,2],[[32,3,[\"name\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,[32,3,[\"name\"]]]],\"parameters\":[]},{\"statements\":[[10,\"span\"],[14,0,\"red\"],[12],[2,\"Unknown author\"],[13]],\"parameters\":[]}]]],[2,\"\\n            \"]],\"parameters\":[3]}]]],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,3],[[32,16,[\"isContributor\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[15,0,[31,[\"gh-contentfilter-menu gh-contentfilter-tag \",[30,[36,2],[[32,6,[\"slug\"]],\"gh-contentfilter-selected\"],null]]]],[14,\"data-test-tag-select\",\"true\"],[12],[2,\"\\n            \"],[8,\"power-select\",[],[[\"@selected\",\"@options\",\"@searchField\",\"@onChange\",\"@triggerComponent\",\"@triggerClass\",\"@dropdownClass\",\"@searchPlaceholder\",\"@matchTriggerWidth\",\"@optionsComponent\"],[[32,6],[32,7],\"name\",[32,8],\"gh-power-select/trigger\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"Search tags\",false,\"power-select-vertical-collection-options\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[6,[37,2],[[32,2,[\"name\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,[32,2,[\"name\"]]]],\"parameters\":[]},{\"statements\":[[10,\"span\"],[14,0,\"red\"],[12],[2,\"Unknown tag\"],[13]],\"parameters\":[]}]]],[2,\"\\n            \"]],\"parameters\":[2]}]]],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-contentfilter-menu gh-contentfilter-sort\"],[14,\"data-test-order-select\",\"true\"],[12],[2,\"\\n        \"],[8,\"power-select\",[],[[\"@selected\",\"@options\",\"@searchEnabled\",\"@onChange\",\"@triggerComponent\",\"@triggerClass\",\"@dropdownClass\",\"@matchTriggerWidth\"],[[32,20],[32,21],false,[32,22],\"gh-power-select/trigger\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[6,[37,2],[[32,1,[\"name\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,[32,1,[\"name\"]]]],\"parameters\":[]},{\"statements\":[[10,\"span\"],[14,0,\"red\"],[12],[2,\"Unknown\"],[13]],\"parameters\":[]}]]],[2,\"\\n        \"]],\"parameters\":[1]}]]],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"showCustomViewManagement\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"dropdown gh-contentfilter-menu gh-contentfilter-actions\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"customViews\",\"activeView\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[11,\"button\"],[24,0,\"gh-contentfilter-menu-trigger gh-contentfilter-button gh-btn-save-view\"],[24,\"title\",\"Edit current view...\"],[24,\"data-test-button\",\"edit-view\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"customViews\",\"toggleFormModal\"]]],null],[12],[2,\"\\n                    \"],[1,[30,[36,1],[\"edit-view\"],null]],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[11,\"button\"],[24,0,\"gh-contentfilter-menu-trigger gh-contentfilter-button gh-btn-save-view\"],[24,\"title\",\"Save as view...\"],[24,\"data-test-button\",\"add-view\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"customViews\",\"toggleFormModal\"]]],null],[12],[2,\"\\n                    \"],[1,[30,[36,1],[\"add-view\"],null]],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13]],\"hasEval\":false,\"upvars\":[\"on\",\"svg-jar\",\"if\",\"unless\"]}",
    "moduleName": "ghost-admin/components/gh-contentfilter.hbs"
  });

  let GhContentfilterComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, (_class = class GhContentfilterComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "customViews", _descriptor, this);

      _initializerDefineProperty(this, "feature", _descriptor2, this);

      _initializerDefineProperty(this, "router", _descriptor3, this);
    }

    get showCustomViewManagement() {
      let isAdmin = Ember.get(this.args.currentUser || {}, 'isAdmin');
      let onPostsScreen = this.router.currentRouteName === 'posts';
      let isDefaultView = this.customViews?.activeView?.isDefault;
      let hasFilter = this.args.selectedType.value || this.args.selectedVisibility.value || this.args.selectedAuthor.slug || this.args.selectedTag.slug || this.args.selectedOrder.value;
      return isAdmin && onPostsScreen && !isDefaultView && hasFilter;
    }

    calculateActionsDropdownPosition(trigger, content) {
      let {
        top,
        left,
        width,
        height
      } = trigger.getBoundingClientRect(); // content.firstElementChild is required because we use .dropdown-menu which is absolute positioned

      let {
        width: contentWidth
      } = content.firstElementChild.getBoundingClientRect();
      let style = {
        left: left + width - contentWidth,
        top: top + height + 5
      };
      return {
        style
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "customViews", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = GhContentfilterComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhContentfilterComponent);
});
;define("ghost-admin/components/gh-custom-view-title", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <h2 class="gh-canvas-title" data-test-screen-title>
      <LinkTo @route={{this.router.currentRouteName}} @query={{@query}}>{{or @title "No @title provided"}}</LinkTo>
      {{#if this.customViews.activeView}}
          <span>{{svg-jar "arrow-right"}}</span>
          <span class="truncate">{{this.customViews.activeView.name}}</span>
      {{/if}}
  </h2>
  */
  {
    "id": "hwLAPjvI",
    "block": "{\"symbols\":[\"@query\",\"@title\"],\"statements\":[[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n    \"],[8,\"link-to\",[],[[\"@route\",\"@query\"],[[32,0,[\"router\",\"currentRouteName\"]],[32,1]]],[[\"default\"],[{\"statements\":[[1,[30,[36,1],[[32,2],\"No @title provided\"],null]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,0,[\"customViews\",\"activeView\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n        \"],[10,\"span\"],[14,0,\"truncate\"],[12],[1,[32,0,[\"customViews\",\"activeView\",\"name\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"or\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-custom-view-title.hbs"
  });

  let GhCustomViewTitleComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, (_class = class GhCustomViewTitleComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "customViews", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "customViews", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = GhCustomViewTitleComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhCustomViewTitleComponent);
});
;define("ghost-admin/components/gh-date-time-picker", ["exports", "moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-date-time-picker">
      <PowerDatepicker
          @selected={{this._date}}
          @center={{this._date}}
          @onSelect={{action "setDate" value="date"}}
          @renderInPlace={{true}}
          @disabled={{this.disabled}} as |dp|
      >
          <dp.Trigger @tabindex="-1" data-test-date-time-picker-datepicker={{true}}>
              <div class="gh-date-time-picker-date {{if this.dateError "error"}}">
                  <input type="text"
                      placeholder={{this.dateFormat}}
                      value={{readonly this.dateValue}}
                      disabled={{this.disabled}}
                      {{on "input" (fn this.onDateInput dp)}}
                      {{on "blur" this.onDateBlur}}
                      {{on "keydown" (fn this.onDateKeydown dp)}}
                      data-test-date-time-picker-date-input>
                  {{svg-jar "calendar"}}
              </div>
          </dp.Trigger>
          <dp.Content class="dropdown-menu">
              <dp.Nav />
              <dp.Days @minDate={{this._minDate}} @maxDate={{this._maxDate}} @weekdayFormat="min" />
          </dp.Content>
      </PowerDatepicker>
  
      <div class="gh-date-time-picker-time {{if this.hasError "error"}}">
          <input
              type="text"
              value={{this._time}}
              disabled={{this.disabled}}
              oninput={{action (mut this._time) value="target.value"}}
              onblur={{action "setTime" this._time}}
              {{did-insert this.registerTimeInput}}
              data-test-date-time-picker-time-input
          >
          <small class="gh-date-time-picker-timezone">({{this.timezone}})</small>
      </div>
  </div>
  {{#if this.hasError}}
      <div class="gh-date-time-picker-error" data-test-date-time-picker-error>{{this.dateError}}{{this.timeError}}</div>
  {{/if}}
  
  */
  {
    "id": "ye16Oyh5",
    "block": "{\"symbols\":[\"dp\"],\"statements\":[[10,\"div\"],[14,0,\"gh-date-time-picker\"],[12],[2,\"\\n    \"],[8,\"power-datepicker\",[],[[\"@selected\",\"@center\",\"@onSelect\",\"@renderInPlace\",\"@disabled\"],[[32,0,[\"_date\"]],[32,0,[\"_date\"]],[30,[36,0],[[32,0],\"setDate\"],[[\"value\"],[\"date\"]]],true,[32,0,[\"disabled\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[8,[32,1,[\"Trigger\"]],[[16,\"data-test-date-time-picker-datepicker\",true]],[[\"@tabindex\"],[\"-1\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"div\"],[15,0,[31,[\"gh-date-time-picker-date \",[30,[36,1],[[32,0,[\"dateError\"]],\"error\"],null]]]],[12],[2,\"\\n                \"],[11,\"input\"],[16,\"placeholder\",[32,0,[\"dateFormat\"]]],[16,2,[30,[36,2],[[32,0,[\"dateValue\"]]],null]],[16,\"disabled\",[32,0,[\"disabled\"]]],[24,\"data-test-date-time-picker-date-input\",\"\"],[24,4,\"text\"],[4,[38,4],[\"input\",[30,[36,3],[[32,0,[\"onDateInput\"]],[32,1]],null]],null],[4,[38,4],[\"blur\",[32,0,[\"onDateBlur\"]]],null],[4,[38,4],[\"keydown\",[30,[36,3],[[32,0,[\"onDateKeydown\"]],[32,1]],null]],null],[12],[13],[2,\"\\n                \"],[1,[30,[36,5],[\"calendar\"],null]],[2,\"\\n            \"],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[8,[32,1,[\"Content\"]],[[24,0,\"dropdown-menu\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[8,[32,1,[\"Nav\"]],[],[[],[]],null],[2,\"\\n            \"],[8,[32,1,[\"Days\"]],[],[[\"@minDate\",\"@maxDate\",\"@weekdayFormat\"],[[32,0,[\"_minDate\"]],[32,0,[\"_maxDate\"]],\"min\"]],null],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n    \"]],\"parameters\":[1]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[15,0,[31,[\"gh-date-time-picker-time \",[30,[36,1],[[32,0,[\"hasError\"]],\"error\"],null]]]],[12],[2,\"\\n        \"],[11,\"input\"],[16,2,[32,0,[\"_time\"]]],[16,\"disabled\",[32,0,[\"disabled\"]]],[16,\"oninput\",[30,[36,0],[[32,0],[30,[36,6],[[32,0,[\"_time\"]]],null]],[[\"value\"],[\"target.value\"]]]],[16,\"onblur\",[30,[36,0],[[32,0],\"setTime\",[32,0,[\"_time\"]]],null]],[24,\"data-test-date-time-picker-time-input\",\"\"],[24,4,\"text\"],[4,[38,7],[[32,0,[\"registerTimeInput\"]]],null],[12],[13],[2,\"\\n        \"],[10,\"small\"],[14,0,\"gh-date-time-picker-timezone\"],[12],[2,\"(\"],[1,[32,0,[\"timezone\"]]],[2,\")\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[6,[37,1],[[32,0,[\"hasError\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"gh-date-time-picker-error\"],[14,\"data-test-date-time-picker-error\",\"\"],[12],[1,[32,0,[\"dateError\"]]],[1,[32,0,[\"timeError\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"if\",\"readonly\",\"fn\",\"on\",\"svg-jar\",\"mut\",\"did-insert\"]}",
    "moduleName": "ghost-admin/components/gh-date-time-picker.hbs"
  });

  const DATE_FORMAT = 'YYYY-MM-DD';

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    settings: Ember.inject.service(),
    tagName: '',
    date: '',
    dateFormat: DATE_FORMAT,
    time: '',
    errors: null,
    dateErrorProperty: null,
    timeErrorProperty: null,
    isActive: true,
    _time: '',
    _previousTime: '',
    _minDate: null,
    _maxDate: null,
    _scratchDate: null,
    _scratchDateError: null,

    // actions
    setTypedDateError() {},

    blogTimezone: Ember.computed.reads('settings.timezone'),
    hasError: Ember.computed.or('dateError', 'timeError'),
    dateValue: Ember.computed('_date', '_scratchDate', function () {
      if (this._scratchDate !== null) {
        return this._scratchDate;
      } else {
        return (0, _moment.default)(this._date).format(DATE_FORMAT);
      }
    }),
    timezone: Ember.computed('blogTimezone', function () {
      let blogTimezone = this.blogTimezone;
      return _moment.default.utc().tz(blogTimezone).format('z');
    }),
    dateError: Ember.computed('errors.[]', 'dateErrorProperty', '_scratchDateError', function () {
      if (this._scratchDateError) {
        return this._scratchDateError;
      }

      let errors = this.errors;
      let property = this.dateErrorProperty;

      if (errors && !Ember.isEmpty(errors.errorsFor(property))) {
        return errors.errorsFor(property).get('firstObject').message;
      }

      return '';
    }),
    timeError: Ember.computed('errors.[]', 'timeErrorProperty', function () {
      let errors = this.errors;
      let property = this.timeErrorProperty;

      if (errors && !Ember.isEmpty(errors.errorsFor(property))) {
        return errors.errorsFor(property).get('firstObject').message;
      }

      return '';
    }),

    didReceiveAttrs() {
      this._super(...arguments);

      let date = this.date;
      let time = this.time;
      let minDate = this.minDate;
      let maxDate = this.maxDate;
      let blogTimezone = this.blogTimezone;

      if (!Ember.isBlank(date)) {
        this.set('_date', (0, _moment.default)(date));
      } else {
        this.set('_date', (0, _moment.default)().tz(blogTimezone));
      } // reset scratch date if the component becomes inactive
      // (eg, PSM is closed, or save type is changed away from scheduled)


      if (!this.isActive && this._lastIsActive) {
        this._resetScratchDate();
      }

      this._lastIsActive = this.isActive; // reset scratch date if date is changed externally

      if ((date && date.valueOf()) !== (this._lastDate && this._lastDate.valueOf())) {
        this._resetScratchDate();
      }

      this._lastDate = this.date;

      if (Ember.isBlank(time)) {
        this.set('_time', (0, _moment.default)(this._date).format('HH:mm'));
      } else {
        this.set('_time', this.time);
      }

      this.set('_previousTime', this._time); // unless min/max date is at midnight moment will diable that day

      if (minDate === 'now') {
        this.set('_minDate', (0, _moment.default)((0, _moment.default)().format(DATE_FORMAT)));
      } else if (!Ember.isBlank(minDate)) {
        this.set('_minDate', (0, _moment.default)((0, _moment.default)(minDate).format(DATE_FORMAT)));
      } else {
        this.set('_minDate', null);
      }

      if (maxDate === 'now') {
        this.set('_maxDate', (0, _moment.default)((0, _moment.default)().format(DATE_FORMAT)));
      } else if (!Ember.isBlank(maxDate)) {
        this.set('_maxDate', (0, _moment.default)((0, _moment.default)(maxDate).format(DATE_FORMAT)));
      } else {
        this.set('_maxDate', null);
      }
    },

    willDestroyElement() {
      this._super(...arguments);

      this.setTypedDateError(null);
    },

    actions: {
      // if date or time is set and the other property is blank set that too
      // so that we don't get "can't be blank" errors
      setDate(date) {
        if (date !== this._date) {
          this.setDate(date);

          if (Ember.isBlank(this.time)) {
            this.setTime(this._time);
          }
        }
      },

      setTime(time) {
        if (time.match(/^\d:\d\d$/)) {
          time = `0${time}`;
        }

        if (time !== this._previousTime) {
          this.setTime(time);
          this.set('_previousTime', time);

          if (Ember.isBlank(this.date)) {
            this.setDate(this._date);
          }
        }
      }

    },
    registerTimeInput: Ember._action(function (elem) {
      this._timeInputElem = elem;
    }),
    onDateInput: Ember._action(function (datepicker, event) {
      let skipFocus = true;
      datepicker.actions.close(event, skipFocus);
      this.set('_scratchDate', event.target.value);
    }),
    onDateBlur: Ember._action(function (event) {
      // make sure we're not doing anything just because the calendar dropdown
      // is opened and clicked
      if (event.target.value === (0, _moment.default)(this._date).format('YYYY-MM-DD')) {
        this._resetScratchDate();

        return;
      }

      if (!event.target.value) {
        this._resetScratchDate();
      } else {
        this._setDate(event.target.value);
      }
    }),
    onDateKeydown: Ember._action(function (datepicker, event) {
      if (event.key === 'Escape') {
        this._resetScratchDate();
      }

      if (event.key === 'Enter') {
        this._setDate(event.target.value);

        event.preventDefault();
        event.stopImmediatePropagation();
        datepicker.actions.close();
      } // close the dropdown and manually focus the time input if necessary
      // so that keyboard focus behaves as expected


      if (event.key === 'Tab' && datepicker.isOpen) {
        datepicker.actions.close(); // manual focus is required because the dropdown is rendered in place
        // and the default browser behaviour will move focus to the dropdown
        // which is then removed from the DOM making it look like focus has
        // disappeared. Shift+Tab is fine because the DOM is not changing in
        // that direction

        if (!event.shiftKey && this._timeInputElem) {
          event.preventDefault();

          this._timeInputElem.focus();

          this._timeInputElem.select();
        }
      } // capture a Ctrl/Cmd+S combo to make sure that the model value is updated
      // before the save occurs or we abort the save if the value is invalid


      if (event.key === 's' && (event.ctrlKey || event.metaKey)) {
        let wasValid = this._setDate(event.target.value);

        if (!wasValid) {
          event.stopImmediatePropagation();
          event.preventDefault();
        }
      }
    }),

    // internal methods
    _resetScratchDate() {
      this.set('_scratchDate', null);

      this._setScratchDateError(null);
    },

    _setDate(dateStr) {
      if (!dateStr.match(/^\d\d\d\d-\d\d-\d\d$/)) {
        this._setScratchDateError('Invalid date format, must be YYYY-MM-DD');

        return false;
      }

      let date = (0, _moment.default)(dateStr, DATE_FORMAT);

      if (!date.isValid()) {
        this._setScratchDateError('Invalid date');

        return false;
      }

      this.send('setDate', date.toDate());

      this._resetScratchDate();

      return true;
    },

    _setScratchDateError(error) {
      this.set('_scratchDateError', error);
      this.setTypedDateError(error);
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-distribution-action-select", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <span class="gh-publishmenu-select">
      <PowerSelect
          @options={{this.availablePublishActions}}
          @renderInPlace={{true}}
          @selected={{this.distributionValue}}
          @onChange={{this.setDistributionAction}}
          @searchEnabled={{false}}
          @id="publish-action"
          @name="publish-action"
          @triggerComponent="gh-power-select/trigger"
          @triggerClass="ember-power-select-inline"
          @dropdownClass="gh-publishmenu-select-dropdown"
          as |availablePublishAction|
      >
          {{availablePublishAction.name}}
      </PowerSelect>
  </span>
  */
  {
    "id": "QGhPP20q",
    "block": "{\"symbols\":[\"availablePublishAction\"],\"statements\":[[10,\"span\"],[14,0,\"gh-publishmenu-select\"],[12],[2,\"\\n    \"],[8,\"power-select\",[],[[\"@options\",\"@renderInPlace\",\"@selected\",\"@onChange\",\"@searchEnabled\",\"@id\",\"@name\",\"@triggerComponent\",\"@triggerClass\",\"@dropdownClass\"],[[32,0,[\"availablePublishActions\"]],true,[32,0,[\"distributionValue\"]],[32,0,[\"setDistributionAction\"]],false,\"publish-action\",\"publish-action\",\"gh-power-select/trigger\",\"ember-power-select-inline\",\"gh-publishmenu-select-dropdown\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[1,[32,1,[\"name\"]]],[2,\"\\n    \"]],\"parameters\":[1]}]]],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-distribution-action-select.hbs"
  });

  let GhDistributionActionSelect = (_dec = Ember._action, (_class = class GhDistributionActionSelect extends _component.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "availablePublishActions", [{
        value: 'publish_send',
        name: 'publish & send'
      }, {
        value: 'publish',
        name: 'publish'
      }, {
        value: 'send',
        name: 'send'
      }]);
    }

    get distributionValue() {
      return this.availablePublishActions.findBy('value', this.args.distributionAction);
    }

    setDistributionAction(newAction) {
      this.args.setDistributionAction(newAction.value);
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "setDistributionAction", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "setDistributionAction"), _class.prototype)), _class));
  _exports.default = GhDistributionActionSelect;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhDistributionActionSelect);
});
;define("ghost-admin/components/gh-dropdown-button", ["exports", "ghost-admin/mixins/dropdown-mixin"], function (_exports, _dropdownMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend(_dropdownMixin.default, {
    dropdown: Ember.inject.service(),
    tagName: 'button',
    attributeBindings: ['href', 'role', 'type'],
    role: 'button',
    // matches with the dropdown this button toggles
    dropdownName: null,
    type: Ember.computed(function () {
      return this.tagName === 'button' ? 'button' : null;
    }),

    // Notify dropdown service this dropdown should be toggled
    click(event) {
      this._super(event);

      this.dropdown.toggleDropdown(this.dropdownName, this);

      if (this.tagName === 'a') {
        return false;
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-dropdown", ["exports", "ghost-admin/mixins/dropdown-mixin"], function (_exports, _dropdownMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend(_dropdownMixin.default, {
    dropdown: Ember.inject.service(),
    classNames: 'dropdown',
    classNameBindings: ['fadeIn:fade-in-scale:fade-out', 'isOpen:open:closed'],
    name: null,
    closeOnClick: false,
    // Helps track the user re-opening the menu while it's fading out.
    closing: false,
    // Helps track whether the dropdown is open or closes, or in a transition to either
    isOpen: false,

    onClose() {},

    // Managed the toggle between the fade-in and fade-out classes
    fadeIn: Ember.computed('isOpen', 'closing', function () {
      return this.isOpen && !this.closing;
    }),

    didInsertElement() {
      this._super(...arguments);

      let dropdownService = this.dropdown;
      dropdownService.on('close', this, this.close);
      dropdownService.on('toggle', this, this.toggle);
      this._animationEndHandler = Ember.run.bind(this, function (event) {
        if (event.animationName === 'fade-out' && this.closing) {
          this.set('isOpen', false);
          this.set('closing', false);
          this.onClose?.();
        }
      });
      this.element.addEventListener('animationend', this._animationEndHandler);
    },

    willDestroyElement() {
      this._super(...arguments);

      let dropdownService = this.dropdown;
      dropdownService.off('close', this, this.close);
      dropdownService.off('toggle', this, this.toggle);
      this.element.removeEventListener('animationend', this._animationEndHandler);
    },

    open() {
      this.set('isOpen', true);
      this.set('closing', false);
      this.set('button.isOpen', true);
    },

    close() {
      this.set('closing', true);

      if (this.button) {
        this.set('button.isOpen', false);
      }
    },

    // Called by the dropdown service when any dropdown button is clicked.
    toggle(options) {
      let isClosing = this.closing;
      let isOpen = this.isOpen;
      let name = this.name;
      let targetDropdownName = options.target;
      let button = this.button;

      if (name === targetDropdownName && (!isOpen || isClosing)) {
        if (!button) {
          button = options.button;
          this.set('button', button);
        }

        this.open();
      } else if (isOpen) {
        this.close();
      }
    },

    click(event) {
      this._super(event);

      if (this.closeOnClick) {
        return this.close();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-editor-feature-image", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div
      class="gh-editor-feature-image-container"
      {{on "mouseover" (fn (mut this.isHovered) true)}}
      {{on "mouseleave" (fn (mut this.isHovered) false)}}
  >
      <GhUploader
          @extensions={{this.imageExtensions}}
          @onComplete={{this.setUploadedImage}}
          as |uploader|
      >
          {{#unless @image}}
              <div
                  class="gh-editor-feature-image-dropzone"
                  {{on "dragover" this.dragOver}}
                  {{on "dragleave" this.dragLeave}}
                  {{on "drop" (fn this.drop uploader.setFiles)}}
              ></div>
          {{/unless}}
  
          {{#if this.canDrop}}
              <div class="gh-editor-feature-image-drop-indicator bg-green br-pill pe-none"></div>
          {{/if}}
  
          {{#if uploader.isUploading}}
              {{!-- upload in progress --}}
              {{uploader.progressBar}}
          {{else if uploader.errors}}
              {{!-- upload failed --}}
              {{#each uploader.errors as |error|}}
                  <div class="gh-setting-error" data-test-error="feature-image">
                      {{or error.context error.message}}
                      <button type="button" class="ml2 b" {{on "click" uploader.cancel}}>Reintentar</button>
                  </div>
              {{/each}}
          {{else if @image}}
              {{!-- image is present --}}
              <span class="gh-editor-feature-image-indicator" data-tooltip="Una imagen destacada es publicamente visible para cualquier persona">
                  {{svg-jar "feature-image"}}
              </span>
              <div class="gh-editor-feature-image">
                  <img src={{@image}}>
                  <button type="button" class="image-delete" title="Eliminar imagen" {{on "click" @clearImage}}>
                      {{svg-jar "trash"}}
                  </button>
              </div>
              <div class="flex justify-between align-center">
                  {{#if this.isEditingAlt}}
                      <input
                          type="text"
                          placeholder="Add alt text to the feature image"
                          class="gh-editor-feature-image-alttext"
                          name="alt"
                          value={{@alt}}
                          {{autofocus}}
                          {{on "input" this.onAltInput}}
                      >
                  {{else}}
                      <KoenigBasicHtmlInput
                          @html={{@caption}}
                          @placeholder={{if this.captionInputFocused "" "Agrega un subtitulo a la imagen destacada"}}
                          @class="gh-editor-feature-image-caption"
                          @name="caption"
                          @onChange={{@updateCaption}}
                          @onFocus={{fn (mut this.captionInputFocused) true}}
                          @onBlur={{fn (mut this.captionInputFocused) false}}
                      />
                  {{/if}}
                  <button
                      title="Toggle between editing alt text and caption"
                      class="h-100 pl1 pr1 ba br3 f8 sans-serif fw4 lh-title tracked-2 {{if this.isEditingAlt "bg-green b--green white" "bg-white b--midlightgrey midlightgrey"}}"
                      {{on "click" this.toggleAltEditing passive=true}}
                  >
                      Alt
                  </button>
              </div>
          {{else}}
              {{!-- no-image state --}}
              <div class="flex flex-row items-center {{if this.hideButton "invisible"}}">
                  {{#if this.canDrop}}
                      <div class="gh-editor-feature-image-add-button"><span>Arrastre para subir una imagen destacada</span></div>
                  {{else}}
                      <button type="button" class="gh-editor-feature-image-add-button" {{on "click" uploader.triggerFileDialog}}>{{svg-jar "plus"}}<span>Agregar imagen destacada</span></button>
                      {{#if this.settings.unsplash}}
                          <button type="button" class="gh-editor-feature-image-unsplash" {{on "click" this.toggleUnsplashSelector}}>{{svg-jar "unsplash"}}</button>
                      {{/if}}
                  {{/if}}
              </div>
          {{/if}}
  
          <div style="display:none">
              <GhFileInput
                  @multiple={{false}}
                  @action={{uploader.setFiles}}
                  @accept={{uploader.imageMimeTypes}}
                  @onInsert={{uploader.registerFileInput}}
                  data-test-file-input="feature-image" />
          </div>
      </GhUploader>
  </div>
  
  {{#if this.showUnsplashSelector}}
      <GhUnsplash
          @select={{this.setUnsplashImage}}
          @close={{this.toggleUnsplashSelector}}
      />
  {{/if}}
  
  */
  {
    "id": "rgp7DWqA",
    "block": "{\"symbols\":[\"uploader\",\"error\",\"@caption\",\"@updateCaption\",\"@alt\",\"@image\",\"@clearImage\"],\"statements\":[[11,\"div\"],[24,0,\"gh-editor-feature-image-container\"],[4,[38,0],[\"mouseover\",[30,[36,4],[[30,[36,3],[[32,0,[\"isHovered\"]]],null],true],null]],null],[4,[38,0],[\"mouseleave\",[30,[36,4],[[30,[36,3],[[32,0,[\"isHovered\"]]],null],false],null]],null],[12],[2,\"\\n    \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@onComplete\"],[[32,0,[\"imageExtensions\"]],[32,0,[\"setUploadedImage\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,9],[[32,6]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[11,\"div\"],[24,0,\"gh-editor-feature-image-dropzone\"],[4,[38,0],[\"dragover\",[32,0,[\"dragOver\"]]],null],[4,[38,0],[\"dragleave\",[32,0,[\"dragLeave\"]]],null],[4,[38,0],[\"drop\",[30,[36,4],[[32,0,[\"drop\"]],[32,1,[\"setFiles\"]]],null]],null],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,0,[\"canDrop\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-editor-feature-image-drop-indicator bg-green br-pill pe-none\"],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,1,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[1,[32,1,[\"progressBar\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[32,1,[\"errors\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,8],[[30,[36,7],[[30,[36,7],[[32,1,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-setting-error\"],[14,\"data-test-error\",\"feature-image\"],[12],[2,\"\\n                    \"],[1,[30,[36,6],[[32,2,[\"context\"]],[32,2,[\"message\"]]],null]],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"ml2 b\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,1,[\"cancel\"]]],null],[12],[2,\"Reintentar\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[2]}]]]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[32,6]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"gh-editor-feature-image-indicator\"],[14,\"data-tooltip\",\"Una imagen destacada es publicamente visible para cualquier persona\"],[12],[2,\"\\n                \"],[1,[30,[36,1],[\"feature-image\"],null]],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-editor-feature-image\"],[12],[2,\"\\n                \"],[10,\"img\"],[15,\"src\",[32,6]],[12],[13],[2,\"\\n                \"],[11,\"button\"],[24,0,\"image-delete\"],[24,\"title\",\"Eliminar imagen\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,7]],null],[12],[2,\"\\n                    \"],[1,[30,[36,1],[\"trash\"],null]],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"flex justify-between align-center\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"isEditingAlt\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[11,\"input\"],[24,\"placeholder\",\"Add alt text to the feature image\"],[24,0,\"gh-editor-feature-image-alttext\"],[24,3,\"alt\"],[16,2,[32,5]],[24,4,\"text\"],[4,[38,5],null,null],[4,[38,0],[\"input\",[32,0,[\"onAltInput\"]]],null],[12],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[8,\"koenig-basic-html-input\",[],[[\"@html\",\"@placeholder\",\"@class\",\"@name\",\"@onChange\",\"@onFocus\",\"@onBlur\"],[[32,3],[30,[36,2],[[32,0,[\"captionInputFocused\"]],\"\",\"Agrega un subtitulo a la imagen destacada\"],null],\"gh-editor-feature-image-caption\",\"caption\",[32,4],[30,[36,4],[[30,[36,3],[[32,0,[\"captionInputFocused\"]]],null],true],null],[30,[36,4],[[30,[36,3],[[32,0,[\"captionInputFocused\"]]],null],false],null]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[11,\"button\"],[24,\"title\",\"Toggle between editing alt text and caption\"],[16,0,[31,[\"h-100 pl1 pr1 ba br3 f8 sans-serif fw4 lh-title tracked-2 \",[30,[36,2],[[32,0,[\"isEditingAlt\"]],\"bg-green b--green white\",\"bg-white b--midlightgrey midlightgrey\"],null]]]],[4,[38,0],[\"click\",[32,0,[\"toggleAltEditing\"]]],[[\"passive\"],[true]]],[12],[2,\"\\n                    Alt\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"div\"],[15,0,[31,[\"flex flex-row items-center \",[30,[36,2],[[32,0,[\"hideButton\"]],\"invisible\"],null]]]],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"canDrop\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-editor-feature-image-add-button\"],[12],[10,\"span\"],[12],[2,\"Arrastre para subir una imagen destacada\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-editor-feature-image-add-button\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,1,[\"triggerFileDialog\"]]],null],[12],[1,[30,[36,1],[\"plus\"],null]],[10,\"span\"],[12],[2,\"Agregar imagen destacada\"],[13],[13],[2,\"\\n\"],[6,[37,2],[[32,0,[\"settings\",\"unsplash\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[11,\"button\"],[24,0,\"gh-editor-feature-image-unsplash\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"toggleUnsplashSelector\"]]],null],[12],[1,[30,[36,1],[\"unsplash\"],null]],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n        \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n        \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n            \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"feature-image\"]],[[\"@multiple\",\"@action\",\"@accept\",\"@onInsert\"],[false,[32,1,[\"setFiles\"]],[32,1,[\"imageMimeTypes\"]],[32,1,[\"registerFileInput\"]]]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[1]}]]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"showUnsplashSelector\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-unsplash\",[],[[\"@select\",\"@close\"],[[32,0,[\"setUnsplashImage\"]],[32,0,[\"toggleUnsplashSelector\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"on\",\"svg-jar\",\"if\",\"mut\",\"fn\",\"autofocus\",\"or\",\"-track-array\",\"each\",\"unless\"]}",
    "moduleName": "ghost-admin/components/gh-editor-feature-image.hbs"
  });

  let GhEditorFeatureImageComponent = (_dec = Ember.inject.service, _dec2 = Ember._tracked, _dec3 = Ember._tracked, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._action, _dec8 = Ember._action, _dec9 = Ember._action, _dec10 = Ember._action, _dec11 = Ember._action, _dec12 = Ember._action, _dec13 = Ember._action, _dec14 = Ember._action, (_class = class GhEditorFeatureImageComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "settings", _descriptor, this);

      _initializerDefineProperty(this, "isEditingAlt", _descriptor2, this);

      _initializerDefineProperty(this, "isHovered", _descriptor3, this);

      _initializerDefineProperty(this, "captionInputFocused", _descriptor4, this);

      _initializerDefineProperty(this, "showUnsplashSelector", _descriptor5, this);

      _initializerDefineProperty(this, "canDrop", _descriptor6, this);
    }

    get hideButton() {
      return !this.canDrop && !this.isHovered && !this.args.forceButtonDisplay;
    }

    setUploadedImage(results) {
      if (results[0]) {
        this.args.updateImage(results[0].url);
      }
    }

    setUnsplashImage(_ref2) {
      let {
        src,
        caption
      } = _ref2;
      this.args.updateImage(src);
      this.args.updateCaption(caption);
    }

    toggleUnsplashSelector() {
      this.showUnsplashSelector = !this.showUnsplashSelector;
    }

    toggleAltEditing() {
      this.isEditingAlt = !this.isEditingAlt;
    }

    onAltInput(event) {
      this.args.updateAlt(event.target.value);
    }

    dragOver(event) {
      if (!event.dataTransfer.files) {
        return;
      } // this is needed to work around inconsistencies with dropping files
      // from Chrome's downloads bar


      if (navigator.userAgent.indexOf('Chrome') > -1) {
        let eA = event.dataTransfer.effectAllowed;
        event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
      } // event.stopPropagation();


      event.preventDefault();
      this.canDrop = true;
    }

    dragLeave(event) {
      if (!event.dataTransfer.files) {
        return;
      }

      event.preventDefault();
      this.canDrop = false;
    }

    drop(setFiles, event) {
      if (!event.dataTransfer.files) {
        return;
      }

      event.stopPropagation();
      event.preventDefault();
      this.canDrop = false;
      setFiles(event.dataTransfer.files);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "isEditingAlt", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "isHovered", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "captionInputFocused", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "showUnsplashSelector", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "canDrop", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setUploadedImage", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "setUploadedImage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setUnsplashImage", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "setUnsplashImage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleUnsplashSelector", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "toggleUnsplashSelector"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleAltEditing", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "toggleAltEditing"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onAltInput", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "onAltInput"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "dragOver", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "dragOver"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "dragLeave", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, "dragLeave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "drop", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "drop"), _class.prototype)), _class));
  _exports.default = GhEditorFeatureImageComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhEditorFeatureImageComponent);
});
;define("ghost-admin/components/gh-editor-post-status", ["exports", "@glimmer/component", "ghost-admin/config/environment", "ghost-admin/helpers/gh-format-post-time", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _component, _environment, _ghFormatPostTime, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div data-test-editor-post-status ...attributes>
      {{#if this.isSaving}}
          Guardando...
      {{else if @post.isSent}}
          Enviado a {{gh-pluralize @post.email.emailCount "member"}}
      {{else if (and @post.emailOnly @post.isScheduled)}}
          <time datetime="{{@post.publishedAtUTC}}" class="ml1 green f8" data-test-schedule-countdown>
              Sera enviado a <GhRecipientFilterCount @filter={{@post.emailRecipientFilter}} />
              {{this.scheduledTime}}
          </time>
      {{else if (or @post.isPublished @post.pastScheduledTime)}}
          Publicado
          {{#if (or (eq @post.email.status "submitting") (eq @post.email.status "submitting"))}}
              y enviando a {{gh-pluralize @post.email.emailCount "member"}}
          {{else if (eq @post.email.status "submitted")}}
              y enviado a {{gh-pluralize @post.email.emailCount "member"}}
          {{/if}}
      {{else if @post.isScheduled}}
          <time datetime="{{@post.publishedAtUTC}}" class="ml1 green f8" data-test-schedule-countdown>
              Sera publicado
              {{#if (and @post.emailRecipientFilter (not @post.email))}}
                  y enviado a <GhRecipientFilterCount @filter={{@post.emailRecipientFilter}} />
              {{/if}}
              {{this.scheduledTime}}
          </time>
      {{else if @post.isNew}}
          Nuevo
      {{else}}
          Borrador
          {{if (not @hasDirtyAttributes) "- Guardado"}}
      {{/if}}
  </div>
  */
  {
    "id": "gRgPHeng",
    "block": "{\"symbols\":[\"@hasDirtyAttributes\",\"@post\",\"&attrs\"],\"statements\":[[11,\"div\"],[24,\"data-test-editor-post-status\",\"\"],[17,3],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"isSaving\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        Guardando...\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[32,2,[\"isSent\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        Enviado a \"],[1,[30,[36,3],[[32,2,[\"email\",\"emailCount\"]],\"member\"],null]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[30,[36,2],[[32,2,[\"emailOnly\"]],[32,2,[\"isScheduled\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[10,\"time\"],[15,\"datetime\",[31,[[32,2,[\"publishedAtUTC\"]]]]],[14,0,\"ml1 green f8\"],[14,\"data-test-schedule-countdown\",\"\"],[12],[2,\"\\n            Sera enviado a \"],[8,\"gh-recipient-filter-count\",[],[[\"@filter\"],[[32,2,[\"emailRecipientFilter\"]]]],null],[2,\"\\n            \"],[1,[32,0,[\"scheduledTime\"]]],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[30,[36,5],[[32,2,[\"isPublished\"]],[32,2,[\"pastScheduledTime\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        Publicado\\n\"],[6,[37,1],[[30,[36,5],[[30,[36,4],[[32,2,[\"email\",\"status\"]],\"submitting\"],null],[30,[36,4],[[32,2,[\"email\",\"status\"]],\"submitting\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            y enviando a \"],[1,[30,[36,3],[[32,2,[\"email\",\"emailCount\"]],\"member\"],null]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[30,[36,4],[[32,2,[\"email\",\"status\"]],\"submitted\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"            y enviado a \"],[1,[30,[36,3],[[32,2,[\"email\",\"emailCount\"]],\"member\"],null]],[2,\"\\n        \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[32,2,[\"isScheduled\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[10,\"time\"],[15,\"datetime\",[31,[[32,2,[\"publishedAtUTC\"]]]]],[14,0,\"ml1 green f8\"],[14,\"data-test-schedule-countdown\",\"\"],[12],[2,\"\\n            Sera publicado\\n\"],[6,[37,1],[[30,[36,2],[[32,2,[\"emailRecipientFilter\"]],[30,[36,0],[[32,2,[\"email\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                y enviado a \"],[8,\"gh-recipient-filter-count\",[],[[\"@filter\"],[[32,2,[\"emailRecipientFilter\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[1,[32,0,[\"scheduledTime\"]]],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[32,2,[\"isNew\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        Nuevo\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        Borrador\\n        \"],[1,[30,[36,1],[[30,[36,0],[[32,1]],null],\"- Guardado\"],null]],[2,\"\\n    \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[13]],\"hasEval\":false,\"upvars\":[\"not\",\"if\",\"and\",\"gh-pluralize\",\"eq\",\"or\"]}",
    "moduleName": "ghost-admin/components/gh-editor-post-status.hbs"
  });

  let GhEditorPostStatusComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._tracked, _dec4 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class GhEditorPostStatusComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "clock", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);

      _initializerDefineProperty(this, "_isSaving", _descriptor3, this);
    }

    // this.args.isSaving will only be true briefly whilst the post is saving,
    // we want to ensure that the "Saving..." message is shown for at least
    // a few seconds so that it's noticeable so we use autotracking to trigger
    // a task that sets _isSaving to true for 3 seconds
    get isSaving() {
      if (this.args.isSaving) {
        this.showSavingMessage.perform();
      }

      return this._isSaving;
    }

    get scheduledTime() {
      // force a recompute every second
      Ember.get(this.clock, 'second');
      return (0, _ghFormatPostTime.formatPostTime)(this.args.post.publishedAtUTC, {
        timezone: this.settings.get('timezone'),
        scheduled: true
      });
    }

    *showSavingMessage() {
      this._isSaving = true;
      yield (0, _emberConcurrency.timeout)(_environment.default.environment === 'test' ? 0 : 3000);

      if (!this.isDestroyed && !this.isDestroying) {
        this._isSaving = false;
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "clock", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "_isSaving", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "showSavingMessage", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "showSavingMessage"), _class.prototype)), _class));
  _exports.default = GhEditorPostStatusComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhEditorPostStatusComponent);
});
;define("ghost-admin/components/gh-editor", ["exports", "ghost-admin/components/gh-image-uploader"], function (_exports, _ghImageUploader) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{yield (hash
      headerHeight=this.headerHeight
      isDraggedOver=this.isDraggedOver
      isFullScreen=this.isFullScreen
      droppedFiles=this.droppedFiles
      uploadedImageUrls=this.uploadedImageUrls
      imageMimeTypes=this.imageMimeTypes
      imageExtensions=this.imageExtensions
      toggleFullScreen=(action "toggleFullScreen")
      togglePreview=(action "togglePreview")
      toggleSplitScreen=(action "toggleSplitScreen")
      uploadComplete=(action "uploadComplete")
      uploadCancelled=(action "uploadCancelled")
      uploadImages=(action "uploadImages")
  )}}
  
  */
  {
    "id": "IWeBepOu",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[18,1,[[30,[36,1],null,[[\"headerHeight\",\"isDraggedOver\",\"isFullScreen\",\"droppedFiles\",\"uploadedImageUrls\",\"imageMimeTypes\",\"imageExtensions\",\"toggleFullScreen\",\"togglePreview\",\"toggleSplitScreen\",\"uploadComplete\",\"uploadCancelled\",\"uploadImages\"],[[32,0,[\"headerHeight\"]],[32,0,[\"isDraggedOver\"]],[32,0,[\"isFullScreen\"]],[32,0,[\"droppedFiles\"]],[32,0,[\"uploadedImageUrls\"]],[32,0,[\"imageMimeTypes\"]],[32,0,[\"imageExtensions\"]],[30,[36,0],[[32,0],\"toggleFullScreen\"],null],[30,[36,0],[[32,0],\"togglePreview\"],null],[30,[36,0],[[32,0],\"toggleSplitScreen\"],null],[30,[36,0],[[32,0],\"uploadComplete\"],null],[30,[36,0],[[32,0],\"uploadCancelled\"],null],[30,[36,0],[[32,0],\"uploadImages\"],null]]]]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"hash\"]}",
    "moduleName": "ghost-admin/components/gh-editor.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    feature: Ember.inject.service(),
    ui: Ember.inject.service(),
    classNameBindings: ['isDraggedOver:-drag-over', 'isFullScreen:gh-editor-fullscreen', 'isPreview:gh-editor-preview'],
    // Internal attributes
    droppedFiles: null,
    headerHeight: 0,
    imageExtensions: _ghImageUploader.IMAGE_EXTENSIONS,
    imageMimeTypes: _ghImageUploader.IMAGE_MIME_TYPES,
    isDraggedOver: false,
    isFullScreen: false,
    isSplitScreen: false,
    uploadedImageUrls: null,
    // Private
    _dragCounter: 0,
    _onResizeHandler: null,
    _viewActionsWidth: 190,
    actions: {
      toggleFullScreen(isFullScreen) {
        this.set('isFullScreen', isFullScreen);
        this.ui.set('isFullScreen', isFullScreen);
      },

      togglePreview(isPreview) {
        this.set('isPreview', isPreview);
      },

      toggleSplitScreen(isSplitScreen) {
        this.set('isSplitScreen', isSplitScreen);
      },

      uploadImages(fileList, resetInput) {
        // convert FileList to an array so that resetting the input doesn't
        // clear the file references before upload actions can be triggered
        let files = Array.from(fileList);
        this.set('droppedFiles', files);
        resetInput();
      },

      uploadComplete(uploads) {
        this.set('uploadedImageUrls', uploads.mapBy('url'));
        this.set('droppedFiles', null);
      },

      uploadCancelled() {
        this.set('droppedFiles', null);
      }

    },

    _setHeaderHeight() {
      if (this.headerClass && this._editorTitleElement) {
        let height = this._editorTitleElement.offsetHeight;
        return this.set('headerHeight', height);
      }

      this.set('headerHeight', 0);
    },

    // dragOver is needed so that drop works
    dragOver(event) {
      if (!event.dataTransfer) {
        return;
      } // this is needed to work around inconsistencies with dropping files
      // from Chrome's downloads bar


      if (navigator.userAgent.indexOf('Chrome') > -1) {
        let eA = event.dataTransfer.effectAllowed;
        event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
      }

      event.preventDefault();
      event.stopPropagation();
    },

    // dragEnter is needed so that the drag class is correctly removed
    dragEnter(event) {
      if (!event.dataTransfer) {
        return;
      }

      event.preventDefault();
      event.stopPropagation(); // the counter technique prevents flickering of the drag class when
      // dragging across child elements

      this._dragCounter += 1;
      this.set('isDraggedOver', true);
    },

    dragLeave(event) {
      event.preventDefault();
      event.stopPropagation();
      this._dragCounter -= 1;

      if (this._dragCounter === 0) {
        this.set('isDraggedOver', false);
      }
    },

    drop(event) {
      event.preventDefault();
      event.stopPropagation();
      this._dragCounter = 0;
      this.set('isDraggedOver', false);

      if (event.dataTransfer.files) {
        this.set('droppedFiles', event.dataTransfer.files);
      }
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-email-preview-link", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <a href="" role="button" {{on "click" this.openPreview}} ...attributes>
      {{~#if (has-block)~}}
          {{~yield~}}
      {{else}}
          {{~or @data.subject @data.email.subject~}}
      {{/if}}
  </a>
  */
  {
    "id": "/XSLP7J7",
    "block": "{\"symbols\":[\"@data\",\"&default\",\"&attrs\"],\"statements\":[[11,\"a\"],[24,6,\"\"],[24,\"role\",\"button\"],[17,3],[4,[38,1],[\"click\",[32,0,[\"openPreview\"]]],null],[12],[6,[37,2],[[27,[32,2]]],null,[[\"default\",\"else\"],[{\"statements\":[[18,2,null]],\"parameters\":[]},{\"statements\":[[1,[30,[36,0],[[32,1,[\"subject\"]],[32,1,[\"email\",\"subject\"]]],null]]],\"parameters\":[]}]]],[13]],\"hasEval\":false,\"upvars\":[\"or\",\"on\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-email-preview-link.hbs"
  });

  let GhEmailPreviewLink = (_dec = Ember.inject.service, _dec2 = Ember._action, (_class = class GhEmailPreviewLink extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "modals", _descriptor, this);
    }

    openPreview(event) {
      event.preventDefault();
      return this.modals.open('modals/email-preview', this.args.data);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modals", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openPreview", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "openPreview"), _class.prototype)), _class));
  _exports.default = GhEmailPreviewLink;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhEmailPreviewLink);
});
;define("ghost-admin/components/gh-error-message", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <p class="response" hidden={{if this.message false true}} ...attributes>
      {{this.message}}
  </p>
  
  */
  {
    "id": "mftrBN6Q",
    "block": "{\"symbols\":[\"&attrs\"],\"statements\":[[11,\"p\"],[24,0,\"response\"],[16,\"hidden\",[30,[36,0],[[32,0,[\"message\"]],false,true],null]],[17,1],[12],[2,\"\\n    \"],[1,[32,0,[\"message\"]]],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"if\"]}",
    "moduleName": "ghost-admin/components/gh-error-message.hbs"
  });

  /**
   * Renders one random error message when passed a DS.Errors object
   * and a property name. The message will be one of the ones associated with
   * that specific property. If there are no errors associated with the property,
   * nothing will be rendered.
   * @param  {DS.Errors} errors   The DS.Errors object
   * @param  {string} property    The property name
   */
  class GhErrorMessage extends _component.default {
    get message() {
      let {
        property,
        errors
      } = this.args;
      let messages = [];
      let index;

      if (!Ember.isEmpty(errors) && errors.get(property)) {
        errors.get(property).forEach(error => {
          messages.push(error);
        });
        index = Math.floor(Math.random() * messages.length);
        return messages[index].message;
      }

      return '';
    }

  }

  _exports.default = GhErrorMessage;

  window.__CLASSIC_OWN_CLASSES__.set(GhErrorMessage, true);

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhErrorMessage);
});
;define("ghost-admin/components/gh-feature-flag", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <input type="checkbox" data-test-toggle={{this.testKey}} checked={{this.value}} disabled={{this.disabled}} id={{this.for}} name={{this.name}} onclick={{action (mut this.value) value="target.checked"}}>
  <span class="input-toggle-component"></span>
  {{{yield}}}
  
  */
  {
    "id": "uk7z4bgy",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[10,\"input\"],[15,\"data-test-toggle\",[32,0,[\"testKey\"]]],[15,\"checked\",[32,0,[\"value\"]]],[15,\"disabled\",[32,0,[\"disabled\"]]],[15,1,[32,0,[\"for\"]]],[15,3,[32,0,[\"name\"]]],[15,\"onclick\",[30,[36,1],[[32,0],[30,[36,0],[[32,0,[\"value\"]]],null]],[[\"value\"],[\"target.checked\"]]]],[14,4,\"checkbox\"],[12],[13],[2,\"\\n\"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n\"],[18,1,null],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"mut\",\"action\"]}",
    "moduleName": "ghost-admin/components/gh-feature-flag.hbs"
  });

  const FeatureFlagComponent = Ember.Component.extend({
    feature: Ember.inject.service(),
    tagName: 'label',
    classNames: 'switch',
    attributeBindings: ['for', 'disabled'],
    disabled: Ember.computed('_disabled', function () {
      if (this._disabled) {
        return true;
      }

      return false;
    }),
    value: Ember.computed('_flagValue', {
      get() {
        return this._flagValue;
      },

      set(key, value) {
        return this.set(`feature.${this.flag}`, value);
      }

    }),
    for: Ember.computed('flag', function () {
      return `labs-${this.flag}`;
    }),
    name: Ember.computed('flag', function () {
      return `labs[${this.flag}]`;
    }),

    init() {
      this._super(...arguments);

      Ember.defineProperty(this, '_flagValue', Ember.computed.readOnly(`feature.${this.flag}`), function () {
        return this.get(`feature.${this.flag}`);
      });
    }

  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, FeatureFlagComponent);

  _exports.default = _default;
});
;define("ghost-admin/components/gh-file-input", ["exports", "emberx-file-input/components/x-file-input"], function (_exports, _xFileInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // TODO: remove this override and use {{x-file-input}} directly once we've
  // upgraded to emberx-file-input@1.2.0
  var _default = _xFileInput.default.extend({
    didInsertElement() {
      this._super(...arguments);

      this.onInsert?.(this.element.querySelector('input[type="file"]'));
    },

    change(e) {
      let action = this.action;
      let files = this.files(e);

      if (files.length && action) {
        action(files, this.resetInput.bind(this));
      }
    },

    /**
    * Gets files from event object.
    *
    * @method
    * @private
    * @param {$.Event || Event}
    */
    files(e) {
      return (e.originalEvent || e).testingFiles || e.target.files;
    },

    /**
    * Resets the value of the input so you can select the same file
    * multiple times.
    *
    * NOTE: fixes reset in Firefox which doesn't reset like other browsers
    * when doing input.value = null;
    *
    * @method
    */
    resetInput() {
      let input = this.element.querySelector('.x-file--input');
      input.removeAttribute('value');
      input.value = null;
      const clone = input.cloneNode(true);
      input.parentNode.replaceChild(clone, input);
      return clone;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-file-upload", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <input class="gh-input gh-input-file q" data-url="upload" type="file" name="importfile" accept="{{this.acceptEncoding}}">
  <button id="startupload" class="gh-btn gh-btn-hover-blue" type="submit" disabled={{this.uploadButtonDisabled}} {{action "upload"}}>
      <span>{{this.uploadButtonText}}</span>
  </button>
  
  */
  {
    "id": "PrMKoXEs",
    "block": "{\"symbols\":[],\"statements\":[[10,\"input\"],[14,0,\"gh-input gh-input-file q\"],[14,\"data-url\",\"upload\"],[14,3,\"importfile\"],[15,\"accept\",[31,[[32,0,[\"acceptEncoding\"]]]]],[14,4,\"file\"],[12],[13],[2,\"\\n\"],[11,\"button\"],[24,1,\"startupload\"],[24,0,\"gh-btn gh-btn-hover-blue\"],[16,\"disabled\",[32,0,[\"uploadButtonDisabled\"]]],[24,4,\"submit\"],[4,[38,0],[[32,0],\"upload\"],null],[12],[2,\"\\n    \"],[10,\"span\"],[12],[1,[32,0,[\"uploadButtonText\"]]],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\"]}",
    "moduleName": "ghost-admin/components/gh-file-upload.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    _file: null,
    acceptEncoding: null,
    uploadButtonText: 'Text',
    uploadButtonDisabled: true,
    shouldResetForm: true,

    // closure actions
    onUpload() {},

    onAdd() {},

    actions: {
      upload() {
        if (!this.uploadButtonDisabled && this._file) {
          this.onUpload(this._file);
        } // Prevent double post by disabling the button.


        this.set('uploadButtonDisabled', true); // Reset form

        if (this.shouldResetForm) {
          this.element.closest('form').reset();
        }
      }

    },

    change(event) {
      this.set('uploadButtonDisabled', false);
      this.onAdd();
      this._file = event.target.files[0];
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-file-uploader", ["exports", "ghost-admin/services/ajax"], function (_exports, _ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if this.file}}
      {{!-- Upload in progress! --}}
      {{#if this.failureMessage}}
          <div class="failed">{{this.failureMessage}}</div>
      {{/if}}
      <div class="progress-container">
          <div class="progress">
              <div class="bar {{if this.failureMessage "fail"}}" style={{this.progressStyle}}></div>
          </div>
      </div>
      {{#if this.failureMessage}}
          <button class="gh-btn gh-btn-green" {{action "reset"}} data-test-upload-try-again-button><span>Try Again</span></button>
      {{/if}}
  {{else}}
      <div class="upload-form">
          <GhFileInput @multiple={{false}} @alt={{this.labelText}} @action={{action "fileSelected"}} @accept={{this.accept}}>
              <div class="description">{{this.labelText}}</div>
          </GhFileInput>
      </div>
  {{/if}}
  
  */
  {
    "id": "axWG5bBJ",
    "block": "{\"symbols\":[],\"statements\":[[6,[37,1],[[32,0,[\"file\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,1],[[32,0,[\"failureMessage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"failed\"],[12],[1,[32,0,[\"failureMessage\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[10,\"div\"],[14,0,\"progress-container\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"progress\"],[12],[2,\"\\n            \"],[10,\"div\"],[15,0,[31,[\"bar \",[30,[36,1],[[32,0,[\"failureMessage\"]],\"fail\"],null]]]],[15,5,[32,0,[\"progressStyle\"]]],[12],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[6,[37,1],[[32,0,[\"failureMessage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green\"],[24,\"data-test-upload-try-again-button\",\"\"],[4,[38,0],[[32,0],\"reset\"],null],[12],[10,\"span\"],[12],[2,\"Try Again\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"upload-form\"],[12],[2,\"\\n        \"],[8,\"gh-file-input\",[],[[\"@multiple\",\"@alt\",\"@action\",\"@accept\"],[false,[32,0,[\"labelText\"]],[30,[36,0],[[32,0],\"fileSelected\"],null],[32,0,[\"accept\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"div\"],[14,0,\"description\"],[12],[1,[32,0,[\"labelText\"]]],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-file-uploader.hbs"
  });

  const DEFAULTS = {
    accept: ['text/csv'],
    extensions: ['csv']
  };

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    ajax: Ember.inject.service(),
    eventBus: Ember.inject.service(),
    notifications: Ember.inject.service(),
    tagName: 'section',
    classNames: ['gh-image-uploader'],
    classNameBindings: ['dragClass'],
    labelText: 'Select or drag-and-drop a file',
    url: null,
    paramName: 'file',
    accept: null,
    extensions: null,
    validate: null,
    file: null,
    response: null,
    dragClass: null,
    failureMessage: null,
    uploadPercentage: 0,
    // Allowed actions
    fileSelected: () => {},
    uploadStarted: () => {},
    uploadFinished: () => {},
    uploadSuccess: () => {},
    uploadFailed: () => {},
    formData: Ember.computed('file', function () {
      let paramName = this.paramName;
      let file = this.file;
      let formData = new FormData();
      formData.append(paramName, file);
      return formData;
    }),
    progressStyle: Ember.computed('uploadPercentage', function () {
      let percentage = this.uploadPercentage;
      let width = '';

      if (percentage > 0) {
        width = `${percentage}%`;
      } else {
        width = '0';
      }

      return Ember.String.htmlSafe(`width: ${width}`);
    }),

    // we can optionally listen to a named event bus channel so that the upload
    // process can be triggered externally
    init() {
      this._super(...arguments);

      let listenTo = this.listenTo;
      this.accept = this.accept || DEFAULTS.accept;
      this.extensions = this.extensions || DEFAULTS.extensions;

      this._uploadEventHandler = function (file) {
        if (file) {
          this.set('file', file);
        }

        this.send('upload');
      };

      if (listenTo) {
        this.eventBus.subscribe(`${listenTo}:upload`, this, this._uploadEventHandler);
      }
    },

    didReceiveAttrs() {
      this._super(...arguments);

      let accept = this.accept;
      let extensions = this.extensions;
      this._accept = !Ember.isBlank(accept) && !Ember.isArray(accept) ? accept.split(',') : accept;
      this._extensions = !Ember.isBlank(extensions) && !Ember.isArray(extensions) ? extensions.split(',') : extensions;
    },

    willDestroyElement() {
      let listenTo = this.listenTo;

      this._super(...arguments);

      if (listenTo) {
        this.eventBus.unsubscribe(`${listenTo}:upload`, this, this._uploadEventHandler);
      }
    },

    actions: {
      fileSelected(fileList, resetInput) {
        let [file] = Array.from(fileList);

        let validationResult = this._validate(file);

        this.set('file', file);
        this.fileSelected(file);

        if (validationResult === true) {
          Ember.run.schedule('actions', this, function () {
            this.generateRequest();

            if (resetInput) {
              resetInput();
            }
          });
        } else {
          this._uploadFailed(validationResult);

          if (resetInput) {
            resetInput();
          }
        }
      },

      upload() {
        if (this.file) {
          this.generateRequest();
        }
      },

      reset() {
        this.set('file', null);
        this.set('uploadPercentage', 0);
        this.set('failureMessage', null);
      }

    },

    dragOver(event) {
      if (!event.dataTransfer) {
        return;
      } // this is needed to work around inconsistencies with dropping files
      // from Chrome's downloads bar


      if (navigator.userAgent.indexOf('Chrome') > -1) {
        let eA = event.dataTransfer.effectAllowed;
        event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
      }

      event.stopPropagation();
      event.preventDefault();
      this.set('dragClass', '-drag-over');
    },

    dragLeave(event) {
      event.preventDefault();
      this.set('dragClass', null);
    },

    drop(event) {
      event.preventDefault();
      this.set('dragClass', null);

      if (event.dataTransfer.files) {
        this.send('fileSelected', event.dataTransfer.files);
      }
    },

    generateRequest() {
      let ajax = this.ajax;
      let formData = this.formData;
      let url = this.url;
      this.uploadStarted();
      ajax.post(url, {
        data: formData,
        processData: false,
        contentType: false,
        dataType: 'text',
        xhr: () => {
          let xhr = new window.XMLHttpRequest();
          xhr.upload.addEventListener('progress', event => {
            this._uploadProgress(event);
          }, false);
          return xhr;
        }
      }).then(response => {
        this._uploadSuccess(JSON.parse(response));
      }).catch(error => {
        this._uploadFailed(error);
      }).finally(() => {
        this.uploadFinished();
      });
    },

    _uploadProgress(event) {
      if (event.lengthComputable && !this.isDestroyed && !this.isDestroying) {
        Ember.run(() => {
          let percentage = Math.round(event.loaded / event.total * 100);
          this.set('uploadPercentage', percentage);
        });
      }
    },

    _uploadSuccess(response) {
      this.uploadSuccess(response);
      this.send('reset');
    },

    _uploadFailed(error) {
      let message;

      if ((0, _ajax.isVersionMismatchError)(error)) {
        this.notifications.showAPIError(error);
      }

      if ((0, _ajax.isUnsupportedMediaTypeError)(error)) {
        message = 'The file type you uploaded is not supported.';
      } else if ((0, _ajax.isRequestEntityTooLargeError)(error)) {
        message = 'The file you uploaded was larger than the maximum file size your server allows.';
      } else if (error.payload && error.payload.errors && !Ember.isBlank(error.payload.errors[0].message)) {
        message = Ember.String.htmlSafe(error.payload.errors[0].message);
      } else {
        message = 'Something went wrong :(';
      }

      this.set('failureMessage', message);
      this.uploadFailed(error);
    },

    _validate(file) {
      if (this.validate) {
        return this.validate(file);
      } else {
        return this._defaultValidator(file);
      }
    },

    _defaultValidator(file) {
      let [, extension] = /(?:\.([^.]+))?$/.exec(file.name);
      let extensions = this._extensions;

      if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
        return new _ajax.UnsupportedMediaTypeError();
      }

      return true;
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-font-selector", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class;

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <PowerSelect
      @options={{this.options}}
      @selected={{this.selectedOption}}
      @onChange={{this.selectOption}}
      @disabled={{eq this.settings.membersSignupAccess "none"}}
      @renderInPlace={{true}}
      @triggerClass="gh-setting-dropdown"
      @dropdownClass="gh-setting-dropdown-list"
      as |option|
  >
      <div class="gh-radio-label {{dasherize option.value}}">
          <div class="description">
              <h4>{{option.name}}</h4>
          </div>
      </div>
  </PowerSelect>
  */
  {
    "id": "PVCdVgGU",
    "block": "{\"symbols\":[\"option\"],\"statements\":[[8,\"power-select\",[],[[\"@options\",\"@selected\",\"@onChange\",\"@disabled\",\"@renderInPlace\",\"@triggerClass\",\"@dropdownClass\"],[[32,0,[\"options\"]],[32,0,[\"selectedOption\"]],[32,0,[\"selectOption\"]],[30,[36,0],[[32,0,[\"settings\",\"membersSignupAccess\"]],\"none\"],null],true,\"gh-setting-dropdown\",\"gh-setting-dropdown-list\"]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[10,\"div\"],[15,0,[31,[\"gh-radio-label \",[30,[36,1],[[32,1,[\"value\"]]],null]]]],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"description\"],[12],[2,\"\\n            \"],[10,\"h4\"],[12],[1,[32,1,[\"name\"]]],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]]],\"hasEval\":false,\"upvars\":[\"eq\",\"dasherize\"]}",
    "moduleName": "ghost-admin/components/gh-font-selector.hbs"
  });

  let GhFontSelector = (_dec = Ember._action, (_class = class GhFontSelector extends _component.default {
    get options() {
      return [{
        name: 'Elegant serif',
        description: 'Beautiful lines with great readability',
        value: 'serif'
      }, {
        name: 'Clean sans-serif',
        description: 'A more minimal style with sharp lines',
        value: 'sans_serif'
      }];
    }

    get selectedOption() {
      return this.options.find(o => o.value === this.args.selected);
    }

    selectOption(option) {
      this.args.onChange(option.value);
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "selectOption", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "selectOption"), _class.prototype)), _class));
  _exports.default = GhFontSelector;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhFontSelector);
});
;define("ghost-admin/components/gh-form-group", ["exports", "ghost-admin/components/gh-validation-status-container"], function (_exports, _ghValidationStatusContainer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _ghValidationStatusContainer.default.extend({
    classNames: 'form-group'
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-fullscreen-modal", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <LiquidWormhole @class="fullscreen-modal-container">
      <div class="fullscreen-modal-background" {{action "clickOverlay"}}></div>
      <div class={{this.modalClasses}}>
          {{#if (has-block)}}
            {{yield}}
          {{else}}
              {{#let (component this.modalPath) as |ModalComponent|}}
                  <ModalComponent
                      @model={{this.model}}
                      @confirm={{action "confirm"}}
                      @closeModal={{action "close"}}
                      @modifier={{this.modifier}}
                      @updateModifier={{action (mut this.modifier)}}
                  />
              {{/let}}
          {{/if}}
      </div>
  </LiquidWormhole>
  
  */
  {
    "id": "nbYWNRTH",
    "block": "{\"symbols\":[\"ModalComponent\",\"&default\"],\"statements\":[[8,\"liquid-wormhole\",[],[[\"@class\"],[\"fullscreen-modal-container\"]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[11,\"div\"],[24,0,\"fullscreen-modal-background\"],[4,[38,0],[[32,0],\"clickOverlay\"],null],[12],[13],[2,\"\\n    \"],[10,\"div\"],[15,0,[32,0,[\"modalClasses\"]]],[12],[2,\"\\n\"],[6,[37,4],[[27,[32,2]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"          \"],[18,2,null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,2],[[32,0,[\"modalPath\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,[32,1],[],[[\"@model\",\"@confirm\",\"@closeModal\",\"@modifier\",\"@updateModifier\"],[[32,0,[\"model\"]],[30,[36,0],[[32,0],\"confirm\"],null],[30,[36,0],[[32,0],\"close\"],null],[32,0,[\"modifier\"]],[30,[36,0],[[32,0],[30,[36,1],[[32,0,[\"modifier\"]]],null]],null]]],null],[2,\"\\n\"]],\"parameters\":[1]}]]]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"mut\",\"component\",\"let\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-fullscreen-modal.hbs"
  });

  const FullScreenModalComponent = Ember.Component.extend({
    dropdown: Ember.inject.service(),
    model: null,
    modifier: null,
    modalPath: Ember.computed('modal', function () {
      return `modal-${this.modal || 'unknown'}`;
    }),
    modalClasses: Ember.computed('modifier', function () {
      let modalClass = 'fullscreen-modal';
      let modifiers = (this.modifier || '').split(' ');
      let modalClasses = Ember.A([modalClass]);
      modifiers.forEach(modifier => {
        if (!Ember.isBlank(modifier)) {
          let className = `${modalClass}-${modifier}`;
          modalClasses.push(className);
        }
      });
      return modalClasses.join(' ');
    }),

    didInsertElement() {
      this._super(...arguments);

      Ember.run.schedule('afterRender', this, function () {
        this.dropdown.closeDropdowns();
      });
    },

    actions: {
      close() {
        return this.close(...arguments);
      },

      confirm() {
        return this.confirm(...arguments);
      },

      clickOverlay() {
        this.send('close');
      }

    },
    // Allowed actions
    close: () => Ember.RSVP.resolve(),
    confirm: () => Ember.RSVP.resolve()
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, FullScreenModalComponent);

  _exports.default = _default;
});
;define("ghost-admin/components/gh-html-iframe", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div
      {{did-insert this.replaceIframeContents}}
      {{did-update this.replaceIframeContents @html}}
      ...attributes
  >
      <iframe class="w-100 h-100" {{did-insert this.registerIframe}} {{on "load" this.didLoad}}></iframe>
      <iframe class="w-100 h-100" {{did-insert this.registerIframe}} {{on "load" this.didLoad}}></iframe>
  </div>
  */
  {
    "id": "Lp0HjOlk",
    "block": "{\"symbols\":[\"&attrs\",\"@html\"],\"statements\":[[11,\"div\"],[17,1],[4,[38,0],[[32,0,[\"replaceIframeContents\"]]],null],[4,[38,1],[[32,0,[\"replaceIframeContents\"]],[32,2]],null],[12],[2,\"\\n    \"],[11,\"iframe\"],[24,0,\"w-100 h-100\"],[4,[38,0],[[32,0,[\"registerIframe\"]]],null],[4,[38,2],[\"load\",[32,0,[\"didLoad\"]]],null],[12],[13],[2,\"\\n    \"],[11,\"iframe\"],[24,0,\"w-100 h-100\"],[4,[38,0],[[32,0,[\"registerIframe\"]]],null],[4,[38,2],[\"load\",[32,0,[\"didLoad\"]]],null],[12],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"did-insert\",\"did-update\",\"on\"]}",
    "moduleName": "ghost-admin/components/gh-html-iframe.hbs"
  });

  let GhHtmlIframeComponent = (_dec = Ember._action, _dec2 = Ember._action, _dec3 = Ember._action, (_class = class GhHtmlIframeComponent extends _component.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "iframes", []);

      _defineProperty(this, "renderedIframe", 0);

      _defineProperty(this, "toRenderIframe", 1);
    }

    get hiddenIframeStyle() {
      return 'position: absolute; visibility: hidden; border: none;';
    }

    get visibleIframeStyle() {
      return 'border: none;';
    }

    replaceIframeContents() {
      const iframe = this.iframes[this.toRenderIframe];

      if (iframe && this.args.html) {
        iframe.contentWindow.document.open();
        iframe.contentWindow.document.write(this.args.html);
        iframe.contentWindow.document.close(); // force swap of iframes after a set timeout to account for slower connections
        // so we display _something_ in the iframe even though it's still loading

        this.swapTimeout = setTimeout(() => {
          this.swapIframes(iframe);
        }, 500);
      }
    }

    registerIframe(iframe) {
      this.iframes.push(iframe);

      if (this.iframes.indexOf(iframe) === 0) {
        iframe.style = this.visibleIframeStyle;
        this.replaceIframeContents();
      }

      if (this.iframes.indexOf(iframe) === 1) {
        iframe.style = this.hiddenIframeStyle;
      }
    }

    didLoad(event) {
      if (this.isDestroyed || this.isDestroying) {
        return;
      }

      this.swapIframes(event.target);
    }

    swapIframes(renderedIframe) {
      if (this.isDestroyed || this.isDestroying) {
        return;
      }

      window.clearTimeout(this.swapTimeout);

      if (this.iframes.indexOf(renderedIframe) !== this.renderedIframe) {
        let newScrollTop = this.iframes[this.renderedIframe].contentDocument.body.scrollTop;

        if (this._lastPageId !== this.args.pageId) {
          newScrollTop = 0;
        }

        this._lastPageId = this.args.pageId;
        this.iframes[this.toRenderIframe].contentDocument.body.scrollTop = newScrollTop;
        this.iframes[this.toRenderIframe].style = this.visibleIframeStyle;
        this.renderedIframe = this.toRenderIframe;
        this.toRenderIframe = this.toRenderIframe === 0 ? 1 : 0;
        this.iframes[this.toRenderIframe].style = this.hiddenIframeStyle;
      }
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "replaceIframeContents", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "replaceIframeContents"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "registerIframe", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "registerIframe"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "didLoad", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "didLoad"), _class.prototype)), _class));
  _exports.default = GhHtmlIframeComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhHtmlIframeComponent);
});
;define("ghost-admin/components/gh-image-uploader-with-preview", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if @image}}
      <div class="gh-image-uploader -with-image">
          <div><img src={{@image}}></div>
          <a class="image-delete" title="Delete" {{on "click" (fn @remove "")}}>
              {{svg-jar "trash"}}
              <span class="hidden">Delete</span>
          </a>
      </div>
  {{else}}
      <GhImageUploader
          @text={{@text}}
          @altText={{@altText}}
          @allowUnsplash={{@allowUnsplash}}
          @update={{@update}}
          @uploadStarted={{optional @uploadStarted}}
          @uploadFinished={{optional @uploadFinished}}
      />
  {{/if}}
  */
  {
    "id": "dgJDQBjV",
    "block": "{\"symbols\":[\"@text\",\"@altText\",\"@allowUnsplash\",\"@update\",\"@uploadStarted\",\"@uploadFinished\",\"@image\",\"@remove\"],\"statements\":[[6,[37,4],[[32,7]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"gh-image-uploader -with-image\"],[12],[2,\"\\n        \"],[10,\"div\"],[12],[10,\"img\"],[15,\"src\",[32,7]],[12],[13],[13],[2,\"\\n        \"],[11,\"a\"],[24,0,\"image-delete\"],[24,\"title\",\"Delete\"],[4,[38,2],[\"click\",[30,[36,1],[[32,8],\"\"],null]],null],[12],[2,\"\\n            \"],[1,[30,[36,3],[\"trash\"],null]],[2,\"\\n            \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Delete\"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[8,\"gh-image-uploader\",[],[[\"@text\",\"@altText\",\"@allowUnsplash\",\"@update\",\"@uploadStarted\",\"@uploadFinished\"],[[32,1],[32,2],[32,3],[32,4],[30,[36,0],[[32,5]],null],[30,[36,0],[[32,6]],null]]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"optional\",\"fn\",\"on\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-image-uploader-with-preview.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-image-uploader", ["exports", "ghost-admin/utils/ghost-paths", "ghost-admin/services/ajax"], function (_exports, _ghostPaths, _ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.IMAGE_PARAMS = _exports.IMAGE_MIME_TYPES = _exports.IMAGE_EXTENSIONS = _exports.ICON_PARAMS = _exports.ICON_MIME_TYPES = _exports.ICON_EXTENSIONS = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if this.file}}
      {{!-- Upload in progress! --}}
      {{#if this.failureMessage}}
          <div class="failed">{{this.failureMessage}}</div>
      {{/if}}
      <div class="progress-container">
          <div class="progress">
              <div class="bar {{if this.failureMessage "fail"}}" style={{this.progressStyle}}></div>
          </div>
      </div>
      {{#if this.failureMessage}}
          <button class="gh-btn gh-btn-green" {{action "reset"}}><span>Try Again</span></button>
      {{/if}}
  {{else}}
      {{!-- file selection/drag-n-drop  --}}
      <div class="upload-form">
          <GhFileInput @multiple={{false}} @alt={{this.description}} @action={{action "fileSelected"}} @accept={{this.accept}}>
              <div class="gh-btn gh-btn-white" data-test-file-input-description><span>{{this.description}}</span></div>
          </GhFileInput>
  
          {{#if (and this.allowUnsplash this.settings.unsplash)}}
              <div class="gh-image-uploader-unsplash" {{action (toggle "_showUnsplash" this)}}>
                  {{svg-jar "unsplash"}}
              </div>
          {{/if}}
      </div>
  {{/if}}
  
  {{#if this._showUnsplash}}
      <GhUnsplash
          @select={{action "addUnsplashPhoto"}}
          @close={{action (toggle "_showUnsplash" this)}}
      />
  {{/if}}
  
  */
  {
    "id": "dIzQ4aRM",
    "block": "{\"symbols\":[],\"statements\":[[6,[37,4],[[32,0,[\"file\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,4],[[32,0,[\"failureMessage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"failed\"],[12],[1,[32,0,[\"failureMessage\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[10,\"div\"],[14,0,\"progress-container\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"progress\"],[12],[2,\"\\n            \"],[10,\"div\"],[15,0,[31,[\"bar \",[30,[36,4],[[32,0,[\"failureMessage\"]],\"fail\"],null]]]],[15,5,[32,0,[\"progressStyle\"]]],[12],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[6,[37,4],[[32,0,[\"failureMessage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green\"],[4,[38,0],[[32,0],\"reset\"],null],[12],[10,\"span\"],[12],[2,\"Try Again\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"upload-form\"],[12],[2,\"\\n        \"],[8,\"gh-file-input\",[],[[\"@multiple\",\"@alt\",\"@action\",\"@accept\"],[false,[32,0,[\"description\"]],[30,[36,0],[[32,0],\"fileSelected\"],null],[32,0,[\"accept\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-btn gh-btn-white\"],[14,\"data-test-file-input-description\",\"\"],[12],[10,\"span\"],[12],[1,[32,0,[\"description\"]]],[13],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,4],[[30,[36,3],[[32,0,[\"allowUnsplash\"]],[32,0,[\"settings\",\"unsplash\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[11,\"div\"],[24,0,\"gh-image-uploader-unsplash\"],[4,[38,0],[[32,0],[30,[36,1],[\"_showUnsplash\",[32,0]],null]],null],[12],[2,\"\\n                \"],[1,[30,[36,2],[\"unsplash\"],null]],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,4],[[32,0,[\"_showUnsplash\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-unsplash\",[],[[\"@select\",\"@close\"],[[30,[36,0],[[32,0],\"addUnsplashPhoto\"],null],[30,[36,0],[[32,0],[30,[36,1],[\"_showUnsplash\",[32,0]],null]],null]]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"toggle\",\"svg-jar\",\"and\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-image-uploader.hbs"
  });

  const IMAGE_MIME_TYPES = 'image/gif,image/jpg,image/jpeg,image/png,image/svg+xml,image/webp';
  _exports.IMAGE_MIME_TYPES = IMAGE_MIME_TYPES;
  const IMAGE_EXTENSIONS = ['gif', 'jpg', 'jpeg', 'png', 'svg', 'webp'];
  _exports.IMAGE_EXTENSIONS = IMAGE_EXTENSIONS;
  const IMAGE_PARAMS = {
    purpose: 'image'
  };
  _exports.IMAGE_PARAMS = IMAGE_PARAMS;
  const ICON_EXTENSIONS = ['ico', 'png'];
  _exports.ICON_EXTENSIONS = ICON_EXTENSIONS;
  const ICON_MIME_TYPES = 'image/png,image/x-icon';
  _exports.ICON_MIME_TYPES = ICON_MIME_TYPES;
  const ICON_PARAMS = {
    purpose: 'icon'
  };
  _exports.ICON_PARAMS = ICON_PARAMS;

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    tagName: 'section',
    classNames: ['gh-image-uploader'],
    classNameBindings: ['dragClass'],
    image: null,
    text: '',
    altText: '',
    saveButton: true,
    accept: '',
    extensions: null,
    uploadUrl: null,
    paramName: 'file',
    paramsHash: null,
    resourceName: 'images',
    validate: null,
    allowUnsplash: false,
    dragClass: null,
    failureMessage: null,
    file: null,
    url: null,
    uploadPercentage: 0,
    _defaultAccept: IMAGE_MIME_TYPES,
    _defaultExtensions: IMAGE_EXTENSIONS,
    _defaultUploadUrl: '/images/upload/',
    _defaultParamsHash: IMAGE_PARAMS,
    _showUnsplash: false,
    // Allowed actions
    fileSelected: () => {},
    update: () => {},
    uploadStarted: () => {},
    uploadFinished: () => {},
    uploadSuccess: () => {},
    uploadFailed: () => {},
    // TODO: this wouldn't be necessary if the server could accept direct
    // file uploads
    formData: Ember.computed('file', function () {
      let file = this.file;
      let formData = new FormData();
      formData.append(this.paramName, file);
      Object.keys(this.paramsHash || {}).forEach(key => {
        formData.append(key, this.paramsHash[key]);
      });
      return formData;
    }),
    description: Ember.computed('text', 'altText', function () {
      let altText = this.altText;
      return this.text || (altText ? `Upload image of "${altText}"` : 'Upload an image');
    }),
    progressStyle: Ember.computed('uploadPercentage', function () {
      let percentage = this.uploadPercentage;
      let width = '';

      if (percentage > 0) {
        width = `${percentage}%`;
      } else {
        width = '0';
      }

      return Ember.String.htmlSafe(`width: ${width}`);
    }),

    init() {
      this._super(...arguments);

      if (!this.accept) {
        this.set('accept', this._defaultAccept);
      }

      if (!this.extensions) {
        this.set('extensions', this._defaultExtensions);
      }

      if (!this.uploadUrl) {
        this.set('uploadUrl', this._defaultUploadUrl);
      }

      if (!this.paramsHash) {
        this.set('paramsHash', this._defaultParamsHash);
      }
    },

    didReceiveAttrs() {
      this._super(...arguments);

      let image = this.image;
      this.set('url', image);
    },

    actions: {
      fileSelected(fileList, resetInput) {
        // can't use array destructuring here as FileList is not a strict
        // array and fails in Safari
        let file = fileList[0];

        let validationResult = this._validate(file);

        this.set('file', file);
        this.fileSelected(file);

        if (validationResult === true) {
          Ember.run.schedule('actions', this, function () {
            this.generateRequest();

            if (resetInput) {
              resetInput();
            }
          });
        } else {
          this._uploadFailed(validationResult);

          if (resetInput) {
            resetInput();
          }
        }
      },

      addUnsplashPhoto(_ref2) {
        let {
          src
        } = _ref2;
        this.set('url', src);
        this.send('saveUrl');
      },

      reset() {
        this.set('file', null);
        this.set('uploadPercentage', 0);
      },

      saveUrl() {
        let url = this.url;
        this.update(url);
      }

    },

    dragOver(event) {
      if (!event.dataTransfer) {
        return;
      } // this is needed to work around inconsistencies with dropping files
      // from Chrome's downloads bar


      if (navigator.userAgent.indexOf('Chrome') > -1) {
        let eA = event.dataTransfer.effectAllowed;
        event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
      }

      event.stopPropagation();
      event.preventDefault();
      this.set('dragClass', '-drag-over');
    },

    dragLeave(event) {
      event.preventDefault();
      this.set('dragClass', null);
    },

    drop(event) {
      event.preventDefault();
      this.set('dragClass', null);

      if (event.dataTransfer.files) {
        this.send('fileSelected', event.dataTransfer.files);
      }
    },

    _uploadProgress(event) {
      if (event.lengthComputable) {
        Ember.run(() => {
          let percentage = Math.round(event.loaded / event.total * 100);

          if (!this.isDestroyed && !this.isDestroying) {
            this.set('uploadPercentage', percentage);
          }
        });
      }
    },

    _uploadSuccess(response) {
      let uploadResponse;
      let responseUrl;

      try {
        uploadResponse = JSON.parse(response);
      } catch (e) {
        if (!(e instanceof SyntaxError)) {
          throw e;
        }
      }

      if (uploadResponse) {
        let resource = Ember.get(uploadResponse, this.resourceName);

        if (resource && Ember.isArray(resource) && resource[0]) {
          responseUrl = Ember.get(resource[0], 'url');
        }
      }

      this.set('url', responseUrl);
      this.send('saveUrl');
      this.send('reset');
      this.uploadSuccess(responseUrl);
    },

    _uploadFailed(error) {
      let message;

      if ((0, _ajax.isVersionMismatchError)(error)) {
        this.notifications.showAPIError(error);
      }

      if ((0, _ajax.isUnsupportedMediaTypeError)(error)) {
        let validExtensions = this.extensions.join(', .').toUpperCase();
        validExtensions = `.${validExtensions}`;
        message = `The image type you uploaded is not supported. Please use ${validExtensions}`;
      } else if ((0, _ajax.isRequestEntityTooLargeError)(error)) {
        message = 'The image you uploaded was larger than the maximum file size your server allows.';
      } else if (error.payload.errors && !Ember.isBlank(error.payload.errors[0].message)) {
        message = error.payload.errors[0].message;
      } else {
        message = 'Something went wrong :(';
      }

      this.set('failureMessage', message);
      this.uploadFailed(error);
    },

    generateRequest() {
      let ajax = this.ajax;
      let formData = this.formData;
      let uploadUrl = this.uploadUrl; // CASE: we want to upload an icon and we have to POST it to a different endpoint, expecially for icons

      let url = `${(0, _ghostPaths.default)().apiRoot}${uploadUrl}`;
      this.uploadStarted();
      ajax.post(url, {
        data: formData,
        processData: false,
        contentType: false,
        dataType: 'text',
        xhr: () => {
          let xhr = new window.XMLHttpRequest();
          xhr.upload.addEventListener('progress', event => {
            this._uploadProgress(event);
          }, false);
          return xhr;
        }
      }).then(response => {
        this._uploadSuccess(response);
      }).catch(error => {
        this._uploadFailed(error);
      }).finally(() => {
        this.uploadFinished();
      });
    },

    _validate(file) {
      if (this.validate) {
        return this.validate(file);
      } else {
        return this._defaultValidator(file);
      }
    },

    _defaultValidator(file) {
      let extensions = this.extensions;
      let [, extension] = /(?:\.([^.]+))?$/.exec(file.name);

      if (!Ember.isArray(extensions)) {
        extensions = extensions.split(',');
      }

      if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
        return new _ajax.UnsupportedMediaTypeError();
      }

      return true;
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-infinity-loader", ["exports", "ember-infinity/components/infinity-loader"], function (_exports, _infinityLoader) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if this.isVisible}}
      <div
          {{did-insert this.didInsertLoader this}}
          class="{{this.loaderClassNames}}{{if this.viewportEntered " in-viewport"}}{{if this.isDoneLoading " reached-infinity"}}"
          data-test-infinity-loader>
  
          {{#if (has-block)}}
              {{yield this.infinityModelContent}}
          {{else}}
              {{#if this.isDoneLoading}}
              {{else}}
                  <div class="gh-loading-spinner"></div>
              {{/if}}
          {{/if}}
      </div>
  {{/if}}
  */
  {
    "id": "rGAge57H",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[6,[37,0],[[32,0,[\"isVisible\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[11,\"div\"],[16,0,[31,[[32,0,[\"loaderClassNames\"]],[30,[36,0],[[32,0,[\"viewportEntered\"]],\" in-viewport\"],null],[30,[36,0],[[32,0,[\"isDoneLoading\"]],\" reached-infinity\"],null]]]],[24,\"data-test-infinity-loader\",\"\"],[4,[38,1],[[32,0,[\"didInsertLoader\"]],[32,0]],null],[12],[2,\"\\n\\n\"],[6,[37,0],[[27,[32,1]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[18,1,[[32,0,[\"infinityModelContent\"]]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,0],[[32,0,[\"isDoneLoading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[],\"parameters\":[]},{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-loading-spinner\"],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"if\",\"did-insert\"]}",
    "moduleName": "ghost-admin/components/gh-infinity-loader.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _infinityLoader.default.extend());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-input-with-select/index", ["exports", "@glimmer/component", "ember-power-select/utils/group-utils"], function (_exports, _component, _groupUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#let (component (or @powerSelectComponentName "power-select")) as |Select|}}
      <Select
          @afterOptionsComponent={{@afterOptionsComponent}}
          @allowClear={{@allowClear}}
          @ariaDescribedBy={{@ariaDescribedBy}}
          @ariaInvalid={{@ariaInvalid}}
          @ariaLabel={{@ariaLabel}}
          @ariaLabelledBy={{@ariaLabelledBy}}
          @beforeOptionsComponent={{this.beforeOptionsComponent}}
          @buildSelection={{@buildSelection}}
          @calculatePosition={{@calculatePosition}}
          @class={{@class}}
          @closeOnSelect={{@closeOnSelect}}
          @defaultHighlighted={{@defaultHighlighted}}
          @destination={{@destination}}
          @dir={{@dir}}
          @disabled={{@disabled}}
          @dropdownClass={{@dropdownClass}}
          @extra={{assign @extra (hash
              value=@value
              autofocus=@autofocus
              openOnFocus=@openOnFocus
              closeWhenEmpty=@closeWhenEmpty
          )}}
          @groupComponent={{@groupComponent}}
          @highlightOnHover={{@highlightOnHover}}
          @horizontalPosition={{@horizontalPosition}}
          @initiallyOpened={{@initiallyOpened}}
          @loadingMessage={{@loadingMessage}}
          @matchTriggerWidth={{@matchTriggerWidth}}
          @matcher={{this.matcher}}
          @noMatchesMessage={{or @noMatchesMessage ""}}
          @onBlur={{@onBlur}}
          @onChange={{this.selectOrCreate}}
          @onClose={{@onClose}}
          @onFocus={{@onFocus}}
          @onInput={{@onInput}}
          @onKeydown={{@onKeydown}}
          @onOpen={{@onOpen}}
          @options={{@options}}
          @optionsComponent={{@optionsComponent}}
          @placeholder={{@placeholder}}
          @placeholderComponent={{@placeholderComponent}}
          @preventScroll={{@preventScroll}}
          @registerAPI={{@registerAPI}}
          @renderInPlace={{@renderInPlace}}
          @scrollTo={{@scrollTo}}
          @search={{this.searchAndSuggest}}
          @searchEnabled={{false}}
          @searchField={{or @searchField "name"}}
          @searchMessage={{@searchMessage}}
          @searchMessageComponent={{@searchMessageComponent}}
          @searchPlaceholder={{@searchPlaceholder}}
          @selected={{@selected}}
          @selectedItemComponent={{@selectedItemComponent}}
          @tabindex="-1"
          @triggerClass="ember-power-select-multiple-trigger gh-input-with-select-trigger {{@triggerClass}}"
          @triggerComponent={{component (or @triggerComponent "gh-input-with-select/trigger") tabindex=@tabindex}}
          @triggerId={{@triggerId}}
          @triggerRole={{@triggerRole}}
          @typeAheadMatcher={{@typeAheadMatcher}}
          @verticalPosition={{@verticalPosition}}
          ...attributes
          as |option term|
      >
          {{#if option.__isSuggestion__}}
              {{component (or @suggestedOptionComponent "gh-input-with-select/suggested-option") option=option term=term}}
          {{else}}
              {{yield option term}}
          {{/if}}
      </Select>
  {{/let}}
  */
  {
    "id": "UyAmA6Gj",
    "block": "{\"symbols\":[\"Select\",\"option\",\"term\",\"&default\",\"@suggestedOptionComponent\",\"@afterOptionsComponent\",\"@allowClear\",\"@ariaDescribedBy\",\"@ariaInvalid\",\"@ariaLabel\",\"@ariaLabelledBy\",\"@buildSelection\",\"@calculatePosition\",\"@class\",\"@closeOnSelect\",\"@defaultHighlighted\",\"@destination\",\"@dir\",\"@disabled\",\"@dropdownClass\",\"@closeWhenEmpty\",\"@openOnFocus\",\"@autofocus\",\"@value\",\"@extra\",\"@groupComponent\",\"@highlightOnHover\",\"@horizontalPosition\",\"@initiallyOpened\",\"@loadingMessage\",\"@matchTriggerWidth\",\"@noMatchesMessage\",\"@onBlur\",\"@onClose\",\"@onFocus\",\"@onInput\",\"@onKeydown\",\"@onOpen\",\"@options\",\"@optionsComponent\",\"@placeholder\",\"@placeholderComponent\",\"@preventScroll\",\"@registerAPI\",\"@renderInPlace\",\"@scrollTo\",\"@searchField\",\"@searchMessage\",\"@searchMessageComponent\",\"@searchPlaceholder\",\"@selected\",\"@selectedItemComponent\",\"@triggerClass\",\"@tabindex\",\"@triggerComponent\",\"@triggerId\",\"@triggerRole\",\"@typeAheadMatcher\",\"@verticalPosition\",\"&attrs\",\"@powerSelectComponentName\"],\"statements\":[[6,[37,5],[[30,[36,1],[[30,[36,0],[[32,61],\"power-select\"],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,[32,1],[[17,60]],[[\"@afterOptionsComponent\",\"@allowClear\",\"@ariaDescribedBy\",\"@ariaInvalid\",\"@ariaLabel\",\"@ariaLabelledBy\",\"@beforeOptionsComponent\",\"@buildSelection\",\"@calculatePosition\",\"@class\",\"@closeOnSelect\",\"@defaultHighlighted\",\"@destination\",\"@dir\",\"@disabled\",\"@dropdownClass\",\"@extra\",\"@groupComponent\",\"@highlightOnHover\",\"@horizontalPosition\",\"@initiallyOpened\",\"@loadingMessage\",\"@matchTriggerWidth\",\"@matcher\",\"@noMatchesMessage\",\"@onBlur\",\"@onChange\",\"@onClose\",\"@onFocus\",\"@onInput\",\"@onKeydown\",\"@onOpen\",\"@options\",\"@optionsComponent\",\"@placeholder\",\"@placeholderComponent\",\"@preventScroll\",\"@registerAPI\",\"@renderInPlace\",\"@scrollTo\",\"@search\",\"@searchEnabled\",\"@searchField\",\"@searchMessage\",\"@searchMessageComponent\",\"@searchPlaceholder\",\"@selected\",\"@selectedItemComponent\",\"@tabindex\",\"@triggerClass\",\"@triggerComponent\",\"@triggerId\",\"@triggerRole\",\"@typeAheadMatcher\",\"@verticalPosition\"],[[32,6],[32,7],[32,8],[32,9],[32,10],[32,11],[32,0,[\"beforeOptionsComponent\"]],[32,12],[32,13],[32,14],[32,15],[32,16],[32,17],[32,18],[32,19],[32,20],[30,[36,3],[[32,25],[30,[36,2],null,[[\"value\",\"autofocus\",\"openOnFocus\",\"closeWhenEmpty\"],[[32,24],[32,23],[32,22],[32,21]]]]],null],[32,26],[32,27],[32,28],[32,29],[32,30],[32,31],[32,0,[\"matcher\"]],[30,[36,0],[[32,32],\"\"],null],[32,33],[32,0,[\"selectOrCreate\"]],[32,34],[32,35],[32,36],[32,37],[32,38],[32,39],[32,40],[32,41],[32,42],[32,43],[32,44],[32,45],[32,46],[32,0,[\"searchAndSuggest\"]],false,[30,[36,0],[[32,47],\"name\"],null],[32,48],[32,49],[32,50],[32,51],[32,52],\"-1\",[31,[\"ember-power-select-multiple-trigger gh-input-with-select-trigger \",[32,53]]],[30,[36,1],[[30,[36,0],[[32,55],\"gh-input-with-select/trigger\"],null]],[[\"tabindex\"],[[32,54]]]],[32,56],[32,57],[32,58],[32,59]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,4],[[32,2,[\"__isSuggestion__\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[1,[30,[36,1],[[30,[36,0],[[32,5],\"gh-input-with-select/suggested-option\"],null]],[[\"option\",\"term\"],[[32,2],[32,3]]]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[18,4,[[32,2],[32,3]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"]],\"parameters\":[2,3]}]]],[2,\"\\n\"]],\"parameters\":[1]}]]]],\"hasEval\":false,\"upvars\":[\"or\",\"component\",\"hash\",\"assign\",\"if\",\"let\"]}",
    "moduleName": "ghost-admin/components/gh-input-with-select/index.hbs"
  });

  let GhInputWithSelectComponent = (_dec = Ember._tracked, _dec2 = Ember._action, _dec3 = Ember._action, (_class = class GhInputWithSelectComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "searchEnabled", _descriptor, this);
    }

    get matcher() {
      return this.args.matcher || _groupUtils.defaultMatcher;
    }

    get valueField() {
      return this.args.valueField || 'name';
    }

    shouldShowCreateOption(term, options) {
      if (this.args.showCreate) {
        return true;
      }

      return this.args.showCreateWhen ? this.args.showCreateWhen(term, options) : false;
    }

    addCreateOption(term, results) {
      if (this.shouldShowCreateOption(term, results)) {
        if (this.args.showCreatePosition === 'bottom') {
          results.push(this.buildSuggestionForTerm(term));
        } else {
          results.unshift(this.buildSuggestionForTerm(term));
        }
      }
    }

    searchAndSuggest(term, select) {
      return Ember.RSVP.resolve(this.args.options).then(newOptions => {
        if (term.length === 0) {
          return newOptions;
        }

        let searchAction = this.args.search;

        if (searchAction) {
          return Ember.RSVP.resolve(searchAction(term, select)).then(results => {
            if (results.toArray) {
              results = results.toArray();
            }

            this.addCreateOption(term, results);
            return results;
          });
        }

        newOptions = this.filter(newOptions, term);
        this.addCreateOption(term, newOptions);
        return newOptions;
      });
    }

    selectOrCreate(selection, select, keyboardEvent) {
      // don't randomly select an option whilst typing in the input
      if (select && !select.isOpen) {
        return;
      }

      const value = selection.__value__ || Ember.get(selection, this.valueField);

      if (this.args.onChange) {
        return this.args.onChange(value, select, keyboardEvent);
      } else {
        return this.args.onInput(value, select, keyboardEvent);
      }
    } // Methods


    filter(options, searchText) {
      let matcher;

      if (this.args.searchField) {
        matcher = (option, text) => this.matcher(Ember.get(option, this.args.searchField), text);
      } else {
        matcher = (option, text) => this.matcher(option, text);
      }

      return (0, _groupUtils.filterOptions)(options || [], searchText, matcher);
    }

    buildSuggestionForTerm(term) {
      return {
        __isSuggestion__: true,
        __value__: term,
        text: this.buildSuggestionLabel(term)
      };
    }

    buildSuggestionLabel(term) {
      if (this.args.buildSuggestion) {
        return this.args.buildSuggestion(term);
      }

      return `Create "${term}"...`;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "searchEnabled", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "searchAndSuggest", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "searchAndSuggest"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "selectOrCreate", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "selectOrCreate"), _class.prototype)), _class));
  _exports.default = GhInputWithSelectComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhInputWithSelectComponent);
});
;define("ghost-admin/components/gh-input-with-select/suggested-option", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <span class="gh-btn-create-snippet">{{@option.text}}{{svg-jar "add"}}</span>
  */
  {
    "id": "GPpqdF7N",
    "block": "{\"symbols\":[\"@option\"],\"statements\":[[10,\"span\"],[14,0,\"gh-btn-create-snippet\"],[12],[1,[32,1,[\"text\"]]],[1,[30,[36,0],[\"add\"],null]],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/gh-input-with-select/suggested-option.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-input-with-select/trigger", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if @extra.inputIcon}}
      {{svg-jar @extra.inputIcon class=@extra.inputIconClass}}
  {{/if}}
  <input
      {{did-insert this.registerInput}}
      {{did-update this.closeWhenEmpty @select.results}}
      {{on "input" this.handleInput}}
      {{on "keydown" this.handleKeydown}}
      {{on "keyup" this.handleKeyup}}
      {{on "focus" this.handleFocus}}
      {{on "blur" this.handleBlur}}
      class="gh-input-with-select-input"
      type={{or @extra.inputType "text"}}
      autofocus={{@extra.autofocus}}
      autocomplete="off"
      autocorrect="off"
      autocapitalize="off"
      value={{@extra.value}}
      name="selectSearchTerm" {{!-- contains "search" to prevent Safari showing autocomplete --}}
      spellcheck="false"
      role="combobox"
      placeholder={{@placeholder}}
      disabled={{@select.disabled}}
  >
  */
  {
    "id": "+RuDgjQq",
    "block": "{\"symbols\":[\"@extra\",\"@placeholder\",\"@select\"],\"statements\":[[6,[37,1],[[32,1,[\"inputIcon\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[1,[30,[36,0],[[32,1,[\"inputIcon\"]]],[[\"class\"],[[32,1,[\"inputIconClass\"]]]]]],[2,\"\\n\"]],\"parameters\":[]}]]],[11,\"input\"],[24,0,\"gh-input-with-select-input\"],[16,\"autofocus\",[32,1,[\"autofocus\"]]],[24,\"autocomplete\",\"off\"],[24,\"autocorrect\",\"off\"],[24,\"autocapitalize\",\"off\"],[16,2,[32,1,[\"value\"]]],[24,3,\"selectSearchTerm\"],[24,\"spellcheck\",\"false\"],[24,\"role\",\"combobox\"],[16,\"placeholder\",[32,2]],[16,\"disabled\",[32,3,[\"disabled\"]]],[16,4,[30,[36,2],[[32,1,[\"inputType\"]],\"text\"],null]],[4,[38,3],[[32,0,[\"registerInput\"]]],null],[4,[38,4],[[32,0,[\"closeWhenEmpty\"]],[32,3,[\"results\"]]],null],[4,[38,5],[\"input\",[32,0,[\"handleInput\"]]],null],[4,[38,5],[\"keydown\",[32,0,[\"handleKeydown\"]]],null],[4,[38,5],[\"keyup\",[32,0,[\"handleKeyup\"]]],null],[4,[38,5],[\"focus\",[32,0,[\"handleFocus\"]]],null],[4,[38,5],[\"blur\",[32,0,[\"handleBlur\"]]],null],[12],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"or\",\"did-insert\",\"did-update\",\"on\"]}",
    "moduleName": "ghost-admin/components/gh-input-with-select/trigger.hbs"
  });
  /* global key */


  let GhSearchInputTrigger = (_dec = Ember.inject.service, _dec2 = Ember._action, _dec3 = Ember._action, _dec4 = Ember._action, _dec5 = Ember._action, _dec6 = Ember._action, _dec7 = Ember._action, _dec8 = Ember._action, (_class = class GhSearchInputTrigger extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "dropdown", _descriptor, this);

      _defineProperty(this, "inputElem", null);

      this.dropdown.on('close', this, this.closeFromDropdown);
    }

    willDestroy() {
      super.willDestroy(...arguments);
      this.dropdown.off('close', this, this.closeFromDropdown);
    }

    closeFromDropdown() {
      this.args.select.actions.close();
    }

    registerInput(elem) {
      this.inputElem = elem;

      if (this.args.extra?.autofocus) {
        this.inputElem.focus();
      }
    }

    handleInput(event) {
      let term = event.target.value; // open dropdown if not open and term is present
      // close dropdown if open and term is blank

      if (Ember.isBlank(term) === this.args.select.isOpen) {
        Ember.isBlank(term) ? this.close() : this.open();
      }

      this.args.onInput?.(event);
    } // hacky workaround to let Escape clear the input if there's text,
    // but still allow it to bubble if there's no text (used for closing modals, etc)


    handleKeydown(e) {
      if (e.key === 'Escape' && e.target.value || e.key === 'Enter') {
        this._previousKeyScope = key.getScope();
        key.setScope('ignore');
      }
    }

    handleKeyup() {
      if (key.getScope() === 'ignore') {
        key.setScope(this._previousKeyScope);
      }
    }

    handleFocus() {
      if (this.args.extra?.openOnFocus && this.args.select.results.length > 0) {
        this.open();
      }

      this.args.onFocus?.(...arguments);

      if (this.args.extra.showSearchMessage === false && this.args.select.results.length === 0) {
        this.close();
      }
    }

    handleBlur(event) {
      if (event?.relatedTarget) {
        const thisInputTrigger = this.inputElem.closest('.ember-basic-dropdown-trigger');
        const relatedInputTrigger = event.relatedTarget.closest('.ember-basic-dropdown-trigger');

        if (relatedInputTrigger !== thisInputTrigger) {
          this.args.select.actions.search('');
          this.close();
        }
      }

      if (this.args.extra?.value && this.args.select.searchText === this.args.extra.value) {
        this.args.select.actions.search('');
        this.close();
      }

      this.args.onBlur?.(...arguments);
    }

    closeWhenEmpty() {
      if (document.activeElement === this.inputElem) {
        if (this.args.extra?.closeWhenEmpty) {
          if (this.args.select.results.length > 0) {
            this.open();
          }

          if (this.args.select.results.length === 0) {
            this.close();
          }
        }
      }
    }

    open() {
      if (!this.args.select.isOpen) {
        // second argument skips ember-basic-dropdown focus
        this.args.select.actions.open(null, true);
      }
    }

    close() {
      if (this.args.select.isOpen) {
        // second argument skips ember-basic-dropdown focus
        this.args.select.actions.close(null, true);
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "dropdown", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "registerInput", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "registerInput"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleInput", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "handleInput"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleKeydown", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "handleKeydown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleKeyup", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "handleKeyup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleFocus", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "handleFocus"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleBlur", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "handleBlur"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "closeWhenEmpty", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "closeWhenEmpty"), _class.prototype)), _class));
  _exports.default = GhSearchInputTrigger;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhSearchInputTrigger);
});
;define("ghost-admin/components/gh-koenig-editor", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-koenig-editor relative w-100 vh-100 overflow-x-hidden overflow-y-auto z-0" {{did-insert this.registerElement}} ...attributes>
      {{!-- full height content pane --}}
      <div
          class="gh-koenig-editor-pane flex flex-column mih-100"
          {{on "mousedown" this.trackMousedown}}
          {{on "mouseup" this.focusEditor}}
      >
          <GhEditorFeatureImage
              @image={{@featureImage}}
              @updateImage={{@setFeatureImage}}
              @clearImage={{@clearFeatureImage}}
              @alt={{@featureImageAlt}}
              @updateAlt={{@setFeatureImageAlt}}
              @caption={{@featureImageCaption}}
              @updateCaption={{@setFeatureImageCaption}}
              @forceButtonDisplay={{or (not @title) (eq @title "(Untitled)") this.titleIsHovered this.titleIsFocused}}
          />
  
          <GhTextarea
              @class="gh-editor-title"
              @placeholder={{@titlePlaceholder}}
              @shouldFocus={{or @titleAutofocus false}}
              @tabindex="1"
              @autoExpand=".gh-koenig-editor"
              @value={{readonly this.title}}
              @input={{this.updateTitle}}
              @focus-out={{optional @onTitleBlur}}
              @keyDown={{this.onTitleKeydown}}
              @didCreateTextarea={{this.registerTitleElement}}
              {{on "focus" (fn (mut this.titleIsFocused) true)}}
              {{on "blur" (fn (mut this.titleIsFocused) false)}}
              {{on "mouseover" (fn (mut this.titleIsHovered) true)}}
              {{on "mouseleave" (fn (mut this.titleIsHovered) false)}}
              data-test-editor-title-input={{true}}
          />
  
          <KoenigEditor
              @mobiledoc={{@body}}
              @placeholder={{@bodyPlaceholder}}
              @spellcheck={{true}}
              @onChange={{@onBodyChange}}
              @didCreateEditor={{this.onEditorCreated}}
              @cursorDidExitAtTop={{this.focusTitle}}
              @headerOffset={{@headerOffset}}
              @dropTargetSelector=".gh-koenig-editor-pane"
              @scrollContainerSelector={{@scrollContainerSelector}}
              @scrollOffsetTopSelector={{@scrollOffsetTopSelector}}
              @scrollOffsetBottomSelector={{@scrollOffsetBottomSelector}}
              @wordCountDidChange={{@onWordCountChange}}
              @snippets={{@snippets}}
              @saveSnippet={{@saveSnippet}}
              @updateSnippet={{@updateSnippet}}
              @deleteSnippet={{@deleteSnippet}}
              @cardOptions={{@cardOptions}}
              @postType={{@postType}}
          />
      </div>
  </div>
  */
  {
    "id": "e2HCWPpg",
    "block": "{\"symbols\":[\"&attrs\",\"@featureImage\",\"@setFeatureImage\",\"@clearFeatureImage\",\"@featureImageAlt\",\"@setFeatureImageAlt\",\"@featureImageCaption\",\"@setFeatureImageCaption\",\"@title\",\"@titlePlaceholder\",\"@titleAutofocus\",\"@onTitleBlur\",\"@body\",\"@bodyPlaceholder\",\"@onBodyChange\",\"@headerOffset\",\"@scrollContainerSelector\",\"@scrollOffsetTopSelector\",\"@scrollOffsetBottomSelector\",\"@onWordCountChange\",\"@snippets\",\"@saveSnippet\",\"@updateSnippet\",\"@deleteSnippet\",\"@cardOptions\",\"@postType\"],\"statements\":[[11,\"div\"],[24,0,\"gh-koenig-editor relative w-100 vh-100 overflow-x-hidden overflow-y-auto z-0\"],[17,1],[4,[38,0],[[32,0,[\"registerElement\"]]],null],[12],[2,\"\\n\"],[2,\"    \"],[11,\"div\"],[24,0,\"gh-koenig-editor-pane flex flex-column mih-100\"],[4,[38,1],[\"mousedown\",[32,0,[\"trackMousedown\"]]],null],[4,[38,1],[\"mouseup\",[32,0,[\"focusEditor\"]]],null],[12],[2,\"\\n        \"],[8,\"gh-editor-feature-image\",[],[[\"@image\",\"@updateImage\",\"@clearImage\",\"@alt\",\"@updateAlt\",\"@caption\",\"@updateCaption\",\"@forceButtonDisplay\"],[[32,2],[32,3],[32,4],[32,5],[32,6],[32,7],[32,8],[30,[36,4],[[30,[36,3],[[32,9]],null],[30,[36,2],[[32,9],\"(Untitled)\"],null],[32,0,[\"titleIsHovered\"]],[32,0,[\"titleIsFocused\"]]],null]]],null],[2,\"\\n\\n        \"],[8,\"gh-textarea\",[[16,\"data-test-editor-title-input\",true],[4,[38,1],[\"focus\",[30,[36,8],[[30,[36,7],[[32,0,[\"titleIsFocused\"]]],null],true],null]],null],[4,[38,1],[\"blur\",[30,[36,8],[[30,[36,7],[[32,0,[\"titleIsFocused\"]]],null],false],null]],null],[4,[38,1],[\"mouseover\",[30,[36,8],[[30,[36,7],[[32,0,[\"titleIsHovered\"]]],null],true],null]],null],[4,[38,1],[\"mouseleave\",[30,[36,8],[[30,[36,7],[[32,0,[\"titleIsHovered\"]]],null],false],null]],null]],[[\"@class\",\"@placeholder\",\"@shouldFocus\",\"@tabindex\",\"@autoExpand\",\"@value\",\"@input\",\"@focus-out\",\"@keyDown\",\"@didCreateTextarea\"],[\"gh-editor-title\",[32,10],[30,[36,4],[[32,11],false],null],\"1\",\".gh-koenig-editor\",[30,[36,5],[[32,0,[\"title\"]]],null],[32,0,[\"updateTitle\"]],[30,[36,6],[[32,12]],null],[32,0,[\"onTitleKeydown\"]],[32,0,[\"registerTitleElement\"]]]],null],[2,\"\\n\\n        \"],[8,\"koenig-editor\",[],[[\"@mobiledoc\",\"@placeholder\",\"@spellcheck\",\"@onChange\",\"@didCreateEditor\",\"@cursorDidExitAtTop\",\"@headerOffset\",\"@dropTargetSelector\",\"@scrollContainerSelector\",\"@scrollOffsetTopSelector\",\"@scrollOffsetBottomSelector\",\"@wordCountDidChange\",\"@snippets\",\"@saveSnippet\",\"@updateSnippet\",\"@deleteSnippet\",\"@cardOptions\",\"@postType\"],[[32,13],[32,14],true,[32,15],[32,0,[\"onEditorCreated\"]],[32,0,[\"focusTitle\"]],[32,16],\".gh-koenig-editor-pane\",[32,17],[32,18],[32,19],[32,20],[32,21],[32,22],[32,23],[32,24],[32,25],[32,26]]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"did-insert\",\"on\",\"eq\",\"not\",\"or\",\"readonly\",\"optional\",\"mut\",\"fn\"]}",
    "moduleName": "ghost-admin/components/gh-koenig-editor.hbs"
  });

  let GhKoenigEditorComponent = (_dec = Ember._tracked, _dec2 = Ember._tracked, _dec3 = Ember._action, _dec4 = Ember._action, _dec5 = Ember._action, _dec6 = Ember._action, _dec7 = Ember._action, _dec8 = Ember._action, _dec9 = Ember._action, _dec10 = Ember._action, (_class = class GhKoenigEditorComponent extends _component.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "containerElement", null);

      _defineProperty(this, "titleElement", null);

      _defineProperty(this, "koenigEditor", null);

      _defineProperty(this, "mousedownY", 0);

      _initializerDefineProperty(this, "titleIsHovered", _descriptor, this);

      _initializerDefineProperty(this, "titleIsFocused", _descriptor2, this);
    }

    get title() {
      return this.args.title === '(Untitled)' ? '' : this.args.title;
    }

    registerElement(element) {
      this.containerElement = element;
    }

    trackMousedown(event) {
      // triggered when a mousedown is registered on .gh-koenig-editor-pane
      this.mousedownY = event.clientY;
    } // Title actions -----------------------------------------------------------


    registerTitleElement(element) {
      this.titleElement = element; // this is needed because focus event handler won't be fired if input has focus when rendering

      if (this.titleElement === document.activeElement) {
        this.titleIsFocused = true;
      }
    }

    updateTitle(event) {
      this.args.onTitleChange?.(event.target.value);
    }

    focusTitle() {
      this.titleElement.focus();
    }

    onTitleKeydown(event) {
      let value = event.target.value;
      let selectionStart = event.target.selectionStart; // enter will always focus the editor
      // down arrow will only focus the editor when the cursor is at the
      // end of the input to preserve the default OS behaviour

      if (event.key === 'Enter' || event.key === 'Tab' || (event.key === 'ArrowDown' || event.key === 'ArrowRight') && (!value || selectionStart === value.length)) {
        event.preventDefault(); // on Enter we also want to create a blank para if necessary

        if (event.key === 'Enter') {
          this._addParaAtTop();
        }

        this.koenigEditor.focus();
      }
    } // Body actions ------------------------------------------------------------


    onEditorCreated(koenig) {
      this._setupEditor(koenig);

      this.args.onEditorCreated?.(koenig);
    }

    focusEditor(event) {
      if (event.target.classList.contains('gh-koenig-editor-pane')) {
        let editorCanvas = this.koenigEditor.element;
        let {
          bottom
        } = editorCanvas.getBoundingClientRect(); // if a mousedown and subsequent mouseup occurs below the editor
        // canvas, focus the editor and put the cursor at the end of the
        // document

        if (this.mousedownY > bottom && event.clientY > bottom) {
          let {
            post
          } = this.koenigEditor;
          let range = post.toRange();
          let {
            tailSection
          } = range;
          event.preventDefault();
          this.koenigEditor.focus(); // we should always have a visible cursor when focusing
          // at the bottom so create an empty paragraph if last
          // section is a card

          if (tailSection.isCardSection) {
            this.koenigEditor.run(postEditor => {
              let newSection = postEditor.builder.createMarkupSection('p');
              postEditor.insertSectionAtEnd(newSection);
              tailSection = newSection;
            });
          }

          this.koenigEditor.selectRange(tailSection.tailPosition()); // ensure we're scrolled to the bottom

          this.containerElement.scrollTop = this.containerElement.scrollHeight;
        }
      }
    }

    _setupEditor(koenig) {
      let component = this;
      this.koenigEditor = koenig.editor; // focus the title when pressing SHIFT+TAB

      this.koenigEditor.registerKeyCommand({
        str: 'SHIFT+TAB',

        run() {
          component.focusTitle();
          return true;
        }

      });
    }

    _addParaAtTop() {
      if (!this.koenigEditor) {
        return;
      }

      let editor = this.koenigEditor;
      let section = editor.post.toRange().head.section; // create a blank paragraph at the top of the editor unless it's already
      // a blank paragraph

      if (section.isListItem || !section.isBlank || section.text !== '') {
        editor.run(postEditor => {
          let {
            builder
          } = postEditor;
          let newPara = builder.createMarkupSection('p');
          let sections = section.isListItem ? section.parent.parent.sections : section.parent.sections;
          postEditor.insertSectionBefore(sections, newPara, section);
        });
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "titleIsHovered", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "titleIsFocused", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "registerElement", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "registerElement"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "trackMousedown", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "trackMousedown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "registerTitleElement", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "registerTitleElement"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateTitle", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "updateTitle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "focusTitle", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "focusTitle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onTitleKeydown", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "onTitleKeydown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onEditorCreated", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "onEditorCreated"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "focusEditor", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "focusEditor"), _class.prototype)), _class));
  _exports.default = GhKoenigEditorComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhKoenigEditorComponent);
});
;define("ghost-admin/components/gh-launch-wizard/connect-stripe", ["exports", "@glimmer/component", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _component, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-launch-wizard-settings-container">
      <div class="gh-stack overflow-y-auto flex-grow-1">
          <div class="gh-stack-item gh-setting-first">
              <div class="gh-members-stripe-info gh-launch-wizard-stripe-info">
                  <div class="gh-members-stripe-info-header">
                      <h4>Getting paid</h4>
                      {{svg-jar "stripe-verified-partner-badge" class="gh-members-stripe-badge"}}
                  </div>
                  <p class="f8 mt2 mb0">
                      Stripe is our exclusive direct payments partner. Ghost collects <strong>no fees</strong> on any payments! If you don’t have a Stripe account yet, you can <a href="https://stripe.com" target="_blank" rel="noopener noreferrer" class="gh-members-stripe-link">sign up here</a>.
                  </p>
              </div>
          </div>
          {{#if this.config.stripeDirect}}
              <div class="gh-stack-item gh-setting flex-column">
                  <div class="mb4">
                      <label for="stripe-publishable-key" class="gh-setting-title">Stripe Publishable key</label>
                      <GhTextInput
                          @id="stripe-publishable-key"
                          @type="password"
                          @value={{readonly this.settings.stripePublishableKey}}
                          class="mt1 password"
                          {{on "input" this.setStripeDirectPublicKey}}
                      />
                      {{#if this.stripePublishableKeyError}}<p class="mb0 mt2 f8 red">{{this.stripePublishableKeyError}}</p>{{/if}}
                  </div>
                  <div>
                      <label for="stripe-secret-key" class="gh-setting-title">Stripe Secret key</label>
                      <GhTextInput
                          @id="stripe-secret-key"
                          @type="password"
                          @value={{readonly this.settings.stripeSecretKey}}
                          class="mt1 password"
                          {{on "input" this.setStripeDirectSecretKey}}
                      />
                      {{#if this.stripeSecretKeyError}}<p class="mb0 mt2 f8 red">{{this.stripeSecretKeyError}}</p>{{/if}}
                      <a href="https://dashboard.stripe.com/account/apikeys" target="_blank" rel="noopener noreferrer" class="mt1 fw4 f8">
                          Find your Stripe API keys here &raquo;
                      </a>
                  </div>
              </div>
              <div class="gh-setting-desc"><a href="javascript:void(0)" {{on "click" @skipStep}}>Skip</a> if you don't want to offer paid subscriptions.</div>
          {{else}}
              <div class="gh-stack-item gh-setting flex-wrap">
                  {{!-- Stripe already configured --}}
                  {{#if this.settings.stripeConnectAccountId}}
                      <div>
                          <h4 class="gh-setting-title">Already connected to Stripe</h4>
                          <p class="gh-setting-desc mt2">
                              Connected to <a href="https://dashboard.stripe.com/{{this.settings.stripeConnectAccountId}}" target="_blank">{{this.settings.stripeConnectDisplayName}}</a>
  
                              {{#unless this.settings.stripeConnectLivemode}}
                                  <span class="gh-members-connect-testmodelabel">Test mode</span>
                              {{/unless}}
                          </p>
                      </div>
                      {{#if this.hasActiveStripeSubscriptions}}
                          <p class="red ma0 pa0 f8 nudge-bottom--2">
                              Cannot disconnect while there are members with active Stripe subscriptions.
                          </p>
                      {{else}}
                          <div class="gh-setting-action">
                              <button type="button" class="gh-btn" {{on "click" (perform this.openDisconnectStripeConnectModalTask)}}><span>Disconnect</span></button>
                          </div>
                      {{/if}}
                  {{!-- Stripe not yet configured --}}
                  {{else}}
                      <div class="w-100">
                          <div class="gh-setting-title">Generate secure key</div>
                          <div class="flex items-center mb4 gh-members-connectbutton-container justify-between mt2">
                              <a href="{{this.stripeConnectAuthUrl}}" class="stripe-connect" target="_blank" rel="noopener noreferrer"><span>Connect with Stripe</span></a>
                              <div class="ml2 flex items-center flex-nowrap">
                                  <span class="mr2 f8 midgrey nowrap {{if this.stripeConnectTestMode "gh-members-connect-testmodeon"}}">Test mode</span>
                                  <div class="for-switch small">
                                      <label class="switch" for="stripe-connect-test-mode" {{on "click" this.toggleStripeConnectTestMode}}>
                                          <input type="checkbox" class="gh-input" checked={{this.stripeConnectTestMode}} {{on "click" this.toggleStripeConnectTestMode}} data-test-checkbox="stripe-connect-test-mode">
                                          <span class="input-toggle-component mt1"></span>
                                      </label>
                                  </div>
                              </div>
                          </div>
                          <div class="gh-setting-action">
                              <GhTextarea
                                  class="gh-launch-wizard-stripe-connect-token"
                                  placeholder="Paste your secure key here"
                                  {{on "input" this.setStripeConnectIntegrationToken}}
                              />
                              {{#if this.stripeConnectError}}<p class="mb0 mt2 f8 red">{{this.stripeConnectError}}</p>{{/if}}
                          </div>
                          <div class="gh-setting-desc skip-step"><a href="javascript:void(0)" {{on "click" @skipStep}}>Skip</a> if you don't want to offer paid subscriptions.</div>
                      </div>
                  {{/if}}
              </div>
          {{/if}}
      </div>
      <div class="gh-launch-wizard-nav-buttons">
          <button type="button" class="gh-btn gh-btn-outline gh-btn-icon-dark gh-btn-large w-30" {{on "click" @backStep}}><span>{{svg-jar "arrow-left-tail"}}</span></button>
  
          <GhTaskButton
              @task={{this.saveAndContinueTask}}
              @runningText="Saving"
              @class="w-70 ml4 right gh-btn gh-btn-black gh-btn-large gh-btn-icon-right"
              data-test-button="wizard-next"
          >
              {{#if this.saveAndContinueTask.isRunning}}
                  <span>Saving...</span>
              {{else}}
                  <span>{{if this.settings.stripeConnectAccountId "Continue" "Save and continue"}}{{svg-jar "arrow-right-tail"}}</span>
              {{/if}}
          </GhTaskButton>
      </div>
  </div>
  
  {{#if this.showDisconnectStripeConnectModal}}
      <GhFullscreenModal
          @modal="disconnect-stripe"
          @model={{hash
              stripeConnectAccountName=this.settings.stripeConnectDisplayName
          }}
          @confirm={{perform this.disconnectStripeConnectIntegrationTask}}
          @close={{this.closeDisconnectStripeModal}}
          @modifier="action wide" />
  {{/if}}
  
  */
  {
    "id": "rWodeRqi",
    "block": "{\"symbols\":[\"@skipStep\",\"@backStep\"],\"statements\":[[10,\"div\"],[14,0,\"gh-launch-wizard-settings-container\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-stack overflow-y-auto flex-grow-1\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting-first\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-members-stripe-info gh-launch-wizard-stripe-info\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-members-stripe-info-header\"],[12],[2,\"\\n                    \"],[10,\"h4\"],[12],[2,\"Getting paid\"],[13],[2,\"\\n                    \"],[1,[30,[36,3],[\"stripe-verified-partner-badge\"],[[\"class\"],[\"gh-members-stripe-badge\"]]]],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"p\"],[14,0,\"f8 mt2 mb0\"],[12],[2,\"\\n                    Stripe is our exclusive direct payments partner. Ghost collects \"],[10,\"strong\"],[12],[2,\"no fees\"],[13],[2,\" on any payments! If you don’t have a Stripe account yet, you can \"],[10,\"a\"],[14,6,\"https://stripe.com\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[14,0,\"gh-members-stripe-link\"],[12],[2,\"sign up here\"],[13],[2,\".\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"],[6,[37,2],[[32,0,[\"config\",\"stripeDirect\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting flex-column\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"mb4\"],[12],[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"stripe-publishable-key\"],[14,0,\"gh-setting-title\"],[12],[2,\"Stripe Publishable key\"],[13],[2,\"\\n                    \"],[8,\"gh-text-input\",[[24,0,\"mt1 password\"],[4,[38,4],[\"input\",[32,0,[\"setStripeDirectPublicKey\"]]],null]],[[\"@id\",\"@type\",\"@value\"],[\"stripe-publishable-key\",\"password\",[30,[36,6],[[32,0,[\"settings\",\"stripePublishableKey\"]]],null]]],null],[2,\"\\n                    \"],[6,[37,2],[[32,0,[\"stripePublishableKeyError\"]]],null,[[\"default\"],[{\"statements\":[[10,\"p\"],[14,0,\"mb0 mt2 f8 red\"],[12],[1,[32,0,[\"stripePublishableKeyError\"]]],[13]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"stripe-secret-key\"],[14,0,\"gh-setting-title\"],[12],[2,\"Stripe Secret key\"],[13],[2,\"\\n                    \"],[8,\"gh-text-input\",[[24,0,\"mt1 password\"],[4,[38,4],[\"input\",[32,0,[\"setStripeDirectSecretKey\"]]],null]],[[\"@id\",\"@type\",\"@value\"],[\"stripe-secret-key\",\"password\",[30,[36,6],[[32,0,[\"settings\",\"stripeSecretKey\"]]],null]]],null],[2,\"\\n                    \"],[6,[37,2],[[32,0,[\"stripeSecretKeyError\"]]],null,[[\"default\"],[{\"statements\":[[10,\"p\"],[14,0,\"mb0 mt2 f8 red\"],[12],[1,[32,0,[\"stripeSecretKeyError\"]]],[13]],\"parameters\":[]}]]],[2,\"\\n                    \"],[10,\"a\"],[14,6,\"https://dashboard.stripe.com/account/apikeys\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[14,0,\"mt1 fw4 f8\"],[12],[2,\"\\n                        Find your Stripe API keys here »\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-desc\"],[12],[11,\"a\"],[24,6,\"javascript:void(0)\"],[4,[38,4],[\"click\",[32,1]],null],[12],[2,\"Skip\"],[13],[2,\" if you don't want to offer paid subscriptions.\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting flex-wrap\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"settings\",\"stripeConnectAccountId\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[14,0,\"gh-setting-title\"],[12],[2,\"Already connected to Stripe\"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"gh-setting-desc mt2\"],[12],[2,\"\\n                            Connected to \"],[10,\"a\"],[15,6,[31,[\"https://dashboard.stripe.com/\",[32,0,[\"settings\",\"stripeConnectAccountId\"]]]]],[14,\"target\",\"_blank\"],[12],[1,[32,0,[\"settings\",\"stripeConnectDisplayName\"]]],[13],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"settings\",\"stripeConnectLivemode\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"gh-members-connect-testmodelabel\"],[12],[2,\"Test mode\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"],[6,[37,2],[[32,0,[\"hasActiveStripeSubscriptions\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"p\"],[14,0,\"red ma0 pa0 f8 nudge-bottom--2\"],[12],[2,\"\\n                            Cannot disconnect while there are members with active Stripe subscriptions.\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-setting-action\"],[12],[2,\"\\n                            \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,4,\"button\"],[4,[38,4],[\"click\",[30,[36,1],[[32,0,[\"openDisconnectStripeConnectModalTask\"]]],null]],null],[12],[10,\"span\"],[12],[2,\"Disconnect\"],[13],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"w-100\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Generate secure key\"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"flex items-center mb4 gh-members-connectbutton-container justify-between mt2\"],[12],[2,\"\\n                            \"],[10,\"a\"],[15,6,[31,[[32,0,[\"stripeConnectAuthUrl\"]]]]],[14,0,\"stripe-connect\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[10,\"span\"],[12],[2,\"Connect with Stripe\"],[13],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"ml2 flex items-center flex-nowrap\"],[12],[2,\"\\n                                \"],[10,\"span\"],[15,0,[31,[\"mr2 f8 midgrey nowrap \",[30,[36,2],[[32,0,[\"stripeConnectTestMode\"]],\"gh-members-connect-testmodeon\"],null]]]],[12],[2,\"Test mode\"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"for-switch small\"],[12],[2,\"\\n                                    \"],[11,\"label\"],[24,0,\"switch\"],[24,\"for\",\"stripe-connect-test-mode\"],[4,[38,4],[\"click\",[32,0,[\"toggleStripeConnectTestMode\"]]],null],[12],[2,\"\\n                                        \"],[11,\"input\"],[24,0,\"gh-input\"],[16,\"checked\",[32,0,[\"stripeConnectTestMode\"]]],[24,\"data-test-checkbox\",\"stripe-connect-test-mode\"],[24,4,\"checkbox\"],[4,[38,4],[\"click\",[32,0,[\"toggleStripeConnectTestMode\"]]],null],[12],[13],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"input-toggle-component mt1\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-action\"],[12],[2,\"\\n                            \"],[8,\"gh-textarea\",[[24,0,\"gh-launch-wizard-stripe-connect-token\"],[24,\"placeholder\",\"Paste your secure key here\"],[4,[38,4],[\"input\",[32,0,[\"setStripeConnectIntegrationToken\"]]],null]],[[],[]],null],[2,\"\\n                            \"],[6,[37,2],[[32,0,[\"stripeConnectError\"]]],null,[[\"default\"],[{\"statements\":[[10,\"p\"],[14,0,\"mb0 mt2 f8 red\"],[12],[1,[32,0,[\"stripeConnectError\"]]],[13]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-desc skip-step\"],[12],[11,\"a\"],[24,6,\"javascript:void(0)\"],[4,[38,4],[\"click\",[32,1]],null],[12],[2,\"Skip\"],[13],[2,\" if you don't want to offer paid subscriptions.\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-launch-wizard-nav-buttons\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-outline gh-btn-icon-dark gh-btn-large w-30\"],[24,4,\"button\"],[4,[38,4],[\"click\",[32,2]],null],[12],[10,\"span\"],[12],[1,[30,[36,3],[\"arrow-left-tail\"],null]],[13],[13],[2,\"\\n\\n        \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"wizard-next\"]],[[\"@task\",\"@runningText\",\"@class\"],[[32,0,[\"saveAndContinueTask\"]],\"Saving\",\"w-70 ml4 right gh-btn gh-btn-black gh-btn-large gh-btn-icon-right\"]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,2],[[32,0,[\"saveAndContinueTask\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"span\"],[12],[2,\"Saving...\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[10,\"span\"],[12],[1,[30,[36,2],[[32,0,[\"settings\",\"stripeConnectAccountId\"]],\"Continue\",\"Save and continue\"],null]],[1,[30,[36,3],[\"arrow-right-tail\"],null]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"showDisconnectStripeConnectModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"disconnect-stripe\",[30,[36,0],null,[[\"stripeConnectAccountName\"],[[32,0,[\"settings\",\"stripeConnectDisplayName\"]]]]],[30,[36,1],[[32,0,[\"disconnectStripeConnectIntegrationTask\"]]],null],[32,0,[\"closeDisconnectStripeModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"hash\",\"perform\",\"if\",\"svg-jar\",\"on\",\"unless\",\"readonly\"]}",
    "moduleName": "ghost-admin/components/gh-launch-wizard/connect-stripe.hbs"
  });

  const RETRY_PRODUCT_SAVE_POLL_LENGTH = 1000;
  const RETRY_PRODUCT_SAVE_MAX_POLL = 15 * RETRY_PRODUCT_SAVE_POLL_LENGTH;
  let GhLaunchWizardConnectStripeComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._tracked, _dec10 = Ember._tracked, _dec11 = Ember._tracked, _dec12 = Ember._tracked, _dec13 = Ember._action, _dec14 = Ember._action, _dec15 = Ember._action, _dec16 = Ember._action, _dec17 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), _dec18 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), _dec19 = Ember._action, (_class = class GhLaunchWizardConnectStripeComponent extends _component.default {
    get stripeConnectAuthUrl() {
      const mode = this.stripeConnectTestMode ? 'test' : 'live';
      return `${this.ghostPaths.url.api('members/stripe_connect')}?mode=${mode}`;
    }

    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ajax", _descriptor, this);

      _initializerDefineProperty(this, "config", _descriptor2, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor3, this);

      _initializerDefineProperty(this, "settings", _descriptor4, this);

      _initializerDefineProperty(this, "store", _descriptor5, this);

      _initializerDefineProperty(this, "settings", _descriptor6, this);

      _initializerDefineProperty(this, "hasActiveStripeSubscriptions", _descriptor7, this);

      _initializerDefineProperty(this, "showDisconnectStripeConnectModal", _descriptor8, this);

      _initializerDefineProperty(this, "stripeConnectTestMode", _descriptor9, this);

      _initializerDefineProperty(this, "stripeConnectError", _descriptor10, this);

      _initializerDefineProperty(this, "stripePublishableKeyError", _descriptor11, this);

      _initializerDefineProperty(this, "stripeSecretKeyError", _descriptor12, this);

      this.args.updatePreview('');
    }

    willDestroy() {
      super.willDestroy?.(...arguments); // clear any unsaved settings changes when going back/forward/closing

      this.settings.rollbackAttributes();
    }

    setStripeDirectPublicKey(event) {
      this.settings.set('stripeProductName', this.settings.get('title'));
      this.settings.set('stripePublishableKey', event.target.value);
      this.stripePublishableKeyError = null;
    }

    setStripeDirectSecretKey(event) {
      this.settings.set('stripeProductName', this.settings.get('title'));
      this.settings.set('stripeSecretKey', event.target.value);
      this.stripeSecretKeyError = null;
    }

    toggleStripeConnectTestMode() {
      this.stripeConnectTestMode = !this.stripeConnectTestMode;
    }

    setStripeConnectIntegrationToken(event) {
      this.settings.set('stripeProductName', this.settings.get('title'));
      this.settings.set('stripeConnectIntegrationToken', event.target.value);
      this.stripeConnectError = null;
    }

    calculateDiscount(monthly, yearly) {
      if (isNaN(monthly) || isNaN(yearly)) {
        return 0;
      }

      return monthly ? 100 - Math.floor(yearly / 12 * 100 / monthly) : 0;
    }

    getActivePrice(prices, interval, amount, currency) {
      return prices.find(price => {
        return price.active && price.amount === amount && price.type === 'recurring' && price.interval === interval && price.currency.toLowerCase() === currency.toLowerCase();
      });
    }

    *saveProduct() {
      let pollTimeout = 0;

      while (pollTimeout < RETRY_PRODUCT_SAVE_MAX_POLL) {
        yield (0, _emberConcurrency.timeout)(RETRY_PRODUCT_SAVE_POLL_LENGTH);

        try {
          const updatedProduct = yield this.product.save();
          const existingPortalProducts = this.settings.get('portalProducts');

          if (!existingPortalProducts?.length) {
            this.settings.set('portalProducts', [updatedProduct.id]);
          }

          yield this.settings.save();
          return updatedProduct;
        } catch (error) {
          if (error.payload?.errors && error.payload.errors[0].code === 'STRIPE_NOT_CONFIGURED') {
            pollTimeout += RETRY_PRODUCT_SAVE_POLL_LENGTH; // no-op: will try saving again as stripe is not ready

            continue;
          } else {
            throw error;
          }
        }
      }

      return this.product;
    }

    *openDisconnectStripeConnectModalTask() {
      this.hasActiveStripeSubscriptions = false;
      const url = this.ghostPaths.url.api('/members/hasActiveStripeSubscriptions');
      const response = yield this.ajax.request(url);

      if (response.hasActiveStripeSubscriptions) {
        this.hasActiveStripeSubscriptions = true;
        return;
      }

      this.showDisconnectStripeConnectModal = true;
    }

    closeDisconnectStripeModal() {
      this.showDisconnectStripeConnectModal = false;
    }

    *disconnectStripeConnectIntegrationTask() {
      this.disconnectStripeError = false;
      const url = this.ghostPaths.url.api('/settings/stripe/connect');
      yield this.ajax.delete(url);
      yield this.settings.reload();
    }

    *saveAndContinueTask() {
      if (this.config.get('stripeDirect')) {
        if (!this.settings.get('stripePublishableKey')) {
          this.stripePublishableKeyError = 'Enter your publishable key to continue';
        }

        if (!this.settings.get('stripeSecretKey')) {
          this.stripeSecretKeyError = 'Enter your secret key to continue';
        }

        if (this.stripePublishableKeyError || this.stripeSecretKeyError) {
          return false;
        }
      } else if (!this.settings.get('stripeConnectAccountId') && !this.settings.get('stripeConnectIntegrationToken')) {
        this.stripeConnectError = 'Paste your secure key to continue';
        return false;
      }

      if (!this.config.get('stripeDirect') && this.settings.get('stripeConnectAccountId')) {
        this.args.nextStep();
        return true;
      }

      try {
        yield this.settings.save();
        const products = yield this.store.query('product', {
          filter: 'type:paid',
          include: 'monthly_price,yearly_price'
        });
        this.product = products.firstObject;

        if (this.product) {
          const yearlyDiscount = this.calculateDiscount(5, 50);
          this.product.set('monthlyPrice', {
            nickname: 'Monthly',
            amount: 500,
            active: 1,
            description: 'Full access',
            currency: 'usd',
            interval: 'month',
            type: 'recurring'
          });
          this.product.set('yearlyPrice', {
            nickname: 'Yearly',
            amount: 5000,
            active: 1,
            currency: 'usd',
            description: yearlyDiscount > 0 ? `${yearlyDiscount}% discount` : 'Full access',
            interval: 'year',
            type: 'recurring'
          });
          yield this.saveProduct.perform();
          this.settings.set('portalPlans', ['free', 'monthly', 'yearly']);
          yield this.settings.save();
        }

        this.pauseAndContinueTask.perform();
        return true;
      } catch (error) {
        if (error.payload?.errors && error.payload.errors[0].type === 'ValidationError') {
          const [validationError] = error.payload.errors;

          if (this.config.get('stripeDirect')) {
            if (validationError.context.match(/stripe_publishable_key/)) {
              this.stripePublishableKeyError = 'Invalid publishable key';
            } else {
              this.stripeSecretKeyError = 'Invalid secret key';
            }
          } else {
            this.stripeConnectError = 'Invalid secure key';
          }
        }

        throw error;
      }
    }

    *pauseAndContinueTask() {
      this.args.refreshPreview();
      yield (0, _emberConcurrency.timeout)(500);
      this.args.nextStep();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "hasActiveStripeSubscriptions", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "showDisconnectStripeConnectModal", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "stripeConnectTestMode", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "stripeConnectError", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "stripePublishableKeyError", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "stripeSecretKeyError", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setStripeDirectPublicKey", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, "setStripeDirectPublicKey"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setStripeDirectSecretKey", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "setStripeDirectSecretKey"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleStripeConnectTestMode", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, "toggleStripeConnectTestMode"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setStripeConnectIntegrationToken", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, "setStripeConnectIntegrationToken"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveProduct", [_dec17], Object.getOwnPropertyDescriptor(_class.prototype, "saveProduct"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openDisconnectStripeConnectModalTask", [_dec18], Object.getOwnPropertyDescriptor(_class.prototype, "openDisconnectStripeConnectModalTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "closeDisconnectStripeModal", [_dec19], Object.getOwnPropertyDescriptor(_class.prototype, "closeDisconnectStripeModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "disconnectStripeConnectIntegrationTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "disconnectStripeConnectIntegrationTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveAndContinueTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "saveAndContinueTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "pauseAndContinueTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "pauseAndContinueTask"), _class.prototype)), _class));
  _exports.default = GhLaunchWizardConnectStripeComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhLaunchWizardConnectStripeComponent);
});
;define("ghost-admin/components/gh-launch-wizard/customise-design", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
        <div class="gh-branding-settings">
          <section class="gh-launch-wizard-settings-container">
              <GhBrandSettingsForm
                  class="overflow-y-auto flex-grow-1"
                  @replacePreviewContents={{@replacePreviewContents}}
              />
  
              <div class="gh-launch-wizard-nav-buttons">
                  <GhTaskButton
                      @task={{this.saveAndContinueTask}}
                      @buttonText={{html-safe (concat "Save and continue " (svg-jar "arrow-right-tail"))}}
                      type="button"
                      class="gh-btn gh-btn-black gh-btn-icon-right gh-btn-large gh-launch-wizard-btn w-100"
                      data-test-button="wizard-next"
                  />
              </div>
          </section>
      </div>
  */
  {
    "id": "YkbCK/pr",
    "block": "{\"symbols\":[\"@replacePreviewContents\"],\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"gh-branding-settings\"],[12],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-launch-wizard-settings-container\"],[12],[2,\"\\n            \"],[8,\"gh-brand-settings-form\",[[24,0,\"overflow-y-auto flex-grow-1\"]],[[\"@replacePreviewContents\"],[[32,1]]],null],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-launch-wizard-nav-buttons\"],[12],[2,\"\\n                \"],[8,\"gh-task-button\",[[24,0,\"gh-btn gh-btn-black gh-btn-icon-right gh-btn-large gh-launch-wizard-btn w-100\"],[24,\"data-test-button\",\"wizard-next\"],[24,4,\"button\"]],[[\"@task\",\"@buttonText\"],[[32,0,[\"saveAndContinueTask\"]],[30,[36,2],[[30,[36,1],[\"Save and continue \",[30,[36,0],[\"arrow-right-tail\"],null]],null]],null]]],null],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"concat\",\"html-safe\"]}",
    "moduleName": "ghost-admin/components/gh-launch-wizard/customise-design.hbs"
  });

  let GhLaunchWizardCustomiseDesignComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, (_class = class GhLaunchWizardCustomiseDesignComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "notifications", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);
    }

    willDestroy() {
      super.willDestroy?.(...arguments);
      this.settings.rollbackAttributes();
      this.settings.errors.remove('accentColor');
    }

    *saveAndContinueTask() {
      try {
        if (this.settings.errors && this.settings.errors.length !== 0) {
          return;
        }

        yield this.settings.save();
        this.args.nextStep();
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error);
          throw error;
        }
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "saveAndContinueTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "saveAndContinueTask"), _class.prototype)), _class));
  _exports.default = GhLaunchWizardCustomiseDesignComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhLaunchWizardCustomiseDesignComponent);
});
;define("ghost-admin/components/gh-launch-wizard/finalise", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-launch-wizard-settings-container">
      <div class="overflow-auto flex-grow-1">
          <h4>All looks good?</h4>
          <p>You are all set up to start creating content, grow an audience and make your first sale!</p>
          <p>You can further customize your site in Settings.</p>
      </div>
      <div class="gh-launch-wizard-nav-buttons">
          <button type="button" class="gh-btn gh-btn-outline gh-btn-icon-dark gh-btn-large w-30" {{on "click" @backStep}}><span>{{svg-jar "arrow-left-tail"}}</span></button>
          <GhTaskButton
              @task={{this.finaliseTask}}
              @buttonText="Launch your site!"
              @runningText="Launching..."
              @class="w-70 ml4 gh-btn gh-btn-black gh-btn-large gh-btn-icon gh-launch-wizard-btn"
              data-test-button="wizard-finish"
          />
      </div>
  </div>
  */
  {
    "id": "/HxvcJC8",
    "block": "{\"symbols\":[\"@backStep\"],\"statements\":[[10,\"div\"],[14,0,\"gh-launch-wizard-settings-container\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"overflow-auto flex-grow-1\"],[12],[2,\"\\n        \"],[10,\"h4\"],[12],[2,\"All looks good?\"],[13],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"You are all set up to start creating content, grow an audience and make your first sale!\"],[13],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"You can further customize your site in Settings.\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-launch-wizard-nav-buttons\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-outline gh-btn-icon-dark gh-btn-large w-30\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,1]],null],[12],[10,\"span\"],[12],[1,[30,[36,1],[\"arrow-left-tail\"],null]],[13],[13],[2,\"\\n        \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"wizard-finish\"]],[[\"@task\",\"@buttonText\",\"@runningText\",\"@class\"],[[32,0,[\"finaliseTask\"]],\"Launch your site!\",\"Launching...\",\"w-70 ml4 gh-btn gh-btn-black gh-btn-large gh-btn-icon gh-launch-wizard-btn\"]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/gh-launch-wizard/finalise.hbs"
  });

  let GhLaunchWizardFinaliseComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, (_class = class GhLaunchWizardFinaliseComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "feature", _descriptor, this);

      _initializerDefineProperty(this, "notifications", _descriptor2, this);

      _initializerDefineProperty(this, "router", _descriptor3, this);

      _initializerDefineProperty(this, "settings", _descriptor4, this);
    }

    willDestroy() {
      super.willDestroy?.(...arguments); // clear any unsaved settings changes when going back/forward/closing

      this.settings.rollbackAttributes();
    }

    async saveProduct() {
      const data = this.args.getData();
      this.product = data?.product;

      if (this.product) {
        const monthlyAmount = data.monthlyAmount * 100;
        const yearlyAmount = data.yearlyAmount * 100;
        const currency = data.currency;
        const monthlyPrice = {
          nickname: 'Monthly',
          amount: monthlyAmount,
          active: 1,
          currency: currency,
          interval: 'month',
          type: 'recurring'
        };
        const yearlyPrice = {
          nickname: 'Yearly',
          amount: yearlyAmount,
          active: 1,
          currency: currency,
          interval: 'year',
          type: 'recurring'
        };
        this.product.set('monthlyPrice', monthlyPrice);
        this.product.set('yearlyPrice', yearlyPrice);
        const savedProduct = await this.product.save();
        return savedProduct;
      }
    }

    *finaliseTask() {
      const data = this.args.getData();

      if (data?.product) {
        yield this.saveProduct();
        this.settings.set('editorIsLaunchComplete', true);
        yield this.settings.save();
      }

      this.router.transitionTo('dashboard');
      this.notifications.showNotification('Launch complete!', {
        type: 'success',
        actions: Ember.String.htmlSafe('<a href="#/posts">Start creating content</a>')
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "finaliseTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "finaliseTask"), _class.prototype)), _class));
  _exports.default = GhLaunchWizardFinaliseComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhLaunchWizardFinaliseComponent);
});
;define("ghost-admin/components/gh-launch-wizard/set-pricing", ["exports", "@glimmer/component", "ghost-admin/config/environment", "ghost-admin/utils/currency", "ember-concurrency-decorators"], function (_exports, _component, _environment, _currency, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-launch-wizard-settings-container" {{did-insert this.setup}}>
      {{#if this.isConnectDisallowed}}
          <div class="gh-stack overflow-y-auto flex-grow-1">
              <div class="gh-setting-nossl-container">
                  <span class="red">{{svg-jar "shield-lock"}}</span>
                  <h4>Your site is not secured</h4>
                  <p>Paid memberships through Ghost can only be run on sites secured by SSL (HTTPS vs. HTTP). More information on adding a free SSL Certificate to your Ghost site can be <a href="https://ghost.org/integrations/lets-encrypt/" target="_blank" rel="noopener noreferrer">found here</a>.</p>
              </div>
              <div class="w-100 mt6">
                  <div class="gh-setting-title">Generate secure key</div>
                  <div class="flex items-center mb4 gh-members-connectbutton-container justify-between mt2">
                      <div class="stripe-connect disabled"><span>Connect with Stripe</span></div>
                      <div class="ml2 flex items-center flex-nowrap">
                          <span class="mr2 f8 midgrey nowrap">Test mode</span>
                          <div class="for-switch small disabled">
                              <label class="switch" for="stripe-connect-test-mode">
                                  <input type="checkbox" class="gh-input" disabled="disabled">
                                  <span class="input-toggle-component mt1"></span>
                              </label>
                          </div>
                      </div>
                  </div>
                  <div class="gh-setting-action">
                      <GhTextarea
                          class="gh-launch-wizard-stripe-connect-token"
                          placeholder="Paste your secure key here"
                          disabled="disabled"
                      />
                  </div>
              </div>
          </div>
      {{else}}
          <div class="gh-stack overflow-y-auto flex-grow-1">
              <div class="gh-stack-item flex-column">
                  <div class="w-100">
                      <GhFormGroup @class="for-select">
                          <div class="gh-setting-title" for="currency">Plan currency</div>
                          <span class="gh-select mt2">
                              <OneWaySelect
                                  @disabled={{this.disabled}}
                                  @value={{this.selectedCurrency}}
                                  id="currency"
                                  name="currency"
                                  @options={{readonly this.allCurrencies}}
                                  @optionValuePath="value"
                                  @optionLabelPath="label"
                                  @update={{this.setStripePlansCurrency}}
                              />
                              {{svg-jar "arrow-down-small"}}
                          </span>
                      </GhFormGroup>
                  </div>
                  <div class="w-100 flex flex-column flex-row-ns">
                      <div class="w-100 w-50-ns mr3-ns">
                          <GhFormGroup>
                          <div class="gh-setting-title">Monthly price</div>
  
                          <div class="flex items-center justify-center mt2 gh-input-group gh-labs-price-label">
                              <GhTextInput
                                  @disabled={{this.disabled}}
                                  @value={{readonly this.stripeMonthlyAmount}}
                                  @type="number"
                                  @input={{action (mut this.stripeMonthlyAmount) value="target.value"}}
                                  {{on "blur" this.validateStripePlans}}
                              />
                              <span class="gh-input-append"><span class="ttu">{{this.currency}}</span>/month</span>
                          </div>
                          </GhFormGroup>
                      </div>
                      <div class="w-100 w-50-ns ml2-ns">
                          <GhFormGroup>
                          <div class="gh-setting-title">Yearly price</div>
                          <div class="flex items-center justify-center mt2 gh-input-group gh-labs-price-label">
                              <GhTextInput
                                  @disabled={{this.disabled}}
                                  @value={{readonly this.stripeYearlyAmount}}
                                  @type="number"
                                  @input={{action (mut this.stripeYearlyAmount) value="target.value"}}
                                  {{on "blur" this.validateStripePlans}}
                              />
                              <span class="gh-input-append"><span class="ttu">{{this.currency}}</span>/year</span>
                          </div>
                          </GhFormGroup>
                      </div>
                  </div>
              </div>
              <div class="w-100 w-50-l flex flex-column flex-row-ns">
                  {{#if this.stripePlanError}}
                      <p class="response w-100 red"> {{this.stripePlanError}} </p>
                  {{/if}}
              </div>
  
              <div class="gh-stack-item gh-setting flex-column">
                  <div class="gh-setting-title">Plans available at signup</div>
                  <div class="form-group mt2 mb0 for-checkbox">
                      <label
                          class="checkbox"
                          for="free-plan"
                      >
                          <input
                              type="checkbox"
                              checked={{this.isFreeChecked}}
                              id="free-plan"
                              name="free-plan"
                              disabled={{this.isFreeDisabled}}
                              class="gh-input post-settings-featured"
                              {{on "click" this.toggleFreePlan}}
                              data-test-checkbox="featured"
                          >
                          <span class="input-toggle-component"></span>
                          <p>Free</p>
                      </label>
                  </div>
                  <div class="form-group mb0 for-checkbox">
                      <label
                          class="checkbox"
                          for="monthly-plan"
                      >
                          <input
                              type="checkbox"
                              id="monthly-plan"
                              name="monthly-plan"
                              checked={{this.isMonthlyChecked}}
                              disabled={{this.isPaidPriceDisabled}}
                              class="gh-input post-settings-featured"
                              {{on "click" this.toggleMonthlyPlan}}
                              data-test-checkbox="featured"
                          >
                          <span class="input-toggle-component"></span>
                          <p>Monthly</p>
                      </label>
                  </div>
                  <div class="form-group mb0 for-checkbox">
                      <label
                          class="checkbox"
                          for="yearly-plan"
                      >
                          <input
                              type="checkbox"
                              id="yearly-plan"
                              name="yearly-plan"
                              checked={{this.isYearlyChecked}}
                              disabled={{this.isPaidPriceDisabled}}
                              class="gh-input post-settings-featured"
                              {{on "click" this.toggleYearlyPlan}}
                              data-test-checkbox="featured"
                          >
                          <span class="input-toggle-component"></span>
                          <p>Yearly</p>
                      </label>
                  </div>
              </div>
          </div>
      {{/if}}
  
      <div class="gh-launch-wizard-nav-buttons">
          <button type="button" class="gh-btn gh-btn-outline gh-btn-icon-dark gh-btn-large w-30" {{on "click" this.backStep}}><span>{{svg-jar "arrow-left-tail"}}</span></button>
  
          {{!-- TODO: reset "failed" state automatically --}}
          <GhTaskButton
              @task={{this.saveAndContinue}}
              @runningText="Saving"
              @class="w-70 ml4 right gh-btn gh-btn-black gh-btn-large gh-btn-icon-right"
              data-test-button="wizard-next"
          >
              <span>{{if this.isHidden "Continue" "Save and continue"}}{{svg-jar "arrow-right-tail"}}</span>
          </GhTaskButton>
      </div>
  </div>
  */
  {
    "id": "CjO7eMyJ",
    "block": "{\"symbols\":[],\"statements\":[[11,\"div\"],[24,0,\"gh-launch-wizard-settings-container\"],[4,[38,6],[[32,0,[\"setup\"]]],null],[12],[2,\"\\n\"],[6,[37,5],[[32,0,[\"isConnectDisallowed\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"gh-stack overflow-y-auto flex-grow-1\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-nossl-container\"],[12],[2,\"\\n                \"],[10,\"span\"],[14,0,\"red\"],[12],[1,[30,[36,1],[\"shield-lock\"],null]],[13],[2,\"\\n                \"],[10,\"h4\"],[12],[2,\"Your site is not secured\"],[13],[2,\"\\n                \"],[10,\"p\"],[12],[2,\"Paid memberships through Ghost can only be run on sites secured by SSL (HTTPS vs. HTTP). More information on adding a free SSL Certificate to your Ghost site can be \"],[10,\"a\"],[14,6,\"https://ghost.org/integrations/lets-encrypt/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[2,\"found here\"],[13],[2,\".\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"w-100 mt6\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Generate secure key\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"flex items-center mb4 gh-members-connectbutton-container justify-between mt2\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"stripe-connect disabled\"],[12],[10,\"span\"],[12],[2,\"Connect with Stripe\"],[13],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"ml2 flex items-center flex-nowrap\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"mr2 f8 midgrey nowrap\"],[12],[2,\"Test mode\"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"for-switch small disabled\"],[12],[2,\"\\n                            \"],[10,\"label\"],[14,0,\"switch\"],[14,\"for\",\"stripe-connect-test-mode\"],[12],[2,\"\\n                                \"],[10,\"input\"],[14,0,\"gh-input\"],[14,\"disabled\",\"disabled\"],[14,4,\"checkbox\"],[12],[13],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"input-toggle-component mt1\"],[12],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-setting-action\"],[12],[2,\"\\n                    \"],[8,\"gh-textarea\",[[24,0,\"gh-launch-wizard-stripe-connect-token\"],[24,\"placeholder\",\"Paste your secure key here\"],[24,\"disabled\",\"disabled\"]],[[],[]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"gh-stack overflow-y-auto flex-grow-1\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-stack-item flex-column\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"w-100\"],[12],[2,\"\\n                    \"],[8,\"gh-form-group\",[],[[\"@class\"],[\"for-select\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[14,\"for\",\"currency\"],[12],[2,\"Plan currency\"],[13],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"gh-select mt2\"],[12],[2,\"\\n                            \"],[8,\"one-way-select\",[[24,1,\"currency\"],[24,3,\"currency\"]],[[\"@disabled\",\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@update\"],[[32,0,[\"disabled\"]],[32,0,[\"selectedCurrency\"]],[30,[36,0],[[32,0,[\"allCurrencies\"]]],null],\"value\",\"label\",[32,0,[\"setStripePlansCurrency\"]]]],null],[2,\"\\n                            \"],[1,[30,[36,1],[\"arrow-down-small\"],null]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"w-100 flex flex-column flex-row-ns\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"w-100 w-50-ns mr3-ns\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Monthly price\"],[13],[2,\"\\n\\n                        \"],[10,\"div\"],[14,0,\"flex items-center justify-center mt2 gh-input-group gh-labs-price-label\"],[12],[2,\"\\n                            \"],[8,\"gh-text-input\",[[4,[38,4],[\"blur\",[32,0,[\"validateStripePlans\"]]],null]],[[\"@disabled\",\"@value\",\"@type\",\"@input\"],[[32,0,[\"disabled\"]],[30,[36,0],[[32,0,[\"stripeMonthlyAmount\"]]],null],\"number\",[30,[36,3],[[32,0],[30,[36,2],[[32,0,[\"stripeMonthlyAmount\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"gh-input-append\"],[12],[10,\"span\"],[14,0,\"ttu\"],[12],[1,[32,0,[\"currency\"]]],[13],[2,\"/month\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"w-100 w-50-ns ml2-ns\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Yearly price\"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"flex items-center justify-center mt2 gh-input-group gh-labs-price-label\"],[12],[2,\"\\n                            \"],[8,\"gh-text-input\",[[4,[38,4],[\"blur\",[32,0,[\"validateStripePlans\"]]],null]],[[\"@disabled\",\"@value\",\"@type\",\"@input\"],[[32,0,[\"disabled\"]],[30,[36,0],[[32,0,[\"stripeYearlyAmount\"]]],null],\"number\",[30,[36,3],[[32,0],[30,[36,2],[[32,0,[\"stripeYearlyAmount\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"gh-input-append\"],[12],[10,\"span\"],[14,0,\"ttu\"],[12],[1,[32,0,[\"currency\"]]],[13],[2,\"/year\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"w-100 w-50-l flex flex-column flex-row-ns\"],[12],[2,\"\\n\"],[6,[37,5],[[32,0,[\"stripePlanError\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"p\"],[14,0,\"response w-100 red\"],[12],[2,\" \"],[1,[32,0,[\"stripePlanError\"]]],[2,\" \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting flex-column\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Plans available at signup\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"form-group mt2 mb0 for-checkbox\"],[12],[2,\"\\n                    \"],[10,\"label\"],[14,0,\"checkbox\"],[14,\"for\",\"free-plan\"],[12],[2,\"\\n                        \"],[11,\"input\"],[16,\"checked\",[32,0,[\"isFreeChecked\"]]],[24,1,\"free-plan\"],[24,3,\"free-plan\"],[16,\"disabled\",[32,0,[\"isFreeDisabled\"]]],[24,0,\"gh-input post-settings-featured\"],[24,\"data-test-checkbox\",\"featured\"],[24,4,\"checkbox\"],[4,[38,4],[\"click\",[32,0,[\"toggleFreePlan\"]]],null],[12],[13],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"Free\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"form-group mb0 for-checkbox\"],[12],[2,\"\\n                    \"],[10,\"label\"],[14,0,\"checkbox\"],[14,\"for\",\"monthly-plan\"],[12],[2,\"\\n                        \"],[11,\"input\"],[24,1,\"monthly-plan\"],[24,3,\"monthly-plan\"],[16,\"checked\",[32,0,[\"isMonthlyChecked\"]]],[16,\"disabled\",[32,0,[\"isPaidPriceDisabled\"]]],[24,0,\"gh-input post-settings-featured\"],[24,\"data-test-checkbox\",\"featured\"],[24,4,\"checkbox\"],[4,[38,4],[\"click\",[32,0,[\"toggleMonthlyPlan\"]]],null],[12],[13],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"Monthly\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"form-group mb0 for-checkbox\"],[12],[2,\"\\n                    \"],[10,\"label\"],[14,0,\"checkbox\"],[14,\"for\",\"yearly-plan\"],[12],[2,\"\\n                        \"],[11,\"input\"],[24,1,\"yearly-plan\"],[24,3,\"yearly-plan\"],[16,\"checked\",[32,0,[\"isYearlyChecked\"]]],[16,\"disabled\",[32,0,[\"isPaidPriceDisabled\"]]],[24,0,\"gh-input post-settings-featured\"],[24,\"data-test-checkbox\",\"featured\"],[24,4,\"checkbox\"],[4,[38,4],[\"click\",[32,0,[\"toggleYearlyPlan\"]]],null],[12],[13],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"Yearly\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-launch-wizard-nav-buttons\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-outline gh-btn-icon-dark gh-btn-large w-30\"],[24,4,\"button\"],[4,[38,4],[\"click\",[32,0,[\"backStep\"]]],null],[12],[10,\"span\"],[12],[1,[30,[36,1],[\"arrow-left-tail\"],null]],[13],[13],[2,\"\\n\\n\"],[2,\"        \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"wizard-next\"]],[[\"@task\",\"@runningText\",\"@class\"],[[32,0,[\"saveAndContinue\"]],\"Saving\",\"w-70 ml4 right gh-btn gh-btn-black gh-btn-large gh-btn-icon-right\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,5],[[32,0,[\"isHidden\"]],\"Continue\",\"Save and continue\"],null]],[1,[30,[36,1],[\"arrow-right-tail\"],null]],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"readonly\",\"svg-jar\",\"mut\",\"action\",\"on\",\"if\",\"did-insert\"]}",
    "moduleName": "ghost-admin/components/gh-launch-wizard/set-pricing.hbs"
  });

  const CURRENCIES = _currency.currencies.map(currency => {
    return {
      value: currency.isoCode.toLowerCase(),
      label: `${currency.isoCode} - ${currency.name}`,
      isoCode: currency.isoCode
    };
  });

  let GhLaunchWizardSetPricingComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._tracked, _dec10 = Ember._tracked, _dec11 = Ember._tracked, _dec12 = Ember._tracked, _dec13 = Ember._tracked, _dec14 = Ember._action, _dec15 = Ember._action, _dec16 = Ember._action, _dec17 = Ember._action, _dec18 = Ember._action, _dec19 = Ember._action, _dec20 = Ember._action, _dec21 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class GhLaunchWizardSetPricingComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "membersUtils", _descriptor2, this);

      _initializerDefineProperty(this, "settings", _descriptor3, this);

      _initializerDefineProperty(this, "store", _descriptor4, this);

      _defineProperty(this, "currencies", CURRENCIES);

      _initializerDefineProperty(this, "stripeMonthlyAmount", _descriptor5, this);

      _initializerDefineProperty(this, "stripeYearlyAmount", _descriptor6, this);

      _initializerDefineProperty(this, "currency", _descriptor7, this);

      _initializerDefineProperty(this, "isFreeChecked", _descriptor8, this);

      _initializerDefineProperty(this, "isMonthlyChecked", _descriptor9, this);

      _initializerDefineProperty(this, "isYearlyChecked", _descriptor10, this);

      _initializerDefineProperty(this, "stripePlanError", _descriptor11, this);

      _initializerDefineProperty(this, "product", _descriptor12, this);

      _initializerDefineProperty(this, "loadingProduct", _descriptor13, this);
    }

    get selectedCurrency() {
      return this.currencies.findBy('value', this.currency);
    }

    get allCurrencies() {
      return (0, _currency.getCurrencyOptions)();
    }

    get isConnectDisallowed() {
      const siteUrl = this.config.get('blogUrl');
      return _environment.default.environment !== 'development' && !/^https:/.test(siteUrl);
    }

    get isPaidPriceDisabled() {
      return !this.membersUtils.isStripeEnabled;
    }

    get isFreeDisabled() {
      return this.settings.get('membersSignupAccess') !== 'all';
    }

    willDestroy() {
      super.willDestroy?.(...arguments); // clear any unsaved settings changes when going back/forward/closing

      this.args.updatePreview('');
    }

    setup() {
      this.fetchDefaultProduct.perform();
      this.updatePreviewUrl();
    }

    backStep() {
      const product = this.product;
      const data = this.args.getData() || {};
      this.args.storeData({ ...data,
        product,
        isFreeChecked: this.isFreeChecked,
        isMonthlyChecked: this.isMonthlyChecked,
        isYearlyChecked: this.isYearlyChecked,
        monthlyAmount: this.stripeMonthlyAmount,
        yearlyAmount: this.stripeYearlyAmount,
        currency: this.currency
      });
      this.args.backStep();
    }

    setStripePlansCurrency(event) {
      const newCurrency = event.value;
      this.currency = newCurrency;
      this.updatePreviewUrl();
    }

    toggleFreePlan(event) {
      this.isFreeChecked = event.target.checked;
      this.updatePreviewUrl();
    }

    toggleMonthlyPlan(event) {
      this.isMonthlyChecked = event.target.checked;
      this.updatePreviewUrl();
    }

    toggleYearlyPlan(event) {
      this.isYearlyChecked = event.target.checked;
      this.updatePreviewUrl();
    }

    validateStripePlans() {
      this.stripePlanError = undefined;

      try {
        const yearlyAmount = this.stripeYearlyAmount;
        const monthlyAmount = this.stripeMonthlyAmount;
        const symbol = (0, _currency.getSymbol)(this.currency);

        if (!yearlyAmount || yearlyAmount < 1 || !monthlyAmount || monthlyAmount < 1) {
          throw new TypeError(`Subscription amount must be at least ${symbol}1.00`);
        }

        this.updatePreviewUrl();
      } catch (err) {
        this.stripePlanError = err.message;
      }
    }

    *saveAndContinue() {
      if (this.isConnectDisallowed) {
        this.args.nextStep();
      } else {
        yield this.validateStripePlans();

        if (this.stripePlanError) {
          return false;
        }

        const product = this.product;
        const data = this.args.getData() || {};
        this.args.storeData({ ...data,
          product,
          isFreeChecked: this.isFreeChecked,
          isMonthlyChecked: this.isMonthlyChecked,
          isYearlyChecked: this.isYearlyChecked,
          monthlyAmount: this.stripeMonthlyAmount,
          yearlyAmount: this.stripeYearlyAmount,
          currency: this.currency
        });
        this.args.nextStep();
      }
    }

    *fetchDefaultProduct() {
      const storedData = this.args.getData();

      if (storedData?.product) {
        this.product = storedData.product;

        if (storedData.isMonthlyChecked !== undefined) {
          this.isMonthlyChecked = storedData.isMonthlyChecked;
        }

        if (storedData.isYearlyChecked !== undefined) {
          this.isYearlyChecked = storedData.isYearlyChecked;
        }

        if (storedData.isFreeChecked !== undefined) {
          this.isFreeChecked = storedData.isFreeChecked;
        }

        if (storedData.currency !== undefined) {
          this.currency = storedData.currency;
        }

        this.stripeMonthlyAmount = storedData.monthlyAmount;
        this.stripeYearlyAmount = storedData.yearlyAmount;
      } else {
        const products = yield this.store.query('product', {
          filter: 'type:paid',
          include: 'monthly_price,yearly_price'
        });
        this.product = products.firstObject;
        let portalPlans = this.settings.get('portalPlans') || [];
        this.isMonthlyChecked = portalPlans.includes('monthly');
        this.isYearlyChecked = portalPlans.includes('yearly');
        this.isFreeChecked = portalPlans.includes('free');
        const monthlyPrice = this.product.get('monthlyPrice');
        const yearlyPrice = this.product.get('yearlyPrice');

        if (monthlyPrice && monthlyPrice.amount) {
          this.stripeMonthlyAmount = monthlyPrice.amount / 100;
          this.currency = monthlyPrice.currency;
        }

        if (yearlyPrice && yearlyPrice.amount) {
          this.stripeYearlyAmount = yearlyPrice.amount / 100;
        }
      }

      this.updatePreviewUrl();
    }

    updatePreviewUrl() {
      const options = {
        disableBackground: true,
        currency: this.selectedCurrency.value,
        monthlyPrice: this.stripeMonthlyAmount * 100,
        yearlyPrice: this.stripeYearlyAmount * 100,
        isMonthlyChecked: this.isMonthlyChecked,
        isYearlyChecked: this.isYearlyChecked,
        isFreeChecked: this.isFreeChecked,
        portalPlans: null
      };
      const url = this.membersUtils.getPortalPreviewUrl(options);
      this.args.updatePreview(url);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "membersUtils", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "stripeMonthlyAmount", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 5;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "stripeYearlyAmount", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 50;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "currency", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'usd';
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "isFreeChecked", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "isMonthlyChecked", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "isYearlyChecked", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "stripePlanError", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "product", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "loadingProduct", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setup", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "setup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "backStep", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, "backStep"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setStripePlansCurrency", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, "setStripePlansCurrency"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleFreePlan", [_dec17], Object.getOwnPropertyDescriptor(_class.prototype, "toggleFreePlan"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleMonthlyPlan", [_dec18], Object.getOwnPropertyDescriptor(_class.prototype, "toggleMonthlyPlan"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleYearlyPlan", [_dec19], Object.getOwnPropertyDescriptor(_class.prototype, "toggleYearlyPlan"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "validateStripePlans", [_dec20], Object.getOwnPropertyDescriptor(_class.prototype, "validateStripePlans"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveAndContinue", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "saveAndContinue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchDefaultProduct", [_dec21], Object.getOwnPropertyDescriptor(_class.prototype, "fetchDefaultProduct"), _class.prototype)), _class));
  _exports.default = GhLaunchWizardSetPricingComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhLaunchWizardSetPricingComponent);
});
;define("ghost-admin/components/gh-link-to-custom-views-index", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <LinkTo
      @route={{@route}}
      @query={{this.resetQuery}}
      @current-when={{this.isActive}}
      {{did-insert this.watchRouterEvents}}
      {{will-destroy this.unwatchRouterEvents}}
      ...attributes
  >
      {{yield}}
  </LinkTo>
  */
  {
    "id": "bLZZVvSZ",
    "block": "{\"symbols\":[\"@route\",\"&attrs\",\"&default\"],\"statements\":[[8,\"link-to\",[[17,2],[4,[38,0],[[32,0,[\"watchRouterEvents\"]]],null],[4,[38,1],[[32,0,[\"unwatchRouterEvents\"]]],null]],[[\"@route\",\"@query\",\"@current-when\"],[[32,1],[32,0,[\"resetQuery\"]],[32,0,[\"isActive\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[18,3,null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"did-insert\",\"will-destroy\"]}",
    "moduleName": "ghost-admin/components/gh-link-to-custom-views-index.hbs"
  });

  let GhCustomViewsIndexLinkComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._action, _dec4 = Ember._action, _dec5 = Ember._action, (_class = class GhCustomViewsIndexLinkComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "customViews", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);

      _defineProperty(this, "_forceReset", false);

      _defineProperty(this, "_lastIsActive", false);
    }

    watchRouterEvents() {
      this.router.on('routeWillChange', this.handleRouteWillChange);
    }

    unwatchRouterEvents() {
      this.router.off('routeWillChange', this.handleRouteWillChange);
    } // the top-level custom nav link will reset the filter if you're currently
    // viewing the associated screen. However, the filter will be remembered by
    // Ember automatically if you leave the screen and come back. This causes
    // odd behaviour in the nav if you were on a custom view, go to another
    // screen, then click back on the top-level nav link as you'll jump from
    // the top-level nav to the custom view.
    //
    // to get around this we keep track of the transitions so that we can force
    // the link to be a "reset" link any time navigation occurs from a custom
    // view to an unassociated screen


    handleRouteWillChange(_ref2) {
      let {
        from,
        to
      } = _ref2;
      let normalizedToRoute = to && to.name.replace(/_loading$/, '');

      if (from && from.name === this.args.route && normalizedToRoute !== this.args.route) {
        if (this.customViews.activeView && this.customViews.activeView.route === this.args.route) {
          this._forceReset = true;
        }
      }

      if (normalizedToRoute === this.args.route) {
        this._forceReset = false;
      }
    }

    get isActive() {
      if (this.router.currentRouteName.match(/_loading$/)) {
        return this._lastIsActive;
      }

      let currentRouteName = this.router.currentRouteName.replace(/_loading$/, ''); // eslint-disable-next-line ghost/ember/no-side-effects

      this._lastIsActive = currentRouteName === this.args.route && !this.customViews.activeView;
      return this._lastIsActive;
    }

    get resetQuery() {
      if (this._forceReset || this.router.currentRouteName === this.args.route) {
        return this.args.query;
      }

      return undefined;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "customViews", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "watchRouterEvents", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "watchRouterEvents"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "unwatchRouterEvents", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "unwatchRouterEvents"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleRouteWillChange", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "handleRouteWillChange"), _class.prototype)), _class));
  _exports.default = GhCustomViewsIndexLinkComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhCustomViewsIndexLinkComponent);
});
;define("ghost-admin/components/gh-loading-list", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <ol class="gh-list loading">
      <li class="gh-list-row header">
          <div class="gh-list-header">
              <div class="bg-lightgrey w20 h3"></div>
          </div>
      </li>
  
      <li class="gh-list-row loading">
          <div class="gh-list-data gh-list-loadingcell">
              <div class="gh-list-loading-title"></div>
              <div class="gh-list-loading-detail"></div>
          </div>
      </li>
  
      <li class="gh-list-row loading">
          <div class="gh-list-data gh-list-loadingcell">
              <div class="gh-list-loading-title"></div>
              <div class="gh-list-loading-detail"></div>
          </div>
      </li>
  
      <li class="gh-list-row loading">
          <div class="gh-list-data gh-list-loadingcell">
              <div class="gh-list-loading-title"></div>
              <div class="gh-list-loading-detail"></div>
          </div>
      </li>
  </ol>
  */
  {
    "id": "f5hW8lhN",
    "block": "{\"symbols\":[],\"statements\":[[10,\"ol\"],[14,0,\"gh-list loading\"],[12],[2,\"\\n    \"],[10,\"li\"],[14,0,\"gh-list-row header\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-list-header\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"bg-lightgrey w20 h3\"],[12],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"li\"],[14,0,\"gh-list-row loading\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-list-data gh-list-loadingcell\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-list-loading-title\"],[12],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-list-loading-detail\"],[12],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"li\"],[14,0,\"gh-list-row loading\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-list-data gh-list-loadingcell\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-list-loading-title\"],[12],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-list-loading-detail\"],[12],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"li\"],[14,0,\"gh-list-row loading\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-list-data gh-list-loadingcell\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-list-loading-title\"],[12],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-list-loading-detail\"],[12],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-loading-list.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-loading-spinner", ["exports", "@glimmer/component", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _component, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if this.showSpinner}}
      <div class="gh-loading-content" ...attributes>
          <div class="gh-loading-spinner"></div>
      </div>
  {{/if}}
  */
  {
    "id": "sA5WIfTx",
    "block": "{\"symbols\":[\"&attrs\"],\"statements\":[[6,[37,0],[[32,0,[\"showSpinner\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[11,\"div\"],[24,0,\"gh-loading-content\"],[17,1],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-loading-spinner\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"if\"]}",
    "moduleName": "ghost-admin/components/gh-loading-spinner.hbs"
  });

  let GhLoadingSpinnerComponent = (_dec = Ember._tracked, (_class = class GhLoadingSpinnerComponent extends _component.default {
    // ms until the loader is displayed,
    // prevents unnecessary flash of spinner
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "showSpinner", _descriptor, this);

      _defineProperty(this, "slowLoadTimeout", 200);

      this.startSpinnerTimeout.perform();
    }

    *startSpinnerTimeout() {
      yield (0, _emberConcurrency.timeout)(this.slowLoadTimeout);
      this.showSpinner = true;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "showSpinner", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "startSpinnerTimeout", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "startSpinnerTimeout"), _class.prototype)), _class));
  _exports.default = GhLoadingSpinnerComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhLoadingSpinnerComponent);
});
;define("ghost-admin/components/gh-markdown-editor", ["exports", "ghost-admin/mixins/shortcuts", "ghost-admin/utils/ctrl-or-cmd", "ghost-admin/utils/format-markdown"], function (_exports, _shortcuts, _ctrlOrCmd, _formatMarkdown) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{yield (hash
      editor=(component "gh-simplemde"
          value=this.markdown
          placeholder=this.placeholder
          autofocus=this.autofocus
          onChange=(action "updateMarkdown")
          onFocus=(action "updateFocusState" true)
          onBlur=(action "updateFocusState" false)
          onEditorInit=(action "setEditor")
          options=this.simpleMDEOptions)
      isFullScreen=this._isFullScreen
      isSplitScreen=this._isSplitScreen
      focus=(action "focusEditor")
  )}}
  
  <div style="display:none">
      <GhFileInput
          @multiple={{true}}
          @action={{action this.onImageFilesSelected}}
          @accept={{this.imageMimeTypes}} />
  </div>
  
  {{#if this._showUnsplash}}
      <GhUnsplash
          @select={{action "insertUnsplashPhoto"}}
          @close={{action "toggleUnsplash"}} />
  {{/if}}
  
  {{#if this.showMarkdownHelp}}
      <GhFullscreenModal @modal="markdown-help"
          @close={{action "toggleMarkdownHelp"}}
          @modifier="wide" />
  {{/if}}
  
  */
  {
    "id": "qSNz7GWJ",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[18,1,[[30,[36,2],null,[[\"editor\",\"isFullScreen\",\"isSplitScreen\",\"focus\"],[[30,[36,1],[\"gh-simplemde\"],[[\"value\",\"placeholder\",\"autofocus\",\"onChange\",\"onFocus\",\"onBlur\",\"onEditorInit\",\"options\"],[[32,0,[\"markdown\"]],[32,0,[\"placeholder\"]],[32,0,[\"autofocus\"]],[30,[36,0],[[32,0],\"updateMarkdown\"],null],[30,[36,0],[[32,0],\"updateFocusState\",true],null],[30,[36,0],[[32,0],\"updateFocusState\",false],null],[30,[36,0],[[32,0],\"setEditor\"],null],[32,0,[\"simpleMDEOptions\"]]]]],[32,0,[\"_isFullScreen\"]],[32,0,[\"_isSplitScreen\"]],[30,[36,0],[[32,0],\"focusEditor\"],null]]]]]],[2,\"\\n\\n\"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n    \"],[8,\"gh-file-input\",[],[[\"@multiple\",\"@action\",\"@accept\"],[true,[30,[36,0],[[32,0],[32,0,[\"onImageFilesSelected\"]]],null],[32,0,[\"imageMimeTypes\"]]]],null],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"_showUnsplash\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-unsplash\",[],[[\"@select\",\"@close\"],[[30,[36,0],[[32,0],\"insertUnsplashPhoto\"],null],[30,[36,0],[[32,0],\"toggleUnsplash\"],null]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,3],[[32,0,[\"showMarkdownHelp\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"markdown-help\",[30,[36,0],[[32,0],\"toggleMarkdownHelp\"],null],\"wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"component\",\"hash\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-markdown-editor.hbs"
  });

  /* eslint-disable ghost/ember/no-side-effects */
  // bug in eslint-plugin-ember?
  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend(_shortcuts.default, {
    config: Ember.inject.service(),
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    classNames: ['gh-markdown-editor'],
    classNameBindings: ['_isFullScreen:gh-markdown-editor-full-screen', '_isSplitScreen:gh-markdown-editor-side-by-side'],
    // Public attributes
    autofocus: false,
    imageMimeTypes: null,
    isFullScreen: false,
    markdown: null,
    options: null,
    placeholder: '',
    showMarkdownHelp: false,
    uploadedImageUrls: null,
    enableSideBySide: true,
    enablePreview: true,
    enableHemingway: true,
    shortcuts: null,
    // Private
    _editor: null,
    _editorFocused: false,
    _isFullScreen: false,
    _isSplitScreen: false,
    _isHemingwayMode: false,
    _isUploading: false,
    _showUnsplash: false,
    _uploadedImageUrls: null,

    // Closure actions
    onChange() {},

    onFullScreenToggle() {},

    onImageFilesSelected() {},

    onPreviewToggle() {},

    onSplitScreenToggle() {},

    simpleMDEOptions: Ember.computed('options', function () {
      let options = this.options || {};
      let defaultOptions = {
        // use our Showdown config with sanitization for previews
        previewRender(markdown) {
          return (0, _formatMarkdown.default)(markdown);
        },

        // Ghost-specific SimpleMDE toolbar config - allows us to create a
        // bridge between SimpleMDE buttons and Ember actions
        toolbar: ['bold', 'italic', 'heading', '|', 'quote', 'unordered-list', 'ordered-list', '|', 'link', {
          name: 'image',
          action: () => {
            this._openImageFileDialog();
          },
          className: 'fa fa-picture-o',
          title: 'Upload Image(s)'
        }, '|', {
          name: 'preview',
          action: () => {
            this._togglePreview();
          },
          className: 'fa fa-eye no-disable',
          title: 'Render Preview (Ctrl-Alt-R)',
          useCtrlOnMac: true
        }, {
          name: 'side-by-side',
          action: () => {
            this.send('toggleSplitScreen');
          },
          className: 'fa fa-columns no-disable no-mobile',
          title: 'Side-by-side Preview (Ctrl-Alt-P)',
          useCtrlOnMac: true
        }, '|', {
          name: 'spellcheck',
          action: () => {
            this._toggleSpellcheck();
          },
          className: 'fa fa-check',
          title: 'Spellcheck (Ctrl-Alt-S)',
          useCtrlOnMac: true
        }, {
          name: 'hemingway',
          action: () => {
            this._toggleHemingway();
          },
          className: 'fa fa-h-square',
          title: 'Hemingway Mode (Ctrl-Alt-H)',
          useCtrlOnMac: true
        }, {
          name: 'guide',
          action: () => {
            this.send('toggleMarkdownHelp');
          },
          className: 'fa fa-question-circle',
          title: 'Markdown Guide'
        }],
        // disable shortcuts for side-by-side and fullscreen because they
        // trigger interal SimpleMDE methods that will result in broken
        // layouts
        shortcuts: {
          toggleFullScreen: null,
          togglePreview: null,
          toggleSideBySide: null,
          drawImage: null
        },
        // only include the number of words in the status bar
        status: ['words']
      };
      let toolbar = defaultOptions.toolbar;

      if (!this.enableSideBySide) {
        let sideBySide = toolbar.findBy('name', 'side-by-side');
        let index = toolbar.indexOf(sideBySide);
        toolbar.splice(index, 1);
      }

      if (!this.enablePreview) {
        let preview = toolbar.findBy('name', 'preview');
        let index = toolbar.indexOf(preview);
        toolbar.splice(index, 1);
      }

      if (!this.enableHemingway) {
        let hemingway = toolbar.findBy('name', 'hemingway');
        let index = toolbar.indexOf(hemingway);
        toolbar.splice(index, 1);
      }

      if (this.get('settings.unsplash')) {
        let image = toolbar.findBy('name', 'image');
        let index = toolbar.indexOf(image) + 1;
        toolbar.splice(index, 0, {
          name: 'unsplash',
          action: () => {
            this.send('toggleUnsplash');
          },
          className: 'fa fa-camera',
          title: 'Add Image from Unsplash'
        });
      }

      let lastItem = null;
      toolbar.forEach((item, index) => {
        if (item === '|' && item === lastItem) {
          toolbar[index] = null;
        }

        lastItem = item;
      });
      defaultOptions.toolbar = toolbar.filter(Boolean);
      return Ember.assign(defaultOptions, options);
    }),

    init() {
      this._super(...arguments);

      let shortcuts = {};
      shortcuts[`${_ctrlOrCmd.default}+shift+i`] = {
        action: 'openImageFileDialog'
      };
      shortcuts['ctrl+alt+s'] = {
        action: 'toggleSpellcheck'
      };

      if (this.enablePreview) {
        shortcuts['ctrl+alt+r'] = {
          action: 'togglePreview'
        };
      }

      if (this.enableSideBySide) {
        shortcuts['ctrl+alt+p'] = {
          action: 'toggleSplitScreen'
        };
      }

      if (this.enableHemingway) {
        shortcuts['ctrl+alt+h'] = {
          action: 'toggleHemingway'
        };
      }

      this.shortcuts = shortcuts;
    },

    // extract markdown content from single markdown card
    didReceiveAttrs() {
      this._super(...arguments);

      let uploadedImageUrls = this.uploadedImageUrls;

      if (!Ember.isEmpty(uploadedImageUrls) && uploadedImageUrls !== this._uploadedImageUrls) {
        this._uploadedImageUrls = uploadedImageUrls; // must be done afterRender to avoid double modify of mobiledoc in a single render

        Ember.run.scheduleOnce('afterRender', this, this._insertImages, uploadedImageUrls);
      } // focus the editor when the markdown value changes, this is necessary
      // because both the autofocus and markdown values can change without a
      // re-render, eg. navigating from edit->new


      if (this.autofocus && this._editor && this.markdown !== this._editor.value()) {
        this.send('focusEditor');
      } // use internal values to avoid updating bound values


      if (!Ember.isEmpty(this.isFullScreen)) {
        this.set('_isFullScreen', this.isFullScreen);
      }

      if (!Ember.isEmpty(this.isSplitScreen)) {
        this.set('_isSplitScreen', this.isSplitScreen);
      }

      this._updateButtonState();
    },

    didInsertElement() {
      this._super(...arguments);

      this.registerShortcuts(); // HACK: iOS will scroll the body up when activating the keyboard, this
      // causes problems in the CodeMirror based editor because iOS doesn't
      // scroll the cursor and other measurement elements which results in
      // rather unfriendly behaviour with text appearing in seemingly random
      // places and an inability to select things properly
      //
      // To get around this we use a raf loop that constantly makes sure the
      // body scrollTop is 0 when the editor is on screen

      let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);

      if (iOS) {
        this._preventBodyScroll();
      }
    },

    willDestroyElement() {
      if (this._isSplitScreen) {
        this._disconnectSplitPreview();
      }

      this.removeShortcuts();

      this._super(...arguments);

      if (this._preventBodyScrollId) {
        window.cancelAnimationFrame(this._preventBodyScrollId);
      }
    },

    actions: {
      // trigger external update, any mobiledoc updates are handled there
      updateMarkdown(markdown) {
        this.onChange(markdown);
      },

      // store a reference to the simplemde editor so that we can handle
      // focusing and image uploads
      setEditor(editor) {
        this._editor = editor; // disable CodeMirror's drag/drop handling as we want to handle that
        // in the parent gh-editor component

        this._editor.codemirror.setOption('dragDrop', false); // default to spellchecker being off


        this._editor.codemirror.setOption('mode', 'gfm'); // add non-breaking space as a special char
        // eslint-disable-next-line no-control-regex


        this._editor.codemirror.setOption('specialChars', /[\u0000-\u001f\u007f-\u009f\u00ad\u061c\u200b-\u200f\u2028\u2029\ufeff\xa0]/g);

        this._updateButtonState();
      },

      // used by the title input when the TAB or ENTER keys are pressed
      focusEditor() {
        let position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'bottom';

        this._editor.codemirror.focus();

        if (position === 'bottom') {
          this._editor.codemirror.execCommand('goDocEnd');
        } else if (position === 'top') {
          this._editor.codemirror.execCommand('goDocStart');
        }

        return false;
      },

      // HACK FIXME (PLEASE):
      // - clicking toolbar buttons will cause the editor to lose focus
      // - this is painful because we often want to know if the editor has focus
      //   so that we can insert images and so on in the correct place
      // - the blur event will always fire before the button action is triggered 😞
      // - to work around this we track focus state manually and set it to false
      //   after an arbitrary period that's long enough to allow the button action
      //   to trigger first
      // - this _may_ well have unknown issues due to browser differences,
      //   variations in performance, moon cycles, sun spots, or cosmic rays
      // - here be 🐲
      // - (please let it work 🙏)
      updateFocusState(focused) {
        if (focused) {
          this._editorFocused = true;
        } else {
          Ember.run.later(this, function () {
            this._editorFocused = false;
          }, 100);
        }
      },

      openImageFileDialog() {
        let captureSelection = this._editor.codemirror.hasFocus();

        this._openImageFileDialog({
          captureSelection
        });
      },

      toggleUnsplash() {
        if (this._showUnsplash) {
          return this.toggleProperty('_showUnsplash');
        } // capture current selection before it's lost by clicking toolbar btn


        if (this._editorFocused) {
          this._imageInsertSelection = {
            anchor: this._editor.codemirror.getCursor('anchor'),
            head: this._editor.codemirror.getCursor('head')
          };
        }

        this.toggleProperty('_showUnsplash');
      },

      insertUnsplashPhoto(_ref2) {
        let {
          src,
          alt,
          caption
        } = _ref2;
        let image = {
          alt,
          url: src,
          credit: `<small>${caption}</small>`
        };

        this._insertImages([image]);
      },

      togglePreview() {
        this._togglePreview();
      },

      toggleFullScreen() {
        let isFullScreen = !this._isFullScreen;
        this.set('_isFullScreen', isFullScreen);

        this._updateButtonState();

        this.onFullScreenToggle(isFullScreen); // leave split screen when exiting full screen mode

        if (!isFullScreen && this._isSplitScreen) {
          this.send('toggleSplitScreen');
        }
      },

      toggleSplitScreen() {
        let isSplitScreen = !this._isSplitScreen;
        let previewButton = this._editor.toolbarElements.preview;
        this.set('_isSplitScreen', isSplitScreen);

        this._updateButtonState(); // set up the preview rendering and scroll sync
        // afterRender is needed so that necessary components have been
        // added/removed and editor pane length has settled


        if (isSplitScreen) {
          // disable the normal SimpleMDE preview if it's active
          if (this._editor.isPreviewActive()) {
            let preview = this._editor.toolbar.find(button => button.name === 'preview');

            preview.action(this._editor);
          }

          if (previewButton) {
            previewButton.classList.add('disabled');
          }

          Ember.run.scheduleOnce('afterRender', this, this._connectSplitPreview);
        } else {
          if (previewButton) {
            previewButton.classList.remove('disabled');
          }

          Ember.run.scheduleOnce('afterRender', this, this._disconnectSplitPreview);
        }

        this.onSplitScreenToggle(isSplitScreen); // go fullscreen when entering split screen mode

        this.send('toggleFullScreen');
      },

      toggleSpellcheck() {
        this._toggleSpellcheck();
      },

      toggleHemingway() {
        this._toggleHemingway();
      },

      toggleMarkdownHelp() {
        this.toggleProperty('showMarkdownHelp');
      }

    },

    _preventBodyScroll() {
      this._preventBodyScrollId = window.requestAnimationFrame(() => {
        let body = document.querySelector('body'); // only scroll the editor if the editor is active so that we don't
        // clobber scroll-to-input behaviour in the PSM

        if (document.activeElement.closest('.CodeMirror')) {
          if (body.scrollTop !== 0) {
            let editor = document.querySelector('.gh-markdown-editor'); // scroll the editor by the same amount the body has been scrolled,
            // this should keep the cursor on screen when opening the keyboard

            editor.scrollTop += body.scrollTop;
            body.scrollTop = 0;
          }
        }

        this._preventBodyScroll();
      });
    },

    _insertImages(urls) {
      let cm = this._editor.codemirror; // loop through urls and generate image markdown

      let images = urls.map(url => {
        // plain url string, so extract filename from path
        if (Ember.typeOf(url) === 'string') {
          let filename = url.split('/').pop();
          let alt = filename; // if we have a normal filename.ext, set alt to filename -ext

          if (filename.lastIndexOf('.') > 0) {
            alt = filename.slice(0, filename.lastIndexOf('.'));
          }

          return `![${alt}](${url})`; // full url object, use attrs we're given
        } else {
          let image = `![${url.alt}](${url.url})`;

          if (url.credit) {
            image += `\n${url.credit}`;
          }

          return image;
        }
      });
      let text = images.join('\n\n'); // clicking the image toolbar button will lose the selection so we use
      // the captured selection to re-select here

      if (this._imageInsertSelection) {
        // we want to focus but not re-position
        this.send('focusEditor', null); // re-select and clear the captured selection so drag/drop still
        // inserts at the correct place

        cm.setSelection(this._imageInsertSelection.anchor, this._imageInsertSelection.head);
        this._imageInsertSelection = null;
      } // focus editor and place cursor at end if not already focused


      if (!cm.hasFocus()) {
        this.send('focusEditor');
        text = `\n\n${text}\n\n`;
      } // insert at cursor or replace selection then position cursor at end
      // of inserted text


      cm.replaceSelection(text, 'end');
    },

    // mark the split-pane/full-screen/spellcheck buttons active when they're active
    _updateButtonState() {
      if (this._editor) {
        let sideBySideButton = this._editor.toolbarElements['side-by-side'];
        let spellcheckButton = this._editor.toolbarElements.spellcheck;
        let hemingwayButton = this._editor.toolbarElements.hemingway;

        if (sideBySideButton) {
          if (this._isSplitScreen) {
            sideBySideButton.classList.add('active');
          } else {
            sideBySideButton.classList.remove('active');
          }
        }

        if (spellcheckButton) {
          if (this._editor.codemirror.getOption('mode') === 'spell-checker') {
            spellcheckButton.classList.add('active');
          } else {
            spellcheckButton.classList.remove('active');
          }
        }

        if (hemingwayButton) {
          if (this._isHemingwayMode) {
            hemingwayButton.classList.add('active');
          } else {
            hemingwayButton.classList.remove('active');
          }
        }
      }
    },

    // set up the preview auto-update and scroll sync
    _connectSplitPreview() {
      let cm = this._editor.codemirror;
      let editor = this._editor;
      let editorPane = this.element.querySelector('.gh-markdown-editor-pane');
      let previewPane = this.element.querySelector('.gh-markdown-editor-preview');
      let previewContent = this.element.querySelector('.gh-markdown-editor-preview-content');
      this._editorPane = editorPane;
      this._previewPane = previewPane;
      this._previewContent = previewContent; // from SimpleMDE -------

      let sideBySideRenderingFunction = function () {
        previewContent.innerHTML = editor.options.previewRender(editor.value(), previewContent);
      };

      cm.sideBySideRenderingFunction = sideBySideRenderingFunction;
      sideBySideRenderingFunction();
      cm.on('update', cm.sideBySideRenderingFunction); // Refresh to fix selection being off (#309)

      cm.refresh(); // ----------------------

      this._onEditorPaneScroll = this._scrollHandler.bind(this);
      editorPane.addEventListener('scroll', this._onEditorPaneScroll, false);

      this._scrollSync();
    },

    _scrollHandler() {
      if (!this._scrollSyncTicking) {
        requestAnimationFrame(this._scrollSync.bind(this));
      }

      this._scrollSyncTicking = true;
    },

    _scrollSync() {
      let editorPane = this._editorPane;
      let previewPane = this._previewPane;
      let height = editorPane.scrollHeight - editorPane.clientHeight;
      let ratio = parseFloat(editorPane.scrollTop) / height;
      let move = (previewPane.scrollHeight - previewPane.clientHeight) * ratio;
      previewPane.scrollTop = move;
      this._scrollSyncTicking = false;
    },

    _disconnectSplitPreview() {
      let cm = this._editor.codemirror;
      cm.off('update', cm.sideBySideRenderingFunction);
      cm.refresh();

      this._editorPane.removeEventListener('scroll', this._onEditorPaneScroll, false);

      delete this._previewPane;
      delete this._previewPaneContent;
      delete this._onEditorPaneScroll;
    },

    _openImageFileDialog() {
      let {
        captureSelection = true
      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (captureSelection) {
        // capture the current selection before it's lost by clicking the
        // file input button
        this._imageInsertSelection = {
          anchor: this._editor.codemirror.getCursor('anchor'),
          head: this._editor.codemirror.getCursor('head')
        };
      } // trigger the dialog via gh-file-input, when a file is selected it will
      // trigger the onImageFilesSelected closure action


      this.element.querySelector('input[type="file"]').click();
    },

    // wrap SimpleMDE's built-in preview toggle so that we can trigger a closure
    // action that can apply our own classes higher up in the DOM
    _togglePreview() {
      this.onPreviewToggle(!this._editor.isPreviewActive());

      this._editor.togglePreview();
    },

    _toggleSpellcheck() {
      let cm = this._editor.codemirror;

      if (cm.getOption('mode') === 'spell-checker') {
        cm.setOption('mode', 'gfm');
      } else {
        cm.setOption('mode', 'spell-checker');
      }

      this._updateButtonState();
    },

    _toggleHemingway() {
      let cm = this._editor.codemirror;
      let extraKeys = cm.getOption('extraKeys');
      let notificationText = '';
      this._isHemingwayMode = !this._isHemingwayMode;

      if (this._isHemingwayMode) {
        notificationText = '<span class="gh-notification-title">Hemingway Mode On:</span> Write now; edit later. Backspace disabled.';

        extraKeys.Backspace = function () {};
      } else {
        notificationText = '<span class="gh-notification-title">Hemingway Mode Off:</span> Normal editing restored.';
        delete extraKeys.Backspace;
      }

      cm.setOption('extraKeys', extraKeys);

      this._updateButtonState();

      cm.focus();
      this.notifications.showNotification(Ember.String.htmlSafe(notificationText), {
        key: 'editor.hemingwaymode'
      });
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-member-activity-feed-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-member-feed-row" ...attributes>
      <span class="gh-member-feed-activity midgrey" data-tooltip={{@activity.tooltip}}>{{svg-jar @activity.icon class=@activity.iconClass}}</span>
      {{#if @activity.email}}
          <GhEmailPreviewLink @data={{@activity.email}} class="gh-member-feed-title">{{@activity.message}}</GhEmailPreviewLink>
      {{else}}
          <span class="gh-member-feed-title">{{@activity.message}}</span>
      {{/if}}
      <span class="gh-member-feed-date">{{moment-format @activity.timestamp "D MMM YYYY"}}</span>
  </div>
  */
  {
    "id": "6ElAaDwn",
    "block": "{\"symbols\":[\"@activity\",\"&attrs\"],\"statements\":[[11,\"div\"],[24,0,\"gh-member-feed-row\"],[17,2],[12],[2,\"\\n    \"],[10,\"span\"],[14,0,\"gh-member-feed-activity midgrey\"],[15,\"data-tooltip\",[32,1,[\"tooltip\"]]],[12],[1,[30,[36,0],[[32,1,[\"icon\"]]],[[\"class\"],[[32,1,[\"iconClass\"]]]]]],[13],[2,\"\\n\"],[6,[37,1],[[32,1,[\"email\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[8,\"gh-email-preview-link\",[[24,0,\"gh-member-feed-title\"]],[[\"@data\"],[[32,1,[\"email\"]]]],[[\"default\"],[{\"statements\":[[1,[32,1,[\"message\"]]]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[10,\"span\"],[14,0,\"gh-member-feed-title\"],[12],[1,[32,1,[\"message\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[10,\"span\"],[14,0,\"gh-member-feed-date\"],[12],[1,[30,[36,2],[[32,1,[\"timestamp\"]],\"D MMM YYYY\"],null]],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"moment-format\"]}",
    "moduleName": "ghost-admin/components/gh-member-activity-feed-item.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-member-activity-feed", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if this.activities}}<h4 class="gh-main-section-header small bn">Activity</h4>{{/if}}
  <div class="gh-main-section-content bordered {{if this.activities "" "mt8"}}">
      <div class="gh-member-feed" ...attributes>
          <div class="flex-auto flex flex-column items-stretch {{if this.activities "justify-between" "h-100 justify-center"}}">
              <div>
                  {{#if this.activities}}
                      {{#each this.firstActivities as |activity|}}
                          <GhMemberActivityFeedItem @activity={{activity}} />
                      {{/each}}
  
                      {{#liquid-if this.isShowingAll class="show-overflow"}}
                          {{#each this.remainingActivities as |activity|}}
                              <GhMemberActivityFeedItem @activity={{activity}} />
                          {{/each}}
                      {{/liquid-if}}
  
                      {{#if (feature "membersActivityFeed")}}
                          <LinkTo class="gh-btn gh-member-btn-expandfeed" @route="members-activity" @query={{hash excludedEvents=null member=@member.id}}><span>View all activity</span></LinkTo>
                      {{else}}
                          {{#if (and this.remainingActivities (not this.isShowingAll))}}
                              <button
                                  type="button"
                                  class="gh-btn gh-member-btn-expandfeed"
                                  data-test-button="view-all-activity"
                                  {{on "click" this.showAll}}
                              >
                                  <span>View all activity</span>
                              </button>
                          {{/if}}
                      {{/if}}
                  {{else}}
                      <div class="gh-members-no-data gh-members-no-list">
                          <div class="lightgrey">{{svg-jar "no-data-list"}}</div>
                          <h4>Activity</h4>
                          <p>
                              All events related to this member will be shown here.
                          </p>
                      </div>
                  {{/if}}
              </div>
          </div>
      </div>
  </div>
  */
  {
    "id": "BLVoljN+",
    "block": "{\"symbols\":[\"activity\",\"activity\",\"@member\",\"&attrs\"],\"statements\":[[6,[37,4],[[32,0,[\"activities\"]]],null,[[\"default\"],[{\"statements\":[[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Activity\"],[13]],\"parameters\":[]}]]],[2,\"\\n\"],[10,\"div\"],[15,0,[31,[\"gh-main-section-content bordered \",[30,[36,4],[[32,0,[\"activities\"]],\"\",\"mt8\"],null]]]],[12],[2,\"\\n    \"],[11,\"div\"],[24,0,\"gh-member-feed\"],[17,4],[12],[2,\"\\n        \"],[10,\"div\"],[15,0,[31,[\"flex-auto flex flex-column items-stretch \",[30,[36,4],[[32,0,[\"activities\"]],\"justify-between\",\"h-100 justify-center\"],null]]]],[12],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"activities\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,7],[[30,[36,6],[[30,[36,6],[[32,0,[\"firstActivities\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[8,\"gh-member-activity-feed-item\",[],[[\"@activity\"],[[32,2]]],null],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"\\n\"],[6,[37,8],[[32,0,[\"isShowingAll\"]]],[[\"class\"],[\"show-overflow\"]],[[\"default\"],[{\"statements\":[[6,[37,7],[[30,[36,6],[[30,[36,6],[[32,0,[\"remainingActivities\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[8,\"gh-member-activity-feed-item\",[],[[\"@activity\"],[[32,1]]],null],[2,\"\\n\"]],\"parameters\":[1]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,4],[[30,[36,9],[\"membersActivityFeed\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[8,\"link-to\",[[24,0,\"gh-btn gh-member-btn-expandfeed\"]],[[\"@route\",\"@query\"],[\"members-activity\",[30,[36,5],null,[[\"excludedEvents\",\"member\"],[null,[32,3,[\"id\"]]]]]]],[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[2,\"View all activity\"],[13]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,4],[[30,[36,3],[[32,0,[\"remainingActivities\"]],[30,[36,2],[[32,0,[\"isShowingAll\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[11,\"button\"],[24,0,\"gh-btn gh-member-btn-expandfeed\"],[24,\"data-test-button\",\"view-all-activity\"],[24,4,\"button\"],[4,[38,1],[\"click\",[32,0,[\"showAll\"]]],null],[12],[2,\"\\n                                \"],[10,\"span\"],[12],[2,\"View all activity\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-members-no-data gh-members-no-list\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"lightgrey\"],[12],[1,[30,[36,0],[\"no-data-list\"],null]],[13],[2,\"\\n                        \"],[10,\"h4\"],[12],[2,\"Activity\"],[13],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"\\n                            All events related to this member will be shown here.\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"on\",\"not\",\"and\",\"if\",\"hash\",\"-track-array\",\"each\",\"liquid-if\",\"feature\"]}",
    "moduleName": "ghost-admin/components/gh-member-activity-feed.hbs"
  });

  class MemberActivity {
    constructor(props) {
      _defineProperty(this, "eventProperties", {
        sent: {
          icon: 'send-email',
          iconClass: 'midgrey',
          tooltip: 'Received email'
        },
        opened: {
          icon: 'eye',
          iconClass: 'green-d2',
          tooltip: 'Opened email'
        },
        failed: {
          icon: 'cross-circle',
          iconClass: 'red-d2',
          tooltip: 'Email delivery failed'
        }
      });

      Object.assign(this, props);
    }

    get icon() {
      return this.eventProperties[this.event].icon;
    }

    get iconClass() {
      return this.eventProperties[this.event].iconClass;
    }

    get tooltip() {
      return this.eventProperties[this.event].tooltip;
    }

    get message() {
      if (this.email) {
        return this.email.subject;
      }

      return this.eventProperties[this.event].message;
    }

  }

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(MemberActivity, true);

  window.__CLASSIC_OWN_CLASSES__.set(MemberActivity, true);

  let MemberActivityFeedComponent = (_dec = Ember._tracked, _dec2 = Ember._action, (_class = class MemberActivityFeedComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "isShowingAll", _descriptor, this);
    }

    get activities() {
      const activities = [];
      (this.args.emailRecipients || []).forEach(emailRecipient => {
        if (emailRecipient.openedAtUTC) {
          activities.push(new MemberActivity({
            event: 'opened',
            email: emailRecipient.email,
            timestamp: emailRecipient.openedAtUTC
          }));
        } else if (emailRecipient.failedAtUTC) {
          activities.push(new MemberActivity({
            event: 'failed',
            email: emailRecipient.email,
            timestamp: emailRecipient.failedAtUTC
          }));
        } else if (emailRecipient.processedAtUTC) {
          activities.push(new MemberActivity({
            event: 'sent',
            email: emailRecipient.email,
            timestamp: emailRecipient.processedAtUTC
          }));
        }
      });
      return activities.sort((a, b) => {
        return b.timestamp.valueOf() - a.timestamp.valueOf();
      });
    }

    get firstActivities() {
      return this.activities.slice(0, 5);
    }

    get remainingActivities() {
      return this.activities.slice(5, this.activities.length);
    }

    showAll() {
      this.isShowingAll = true;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "isShowingAll", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "showAll", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "showAll"), _class.prototype)), _class));
  _exports.default = MemberActivityFeedComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, MemberActivityFeedComponent);
});
;define("ghost-admin/components/gh-member-avatar", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <figure class="gh-member-gravatar {{@containerClass}}">
      <div class="gh-member-initials flex items-center justify-center br-100 {{@containerClass}}" style={{this.backgroundStyle}}>
          <span class="gh-member-avatar-label {{or @sizeClass "gh-member-list-avatar"}}">{{this.initials}}</span>
      </div>
      <img class="gh-member-avatar-image" src={{gravatar @member.email size=180}} />
  </figure>
  */
  {
    "id": "Jf6f34sh",
    "block": "{\"symbols\":[\"@containerClass\",\"@sizeClass\",\"@member\"],\"statements\":[[10,\"figure\"],[15,0,[31,[\"gh-member-gravatar \",[32,1]]]],[12],[2,\"\\n    \"],[10,\"div\"],[15,0,[31,[\"gh-member-initials flex items-center justify-center br-100 \",[32,1]]]],[15,5,[32,0,[\"backgroundStyle\"]]],[12],[2,\"\\n        \"],[10,\"span\"],[15,0,[31,[\"gh-member-avatar-label \",[30,[36,0],[[32,2],\"gh-member-list-avatar\"],null]]]],[12],[1,[32,0,[\"initials\"]]],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"img\"],[14,0,\"gh-member-avatar-image\"],[15,\"src\",[30,[36,1],[[32,3,[\"email\"]]],[[\"size\"],[180]]]],[12],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"or\",\"gravatar\"]}",
    "moduleName": "ghost-admin/components/gh-member-avatar.hbs"
  });

  const stringToHslColor = function (str, saturation, lightness) {
    var hash = 0;

    for (var i = 0; i < str.length; i++) {
      hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }

    var h = hash % 360;
    return 'hsl(' + h + ', ' + saturation + '%, ' + lightness + '%)';
  };

  class GhMemberAvatarComponent extends _component.default {
    get memberName() {
      let {
        member
      } = this.args; // can be given a proxy object from a sparse array so get is required

      return Ember.get(member, 'name') || Ember.get(member, 'email') || 'NM';
    }

    get backgroundStyle() {
      let color = stringToHslColor(this.memberName, 75, 55);
      return Ember.String.htmlSafe(`background-color: ${color}`);
    }

    get initials() {
      if (this.memberName === 'NM') {
        return 'NM';
      }

      let names = this.memberName.split(' ');
      let intials = names.length > 1 ? [names[0][0], names[names.length - 1][0]] : [names[0][0]];
      return intials.join('').toUpperCase();
    }

  }

  _exports.default = GhMemberAvatarComponent;

  window.__CLASSIC_OWN_CLASSES__.set(GhMemberAvatarComponent, true);

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMemberAvatarComponent);
});
;define("ghost-admin/components/gh-member-details", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <section class="gh-member-detail-overview" ...attributes>
      <div class="gh-main-section-block">
          <div class="gh-main-section-content">
              <div class="flex items-center">
                  {{#if (or @member.name @member.email)}}
                      <GhMemberAvatar
                          @member={{@member}}
                          @sizeClass={{if @member.name 'f-subheadline fw4 lh-zero tracked-1' 'f-subheadline fw4 lh-zero tracked-1'}}
                          @containerClass="w20 h20 mr4 gh-member-detail-avatar"
                      />
                  {{else}}
                      <div class="flex items-center justify-center br-100 mr4 gh-new-member-avatar">
                          <span class="gh-member-avatar-label f-subheadline fw4 lh-zero tracked-1">N</span>
                      </div>
                  {{/if}}
                  <div>
                      <h3>
                          {{or @member.name @member.email}}
                          {{#unless (or @member.name @member.email)}}
                              {{#if @member.isNew}}
                              <span class="midgrey">New member</span>
                              {{/if}}
                          {{/unless}}
                      </h3>
                      <p>
                          {{#if (and @member.name @member.email)}}
                              <a href="mailto:{{@member.email}}">{{@member.email}}</a>
                          {{/if}}
                      </p>
                      {{#unless @member.isNew}}
                      <p class="{{if @member.name "nudge-bottom--2"}}">
                          {{#if @member.geolocation}}
                              {{#if (and (eq @member.geolocation.country_code "US") @member.geolocation.region)}}
                                  {{@member.geolocation.region}}, US
                              {{else}}
                                  {{or @member.geolocation.country "Unknown location"}}
                              {{/if}}
                          {{else}}
                              Unknown location
                          {{/if}}
                          – Created on {{moment-format @member.createdAtUTC "D MMM YYYY"}}
                      </p>
                      {{/unless}}
                  </div>
              </div>
          </div>
      </div>
  </section>
  */
  {
    "id": "lQEdgsMb",
    "block": "{\"symbols\":[\"@member\",\"&attrs\"],\"statements\":[[11,\"section\"],[24,0,\"gh-member-detail-overview\"],[17,2],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-content\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n\"],[6,[37,3],[[30,[36,0],[[32,1,[\"name\"]],[32,1,[\"email\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[8,\"gh-member-avatar\",[],[[\"@member\",\"@sizeClass\",\"@containerClass\"],[[32,1],[30,[36,3],[[32,1,[\"name\"]],\"f-subheadline fw4 lh-zero tracked-1\",\"f-subheadline fw4 lh-zero tracked-1\"],null],\"w20 h20 mr4 gh-member-detail-avatar\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"flex items-center justify-center br-100 mr4 gh-new-member-avatar\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"gh-member-avatar-label f-subheadline fw4 lh-zero tracked-1\"],[12],[2,\"N\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h3\"],[12],[2,\"\\n                        \"],[1,[30,[36,0],[[32,1,[\"name\"]],[32,1,[\"email\"]]],null]],[2,\"\\n\"],[6,[37,5],[[30,[36,0],[[32,1,[\"name\"]],[32,1,[\"email\"]]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,3],[[32,1,[\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"span\"],[14,0,\"midgrey\"],[12],[2,\"New member\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[32,1,[\"name\"]],[32,1,[\"email\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"a\"],[15,6,[31,[\"mailto:\",[32,1,[\"email\"]]]]],[12],[1,[32,1,[\"email\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n\"],[6,[37,5],[[32,1,[\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"p\"],[15,0,[31,[[30,[36,3],[[32,1,[\"name\"]],\"nudge-bottom--2\"],null]]]],[12],[2,\"\\n\"],[6,[37,3],[[32,1,[\"geolocation\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,3],[[30,[36,2],[[30,[36,1],[[32,1,[\"geolocation\",\"country_code\"]],\"US\"],null],[32,1,[\"geolocation\",\"region\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[1,[32,1,[\"geolocation\",\"region\"]]],[2,\", US\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[1,[30,[36,0],[[32,1,[\"geolocation\",\"country\"]],\"Unknown location\"],null]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"                            Unknown location\\n\"]],\"parameters\":[]}]]],[2,\"                        – Created on \"],[1,[30,[36,4],[[32,1,[\"createdAtUTC\"]],\"D MMM YYYY\"],null]],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"or\",\"eq\",\"and\",\"if\",\"moment-format\",\"unless\"]}",
    "moduleName": "ghost-admin/components/gh-member-details.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-member-label-input-labs", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <GhTokenInput
      @extra={{hash
          tokenComponent="gh-token-input/label-token-labs"
      }}
      @class="gh-member-label-input-labs"
      @onChange={{this.updateLabels}}
      @onCreate={{this.createLabel}}
      @options={{this.availableLabels}}
      @renderInPlace={{true}}
      @selected={{this.selectedLabels}}
      @showCreateWhen={{this.hideCreateOptionOnMatchingLabel}}
      @triggerId={{this.triggerId}}
      @selectedItemComponent="gh-token-input/label-selected-item-labs"
      @disabled={{@disabled}}
      @allowCreation={{this.args.allowCreation}}
      as |label|
  >
      <div style="display: flex">
          <span
              class="dropdown-label"
              style="flex-grow: 1"
              title="{{label.name}}"
              data-test-label-filter={{label.name}}>
              {{label.name}}
          </span>
          {{#if label.slug}}
              <span class="dropdown-action-icon" {{on "mouseup" (fn this.editLabel label)}}>
                  {{svg-jar "pen"}}
              </span>
          {{/if}}
      </div>
  </GhTokenInput>
  
  */
  {
    "id": "br84qqUD",
    "block": "{\"symbols\":[\"label\",\"@disabled\"],\"statements\":[[8,\"gh-token-input\",[],[[\"@extra\",\"@class\",\"@onChange\",\"@onCreate\",\"@options\",\"@renderInPlace\",\"@selected\",\"@showCreateWhen\",\"@triggerId\",\"@selectedItemComponent\",\"@disabled\",\"@allowCreation\"],[[30,[36,3],null,[[\"tokenComponent\"],[\"gh-token-input/label-token-labs\"]]],\"gh-member-label-input-labs\",[32,0,[\"updateLabels\"]],[32,0,[\"createLabel\"]],[32,0,[\"availableLabels\"]],true,[32,0,[\"selectedLabels\"]],[32,0,[\"hideCreateOptionOnMatchingLabel\"]],[32,0,[\"triggerId\"]],\"gh-token-input/label-selected-item-labs\",[32,2],[32,0,[\"args\",\"allowCreation\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[10,\"div\"],[14,5,\"display: flex\"],[12],[2,\"\\n        \"],[10,\"span\"],[14,0,\"dropdown-label\"],[14,5,\"flex-grow: 1\"],[15,\"title\",[31,[[32,1,[\"name\"]]]]],[15,\"data-test-label-filter\",[32,1,[\"name\"]]],[12],[2,\"\\n            \"],[1,[32,1,[\"name\"]]],[2,\"\\n        \"],[13],[2,\"\\n\"],[6,[37,4],[[32,1,[\"slug\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[11,\"span\"],[24,0,\"dropdown-action-icon\"],[4,[38,1],[\"mouseup\",[30,[36,0],[[32,0,[\"editLabel\"]],[32,1]],null]],null],[12],[2,\"\\n                \"],[1,[30,[36,2],[\"pen\"],null]],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"fn\",\"on\",\"svg-jar\",\"hash\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-member-label-input-labs.hbs"
  });

  let GhMemberLabelInputLabs = (_dec = Ember.inject.service, _dec2 = Ember._action, _dec3 = Ember._action, _dec4 = Ember._action, _dec5 = Ember._action, (_class = class GhMemberLabelInputLabs extends _component.default {
    get availableLabels() {
      return this._availableLabels.toArray().sort((labelA, labelB) => {
        return labelA.name.localeCompare(labelB.name, undefined, {
          ignorePunctuation: true
        });
      });
    }

    get availableLabelNames() {
      return this.availableLabels.map(label => label.name.toLowerCase());
    }

    constructor() {
      super(...arguments); // perform a background query to fetch all users and set `availableLabels`
      // to a live-query that will be immediately populated with what's in the
      // store and be updated when the above query returns

      _initializerDefineProperty(this, "store", _descriptor, this);

      this.store.query('label', {
        limit: 'all'
      });
      this._availableLabels = this.store.peekAll('label');
    }

    get selectedLabels() {
      if (typeof this.args.labels === 'object') {
        if (this.args.labels?.length && typeof this.args.labels[0] === 'string') {
          return this.args.labels.map(d => {
            return this.availableLabels.find(label => label.slug === d);
          }) || [];
        }

        return this.args.labels || [];
      }

      return [];
    }

    willDestroy() {
      super.willDestroy?.(...arguments);

      this._availableLabels.forEach(label => {
        if (label.get('isNew')) {
          this.store.deleteRecord(label);
        }
      });
    }

    hideCreateOptionOnMatchingLabel(term) {
      return !this.availableLabelNames.includes(term.toLowerCase());
    }

    updateLabels(newLabels) {
      let currentLabels = this.selectedLabels; // destroy new+unsaved labels that are no longer selected

      currentLabels.forEach(function (label) {
        if (!newLabels.includes(label) && label.get('isNew')) {
          label.destroyRecord();
        }
      }); // update labels

      this.args.onChange(newLabels);
    }

    editLabel(label, event) {
      event.stopPropagation();
      this.args.onLabelEdit?.(label.slug);
    }

    createLabel(labelName) {
      let currentLabels = this.selectedLabels;
      let currentLabelNames = currentLabels.map(label => label.get('name').toLowerCase());
      let labelToAdd;
      labelName = labelName.trim(); // abort if label is already selected

      if (currentLabelNames.includes(labelName.toLowerCase())) {
        return;
      } // find existing label if there is one


      labelToAdd = this._findLabelByName(labelName); // create new label if no match

      if (!labelToAdd) {
        labelToAdd = this.store.createRecord('label', {
          name: labelName
        });
      } // push label onto member relationship


      currentLabels.pushObject(labelToAdd);
      this.args.onChange(currentLabels);
    }

    _findLabelByName(name) {
      let withMatchingName = function (label) {
        return label.name.toLowerCase() === name.toLowerCase();
      };

      return this.availableLabels.find(withMatchingName);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "hideCreateOptionOnMatchingLabel", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "hideCreateOptionOnMatchingLabel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateLabels", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "updateLabels"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "editLabel", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "editLabel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "createLabel", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "createLabel"), _class.prototype)), _class));
  _exports.default = GhMemberLabelInputLabs;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMemberLabelInputLabs);
});
;define("ghost-admin/components/gh-member-label-input", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <GhTokenInput
      @extra={{hash
          tokenComponent="gh-token-input/label-token"
      }}
      @onChange={{this.updateLabels}}
      @onCreate={{this.createLabel}}
      @options={{this.availableLabels}}
      @renderInPlace={{true}}
      @selected={{this.selectedLabels}}
      @showCreateWhen={{this.hideCreateOptionOnMatchingLabel}}
      @triggerId={{this.triggerId}}
      @disabled={{@disabled}}
  />
  
  */
  {
    "id": "yLhECCzm",
    "block": "{\"symbols\":[\"@disabled\"],\"statements\":[[8,\"gh-token-input\",[],[[\"@extra\",\"@onChange\",\"@onCreate\",\"@options\",\"@renderInPlace\",\"@selected\",\"@showCreateWhen\",\"@triggerId\",\"@disabled\"],[[30,[36,0],null,[[\"tokenComponent\"],[\"gh-token-input/label-token\"]]],[32,0,[\"updateLabels\"]],[32,0,[\"createLabel\"]],[32,0,[\"availableLabels\"]],true,[32,0,[\"selectedLabels\"]],[32,0,[\"hideCreateOptionOnMatchingLabel\"]],[32,0,[\"triggerId\"]],[32,1]]],null],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"hash\"]}",
    "moduleName": "ghost-admin/components/gh-member-label-input.hbs"
  });

  let GhMemberLabelInput = (_dec = Ember.inject.service, _dec2 = Ember._tracked, _dec3 = Ember._action, _dec4 = Ember._action, _dec5 = Ember._action, (_class = class GhMemberLabelInput extends _component.default {
    get availableLabels() {
      return this._availableLabels.toArray().sort((labelA, labelB) => {
        return labelA.name.localeCompare(labelB.name, undefined, {
          ignorePunctuation: true
        });
      });
    }

    get availableLabelNames() {
      return this.availableLabels.map(label => label.name.toLowerCase());
    }

    constructor() {
      super(...arguments); // perform a background query to fetch all users and set `availableLabels`
      // to a live-query that will be immediately populated with what's in the
      // store and be updated when the above query returns

      _initializerDefineProperty(this, "store", _descriptor, this);

      _initializerDefineProperty(this, "selectedLabels", _descriptor2, this);

      this.store.query('label', {
        limit: 'all'
      });
      this._availableLabels = this.store.peekAll('label');
      this.selectedLabels = this.args.labels || [];
    }

    willDestroy() {
      super.willDestroy?.(...arguments);

      this._availableLabels.forEach(label => {
        if (label.get('isNew')) {
          this.store.deleteRecord(label);
        }
      });
    }

    hideCreateOptionOnMatchingLabel(term) {
      return !this.availableLabelNames.includes(term.toLowerCase());
    }

    updateLabels(newLabels) {
      let currentLabels = this.selectedLabels; // destroy new+unsaved labels that are no longer selected

      currentLabels.forEach(function (label) {
        if (!newLabels.includes(label) && label.get('isNew')) {
          label.destroyRecord();
        }
      }); // update labels

      this.selectedLabels = newLabels;
      this.args.onChange(newLabels);
    }

    createLabel(labelName) {
      let currentLabels = this.selectedLabels;
      let currentLabelNames = currentLabels.map(label => label.get('name').toLowerCase());
      let labelToAdd;
      labelName = labelName.trim(); // abort if label is already selected

      if (currentLabelNames.includes(labelName.toLowerCase())) {
        return;
      } // find existing label if there is one


      labelToAdd = this._findLabelByName(labelName); // create new label if no match

      if (!labelToAdd) {
        labelToAdd = this.store.createRecord('label', {
          name: labelName
        });
      } // push label onto member relationship


      currentLabels.pushObject(labelToAdd);
      this.args.onChange(currentLabels);
    }

    _findLabelByName(name) {
      let withMatchingName = function (label) {
        return label.name.toLowerCase() === name.toLowerCase();
      };

      return this.availableLabels.find(withMatchingName);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "selectedLabels", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _applyDecoratedDescriptor(_class.prototype, "hideCreateOptionOnMatchingLabel", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "hideCreateOptionOnMatchingLabel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateLabels", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "updateLabels"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "createLabel", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "createLabel"), _class.prototype)), _class));
  _exports.default = GhMemberLabelInput;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMemberLabelInput);
});
;define("ghost-admin/components/gh-member-settings-form", ["exports", "@glimmer/component", "moment", "ghost-admin/utils/currency", "ember-concurrency-decorators"], function (_exports, _component, _moment, _currency, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-member-settings" ...attributes>
  
      <GhMemberDetails class="gh-main-section no-heading" @member={{@member}} />
  
      <section class="gh-main-section columns-3">
          <div class="gh-main-section-block span-2">
              <div class="gh-main-section-content grey">
                  <div>
                      <div class="gh-cp-member-email-name">
                          <GhFormGroup @errors={{this.member.errors}} @hasValidated={{this.member.hasValidated}} @property="name" @classNames="max-width">
                              <label for="member-name">Name</label>
                              <GhTextInput @id="member-name" @name="name" @value={{this.scratchMember.name}} @tabindex="1"
                                  @focus-out={{action "setProperty" "name" this.scratchMember.name}} data-test-input="member-name" />
                              <GhErrorMessage @errors={{member.errors}} @property="name" />
                          </GhFormGroup>
  
                          <GhFormGroup @errors={{this.member.errors}} @hasValidated={{this.member.hasValidated}} @property="email" @classNames="max-width">
                              <label for="member-email">Email</label>
                              <GhTextInput @value={{this.scratchMember.email}} @id="member-email" @name="email" @tabindex="2"
                                  @autocapitalize="off" @autocorrect="off" @autocomplete="off"
                                  @focus-out={{action "setProperty" "email" this.scratchMember.email}} data-test-input="member-email"/>
                              <GhErrorMessage @errors={{this.member.errors}} @property="email" />
                          </GhFormGroup>
                      </div>
  
                      <GhFormGroup @classNames="gh-member-labels">
                          <label for="label-input">Labels</label>
                          <GhMemberLabelInputLabs
                              @onChange={{action "setLabels"}}
                              @onLabelEdit={{@onLabelEdit}}
                              @labels={{this.member.labels}}
                              @triggerId="label-input"
                              data-test-input=""
                          />
                      </GhFormGroup>
  
                      <GhFormGroup @errors={{this.member.errors}} @hasValidated={{this.member.hasValidated}} @property="note" @classNames="mb0 gh-member-note">
                          <label for="member-note">Note <span class="midgrey-l2 fw4">(not visible to member)</span></label>
                          <GhTextarea @id="member-note" @name="note" @class="gh-member-details-textarea" @tabindex="3"
                              @value={{this.scratchMember.note}} @focus-out={{action "setProperty" "note" this.scratchMember.note}} data-test-input="member-note" />
                          <GhErrorMessage @errors={{this.member.errors}} @property="note" />
                          <p> Maximum: <b>500</b> characters. You’ve used
                              {{gh-count-down-characters this.scratchMember.note 500}}</p>
                      </GhFormGroup>
  
                      {{#if (not-eq this.settings.editorDefaultEmailRecipients "disabled")}}
                          <GhFormGroup @classNames="gh-members-subscribed-checkbox mb0">
                              <div class="flex justify-between items-center">
                                  <div>
                                      <h4 class="gh-setting-title m">Subscribed to newsletter</h4>
                                      <p class="gh-setting-desc">If disabled, member will <em>not</em> receive newsletter emails</p>
                                  </div>
                                  <div class="for-switch">
                                      <label class="switch" for="subscribed-checkbox">
                                          <Input @checked={{this.member.subscribed}} @type="checkbox" @id="subscribed-checkbox"
                                              @name="subscribed" data-test-checkbox="member-subscribed" />
                                          <span class="input-toggle-component"></span>
                                      </label>
                                  </div>
                              </div>
                          </GhFormGroup>
                      {{/if}}
                  </div>
              </div>
  
              <h4 class="gh-main-section-header small bn">Subscriptions</h4>
  
              {{#unless this.products}}
              <div class="gh-main-section-content bordered">
                  <div class="gh-cp-memberproduct-noproduct">
                      {{#unless this.isCreatingComplimentary}}
                      <div class="gh-members-no-data gh-members-no-subs">
                          <span class="lightgrey nt10">{{svg-jar "no-data-subscription"}}</span>
                          <h4>No subscriptions</h4>
                          <p>
                              This member doesn't have any subscriptions.
                          </p>
                      </div>
                      {{/unless}}
  
                      {{#unless this.member.isNew}}
                          {{#if this.isAddComplimentaryAllowed}}
                              {{#if this.isCreatingComplimentary}}
                                  <GhLoadingSpinner />
                              {{else}}
                                  {{#if (feature "multipleProducts")}}
                                      {{!-- {{if has multiple products!}} --}}
                                      <button type="button" class="gh-btn gh-btn-text green gh-btn-icon gh-btn-addproduct" {{action (toggle "showMemberProductModal" this)}}>
                                          <span>{{svg-jar "add"}} Add complimentary subscription</span>
                                      </button>
                                      {{!-- {{/if}} --}}
                                  {{else}}
                                      <button type="button" class="gh-btn gh-btn-text green gh-btn-icon gh-btn-addproduct" {{action "addCompedSubscription"}}>
                                          <span>{{svg-jar "add"}} Add complimentary subscription</span>
                                      </button>
                                  {{/if}}
                              {{/if}}
                          {{/if}}
                      {{/unless}}
                  </div>
              </div>
              {{/unless}}
  
              {{#each this.products as |product|}}
                  <div class="gh-main-section-content grey gh-member-product-container">
                      <div class="gh-main-content-card gh-cp-memberproduct {{if (gt product.subscriptions.length 1) "multiple-subs" ""}}">
                          <h3 class="gh-memberproduct-name">
                              {{product.name}}
                              {{#if (gt product.subscriptions.length 1)}}
                              <span class="gh-memberproduct-subcount">{{product.subscriptions.length}} subscriptions</span>
                              {{/if}}
                          </h3>
  
                          {{#each product.subscriptions as |sub|}}
                              <div class="gh-memberproduct-subscription">
                                  <div>
                                      <div>
                                          <span class="gh-cp-memberproduct-pricelabel">{{sub.price.nickname}}</span>
                                          &ndash;
                                          {{#if sub.cancel_at_period_end}}
                                              <span class="gh-cp-memberproduct-renewal">Has access until {{sub.validUntil}}</span>
                                              <span class="gh-badge archived">Cancelled</span>
                                          {{else}}
                                              <span class="gh-cp-memberproduct-renewal">Renews {{sub.validUntil}}</span>
                                              <span class="gh-badge active">Active</span>
                                          {{/if}}
                                      </div>
                                      {{#if sub.cancellationReason}}
                                          <div class="gh-memberproduct-cancelreason"><span class="fw6">Cancellation reason:</span> {{sub.cancellationReason}}</div>
                                      {{/if}}
                                      {{#if sub.offer}}
                                          <div>
                                              <span class="gh-cp-memberproduct-pricelabel"> {{sub.offer.name}} </span>
                                              offer
                                              {{#if (eq sub.offer.type 'fixed')}}
                                                  ({{currency-symbol sub.offer.currency}}{{gh-price-amount sub.offer.amount}} off)
                                              {{else}}
                                                  ({{sub.offer.amount}}% off)
                                              {{/if}}
                                              applied to subscription
                                          </div>
                                      {{/if}}
                                      <div class="gh-memberproduct-created">
                                          Created on {{sub.startDate}}
                                      </div>
                                  </div>
  
                                  <div class="gh-memberproduct-price-container">
                                      <div class="gh-product-card-price">
                                          <div class="flex items-start">
                                              <span class="currency-symbol">{{sub.price.currencySymbol}}</span>
                                              <span class="amount">{{sub.price.nonDecimalAmount}}</span>
                                          </div>
                                          <div class="period">{{if (eq sub.price.interval "year") "yearly" "monthly"}}</div>
                                      </div>
                                      {{#if sub.isComplimentary}}
                                          <span class="action-menu">
                                              <GhDropdownButton @dropdownName="subscription-menu-complimentary" @classNames="gh-btn gh-btn-outline gh-btn-icon gh-btn-subscription-action icon-only" @title="Actions">
                                                  <span>
                                                      {{svg-jar "dotdotdot"}}
                                                      <span class="hidden">Subscription menu</span>
                                                  </span>
                                              </GhDropdownButton>
                                              <GhDropdown @name="subscription-menu-complimentary" @tagName="ul" @classNames="product-actions-menu dropdown-menu dropdown-align-right">
                                                  <li>
                                                      <button {{action "removeComplimentary" product.id}}>
                                                          <span class="red">Remove complimentary subscription</span>
                                                      </button>
                                                  </li>
                                              </GhDropdown>
                                          </span>
  
                                      {{else}}
                                          <span class="action-menu">
                                              <GhDropdownButton @dropdownName="subscription-menu-{{sub.id}}" @classNames="gh-btn gh-btn-outline gh-btn-icon gh-btn-subscription-action icon-only" @title="Actions">
                                                  <span>
                                                      {{svg-jar "dotdotdot"}}
                                                      <span class="hidden">Subscription menu</span>
                                                  </span>
                                              </GhDropdownButton>
                                              <GhDropdown @name="subscription-menu-{{sub.id}}" @tagName="ul" @classNames="product-actions-menu dropdown-menu dropdown-align-right">
                                                  <li>
                                                      <a href="https://dashboard.stripe.com/customers/{{sub.customer.id}}" target="_blank" rel="noopener">
                                                          View Stripe customer
                                                      </a>
                                                  </li>
                                                  <li class="divider"></li>
                                                  <li>
                                                      <a href="https://dashboard.stripe.com/subscriptions/{{sub.id}}" target="_blank" rel="noopener">
                                                          View Stripe subscription
                                                      </a>
                                                  </li>
                                                  <li>
                                                  {{#if sub.cancel_at_period_end}}
                                                      <button {{action "continueSubscription" sub.id}}>
                                                          <span>Continue subscription</span>
                                                      </button>
                                                  {{else}}
                                                      <button {{action "cancelSubscription" sub.id}}>
                                                          <span class="red">Cancel subscription</span>
                                                      </button>
                                                  {{/if}}
                                                  </li>
                                              </GhDropdown>
                                          </span>
                                      {{/if}}
                                  </div>
                              </div>
                          {{/each}}
  
                          {{#if (and (feature "multipleProducts") (eq product.subscriptions.length 0))}}
                          <div class="gh-memberproduct-subscription">
                              <div>
                                  <div>
                                      <span class="gh-cp-memberproduct-pricelabel">Complimentary</span>
                                      <span class="gh-badge active">Active</span>
                                  </div>
                                  <div class="gh-memberproduct-created">Created on</div>
                              </div>
                              <div class="flex items-center">
                                  <div class="gh-product-card-price">
                                      <div class="flex items-start">
                                          <span class="currency-symbol">$</span>
                                          <span class="amount">0</span>
                                      </div>
                                      <div class="period">yearly</div>
                                  </div>
                                  <span class="action-menu">
                                      <GhDropdownButton @dropdownName="subscription-menu-complimentary" @classNames="gh-btn gh-btn-outline gh-btn-icon gh-btn-subscription-action icon-only" @title="Actions">
                                          <span>
                                              {{svg-jar "dotdotdot"}}
                                              <span class="hidden">Subscription menu</span>
                                          </span>
                                      </GhDropdownButton>
                                      <GhDropdown @name="subscription-menu-complimentary" @tagName="ul" @classNames="product-actions-menu dropdown-menu dropdown-align-right">
                                          <li>
                                              <button {{action "removeComplimentary" product.id}}>
                                                  <span class="red">Remove complimentary subscription</span>
                                              </button>
                                          </li>
                                      </GhDropdown>
                                  </span>
                              </div>
                          </div>
                          {{/if}}
  
                          {{#if (not (feature "multipleProducts"))}}
                              {{#if this.isAddComplimentaryAllowed}}
                                  <div class="gh-memberproduct-list-footer bt b--whitegrey pt2 {{if this.isCreatingComplimentary "min-height" ""}}">
                                      {{#if this.isCreatingComplimentary}}
                                          <GhLoadingSpinner />
                                      {{else}}
                                          <button type="button" class="gh-btn gh-btn-text green gh-btn-icon gh-btn-addproduct" {{action "addCompedSubscription"}}>
                                              <span>{{svg-jar "add"}} Add complimentary subscription</span>
                                          </button>
                                      {{/if}}
                                  </div>
                              {{/if}}
                          {{/if}}
                      </div>
                  </div>
              {{/each}}
              {{#if (feature "multipleProducts")}}
                  {{#if (and this.products this.isAddComplimentaryAllowed)}}
                      <div class="gh-memberproduct-list-footer {{if this.isCreatingComplimentary "min-height" ""}}">
                          {{#if this.isCreatingComplimentary}}
                              <GhLoadingSpinner />
                          {{else}}
                                  <button
                                  type="button"
                                  class="gh-btn gh-btn-text green gh-btn-icon gh-btn-addproduct"
                                  {{action (toggle "showMemberProductModal" this)}}
                              >
                                  <span>{{svg-jar "add"}} Add complimentary subscription</span>
                              </button>
                          {{/if}}
                      </div>
                  {{/if}}
              {{/if}}
          </div>
          <div class="gh-main-section-block">
              {{#if (not-eq this.settings.editorDefaultEmailRecipients "disabled")}}
                  <div class="gh-main-section-content bordered mb8">
                      {{#if (eq @member.emailCount 0)}}
                          <div class="gh-members-no-data gh-members-no-stats">
                              <span class="lightgrey">{{svg-jar "no-data-line-chart"}}</span>
                              <h4>Email engagement</h4>
                              <p>
                                  This member hasn't received a newsletter yet. Once they do, we'll show their engagement here.
                              </p>
                          </div>
                      {{else}}
                          <div class="gh-heading-xs">Emails received</div>
                          <div class="gh-data-summary gh-cp-data-summary">{{@member.emailCount}}</div>
                          <div class="gh-heading-xs">Emails opened</div>
                          <div class="gh-data-summary gh-cp-data-summary">{{@member.emailOpenedCount}}</div>
                          <div class="gh-heading-xs">Avg. open rate</div>
                          <div class="gh-data-summary gh-cp-data-summary {{if (is-empty @member.emailOpenRate) "gh-data-unavailable-label"}}">
                              {{#if (is-empty @member.emailOpenRate)}}
                                  This metric is calculated once a member has received 5 newsletters.
                              {{else}}
                                  {{@member.emailOpenRate}}%
                              {{/if}}
                          </div>
                      {{/if}}
                  </div>
              {{/if}}
  
              {{#if (feature "membersActivityFeed")}}
                  <Member::ActivityFeed @member={{this.member}} />
              {{else}}
                  <GhMemberActivityFeed
                      @member={{this.member}}
                      @emailRecipients={{this.member.emailRecipients}}
                  />
              {{/if}}
          </div>
      </section>
  
  </div>
  
  {{#if this.showMemberProductModal}}
  <GhFullscreenModal @modifier="action wide member-product">
      <ModalMemberProduct
          @model={{this.member}}
          @confirm={{this.addProduct}}
          @closeModal={{this.closeMemberProductModal}} />
  </GhFullscreenModal>
  {{/if}}
  
  */
  {
    "id": "r9Jd4x/7",
    "block": "{\"symbols\":[\"product\",\"sub\",\"@member\",\"&attrs\",\"@onLabelEdit\"],\"statements\":[[11,\"div\"],[24,0,\"gh-member-settings\"],[17,4],[12],[2,\"\\n\\n    \"],[8,\"gh-member-details\",[[24,0,\"gh-main-section no-heading\"]],[[\"@member\"],[[32,3]]],null],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"gh-main-section columns-3\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-block span-2\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-content grey\"],[12],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-cp-member-email-name\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@classNames\"],[[32,0,[\"member\",\"errors\"]],[32,0,[\"member\",\"hasValidated\"]],\"name\",\"max-width\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"member-name\"],[12],[2,\"Name\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"member-name\"]],[[\"@id\",\"@name\",\"@value\",\"@tabindex\",\"@focus-out\"],[\"member-name\",\"name\",[32,0,[\"scratchMember\",\"name\"]],\"1\",[30,[36,5],[[32,0],\"setProperty\",\"name\",[32,0,[\"scratchMember\",\"name\"]]],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[34,15,[\"errors\"]],\"name\"]],null],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@classNames\"],[[32,0,[\"member\",\"errors\"]],[32,0,[\"member\",\"hasValidated\"]],\"email\",\"max-width\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"member-email\"],[12],[2,\"Email\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"member-email\"]],[[\"@value\",\"@id\",\"@name\",\"@tabindex\",\"@autocapitalize\",\"@autocorrect\",\"@autocomplete\",\"@focus-out\"],[[32,0,[\"scratchMember\",\"email\"]],\"member-email\",\"email\",\"2\",\"off\",\"off\",\"off\",[30,[36,5],[[32,0],\"setProperty\",\"email\",[32,0,[\"scratchMember\",\"email\"]]],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"member\",\"errors\"]],\"email\"]],null],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n\\n                    \"],[8,\"gh-form-group\",[],[[\"@classNames\"],[\"gh-member-labels\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"label\"],[14,\"for\",\"label-input\"],[12],[2,\"Labels\"],[13],[2,\"\\n                        \"],[8,\"gh-member-label-input-labs\",[[24,\"data-test-input\",\"\"]],[[\"@onChange\",\"@onLabelEdit\",\"@labels\",\"@triggerId\"],[[30,[36,5],[[32,0],\"setLabels\"],null],[32,5],[32,0,[\"member\",\"labels\"]],\"label-input\"]],null],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n\\n                    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@classNames\"],[[32,0,[\"member\",\"errors\"]],[32,0,[\"member\",\"hasValidated\"]],\"note\",\"mb0 gh-member-note\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"label\"],[14,\"for\",\"member-note\"],[12],[2,\"Note \"],[10,\"span\"],[14,0,\"midgrey-l2 fw4\"],[12],[2,\"(not visible to member)\"],[13],[13],[2,\"\\n                        \"],[8,\"gh-textarea\",[[24,\"data-test-input\",\"member-note\"]],[[\"@id\",\"@name\",\"@class\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"member-note\",\"note\",\"gh-member-details-textarea\",\"3\",[32,0,[\"scratchMember\",\"note\"]],[30,[36,5],[[32,0],\"setProperty\",\"note\",[32,0,[\"scratchMember\",\"note\"]]],null]]],null],[2,\"\\n                        \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"member\",\"errors\"]],\"note\"]],null],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\" Maximum: \"],[10,\"b\"],[12],[2,\"500\"],[13],[2,\" characters. You’ve used\\n                            \"],[1,[30,[36,16],[[32,0,[\"scratchMember\",\"note\"]],500],null]],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,1],[[30,[36,17],[[32,0,[\"settings\",\"editorDefaultEmailRecipients\"]],\"disabled\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[8,\"gh-form-group\",[],[[\"@classNames\"],[\"gh-members-subscribed-checkbox mb0\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex justify-between items-center\"],[12],[2,\"\\n                                \"],[10,\"div\"],[12],[2,\"\\n                                    \"],[10,\"h4\"],[14,0,\"gh-setting-title m\"],[12],[2,\"Subscribed to newsletter\"],[13],[2,\"\\n                                    \"],[10,\"p\"],[14,0,\"gh-setting-desc\"],[12],[2,\"If disabled, member will \"],[10,\"em\"],[12],[2,\"not\"],[13],[2,\" receive newsletter emails\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"for-switch\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[14,0,\"switch\"],[14,\"for\",\"subscribed-checkbox\"],[12],[2,\"\\n                                        \"],[8,\"input\",[[24,\"data-test-checkbox\",\"member-subscribed\"]],[[\"@checked\",\"@type\",\"@id\",\"@name\"],[[32,0,[\"member\",\"subscribed\"]],\"checkbox\",\"subscribed-checkbox\",\"subscribed\"]],null],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Subscriptions\"],[13],[2,\"\\n\\n\"],[6,[37,14],[[32,0,[\"products\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-main-section-content bordered\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-cp-memberproduct-noproduct\"],[12],[2,\"\\n\"],[6,[37,14],[[32,0,[\"isCreatingComplimentary\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-members-no-data gh-members-no-subs\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"lightgrey nt10\"],[12],[1,[30,[36,2],[\"no-data-subscription\"],null]],[13],[2,\"\\n                        \"],[10,\"h4\"],[12],[2,\"No subscriptions\"],[13],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"\\n                            This member doesn't have any subscriptions.\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,14],[[32,0,[\"member\",\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[32,0,[\"isAddComplimentaryAllowed\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[32,0,[\"isCreatingComplimentary\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[30,[36,12],[\"multipleProducts\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-text green gh-btn-icon gh-btn-addproduct\"],[24,4,\"button\"],[4,[38,5],[[32,0],[30,[36,4],[\"showMemberProductModal\",[32,0]],null]],null],[12],[2,\"\\n                                        \"],[10,\"span\"],[12],[1,[30,[36,2],[\"add\"],null]],[2,\" Add complimentary subscription\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-text green gh-btn-icon gh-btn-addproduct\"],[24,4,\"button\"],[4,[38,5],[[32,0],\"addCompedSubscription\"],null],[12],[2,\"\\n                                        \"],[10,\"span\"],[12],[1,[30,[36,2],[\"add\"],null]],[2,\" Add complimentary subscription\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,11],[[30,[36,10],[[30,[36,10],[[32,0,[\"products\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-main-section-content grey gh-member-product-container\"],[12],[2,\"\\n                    \"],[10,\"div\"],[15,0,[31,[\"gh-main-content-card gh-cp-memberproduct \",[30,[36,1],[[30,[36,9],[[32,1,[\"subscriptions\",\"length\"]],1],null],\"multiple-subs\",\"\"],null]]]],[12],[2,\"\\n                        \"],[10,\"h3\"],[14,0,\"gh-memberproduct-name\"],[12],[2,\"\\n                            \"],[1,[32,1,[\"name\"]]],[2,\"\\n\"],[6,[37,1],[[30,[36,9],[[32,1,[\"subscriptions\",\"length\"]],1],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"span\"],[14,0,\"gh-memberproduct-subcount\"],[12],[1,[32,1,[\"subscriptions\",\"length\"]]],[2,\" subscriptions\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n\\n\"],[6,[37,11],[[30,[36,10],[[30,[36,10],[[32,1,[\"subscriptions\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"gh-memberproduct-subscription\"],[12],[2,\"\\n                                \"],[10,\"div\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[12],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"gh-cp-memberproduct-pricelabel\"],[12],[1,[32,2,[\"price\",\"nickname\"]]],[13],[2,\"\\n                                        –\\n\"],[6,[37,1],[[32,2,[\"cancel_at_period_end\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                            \"],[10,\"span\"],[14,0,\"gh-cp-memberproduct-renewal\"],[12],[2,\"Has access until \"],[1,[32,2,[\"validUntil\"]]],[13],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-badge archived\"],[12],[2,\"Cancelled\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                            \"],[10,\"span\"],[14,0,\"gh-cp-memberproduct-renewal\"],[12],[2,\"Renews \"],[1,[32,2,[\"validUntil\"]]],[13],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-badge active\"],[12],[2,\"Active\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                    \"],[13],[2,\"\\n\"],[6,[37,1],[[32,2,[\"cancellationReason\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                        \"],[10,\"div\"],[14,0,\"gh-memberproduct-cancelreason\"],[12],[10,\"span\"],[14,0,\"fw6\"],[12],[2,\"Cancellation reason:\"],[13],[2,\" \"],[1,[32,2,[\"cancellationReason\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,1],[[32,2,[\"offer\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                        \"],[10,\"div\"],[12],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-cp-memberproduct-pricelabel\"],[12],[2,\" \"],[1,[32,2,[\"offer\",\"name\"]]],[2,\" \"],[13],[2,\"\\n                                            offer\\n\"],[6,[37,1],[[30,[36,3],[[32,2,[\"offer\",\"type\"]],\"fixed\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                (\"],[1,[30,[36,7],[[32,2,[\"offer\",\"currency\"]]],null]],[1,[30,[36,8],[[32,2,[\"offer\",\"amount\"]]],null]],[2,\" off)\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                                (\"],[1,[32,2,[\"offer\",\"amount\"]]],[2,\"% off)\\n\"]],\"parameters\":[]}]]],[2,\"                                            applied to subscription\\n                                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                    \"],[10,\"div\"],[14,0,\"gh-memberproduct-created\"],[12],[2,\"\\n                                        Created on \"],[1,[32,2,[\"startDate\"]]],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n\\n                                \"],[10,\"div\"],[14,0,\"gh-memberproduct-price-container\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-product-card-price\"],[12],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"flex items-start\"],[12],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"currency-symbol\"],[12],[1,[32,2,[\"price\",\"currencySymbol\"]]],[13],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"amount\"],[12],[1,[32,2,[\"price\",\"nonDecimalAmount\"]]],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"period\"],[12],[1,[30,[36,1],[[30,[36,3],[[32,2,[\"price\",\"interval\"]],\"year\"],null],\"yearly\",\"monthly\"],null]],[13],[2,\"\\n                                    \"],[13],[2,\"\\n\"],[6,[37,1],[[32,2,[\"isComplimentary\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                        \"],[10,\"span\"],[14,0,\"action-menu\"],[12],[2,\"\\n                                            \"],[8,\"gh-dropdown-button\",[],[[\"@dropdownName\",\"@classNames\",\"@title\"],[\"subscription-menu-complimentary\",\"gh-btn gh-btn-outline gh-btn-icon gh-btn-subscription-action icon-only\",\"Actions\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                                \"],[10,\"span\"],[12],[2,\"\\n                                                    \"],[1,[30,[36,2],[\"dotdotdot\"],null]],[2,\"\\n                                                    \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Subscription menu\"],[13],[2,\"\\n                                                \"],[13],[2,\"\\n                                            \"]],\"parameters\":[]}]]],[2,\"\\n                                            \"],[8,\"gh-dropdown\",[],[[\"@name\",\"@tagName\",\"@classNames\"],[\"subscription-menu-complimentary\",\"ul\",\"product-actions-menu dropdown-menu dropdown-align-right\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                                \"],[10,\"li\"],[12],[2,\"\\n                                                    \"],[11,\"button\"],[4,[38,5],[[32,0],\"removeComplimentary\",[32,1,[\"id\"]]],null],[12],[2,\"\\n                                                        \"],[10,\"span\"],[14,0,\"red\"],[12],[2,\"Remove complimentary subscription\"],[13],[2,\"\\n                                                    \"],[13],[2,\"\\n                                                \"],[13],[2,\"\\n                                            \"]],\"parameters\":[]}]]],[2,\"\\n                                        \"],[13],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                        \"],[10,\"span\"],[14,0,\"action-menu\"],[12],[2,\"\\n                                            \"],[8,\"gh-dropdown-button\",[],[[\"@dropdownName\",\"@classNames\",\"@title\"],[[31,[\"subscription-menu-\",[32,2,[\"id\"]]]],\"gh-btn gh-btn-outline gh-btn-icon gh-btn-subscription-action icon-only\",\"Actions\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                                \"],[10,\"span\"],[12],[2,\"\\n                                                    \"],[1,[30,[36,2],[\"dotdotdot\"],null]],[2,\"\\n                                                    \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Subscription menu\"],[13],[2,\"\\n                                                \"],[13],[2,\"\\n                                            \"]],\"parameters\":[]}]]],[2,\"\\n                                            \"],[8,\"gh-dropdown\",[],[[\"@name\",\"@tagName\",\"@classNames\"],[[31,[\"subscription-menu-\",[32,2,[\"id\"]]]],\"ul\",\"product-actions-menu dropdown-menu dropdown-align-right\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                                \"],[10,\"li\"],[12],[2,\"\\n                                                    \"],[10,\"a\"],[15,6,[31,[\"https://dashboard.stripe.com/customers/\",[32,2,[\"customer\",\"id\"]]]]],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[12],[2,\"\\n                                                        View Stripe customer\\n                                                    \"],[13],[2,\"\\n                                                \"],[13],[2,\"\\n                                                \"],[10,\"li\"],[14,0,\"divider\"],[12],[13],[2,\"\\n                                                \"],[10,\"li\"],[12],[2,\"\\n                                                    \"],[10,\"a\"],[15,6,[31,[\"https://dashboard.stripe.com/subscriptions/\",[32,2,[\"id\"]]]]],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[12],[2,\"\\n                                                        View Stripe subscription\\n                                                    \"],[13],[2,\"\\n                                                \"],[13],[2,\"\\n                                                \"],[10,\"li\"],[12],[2,\"\\n\"],[6,[37,1],[[32,2,[\"cancel_at_period_end\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                    \"],[11,\"button\"],[4,[38,5],[[32,0],\"continueSubscription\",[32,2,[\"id\"]]],null],[12],[2,\"\\n                                                        \"],[10,\"span\"],[12],[2,\"Continue subscription\"],[13],[2,\"\\n                                                    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                                    \"],[11,\"button\"],[4,[38,5],[[32,0],\"cancelSubscription\",[32,2,[\"id\"]]],null],[12],[2,\"\\n                                                        \"],[10,\"span\"],[14,0,\"red\"],[12],[2,\"Cancel subscription\"],[13],[2,\"\\n                                                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                                \"],[13],[2,\"\\n                                            \"]],\"parameters\":[]}]]],[2,\"\\n                                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"\\n\"],[6,[37,1],[[30,[36,6],[[30,[36,12],[\"multipleProducts\"],null],[30,[36,3],[[32,1,[\"subscriptions\",\"length\"]],0],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-memberproduct-subscription\"],[12],[2,\"\\n                            \"],[10,\"div\"],[12],[2,\"\\n                                \"],[10,\"div\"],[12],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"gh-cp-memberproduct-pricelabel\"],[12],[2,\"Complimentary\"],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"gh-badge active\"],[12],[2,\"Active\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-memberproduct-created\"],[12],[2,\"Created on\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-product-card-price\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex items-start\"],[12],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"currency-symbol\"],[12],[2,\"$\"],[13],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"amount\"],[12],[2,\"0\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"period\"],[12],[2,\"yearly\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"action-menu\"],[12],[2,\"\\n                                    \"],[8,\"gh-dropdown-button\",[],[[\"@dropdownName\",\"@classNames\",\"@title\"],[\"subscription-menu-complimentary\",\"gh-btn gh-btn-outline gh-btn-icon gh-btn-subscription-action icon-only\",\"Actions\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[10,\"span\"],[12],[2,\"\\n                                            \"],[1,[30,[36,2],[\"dotdotdot\"],null]],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Subscription menu\"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"]],\"parameters\":[]}]]],[2,\"\\n                                    \"],[8,\"gh-dropdown\",[],[[\"@name\",\"@tagName\",\"@classNames\"],[\"subscription-menu-complimentary\",\"ul\",\"product-actions-menu dropdown-menu dropdown-align-right\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[10,\"li\"],[12],[2,\"\\n                                            \"],[11,\"button\"],[4,[38,5],[[32,0],\"removeComplimentary\",[32,1,[\"id\"]]],null],[12],[2,\"\\n                                                \"],[10,\"span\"],[14,0,\"red\"],[12],[2,\"Remove complimentary subscription\"],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"]],\"parameters\":[]}]]],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[30,[36,13],[[30,[36,12],[\"multipleProducts\"],null]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[32,0,[\"isAddComplimentaryAllowed\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"div\"],[15,0,[31,[\"gh-memberproduct-list-footer bt b--whitegrey pt2 \",[30,[36,1],[[32,0,[\"isCreatingComplimentary\"]],\"min-height\",\"\"],null]]]],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"isCreatingComplimentary\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                        \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-text green gh-btn-icon gh-btn-addproduct\"],[24,4,\"button\"],[4,[38,5],[[32,0],\"addCompedSubscription\"],null],[12],[2,\"\\n                                            \"],[10,\"span\"],[12],[1,[30,[36,2],[\"add\"],null]],[2,\" Add complimentary subscription\"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[6,[37,1],[[30,[36,12],[\"multipleProducts\"],null]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[30,[36,6],[[32,0,[\"products\"]],[32,0,[\"isAddComplimentaryAllowed\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[15,0,[31,[\"gh-memberproduct-list-footer \",[30,[36,1],[[32,0,[\"isCreatingComplimentary\"]],\"min-height\",\"\"],null]]]],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"isCreatingComplimentary\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-text green gh-btn-icon gh-btn-addproduct\"],[24,4,\"button\"],[4,[38,5],[[32,0],[30,[36,4],[\"showMemberProductModal\",[32,0]],null]],null],[12],[2,\"\\n                                \"],[10,\"span\"],[12],[1,[30,[36,2],[\"add\"],null]],[2,\" Add complimentary subscription\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n\"],[6,[37,1],[[30,[36,17],[[32,0,[\"settings\",\"editorDefaultEmailRecipients\"]],\"disabled\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-main-section-content bordered mb8\"],[12],[2,\"\\n\"],[6,[37,1],[[30,[36,3],[[32,3,[\"emailCount\"]],0],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-members-no-data gh-members-no-stats\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"lightgrey\"],[12],[1,[30,[36,2],[\"no-data-line-chart\"],null]],[13],[2,\"\\n                            \"],[10,\"h4\"],[12],[2,\"Email engagement\"],[13],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"\\n                                This member hasn't received a newsletter yet. Once they do, we'll show their engagement here.\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-heading-xs\"],[12],[2,\"Emails received\"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-data-summary gh-cp-data-summary\"],[12],[1,[32,3,[\"emailCount\"]]],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-heading-xs\"],[12],[2,\"Emails opened\"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-data-summary gh-cp-data-summary\"],[12],[1,[32,3,[\"emailOpenedCount\"]]],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-heading-xs\"],[12],[2,\"Avg. open rate\"],[13],[2,\"\\n                        \"],[10,\"div\"],[15,0,[31,[\"gh-data-summary gh-cp-data-summary \",[30,[36,1],[[30,[36,0],[[32,3,[\"emailOpenRate\"]]],null],\"gh-data-unavailable-label\"],null]]]],[12],[2,\"\\n\"],[6,[37,1],[[30,[36,0],[[32,3,[\"emailOpenRate\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                This metric is calculated once a member has received 5 newsletters.\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[1,[32,3,[\"emailOpenRate\"]]],[2,\"%\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[30,[36,12],[\"membersActivityFeed\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[8,\"member/activity-feed\",[],[[\"@member\"],[[32,0,[\"member\"]]]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[8,\"gh-member-activity-feed\",[],[[\"@member\",\"@emailRecipients\"],[[32,0,[\"member\"]],[32,0,[\"member\",\"emailRecipients\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"showMemberProductModal\"]]],null,[[\"default\"],[{\"statements\":[[8,\"gh-fullscreen-modal\",[],[[\"@modifier\"],[\"action wide member-product\"]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[8,\"modal-member-product\",[],[[\"@model\",\"@confirm\",\"@closeModal\"],[[32,0,[\"member\"]],[32,0,[\"addProduct\"]],[32,0,[\"closeMemberProductModal\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"is-empty\",\"if\",\"svg-jar\",\"eq\",\"toggle\",\"action\",\"and\",\"currency-symbol\",\"gh-price-amount\",\"gt\",\"-track-array\",\"each\",\"feature\",\"not\",\"unless\",\"member\",\"gh-count-down-characters\",\"not-eq\"]}",
    "moduleName": "ghost-admin/components/gh-member-settings-form.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, _dec7 = Ember._tracked, _dec8 = Ember._action, _dec9 = Ember._action, _dec10 = Ember._action, _dec11 = Ember._action, _dec12 = Ember._action, _dec13 = Ember._action, _dec14 = Ember._action, _dec15 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), _dec16 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), _dec17 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class _class extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "membersUtils", _descriptor, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor2, this);

      _initializerDefineProperty(this, "ajax", _descriptor3, this);

      _initializerDefineProperty(this, "store", _descriptor4, this);

      _initializerDefineProperty(this, "feature", _descriptor5, this);

      _initializerDefineProperty(this, "settings", _descriptor6, this);

      _initializerDefineProperty(this, "showMemberProductModal", _descriptor7, this);

      this.member = this.args.member;
      this.scratchMember = this.args.scratchMember;
    }

    get canShowStripeInfo() {
      return !this.member.get('isNew') && this.membersUtils.isStripeEnabled;
    }

    get isAddComplimentaryAllowed() {
      if (!this.membersUtils.isStripeEnabled) {
        return false;
      }

      let products = this.member.get('products');

      if (products && products.length > 0) {
        return false;
      }

      return true;
    }

    get products() {
      let products = this.member.get('products') || [];
      let subscriptions = this.member.get('subscriptions') || [];
      let subscriptionData = subscriptions.filter(sub => {
        return !!sub.price;
      }).map(sub => {
        return { ...sub,
          startDate: sub.start_date ? (0, _moment.default)(sub.start_date).format('D MMM YYYY') : '-',
          validUntil: sub.current_period_end ? (0, _moment.default)(sub.current_period_end).format('D MMM YYYY') : '-',
          cancellationReason: sub.cancellation_reason,
          price: { ...sub.price,
            currencySymbol: (0, _currency.getSymbol)(sub.price.currency),
            nonDecimalAmount: (0, _currency.getNonDecimal)(sub.price.amount)
          },
          isComplimentary: !sub.id
        };
      });

      for (let product of products) {
        let productSubscriptions = subscriptionData.filter(subscription => {
          if (subscription.status === 'canceled') {
            return false;
          }

          return subscription?.price?.product?.product_id === product.id;
        });
        product.subscriptions = productSubscriptions;
      }

      return products;
    }

    get customer() {
      let firstSubscription = this.member.get('subscriptions').firstObject;
      let customer = firstSubscription?.customer;

      if (customer) {
        return { ...customer,
          startDate: firstSubscription?.startDate
        };
      }

      return null;
    }

    get isCreatingComplimentary() {
      return this.args.isSaveRunning;
    }

    setProperty(property, value) {
      this.args.setProperty(property, value);
    }

    setLabels(labels) {
      this.member.set('labels', labels);
    }

    closeMemberProductModal() {
      this.showMemberProductModal = false;
    }

    cancelSubscription(subscriptionId) {
      this.cancelSubscriptionTask.perform(subscriptionId);
    }

    removeComplimentary(productId) {
      this.removeComplimentaryTask.perform(productId);
    }

    continueSubscription(subscriptionId) {
      this.continueSubscriptionTask.perform(subscriptionId);
    }

    addCompedSubscription() {
      this.args.setProperty('comped', true);
      this.args.saveMember();
    }

    *cancelSubscriptionTask(subscriptionId) {
      let url = this.ghostPaths.url.api('members', this.member.get('id'), 'subscriptions', subscriptionId);
      let response = yield this.ajax.put(url, {
        data: {
          cancel_at_period_end: true
        }
      });
      this.store.pushPayload('member', response);
      return response;
    }

    *removeComplimentaryTask(productId) {
      let url = this.ghostPaths.url.api(`members/${this.member.get('id')}`);
      let products = this.member.get('products') || [];
      const updatedProducts = products.filter(product => product.id !== productId).map(product => ({
        id: product.id
      }));
      let response = yield this.ajax.put(url, {
        data: {
          members: [{
            id: this.member.get('id'),
            email: this.member.get('email'),
            products: updatedProducts
          }]
        }
      });
      this.store.pushPayload('member', response);
      return response;
    }

    *continueSubscriptionTask(subscriptionId) {
      let url = this.ghostPaths.url.api('members', this.member.get('id'), 'subscriptions', subscriptionId);
      let response = yield this.ajax.put(url, {
        data: {
          cancel_at_period_end: false
        }
      });
      this.store.pushPayload('member', response);
      return response;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "membersUtils", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "showMemberProductModal", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setProperty", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "setProperty"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setLabels", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "setLabels"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "closeMemberProductModal", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "closeMemberProductModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "cancelSubscription", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "cancelSubscription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "removeComplimentary", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "removeComplimentary"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "continueSubscription", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, "continueSubscription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "addCompedSubscription", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "addCompedSubscription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "cancelSubscriptionTask", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, "cancelSubscriptionTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "removeComplimentaryTask", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, "removeComplimentaryTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "continueSubscriptionTask", [_dec17], Object.getOwnPropertyDescriptor(_class.prototype, "continueSubscriptionTask"), _class.prototype)), _class)));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-member-single-label-input", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <span class="gh-select">
      <OneWaySelect
          @options={{this.availableLabels}}
          @optionValuePath="id"
          @optionLabelPath="name"
          @optionTargetPath="id"
          @update={{this.updateLabel}}
      />
      {{svg-jar "arrow-down-small"}}
  </span>
  
  */
  {
    "id": "/iEvzAf+",
    "block": "{\"symbols\":[],\"statements\":[[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n    \"],[8,\"one-way-select\",[],[[\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@update\"],[[32,0,[\"availableLabels\"]],\"id\",\"name\",\"id\",[32,0,[\"updateLabel\"]]]],null],[2,\"\\n    \"],[1,[30,[36,0],[\"arrow-down-small\"],null]],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/gh-member-single-label-input.hbs"
  });

  let GhMemberLabelInput = (_dec = Ember.inject.service, _dec2 = Ember._tracked, _dec3 = Ember._action, (_class = class GhMemberLabelInput extends _component.default {
    get availableLabels() {
      return this._availableLabels.toArray().sort((labelA, labelB) => {
        return labelA.name.localeCompare(labelB.name, undefined, {
          ignorePunctuation: true
        });
      });
    }

    get availableLabelNames() {
      return this.availableLabels.map(label => label.name.toLowerCase());
    }

    constructor() {
      super(...arguments); // perform a background query to fetch all users and set `availableLabels`
      // to a live-query that will be immediately populated with what's in the
      // store and be updated when the above query returns

      _initializerDefineProperty(this, "store", _descriptor, this);

      _initializerDefineProperty(this, "selectedLabel", _descriptor2, this);

      this.store.query('label', {
        limit: 'all'
      });
      this._availableLabels = this.store.peekAll('label');
      this.selectedLabel = this.args.label || this.availableLabels[0]?.get('id');
      this.args.onChange(this.selectedLabel);
    }

    updateLabel(newLabel) {
      // update labels
      this.selectedLabel = newLabel;
      this.args.onChange(newLabel);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "selectedLabel", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "updateLabel", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "updateLabel"), _class.prototype)), _class));
  _exports.default = GhMemberLabelInput;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMemberLabelInput);
});
;define("ghost-admin/components/gh-members-chart", ["exports", "moment", "ghost-admin/utils/currency", "ember-concurrency"], function (_exports, _moment, _currency, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-dashboard-chart-box {{if this.isSmall "small"}}" {{did-insert (perform this.fetchStatsTask)}}>    
      {{#if (not this.stats)}}
          <GhLoadingSpinner />
      {{else}}
          <EmberChart
              @type={{this.type}}
              @options={{this.chartOptions}}
              @data={{this.chartData}}
              @height={{300}} />
      {{/if}}
  </div>
  */
  {
    "id": "oXfSAaZ1",
    "block": "{\"symbols\":[],\"statements\":[[11,\"div\"],[16,0,[31,[\"gh-dashboard-chart-box \",[30,[36,0],[[32,0,[\"isSmall\"]],\"small\"],null]]]],[4,[38,2],[[30,[36,1],[[32,0,[\"fetchStatsTask\"]]],null]],null],[12],[2,\"    \\n\"],[6,[37,0],[[30,[36,3],[[32,0,[\"stats\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[8,\"ember-chart\",[],[[\"@type\",\"@options\",\"@data\",\"@height\"],[[32,0,[\"type\"]],[32,0,[\"chartOptions\"]],[32,0,[\"chartData\"]],300]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[13]],\"hasEval\":false,\"upvars\":[\"if\",\"perform\",\"did-insert\",\"not\"]}",
    "moduleName": "ghost-admin/components/gh-members-chart.hbs"
  });
  /* global Chart */


  const DATE_FORMAT = 'D MMM YYYY';

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    ajax: Ember.inject.service(),
    membersStats: Ember.inject.service(),
    // public attrs
    nightShift: false,
    lineColor: '#14b8ff',
    stats: null,
    tagName: '',
    chartStats: null,
    chartData: null,
    chartOptions: null,
    showSummary: true,
    showRange: true,
    chartType: '',
    chartSize: '',
    chartHeading: 'Total members',
    isSmall: Ember.computed('chartSize', function () {
      if (this.chartSize === 'small') {
        return true;
      }

      return false;
    }),
    startDateLabel: Ember.computed('membersStats.stats', function () {
      if (!this.membersStats?.stats?.total_on_date) {
        return '';
      }

      let firstDate = Object.keys(this.membersStats.stats.total_on_date)[0];
      return (0, _moment.default)(firstDate).format(DATE_FORMAT);
    }),
    selectedRange: Ember.computed('membersStats.days', function () {
      const availableRanges = this.availableRanges;
      return availableRanges.findBy('days', this.membersStats.days);
    }),
    availableRanges: Ember.computed(function () {
      return [{
        name: '30 days',
        days: '30'
      }, {
        name: '90 days',
        days: '90'
      }, {
        name: '365 days',
        days: '365'
      }, {
        name: 'All time',
        days: 'all-time'
      }];
    }),

    // Lifecycle ---------------------------------------------------------------
    init() {
      this._super(...arguments);

      this.setChartJSDefaults();
    },

    didReceiveAttrs() {
      this._super(...arguments);

      if (this.chartStats) {
        const {
          options,
          data,
          title,
          stats
        } = this.chartStats;
        this.set('stats', stats);
        this.set('chartHeading', title);
        this.setChartData(data);
        this.setChartOptions(options);
      }

      if (this._lastNightShift !== undefined && this.nightShift !== this._lastNightShift) {
        const {
          options = {}
        } = this.chartStats;
        this.setChartOptions(options);
      }

      this._lastNightShift = this.nightShift;
    },

    // Actions -----------------------------------------------------------------
    changeDateRange: Ember._action(function (range) {
      this.membersStats.days = Ember.get(range, 'days');
      this.fetchStatsTask.perform();
    }),
    // Tasks -------------------------------------------------------------------
    fetchStatsTask: (0, _emberConcurrency.task)(function* () {
      let stats;

      if (!this.chartType) {
        this.set('stats', null);
        stats = yield this.membersStats.fetch();
        this.setOriginalChartData(stats);
      }
    }),

    setOriginalChartData(stats) {
      if (stats) {
        this.set('stats', stats);
        this.setChartOptions({
          rangeInDays: Object.keys(stats.total_on_date).length
        });
        this.setChartData({
          dateLabels: Object.keys(stats.total_on_date),
          dateValues: Object.values(stats.total_on_date)
        });
      }
    },

    // Internal ----------------------------------------------------------------
    setChartData(_ref2) {
      let {
        dateLabels,
        dateValues,
        label = 'Total Members'
      } = _ref2;
      let backgroundColors = this.lineColor;

      if (this.chartType === 'open-rate') {
        backgroundColors = dateLabels.map(val => {
          if (val) {
            return this.lineColor;
          } else {
            return this.nightShift ? '#7C8B9A' : '#CED4D9';
          }
        });
      }

      this.set('chartData', {
        labels: dateLabels,
        datasets: [{
          label: label,
          cubicInterpolationMode: 'monotone',
          data: dateValues,
          fill: false,
          backgroundColor: backgroundColors,
          pointRadius: 0,
          pointHitRadius: 10,
          borderColor: this.lineColor,
          borderJoinStyle: 'miter',
          maxBarThickness: 20,
          minBarLength: 2
        }]
      });
    },

    setChartOptions(_ref3) {
      let {
        rangeInDays
      } = _ref3;
      let maxTicksAllowed = this.isSmall ? 3 : this.getTicksForRange(rangeInDays);

      if (this.chartType === 'open-rate') {
        maxTicksAllowed = 0;
      }

      this.setChartJSDefaults();
      let options = {
        responsive: true,
        responsiveAnimationDuration: 5,
        maintainAspectRatio: false,
        layout: {
          padding: {
            top: this.isSmall ? 20 : 5,
            // Needed otherwise the top dot is cut
            right: 10,
            bottom: this.isSmall ? 20 : 5,
            left: 10
          }
        },
        title: {
          display: false
        },
        tooltips: {
          intersect: false,
          mode: 'index',
          displayColors: false,
          backgroundColor: '#15171A',
          xPadding: 7,
          yPadding: 7,
          cornerRadius: 5,
          caretSize: 7,
          caretPadding: 5,
          bodyFontSize: 12.5,
          titleFontSize: 12,
          titleFontStyle: 'normal',
          titleFontColor: 'rgba(255, 255, 255, 0.7)',
          titleMarginBottom: 3,
          filter: (tooltipItems, data) => {
            if (this.chartType === 'open-rate') {
              let label = data.labels[tooltipItems.index];

              if (label === '') {
                return false;
              }
            }

            return true;
          },
          callbacks: {
            label: (tooltipItems, data) => {
              const labelText = data.datasets[tooltipItems.datasetIndex].label;
              let valueText = data.datasets[tooltipItems.datasetIndex].data[tooltipItems.index].toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');

              if (this.chartType === 'mrr') {
                const currency = (0, _currency.getSymbol)(this.stats.currency);
                valueText = `${currency}${valueText}`;
              }

              if (this.chartType === 'open-rate') {
                valueText = `${valueText}%`;
              }

              return `${labelText}: ${valueText}`;
            },
            title: tooltipItems => {
              if (this.chartType === 'open-rate') {
                if (tooltipItems.length) {
                  return tooltipItems[0].xLabel;
                } else {
                  return '';
                }
              }

              return (0, _moment.default)(tooltipItems[0].xLabel).format(DATE_FORMAT);
            }
          }
        },
        hover: {
          mode: 'index',
          intersect: false,
          animationDuration: 120
        },
        legend: {
          display: false
        },
        scales: {
          xAxes: [{
            labelString: 'Date',
            gridLines: {
              drawTicks: false,
              color: this.nightShift ? '#333F44' : '#DDE1E5',
              zeroLineColor: this.nightShift ? '#333F44' : '#DDE1E5'
            },
            ticks: {
              display: false,
              maxRotation: 0,
              minRotation: 0,
              padding: 6,
              autoSkip: false,
              fontColor: '#626D79',
              maxTicksLimit: 10,
              callback: (value, index, values) => {
                let step = (values.length - 1) / maxTicksAllowed;
                let steps = [];

                for (let i = 0; i < maxTicksAllowed; i++) {
                  steps.push(Math.ceil(i * step));
                }

                if (index === 0) {
                  return value;
                }

                if (index === values.length - 1 && this.chartType !== 'open-rate') {
                  return 'Today';
                }

                if (steps.includes(index)) {
                  return '';
                }
              }
            }
          }],
          yAxes: [{
            gridLines: {
              drawTicks: false,
              display: false,
              drawBorder: false
            },
            ticks: {
              maxTicksLimit: 5,
              fontColor: '#7C8B9A',
              padding: 8,
              precision: 0,
              callback: value => {
                const currency = this.chartType === 'mrr' ? (0, _currency.getSymbol)(this.stats.currency) : '';

                if (parseInt(value) >= 1000) {
                  return currency + value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
                } else {
                  return currency + value;
                }
              }
            }
          }]
        }
      };

      if (this.chartType === 'mrr' || this.chartType === 'all-members') {
        const chartData = this.chartData.datasets[0].data;
        let allZeros = true;

        for (let i = 0; i < chartData.length; i++) {
          const element = chartData[i];

          if (element !== 0) {
            allZeros = false;
            break;
          }
        }

        if (allZeros) {
          options.scales.yAxes[0].ticks.suggestedMin = 0;
          options.scales.yAxes[0].ticks.suggestedMax = 100;
        }
      }

      if (this.chartType === 'open-rate') {
        options.scales.yAxes[0].ticks.suggestedMin = 0;
      }

      if (this.isSmall) {
        options.scales.yAxes[0].ticks.display = false;
        options.scales.xAxes[0].gridLines.display = true;
      }

      this.set('chartOptions', options);
    },

    getTicksForRange(rangeInDays) {
      if (rangeInDays <= 30) {
        return 5;
      } else if (rangeInDays <= 90) {
        return 10;
      } else {
        return 15;
      }
    },

    setChartJSDefaults() {
      Chart.defaults.LineWithLine = Chart.defaults.line;
      Chart.controllers.LineWithLine = Chart.controllers.line.extend({
        draw: function (ease) {
          Chart.controllers.line.prototype.draw.call(this, ease);

          if (this.chart.tooltip._active && this.chart.tooltip._active.length) {
            let activePoint = this.chart.tooltip._active[0];
            let ctx = this.chart.ctx;
            let x = activePoint.tooltipPosition().x;
            let topY = this.chart.scales['y-axis-0'].top;
            let bottomY = this.chart.scales['y-axis-0'].bottom; // draw line

            ctx.save();
            ctx.beginPath();
            ctx.moveTo(x, topY);
            ctx.lineTo(x, bottomY);
            ctx.lineWidth = 1;
            ctx.strokeStyle = this.nightShift ? 'rgba(62, 176, 239, 0.65)' : 'rgba(62, 176, 239, 0.1)';
            ctx.stroke();
            ctx.restore();
          }
        }
      });
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-members-filter-count", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{this.memberCount}}
  */
  {
    "id": "0/PvpuSl",
    "block": "{\"symbols\":[],\"statements\":[[1,[32,0,[\"memberCount\"]]]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-members-filter-count.hbs"
  });

  let GhMembersFilterCountComponent = (_dec = Ember.inject.service, _dec2 = Ember._tracked, (_class = class GhMembersFilterCountComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "membersCountCache", _descriptor, this);

      _initializerDefineProperty(this, "memberCount", _descriptor2, this);

      this.getMembersCountTask.perform();
    }

    *getMembersCountTask() {
      this.memberCount = yield this.membersCountCache.countString(this.args.filter, {
        knownCount: this.args.knownCount
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "membersCountCache", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "memberCount", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "getMembersCountTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "getMembersCountTask"), _class.prototype)), _class));
  _exports.default = GhMembersFilterCountComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMembersFilterCountComponent);
});
;define("ghost-admin/components/gh-members-filter-labs", ["exports", "@glimmer/component", "@nexes/nql-lang"], function (_exports, _component, _nqlLang) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <GhBasicDropdown @verticalPosition="below" @horizontalPosition="right" @onClose={{this.onDropdownClose}} as |dd|>
  
      <dd.Trigger
          class="gh-btn gh-btn-icon gh-btn-action-icon"
          data-test-button="members-filter-actions"
      >
          <span class="{{if @isFiltered "gh-btn-label-green"}}">
              {{svg-jar "filter"}}
              Filter
              {{#if @isFiltered}}
              ({{totalFilters}})
              {{/if}}
          </span>
      </dd.Trigger>
  
      <dd.Content class="gh-member-actions-menu gh-filter-builder gh-members-filter-builder dropdown-menu dropdown-triangle-top-right">
          <h3>Filter list</h3>
          <section class="gh-filters">
              {{#each this.filters as |filter|}}
                  <div class="gh-filter-block">
                      <GhFormGroup @property={{filter.id}} @classNames="max-width">
                          <div class="gh-filter-inputgroup">
                              <span class="gh-select">
                                  <OneWaySelect
                                      @value={{filter.type}}
                                      @options={{this.availableFilterProperties}}
                                      @optionValuePath="name"
                                      @optionLabelPath="label"
                                      @optionTargetPath="name"
                                      @groupLabelPath="group"
                                      @update={{fn this.setFilterType filter.id}}
                                  />
                                  {{svg-jar "arrow-down-small"}}
                              </span>
                              <span class="gh-select">
                                  <OneWaySelect
                                      @value={{filter.relation}}
                                      @options={{filter.relationOptions}}
                                      @optionValuePath="name"
                                      @optionLabelPath="label"
                                      @optionTargetPath="name"
                                      @update={{fn this.setFilterRelation filter.id}}
                                  />
                                  {{svg-jar "arrow-down-small"}}
                              </span>
                              <GhMembersFilterValueLabs
                                  @filter={{filter}}
                                  @setFilterValue={{this.setFilterValue}}
                                  @onLabelEdit={{@onLabelEdit}}
                              />
                              <button
                                  type="button"
                                  class="gh-btn gh-btn-text gh-btn-link gh-btn-icon gh-delete-filter"
                                  title="Delete filter"
                                  {{on "click" (fn this.deleteFilter filter.id)}}
                              >
                                  {{svg-jar "close"}} <span class="hidden">Delete filter</span>
                              </button>
                          </div>
                      </GhFormGroup>
                  </div>
              {{/each}}
              <div>
                  <button type="button"
                      class="gh-btn gh-btn-text gh-btn-link green gh-btn-icon gh-add-filter"
                      {{on "click" this.addFilter}}
                  >
                      <span>{{svg-jar "add"}} Add filter</span>
                  </button>
              </div>
          </section>
          <div class="gh-filter-builder-footer">
              <button
                  class="gh-btn"
                  {{on "click" this.resetFilter}}
              >
                  <span>Reset all</span>
              </button>
              <button
                  class="gh-btn gh-btn-primary"
                  data-test-button="members-apply-filter"
                  {{on "click" this.applyFilter}}
              >
                  <span>Apply filters</span>
              </button>
          </div>
      </dd.Content>
  
  </GhBasicDropdown>
  
  */
  {
    "id": "hMSnav17",
    "block": "{\"symbols\":[\"dd\",\"filter\",\"@onLabelEdit\",\"@isFiltered\"],\"statements\":[[8,\"gh-basic-dropdown\",[],[[\"@verticalPosition\",\"@horizontalPosition\",\"@onClose\"],[\"below\",\"right\",[32,0,[\"onDropdownClose\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n\\n    \"],[8,[32,1,[\"Trigger\"]],[[24,0,\"gh-btn gh-btn-icon gh-btn-action-icon\"],[24,\"data-test-button\",\"members-filter-actions\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"span\"],[15,0,[31,[[30,[36,4],[[32,4],\"gh-btn-label-green\"],null]]]],[12],[2,\"\\n            \"],[1,[30,[36,1],[\"filter\"],null]],[2,\"\\n            Filter\\n\"],[6,[37,4],[[32,4]],null,[[\"default\"],[{\"statements\":[[2,\"            (\"],[1,[34,3]],[2,\")\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[8,[32,1,[\"Content\"]],[[24,0,\"gh-member-actions-menu gh-filter-builder gh-members-filter-builder dropdown-menu dropdown-triangle-top-right\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h3\"],[12],[2,\"Filter list\"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-filters\"],[12],[2,\"\\n\"],[6,[37,6],[[30,[36,5],[[30,[36,5],[[32,0,[\"filters\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-filter-block\"],[12],[2,\"\\n                    \"],[8,\"gh-form-group\",[],[[\"@property\",\"@classNames\"],[[32,2,[\"id\"]],\"max-width\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-filter-inputgroup\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n                                \"],[8,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@groupLabelPath\",\"@update\"],[[32,2,[\"type\"]],[32,0,[\"availableFilterProperties\"]],\"name\",\"label\",\"name\",\"group\",[30,[36,0],[[32,0,[\"setFilterType\"]],[32,2,[\"id\"]]],null]]],null],[2,\"\\n                                \"],[1,[30,[36,1],[\"arrow-down-small\"],null]],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n                                \"],[8,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@update\"],[[32,2,[\"relation\"]],[32,2,[\"relationOptions\"]],\"name\",\"label\",\"name\",[30,[36,0],[[32,0,[\"setFilterRelation\"]],[32,2,[\"id\"]]],null]]],null],[2,\"\\n                                \"],[1,[30,[36,1],[\"arrow-down-small\"],null]],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[8,\"gh-members-filter-value-labs\",[],[[\"@filter\",\"@setFilterValue\",\"@onLabelEdit\"],[[32,2],[32,0,[\"setFilterValue\"]],[32,3]]],null],[2,\"\\n                            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-text gh-btn-link gh-btn-icon gh-delete-filter\"],[24,\"title\",\"Delete filter\"],[24,4,\"button\"],[4,[38,2],[\"click\",[30,[36,0],[[32,0,[\"deleteFilter\"]],[32,2,[\"id\"]]],null]],null],[12],[2,\"\\n                                \"],[1,[30,[36,1],[\"close\"],null]],[2,\" \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Delete filter\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"            \"],[10,\"div\"],[12],[2,\"\\n                \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-text gh-btn-link green gh-btn-icon gh-add-filter\"],[24,4,\"button\"],[4,[38,2],[\"click\",[32,0,[\"addFilter\"]]],null],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[1,[30,[36,1],[\"add\"],null]],[2,\" Add filter\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-filter-builder-footer\"],[12],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,2],[\"click\",[32,0,[\"resetFilter\"]]],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Reset all\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-primary\"],[24,\"data-test-button\",\"members-apply-filter\"],[4,[38,2],[\"click\",[32,0,[\"applyFilter\"]]],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Apply filters\"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"]],\"parameters\":[1]}]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"fn\",\"svg-jar\",\"on\",\"totalFilters\",\"if\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/gh-members-filter-labs.hbs"
  });

  const FILTER_PROPERTIES = [// Basic
  // {label: 'Name', name: 'name', group: 'Basic'},
  // {label: 'Email', name: 'email', group: 'Basic'},
  // {label: 'Location', name: 'location', group: 'Basic'},
  {
    label: 'Label',
    name: 'label',
    group: 'Basic'
  }, {
    label: 'Newsletter subscription',
    name: 'subscribed',
    group: 'Basic'
  }, // Member subscription
  {
    label: 'Member status',
    name: 'status',
    group: 'Subscription'
  }, // {label: 'Tier', name: 'tier', group: 'Subscription'},
  {
    label: 'Billing period',
    name: 'subscriptions.plan_interval',
    group: 'Subscription'
  }, {
    label: 'Stripe subscription status',
    name: 'subscriptions.status',
    group: 'Subscription'
  }, // Emails
  {
    label: 'Emails sent (all time)',
    name: 'email_count',
    group: 'Email'
  }, {
    label: 'Emails opened (all time)',
    name: 'email_opened_count',
    group: 'Email'
  }, {
    label: 'Open rate (all time)',
    name: 'email_open_rate',
    group: 'Email'
  } // {label: 'Emails sent (30 days)', name: 'x', group: 'Email'},
  // {label: 'Emails opened (30 days)', name: 'x', group: 'Email'},
  // {label: 'Open rate (30 days)', name: 'x', group: 'Email'},
  // {label: 'Emails sent (60 days)', name: 'x', group: 'Email'},
  // {label: 'Emails opened (60 days)', name: 'x', group: 'Email'},
  // {label: 'Open rate (60 days)', name: 'x', group: 'Email'},
  ];
  const FILTER_RELATIONS_OPTIONS = {
    subscribed: [{
      label: 'is',
      name: 'is'
    }, {
      label: 'is not',
      name: 'is-not'
    }],
    name: [{
      label: 'is',
      name: 'is'
    }, {
      label: 'is not',
      name: 'is-not'
    }],
    email: [{
      label: 'is',
      name: 'is'
    }, {
      label: 'is not',
      name: 'is-not'
    }],
    status: [{
      label: 'is',
      name: 'is'
    }, {
      label: 'is not',
      name: 'is-not'
    }],
    'subscriptions.plan_interval': [{
      label: 'is',
      name: 'is'
    }, {
      label: 'is not',
      name: 'is-not'
    }],
    'subscriptions.status': [{
      label: 'is',
      name: 'is'
    }, {
      label: 'is not',
      name: 'is-not'
    }],
    label: [{
      label: 'is',
      name: 'is'
    }, {
      label: 'is not',
      name: 'is-not'
    }],
    email_count: [{
      label: 'is',
      name: 'is'
    }, {
      label: 'is greater than',
      name: 'is-greater'
    }, {
      label: 'is less than',
      name: 'is-less'
    }],
    email_opened_count: [{
      label: 'is',
      name: 'is'
    }, {
      label: 'is greater than',
      name: 'is-greater'
    }, {
      label: 'is less than',
      name: 'is-less'
    }],
    email_open_rate: [{
      label: 'is',
      name: 'is'
    }, {
      label: 'is greater than',
      name: 'is-greater'
    }, {
      label: 'is less than',
      name: 'is-less'
    }]
  };
  const FILTER_VALUE_OPTIONS = {
    'subscriptions.plan_interval': [{
      label: 'Monthly',
      name: 'month'
    }, {
      label: 'Yearly',
      name: 'year'
    }],
    status: [{
      label: 'Paid',
      name: 'paid'
    }, {
      label: 'Free',
      name: 'free'
    }, {
      label: 'Complimentary',
      name: 'comped'
    }],
    subscribed: [{
      label: 'Subscribed',
      name: 'true'
    }, {
      label: 'Unsubscribed',
      name: 'false'
    }],
    'subscriptions.status': [{
      label: 'Active',
      name: 'active'
    }, {
      label: 'Trialing',
      name: 'trialing'
    }, {
      label: 'Canceled',
      name: 'canceled'
    }, {
      label: 'Unpaid',
      name: 'unpaid'
    }, {
      label: 'Past Due',
      name: 'past_due'
    }, {
      label: 'Incomplete',
      name: 'incomplete'
    }, {
      label: 'Incomplete - Expired',
      name: 'incomplete_expired'
    }]
  };
  let GhMembersFilterLabsComponent = (_dec = Ember.inject.service, _dec2 = Ember._tracked, _dec3 = Ember._action, _dec4 = Ember._action, _dec5 = Ember._action, _dec6 = Ember._action, _dec7 = Ember._action, _dec8 = Ember._action, _dec9 = Ember._action, _dec10 = Ember._action, _dec11 = Ember._action, (_class = class GhMembersFilterLabsComponent extends _component.default {
    get totalFilters() {
      return this.filters?.length;
    }

    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "session", _descriptor, this);

      _initializerDefineProperty(this, "filters", _descriptor2, this);

      this.availableFilterProperties = FILTER_PROPERTIES;
      this.availableFilterRelationsOptions = FILTER_RELATIONS_OPTIONS;
      this.availableFilterValueOptions = FILTER_VALUE_OPTIONS;
      this.nextFilterId = 1;

      if (this.args.defaultFilterParam) {
        this.parseNqlFilter(this.args.defaultFilterParam);
      }
    }

    addFilter() {
      this.filters.pushObject(Ember.Object.create({
        id: `filter-${this.nextFilterId}`,
        type: 'label',
        relation: 'is',
        value: [],
        relationOptions: FILTER_RELATIONS_OPTIONS.label
      }));
      this.nextFilterId = this.nextFilterId + 1;
      this.applySoftFilter();
    }

    onDropdownClose() {
      this.applyFilter();
    }

    generateNqlFilter(filters) {
      let query = '';
      filters.forEach(filter => {
        if (filter.type === 'label' && filter.value?.length) {
          const relationStr = filter.relation === 'is-not' ? '-' : '';
          const filterValue = '[' + filter.value.join(',') + ']';
          query += `${filter.type}:${relationStr}${filterValue}+`;
        } else {
          const relationStr = this.getFilterRelationOperator(filter.relation);
          const filterValue = typeof filter.value === 'string' && filter.value.includes(' ') ? `'${filter.value}'` : filter.value;
          query += `${filter.type}:${relationStr}${filterValue}+`;
        }
      });
      return query.slice(0, -1);
    }

    parseNqlFilterKey(nqlFilter) {
      const keys = Object.keys(nqlFilter);
      const key = keys[0];
      const value = nqlFilter[key];
      const filterId = this.nextFilterId;

      if (typeof value === 'object') {
        if (value.$in !== undefined && key === 'label') {
          this.nextFilterId = this.nextFilterId + 1;
          return Ember.Object.create({
            id: `filter-${filterId}`,
            type: key,
            relation: 'is',
            value: value.$in,
            relationOptions: FILTER_RELATIONS_OPTIONS[key]
          });
        }

        if (value.$nin !== undefined && key === 'label') {
          this.nextFilterId = this.nextFilterId + 1;
          return Ember.Object.create({
            id: `filter-${filterId}`,
            type: key,
            relation: 'is-not',
            value: value.$nin,
            relationOptions: FILTER_RELATIONS_OPTIONS[key]
          });
        }

        if (value.$ne !== undefined) {
          this.nextFilterId = this.nextFilterId + 1;
          return Ember.Object.create({
            id: `filter-${filterId}`,
            type: key,
            relation: 'is-not',
            value: value.$ne,
            relationOptions: FILTER_RELATIONS_OPTIONS[key]
          });
        }

        if (value.$gt !== undefined) {
          this.nextFilterId = this.nextFilterId + 1;
          return Ember.Object.create({
            id: `filter-${filterId}`,
            type: key,
            relation: 'is-greater',
            value: value.$gt,
            relationOptions: FILTER_RELATIONS_OPTIONS[key]
          });
        }

        if (value.$lt !== undefined) {
          this.nextFilterId = this.nextFilterId + 1;
          return Ember.Object.create({
            id: `filter-${filterId}`,
            type: key,
            relation: 'is-less',
            value: value.$lt,
            relationOptions: FILTER_RELATIONS_OPTIONS[key]
          });
        }

        return null;
      } else {
        this.nextFilterId = this.nextFilterId + 1;
        return Ember.Object.create({
          id: `filter-${filterId}`,
          type: key,
          relation: 'is',
          value: value,
          relationOptions: FILTER_RELATIONS_OPTIONS[key]
        });
      }
    }

    parseNqlFilter(filterParam) {
      const validKeys = Object.keys(FILTER_RELATIONS_OPTIONS);

      const filters = _nqlLang.default.parse(filterParam);

      const filterKeys = Object.keys(filters);
      let filterData = [];

      if (filterKeys?.length === 1 && validKeys.includes(filterKeys[0])) {
        const filterObj = this.parseNqlFilterKey(filters);
        filterData = [filterObj];
      } else if (filters?.$and) {
        const andFilters = filters?.$and || [];
        filterData = andFilters.filter(nqlFilter => {
          const _filterKeys = Object.keys(nqlFilter);

          if (_filterKeys?.length === 1 && validKeys.includes(_filterKeys[0])) {
            return true;
          }

          return false;
        }).map(nqlFilter => {
          return this.parseNqlFilterKey(nqlFilter);
        }).filter(nqlFilter => {
          return !!nqlFilter;
        });
      }

      this.filters = Ember.A(filterData);
    }

    getFilterRelationOperator(relation) {
      if (relation === 'is-not') {
        return '-';
      } else if (relation === 'is-greater') {
        return '>';
      } else if (relation === 'is-less') {
        return '<';
      }

      return '';
    }

    deleteFilter(filterId, event) {
      event.stopPropagation();
      event.preventDefault();
      const filterToDelete = this.filters.findBy('id', filterId);

      if (this.filters.length === 1) {
        this.resetFilter();
      } else {
        this.filters.removeObject(filterToDelete);
        this.applySoftFilter();
      }
    }

    setFilterType(filterId, newType) {
      let defaultValue = this.availableFilterValueOptions[newType] ? this.availableFilterValueOptions[newType][0].name : '';

      if (newType === 'label' && !defaultValue) {
        defaultValue = [];
      }

      const filterToEdit = this.filters.findBy('id', filterId);
      filterToEdit?.setProperties({
        type: newType,
        relationOptions: this.availableFilterRelationsOptions[newType],
        value: defaultValue
      });

      if (newType !== 'label' && defaultValue) {
        this.applySoftFilter();
      }
    }

    setFilterRelation(filterId, newRelation) {
      const filterToEdit = this.filters.findBy('id', filterId);
      filterToEdit.set('relation', newRelation);
      this.applySoftFilter();
    }

    setFilterValue(filterType, filterId, filterValue) {
      const filterToEdit = this.filters.findBy('id', filterId);
      filterToEdit.set('value', filterValue);
      this.applySoftFilter();
    }

    applySoftFilter() {
      const validFilters = this.filters.filter(fil => {
        if (fil.type === 'label') {
          return fil.value?.length;
        }

        return fil.value;
      });
      const query = this.generateNqlFilter(validFilters);
      this.args.onApplySoftFilter(query, validFilters);
    }

    applyFilter() {
      const validFilters = this.filters.filter(fil => {
        if (fil.type === 'label') {
          return fil.value?.length;
        }

        return fil.value;
      });
      const query = this.generateNqlFilter(validFilters);
      this.args.onApplyFilter(query, validFilters);
    }

    resetFilter() {
      this.nextFilterId = 1;
      this.filters = Ember.A([Ember.Object.create({
        id: `filter-0`,
        type: 'label',
        relation: 'is',
        value: [],
        relationOptions: FILTER_RELATIONS_OPTIONS.label
      })]);
      this.args.onResetFilter();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "filters", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return Ember.A([Ember.Object.create({
        id: `filter-0`,
        type: 'label',
        relation: 'is',
        value: [],
        relationOptions: FILTER_RELATIONS_OPTIONS.label
      })]);
    }
  }), _applyDecoratedDescriptor(_class.prototype, "addFilter", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "addFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onDropdownClose", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "onDropdownClose"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "deleteFilter", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "deleteFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setFilterType", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "setFilterType"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setFilterRelation", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "setFilterRelation"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setFilterValue", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "setFilterValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "applySoftFilter", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "applySoftFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "applyFilter", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "applyFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "resetFilter", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "resetFilter"), _class.prototype)), _class));
  _exports.default = GhMembersFilterLabsComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMembersFilterLabsComponent);
});
;define("ghost-admin/components/gh-members-filter-value-labs", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if (eq @filter.type 'label')}}
      <GhMemberLabelInputLabs
          @onChange={{fn this.setLabelsFilterValue @filter.type @filter.id}}
          @onLabelEdit={{@onLabelEdit}}
          @triggerId="label-input"
          @labels={{@filter.value}}
          @allowCreation={{false}}
          data-test-input=""
      />
  
  {{else if (eq @filter.type 'status')}}
      <span class="gh-select">
          <OneWaySelect
              @value={{@filter.value}}
              @options={{this.availableFilterOptions.status}}
              @optionValuePath="name"
              @optionLabelPath="label"
              @optionTargetPath="name"
              @update={{fn this.setFilterValue @filter.type @filter.id}}
          />
          {{svg-jar "arrow-down-small"}}
      </span>
  
  {{else if (eq @filter.type 'email_count')}}
      <GhTextInput
          @value={{@filter.value}}
          @type="number"
          @focus-out={{fn this.updateInputFilterValue @filter.type @filter.id}}
          @input={{fn this.setInputFilterValue @filter.type @filter.id}}
          @keyPress={{fn this.updateInputFilterValueOnEnter @filter.type @filter.id}}
          @stopEnterKeyDownPropagation={{true}}
      />
  
  {{else if (eq @filter.type 'email_opened_count')}}
      <GhTextInput
          @value={{@filter.value}}
          @type="number"
          @focus-out={{fn this.updateInputFilterValue @filter.type @filter.id}}
          @keyPress={{fn this.updateInputFilterValueOnEnter @filter.type @filter.id}}
          @input={{fn this.setInputFilterValue @filter.type @filter.id}}
      />
  
  {{else if (eq @filter.type 'email_open_rate')}}
      <div class="relative">
          <span class="gh-input-percentage-label">%</span>
          <GhTextInput
              @value={{@filter.value}}
              @type="number"
              @focus-out={{fn this.updateInputFilterValue @filter.type @filter.id}}
              @keyPress={{fn this.updateInputFilterValueOnEnter @filter.type @filter.id}}
              @input={{fn this.setInputFilterValue @filter.type @filter.id}}
          />
      </div>
  
  {{else if (eq @filter.type 'subscriptions.plan_interval')}}
      <span class="gh-select">
          <OneWaySelect
              @value={{@filter.value}}
              @options={{this.availableFilterOptions.subscriptionPriceInterval}}
              @optionValuePath="name"
              @optionLabelPath="label"
              @optionTargetPath="name"
              @update={{fn this.setFilterValue @filter.type @filter.id}}
          />
          {{svg-jar "arrow-down-small"}}
      </span>
  
  {{else if (eq @filter.type 'subscriptions.status')}}
      <span class="gh-select">
          <OneWaySelect
              @value={{@filter.value}}
              @options={{this.availableFilterOptions.subscriptionStripeStatus}}
              @optionValuePath="name"
              @optionLabelPath="label"
              @optionTargetPath="name"
              @update={{fn this.setFilterValue @filter.type @filter.id}}
          />
          {{svg-jar "arrow-down-small"}}
      </span>
  {{else if (eq @filter.type 'subscribed')}}
      <span class="gh-select">
          <OneWaySelect
              @value={{@filter.value}}
              @options={{this.availableFilterOptions.subscribed}}
              @optionValuePath="name"
              @optionLabelPath="label"
              @optionTargetPath="name"
              @update={{fn this.setFilterValue @filter.type @filter.id}}
          />
          {{svg-jar "arrow-down-small"}}
      </span>
  {{else}}
      <GhTextInput
          @name={{@filter.id}}
          @value={{@filter.value}}
          @focus-out={{fn this.updateInputFilterValue @filter.type @filter.id}}
          @keyPress={{fn this.updateInputFilterValueOnEnter @filter.type @filter.id}}
          @input={{fn this.setInputFilterValue @filter.type @filter.id}}
      />
  {{/if}}
  
  */
  {
    "id": "8QRwlIIf",
    "block": "{\"symbols\":[\"@filter\",\"@onLabelEdit\"],\"statements\":[[6,[37,3],[[30,[36,2],[[32,1,[\"type\"]],\"label\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[8,\"gh-member-label-input-labs\",[[24,\"data-test-input\",\"\"]],[[\"@onChange\",\"@onLabelEdit\",\"@triggerId\",\"@labels\",\"@allowCreation\"],[[30,[36,0],[[32,0,[\"setLabelsFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null],[32,2],\"label-input\",[32,1,[\"value\"]],false]],null],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,2],[[32,1,[\"type\"]],\"status\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n        \"],[8,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@update\"],[[32,1,[\"value\"]],[32,0,[\"availableFilterOptions\",\"status\"]],\"name\",\"label\",\"name\",[30,[36,0],[[32,0,[\"setFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null]]],null],[2,\"\\n        \"],[1,[30,[36,1],[\"arrow-down-small\"],null]],[2,\"\\n    \"],[13],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,2],[[32,1,[\"type\"]],\"email_count\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[8,\"gh-text-input\",[],[[\"@value\",\"@type\",\"@focus-out\",\"@input\",\"@keyPress\",\"@stopEnterKeyDownPropagation\"],[[32,1,[\"value\"]],\"number\",[30,[36,0],[[32,0,[\"updateInputFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null],[30,[36,0],[[32,0,[\"setInputFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null],[30,[36,0],[[32,0,[\"updateInputFilterValueOnEnter\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null],true]],null],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,2],[[32,1,[\"type\"]],\"email_opened_count\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[8,\"gh-text-input\",[],[[\"@value\",\"@type\",\"@focus-out\",\"@keyPress\",\"@input\"],[[32,1,[\"value\"]],\"number\",[30,[36,0],[[32,0,[\"updateInputFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null],[30,[36,0],[[32,0,[\"updateInputFilterValueOnEnter\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null],[30,[36,0],[[32,0,[\"setInputFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null]]],null],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,2],[[32,1,[\"type\"]],\"email_open_rate\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"relative\"],[12],[2,\"\\n        \"],[10,\"span\"],[14,0,\"gh-input-percentage-label\"],[12],[2,\"%\"],[13],[2,\"\\n        \"],[8,\"gh-text-input\",[],[[\"@value\",\"@type\",\"@focus-out\",\"@keyPress\",\"@input\"],[[32,1,[\"value\"]],\"number\",[30,[36,0],[[32,0,[\"updateInputFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null],[30,[36,0],[[32,0,[\"updateInputFilterValueOnEnter\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null],[30,[36,0],[[32,0,[\"setInputFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null]]],null],[2,\"\\n    \"],[13],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,2],[[32,1,[\"type\"]],\"subscriptions.plan_interval\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n        \"],[8,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@update\"],[[32,1,[\"value\"]],[32,0,[\"availableFilterOptions\",\"subscriptionPriceInterval\"]],\"name\",\"label\",\"name\",[30,[36,0],[[32,0,[\"setFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null]]],null],[2,\"\\n        \"],[1,[30,[36,1],[\"arrow-down-small\"],null]],[2,\"\\n    \"],[13],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,2],[[32,1,[\"type\"]],\"subscriptions.status\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n        \"],[8,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@update\"],[[32,1,[\"value\"]],[32,0,[\"availableFilterOptions\",\"subscriptionStripeStatus\"]],\"name\",\"label\",\"name\",[30,[36,0],[[32,0,[\"setFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null]]],null],[2,\"\\n        \"],[1,[30,[36,1],[\"arrow-down-small\"],null]],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,2],[[32,1,[\"type\"]],\"subscribed\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n        \"],[8,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@update\"],[[32,1,[\"value\"]],[32,0,[\"availableFilterOptions\",\"subscribed\"]],\"name\",\"label\",\"name\",[30,[36,0],[[32,0,[\"setFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null]]],null],[2,\"\\n        \"],[1,[30,[36,1],[\"arrow-down-small\"],null]],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[8,\"gh-text-input\",[],[[\"@name\",\"@value\",\"@focus-out\",\"@keyPress\",\"@input\"],[[32,1,[\"id\"]],[32,1,[\"value\"]],[30,[36,0],[[32,0,[\"updateInputFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null],[30,[36,0],[[32,0,[\"updateInputFilterValueOnEnter\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null],[30,[36,0],[[32,0,[\"setInputFilterValue\"]],[32,1,[\"type\"]],[32,1,[\"id\"]]],null]]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"fn\",\"svg-jar\",\"eq\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-members-filter-value-labs.hbs"
  });

  const FILTER_OPTIONS = {
    subscriptionPriceInterval: [{
      label: 'Monthly',
      name: 'month'
    }, {
      label: 'Yearly',
      name: 'year'
    }],
    status: [{
      label: 'Paid',
      name: 'paid'
    }, {
      label: 'Free',
      name: 'free'
    }, {
      label: 'Complimentary',
      name: 'comped'
    }],
    subscribed: [{
      label: 'Subscribed',
      name: 'true'
    }, {
      label: 'Unsubscribed',
      name: 'false'
    }],
    subscriptionStripeStatus: [{
      label: 'Active',
      name: 'active'
    }, {
      label: 'Trialing',
      name: 'trialing'
    }, {
      label: 'Canceled',
      name: 'canceled'
    }, {
      label: 'Unpaid',
      name: 'unpaid'
    }, {
      label: 'Past Due',
      name: 'past_due'
    }, {
      label: 'Incomplete',
      name: 'incomplete'
    }, {
      label: 'Incomplete - Expired',
      name: 'incomplete_expired'
    }]
  };
  let GhMembersFilterValueLabs = (_dec = Ember._tracked, _dec2 = Ember._action, _dec3 = Ember._action, _dec4 = Ember._action, _dec5 = Ember._action, _dec6 = Ember._action, (_class = class GhMembersFilterValueLabs extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "filterValue", _descriptor, this);

      this.availableFilterOptions = FILTER_OPTIONS;
      this.filterValue = this.args.filter.value;
    }

    setInputFilterValue(filterType, filterId, event) {
      this.filterValue = event.target.value;
    }

    updateInputFilterValue(filterType, filterId) {
      this.args.setFilterValue(filterType, filterId, this.filterValue);
    }

    updateInputFilterValueOnEnter(filterType, filterId, event) {
      if (event.keyCode === 13) {
        this.args.setFilterValue(filterType, filterId, this.filterValue);
      }
    }

    setLabelsFilterValue(filterType, filterId, labels) {
      this.args.setFilterValue(filterType, filterId, labels.map(label => label.slug));
    }

    setFilterValue(filterType, filterId, value) {
      this.args.setFilterValue(filterType, filterId, value);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "filterValue", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "setInputFilterValue", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "setInputFilterValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateInputFilterValue", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "updateInputFilterValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateInputFilterValueOnEnter", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "updateInputFilterValueOnEnter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setLabelsFilterValue", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "setLabelsFilterValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setFilterValue", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "setFilterValue"), _class.prototype)), _class));
  _exports.default = GhMembersFilterValueLabs;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMembersFilterValueLabs);
});
;define("ghost-admin/components/gh-members-filter", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <span class="dropdown dropdown-topmenu">
      <span class="{{if @selectedLabel.slug "gh-contentfilter-selected"}}">
      <GhDropdownButton
          @dropdownName="members-label-menu"
          @classNames="gh-contentfilter-menu-trigger"
          @title="Member Labels"
          data-test-button="labels-filter"
      >
              <span class="gh-btn-filter-maxwidth" title="{{@selectedLabel.name}}">
                  <span>{{@selectedLabel.name}}</span>
                  {{svg-jar "arrow-down-small"}}
              </span>
      </GhDropdownButton>
      </span>
      <GhDropdown
          @name="members-label-menu"
          @tagName="div"
          @classNames="dropdown-menu dropdown-triangle-top-right dropdown-action members-label-list"
      >
          <ul class="dropdown-content">
              {{#each @availableLabels as |label|}}
                  <li class="{{if (eq @selectedLabel.name label.name) "selected"}}">
                      <a>
                          <span class="dropdown-label" title="{{label.name}}" {{on "click" (fn @onLabelChange label)}} data-test-label-filter={{label.name}}>{{label.name}} </span>
                          {{#if label.slug}}
                              <span class="dropdown-action-icon" {{on "click" (fn @onLabelEdit label.slug)}}> {{svg-jar "pen"}} </span>
                          {{/if}}
                      </a>
                  </li>
              {{/each}}
          </ul>
          <ul class="dropdown-footer">
              <li>
                  <a {{on "click" (fn @onLabelAdd)}}>
                      <span>
                          {{svg-jar "add"}}
                          Add Label
                      </span>
                  </a>
              </li>
          </ul>
      </GhDropdown>
  </span>
  
  <div class="gh-contentfilter-menu {{if @selectedPaidParam.value "gh-contentfilter-selected"}}" data-test-select="paidParam">
      <PowerSelect
          @selected={{@selectedPaidParam}}
          @options={{@availablePaidParams}}
          @searchEnabled={{false}}
          @onChange={{@onPaidParamChange}}
          @triggerComponent="gh-power-select/trigger"
          @triggerClass="gh-contentfilter-menu-trigger"
          @dropdownClass="gh-contentfilter-menu-dropdown"
          @searchPlaceholder="Search authors"
          @matchTriggerWidth={{false}}
          as |paidParam|
      >
          {{#if paidParam.name}}{{paidParam.name}}{{else}}<span class="red">Unknown paid status</span>{{/if}}
      </PowerSelect>
  </div>
  
  <div class="gh-contenfilter-menu gh-contentfilter-sort" data-test-select="members-order">
      <PowerSelect
          @selected={{@selectedOrder}}
          @options={{@availableOrders}}
          @searchEnabled={{false}}
          @onChange={{@onOrderChange}}
          @triggerComponent="gh-power-select/trigger"
          @triggerClass="gh-contentfilter-menu-trigger"
          @dropdownClass="gh-contentfilter-menu-dropdown"
          @matchTriggerWidth={{false}}
          as |order|
      >
          {{#if order.name}}{{order.name}}{{else}}<span class="red">Unknown</span>{{/if}}
      </PowerSelect>
  </div>
  
  */
  {
    "id": "qctUy1Qx",
    "block": "{\"symbols\":[\"order\",\"paidParam\",\"label\",\"@onLabelEdit\",\"@selectedLabel\",\"@onLabelChange\",\"@availableLabels\",\"@onLabelAdd\",\"@selectedPaidParam\",\"@availablePaidParams\",\"@onPaidParamChange\",\"@selectedOrder\",\"@availableOrders\",\"@onOrderChange\"],\"statements\":[[10,\"span\"],[14,0,\"dropdown dropdown-topmenu\"],[12],[2,\"\\n    \"],[10,\"span\"],[15,0,[31,[[30,[36,4],[[32,5,[\"slug\"]],\"gh-contentfilter-selected\"],null]]]],[12],[2,\"\\n    \"],[8,\"gh-dropdown-button\",[[24,\"data-test-button\",\"labels-filter\"]],[[\"@dropdownName\",\"@classNames\",\"@title\"],[\"members-label-menu\",\"gh-contentfilter-menu-trigger\",\"Member Labels\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"span\"],[14,0,\"gh-btn-filter-maxwidth\"],[15,\"title\",[31,[[32,5,[\"name\"]]]]],[12],[2,\"\\n                \"],[10,\"span\"],[12],[1,[32,5,[\"name\"]]],[13],[2,\"\\n                \"],[1,[30,[36,2],[\"arrow-down-small\"],null]],[2,\"\\n            \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n    \"],[8,\"gh-dropdown\",[],[[\"@name\",\"@tagName\",\"@classNames\"],[\"members-label-menu\",\"div\",\"dropdown-menu dropdown-triangle-top-right dropdown-action members-label-list\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"ul\"],[14,0,\"dropdown-content\"],[12],[2,\"\\n\"],[6,[37,6],[[30,[36,5],[[30,[36,5],[[32,7]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"li\"],[15,0,[31,[[30,[36,4],[[30,[36,3],[[32,5,[\"name\"]],[32,3,[\"name\"]]],null],\"selected\"],null]]]],[12],[2,\"\\n                    \"],[10,\"a\"],[12],[2,\"\\n                        \"],[11,\"span\"],[24,0,\"dropdown-label\"],[16,\"title\",[31,[[32,3,[\"name\"]]]]],[16,\"data-test-label-filter\",[32,3,[\"name\"]]],[4,[38,1],[\"click\",[30,[36,0],[[32,6],[32,3]],null]],null],[12],[1,[32,3,[\"name\"]]],[2,\" \"],[13],[2,\"\\n\"],[6,[37,4],[[32,3,[\"slug\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[11,\"span\"],[24,0,\"dropdown-action-icon\"],[4,[38,1],[\"click\",[30,[36,0],[[32,4],[32,3,[\"slug\"]]],null]],null],[12],[2,\" \"],[1,[30,[36,2],[\"pen\"],null]],[2,\" \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[3]}]]],[2,\"        \"],[13],[2,\"\\n        \"],[10,\"ul\"],[14,0,\"dropdown-footer\"],[12],[2,\"\\n            \"],[10,\"li\"],[12],[2,\"\\n                \"],[11,\"a\"],[4,[38,1],[\"click\",[30,[36,0],[[32,8]],null]],null],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"\\n                        \"],[1,[30,[36,2],[\"add\"],null]],[2,\"\\n                        Add Label\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[15,0,[31,[\"gh-contentfilter-menu \",[30,[36,4],[[32,9,[\"value\"]],\"gh-contentfilter-selected\"],null]]]],[14,\"data-test-select\",\"paidParam\"],[12],[2,\"\\n    \"],[8,\"power-select\",[],[[\"@selected\",\"@options\",\"@searchEnabled\",\"@onChange\",\"@triggerComponent\",\"@triggerClass\",\"@dropdownClass\",\"@searchPlaceholder\",\"@matchTriggerWidth\"],[[32,9],[32,10],false,[32,11],\"gh-power-select/trigger\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"Search authors\",false]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[6,[37,4],[[32,2,[\"name\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,[32,2,[\"name\"]]]],\"parameters\":[]},{\"statements\":[[10,\"span\"],[14,0,\"red\"],[12],[2,\"Unknown paid status\"],[13]],\"parameters\":[]}]]],[2,\"\\n    \"]],\"parameters\":[2]}]]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"gh-contenfilter-menu gh-contentfilter-sort\"],[14,\"data-test-select\",\"members-order\"],[12],[2,\"\\n    \"],[8,\"power-select\",[],[[\"@selected\",\"@options\",\"@searchEnabled\",\"@onChange\",\"@triggerComponent\",\"@triggerClass\",\"@dropdownClass\",\"@matchTriggerWidth\"],[[32,12],[32,13],false,[32,14],\"gh-power-select/trigger\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[6,[37,4],[[32,1,[\"name\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,[32,1,[\"name\"]]]],\"parameters\":[]},{\"statements\":[[10,\"span\"],[14,0,\"red\"],[12],[2,\"Unknown\"],[13]],\"parameters\":[]}]]],[2,\"\\n    \"]],\"parameters\":[1]}]]],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"fn\",\"on\",\"svg-jar\",\"eq\",\"if\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/gh-members-filter.hbs"
  });

  let GhMembersFilterComponent = (_dec = Ember.inject.service, (_class = class GhMembersFilterComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "session", _descriptor, this);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = GhMembersFilterComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMembersFilterComponent);
});
;define("ghost-admin/components/gh-members-import-mapping-input", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <span class="gh-select gh-import-member-select {{if @disabled "disabled"}} {{unless this.mapTo "unmapped"}}">
      <OneWaySelect @value={{this.mapTo}}
          @options={{this.availableFields}}
          @optionValuePath="value"
          @optionLabelPath="label"
          @optionTargetPath="value"
          @includeBlank={{true}}
          @promptIsSelectable={{true}}
          @prompt="Not imported"
          @update={{action "updateMapping"}}
          @disabled={{@disabled}}
      />
      {{svg-jar "arrow-down-small"}}
  </span>
  */
  {
    "id": "C0tv2tZe",
    "block": "{\"symbols\":[\"@disabled\"],\"statements\":[[10,\"span\"],[15,0,[31,[\"gh-select gh-import-member-select \",[30,[36,1],[[32,1],\"disabled\"],null],\" \",[30,[36,0],[[32,0,[\"mapTo\"]],\"unmapped\"],null]]]],[12],[2,\"\\n    \"],[8,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@includeBlank\",\"@promptIsSelectable\",\"@prompt\",\"@update\",\"@disabled\"],[[32,0,[\"mapTo\"]],[32,0,[\"availableFields\"]],\"value\",\"label\",\"value\",true,true,\"Not imported\",[30,[36,2],[[32,0],\"updateMapping\"],null],[32,1]]],null],[2,\"\\n    \"],[1,[30,[36,3],[\"arrow-down-small\"],null]],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"unless\",\"if\",\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/gh-members-import-mapping-input.hbs"
  });

  const FIELD_MAPPINGS = [{
    label: 'Email',
    value: 'email'
  }, {
    label: 'Name',
    value: 'name'
  }, {
    label: 'Note',
    value: 'note'
  }, {
    label: 'Subscribed to emails',
    value: 'subscribed_to_emails'
  }, {
    label: 'Stripe Customer ID',
    value: 'stripe_customer_id'
  }, {
    label: 'Complimentary plan',
    value: 'complimentary_plan'
  }, {
    label: 'Labels',
    value: 'labels'
  }, {
    label: 'Created at',
    value: 'created_at'
  }];

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, (_dec = Ember._tracked, _dec2 = Ember._action, (_class = class _class extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "availableFields", _descriptor, this);
    }

    get mapTo() {
      return this.args.mapTo;
    }

    updateMapping(newMapTo) {
      if (this.args.updateMapping) {
        this.args.updateMapping(this.args.mapFrom, newMapTo);
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "availableFields", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return FIELD_MAPPINGS;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "updateMapping", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "updateMapping"), _class.prototype)), _class)));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-members-import-table", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor, _dec2, _dec3, _dec4, _dec5, _dec6, _class3, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <table class="f8 gh-members-import-table ma0">
      <thead>
          <tr>
              <th class="table-cell-field"><span class="f-small midgrey ttu fw5">Field</span></th>
              <th class="table-cell-data">
                  <div class="flex items-center justify-between">
                      <span class="f-small midgrey ttu fw5 nudge-top--1">Sample data <span class="midlightgrey fw4">(#{{format-number this.currentRecord}})</span></span>
                      <div class="flex items-center bg-white br2 ml1 nr1 gh-members-import-datanav">
                          <a href="#" {{action "prev"}} class="pa1 flex items-center justify-center br b--whitegrey {{unless this.hasPrevRecord "o-30"}}" data-test-import-prev>{{svg-jar "arrow-left" class="w3 h3 fill-middarkgrey" }}</a>
                          <a href="#" {{action "next"}} class="pa1 flex items-center justify-center {{unless this.hasNextRecord "o-30"}}" data-test-import-next>{{svg-jar "arrow-right" class="w3 h3 fill-middarkgrey" }}</a>
                      </div>
                  </div>
              </th>
              <th><span class="f-small midgrey ttu fw5">Import as</span></th>
          </tr>
      </thead>
      <tbody>
          {{#each currentlyDisplayedData as |row|}}
              <tr>
                  <td class="middarkgrey table-cell-field"><span>{{row.key}}</span></td>
                  <td class="middarkgrey table-cell-data {{unless row.value "empty-cell"}}"><span>{{row.value}}</span></td>
                  <td><span><GhMembersImportMappingInput @updateMapping={{this.updateMapping}} @mapFrom={{row.key}} @mapTo={{row.mapTo}} @disabled={{@disabled}} /></span></td>
              </tr>
          {{else}}
              <tr>
                  <td colspan="3" class="gh-member-import-nodata"><span>No data found in the uploaded CSV.</span></td>
              </tr>
          {{/each}}
      </tbody>
  </table>
  */
  {
    "id": "i+0jpe01",
    "block": "{\"symbols\":[\"row\",\"@disabled\"],\"statements\":[[10,\"table\"],[14,0,\"f8 gh-members-import-table ma0\"],[12],[2,\"\\n    \"],[10,\"thead\"],[12],[2,\"\\n        \"],[10,\"tr\"],[12],[2,\"\\n            \"],[10,\"th\"],[14,0,\"table-cell-field\"],[12],[10,\"span\"],[14,0,\"f-small midgrey ttu fw5\"],[12],[2,\"Field\"],[13],[13],[2,\"\\n            \"],[10,\"th\"],[14,0,\"table-cell-data\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"flex items-center justify-between\"],[12],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"f-small midgrey ttu fw5 nudge-top--1\"],[12],[2,\"Sample data \"],[10,\"span\"],[14,0,\"midlightgrey fw4\"],[12],[2,\"(#\"],[1,[30,[36,1],[[32,0,[\"currentRecord\"]]],null]],[2,\")\"],[13],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"flex items-center bg-white br2 ml1 nr1 gh-members-import-datanav\"],[12],[2,\"\\n                        \"],[11,\"a\"],[24,6,\"#\"],[16,0,[31,[\"pa1 flex items-center justify-center br b--whitegrey \",[30,[36,0],[[32,0,[\"hasPrevRecord\"]],\"o-30\"],null]]]],[24,\"data-test-import-prev\",\"\"],[4,[38,2],[[32,0],\"prev\"],null],[12],[1,[30,[36,3],[\"arrow-left\"],[[\"class\"],[\"w3 h3 fill-middarkgrey\"]]]],[13],[2,\"\\n                        \"],[11,\"a\"],[24,6,\"#\"],[16,0,[31,[\"pa1 flex items-center justify-center \",[30,[36,0],[[32,0,[\"hasNextRecord\"]],\"o-30\"],null]]]],[24,\"data-test-import-next\",\"\"],[4,[38,2],[[32,0],\"next\"],null],[12],[1,[30,[36,3],[\"arrow-right\"],[[\"class\"],[\"w3 h3 fill-middarkgrey\"]]]],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"th\"],[12],[10,\"span\"],[14,0,\"f-small midgrey ttu fw5\"],[12],[2,\"Import as\"],[13],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"tbody\"],[12],[2,\"\\n\"],[6,[37,6],[[30,[36,5],[[30,[36,5],[[35,4]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[14,0,\"middarkgrey table-cell-field\"],[12],[10,\"span\"],[12],[1,[32,1,[\"key\"]]],[13],[13],[2,\"\\n                \"],[10,\"td\"],[15,0,[31,[\"middarkgrey table-cell-data \",[30,[36,0],[[32,1,[\"value\"]],\"empty-cell\"],null]]]],[12],[10,\"span\"],[12],[1,[32,1,[\"value\"]]],[13],[13],[2,\"\\n                \"],[10,\"td\"],[12],[10,\"span\"],[12],[8,\"gh-members-import-mapping-input\",[],[[\"@updateMapping\",\"@mapFrom\",\"@mapTo\",\"@disabled\"],[[32,0,[\"updateMapping\"]],[32,1,[\"key\"]],[32,1,[\"mapTo\"]],[32,2]]],null],[13],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[2,\"            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[14,\"colspan\",\"3\"],[14,0,\"gh-member-import-nodata\"],[12],[10,\"span\"],[12],[2,\"No data found in the uploaded CSV.\"],[13],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"unless\",\"format-number\",\"action\",\"svg-jar\",\"currentlyDisplayedData\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/gh-members-import-table.hbs"
  });

  let MembersFieldMapping = (_dec = Ember._tracked, (_class = class MembersFieldMapping {
    constructor(mapping) {
      _initializerDefineProperty(this, "_mapping", _descriptor, this);

      if (mapping) {
        for (const [key, value] of Object.entries(mapping)) {
          this._mapping[value] = key;
        }
      }
    }

    get(key) {
      return this._mapping[key];
    }

    toJSON() {
      return this._mapping;
    }

    getKeyByValue(searchedValue) {
      for (const [key, value] of Object.entries(this._mapping)) {
        if (value === searchedValue) {
          return key;
        }
      }

      return null;
    }

    updateMapping(from, to) {
      for (const key in this._mapping) {
        if (this.get(key) === to) {
          this._mapping[key] = null;
        }
      }

      this._mapping[from] = to; // trigger an update
      // eslint-disable-next-line no-self-assign

      this._mapping = this._mapping;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "_mapping", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return {};
    }
  })), _class));

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(MembersFieldMapping, true);

  window.__CLASSIC_OWN_CLASSES__.set(MembersFieldMapping, true);

  let GhMembersImportTable = (_dec2 = Ember._tracked, _dec3 = Ember.inject.service, _dec4 = Ember._action, _dec5 = Ember._action, _dec6 = Ember._action, (_class3 = class GhMembersImportTable extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "dataPreviewIndex", _descriptor2, this);

      _initializerDefineProperty(this, "memberImportValidator", _descriptor3, this);

      const mapping = this.memberImportValidator.check(this.args.data);
      this.data = this.args.data;
      this.mapping = new MembersFieldMapping(mapping);
      Ember.run.schedule('afterRender', () => this.args.setMapping(this.mapping));
    }

    get currentlyDisplayedData() {
      let rows = [];

      if (this.data && this.data.length && this.mapping) {
        let currentRecord = this.data[this.dataPreviewIndex];

        for (const [key, value] of Object.entries(currentRecord)) {
          rows.push({
            key: key,
            value: value,
            mapTo: this.mapping.get(key)
          });
        }
      }

      return rows;
    }

    get hasNextRecord() {
      return this.data && !!this.data[this.dataPreviewIndex + 1];
    }

    get hasPrevRecord() {
      return this.data && !!this.data[this.dataPreviewIndex - 1];
    }

    get currentRecord() {
      return this.dataPreviewIndex + 1;
    }

    get allRecords() {
      if (this.data) {
        return this.data;
      } else {
        return 0;
      }
    }

    updateMapping(mapFrom, mapTo) {
      this.mapping.updateMapping(mapFrom, mapTo);
      this.args.setMapping(this.mapping);
    }

    next() {
      if (this.hasNextRecord) {
        this.dataPreviewIndex += 1;
      }
    }

    prev() {
      if (this.hasPrevRecord) {
        this.dataPreviewIndex -= 1;
      }
    }

  }, (_descriptor2 = _applyDecoratedDescriptor(_class3.prototype, "dataPreviewIndex", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class3.prototype, "memberImportValidator", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class3.prototype, "updateMapping", [_dec4], Object.getOwnPropertyDescriptor(_class3.prototype, "updateMapping"), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, "next", [_dec5], Object.getOwnPropertyDescriptor(_class3.prototype, "next"), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, "prev", [_dec6], Object.getOwnPropertyDescriptor(_class3.prototype, "prev"), _class3.prototype)), _class3));
  _exports.default = GhMembersImportTable;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMembersImportTable);
});
;define("ghost-admin/components/gh-members-list-item-column", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if (eq @filterColumn 'label')}}
      <LinkTo @route="member" @model={{@member}} class="gh-list-data wrap middarkgrey f8">
          <span class="gh-members-list-labels">{{labels}}</span>
      </LinkTo>
  
  {{else if (eq @filterColumn 'status')}}
      <LinkTo @route="member" @model={{@member}} class="gh-list-data middarkgrey f8">
          {{#if (not (is-empty @member.status))}}
              <span>{{capitalize @member.status}}</span>
          {{else}}
              <span class="midlightgrey">-</span>
          {{/if}}
      </LinkTo>
  
  {{else if (eq @filterColumn 'email_count')}}
      <LinkTo @route="member" @model={{@member}} class="gh-list-data middarkgrey f8">
          {{#if (not (is-empty @member.emailCount))}}
              <span>{{@member.emailCount}}</span>
          {{else}}
              <span class="midlightgrey">-</span>
          {{/if}}
      </LinkTo>
  
  {{else if (eq @filterColumn 'email_opened_count')}}
      <LinkTo @route="member" @model={{@member}} class="gh-list-data middarkgrey f8">
          {{#if (not (is-empty @member.emailOpenedCount))}}
              <span>{{@member.emailOpenedCount}}</span>
          {{else}}
              <span class="midlightgrey">-</span>
          {{/if}}
      </LinkTo>
  
  {{else if (eq @filterColumn 'subscribed')}}
      <LinkTo @route="member" @model={{@member}} class="gh-list-data middarkgrey f8">
          {{#if (not (is-empty @member.subscribed))}}
              <span>{{if @member.subscribed "Yes" "No"}}</span>
          {{else}}
              <span class="midlightgrey">-</span>
          {{/if}}
      </LinkTo>
  {{else if (eq @filterColumn 'subscriptions.status')}}
      <LinkTo @route="member" @model={{@member}} class="gh-list-data middarkgrey f8">
          {{#if (not (is-empty this.subscriptionStatus))}}
              <span>{{capitalize this.subscriptionStatus}}</span>
          {{else}}
              <span class="midlightgrey">-</span>
          {{/if}}
      </LinkTo>
  {{else if (eq @filterColumn 'subscriptions.plan_interval')}}
      <LinkTo @route="member" @model={{@member}} class="gh-list-data middarkgrey f8">
          {{#if (not (is-empty this.billingPeriod))}}
              <span>{{capitalize this.billingPeriod}}</span>
          {{else}}
              <span class="midlightgrey">-</span>
          {{/if}}
      </LinkTo>
  {{/if}}
  
  */
  {
    "id": "sQCBXkCn",
    "block": "{\"symbols\":[\"@member\",\"@filterColumn\"],\"statements\":[[6,[37,3],[[30,[36,4],[[32,2],\"label\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[8,\"link-to\",[[24,0,\"gh-list-data wrap middarkgrey f8\"]],[[\"@route\",\"@model\"],[\"member\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"span\"],[14,0,\"gh-members-list-labels\"],[12],[1,[34,5]],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,4],[[32,2],\"status\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[8,\"link-to\",[[24,0,\"gh-list-data middarkgrey f8\"]],[[\"@route\",\"@model\"],[\"member\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[30,[36,1],[[32,1,[\"status\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[12],[1,[30,[36,0],[[32,1,[\"status\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"midlightgrey\"],[12],[2,\"-\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,4],[[32,2],\"email_count\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[8,\"link-to\",[[24,0,\"gh-list-data middarkgrey f8\"]],[[\"@route\",\"@model\"],[\"member\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[30,[36,1],[[32,1,[\"emailCount\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[12],[1,[32,1,[\"emailCount\"]]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"midlightgrey\"],[12],[2,\"-\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,4],[[32,2],\"email_opened_count\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[8,\"link-to\",[[24,0,\"gh-list-data middarkgrey f8\"]],[[\"@route\",\"@model\"],[\"member\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[30,[36,1],[[32,1,[\"emailOpenedCount\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[12],[1,[32,1,[\"emailOpenedCount\"]]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"midlightgrey\"],[12],[2,\"-\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,4],[[32,2],\"subscribed\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[8,\"link-to\",[[24,0,\"gh-list-data middarkgrey f8\"]],[[\"@route\",\"@model\"],[\"member\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[30,[36,1],[[32,1,[\"subscribed\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[12],[1,[30,[36,3],[[32,1,[\"subscribed\"]],\"Yes\",\"No\"],null]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"midlightgrey\"],[12],[2,\"-\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,4],[[32,2],\"subscriptions.status\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[8,\"link-to\",[[24,0,\"gh-list-data middarkgrey f8\"]],[[\"@route\",\"@model\"],[\"member\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[30,[36,1],[[32,0,[\"subscriptionStatus\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[12],[1,[30,[36,0],[[32,0,[\"subscriptionStatus\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"midlightgrey\"],[12],[2,\"-\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,4],[[32,2],\"subscriptions.plan_interval\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"link-to\",[[24,0,\"gh-list-data middarkgrey f8\"]],[[\"@route\",\"@model\"],[\"member\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[30,[36,1],[[32,0,[\"billingPeriod\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[12],[1,[30,[36,0],[[32,0,[\"billingPeriod\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"midlightgrey\"],[12],[2,\"-\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"capitalize\",\"is-empty\",\"not\",\"if\",\"eq\",\"labels\"]}",
    "moduleName": "ghost-admin/components/gh-members-list-item-column.hbs"
  });

  class GhMembersListItemColumn extends _component.default {
    constructor() {
      super(...arguments);
    }

    get labels() {
      const labelData = this.args.member.get('labels') || [];
      return labelData.map(label => label.name).join(', ');
    }

    get subscriptionStatus() {
      const subscriptions = this.args.member.get('subscriptions') || [];
      return subscriptions[0]?.status;
    }

    get billingPeriod() {
      const subscriptions = this.args.member.get('subscriptions') || [];
      const billingPeriod = subscriptions[0]?.price?.interval;
      return billingPeriod;
    }

  }

  _exports.default = GhMembersListItemColumn;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(GhMembersListItemColumn, true);

  window.__CLASSIC_OWN_CLASSES__.set(GhMembersListItemColumn, true);

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMembersListItemColumn);
});
;define("ghost-admin/components/gh-members-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <tr data-test-list='members-list-item' data-test-member={{@member.id}}>
      {{#if @member.is_loading}}
          <div class="gh-list-data gh-members-list-basic gh-list-loadingcell">
              <div class="gh-list-loading-title"></div>
              <div class="gh-list-loading-detail"></div>
          </div>
          <div class="gh-list-data"></div>
          <div class="gh-list-data"></div>
          <div class="gh-list-data"></div>
          {{#each @filterColumns as |filterColumn|}}
          <div class="gh-list-data"></div>
          {{/each}}
      {{else}}
          <LinkTo @route="member" @model={{@member}} class="gh-list-data">
              <div class="flex items-center">
                  <GhMemberAvatar @member={{@member}} @containerClass="w9 h9 mr3 flex-shrink-0" />
                  <div class="w-80">
                      <h3 class="ma0 pa0 gh-members-list-name {{if (not @member.name) "gh-members-name-noname"}}">{{or @member.name @member.email}}</h3>
                      {{#if @member.name}}
                          <p class="ma0 pa0 middarkgrey f8 gh-members-list-email">{{@member.email}}</p>
                      {{/if}}
                  </div>
              </div>
          </LinkTo>
  
          {{#if @newsletterEnabled}}
              {{#if (feature "emailAnalytics")}}
                  <LinkTo @route="member" @model={{@member}} class="gh-list-data middarkgrey f8 {{if (not @member.name) "gh-members-list-open-rate-noname"}}">
                      {{#if (not (is-empty @member.emailOpenRate))}}
                          <span>{{@member.emailOpenRate}}%</span>
                      {{else}}
                          <span class="midlightgrey">N/A</span>
                      {{/if}}
                  </LinkTo>
              {{/if}}
          {{/if}}
  
          <LinkTo @route="member" @model={{@member}} class="gh-list-data middarkgrey f8 {{if (not @member.name) "gh-members-geolocation-noname"}}">
              {{#if (and @member.geolocation @member.geolocation.country)}}
                  {{#if (and (eq @member.geolocation.country_code "US") @member.geolocation.region)}}
                      {{@member.geolocation.region}}, US
                  {{else}}
                      {{#if @member.geolocation.country}}
                          {{@member.geolocation.country}}
                      {{else}}
                          <span class="midlightgrey">Unknown</span>
                      {{/if}}
                  {{/if}}
              {{else}}
                  <span class="midlightgrey">Unknown</span>
              {{/if}}
          </LinkTo>
  
          <LinkTo @route="member" @model={{@member}} class="gh-list-data middarkgrey f8">
              {{#if @member.createdAtUTC}}
                  <div>{{moment-format @member.createdAtUTC "D MMM YYYY"}}</div>
                  <div class="midlightgrey gh-members-list-subscribed-moment">{{moment-from-now @member.createdAtUTC}}</div>
              {{/if}}
          </LinkTo>
          {{#each @filterColumns as |filterColumn|}}
              <GhMembersListItemColumn @member={{@member}} @filterColumn={{filterColumn}} />
              {{!-- <LinkTo @route="member" @model={{@member}} class="gh-list-data middarkgrey f8">
                  <span class="midlightgrey">Unknown</span>
              </LinkTo> --}}
          {{/each}}
      {{/if}}
  </tr>
  
  */
  {
    "id": "FaC178Ci",
    "block": "{\"symbols\":[\"filterColumn\",\"filterColumn\",\"@member\",\"@newsletterEnabled\",\"@filterColumns\"],\"statements\":[[10,\"tr\"],[14,\"data-test-list\",\"members-list-item\"],[15,\"data-test-member\",[32,3,[\"id\"]]],[12],[2,\"\\n\"],[6,[37,2],[[32,3,[\"is_loading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"gh-list-data gh-members-list-basic gh-list-loadingcell\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-list-loading-title\"],[12],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-list-loading-detail\"],[12],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[13],[2,\"\\n\"],[6,[37,10],[[30,[36,9],[[30,[36,9],[[32,5]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[13],[2,\"\\n\"]],\"parameters\":[2]}]]]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[8,\"link-to\",[[24,0,\"gh-list-data\"]],[[\"@route\",\"@model\"],[\"member\",[32,3]]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                \"],[8,\"gh-member-avatar\",[],[[\"@member\",\"@containerClass\"],[[32,3],\"w9 h9 mr3 flex-shrink-0\"]],null],[2,\"\\n                \"],[10,\"div\"],[14,0,\"w-80\"],[12],[2,\"\\n                    \"],[10,\"h3\"],[15,0,[31,[\"ma0 pa0 gh-members-list-name \",[30,[36,2],[[30,[36,5],[[32,3,[\"name\"]]],null],\"gh-members-name-noname\"],null]]]],[12],[1,[30,[36,8],[[32,3,[\"name\"]],[32,3,[\"email\"]]],null]],[13],[2,\"\\n\"],[6,[37,2],[[32,3,[\"name\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"p\"],[14,0,\"ma0 pa0 middarkgrey f8 gh-members-list-email\"],[12],[1,[32,3,[\"email\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,2],[[32,4]],null,[[\"default\"],[{\"statements\":[[6,[37,2],[[30,[36,7],[\"emailAnalytics\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"link-to\",[[16,0,[31,[\"gh-list-data middarkgrey f8 \",[30,[36,2],[[30,[36,5],[[32,3,[\"name\"]]],null],\"gh-members-list-open-rate-noname\"],null]]]]],[[\"@route\",\"@model\"],[\"member\",[32,3]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,2],[[30,[36,5],[[30,[36,6],[[32,3,[\"emailOpenRate\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"span\"],[12],[1,[32,3,[\"emailOpenRate\"]]],[2,\"%\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"span\"],[14,0,\"midlightgrey\"],[12],[2,\"N/A\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n        \"],[8,\"link-to\",[[16,0,[31,[\"gh-list-data middarkgrey f8 \",[30,[36,2],[[30,[36,5],[[32,3,[\"name\"]]],null],\"gh-members-geolocation-noname\"],null]]]]],[[\"@route\",\"@model\"],[\"member\",[32,3]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,2],[[30,[36,4],[[32,3,[\"geolocation\"]],[32,3,[\"geolocation\",\"country\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,2],[[30,[36,4],[[30,[36,3],[[32,3,[\"geolocation\",\"country_code\"]],\"US\"],null],[32,3,[\"geolocation\",\"region\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[1,[32,3,[\"geolocation\",\"region\"]]],[2,\", US\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[32,3,[\"geolocation\",\"country\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[1,[32,3,[\"geolocation\",\"country\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"span\"],[14,0,\"midlightgrey\"],[12],[2,\"Unknown\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[10,\"span\"],[14,0,\"midlightgrey\"],[12],[2,\"Unknown\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"]],\"parameters\":[]}]]],[2,\"\\n\\n        \"],[8,\"link-to\",[[24,0,\"gh-list-data middarkgrey f8\"]],[[\"@route\",\"@model\"],[\"member\",[32,3]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,2],[[32,3,[\"createdAtUTC\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[12],[1,[30,[36,0],[[32,3,[\"createdAtUTC\"]],\"D MMM YYYY\"],null]],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"midlightgrey gh-members-list-subscribed-moment\"],[12],[1,[30,[36,1],[[32,3,[\"createdAtUTC\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,10],[[30,[36,9],[[30,[36,9],[[32,5]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[8,\"gh-members-list-item-column\",[],[[\"@member\",\"@filterColumn\"],[[32,3],[32,1]]],null],[2,\"\\n\"]],\"parameters\":[1]}]]]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"moment-format\",\"moment-from-now\",\"if\",\"eq\",\"and\",\"not\",\"is-empty\",\"feature\",\"or\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/gh-members-list-item.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-members-no-members", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="flex flex-column items-stretch">
      {{!-- <p class="">Get started with one of the following options</p> --}}
      <button class="gh-btn gh-btn-green" {{on "click" this.addYourself}}>
          <span>Add yourself as a member to test</span>
      </button>
  
      <div class="flex flex-column items-stretch mt5 pt5">
          <LinkTo @route="member.new" class="gh-btn gh-btn-outline mb3">
              <span>Manually add a member</span>
          </LinkTo>
  
          <LinkTo @route="members.import" class="gh-btn gh-btn-outline">
              <span>Import members from CSV</span>
          </LinkTo>
      </div>
  </div>
  */
  {
    "id": "yWFRuUQK",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"flex flex-column items-stretch\"],[12],[2,\"\\n\"],[2,\"    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green\"],[4,[38,0],[\"click\",[32,0,[\"addYourself\"]]],null],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Add yourself as a member to test\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"flex flex-column items-stretch mt5 pt5\"],[12],[2,\"\\n        \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-outline mb3\"]],[[\"@route\"],[\"member.new\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Manually add a member\"],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n\\n        \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-outline\"]],[[\"@route\"],[\"members.import\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Import members from CSV\"],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\"]}",
    "moduleName": "ghost-admin/components/gh-members-no-members.hbs"
  });

  let GhMembersNoMembersComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._action, _dec5 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class GhMembersNoMembersComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "session", _descriptor, this);

      _initializerDefineProperty(this, "store", _descriptor2, this);

      _initializerDefineProperty(this, "notifications", _descriptor3, this);
    }

    addYourself() {
      return this.addTask.perform();
    }

    *addTask() {
      const user = yield this.session.user;
      const member = this.store.createRecord('member', {
        email: user.get('email'),
        name: user.get('name')
      });

      try {
        yield member.save();

        if (this.args.afterCreate) {
          this.args.afterCreate();
        }

        this.notifications.showNotification('Member added', {
          description: 'You\'ve successfully added yourself as a member.'
        });
        return member;
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'member.save'
          });
        }
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "addYourself", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "addYourself"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "addTask", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "addTask"), _class.prototype)), _class));
  _exports.default = GhMembersNoMembersComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMembersNoMembersComponent);
});
;define("ghost-admin/components/gh-members-payments-setting", ["exports", "ghost-admin/utils/currency", "ember-concurrency"], function (_exports, _currency, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-main-section">
      {{#if this.stripeDirect}}
          <section>
              <div class="flex flex-column flex-row-l items-start justify-between">
                  <div class="w-100 w-50-l">
                      <div class="mb4">
                          <label class="fw6 f8">Stripe Publishable key</label>
                          <GhTextInput
                              @type="password"
                              @value={{readonly this.stripeDirectPublicKey}}
                              @input={{action "setStripeDirectPublicKey"}}
                              @class="mt1 password"
                          />
                      </div>
                      <div class="nudge-top--3">
                          <label class="fw6 f8 mt4">Stripe Secret key</label>
                          <GhTextInput
                              @type="password"
                              @value={{readonly this.stripeDirectSecretKey}}
                              @input={{action "setStripeDirectSecretKey"}}
                              @class="mt1 password"
                          />
                          <a href="https://dashboard.stripe.com/account/apikeys" target="_blank" class="mt1 fw4 f8">
                              Find your Stripe API keys here &raquo;
                          </a>
                      </div>
                  </div>
                  <div class="ml0 ml5-l mt6">
                      <div class="gh-members-stripe-info">
                          <div class="gh-members-stripe-info-header">
                              <h4>How you get paid</h4>
                              {{svg-jar "stripe-verified-partner-badge" class="gh-members-stripe-badge"}}
                          </div>
                          <p class="f8 mt2 mb0">
                              Stripe is our exclusive direct payments partner.<br />
                              Ghost collects <strong>no fees</strong> on any payments! If you don’t have a Stripe account yet, you can <a href="https://stripe.com" target="_blank"  rel="noopener" class="gh-members-stripe-link">sign up here</a>.
                          </p>
                      </div>
                  </div>
              </div>
          </section>
  
          <div class="mb4 mt4 flex justify-end">
              <GhTaskButton @buttonText="Save settings"
                  @task={{this.saveSettings}}
                  @successText="Saved"
                  @runningText="Saving"
                  @class="gh-btn gh-btn-primary gh-btn-icon"
                  data-test-button="save-members-settings"
              />
          </div>
  
      {{else}}
  
          {{#if (and this.stripeConnectAccountId (not this.saveStripeSettings.isRunning))}}
              <div class="gh-stripe-connected-container">
                  {{svg-jar "check-circle-stroke" class="check-circle"}}
                  <h1>You are connected to Stripe</h1>
                  <div class="gh-stripe-connected-info">
                      <p>Connected to <a href="https://dashboard.stripe.com/{{this.stripeConnectAccountId}}" target="_blank">{{this.stripeConnectAccountName}}</a></p>
                      {{#unless this.stripeConnectLivemode}}
                          <div class="gh-members-connect-testmodelabel">Test mode</div>
                      {{/unless}}
  
                      {{#if this.hasActiveStripeSubscriptions}}
                      <span class="gh-stripe-error-hasactivesub">
                          Cannot disconnect while there are members with active Stripe subscriptions.
                      </span>
                      {{/if}}
                  </div>
                  <button type="button" class="gh-btn gh-btn-stripe-disconnect" {{action "openDisconnectStripeModal"}}><span>Disconnect</span></button>
              </div>
          {{else}}
              <div class="flex flex-column flex-row-l items-start justify-between">
                  <div class="w-100 w-50-l">
                      <label class="fw6 f8">Generate secure key</label>
                      <div class="flex items-center mb4 justify-between gh-members-connectbutton-container mt2">
                          <a href="{{if this.stripeConnectTestMode this.testStripeConnectAuthUrl this.liveStripeConnectAuthUrl}}" class="stripe-connect" target="_blank"><span>Connect with Stripe</span></a>
                          <div class="ml2 flex items-center flex-nowrap">
                              <span class="mr2 f8 midgrey nowrap {{if this.stripeConnectTestMode "gh-members-connect-testmodeon"}}">{{if this.stripeConnectTestMode "Using" "Use"}} test mode</span>
                              <div class="for-switch small">
                                  <label class="switch" for="stripe-connect-test-mode" {{action (toggle "stripeConnectTestMode" this) bubbles="false"}}>
                                      <input type="checkbox" class="gh-input" checked={{this.stripeConnectTestMode}} onclick={{action (toggle "stripeConnectTestMode" this)}} data-test-checkbox="stripe-connect-test-mode">
                                      <span class="input-toggle-component mt1"></span>
                                  </label>
                              </div>
                          </div>
                      </div>
                      <div class="nudge-top--3">
                          <GhTextarea
                              @class="gh-members-stripe-connect-token"
                              @placeholder="Paste your secure key here"
                              @input={{action "setStripeConnectIntegrationToken"}}
                          />
                          {{#if this.stripeConnectError}}<p class="mb0 mt2 f8 red">{{this.stripeConnectError}}</p>{{/if}}
                      </div>
                  </div>
                  <div class="mt5 mt5-m mt8-l ml0 ml5-l">
                      <div class="gh-members-stripe-info">
                          <div class="gh-members-stripe-info-header">
                              <h4>Getting paid</h4>
                              {{svg-jar "stripe-verified-partner-badge" class="gh-members-stripe-badge"}}
                          </div>
                          <p class="f8 mt2 mb0">
                              Stripe is our exclusive direct payments partner.<br />
                              Ghost collects <strong>no fees</strong> on any payments! If you don’t have a Stripe account yet, you can <a href="https://stripe.com" target="_blank"  rel="noopener" class="gh-members-stripe-link">sign up here</a>.
                          </p>
                      </div>
                  </div>
              </div>
  
              <div class="gh-members-connect-savecontainer {{if this.settings.stripeConnectIntegrationToken "expanded"}}">
                  <GhTaskButton @buttonText="Save Stripe settings"
                              @task={{this.saveStripeSettings}}
                              @unlinkedTask={{true}}
                              @successText="Saved"
                              @disabled={{is-empty this.settings.stripeConnectIntegrationToken}}
                              @runningText="Saving"
                              @class="gh-btn gh-btn-green gh-btn-icon"
                          />
              </div>
          {{/if}}
      {{/if}}
  </div>
  
  {{#if this.showDisconnectStripeConnectModal}}
      <GhFullscreenModal @modal="disconnect-stripe"
          @model={{hash
              stripeConnectAccountName=this.stripeConnectAccountName
          }}
          @confirm={{action "disconnectStripeConnectIntegration"}}
          @close={{action "closeDisconnectStripeModal"}}
          @modifier="action wide" />
  {{/if}}
  */
  {
    "id": "f1Tv8xwg",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"stripeDirect\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[10,\"section\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"flex flex-column flex-row-l items-start justify-between\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"w-100 w-50-l\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"mb4\"],[12],[2,\"\\n                        \"],[10,\"label\"],[14,0,\"fw6 f8\"],[12],[2,\"Stripe Publishable key\"],[13],[2,\"\\n                        \"],[8,\"gh-text-input\",[],[[\"@type\",\"@value\",\"@input\",\"@class\"],[\"password\",[30,[36,9],[[32,0,[\"stripeDirectPublicKey\"]]],null],[30,[36,1],[[32,0],\"setStripeDirectPublicKey\"],null],\"mt1 password\"]],null],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"nudge-top--3\"],[12],[2,\"\\n                        \"],[10,\"label\"],[14,0,\"fw6 f8 mt4\"],[12],[2,\"Stripe Secret key\"],[13],[2,\"\\n                        \"],[8,\"gh-text-input\",[],[[\"@type\",\"@value\",\"@input\",\"@class\"],[\"password\",[30,[36,9],[[32,0,[\"stripeDirectSecretKey\"]]],null],[30,[36,1],[[32,0],\"setStripeDirectSecretKey\"],null],\"mt1 password\"]],null],[2,\"\\n                        \"],[10,\"a\"],[14,6,\"https://dashboard.stripe.com/account/apikeys\"],[14,\"target\",\"_blank\"],[14,0,\"mt1 fw4 f8\"],[12],[2,\"\\n                            Find your Stripe API keys here »\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"ml0 ml5-l mt6\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-members-stripe-info\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-members-stripe-info-header\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[12],[2,\"How you get paid\"],[13],[2,\"\\n                            \"],[1,[30,[36,4],[\"stripe-verified-partner-badge\"],[[\"class\"],[\"gh-members-stripe-badge\"]]]],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"f8 mt2 mb0\"],[12],[2,\"\\n                            Stripe is our exclusive direct payments partner.\"],[10,\"br\"],[12],[13],[2,\"\\n                            Ghost collects \"],[10,\"strong\"],[12],[2,\"no fees\"],[13],[2,\" on any payments! If you don’t have a Stripe account yet, you can \"],[10,\"a\"],[14,6,\"https://stripe.com\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[14,0,\"gh-members-stripe-link\"],[12],[2,\"sign up here\"],[13],[2,\".\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"mb4 mt4 flex justify-end\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-members-settings\"]],[[\"@buttonText\",\"@task\",\"@successText\",\"@runningText\",\"@class\"],[\"Save settings\",[32,0,[\"saveSettings\"]],\"Saved\",\"Saving\",\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"\\n\"],[6,[37,2],[[30,[36,8],[[32,0,[\"stripeConnectAccountId\"]],[30,[36,7],[[32,0,[\"saveStripeSettings\",\"isRunning\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-stripe-connected-container\"],[12],[2,\"\\n                \"],[1,[30,[36,4],[\"check-circle-stroke\"],[[\"class\"],[\"check-circle\"]]]],[2,\"\\n                \"],[10,\"h1\"],[12],[2,\"You are connected to Stripe\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-stripe-connected-info\"],[12],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Connected to \"],[10,\"a\"],[15,6,[31,[\"https://dashboard.stripe.com/\",[32,0,[\"stripeConnectAccountId\"]]]]],[14,\"target\",\"_blank\"],[12],[1,[32,0,[\"stripeConnectAccountName\"]]],[13],[13],[2,\"\\n\"],[6,[37,6],[[32,0,[\"stripeConnectLivemode\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-members-connect-testmodelabel\"],[12],[2,\"Test mode\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,0,[\"hasActiveStripeSubscriptions\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"span\"],[14,0,\"gh-stripe-error-hasactivesub\"],[12],[2,\"\\n                        Cannot disconnect while there are members with active Stripe subscriptions.\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n                \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-stripe-disconnect\"],[24,4,\"button\"],[4,[38,1],[[32,0],\"openDisconnectStripeModal\"],null],[12],[10,\"span\"],[12],[2,\"Disconnect\"],[13],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"flex flex-column flex-row-l items-start justify-between\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"w-100 w-50-l\"],[12],[2,\"\\n                    \"],[10,\"label\"],[14,0,\"fw6 f8\"],[12],[2,\"Generate secure key\"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"flex items-center mb4 justify-between gh-members-connectbutton-container mt2\"],[12],[2,\"\\n                        \"],[10,\"a\"],[15,6,[31,[[30,[36,2],[[32,0,[\"stripeConnectTestMode\"]],[32,0,[\"testStripeConnectAuthUrl\"]],[32,0,[\"liveStripeConnectAuthUrl\"]]],null]]]],[14,0,\"stripe-connect\"],[14,\"target\",\"_blank\"],[12],[10,\"span\"],[12],[2,\"Connect with Stripe\"],[13],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"ml2 flex items-center flex-nowrap\"],[12],[2,\"\\n                            \"],[10,\"span\"],[15,0,[31,[\"mr2 f8 midgrey nowrap \",[30,[36,2],[[32,0,[\"stripeConnectTestMode\"]],\"gh-members-connect-testmodeon\"],null]]]],[12],[1,[30,[36,2],[[32,0,[\"stripeConnectTestMode\"]],\"Using\",\"Use\"],null]],[2,\" test mode\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"for-switch small\"],[12],[2,\"\\n                                \"],[11,\"label\"],[24,0,\"switch\"],[24,\"for\",\"stripe-connect-test-mode\"],[4,[38,1],[[32,0],[30,[36,3],[\"stripeConnectTestMode\",[32,0]],null]],[[\"bubbles\"],[\"false\"]]],[12],[2,\"\\n                                    \"],[10,\"input\"],[14,0,\"gh-input\"],[15,\"checked\",[32,0,[\"stripeConnectTestMode\"]]],[15,\"onclick\",[30,[36,1],[[32,0],[30,[36,3],[\"stripeConnectTestMode\",[32,0]],null]],null]],[14,\"data-test-checkbox\",\"stripe-connect-test-mode\"],[14,4,\"checkbox\"],[12],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"input-toggle-component mt1\"],[12],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"nudge-top--3\"],[12],[2,\"\\n                        \"],[8,\"gh-textarea\",[],[[\"@class\",\"@placeholder\",\"@input\"],[\"gh-members-stripe-connect-token\",\"Paste your secure key here\",[30,[36,1],[[32,0],\"setStripeConnectIntegrationToken\"],null]]],null],[2,\"\\n                        \"],[6,[37,2],[[32,0,[\"stripeConnectError\"]]],null,[[\"default\"],[{\"statements\":[[10,\"p\"],[14,0,\"mb0 mt2 f8 red\"],[12],[1,[32,0,[\"stripeConnectError\"]]],[13]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"mt5 mt5-m mt8-l ml0 ml5-l\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-members-stripe-info\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-members-stripe-info-header\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[12],[2,\"Getting paid\"],[13],[2,\"\\n                            \"],[1,[30,[36,4],[\"stripe-verified-partner-badge\"],[[\"class\"],[\"gh-members-stripe-badge\"]]]],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"f8 mt2 mb0\"],[12],[2,\"\\n                            Stripe is our exclusive direct payments partner.\"],[10,\"br\"],[12],[13],[2,\"\\n                            Ghost collects \"],[10,\"strong\"],[12],[2,\"no fees\"],[13],[2,\" on any payments! If you don’t have a Stripe account yet, you can \"],[10,\"a\"],[14,6,\"https://stripe.com\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[14,0,\"gh-members-stripe-link\"],[12],[2,\"sign up here\"],[13],[2,\".\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[15,0,[31,[\"gh-members-connect-savecontainer \",[30,[36,2],[[32,0,[\"settings\",\"stripeConnectIntegrationToken\"]],\"expanded\"],null]]]],[12],[2,\"\\n                \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@unlinkedTask\",\"@successText\",\"@disabled\",\"@runningText\",\"@class\"],[\"Save Stripe settings\",[32,0,[\"saveStripeSettings\"]],true,\"Saved\",[30,[36,5],[[32,0,[\"settings\",\"stripeConnectIntegrationToken\"]]],null],\"Saving\",\"gh-btn gh-btn-green gh-btn-icon\"]],null],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[13],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"showDisconnectStripeConnectModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"disconnect-stripe\",[30,[36,0],null,[[\"stripeConnectAccountName\"],[[32,0,[\"stripeConnectAccountName\"]]]]],[30,[36,1],[[32,0],\"disconnectStripeConnectIntegration\"],null],[30,[36,1],[[32,0],\"closeDisconnectStripeModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"hash\",\"action\",\"if\",\"toggle\",\"svg-jar\",\"is-empty\",\"unless\",\"not\",\"and\",\"readonly\"]}",
    "moduleName": "ghost-admin/components/gh-members-payments-setting.hbs"
  });

  const RETRY_PRODUCT_SAVE_POLL_LENGTH = 1000;
  const RETRY_PRODUCT_SAVE_MAX_POLL = 15 * RETRY_PRODUCT_SAVE_POLL_LENGTH;

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),
    settings: Ember.inject.service(),
    store: Ember.inject.service(),
    topCurrencies: null,
    currencies: null,
    allCurrencies: null,
    stripePlanInvalidAmount: false,
    _scratchStripeYearlyAmount: null,
    _scratchStripeMonthlyAmount: null,

    // passed in actions
    setStripeConnectIntegrationTokenSetting() {},

    stripeDirect: Ember.computed.reads('config.stripeDirect'),

    /** OLD **/
    stripeDirectPublicKey: Ember.computed.reads('settings.stripePublishableKey'),
    stripeDirectSecretKey: Ember.computed.reads('settings.stripeSecretKey'),
    stripeConnectAccountId: Ember.computed.reads('settings.stripeConnectAccountId'),
    stripeConnectAccountName: Ember.computed.reads('settings.stripeConnectDisplayName'),
    stripeConnectLivemode: Ember.computed.reads('settings.stripeConnectLivemode'),
    selectedCurrency: Ember.computed('stripePlans.monthly.currency', function () {
      return this.currencies.findBy('value', this.get('stripePlans.monthly.currency')) || this.topCurrencies.findBy('value', this.get('stripePlans.monthly.currency'));
    }),
    stripePlans: Ember.computed('settings.stripePlans', function () {
      const plans = this.settings.get('stripePlans');
      const monthly = plans.find(plan => plan.interval === 'month');
      const yearly = plans.find(plan => plan.interval === 'year' && plan.name !== 'Complimentary');
      return {
        monthly: {
          amount: parseInt(monthly.amount) / 100 || 5,
          currency: monthly.currency
        },
        yearly: {
          amount: parseInt(yearly.amount) / 100 || 50,
          currency: yearly.currency
        }
      };
    }),

    init() {
      this._super(...arguments);

      const noOfTopCurrencies = 5;
      this.set('topCurrencies', _currency.currencies.slice(0, noOfTopCurrencies).map(currency => {
        return {
          value: currency.isoCode.toLowerCase(),
          label: `${currency.isoCode} - ${currency.name}`,
          isoCode: currency.isoCode
        };
      }));
      this.set('currencies', _currency.currencies.slice(noOfTopCurrencies, _currency.currencies.length).map(currency => {
        return {
          value: currency.isoCode.toLowerCase(),
          label: `${currency.isoCode} - ${currency.name}`,
          isoCode: currency.isoCode
        };
      }));
      this.set('allCurrencies', [{
        groupName: '—',
        options: this.topCurrencies
      }, {
        groupName: '—',
        options: this.currencies
      }]);

      if (this.stripeConnectAccountId) {
        this.set('membersStripeOpen', false);
      } else {
        this.set('membersStripeOpen', true);
      }
    },

    actions: {
      setStripeDirectPublicKey(event) {
        this.set('settings.stripeProductName', this.get('settings.title'));
        this.set('settings.stripePublishableKey', event.target.value);
      },

      setStripeDirectSecretKey(event) {
        this.set('settings.stripeProductName', this.get('settings.title'));
        this.set('settings.stripeSecretKey', event.target.value);
      },

      validateStripePlans() {
        this.validateStripePlans();
      },

      setStripePlansCurrency(event) {
        const newCurrency = event.value;
        const updatedPlans = this.get('settings.stripePlans').map(plan => {
          if (plan.name !== 'Complimentary') {
            return Object.assign({}, plan, {
              currency: newCurrency
            });
          }

          return plan;
        });
        const currentComplimentaryPlan = updatedPlans.find(plan => {
          return plan.name === 'Complimentary' && plan.currency === event.value;
        });

        if (!currentComplimentaryPlan) {
          updatedPlans.push({
            name: 'Complimentary',
            currency: event.value,
            interval: 'year',
            amount: 0
          });
        }

        this.set('settings.stripePlans', updatedPlans);
        this.set('_scratchStripeYearlyAmount', null);
        this.set('_scratchStripeMonthlyAmount', null);
        this.validateStripePlans();
      },

      setStripeConnectIntegrationToken(event) {
        this.set('settings.stripeProductName', this.get('settings.title'));
        this.setStripeConnectIntegrationTokenSetting(event.target.value);
      },

      openDisconnectStripeModal() {
        this.openDisconnectStripeConnectModal.perform();
      },

      closeDisconnectStripeModal() {
        this.set('showDisconnectStripeConnectModal', false);
      },

      disconnectStripeConnectIntegration() {
        this.disconnectStripeConnectIntegration.perform();
      },

      openStripeSettings() {
        this.set('membersStripeOpen', true);
      }

    },

    validateStripePlans() {
      this.get('settings.errors').remove('stripePlans');
      this.get('settings.hasValidated').removeObject('stripePlans');

      if (this._scratchStripeYearlyAmount === null) {
        this._scratchStripeYearlyAmount = this.stripePlans.yearly.amount;
      }

      if (this._scratchStripeMonthlyAmount === null) {
        this._scratchStripeMonthlyAmount = this.stripePlans.monthly.amount;
      }

      try {
        const selectedCurrency = this.selectedCurrency;
        const yearlyAmount = parseInt(this._scratchStripeYearlyAmount);
        const monthlyAmount = parseInt(this._scratchStripeMonthlyAmount);

        if (!yearlyAmount || yearlyAmount < 1 || !monthlyAmount || monthlyAmount < 1) {
          const minimum = Intl.NumberFormat(this.settings.get('lang'), {
            currency: selectedCurrency.isoCode,
            style: 'currency'
          }).format(1);
          throw new TypeError(`Subscription amount must be at least ${minimum}`);
        }

        const updatedPlans = this.get('settings.stripePlans').map(plan => {
          if (plan.name !== 'Complimentary') {
            let newAmount;

            if (plan.interval === 'year') {
              newAmount = yearlyAmount * 100;
            } else if (plan.interval === 'month') {
              newAmount = monthlyAmount * 100;
            }

            return Object.assign({}, plan, {
              amount: newAmount
            });
          }

          return plan;
        });
        this.set('settings.stripePlans', updatedPlans);
      } catch (err) {
        this.get('settings.errors').add('stripePlans', err.message);
      } finally {
        this.get('settings.hasValidated').pushObject('stripePlans');
      }
    },

    openDisconnectStripeConnectModal: (0, _emberConcurrency.task)(function* () {
      this.set('hasActiveStripeSubscriptions', false);

      if (!this.stripeConnectAccountId) {
        return;
      }

      const url = this.get('ghostPaths.url').api('/members/hasActiveStripeSubscriptions');
      const response = yield this.ajax.request(url);

      if (response.hasActiveStripeSubscriptions) {
        this.set('hasActiveStripeSubscriptions', true);
        return;
      }

      this.set('showDisconnectStripeConnectModal', true);
    }).drop(),
    disconnectStripeConnectIntegration: (0, _emberConcurrency.task)(function* () {
      this.set('disconnectStripeError', false);
      const url = this.get('ghostPaths.url').api('/settings/stripe/connect');
      yield this.ajax.delete(url);
      yield this.settings.reload();
      this.onDisconnected?.();
    }),

    calculateDiscount(monthly, yearly) {
      if (isNaN(monthly) || isNaN(yearly)) {
        return 0;
      }

      return monthly ? 100 - Math.floor(yearly / 12 * 100 / monthly) : 0;
    },

    getActivePrice(prices, interval, amount, currency) {
      return prices.find(price => {
        return price.active && price.amount === amount && price.type === 'recurring' && price.interval === interval && price.currency.toLowerCase() === currency.toLowerCase();
      });
    },

    saveProduct: (0, _emberConcurrency.task)(function* () {
      const products = yield this.store.query('product', {
        filter: 'type:paid',
        include: 'monthly_price, yearly_price'
      });
      this.product = products.firstObject;

      if (this.product) {
        const yearlyDiscount = this.calculateDiscount(5, 50);
        this.product.set('monthlyPrice', {
          nickname: 'Monthly',
          amount: 500,
          active: 1,
          description: 'Full access',
          currency: 'usd',
          interval: 'month',
          type: 'recurring'
        });
        this.product.set('yearlyPrice', {
          nickname: 'Yearly',
          amount: 5000,
          active: 1,
          currency: 'usd',
          description: yearlyDiscount > 0 ? `${yearlyDiscount}% discount` : 'Full access',
          interval: 'year',
          type: 'recurring'
        });
        let pollTimeout = 0;
        /** To allow Stripe config to be ready in backend, we poll the save product request */

        while (pollTimeout < RETRY_PRODUCT_SAVE_MAX_POLL) {
          yield (0, _emberConcurrency.timeout)(RETRY_PRODUCT_SAVE_POLL_LENGTH);

          try {
            const updatedProduct = yield this.product.save();
            return updatedProduct;
          } catch (error) {
            if (error.payload?.errors && error.payload.errors[0].code === 'STRIPE_NOT_CONFIGURED') {
              pollTimeout += RETRY_PRODUCT_SAVE_POLL_LENGTH; // no-op: will try saving again as stripe is not ready

              continue;
            } else {
              throw error;
            }
          }
        }
      }

      return this.product;
    }),
    saveStripeSettings: (0, _emberConcurrency.task)(function* () {
      this.set('stripeConnectError', null);
      this.set('stripeConnectSuccess', null);

      if (this.get('settings.stripeConnectIntegrationToken')) {
        try {
          let response = yield this.settings.save();
          const product = yield this.saveProduct.perform();
          this.settings.set('portalPlans', ['free', 'monthly', 'yearly']);
          const existingPortalProducts = this.settings.get('portalProducts');

          if (!existingPortalProducts?.length) {
            this.settings.set('portalProducts', [product.id]);
          }

          response = yield this.settings.save();
          this.set('membersStripeOpen', false);
          this.set('stripeConnectSuccess', true);
          this.onConnected?.();
          return response;
        } catch (error) {
          if (error.payload && error.payload.errors) {
            this.set('stripeConnectError', 'Invalid secure key');
            return false;
          }

          throw error;
        }
      } else {
        this.set('stripeConnectError', 'Please enter a secure key');
      }
    }).drop(),
    saveSettings: (0, _emberConcurrency.task)(function* () {
      return yield this.settings.save();
    }).drop(),

    get liveStripeConnectAuthUrl() {
      return this.ghostPaths.url.api('members/stripe_connect') + '?mode=live';
    },

    get testStripeConnectAuthUrl() {
      return this.ghostPaths.url.api('members/stripe_connect') + '?mode=test';
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-members-recipient-select", ["exports", "@glimmer/component", "ghost-admin/utils/flatten-grouped-options", "ember-concurrency-decorators"], function (_exports, _component, _flattenGroupedOptions, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-publishmenu-send-to-option">
      <p>Free members <span class="gh-publishmenu-emailcount">{{this.freeMemberCountLabel}}</span></p>
      <div class="for-switch x-small {{if @disabled "disabled"}}" {{on "click" (fn this.toggleFilter "status:free")}}>
          <label class="switch" for="send-email-to-free">
              <input
                  id="send-email-to-free"
                  type="checkbox"
                  class="gh-input post-settings-featured"
                  checked={{this.isFreeChecked}}
                  disabled={{@disabled}}
                  data-test-checkbox="free-members"
              >
              <span class="input-toggle-component"></span>
          </label>
      </div>
  </div>
  {{#if this.isPaidAvailable}}
      <div class="gh-publishmenu-send-to-option">
          <p>Paid members <span class="gh-publishmenu-emailcount">{{this.paidMemberCountLabel}}</span></p>
          <div class="for-switch x-small {{if @disabled "disabled"}}" {{on "click" (fn this.toggleFilter "status:-free")}}>
              <label class="switch" for="send-email-to-paid">
                  <input
                      id="send-email-to-paid"
                      type="checkbox"
                      class="gh-input post-settings-featured"
                      checked={{this.isPaidChecked}}
                      disabled={{@disabled}}
                      data-test-checkbox="paid-members"
                  >
                  <span class="input-toggle-component"></span>
              </label>
          </div>
      </div>
  {{/if}}
  {{#if this.specificOptions}}
      <div class="gh-publishmenu-send-to-option">
          <p>Specific people</p>
          <div class="for-switch x-small {{if @disabled "disabled"}}" {{on "click" this.toggleSpecificFilter}}>
              <label class="switch" for="send-email-to-paid">
                  <input
                      id="send-email-to-paid"
                      type="checkbox"
                      class="gh-input post-settings-featured"
                      checked={{this.isSpecificChecked}}
                      disabled={{@disabled}}
                      {{on "click" this.toggleSpecificFilter}}
                      data-test-checkbox="paid-members"
                  >
                  <span class="input-toggle-component"></span>
              </label>
          </div>
      </div>
      {{#if this.isSpecificChecked}}
          <GhTokenInput
              @class="select-members select-members-recipient"
              @options={{this.specificOptions}}
              @selected={{this.selectedSpecificOptions}}
              @disabled={{@disabled}}
              @searchMessage="All labels selected"
              @optionsComponent="power-select/options"
              @allowCreation={{false}}
              @renderInPlace={{true}}
              @onChange={{this.selectSpecificOptions}}
              as |option|
          >
              {{option.name}}
          </GhTokenInput>
      {{/if}}
  {{/if}}
  
  */
  {
    "id": "1q+lH44L",
    "block": "{\"symbols\":[\"option\",\"@disabled\"],\"statements\":[[10,\"div\"],[14,0,\"gh-publishmenu-send-to-option\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"Free members \"],[10,\"span\"],[14,0,\"gh-publishmenu-emailcount\"],[12],[1,[32,0,[\"freeMemberCountLabel\"]]],[13],[13],[2,\"\\n    \"],[11,\"div\"],[16,0,[31,[\"for-switch x-small \",[30,[36,0],[[32,2],\"disabled\"],null]]]],[4,[38,1],[\"click\",[30,[36,2],[[32,0,[\"toggleFilter\"]],\"status:free\"],null]],null],[12],[2,\"\\n        \"],[10,\"label\"],[14,0,\"switch\"],[14,\"for\",\"send-email-to-free\"],[12],[2,\"\\n            \"],[10,\"input\"],[14,1,\"send-email-to-free\"],[14,0,\"gh-input post-settings-featured\"],[15,\"checked\",[32,0,[\"isFreeChecked\"]]],[15,\"disabled\",[32,2]],[14,\"data-test-checkbox\",\"free-members\"],[14,4,\"checkbox\"],[12],[13],[2,\"\\n            \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[6,[37,0],[[32,0,[\"isPaidAvailable\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"gh-publishmenu-send-to-option\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"Paid members \"],[10,\"span\"],[14,0,\"gh-publishmenu-emailcount\"],[12],[1,[32,0,[\"paidMemberCountLabel\"]]],[13],[13],[2,\"\\n        \"],[11,\"div\"],[16,0,[31,[\"for-switch x-small \",[30,[36,0],[[32,2],\"disabled\"],null]]]],[4,[38,1],[\"click\",[30,[36,2],[[32,0,[\"toggleFilter\"]],\"status:-free\"],null]],null],[12],[2,\"\\n            \"],[10,\"label\"],[14,0,\"switch\"],[14,\"for\",\"send-email-to-paid\"],[12],[2,\"\\n                \"],[10,\"input\"],[14,1,\"send-email-to-paid\"],[14,0,\"gh-input post-settings-featured\"],[15,\"checked\",[32,0,[\"isPaidChecked\"]]],[15,\"disabled\",[32,2]],[14,\"data-test-checkbox\",\"paid-members\"],[14,4,\"checkbox\"],[12],[13],[2,\"\\n                \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,0],[[32,0,[\"specificOptions\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"gh-publishmenu-send-to-option\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"Specific people\"],[13],[2,\"\\n        \"],[11,\"div\"],[16,0,[31,[\"for-switch x-small \",[30,[36,0],[[32,2],\"disabled\"],null]]]],[4,[38,1],[\"click\",[32,0,[\"toggleSpecificFilter\"]]],null],[12],[2,\"\\n            \"],[10,\"label\"],[14,0,\"switch\"],[14,\"for\",\"send-email-to-paid\"],[12],[2,\"\\n                \"],[11,\"input\"],[24,1,\"send-email-to-paid\"],[24,0,\"gh-input post-settings-featured\"],[16,\"checked\",[32,0,[\"isSpecificChecked\"]]],[16,\"disabled\",[32,2]],[24,\"data-test-checkbox\",\"paid-members\"],[24,4,\"checkbox\"],[4,[38,1],[\"click\",[32,0,[\"toggleSpecificFilter\"]]],null],[12],[13],[2,\"\\n                \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[6,[37,0],[[32,0,[\"isSpecificChecked\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-token-input\",[],[[\"@class\",\"@options\",\"@selected\",\"@disabled\",\"@searchMessage\",\"@optionsComponent\",\"@allowCreation\",\"@renderInPlace\",\"@onChange\"],[\"select-members select-members-recipient\",[32,0,[\"specificOptions\"]],[32,0,[\"selectedSpecificOptions\"]],[32,2],\"All labels selected\",\"power-select/options\",false,true,[32,0,[\"selectSpecificOptions\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[1,[32,1,[\"name\"]]],[2,\"\\n        \"]],\"parameters\":[1]}]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"if\",\"on\",\"fn\"]}",
    "moduleName": "ghost-admin/components/gh-members-recipient-select.hbs"
  });

  const BASE_FILTERS = ['status:free', 'status:-free'];
  let GhMembersRecipientSelect = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._action, _dec10 = Ember._action, _dec11 = Ember._action, (_class = class GhMembersRecipientSelect extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "membersUtils", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "store", _descriptor3, this);

      _initializerDefineProperty(this, "feature", _descriptor4, this);

      _initializerDefineProperty(this, "forceSpecificChecked", _descriptor5, this);

      _initializerDefineProperty(this, "specificOptions", _descriptor6, this);

      _initializerDefineProperty(this, "freeMemberCount", _descriptor7, this);

      _initializerDefineProperty(this, "paidMemberCount", _descriptor8, this);

      this.fetchSpecificOptionsTask.perform();
      this.fetchMemberCountsTask.perform();
    }

    get baseFilters() {
      const filterItems = (this.args.filter || '').split(',');
      const filterItemsArray = filterItems.filter(item => BASE_FILTERS.includes(item?.trim()));
      return new Set(filterItemsArray);
    }

    get isFreeChecked() {
      return this.baseFilters.has('status:free');
    }

    get isPaidChecked() {
      return this.baseFilters.has('status:-free');
    }

    get isPaidAvailable() {
      return this.membersUtils.isStripeEnabled;
    }

    get specificFilters() {
      const filterItems = (this.args.filter || '').split(',');
      const filterItemsArray = filterItems.reject(item => Ember.isBlank(item) || BASE_FILTERS.includes(item?.trim()));
      return new Set(filterItemsArray);
    }

    get isSpecificChecked() {
      return this.forceSpecificChecked || this.specificFilters.size > 0;
    }

    get selectedSpecificOptions() {
      return (0, _flattenGroupedOptions.default)(this.specificOptions).filter(o => this.specificFilters.has(o.segment));
    }

    get freeMemberCountLabel() {
      if (this.freeMemberCount !== undefined) {
        return `(${this.freeMemberCount})`;
      }

      return '';
    }

    get paidMemberCountLabel() {
      if (this.paidMemberCount !== undefined) {
        return `(${this.paidMemberCount})`;
      }

      return '';
    }

    toggleFilter(filter, event) {
      event?.preventDefault();

      if (this.args.disabled) {
        return;
      }

      const newBaseFilters = this.baseFilters;
      newBaseFilters.has(filter) ? newBaseFilters.delete(filter) : newBaseFilters.add(filter);
      this.updateFilter({
        newBaseFilters
      });
    }

    toggleSpecificFilter(event) {
      event?.preventDefault();

      if (this.args.disabled) {
        return;
      } // on->off, forced with an empty filter


      if (this.forceSpecificChecked && this.specificFilters.size === 0) {
        this.forceSpecificChecked = false;
        return;
      }

      this.forceSpecificChecked = false; // on->off, store current filter for re-use when toggled back on

      if (this.isSpecificChecked) {
        this._previousSpecificFilters = this.specificFilters;
        this.updateFilter({
          newSpecificFilters: new Set()
        });
        return;
      } // off->on, re-use stored filter


      if (this._previousSpecificFilters) {
        this.updateFilter({
          newSpecificFilters: this._previousSpecificFilters
        });
        return;
      } // off->on, display the filter selection even though the actual filter is empty


      this.forceSpecificChecked = true;
    }

    selectSpecificOptions(selectedOptions) {
      if (this.args.disabled) {
        return;
      }

      const newSpecificFilters = new Set(selectedOptions.map(o => o.segment));
      this.updateFilter({
        newSpecificFilters
      });
    }

    updateFilter(_ref2) {
      let {
        newBaseFilters,
        newSpecificFilters
      } = _ref2;
      const selectedFilters = new Set([...(newBaseFilters || this.baseFilters), ...(newSpecificFilters || this.specificFilters)]);

      if (!this.isPaidAvailable) {
        selectedFilters.delete('status:-free');
      }

      const newFilter = Array.from(selectedFilters).join(',') || null;
      this.args.onChange?.(newFilter);
    }

    *fetchSpecificOptionsTask() {
      const options = []; // fetch all labels w̶i̶t̶h̶ c̶o̶u̶n̶t̶s̶
      // TODO: add `include: 'count.members` to query once API is fixed

      const labels = yield this.store.query('label', {
        limit: 'all'
      });

      if (labels.length > 0) {
        const labelsGroup = {
          groupName: 'Labels',
          options: []
        };
        labels.forEach(label => {
          labelsGroup.options.push({
            name: label.name,
            segment: `label:${label.slug}`,
            count: label.count?.members,
            class: 'segment-label'
          });
        });
        options.push(labelsGroup);
      }

      if (this.feature.get('multipleProducts')) {
        // fetch all products w̶i̶t̶h̶ c̶o̶u̶n̶t̶s̶
        // TODO: add `include: 'count.members` to query once API supports
        const products = yield this.store.query('product', {
          filter: 'type:paid',
          limit: 'all'
        });

        if (products.length > 1) {
          const productsGroup = {
            groupName: 'Tiers',
            options: []
          };
          products.forEach(product => {
            productsGroup.options.push({
              name: product.name,
              segment: `product:${product.slug}`,
              count: product.count?.members,
              class: 'segment-product'
            });
          });
          options.push(productsGroup);
        }
      }

      this.specificOptions = options;
    }

    *fetchMemberCountsTask() {
      const user = yield this.session.user;

      if (!user.isAdmin) {
        return;
      }

      yield Ember.RSVP.Promise.all([this.store.query('member', {
        filter: 'subscribed:true+status:free',
        limit: 1
      }).then(res => {
        this.freeMemberCount = res.meta.pagination.total;
      }), this.store.query('member', {
        filter: 'subscribed:true+status:-free',
        limit: 1
      }).then(res => {
        this.paidMemberCount = res.meta.pagination.total;
      })]);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "membersUtils", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "forceSpecificChecked", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "specificOptions", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "freeMemberCount", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "paidMemberCount", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "toggleFilter", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "toggleFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleSpecificFilter", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "toggleSpecificFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "selectSpecificOptions", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "selectSpecificOptions"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchSpecificOptionsTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "fetchSpecificOptionsTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchMemberCountsTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "fetchMemberCountsTask"), _class.prototype)), _class));
  _exports.default = GhMembersRecipientSelect;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMembersRecipientSelect);
});
;define("ghost-admin/components/gh-members-segment-count", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if this.session.user.isAdmin}}
  <span
      class="segment-totals"
      {{did-insert (perform this.fetchTotalsTask)}}
      {{did-update (perform this.fetchSegmentTotalTask) @segment}}
  >
      <strong>{{format-number this.segmentTotal}}</strong> {{gh-pluralize this.segmentTotal "member" without-count=true}}
  </span>
  {{/if}}
  */
  {
    "id": "/enyiVhR",
    "block": "{\"symbols\":[\"@segment\"],\"statements\":[[6,[37,5],[[32,0,[\"session\",\"user\",\"isAdmin\"]]],null,[[\"default\"],[{\"statements\":[[11,\"span\"],[24,0,\"segment-totals\"],[4,[38,1],[[30,[36,0],[[32,0,[\"fetchTotalsTask\"]]],null]],null],[4,[38,2],[[30,[36,0],[[32,0,[\"fetchSegmentTotalTask\"]]],null],[32,1]],null],[12],[2,\"\\n    \"],[10,\"strong\"],[12],[1,[30,[36,3],[[32,0,[\"segmentTotal\"]]],null]],[13],[2,\" \"],[1,[30,[36,4],[[32,0,[\"segmentTotal\"]],\"member\"],[[\"without-count\"],[true]]]],[2,\"\\n\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"perform\",\"did-insert\",\"did-update\",\"format-number\",\"gh-pluralize\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-members-segment-count.hbs"
  });

  let GhMembersSegmentCountComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._tracked, _dec4 = Ember._tracked, _dec5 = (0, _emberConcurrencyDecorators.task)({
    group: 'fetchTasks'
  }), _dec6 = (0, _emberConcurrencyDecorators.task)({
    group: 'fetchTasks'
  }), (_class = class GhMembersSegmentCountComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "store", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "total", _descriptor3, this);

      _initializerDefineProperty(this, "segmentTotal", _descriptor4, this);

      _initializerDefineProperty(this, "fetchTasks", _descriptor5, this);
    }

    *fetchTotalsTask() {
      this.fetchSegmentTotalTask.perform();
      const filter = this.args.enforcedFilter || undefined;
      const members = yield this.store.query('member', {
        limit: 1,
        filter
      });
      this.total = members.meta.pagination.total;
    }

    *fetchSegmentTotalTask() {
      if (!this.args.segment) {
        return this.segmentTotal = 0;
      }

      let filter;

      if (this.args.enforcedFilter) {
        filter = `${this.args.enforcedFilter}+(${this.args.segment})`;
      } else {
        filter = this.args.segment;
      }

      const members = yield this.store.query('member', {
        limit: 1,
        filter
      });
      this.segmentTotal = members.meta.pagination.total;
      this.args.onSegmentCountChange?.(this.segmentTotal);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "total", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "segmentTotal", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "fetchTasks", [_emberConcurrencyDecorators.taskGroup], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "fetchTotalsTask", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "fetchTotalsTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchSegmentTotalTask", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "fetchSegmentTotalTask"), _class.prototype)), _class));
  _exports.default = GhMembersSegmentCountComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMembersSegmentCountComponent);
});
;define("ghost-admin/components/gh-members-segment-select", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <GhTokenInput
      @options={{this.options}}
      @selected={{this.selectedOptions}}
      @disabled={{or @disabled this.fetchOptionsTask.isRunning}}
      @optionsComponent="power-select/options"
      @allowCreation={{false}}
      @renderInPlace={{this.renderInPlace}}
      @onChange={{this.setSegment}}
      @disabled={{@disabled}}
      @class="select-members"
      @placeholder="Select a tier"
      as |option|
  >
      {{option.name}}
  </GhTokenInput>
  
  <GhMembersSegmentCount
      @segment={{@segment}}
      @enforcedFilter={{@enforcedCountFilter}}
      @onSegmentCountChange={{@onSegmentCountChange}}
  />
  */
  {
    "id": "uIVre91w",
    "block": "{\"symbols\":[\"option\",\"@disabled\",\"@segment\",\"@enforcedCountFilter\",\"@onSegmentCountChange\"],\"statements\":[[8,\"gh-token-input\",[],[[\"@options\",\"@selected\",\"@disabled\",\"@optionsComponent\",\"@allowCreation\",\"@renderInPlace\",\"@onChange\",\"@disabled\",\"@class\",\"@placeholder\"],[[32,0,[\"options\"]],[32,0,[\"selectedOptions\"]],[30,[36,0],[[32,2],[32,0,[\"fetchOptionsTask\",\"isRunning\"]]],null],\"power-select/options\",false,[32,0,[\"renderInPlace\"]],[32,0,[\"setSegment\"]],[32,2],\"select-members\",\"Select a tier\"]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[1,[32,1,[\"name\"]]],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"\\n\\n\"],[8,\"gh-members-segment-count\",[],[[\"@segment\",\"@enforcedFilter\",\"@onSegmentCountChange\"],[[32,3],[32,4],[32,5]]],null]],\"hasEval\":false,\"upvars\":[\"or\"]}",
    "moduleName": "ghost-admin/components/gh-members-segment-select.hbs"
  });

  let GhMembersSegmentSelect = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._tracked, _dec4 = Ember._action, (_class = class GhMembersSegmentSelect extends _component.default {
    get renderInPlace() {
      return this.args.renderInPlace === undefined ? false : this.args.renderInPlace;
    }

    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "store", _descriptor, this);

      _initializerDefineProperty(this, "feature", _descriptor2, this);

      _initializerDefineProperty(this, "_options", _descriptor3, this);

      this.fetchOptionsTask.perform();
    }

    get options() {
      if (this.args.hideOptionsWhenAllSelected) {
        const selectedSegments = this.selectedOptions.mapBy('segment');

        if (selectedSegments.includes('status:free') && selectedSegments.includes('status:-free')) {
          return this._options.filter(option => !option.groupName);
        }
      }

      return this._options;
    }

    get flatOptions() {
      const options = [];

      function getOptions(option) {
        if (option.options) {
          return option.options.forEach(getOptions);
        }

        options.push(option);
      }

      this._options.forEach(getOptions);

      return options;
    }

    get selectedOptions() {
      const segments = (this.args.segment || '').split(',');
      return this.flatOptions.filter(option => segments.includes(option.segment));
    }

    setSegment(options) {
      const segment = options.mapBy('segment').join(',') || null;
      this.args.onChange?.(segment);
    }

    *fetchOptionsTask() {
      const options = yield [];

      if (!this.args.hideDefaultSegments) {
        options.push({
          name: 'Free members',
          segment: 'status:free',
          class: 'segment-status-free'
        }, {
          name: 'Paid members',
          segment: 'status:-free',
          // paid & comped
          class: 'segment-status-paid'
        });
      }

      if (this.feature.get('multipleProducts')) {
        // fetch all products w̶i̶t̶h̶ c̶o̶u̶n̶t̶s̶
        // TODO: add `include: 'count.members` to query once API supports
        const products = yield this.store.query('product', {
          filter: 'type:paid',
          limit: 'all',
          include: 'monthly_price,yearly_price,benefits'
        });

        if (products.length > 0) {
          const productsGroup = {
            groupName: 'Tiers',
            options: []
          };
          products.forEach(product => {
            productsGroup.options.push({
              name: product.name,
              segment: `product:${product.slug}`,
              count: product.count?.members,
              class: 'segment-product'
            });
          });
          options.push(productsGroup);

          if (this.args.selectDefaultProduct && !this.args.segment) {
            this.args.onChange?.(productsGroup.options[0].segment);
          }
        }
      } // fetch all labels w̶i̶t̶h̶ c̶o̶u̶n̶t̶s̶
      // TODO: add `include: 'count.members` to query once API is fixed


      const labels = yield this.store.query('label', {
        limit: 'all'
      });

      if (labels.length > 0 && !this.args.hideLabels) {
        const labelsGroup = {
          groupName: 'Labels',
          options: []
        };
        labels.forEach(label => {
          labelsGroup.options.push({
            name: label.name,
            segment: `label:${label.slug}`,
            count: label.count?.members,
            class: 'segment-label'
          });
        });
        options.push(labelsGroup);
      }

      this._options = options;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "_options", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setSegment", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "setSegment"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchOptionsTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "fetchOptionsTask"), _class.prototype)), _class));
  _exports.default = GhMembersSegmentSelect;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhMembersSegmentSelect);
});
;define("ghost-admin/components/gh-membership-products-alpha", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <label>Tiers</label>
  <div class="gh-product-cards">
  {{#each this.products as |product productIdx|}}
      <GhProductCard
          @product={{product}}
          @openEditProduct={{this.openEditProduct}}
      />
  {{/each}}
  
  <div class="gh-product-cards-footer">
      <button class="gh-btn gh-btn-link gh-btn-text gh-btn-icon gh-btn-add-product green" {{action "openNewProduct" product}}><span>{{svg-jar "add-stroke" class="stroke-green"}}Add tier</span></button>
  </div>
  </div>
  
  {{#if this.showProductModal}}
      <GhFullscreenModal
          @modal="product"
          @model={{hash
              product=this.productModel
          }}
          @confirm={{this.confirmProductSave}}
          @close={{this.closeProductModal}}
          @modifier="edit-product action wide" />
  {{/if}}
  
  */
  {
    "id": "VGlqeWNm",
    "block": "{\"symbols\":[\"product\",\"productIdx\"],\"statements\":[[10,\"label\"],[12],[2,\"Tiers\"],[13],[2,\"\\n\"],[10,\"div\"],[14,0,\"gh-product-cards\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,1],[[30,[36,1],[[32,0,[\"products\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-product-card\",[],[[\"@product\",\"@openEditProduct\"],[[32,1],[32,0,[\"openEditProduct\"]]]],null],[2,\"\\n\"]],\"parameters\":[1,2]}]]],[2,\"\\n\"],[10,\"div\"],[14,0,\"gh-product-cards-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-link gh-btn-text gh-btn-icon gh-btn-add-product green\"],[4,[38,4],[[32,0],\"openNewProduct\",[35,3]],null],[12],[10,\"span\"],[12],[1,[30,[36,5],[\"add-stroke\"],[[\"class\"],[\"stroke-green\"]]]],[2,\"Add tier\"],[13],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,6],[[32,0,[\"showProductModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"product\",[30,[36,0],null,[[\"product\"],[[32,0,[\"productModel\"]]]]],[32,0,[\"confirmProductSave\"]],[32,0,[\"closeProductModal\"]],\"edit-product action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"hash\",\"-track-array\",\"each\",\"product\",\"action\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-membership-products-alpha.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._action, _dec9 = Ember._action, _dec10 = Ember._action, _dec11 = Ember._action, (_class = class _class extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "membersUtils", _descriptor, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor2, this);

      _initializerDefineProperty(this, "ajax", _descriptor3, this);

      _initializerDefineProperty(this, "store", _descriptor4, this);

      _initializerDefineProperty(this, "config", _descriptor5, this);

      _initializerDefineProperty(this, "showProductModal", _descriptor6, this);

      _initializerDefineProperty(this, "productModel", _descriptor7, this);
    }

    get products() {
      return this.args.products;
    }

    async openEditProduct(product) {
      this.productModel = product;
      this.showProductModal = true;
    }

    async openNewProduct() {
      this.productModel = this.store.createRecord('product');
      this.showProductModal = true;
    }

    closeProductModal() {
      this.showProductModal = false;
    }

    confirmProductSave() {
      this.args.confirmProductSave();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "membersUtils", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "showProductModal", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "productModel", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "openEditProduct", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "openEditProduct"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openNewProduct", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "openNewProduct"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "closeProductModal", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "closeProductModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "confirmProductSave", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "confirmProductSave"), _class.prototype)), _class)));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-mobile-nav-bar", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <LinkTo @route="dashboard" data-test-mobile-nav="dashboard">{{svg-jar "house"}}Dashboard</LinkTo>
  {{#if (eq this.router.currentRouteName "posts")}}
      <LinkTo @route="posts" @query={{hash type=null}} @classNames="active" data-test-mobile-nav="posts">{{svg-jar "posts"}}Posts</LinkTo>
  {{else}}
      <LinkTo @route="posts">{{svg-jar "content" data-test-mobile-nav="posts"}}Posts</LinkTo>
  {{/if}}
  <LinkTo @route="members" @classNames="gh-nav-main-users" data-test-mobile-nav="members">{{svg-jar "members"}}Members</LinkTo>
  <div role="button" class="gh-mobile-nav-bar-more" {{action "openMobileMenu" target=this.ui data-test-mobile-nav="more"}}>{{svg-jar "icon" class="icon-gh"}}More</div>
  {{yield}}
  
  */
  {
    "id": "VxQxvaAW",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[8,\"link-to\",[[24,\"data-test-mobile-nav\",\"dashboard\"]],[[\"@route\"],[\"dashboard\"]],[[\"default\"],[{\"statements\":[[1,[30,[36,0],[\"house\"],null]],[2,\"Dashboard\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[32,0,[\"router\",\"currentRouteName\"]],\"posts\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[8,\"link-to\",[[24,\"data-test-mobile-nav\",\"posts\"]],[[\"@route\",\"@query\",\"@classNames\"],[\"posts\",[30,[36,1],null,[[\"type\"],[null]]],\"active\"]],[[\"default\"],[{\"statements\":[[1,[30,[36,0],[\"posts\"],null]],[2,\"Posts\"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[8,\"link-to\",[],[[\"@route\"],[\"posts\"]],[[\"default\"],[{\"statements\":[[1,[30,[36,0],[\"content\"],[[\"data-test-mobile-nav\"],[\"posts\"]]]],[2,\"Posts\"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[8,\"link-to\",[[24,\"data-test-mobile-nav\",\"members\"]],[[\"@route\",\"@classNames\"],[\"members\",\"gh-nav-main-users\"]],[[\"default\"],[{\"statements\":[[1,[30,[36,0],[\"members\"],null]],[2,\"Members\"]],\"parameters\":[]}]]],[2,\"\\n\"],[11,\"div\"],[24,\"role\",\"button\"],[24,0,\"gh-mobile-nav-bar-more\"],[4,[38,4],[[32,0],\"openMobileMenu\"],[[\"target\",\"data-test-mobile-nav\"],[[32,0,[\"ui\"]],\"more\"]]],[12],[1,[30,[36,0],[\"icon\"],[[\"class\"],[\"icon-gh\"]]]],[2,\"More\"],[13],[2,\"\\n\"],[18,1,null],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"hash\",\"eq\",\"if\",\"action\"]}",
    "moduleName": "ghost-admin/components/gh-mobile-nav-bar.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    ui: Ember.inject.service(),
    tagName: 'nav',
    classNames: ['gh-mobile-nav-bar']
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-nav-menu", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <nav class="gh-nav {{if this.ui.contextualNavMenu "gh-nav-contextual"}}" {{did-insert this.updateFirstRender}} ...attributes>
      {{#if this.ui.contextualNavMenu}}
          {{component (concat "gh-nav-menu/" ui.contextualNavMenu)}}
      {{else}}
          <GhNavMenu::Main @icon={{this.settings.settledIcon}} @firstRender={{this.firstRender}} />
      {{/if}}
  </nav>
  */
  {
    "id": "ASr3RPLO",
    "block": "{\"symbols\":[\"&attrs\"],\"statements\":[[11,\"nav\"],[16,0,[31,[\"gh-nav \",[30,[36,3],[[32,0,[\"ui\",\"contextualNavMenu\"]],\"gh-nav-contextual\"],null]]]],[17,1],[4,[38,4],[[32,0,[\"updateFirstRender\"]]],null],[12],[2,\"\\n\"],[6,[37,3],[[32,0,[\"ui\",\"contextualNavMenu\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[1,[30,[36,2],[[30,[36,1],[\"gh-nav-menu/\",[35,0,[\"contextualNavMenu\"]]],null]],null]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[8,\"gh-nav-menu/main\",[],[[\"@icon\",\"@firstRender\"],[[32,0,[\"settings\",\"settledIcon\"]],[32,0,[\"firstRender\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[13]],\"hasEval\":false,\"upvars\":[\"ui\",\"concat\",\"component\",\"if\",\"did-insert\"]}",
    "moduleName": "ghost-admin/components/gh-nav-menu.hbs"
  });

  let GhNavMenuComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._tracked, _dec4 = Ember._action, (_class = class GhNavMenuComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "settings", _descriptor, this);

      _initializerDefineProperty(this, "ui", _descriptor2, this);

      _initializerDefineProperty(this, "firstRender", _descriptor3, this);
    }

    updateFirstRender() {
      Ember.run.schedule('afterRender', this, () => {
        this.firstRender = false;
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ui", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "firstRender", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "updateFirstRender", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "updateFirstRender"), _class.prototype)), _class));
  _exports.default = GhNavMenuComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhNavMenuComponent);
});
;define("ghost-admin/components/gh-nav-menu/design", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="flex flex-column h-100" {{css-transition "gh-nav-contextual"}} data-test-nav-menu="design" ...attributes>
      <header class="gh-nav-header">
          <LinkTo @route="settings" class="gh-nav-menu-back-button">{{svg-jar "arrow-left-small"}} Settings</LinkTo>
      </header>
      <section class="gh-nav-body gh-nav-design">
          <div class="gh-nav-top" {{on "click" this.transitionBackToIndex}}>
              <div class="gh-nav-list gh-nav-main">
                  <LinkTo @route="settings.design" class="gh-nav-menu-title" @current-when="settings.design.index" {{on "click" this.closeAllSections}}>Site design</LinkTo>
  
                  {{#let (eq this.openSection "brand") as |isOpen|}}
                      <button class="gh-nav-design-tab {{if isOpen "active"}}" type="button" {{on "click" (fn this.toggleSection "brand")}} data-test-nav-toggle="general">
                          {{svg-jar "paintbrush"}} Brand
                          <span class="gh-nav-button-expand">{{svg-jar (if isOpen "arrow-up-stroke" "arrow-down-stroke")}}</span>
                      </button>
                      {{#liquid-if isOpen}}
                          <div class="gh-nav-design-settings" data-test-nav-group="general">
                              <Settings::Design::GeneralSettingsForm
                                  @updatePreview={{perform this.themeManagement.updatePreviewHtmlTask}}
                              />
                          </div>
                      {{/liquid-if}}
                  {{/let}}
  
                  {{#each this.customThemeSettings.settingGroups as |group|}}
                      {{#let (eq this.openSection group.key) as |isOpen|}}
                          <button class="gh-nav-design-tab {{if isOpen "active"}}" type="button" {{on "click" (fn this.toggleSection group.key)}}>
                              {{svg-jar group.icon}} {{group.name}}
                              <span class="gh-nav-button-expand">{{svg-jar (if isOpen "arrow-up-stroke" "arrow-down-stroke")}}</span>
                          </button>
  
                          {{#liquid-if isOpen}}
                              <div class="gh-nav-design-settings" data-test-nav-group={{group.key}}>
                                  <Settings::Design::ThemeSettingsForm
                                      @themeSettings={{group.settings}}
                                      @updatePreview={{perform this.themeManagement.updatePreviewHtmlTask}}
                                  />
                              </div>
                          {{/liquid-if}}
                      {{/let}}
                  {{/each}}
              </div>
          </div>
  
          <div class="gh-nav-bottom">
              <div class="gh-change-theme">
                  <LinkTo class="gh-nav-design-tab" @route="settings.design.change-theme" {{on "click" this.closeAllSections}} data-test-nav="change-theme">
                      <div>
                          <span>Change theme</span>
                          <span class="active-theme" data-test-text="current-theme">Current: {{this.activeTheme.name}}{{#if this.activeTheme.package.version}} - v{{this.activeTheme.package.version}}{{/if}}</span>
                      </div>
                      <div class="gh-nav-design-tabicon">{{svg-jar "sync"}}</div>
                  </LinkTo>
              </div>
          </div>
      </section>
  </div>
  */
  {
    "id": "KoeJrgEj",
    "block": "{\"symbols\":[\"group\",\"isOpen\",\"isOpen\",\"&attrs\"],\"statements\":[[11,\"div\"],[24,0,\"flex flex-column h-100\"],[24,\"data-test-nav-menu\",\"design\"],[17,4],[4,[38,8],[\"gh-nav-contextual\"],null],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"gh-nav-header\"],[12],[2,\"\\n        \"],[8,\"link-to\",[[24,0,\"gh-nav-menu-back-button\"]],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[1,[30,[36,4],[\"arrow-left-small\"],null]],[2,\" Settings\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"section\"],[14,0,\"gh-nav-body gh-nav-design\"],[12],[2,\"\\n        \"],[11,\"div\"],[24,0,\"gh-nav-top\"],[4,[38,3],[\"click\",[32,0,[\"transitionBackToIndex\"]]],null],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-nav-list gh-nav-main\"],[12],[2,\"\\n                \"],[8,\"link-to\",[[24,0,\"gh-nav-menu-title\"],[4,[38,3],[\"click\",[32,0,[\"closeAllSections\"]]],null]],[[\"@route\",\"@current-when\"],[\"settings.design\",\"settings.design.index\"]],[[\"default\"],[{\"statements\":[[2,\"Site design\"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,7],[[30,[36,6],[[32,0,[\"openSection\"]],\"brand\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[11,\"button\"],[16,0,[31,[\"gh-nav-design-tab \",[30,[36,1],[[32,3],\"active\"],null]]]],[24,\"data-test-nav-toggle\",\"general\"],[24,4,\"button\"],[4,[38,3],[\"click\",[30,[36,2],[[32,0,[\"toggleSection\"]],\"brand\"],null]],null],[12],[2,\"\\n                        \"],[1,[30,[36,4],[\"paintbrush\"],null]],[2,\" Brand\\n                        \"],[10,\"span\"],[14,0,\"gh-nav-button-expand\"],[12],[1,[30,[36,4],[[30,[36,1],[[32,3],\"arrow-up-stroke\",\"arrow-down-stroke\"],null]],null]],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"],[6,[37,5],[[32,3]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-nav-design-settings\"],[14,\"data-test-nav-group\",\"general\"],[12],[2,\"\\n                            \"],[8,\"settings/design/general-settings-form\",[],[[\"@updatePreview\"],[[30,[36,0],[[32,0,[\"themeManagement\",\"updatePreviewHtmlTask\"]]],null]]],null],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[3]}]]],[2,\"\\n\"],[6,[37,10],[[30,[36,9],[[30,[36,9],[[32,0,[\"customThemeSettings\",\"settingGroups\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,7],[[30,[36,6],[[32,0,[\"openSection\"]],[32,1,[\"key\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[11,\"button\"],[16,0,[31,[\"gh-nav-design-tab \",[30,[36,1],[[32,2],\"active\"],null]]]],[24,4,\"button\"],[4,[38,3],[\"click\",[30,[36,2],[[32,0,[\"toggleSection\"]],[32,1,[\"key\"]]],null]],null],[12],[2,\"\\n                            \"],[1,[30,[36,4],[[32,1,[\"icon\"]]],null]],[2,\" \"],[1,[32,1,[\"name\"]]],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"gh-nav-button-expand\"],[12],[1,[30,[36,4],[[30,[36,1],[[32,2],\"arrow-up-stroke\",\"arrow-down-stroke\"],null]],null]],[13],[2,\"\\n                        \"],[13],[2,\"\\n\\n\"],[6,[37,5],[[32,2]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"gh-nav-design-settings\"],[15,\"data-test-nav-group\",[32,1,[\"key\"]]],[12],[2,\"\\n                                \"],[8,\"settings/design/theme-settings-form\",[],[[\"@themeSettings\",\"@updatePreview\"],[[32,1,[\"settings\"]],[30,[36,0],[[32,0,[\"themeManagement\",\"updatePreviewHtmlTask\"]]],null]]],null],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[2]}]]]],\"parameters\":[1]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-nav-bottom\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-change-theme\"],[12],[2,\"\\n                \"],[8,\"link-to\",[[24,0,\"gh-nav-design-tab\"],[24,\"data-test-nav\",\"change-theme\"],[4,[38,3],[\"click\",[32,0,[\"closeAllSections\"]]],null]],[[\"@route\"],[\"settings.design.change-theme\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Change theme\"],[13],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"active-theme\"],[14,\"data-test-text\",\"current-theme\"],[12],[2,\"Current: \"],[1,[32,0,[\"activeTheme\",\"name\"]]],[6,[37,1],[[32,0,[\"activeTheme\",\"package\",\"version\"]]],null,[[\"default\"],[{\"statements\":[[2,\" - v\"],[1,[32,0,[\"activeTheme\",\"package\",\"version\"]]]],\"parameters\":[]}]]],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-nav-design-tabicon\"],[12],[1,[30,[36,4],[\"sync\"],null]],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"perform\",\"if\",\"fn\",\"on\",\"svg-jar\",\"liquid-if\",\"eq\",\"let\",\"css-transition\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/gh-nav-menu/design.hbs"
  });

  let DesignMenuComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, _dec7 = Ember._tracked, _dec8 = Ember._action, _dec9 = Ember._action, _dec10 = Ember._action, (_class = class DesignMenuComponent extends _component.default {
    constructor() {
      super(...arguments); // fetch all themes in the background so we can show the active theme

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "customThemeSettings", _descriptor2, this);

      _initializerDefineProperty(this, "router", _descriptor3, this);

      _initializerDefineProperty(this, "settings", _descriptor4, this);

      _initializerDefineProperty(this, "store", _descriptor5, this);

      _initializerDefineProperty(this, "themeManagement", _descriptor6, this);

      _initializerDefineProperty(this, "openSection", _descriptor7, this);

      _defineProperty(this, "themes", this.store.peekAll('theme'));

      this.store.findAll('theme');

      if (this.router.currentRouteName === 'settings.design.index') {
        this.openDefaultSection();
      }

      this.routeDidChangeHandler = Ember.run.bind(this, this.handleRouteDidChange);
      this.router.on('routeDidChange', this.routeDidChangeHandler);
    }

    willDestroy() {
      super.willDestroy(...arguments);
      this.router.off('routeDidChange', this.routeDidChangeHandler);
    }

    get activeTheme() {
      return this.themes.findBy('active', true);
    }

    toggleSection(section) {
      if (this.openSection === section) {
        this.openSection = null;
      } else {
        this.openSection = section;
        const group = this.customThemeSettings.KNOWN_GROUPS.findBy('key', section);

        if (group && group.previewType) {
          this.themeManagement.setPreviewType(group.previewType);
        } else {
          this.themeManagement.setPreviewType('homepage');
        }
      }
    }

    transitionBackToIndex() {
      if (this.router.currentRouteName !== 'settings.design.index') {
        this.router.transitionTo('settings.design.index');
      }
    }

    closeAllSections() {
      this.openSection = null;
    }

    openDefaultSection() {
      const noCustomSettings = Ember.isEmpty(this.customThemeSettings.settings);

      if (noCustomSettings) {
        this.openSection = 'brand';
      }
    }

    handleRouteDidChange(transition) {
      if (!transition.isAborted && transition.to?.name === 'settings.design.index') {
        this.openDefaultSection();
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "customThemeSettings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "themeManagement", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "openSection", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "toggleSection", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "toggleSection"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "transitionBackToIndex", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "transitionBackToIndex"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "closeAllSections", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "closeAllSections"), _class.prototype)), _class));
  _exports.default = DesignMenuComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, DesignMenuComponent);
});
;define("ghost-admin/components/gh-nav-menu/footer", ["exports", "ember-basic-dropdown/utils/calculate-position"], function (_exports, _calculatePosition) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-nav-bottom">
      <div class="flex items-center justify-between">
          <div>
              <GhBasicDropdown @horizontalPosition="left" @verticalPosition="above" @calculatePosition={{this.userDropdownPosition}} as |dropdown|>
                  <dropdown.Trigger class="outline-0 pointer">
                      <div class="flex-auto flex items-center">
                          <div class="gh-user-avatar relative" style={{background-image-style this.session.user.profileImageUrl}}>
                              {{#if this.whatsNew.hasNew}}<span class="absolute dib ba b--white br-100 gh-whats-new-badge-account"></span>{{/if}}
                          </div>
                          {{svg-jar "arrow-down" class="w3 mr1 fill-darkgrey"}}
                      </div>
                  </dropdown.Trigger>
  
                  <dropdown.Content class="gh-nav-menu-dropdown">
                      <ul class="dropdown-menu dropdown-triangle-top" role="menu">
                          <li role="presentation">
                              <div class="gh-account-menu-header">
                                  <div class="gh-user-avatar relative" style={{background-image-style this.session.user.profileImageUrl}}></div>
                                  <div class="gh-user-info">
                                      <h4 class="gh-user-name">{{this.session.user.name}}</h4>
                                      <span class="gh-user-email">{{this.session.user.email}}</span>
                                  </div>
                              </div>
                          </li>
                          <li class="divider" role="separator"></li>
                          <li role="presentation">
                              <LinkTo @route="whatsnew" @query={{hash entry=null}} @classNames="dropdown-item" @role="menuitem" @tabindex="-1" data-test-nav="whatsnew">
                                  What's new?
                                  {{#if this.whatsNew.hasNew}}
                                      <div class="flex-grow-1 flex justify-end"><span class="dib w2 h2 top-0 right-0 bg-green br-100"></span></div>
                                  {{/if}}
                              </LinkTo>
                          </li>
                          <li role="presentation">
                              <LinkTo @route="settings.staff.user" @model={{this.session.user.slug}} @classNames="dropdown-item" @role="menuitem" @tabindex="-1" data-test-nav="user-profile">
                                  Your profile
                              </LinkTo>
                          </li>
                          <li class="divider" role="separator"></li>
                          <li role="presentation">
                              <a class="dropdown-item" role="menuitem" tabindex="-1" href="https://ghost.org/docs/" target="_blank">
                                  Support center
                              </a>
                          </li>
                          {{!-- <li role="presentation">
                              <a class="dropdown-item" role="menuitem" tabindex="-1" target="_blank"
                                  href="https://twitter.com/intent/tweet?text=%40Ghost+Hi%21+Can+you+help+me+with+&related=Ghost"
                                  onclick="window.open(this.href, 'twitter-share', 'width=550,height=235');return false;"
                              >
                                  Tweet @Ghost!
                              </a>
                          </li> --}}
                          <li role="presentation">
                              <a class="dropdown-item" role="menuitem" tabindex="-1" href="https://ghost.org/help/topic/setting-up/" target="_blank">
                                  How to use Ghost
                              </a>
                          </li>
  
                          {{#if this.showDropdownExtension}}
                              {{#each this.config.clientExtensions.dropdown.items as |menuItem| }}
                                  {{#if menuItem.divider}}
                                      <li class="divider" role="separator"></li>
                                  {{else}}
                                      <li role="presentation">
                                          <a href="{{menuItem.href}}" target="_blank" class="dropdown-item {{menuItem.classes}}" role="menuitem" tabindex="-1">
                                              {{menuItem.text}}
                                          </a>
                                      </li>
                                  {{/if}}
                              {{/each}}
                          {{/if}}
  
                          <li class="divider" role="separator"></li>
                          <li role="presentation">
                              <LinkTo @route="signout" @classNames="dropdown-item user-menu-signout" @role="menuitem" @tabindex="-1">
                                  Sign out
                              </LinkTo>
                          </li>
                      </ul>
                  </dropdown.Content>
              </GhBasicDropdown>
          </div>
          <div class="flex items-center">
              {{#if (gh-user-can-admin this.session.user)}}
                  <LinkTo class="gh-nav-bottom-tabicon" @route="settings" @current-when={{this.isSettingsRoute}} data-test-nav="settings">{{svg-jar "settings"}}</LinkTo>
              {{/if}}
              <div class="nightshift-toggle-container">
                  <div class="nightshift-toggle {{if this.feature.nightShift "on"}}" {{action (toggle "nightShift" this.feature)}}>
                      <div class="sun">{{svg-jar "sun"}}</div>
                      <div class="moon">{{svg-jar "moon"}}</div>
                      <div class="thumb"></div>
                  </div>
              </div>
          </div>
      </div>
  </div>
  */
  {
    "id": "ZDHHp25+",
    "block": "{\"symbols\":[\"dropdown\",\"menuItem\"],\"statements\":[[10,\"div\"],[14,0,\"gh-nav-bottom\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"flex items-center justify-between\"],[12],[2,\"\\n        \"],[10,\"div\"],[12],[2,\"\\n            \"],[8,\"gh-basic-dropdown\",[],[[\"@horizontalPosition\",\"@verticalPosition\",\"@calculatePosition\"],[\"left\",\"above\",[32,0,[\"userDropdownPosition\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[8,[32,1,[\"Trigger\"]],[[24,0,\"outline-0 pointer\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"div\"],[14,0,\"flex-auto flex items-center\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-user-avatar relative\"],[15,5,[30,[36,4],[[32,0,[\"session\",\"user\",\"profileImageUrl\"]]],null]],[12],[2,\"\\n                            \"],[6,[37,1],[[32,0,[\"whatsNew\",\"hasNew\"]]],null,[[\"default\"],[{\"statements\":[[10,\"span\"],[14,0,\"absolute dib ba b--white br-100 gh-whats-new-badge-account\"],[12],[13]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[1,[30,[36,0],[\"arrow-down\"],[[\"class\"],[\"w3 mr1 fill-darkgrey\"]]]],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                \"],[8,[32,1,[\"Content\"]],[[24,0,\"gh-nav-menu-dropdown\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"ul\"],[14,0,\"dropdown-menu dropdown-triangle-top\"],[14,\"role\",\"menu\"],[12],[2,\"\\n                        \"],[10,\"li\"],[14,\"role\",\"presentation\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-account-menu-header\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-user-avatar relative\"],[15,5,[30,[36,4],[[32,0,[\"session\",\"user\",\"profileImageUrl\"]]],null]],[12],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-user-info\"],[12],[2,\"\\n                                    \"],[10,\"h4\"],[14,0,\"gh-user-name\"],[12],[1,[32,0,[\"session\",\"user\",\"name\"]]],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"gh-user-email\"],[12],[1,[32,0,[\"session\",\"user\",\"email\"]]],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"li\"],[14,0,\"divider\"],[14,\"role\",\"separator\"],[12],[13],[2,\"\\n                        \"],[10,\"li\"],[14,\"role\",\"presentation\"],[12],[2,\"\\n                            \"],[8,\"link-to\",[[24,\"data-test-nav\",\"whatsnew\"]],[[\"@route\",\"@query\",\"@classNames\",\"@role\",\"@tabindex\"],[\"whatsnew\",[30,[36,5],null,[[\"entry\"],[null]]],\"dropdown-item\",\"menuitem\",\"-1\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                What's new?\\n\"],[6,[37,1],[[32,0,[\"whatsNew\",\"hasNew\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[10,\"div\"],[14,0,\"flex-grow-1 flex justify-end\"],[12],[10,\"span\"],[14,0,\"dib w2 h2 top-0 right-0 bg-green br-100\"],[12],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"li\"],[14,\"role\",\"presentation\"],[12],[2,\"\\n                            \"],[8,\"link-to\",[[24,\"data-test-nav\",\"user-profile\"]],[[\"@route\",\"@model\",\"@classNames\",\"@role\",\"@tabindex\"],[\"settings.staff.user\",[32,0,[\"session\",\"user\",\"slug\"]],\"dropdown-item\",\"menuitem\",\"-1\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                Your profile\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"li\"],[14,0,\"divider\"],[14,\"role\",\"separator\"],[12],[13],[2,\"\\n                        \"],[10,\"li\"],[14,\"role\",\"presentation\"],[12],[2,\"\\n                            \"],[10,\"a\"],[14,0,\"dropdown-item\"],[14,\"role\",\"menuitem\"],[14,\"tabindex\",\"-1\"],[14,6,\"https://ghost.org/docs/\"],[14,\"target\",\"_blank\"],[12],[2,\"\\n                                Support center\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"],[2,\"                        \"],[10,\"li\"],[14,\"role\",\"presentation\"],[12],[2,\"\\n                            \"],[10,\"a\"],[14,0,\"dropdown-item\"],[14,\"role\",\"menuitem\"],[14,\"tabindex\",\"-1\"],[14,6,\"https://ghost.org/help/topic/setting-up/\"],[14,\"target\",\"_blank\"],[12],[2,\"\\n                                How to use Ghost\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"showDropdownExtension\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,3],[[30,[36,2],[[30,[36,2],[[32,0,[\"config\",\"clientExtensions\",\"dropdown\",\"items\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[32,2,[\"divider\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[10,\"li\"],[14,0,\"divider\"],[14,\"role\",\"separator\"],[12],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[10,\"li\"],[14,\"role\",\"presentation\"],[12],[2,\"\\n                                        \"],[10,\"a\"],[15,6,[31,[[32,2,[\"href\"]]]]],[14,\"target\",\"_blank\"],[15,0,[31,[\"dropdown-item \",[32,2,[\"classes\"]]]]],[14,\"role\",\"menuitem\"],[14,\"tabindex\",\"-1\"],[12],[2,\"\\n                                            \"],[1,[32,2,[\"text\"]]],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[2]}]]]],\"parameters\":[]}]]],[2,\"\\n                        \"],[10,\"li\"],[14,0,\"divider\"],[14,\"role\",\"separator\"],[12],[13],[2,\"\\n                        \"],[10,\"li\"],[14,\"role\",\"presentation\"],[12],[2,\"\\n                            \"],[8,\"link-to\",[],[[\"@route\",\"@classNames\",\"@role\",\"@tabindex\"],[\"signout\",\"dropdown-item user-menu-signout\",\"menuitem\",\"-1\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                Sign out\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"]],\"parameters\":[1]}]]],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n\"],[6,[37,1],[[30,[36,6],[[32,0,[\"session\",\"user\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"link-to\",[[24,0,\"gh-nav-bottom-tabicon\"],[24,\"data-test-nav\",\"settings\"]],[[\"@route\",\"@current-when\"],[\"settings\",[32,0,[\"isSettingsRoute\"]]]],[[\"default\"],[{\"statements\":[[1,[30,[36,0],[\"settings\"],null]]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[10,\"div\"],[14,0,\"nightshift-toggle-container\"],[12],[2,\"\\n                \"],[11,\"div\"],[16,0,[31,[\"nightshift-toggle \",[30,[36,1],[[32,0,[\"feature\",\"nightShift\"]],\"on\"],null]]]],[4,[38,8],[[32,0],[30,[36,7],[\"nightShift\",[32,0,[\"feature\"]]],null]],null],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"sun\"],[12],[1,[30,[36,0],[\"sun\"],null]],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"moon\"],[12],[1,[30,[36,0],[\"moon\"],null]],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"thumb\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"-track-array\",\"each\",\"background-image-style\",\"hash\",\"gh-user-can-admin\",\"toggle\",\"action\"]}",
    "moduleName": "ghost-admin/components/gh-nav-menu/footer.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    config: Ember.inject.service(),
    session: Ember.inject.service(),
    router: Ember.inject.service(),
    whatsNew: Ember.inject.service(),
    feature: Ember.inject.service(),
    showDropdownExtension: Ember.computed.and('config.clientExtensions.dropdown', 'session.user.isOwnerOnly'),
    isSettingsRoute: Ember.computed.match('router.currentRouteName', /^settings/),

    // equivalent to "left: auto; right: -20px"
    userDropdownPosition(trigger, dropdown) {
      let {
        horizontalPosition,
        verticalPosition,
        style
      } = (0, _calculatePosition.default)(...arguments);
      let {
        width: dropdownWidth
      } = dropdown.firstElementChild.getBoundingClientRect();
      style.right += dropdownWidth - 20;
      style['z-index'] = '1100';
      return {
        horizontalPosition,
        verticalPosition,
        style
      };
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-nav-menu/main", ["exports", "ghost-admin/mixins/shortcuts", "ghost-admin/utils/ctrl-or-cmd", "ember-concurrency"], function (_exports, _shortcuts, _ctrlOrCmd, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="flex flex-column h-100" {{css-transition (unless @firstRender "gh-nav-main")}} data-test-nav-menu="main" ...attributes>
      <header class="gh-nav-menu">
          <div class="gh-nav-menu-details">
              <div class="gh-nav-menu-icon {{this.iconClass}}" style={{this.iconStyle}}></div>
              <div class="gh-nav-menu-details-sitetitle">{{this.config.blogTitle}}</div>
          </div>
          <div class="gh-nav-menu-search">
              <button class="gh-nav-btn-search" {{on "click" (action "openSearchModal")}} title="Search site (Ctrl/⌘ + K)"><span>{{svg-jar "search"}}</span></button>
          </div>
      </header>
  
      <section class="gh-nav-body">
          <div class="gh-nav-top">
              <ul class="gh-nav-list gh-nav-main">
                  {{#if (gh-user-can-admin this.session.user)}}
                  <li class="relative">
                      <LinkTo @route="dashboard" @alt="Dashboard" @title="Dashboard" data-test-nav="dashboard">{{svg-jar "house"}} Dashboard</LinkTo>
                  </li>
                  {{/if}}
              </ul>
              <ul class="gh-nav-list gh-nav-manage">
                  <li class="gh-nav-list-new relative">
                      <GhLinkToCustomViewsIndex @route="posts" @query={{reset-query-params "posts"}} data-test-nav="posts">{{svg-jar "posts"}}Publicaciones</GhLinkToCustomViewsIndex>
                      <LinkTo @route="editor.new" @model="post" @classNames="gh-secondary-action gh-nav-new-post" @alt="New post" @title="New post" data-test-nav="new-story"><span>{{svg-jar "add-stroke"}}</span></LinkTo>
                      {{#if this.session.user.isAuthorOrContributor}}
                          {{#if this.customViews.forPosts}}
                              <ul class="gh-nav-view-list">
                                  {{#each this.customViews.forPosts as |view|}}
                                      <li>
                                          <LinkTo @route="posts" @query={{reset-query-params "posts" view.filter}} data-test-nav-custom="{{view.route}}-{{view.name}}" title="{{view.name}}">
                                              <span class="gh-nav-viewname">{{view.name}}</span>
                                              <span class="flex items-center svg-{{view.color}}">
                                                  {{#unless view.icon}}
                                                      <span class="absolute circle"></span>
                                                  {{/unless}}
                                              </span>
                                          </LinkTo>
                                      </li>
                                  {{/each}}
                              </ul>
                          {{/if}}
                      {{else}}
                          {{#if this.customViews.forPosts}}
                              <button type="button" class="gh-nav-button-expand {{if this.navigation.settings.expanded.posts "expanded"}}" {{on "click" (fn this.navigation.toggleExpansion "posts")}} aria-label="{{if this.navigation.settings.expanded.posts "Collapse custom post types" "Expand custom post types"}}">
                                  {{svg-jar (if this.navigation.settings.expanded.posts "arrow-down-stroke" "arrow-right-stroke")}}
                              </button>
                              {{#liquid-if this.navigation.settings.expanded.posts}}
                                  <ul class="gh-nav-view-list">
                                      {{#each this.customViews.forPosts as |view|}}
                                          <li>
                                              <LinkTo @route="posts" @query={{reset-query-params "posts" view.filter}} data-test-nav-custom="{{view.route}}-{{view.name}}" title="{{view.name}}">
                                                  <span class="gh-nav-viewname">{{view.name}}</span>
                                                  <span class="flex items-center svg-{{view.color}}">
                                                      {{#unless view.icon}}
                                                          <span class="absolute circle"></span>
                                                      {{/unless}}
                                                  </span>
                                              </LinkTo>
                                          </li>
                                      {{/each}}
                                  </ul>
                              {{/liquid-if}}
                          {{/if}}
                      {{/if}}
                  </li>
                  {{#if this.showTagsNavigation}}
                      <li><LinkTo @route="tags" data-test-nav="tags">{{svg-jar "tag"}}Etiquetas</LinkTo></li>
                  {{/if}}
                  {{#if (gh-user-can-admin this.session.user)}}
                      {{#if this.isStripeConnected}}
                      <li>
                          <LinkTo @route="offers" @alt="Offers">{{svg-jar "percentage"}}Offers</LinkTo>
                      </li>
                      {{/if}}
                  {{/if}}
              </ul>
  
              {{#if this.session.user.isOwnerOnly}}
              <ul class="gh-nav-list">
                  {{#if this.showBilling}}
                      <li class="relative">
                          <a href="javascript:void(0)" class={{if this.billing.billingWindowOpen "active"}} {{action "toggleBillingModal" }} data-test-nav="billing">
                              {{svg-jar "credit-card"}} Ghost(Pro)
                          </a>
                      </li>
                      <li class="relative gh-nav-pro">
                          <GhBillingUpdateButton />
                      </li>
                  {{/if}}
              </ul>
              {{/if}}
  
              {{#if this.showMenuExtension}}
                  <ul class="gh-nav-list gh-nav-settings">
                      {{#if this.config.clientExtensions.menu.title}}
                          <li class="gh-nav-list-h">{{this.config.clientExtensions.menu.title}}</li>
                      {{/if}}
                      {{#each this.config.clientExtensions.menu.items as |menuItem| }}
                          <li>
                              <a href="{{menuItem.href}}" target="_blank">{{svg-jar menuItem.icon}}{{menuItem.text}}</a>
                          </li>
                      {{/each}}
                  </ul>
              {{/if}}
  
              {{#if this.showScriptExtension}}
                  {{{this.config.clientExtensions.script.container}}}
                  <script src="{{this.config.clientExtensions.script.src}}"></script>
              {{/if}}
          </div>
  
          <GhNavMenu::Footer />
  
      </section>
  </div>
  
  */
  {
    "id": "IAGMzpiD",
    "block": "{\"symbols\":[\"menuItem\",\"view\",\"view\",\"&attrs\",\"@firstRender\"],\"statements\":[[11,\"div\"],[24,0,\"flex flex-column h-100\"],[24,\"data-test-nav-menu\",\"main\"],[17,4],[4,[38,10],[[30,[36,6],[[32,5],\"gh-nav-main\"],null]],null],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"gh-nav-menu\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-nav-menu-details\"],[12],[2,\"\\n            \"],[10,\"div\"],[15,0,[31,[\"gh-nav-menu-icon \",[32,0,[\"iconClass\"]]]]],[15,5,[32,0,[\"iconStyle\"]]],[12],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-nav-menu-details-sitetitle\"],[12],[1,[32,0,[\"config\",\"blogTitle\"]]],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-nav-menu-search\"],[12],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-nav-btn-search\"],[24,\"title\",\"Search site (Ctrl/⌘ + K)\"],[4,[38,8],[\"click\",[30,[36,4],[[32,0],\"openSearchModal\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,0],[\"search\"],null]],[13],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"gh-nav-body\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-nav-top\"],[12],[2,\"\\n            \"],[10,\"ul\"],[14,0,\"gh-nav-list gh-nav-main\"],[12],[2,\"\\n\"],[6,[37,1],[[30,[36,11],[[32,0,[\"session\",\"user\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"li\"],[14,0,\"relative\"],[12],[2,\"\\n                    \"],[8,\"link-to\",[[24,\"data-test-nav\",\"dashboard\"]],[[\"@route\",\"@alt\",\"@title\"],[\"dashboard\",\"Dashboard\",\"Dashboard\"]],[[\"default\"],[{\"statements\":[[1,[30,[36,0],[\"house\"],null]],[2,\" Dashboard\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n            \"],[10,\"ul\"],[14,0,\"gh-nav-list gh-nav-manage\"],[12],[2,\"\\n                \"],[10,\"li\"],[14,0,\"gh-nav-list-new relative\"],[12],[2,\"\\n                    \"],[8,\"gh-link-to-custom-views-index\",[[24,\"data-test-nav\",\"posts\"]],[[\"@route\",\"@query\"],[\"posts\",[30,[36,5],[\"posts\"],null]]],[[\"default\"],[{\"statements\":[[1,[30,[36,0],[\"posts\"],null]],[2,\"Publicaciones\"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[8,\"link-to\",[[24,\"data-test-nav\",\"new-story\"]],[[\"@route\",\"@model\",\"@classNames\",\"@alt\",\"@title\"],[\"editor.new\",\"post\",\"gh-secondary-action gh-nav-new-post\",\"New post\",\"New post\"]],[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[1,[30,[36,0],[\"add-stroke\"],null]],[13]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[32,0,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,1],[[32,0,[\"customViews\",\"forPosts\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"ul\"],[14,0,\"gh-nav-view-list\"],[12],[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[30,[36,2],[[32,0,[\"customViews\",\"forPosts\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[10,\"li\"],[12],[2,\"\\n                                        \"],[8,\"link-to\",[[16,\"data-test-nav-custom\",[31,[[32,3,[\"route\"]],\"-\",[32,3,[\"name\"]]]]],[16,\"title\",[31,[[32,3,[\"name\"]]]]]],[[\"@route\",\"@query\"],[\"posts\",[30,[36,5],[\"posts\",[32,3,[\"filter\"]]],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-nav-viewname\"],[12],[1,[32,3,[\"name\"]]],[13],[2,\"\\n                                            \"],[10,\"span\"],[15,0,[31,[\"flex items-center svg-\",[32,3,[\"color\"]]]]],[12],[2,\"\\n\"],[6,[37,6],[[32,3,[\"icon\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                                    \"],[10,\"span\"],[14,0,\"absolute circle\"],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                            \"],[13],[2,\"\\n                                        \"]],\"parameters\":[]}]]],[2,\"\\n                                    \"],[13],[2,\"\\n\"]],\"parameters\":[3]}]]],[2,\"                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[32,0,[\"customViews\",\"forPosts\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[11,\"button\"],[16,0,[31,[\"gh-nav-button-expand \",[30,[36,1],[[32,0,[\"navigation\",\"settings\",\"expanded\",\"posts\"]],\"expanded\"],null]]]],[16,\"aria-label\",[31,[[30,[36,1],[[32,0,[\"navigation\",\"settings\",\"expanded\",\"posts\"]],\"Collapse custom post types\",\"Expand custom post types\"],null]]]],[24,4,\"button\"],[4,[38,8],[\"click\",[30,[36,7],[[32,0,[\"navigation\",\"toggleExpansion\"]],\"posts\"],null]],null],[12],[2,\"\\n                                \"],[1,[30,[36,0],[[30,[36,1],[[32,0,[\"navigation\",\"settings\",\"expanded\",\"posts\"]],\"arrow-down-stroke\",\"arrow-right-stroke\"],null]],null]],[2,\"\\n                            \"],[13],[2,\"\\n\"],[6,[37,9],[[32,0,[\"navigation\",\"settings\",\"expanded\",\"posts\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"ul\"],[14,0,\"gh-nav-view-list\"],[12],[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[30,[36,2],[[32,0,[\"customViews\",\"forPosts\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                        \"],[10,\"li\"],[12],[2,\"\\n                                            \"],[8,\"link-to\",[[16,\"data-test-nav-custom\",[31,[[32,2,[\"route\"]],\"-\",[32,2,[\"name\"]]]]],[16,\"title\",[31,[[32,2,[\"name\"]]]]]],[[\"@route\",\"@query\"],[\"posts\",[30,[36,5],[\"posts\",[32,2,[\"filter\"]]],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                                \"],[10,\"span\"],[14,0,\"gh-nav-viewname\"],[12],[1,[32,2,[\"name\"]]],[13],[2,\"\\n                                                \"],[10,\"span\"],[15,0,[31,[\"flex items-center svg-\",[32,2,[\"color\"]]]]],[12],[2,\"\\n\"],[6,[37,6],[[32,2,[\"icon\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                                        \"],[10,\"span\"],[14,0,\"absolute circle\"],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                                \"],[13],[2,\"\\n                                            \"]],\"parameters\":[]}]]],[2,\"\\n                                        \"],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"                                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n\"],[6,[37,1],[[32,0,[\"showTagsNavigation\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"li\"],[12],[8,\"link-to\",[[24,\"data-test-nav\",\"tags\"]],[[\"@route\"],[\"tags\"]],[[\"default\"],[{\"statements\":[[1,[30,[36,0],[\"tag\"],null]],[2,\"Etiquetas\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,1],[[30,[36,11],[[32,0,[\"session\",\"user\"]]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[32,0,[\"isStripeConnected\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"li\"],[12],[2,\"\\n                        \"],[8,\"link-to\",[],[[\"@route\",\"@alt\"],[\"offers\",\"Offers\"]],[[\"default\"],[{\"statements\":[[1,[30,[36,0],[\"percentage\"],null]],[2,\"Offers\"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"session\",\"user\",\"isOwnerOnly\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"ul\"],[14,0,\"gh-nav-list\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"showBilling\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"li\"],[14,0,\"relative\"],[12],[2,\"\\n                        \"],[11,\"a\"],[24,6,\"javascript:void(0)\"],[16,0,[30,[36,1],[[32,0,[\"billing\",\"billingWindowOpen\"]],\"active\"],null]],[24,\"data-test-nav\",\"billing\"],[4,[38,4],[[32,0],\"toggleBillingModal\"],null],[12],[2,\"\\n                            \"],[1,[30,[36,0],[\"credit-card\"],null]],[2,\" Ghost(Pro)\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"li\"],[14,0,\"relative gh-nav-pro\"],[12],[2,\"\\n                        \"],[8,\"gh-billing-update-button\",[],[[],[]],null],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[32,0,[\"showMenuExtension\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"ul\"],[14,0,\"gh-nav-list gh-nav-settings\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"config\",\"clientExtensions\",\"menu\",\"title\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"li\"],[14,0,\"gh-nav-list-h\"],[12],[1,[32,0,[\"config\",\"clientExtensions\",\"menu\",\"title\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,3],[[30,[36,2],[[30,[36,2],[[32,0,[\"config\",\"clientExtensions\",\"menu\",\"items\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"li\"],[12],[2,\"\\n                            \"],[10,\"a\"],[15,6,[31,[[32,1,[\"href\"]]]]],[14,\"target\",\"_blank\"],[12],[1,[30,[36,0],[[32,1,[\"icon\"]]],null]],[1,[32,1,[\"text\"]]],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[32,0,[\"showScriptExtension\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[2,[32,0,[\"config\",\"clientExtensions\",\"script\",\"container\"]]],[2,\"\\n                \"],[10,\"script\"],[15,\"src\",[31,[[32,0,[\"config\",\"clientExtensions\",\"script\",\"src\"]]]]],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\\n        \"],[8,\"gh-nav-menu/footer\",[],[[],[]],null],[2,\"\\n\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"-track-array\",\"each\",\"action\",\"reset-query-params\",\"unless\",\"fn\",\"on\",\"liquid-if\",\"css-transition\",\"gh-user-can-admin\"]}",
    "moduleName": "ghost-admin/components/gh-nav-menu/main.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend(_shortcuts.default, {
    billing: Ember.inject.service(),
    config: Ember.inject.service(),
    customViews: Ember.inject.service(),
    feature: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    modals: Ember.inject.service(),
    navigation: Ember.inject.service(),
    router: Ember.inject.service(),
    session: Ember.inject.service(),
    ui: Ember.inject.service(),
    whatsNew: Ember.inject.service(),
    membersStats: Ember.inject.service(),
    settings: Ember.inject.service(),
    tagName: '',
    iconStyle: '',
    iconClass: '',
    memberCountLoading: true,
    memberCount: 0,
    shortcuts: null,
    isIntegrationRoute: Ember.computed.match('router.currentRouteName', /^settings\.integration/),
    // HACK: {{link-to}} should be doing this automatically but there appears to
    // be a bug in Ember that's preventing it from working immediately after login
    isOnSite: Ember.computed.equal('router.currentRouteName', 'site'),
    showTagsNavigation: Ember.computed.or('session.user.isAdmin', 'session.user.isEditor'),
    showMenuExtension: Ember.computed.and('config.clientExtensions.menu', 'session.user.isOwnerOnly'),
    showScriptExtension: Ember.computed.and('config.clientExtensions.script', 'session.user.isOwnerOnly'),
    showBilling: Ember.computed.reads('config.hostSettings.billing.enabled'),
    isStripeConnected: Ember.computed.reads('settings.stripeConnectAccountId'),

    init() {
      this._super(...arguments);

      let shortcuts = {};
      shortcuts[`${_ctrlOrCmd.default}+k`] = {
        action: 'openSearchModal'
      };
      this.shortcuts = shortcuts;
    },

    // the menu has a rendering issue (#8307) when the the world is reloaded
    // during an import which we have worked around by not binding the icon
    // style directly. However we still need to keep track of changing icons
    // so that we can refresh when a new icon is uploaded
    didReceiveAttrs() {
      this._super(...arguments);

      this._setIconStyle();

      this._loadMemberCountsTask.perform();
    },

    didInsertElement() {
      this._super(...arguments);

      this.registerShortcuts();
    },

    willDestroyElement() {
      this.removeShortcuts();

      this._super(...arguments);
    },

    actions: {
      transitionToOrRefreshSite() {
        let {
          currentRouteName
        } = this.router;

        if (currentRouteName === 'site') {
          Ember.getOwner(this).lookup(`route:${currentRouteName}`).refresh();
        } else {
          this.router.transitionTo('site');
        }
      },

      openSearchModal() {
        return this.modals.open('modals/search');
      },

      toggleBillingModal() {
        this.billing.openBillingWindow(this.router.currentURL);
      }

    },
    _loadMemberCountsTask: (0, _emberConcurrency.task)(function* () {
      try {
        this.set('memberCountLoading', true);
        const stats = yield this.membersStats.fetchCounts();
        this.set('memberCountLoading', false);

        if (stats) {
          const statsDateObj = this.membersStats.fillCountDates(stats.data) || {};
          const dateValues = Object.values(statsDateObj);
          this.set('memberCount', dateValues.length ? dateValues[dateValues.length - 1].total : 0);
        }
      } catch (e) {
        return false;
      }
    }),

    _setIconStyle() {
      let icon = this.icon;

      if (icon === this._icon) {
        return;
      }

      this._icon = icon;

      if (icon && icon.match(/^https?:\/\//i)) {
        this.set('iconClass', '');
        this.set('iconStyle', Ember.String.htmlSafe(`background-image: url(${icon})`));
        return;
      }

      let iconUrl = 'https://static.ghost.org/v4.0.0/images/ghost-orb-1.png';
      this.set('iconStyle', Ember.String.htmlSafe(`background-image: url(${iconUrl})`));
      this.set('iconClass', 'gh-nav-logo-default');
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-navitem-url-input", ["exports", "validator"], function (_exports, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // URI is attached to the window global as part of the
  // google-caja html-css-sanitizer-bundle
  const {
    URI
  } = window;

  let joinUrlParts = function (url, path) {
    if (path[0] !== '/' && url.slice(-1) !== '/') {
      path = `/${path}`;
    } else if (path[0] === '/' && url.slice(-1) === '/') {
      path = path.slice(1);
    }

    return url + path;
  };

  let isRelative = function (url) {
    // "protocol://", "//example.com", "scheme:", "#anchor", & invalid paths
    // should all be treated as absolute
    return !url.match(/\s/) && !_validator.default.isURL(url) && !url.match(/^(\/\/|#|[a-zA-Z0-9-]+:)/);
  };

  var _default = Ember.TextField.extend({
    classNames: 'gh-input',

    // Allowed actions
    update() {},

    clearErrors() {},

    isBaseUrl: Ember.computed('baseUrl', 'value', function () {
      return this.baseUrl === this.value;
    }),

    didReceiveAttrs() {
      this._super(...arguments); // value coming is likely to be relative but we always want to show
      // absolute urls in the input fields


      this.set('value', this._makeAbsoluteUrl(this.url));
    },

    focusIn(event) {
      this.set('hasFocus', true);

      if (this.isBaseUrl) {
        // position the cursor at the end of the input
        Ember.run.next(function (el) {
          let {
            length
          } = el.value;
          el.setSelectionRange(length, length);
        }, event.target);
      }
    },

    keyDown(event) {
      // delete the "placeholder" value all at once
      if (this.isBaseUrl && (event.keyCode === 8 || event.keyCode === 46)) {
        this.set('value', '');
        event.preventDefault();
      } // CMD-S


      if (event.keyCode === 83 && event.metaKey) {
        this.notifyUrlChanged();
      }
    },

    keyPress(event) {
      this.clearErrors(); // enter key

      if (event.keyCode === 13) {
        this.notifyUrlChanged();
      }

      return true;
    },

    focusOut() {
      this.set('hasFocus', false);
      this.notifyUrlChanged();
    },

    notifyUrlChanged() {
      let url = this.value.trim();
      let urlURI = URI.parse(url);
      let baseUrl = this.baseUrl;
      let baseURI = URI.parse(baseUrl);

      function getHost(uri) {
        let host = uri.getDomain();

        if (uri.getPort()) {
          host = `${host}:${uri.getPort()}`;
        }

        return host;
      }

      let urlHost = getHost(urlURI);
      let baseHost = getHost(baseURI); // ensure value property is trimmed

      this.set('value', url); // if we have an email address, add the mailto:

      if (_validator.default.isEmail(url)) {
        url = this.update(`mailto:${url}`);
        this.set('value', url);
        return;
      } // get our baseUrl relativity checks in order


      let isAnchorLink = url.match(/^#/);
      let isRelativeToBasePath = urlURI.getPath() && urlURI.getPath().indexOf(baseURI.getPath()) === 0; // if our path is only missing a trailing / mark it as relative

      if (`${urlURI.getPath()}/` === baseURI.getPath()) {
        isRelativeToBasePath = true;
      }

      let isOnSameHost = urlHost === baseHost || !urlHost && isRelativeToBasePath; // if relative to baseUrl, remove the base url before sending to action

      if (!isAnchorLink && isOnSameHost && isRelativeToBasePath) {
        url = url.replace(/^[a-zA-Z0-9-]+:/, '');
        url = url.replace(/^\/\//, '');
        url = url.replace(baseHost, '');
        url = url.replace(baseURI.getPath(), ''); // handle case where url path is same as baseUrl path but missing trailing slash

        if (urlURI.getPath().slice(-1) !== '/') {
          url = url.replace(baseURI.getPath().slice(0, -1), '');
        }

        if (url !== '' || !this.isNew) {
          if (!url.match(/^\//)) {
            url = `/${url}`;
          }

          if (!url.match(/\/$/) && !url.match(/[.#?]/)) {
            url = `${url}/`;
          }
        }
      } // we update with the relative URL but then transform it back to absolute
      // for the input value. This avoids problems where the underlying relative
      // value hasn't changed even though the input value has


      if (url.match(/^(\/\/|#|[a-zA-Z0-9-]+:)/) || _validator.default.isURL(url) || _validator.default.isURL(`${baseHost}${url}`)) {
        url = this.update(url);
        this.set('value', this._makeAbsoluteUrl(url));
      }
    },

    _makeAbsoluteUrl(url) {
      if (isRelative(url)) {
        url = joinUrlParts(this.baseUrl, url);
      }

      return url;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-navitem", ["exports", "ghost-admin/mixins/validation-state", "ghost-admin/utils/bound-one-way"], function (_exports, _validationState, _boundOneWay) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#unless this.navItem.isNew}}
      <span class="gh-blognav-grab">
          {{svg-jar "grab"}}
          <span class="sr-only">Reorder</span>
      </span>
  {{/unless}}
  
  <div class="gh-blognav-line">
      <GhValidationStatusContainer
          @tagName="span"
          @class="gh-blognav-label"
          @errors={{this.navItem.errors}}
          @property="label"
          @hasValidated={{this.navItem.hasValidated}}
      >
          <GhTrimFocusInput
              @shouldFocus={{this.navItem.last}}
              @placeholder="Label"
              @value={{readonly this.label}}
              @input={{action "updateLabel" value="target.value"}}
              @keyPress={{action "clearLabelErrors"}}
              @focus-out={{action "updateLabel" this.label}} data-test-input="label" />
          <GhErrorMessage
              @errors={{this.navItem.errors}}
              @property="label" data-test-error="label" />
      </GhValidationStatusContainer>
      <GhValidationStatusContainer
          @tagName="span"
          @class="gh-blognav-url"
          @errors={{this.navItem.errors}}
          @property="url"
          @hasValidated={{this.navItem.hasValidated}}
      >
          <GhNavitemUrlInput
              @baseUrl={{this.baseUrl}}
              @isNew={{this.navItem.isNew}}
              @url={{readonly this.url}}
              @update={{action "updateUrl"}}
              @clearErrors={{action "clearUrlErrors"}} data-test-input="url" />
          <GhErrorMessage
              @errors={{this.navItem.errors}}
              @property="url" data-test-error="url" />
      </GhValidationStatusContainer>
  </div>
  
  {{#if this.navItem.isNew}}
      <button type="button" class="gh-blognav-add" {{action "addItem" this.navItem}}>
          {{svg-jar "add"}}<span class="sr-only">Add</span>
      </button>
  {{else}}
      <button type="button" class="gh-blognav-delete" {{action "deleteItem" this.navItem}}>
          {{svg-jar "trash"}}<span class="sr-only">Delete</span>
      </button>
  {{/if}}
  
  */
  {
    "id": "DOa0OXnJ",
    "block": "{\"symbols\":[],\"statements\":[[6,[37,2],[[32,0,[\"navItem\",\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"span\"],[14,0,\"gh-blognav-grab\"],[12],[2,\"\\n        \"],[1,[30,[36,1],[\"grab\"],null]],[2,\"\\n        \"],[10,\"span\"],[14,0,\"sr-only\"],[12],[2,\"Reorder\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[10,\"div\"],[14,0,\"gh-blognav-line\"],[12],[2,\"\\n    \"],[8,\"gh-validation-status-container\",[],[[\"@tagName\",\"@class\",\"@errors\",\"@property\",\"@hasValidated\"],[\"span\",\"gh-blognav-label\",[32,0,[\"navItem\",\"errors\"]],\"label\",[32,0,[\"navItem\",\"hasValidated\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[8,\"gh-trim-focus-input\",[[24,\"data-test-input\",\"label\"]],[[\"@shouldFocus\",\"@placeholder\",\"@value\",\"@input\",\"@keyPress\",\"@focus-out\"],[[32,0,[\"navItem\",\"last\"]],\"Label\",[30,[36,3],[[32,0,[\"label\"]]],null],[30,[36,0],[[32,0],\"updateLabel\"],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"clearLabelErrors\"],null],[30,[36,0],[[32,0],\"updateLabel\",[32,0,[\"label\"]]],null]]],null],[2,\"\\n        \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"label\"]],[[\"@errors\",\"@property\"],[[32,0,[\"navItem\",\"errors\"]],\"label\"]],null],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[8,\"gh-validation-status-container\",[],[[\"@tagName\",\"@class\",\"@errors\",\"@property\",\"@hasValidated\"],[\"span\",\"gh-blognav-url\",[32,0,[\"navItem\",\"errors\"]],\"url\",[32,0,[\"navItem\",\"hasValidated\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[8,\"gh-navitem-url-input\",[[24,\"data-test-input\",\"url\"]],[[\"@baseUrl\",\"@isNew\",\"@url\",\"@update\",\"@clearErrors\"],[[32,0,[\"baseUrl\"]],[32,0,[\"navItem\",\"isNew\"]],[30,[36,3],[[32,0,[\"url\"]]],null],[30,[36,0],[[32,0],\"updateUrl\"],null],[30,[36,0],[[32,0],\"clearUrlErrors\"],null]]],null],[2,\"\\n        \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"url\"]],[[\"@errors\",\"@property\"],[[32,0,[\"navItem\",\"errors\"]],\"url\"]],null],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,4],[[32,0,[\"navItem\",\"isNew\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[11,\"button\"],[24,0,\"gh-blognav-add\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"addItem\",[32,0,[\"navItem\"]]],null],[12],[2,\"\\n        \"],[1,[30,[36,1],[\"add\"],null]],[10,\"span\"],[14,0,\"sr-only\"],[12],[2,\"Add\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[11,\"button\"],[24,0,\"gh-blognav-delete\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"deleteItem\",[32,0,[\"navItem\"]]],null],[12],[2,\"\\n        \"],[1,[30,[36,1],[\"trash\"],null]],[10,\"span\"],[14,0,\"sr-only\"],[12],[2,\"Delete\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"unless\",\"readonly\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-navitem.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend(_validationState.default, {
    classNames: 'gh-blognav-item',
    classNameBindings: ['errorClass', 'navItem.isNew::gh-blognav-item--sortable'],
    new: false,

    // closure actions
    addItem() {},

    deleteItem() {},

    updateUrl() {},

    updateLabel() {},

    label: (0, _boundOneWay.default)('navItem.label'),
    url: (0, _boundOneWay.default)('navItem.url'),
    errors: Ember.computed.readOnly('navItem.errors'),
    errorClass: Ember.computed('hasError', function () {
      return this.hasError ? 'gh-blognav-item--error' : '';
    }),
    actions: {
      addItem(item) {
        this.addItem(item);
      },

      deleteItem(item) {
        this.deleteItem(item);
      },

      updateUrl(value) {
        return this.updateUrl(value, this.navItem);
      },

      updateLabel(value) {
        this.set('label', value);
        return this.updateLabel(value, this.navItem);
      },

      clearLabelErrors() {
        this.get('navItem.errors').remove('label');
      },

      clearUrlErrors() {
        this.get('navItem.errors').remove('url');
      }

    },

    keyPress(event) {
      // enter key
      if (event.keyCode === 13 && this.get('navItem.isNew')) {
        event.preventDefault();
        Ember.run.scheduleOnce('actions', this, this.send, 'addItem', this.navItem);
      }
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-notification", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-notification-icon">
      {{#if this.message.icon}}
          {{svg-jar this.message.icon}}
      {{else}}
          {{#if (eq this.message.type "success")}}
              {{svg-jar "check-circle"}}
          {{else if (eq this.message.type "error")}}
              {{svg-jar "warning-stroke"}}
          {{else if (eq this.message.type "warn")}}
              {{svg-jar "warning-stroke"}}
          {{else}}
              {{svg-jar "check-circle"}}
          {{/if}}
      {{/if}}
  </div>
  <div class="gh-notification-content" data-test-text="notification-content">
      <span class="gh-notification-title">{{this.message.message}}</span>
      
      {{#if this.message.description}}
          <p>{{this.message.description}}</p>
      {{/if}}
  
      {{#if this.message.actions}}
          <span class="gh-notification-actions">{{this.message.actions}}</span>
      {{/if}}
  </div>
  <button class="gh-notification-close" {{action "closeNotification"}} data-test-button="close-notification">
      {{svg-jar "close"}}<span class="hidden">Close</span>
  </button>
  
  */
  {
    "id": "IeXbloG8",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"gh-notification-icon\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"message\",\"icon\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[1,[30,[36,0],[[32,0,[\"message\",\"icon\"]]],null]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[30,[36,1],[[32,0,[\"message\",\"type\"]],\"success\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[1,[30,[36,0],[\"check-circle\"],null]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[30,[36,1],[[32,0,[\"message\",\"type\"]],\"error\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[1,[30,[36,0],[\"warning-stroke\"],null]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[30,[36,1],[[32,0,[\"message\",\"type\"]],\"warn\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[1,[30,[36,0],[\"warning-stroke\"],null]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[1,[30,[36,0],[\"check-circle\"],null]],[2,\"\\n        \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[13],[2,\"\\n\"],[10,\"div\"],[14,0,\"gh-notification-content\"],[14,\"data-test-text\",\"notification-content\"],[12],[2,\"\\n    \"],[10,\"span\"],[14,0,\"gh-notification-title\"],[12],[1,[32,0,[\"message\",\"message\"]]],[13],[2,\"\\n    \\n\"],[6,[37,2],[[32,0,[\"message\",\"description\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"p\"],[12],[1,[32,0,[\"message\",\"description\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,0,[\"message\",\"actions\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"span\"],[14,0,\"gh-notification-actions\"],[12],[1,[32,0,[\"message\",\"actions\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"],[11,\"button\"],[24,0,\"gh-notification-close\"],[24,\"data-test-button\",\"close-notification\"],[4,[38,3],[[32,0],\"closeNotification\"],null],[12],[2,\"\\n    \"],[1,[30,[36,0],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"eq\",\"if\",\"action\"]}",
    "moduleName": "ghost-admin/components/gh-notification.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    notifications: Ember.inject.service(),
    tagName: 'article',
    classNames: ['gh-notification', 'gh-notification-passive'],
    classNameBindings: ['typeClass'],
    message: null,
    typeClass: Ember.computed('message.type', function () {
      let type = this.get('message.type');
      let classes = '';
      let typeMapping;
      typeMapping = {
        error: 'red',
        warn: 'yellow'
      };

      if (typeMapping[type] !== undefined) {
        classes += `gh-notification-${typeMapping[type]}`;
      }

      return classes;
    }),

    didInsertElement() {
      this._super(...arguments);

      this._animationEndHandler = Ember.run.bind(this, function () {
        if (event.animationName === 'fade-out') {
          this.notifications.closeNotification(this.message);
        }
      });
      this.element.addEventListener('animationend', this._animationEndHandler);
    },

    willDestroyElement() {
      this._super(...arguments);

      this.element.removeEventListener('animationend', this._animationEndHandler);
    },

    actions: {
      closeNotification() {
        this.notifications.closeNotification(this.message);
      }

    }
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-notifications", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#each this.messages as |message|}}
      <GhNotification @message={{message}} />
  {{/each}}
  
  */
  {
    "id": "+/C8LDFN",
    "block": "{\"symbols\":[\"message\"],\"statements\":[[6,[37,1],[[30,[36,0],[[30,[36,0],[[32,0,[\"messages\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-notification\",[],[[\"@message\"],[[32,1]]],null],[2,\"\\n\"]],\"parameters\":[1]}]]]],\"hasEval\":false,\"upvars\":[\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/gh-notifications.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    notifications: Ember.inject.service(),
    tagName: 'aside',
    classNames: 'gh-notifications',
    messages: Ember.computed.alias('notifications.notifications')
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-portal-links", ["exports", "ghost-admin/utils/copy-text-to-clipboard", "ember-concurrency"], function (_exports, _copyTextToClipboard, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-portal-links-container" {{did-insert (perform this.fetchProducts)}}>
      <div class="gh-portal-links-main">
          <h2>Links</h2>
          <p>Use these {{if isLink "links" "data attributes"}} in your theme to show pages of Portal.</p>
          <table class="gh-portal-links-table">
              <tr class="header">
                  <td><h4>Page</h4></td>
                  <td>
                      <div class='toggle-header'>
                          <h4>{{sectionHeaderLabel}}</h4>
                          <h4 class='gh-portal-links-cell toggle' onclick={{action "toggleShowLinks"}}>{{this.toggleValue}}</h4>
                      </div>
                  </td>
              </tr>
              <tr>
                  <td colspan="2"><hr class="gh-portal-links-group-divider first" /></td>
              </tr>
              <tr>
                  <td class="pagename">Default</td>
                  <td class='page-url'>
                      <div class="gh-portal-page-url-container">
                          <div class="page-url-label">
                              {{#if isLink}}
                                  <span class="page-url-disabled">{{this.siteUrl}}/</span><span>#/portal</span>
                              {{else}}
                                  data-portal
                              {{/if}}
                          </div>
                          <button type="button" {{action (perform this.copyStaticLink '')}} class="gh-portal-setting-copy">
                              {{#if (and this.copyStaticLink.isRunning (eq this.copiedPrice ""))}}
                                  {{svg-jar "check-circle" class="w3 v-mid mr2 stroke-darkgrey"}} Copied
                              {{else}}
                                  <span data-tooltip="Copy">{{svg-jar "copy" class="w4 v-mid fill-darkgrey"}}</span>
                              {{/if}}
                          </button>
                      </div>
                  </td>
              </tr>
              <tr>
                  <td colspan="2"><hr class="gh-portal-links-group-divider" /></td>
              </tr>
              <tr>
                  <td class='pagename'>Sign in</td>
                  <td class='page-url'>
                      <div class="gh-portal-page-url-container">
                          <div class="page-url-label">
                              {{#if isLink}}
                                  <span class="page-url-disabled">{{this.siteUrl}}/</span><span>#/portal/signin</span>
                              {{else}}
                                  data-portal="signin"
                              {{/if}}
                          </div>
                          <button type="button" {{action (perform this.copyStaticLink "signin")}} class="gh-portal-setting-copy">
                              {{#if (and this.copyStaticLink.isRunning (eq this.copiedPrice "signin"))}}
                                  {{svg-jar "check-circle" class="w3 v-mid mr2 stroke-darkgrey"}} Copied
                              {{else}}
                                  <span data-tooltip="Copy">{{svg-jar "copy" class="w4 v-mid fill-darkgrey"}}</span>
                              {{/if}}
                          </button>
                      </div>
                  </td>
              </tr>
              <tr>
                  <td class='pagename'>Sign up</td>
                  <td class='page-url'>
                      <div class="gh-portal-page-url-container">
                          <div class="page-url-label">
                              {{#if isLink}}
                                  <span class="page-url-disabled">{{this.siteUrl}}/</span><span>#/portal/signup</span>
                              {{else}}
                                  data-portal="signup"
                              {{/if}}
                          </div>
                          <button type="button" {{action (perform this.copyStaticLink "signup")}} class="gh-portal-setting-copy">
                              {{#if (and this.copyStaticLink.isRunning (eq this.copiedPrice "signup"))}}
                                  {{svg-jar "check-circle" class="w3 v-mid mr2 stroke-darkgrey"}} Copied
                              {{else}}
                                  <span data-tooltip="Copy">{{svg-jar "copy" class="w4 v-mid fill-darkgrey"}}</span>
                              {{/if}}
                          </button>
                      </div>
                  </td>
              </tr>
              {{#if (and (feature "multipleProducts") (gt this.products.length 1))}}
                  <tr>
                      <td colspan="2"><hr class="gh-portal-links-group-divider" /></td>
                  </tr>
                  <tr>
                      <td class='pagename strong'>Tier</td>
                      <td class='page-url'>
                           <span
                                  class="gh-select"
                                  data-select-text="test"
                                  tabindex="0"
                              >
                                  <OneWaySelect
                                      @id="portal-product-link"
                                      @name="portal[product-link]"
                                      @options={{this.productOptions}}
                                      @optionValuePath="name"
                                      @optionLabelPath="label"
                                      @value={{this.selectedProduct}}
                                      @update={{action "setSelectedProduct"}}
                                  />
                                  {{svg-jar "arrow-down-small"}}
                              </span>
                      </td>
                  </tr>
                  <tr>
                      <td class='pagename'>Sign up/Monthly</td>
                      <td class='page-url'>
                          <div class="gh-portal-page-url-container">
                              <div class="page-url-label">
                                  {{#if isLink}}
                                      <span class="page-url-disabled">{{this.siteUrl}}/</span><span>#/portal/signup{{this.selectedProductIdPath}}/monthly</span>
                                  {{else}}
                                      data-portal="signup{{this.selectedProductIdPath}}/monthly"
                                  {{/if}}
                              </div>
                              <button type="button" {{action (perform this.copyProductSignupLink "monthly")}} class="gh-portal-setting-copy">
                                  {{#if (and this.copyProductSignupLink.isRunning (eq this.copiedSignupInterval "monthly"))}}
                                      {{svg-jar "check-circle" class="w3 v-mid mr2 stroke-darkgrey"}} Copied
                                  {{else}}
                                      <span data-tooltip="Copy">{{svg-jar "copy" class="w4 v-mid fill-darkgrey"}}</span>
                                  {{/if}}
                              </button>
                          </div>
                      </td>
                  </tr>
                  <tr>
                      <td class='pagename'>Sign up/Yearly</td>
                      <td class='page-url'>
                          <div class="gh-portal-page-url-container">
                              <div class="page-url-label">
                                  {{#if isLink}}
                                      <span class="page-url-disabled">{{this.siteUrl}}/</span><span>#/portal/signup{{this.selectedProductIdPath}}/yearly</span>
                                  {{else}}
                                      data-portal="signup{{this.selectedProductIdPath}}/yearly"
                                  {{/if}}
                              </div>
                              <button type="button" {{action (perform this.copyProductSignupLink "yearly")}} class="gh-portal-setting-copy">
                                  {{#if (and this.copyProductSignupLink.isRunning (eq this.copiedSignupInterval "yearly"))}}
                                      {{svg-jar "check-circle" class="w3 v-mid mr2 stroke-darkgrey"}} Copied
                                  {{else}}
                                      <span data-tooltip="Copy">{{svg-jar "copy" class="w4 v-mid fill-darkgrey"}}</span>
                                  {{/if}}
                              </button>
                          </div>
                      </td>
                  </tr>
                  <tr>
                      <td class='pagename'>Sign up/Free</td>
                      <td class='page-url'>
                          <div class="gh-portal-page-url-container">
                              <div class="page-url-label">
                                  {{#if isLink}}
                                      <span class="page-url-disabled">{{this.siteUrl}}/</span><span>#/portal/signup/free</span>
                                  {{else}}
                                      data-portal="signup/free"
                                  {{/if}}
                              </div>
                              <button type="button" {{action (perform this.copyStaticLink "signup/free")}} class="gh-portal-setting-copy">
                                  {{#if (and this.copyStaticLink.isRunning (eq this.copiedPrice "signup/free"))}}
                                      {{svg-jar "check-circle" class="w3 v-mid mr2 stroke-darkgrey"}} Copied
                                  {{else}}
                                      <span data-tooltip="Copy">{{svg-jar "copy" class="w4 v-mid fill-darkgrey"}}</span>
                                  {{/if}}
                              </button>
                          </div>
                      </td>
                  </tr>
              {{else}}
                  <tr>
                      <td class='pagename'>Sign up/Monthly</td>
                      <td class='page-url'>
                          <div class="gh-portal-page-url-container">
                              <div class="page-url-label">
                                  {{#if isLink}}
                                      <span class="page-url-disabled">{{this.siteUrl}}/</span><span>#/portal/signup/monthly</span>
                                  {{else}}
                                      data-portal="signup/monthly"
                                  {{/if}}
                              </div>
                              <button type="button" {{action (perform this.copyStaticLink "signup/monthly")}} class="gh-portal-setting-copy">
                                  {{#if (and this.copyStaticLink.isRunning (eq this.copiedPrice "signup/monthly"))}}
                                      {{svg-jar "check-circle" class="w3 v-mid mr2 stroke-darkgrey"}} Copied
                                  {{else}}
                                      <span data-tooltip="Copy">{{svg-jar "copy" class="w4 v-mid fill-darkgrey"}}</span>
                                  {{/if}}
                              </button>
                          </div>
                      </td>
                  </tr>
                  <tr>
                      <td class='pagename'>Sign up/Yearly</td>
                      <td class='page-url'>
                          <div class="gh-portal-page-url-container">
                              <div class="page-url-label">
                                  {{#if isLink}}
                                      <span class="page-url-disabled">{{this.siteUrl}}/</span><span>#/portal/signup/yearly</span>
                                  {{else}}
                                      data-portal="signup/yearly"
                                  {{/if}}
                              </div>
                              <button type="button" {{action (perform this.copyStaticLink "signup/yearly")}} class="gh-portal-setting-copy">
                                  {{#if (and this.copyStaticLink.isRunning (eq this.copiedPrice "signup/yearly"))}}
                                      {{svg-jar "check-circle" class="w3 v-mid mr2 stroke-darkgrey"}} Copied
                                  {{else}}
                                      <span data-tooltip="Copy">{{svg-jar "copy" class="w4 v-mid fill-darkgrey"}}</span>
                                  {{/if}}
                              </button>
                          </div>
                      </td>
                  </tr>
                  <tr>
                      <td class='pagename'>Sign up/Free</td>
                      <td class='page-url'>
                          <div class="gh-portal-page-url-container">
                              <div class="page-url-label">
                                  {{#if isLink}}
                                      <span class="page-url-disabled">{{this.siteUrl}}/</span><span>#/portal/signup/free</span>
                                  {{else}}
                                      data-portal="signup/free"
                                  {{/if}}
                              </div>
                              <button type="button" {{action (perform this.copyStaticLink "signup/free")}} class="gh-portal-setting-copy">
                                  {{#if (and this.copyStaticLink.isRunning (eq this.copiedPrice "signup/free"))}}
                                      {{svg-jar "check-circle" class="w3 v-mid mr2 stroke-darkgrey"}} Copied
                                  {{else}}
                                      <span data-tooltip="Copy">{{svg-jar "copy" class="w4 v-mid fill-darkgrey"}}</span>
                                  {{/if}}
                              </button>
                          </div>
                      </td>
                  </tr>
              {{/if}}
              <tr>
                  <td colspan="2"><hr class="gh-portal-links-group-divider" /></td>
              </tr>
              <tr>
                  <td class='pagename'>Account</td>
                  <td class='page-url'>
                      <div class="gh-portal-page-url-container">
                          <div class="page-url-label">
                              {{#if isLink}}
                                  <span class="page-url-disabled">{{this.siteUrl}}/</span><span>#/portal/account</span>
                              {{else}}
                                  data-portal="account"
                              {{/if}}
                          </div>
                          <button type="button" {{action (perform this.copyStaticLink "account")}} class="gh-portal-setting-copy">
                              {{#if (and this.copyStaticLink.isRunning (eq this.copiedPrice "account"))}}
                                  {{svg-jar "check-circle" class="w3 v-mid mr2 stroke-darkgrey"}} Copied
                              {{else}}
                                  <span data-tooltip="Copy">{{svg-jar "copy" class="w4 v-mid fill-darkgrey"}}</span>
                              {{/if}}
                          </button>
                      </div>
                  </td>
              </tr>
              <tr>
                  <td class='pagename'>Account/Plans</td>
                  <td class='page-url'>
                      <div class="gh-portal-page-url-container">
                          <div class="page-url-label">
                              {{#if isLink}}
                                  <span class="page-url-disabled">{{this.siteUrl}}/</span><span>#/portal/account/plans</span>
                              {{else}}
                                  data-portal="account/plans"
                              {{/if}}
                          </div>
                          <button type="button" {{action (perform this.copyStaticLink "account/plans")}} class="gh-portal-setting-copy">
                              {{#if (and this.copyStaticLink.isRunning (eq this.copiedPrice "account/plans"))}}
                                  {{svg-jar "check-circle" class="w3 v-mid mr2 stroke-darkgrey"}} Copied
                              {{else}}
                                  <span data-tooltip="Copy">{{svg-jar "copy" class="w4 v-mid fill-darkgrey"}}</span>
                              {{/if}}
                          </button>
                      </div>
                  </td>
              </tr>
              <tr>
                  <td class='pagename'>Account/Profile</td>
                  <td class='page-url'>
                      <div class="gh-portal-page-url-container">
                          <div class="page-url-label">
                              {{#if isLink}}
                                  <span class="page-url-disabled">{{this.siteUrl}}/</span><span>#/portal/account/profile</span>
                              {{else}}
                                  data-portal="account/profile"
                              {{/if}}
                          </div>
                          <button type="button" {{action (perform this.copyStaticLink "account/profile")}} class="gh-portal-setting-copy">
                              {{#if (and this.copyStaticLink.isRunning (eq this.copiedPrice "account/profile"))}}
                                  {{svg-jar "check-circle" class="w3 v-mid mr2 stroke-darkgrey"}} Copied
                              {{else}}
                                  <span data-tooltip="Copy">{{svg-jar "copy" class="w4 v-mid fill-darkgrey"}}</span>
                              {{/if}}
                          </button>
                      </div>
                  </td>
              </tr>
          </table>
      </div>
  </div>
  
  */
  {
    "id": "NPDUmxn+",
    "block": "{\"symbols\":[],\"statements\":[[11,\"div\"],[24,0,\"gh-portal-links-container\"],[4,[38,7],[[30,[36,3],[[32,0,[\"fetchProducts\"]]],null]],null],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-portal-links-main\"],[12],[2,\"\\n        \"],[10,\"h2\"],[12],[2,\"Links\"],[13],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"Use these \"],[1,[30,[36,2],[[35,1],\"links\",\"data attributes\"],null]],[2,\" in your theme to show pages of Portal.\"],[13],[2,\"\\n        \"],[10,\"table\"],[14,0,\"gh-portal-links-table\"],[12],[2,\"\\n            \"],[10,\"tr\"],[14,0,\"header\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[10,\"h4\"],[12],[2,\"Page\"],[13],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"toggle-header\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[12],[1,[34,8]],[13],[2,\"\\n                        \"],[10,\"h4\"],[14,0,\"gh-portal-links-cell toggle\"],[15,\"onclick\",[30,[36,4],[[32,0],\"toggleShowLinks\"],null]],[12],[1,[32,0,[\"toggleValue\"]]],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[14,\"colspan\",\"2\"],[12],[10,\"hr\"],[14,0,\"gh-portal-links-group-divider first\"],[12],[13],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[14,0,\"pagename\"],[12],[2,\"Default\"],[13],[2,\"\\n                \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-portal-page-url-container\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"page-url-label\"],[12],[2,\"\\n\"],[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"page-url-disabled\"],[12],[1,[32,0,[\"siteUrl\"]]],[2,\"/\"],[13],[10,\"span\"],[12],[2,\"#/portal\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                data-portal\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-portal-setting-copy\"],[24,4,\"button\"],[4,[38,4],[[32,0],[30,[36,3],[[32,0,[\"copyStaticLink\"]],\"\"],null]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[32,0,[\"copyStaticLink\",\"isRunning\"]],[30,[36,5],[[32,0,[\"copiedPrice\"]],\"\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[1,[30,[36,0],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-darkgrey\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,\"data-tooltip\",\"Copy\"],[12],[1,[30,[36,0],[\"copy\"],[[\"class\"],[\"w4 v-mid fill-darkgrey\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[14,\"colspan\",\"2\"],[12],[10,\"hr\"],[14,0,\"gh-portal-links-group-divider\"],[12],[13],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[14,0,\"pagename\"],[12],[2,\"Sign in\"],[13],[2,\"\\n                \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-portal-page-url-container\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"page-url-label\"],[12],[2,\"\\n\"],[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"page-url-disabled\"],[12],[1,[32,0,[\"siteUrl\"]]],[2,\"/\"],[13],[10,\"span\"],[12],[2,\"#/portal/signin\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                data-portal=\\\"signin\\\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-portal-setting-copy\"],[24,4,\"button\"],[4,[38,4],[[32,0],[30,[36,3],[[32,0,[\"copyStaticLink\"]],\"signin\"],null]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[32,0,[\"copyStaticLink\",\"isRunning\"]],[30,[36,5],[[32,0,[\"copiedPrice\"]],\"signin\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[1,[30,[36,0],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-darkgrey\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,\"data-tooltip\",\"Copy\"],[12],[1,[30,[36,0],[\"copy\"],[[\"class\"],[\"w4 v-mid fill-darkgrey\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[14,0,\"pagename\"],[12],[2,\"Sign up\"],[13],[2,\"\\n                \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-portal-page-url-container\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"page-url-label\"],[12],[2,\"\\n\"],[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"page-url-disabled\"],[12],[1,[32,0,[\"siteUrl\"]]],[2,\"/\"],[13],[10,\"span\"],[12],[2,\"#/portal/signup\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                data-portal=\\\"signup\\\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-portal-setting-copy\"],[24,4,\"button\"],[4,[38,4],[[32,0],[30,[36,3],[[32,0,[\"copyStaticLink\"]],\"signup\"],null]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[32,0,[\"copyStaticLink\",\"isRunning\"]],[30,[36,5],[[32,0,[\"copiedPrice\"]],\"signup\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[1,[30,[36,0],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-darkgrey\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,\"data-tooltip\",\"Copy\"],[12],[1,[30,[36,0],[\"copy\"],[[\"class\"],[\"w4 v-mid fill-darkgrey\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[30,[36,10],[\"multipleProducts\"],null],[30,[36,9],[[32,0,[\"products\",\"length\"]],1],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"tr\"],[12],[2,\"\\n                    \"],[10,\"td\"],[14,\"colspan\",\"2\"],[12],[10,\"hr\"],[14,0,\"gh-portal-links-group-divider\"],[12],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"tr\"],[12],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"pagename strong\"],[12],[2,\"Tier\"],[13],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                         \"],[10,\"span\"],[14,0,\"gh-select\"],[14,\"data-select-text\",\"test\"],[14,\"tabindex\",\"0\"],[12],[2,\"\\n                                \"],[8,\"one-way-select\",[],[[\"@id\",\"@name\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@value\",\"@update\"],[\"portal-product-link\",\"portal[product-link]\",[32,0,[\"productOptions\"]],\"name\",\"label\",[32,0,[\"selectedProduct\"]],[30,[36,4],[[32,0],\"setSelectedProduct\"],null]]],null],[2,\"\\n                                \"],[1,[30,[36,0],[\"arrow-down-small\"],null]],[2,\"\\n                            \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"tr\"],[12],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"pagename\"],[12],[2,\"Sign up/Monthly\"],[13],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-portal-page-url-container\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"page-url-label\"],[12],[2,\"\\n\"],[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,0,\"page-url-disabled\"],[12],[1,[32,0,[\"siteUrl\"]]],[2,\"/\"],[13],[10,\"span\"],[12],[2,\"#/portal/signup\"],[1,[32,0,[\"selectedProductIdPath\"]]],[2,\"/monthly\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    data-portal=\\\"signup\"],[1,[32,0,[\"selectedProductIdPath\"]]],[2,\"/monthly\\\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                            \"],[11,\"button\"],[24,0,\"gh-portal-setting-copy\"],[24,4,\"button\"],[4,[38,4],[[32,0],[30,[36,3],[[32,0,[\"copyProductSignupLink\"]],\"monthly\"],null]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[32,0,[\"copyProductSignupLink\",\"isRunning\"]],[30,[36,5],[[32,0,[\"copiedSignupInterval\"]],\"monthly\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[1,[30,[36,0],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-darkgrey\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,\"data-tooltip\",\"Copy\"],[12],[1,[30,[36,0],[\"copy\"],[[\"class\"],[\"w4 v-mid fill-darkgrey\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"tr\"],[12],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"pagename\"],[12],[2,\"Sign up/Yearly\"],[13],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-portal-page-url-container\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"page-url-label\"],[12],[2,\"\\n\"],[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,0,\"page-url-disabled\"],[12],[1,[32,0,[\"siteUrl\"]]],[2,\"/\"],[13],[10,\"span\"],[12],[2,\"#/portal/signup\"],[1,[32,0,[\"selectedProductIdPath\"]]],[2,\"/yearly\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    data-portal=\\\"signup\"],[1,[32,0,[\"selectedProductIdPath\"]]],[2,\"/yearly\\\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                            \"],[11,\"button\"],[24,0,\"gh-portal-setting-copy\"],[24,4,\"button\"],[4,[38,4],[[32,0],[30,[36,3],[[32,0,[\"copyProductSignupLink\"]],\"yearly\"],null]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[32,0,[\"copyProductSignupLink\",\"isRunning\"]],[30,[36,5],[[32,0,[\"copiedSignupInterval\"]],\"yearly\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[1,[30,[36,0],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-darkgrey\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,\"data-tooltip\",\"Copy\"],[12],[1,[30,[36,0],[\"copy\"],[[\"class\"],[\"w4 v-mid fill-darkgrey\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"tr\"],[12],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"pagename\"],[12],[2,\"Sign up/Free\"],[13],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-portal-page-url-container\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"page-url-label\"],[12],[2,\"\\n\"],[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,0,\"page-url-disabled\"],[12],[1,[32,0,[\"siteUrl\"]]],[2,\"/\"],[13],[10,\"span\"],[12],[2,\"#/portal/signup/free\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    data-portal=\\\"signup/free\\\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                            \"],[11,\"button\"],[24,0,\"gh-portal-setting-copy\"],[24,4,\"button\"],[4,[38,4],[[32,0],[30,[36,3],[[32,0,[\"copyStaticLink\"]],\"signup/free\"],null]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[32,0,[\"copyStaticLink\",\"isRunning\"]],[30,[36,5],[[32,0,[\"copiedPrice\"]],\"signup/free\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[1,[30,[36,0],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-darkgrey\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,\"data-tooltip\",\"Copy\"],[12],[1,[30,[36,0],[\"copy\"],[[\"class\"],[\"w4 v-mid fill-darkgrey\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[10,\"tr\"],[12],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"pagename\"],[12],[2,\"Sign up/Monthly\"],[13],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-portal-page-url-container\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"page-url-label\"],[12],[2,\"\\n\"],[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,0,\"page-url-disabled\"],[12],[1,[32,0,[\"siteUrl\"]]],[2,\"/\"],[13],[10,\"span\"],[12],[2,\"#/portal/signup/monthly\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    data-portal=\\\"signup/monthly\\\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                            \"],[11,\"button\"],[24,0,\"gh-portal-setting-copy\"],[24,4,\"button\"],[4,[38,4],[[32,0],[30,[36,3],[[32,0,[\"copyStaticLink\"]],\"signup/monthly\"],null]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[32,0,[\"copyStaticLink\",\"isRunning\"]],[30,[36,5],[[32,0,[\"copiedPrice\"]],\"signup/monthly\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[1,[30,[36,0],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-darkgrey\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,\"data-tooltip\",\"Copy\"],[12],[1,[30,[36,0],[\"copy\"],[[\"class\"],[\"w4 v-mid fill-darkgrey\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"tr\"],[12],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"pagename\"],[12],[2,\"Sign up/Yearly\"],[13],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-portal-page-url-container\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"page-url-label\"],[12],[2,\"\\n\"],[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,0,\"page-url-disabled\"],[12],[1,[32,0,[\"siteUrl\"]]],[2,\"/\"],[13],[10,\"span\"],[12],[2,\"#/portal/signup/yearly\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    data-portal=\\\"signup/yearly\\\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                            \"],[11,\"button\"],[24,0,\"gh-portal-setting-copy\"],[24,4,\"button\"],[4,[38,4],[[32,0],[30,[36,3],[[32,0,[\"copyStaticLink\"]],\"signup/yearly\"],null]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[32,0,[\"copyStaticLink\",\"isRunning\"]],[30,[36,5],[[32,0,[\"copiedPrice\"]],\"signup/yearly\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[1,[30,[36,0],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-darkgrey\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,\"data-tooltip\",\"Copy\"],[12],[1,[30,[36,0],[\"copy\"],[[\"class\"],[\"w4 v-mid fill-darkgrey\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"tr\"],[12],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"pagename\"],[12],[2,\"Sign up/Free\"],[13],[2,\"\\n                    \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-portal-page-url-container\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"page-url-label\"],[12],[2,\"\\n\"],[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,0,\"page-url-disabled\"],[12],[1,[32,0,[\"siteUrl\"]]],[2,\"/\"],[13],[10,\"span\"],[12],[2,\"#/portal/signup/free\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    data-portal=\\\"signup/free\\\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                            \"],[11,\"button\"],[24,0,\"gh-portal-setting-copy\"],[24,4,\"button\"],[4,[38,4],[[32,0],[30,[36,3],[[32,0,[\"copyStaticLink\"]],\"signup/free\"],null]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[32,0,[\"copyStaticLink\",\"isRunning\"]],[30,[36,5],[[32,0,[\"copiedPrice\"]],\"signup/free\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[1,[30,[36,0],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-darkgrey\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,\"data-tooltip\",\"Copy\"],[12],[1,[30,[36,0],[\"copy\"],[[\"class\"],[\"w4 v-mid fill-darkgrey\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[14,\"colspan\",\"2\"],[12],[10,\"hr\"],[14,0,\"gh-portal-links-group-divider\"],[12],[13],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[14,0,\"pagename\"],[12],[2,\"Account\"],[13],[2,\"\\n                \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-portal-page-url-container\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"page-url-label\"],[12],[2,\"\\n\"],[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"page-url-disabled\"],[12],[1,[32,0,[\"siteUrl\"]]],[2,\"/\"],[13],[10,\"span\"],[12],[2,\"#/portal/account\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                data-portal=\\\"account\\\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-portal-setting-copy\"],[24,4,\"button\"],[4,[38,4],[[32,0],[30,[36,3],[[32,0,[\"copyStaticLink\"]],\"account\"],null]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[32,0,[\"copyStaticLink\",\"isRunning\"]],[30,[36,5],[[32,0,[\"copiedPrice\"]],\"account\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[1,[30,[36,0],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-darkgrey\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,\"data-tooltip\",\"Copy\"],[12],[1,[30,[36,0],[\"copy\"],[[\"class\"],[\"w4 v-mid fill-darkgrey\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[14,0,\"pagename\"],[12],[2,\"Account/Plans\"],[13],[2,\"\\n                \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-portal-page-url-container\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"page-url-label\"],[12],[2,\"\\n\"],[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"page-url-disabled\"],[12],[1,[32,0,[\"siteUrl\"]]],[2,\"/\"],[13],[10,\"span\"],[12],[2,\"#/portal/account/plans\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                data-portal=\\\"account/plans\\\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-portal-setting-copy\"],[24,4,\"button\"],[4,[38,4],[[32,0],[30,[36,3],[[32,0,[\"copyStaticLink\"]],\"account/plans\"],null]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[32,0,[\"copyStaticLink\",\"isRunning\"]],[30,[36,5],[[32,0,[\"copiedPrice\"]],\"account/plans\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[1,[30,[36,0],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-darkgrey\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,\"data-tooltip\",\"Copy\"],[12],[1,[30,[36,0],[\"copy\"],[[\"class\"],[\"w4 v-mid fill-darkgrey\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[14,0,\"pagename\"],[12],[2,\"Account/Profile\"],[13],[2,\"\\n                \"],[10,\"td\"],[14,0,\"page-url\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-portal-page-url-container\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"page-url-label\"],[12],[2,\"\\n\"],[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"page-url-disabled\"],[12],[1,[32,0,[\"siteUrl\"]]],[2,\"/\"],[13],[10,\"span\"],[12],[2,\"#/portal/account/profile\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                data-portal=\\\"account/profile\\\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-portal-setting-copy\"],[24,4,\"button\"],[4,[38,4],[[32,0],[30,[36,3],[[32,0,[\"copyStaticLink\"]],\"account/profile\"],null]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,6],[[32,0,[\"copyStaticLink\",\"isRunning\"]],[30,[36,5],[[32,0,[\"copiedPrice\"]],\"account/profile\"],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[1,[30,[36,0],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-darkgrey\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,\"data-tooltip\",\"Copy\"],[12],[1,[30,[36,0],[\"copy\"],[[\"class\"],[\"w4 v-mid fill-darkgrey\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"isLink\",\"if\",\"perform\",\"action\",\"eq\",\"and\",\"did-insert\",\"sectionHeaderLabel\",\"gt\",\"feature\"]}",
    "moduleName": "ghost-admin/components/gh-portal-links.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    config: Ember.inject.service(),
    store: Ember.inject.service(),
    settings: Ember.inject.service(),
    tagName: '',
    isLink: true,
    prices: null,
    copiedPrice: null,
    copiedSignupInterval: null,
    selectedProduct: null,
    products: null,
    toggleValue: Ember.computed('isLink', function () {
      return this.isLink ? 'Data attributes' : 'Links';
    }),
    sectionHeaderLabel: Ember.computed('isLink', function () {
      return this.isLink ? 'Link' : 'Data attribute';
    }),
    selectedProductIdPath: Ember.computed('selectedProduct', function () {
      const selectedProduct = this.selectedProduct;

      if (selectedProduct) {
        return `/${selectedProduct.name}`;
      }

      return '';
    }),
    productOptions: Ember.computed('products.[]', function () {
      if (this.products) {
        return this.products.map(product => {
          return {
            label: product.name,
            name: product.id
          };
        });
      }

      return [];
    }),

    init() {
      this._super(...arguments);

      this.siteUrl = this.config.get('blogUrl');
    },

    actions: {
      toggleShowLinks() {
        this.toggleProperty('isLink');
      },

      setSelectedProduct(product) {
        this.set('selectedProduct', product);
      }

    },
    fetchProducts: (0, _emberConcurrency.task)(function* () {
      const products = yield this.store.query('product', {
        filter: 'type:paid',
        include: 'monthly_price,yearly_price'
      }) || [];
      this.set('products', products);

      if (products.length > 0) {
        this.set('selectedProduct', {
          name: products.firstObject.id,
          label: products.firstObject.name
        });
      }
    }),
    copyStaticLink: (0, _emberConcurrency.task)(function* (id) {
      this.set('copiedPrice', id);
      let data = '';

      if (this.isLink) {
        data = id ? `#/portal/${id}` : `#/portal/`;
      } else {
        data = id ? `data-portal="${id}"` : `data-portal`;
      }

      (0, _copyTextToClipboard.default)(data);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 3000);
    }),
    copyProductSignupLink: (0, _emberConcurrency.task)(function* (interval) {
      this.set('copiedSignupInterval', interval);
      let data = '';

      if (this.isLink) {
        data = `#/portal/signup${this.selectedProductIdPath}/${interval}`;
      } else {
        data = `data-portal="signup${this.selectedProductIdPath}/${interval}"`;
      }

      (0, _copyTextToClipboard.default)(data);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 3000);
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-post-settings-menu", ["exports", "ghost-admin/utils/bound-one-way", "moment"], function (_exports, _boundOneWay, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div
      class="settings-menu-container {{if (and this.isViewingSubview (not (eq this.subview "email-settings"))) "settings-menu-container-wide"}}"
      {{did-insert this.setSidebarWidthFromElement}}
      {{did-update this.setSidebarWidthFromElement this.isViewingSubview}}
  >
      <div id="entry-controls">
          <div class="settings-menu settings-menu-pane settings-menu-pane-main">
              <div class="settings-menu-header">
                  <h4>{{capitalize this.post.displayName}} config</h4>
              </div>
              <div class="settings-menu-content">
                  <form>
                  <div class="form-group">
                      <label for="url">{{capitalize this.post.displayName}} URL</label>
                      {{!-- new posts don't have a preview link --}}
                      {{#unless this.post.isNew}}
                          {{#if (or this.post.isPublished this.post.isSent)}}
                          <a class="post-view-link" target="_blank" href="{{this.post.url}}">
                              Ver {{this.post.displayName}} {{svg-jar "external"}}
                          </a>
                          {{else if this.post.isScheduled}}
                          <a class="post-view-link" target="_blank" href="{{this.post.previewUrl}}">
                              Previsualizar {{svg-jar "external"}}
                          </a>
                          {{/if}}
                      {{/unless}}
  
                      <div class="gh-input-icon gh-icon-link">
                          {{svg-jar "link"}}
                          <GhTextInput
                              @class="post-setting-slug"
                              @id="url"
                              @name="post-setting-slug"
                              @value={{readonly this.slugValue}}
                              @input={{action (mut this.slugValue) value="target.value"}}
                              @focus-out={{action "updateSlug" this.slugValue}}
                              @stopEnterKeyDownPropagation={{true}} />
                      </div>
                      {{#if this.post.isSent}}
                          <GhUrlPreview @prefix="email" @slug={{this.uuidValue}} @tagName="p" @classNames="description" />
                      {{else}}
                          <GhUrlPreview @slug={{this.slugValue}} @tagName="p" @classNames="description" />
                      {{/if}}
                  </div>
  
                  <div class="form-group">
                      {{#if (or this.post.isDraft this.post.isPublished this.post.pastScheduledTime this.post.isSent)}}
                          <label>Fecha de publicacion</label>
                      {{else}}
                          <label>Fecha de publicacion programada</label>
                      {{/if}}
                      <GhDateTimePicker
                          @date={{this.post.publishedAtBlogDate}}
                          @time={{this.post.publishedAtBlogTime}}
                          @setDate={{action "setPublishedAtBlogDate"}}
                          @setTime={{action "setPublishedAtBlogTime"}}
                          @errors={{this.post.errors}}
                          @dateErrorProperty="publishedAtBlogDate"
                          @timeErrorProperty="publishedAtBlogTime"
                          @maxDate="now"
                          @disabled={{this.post.isScheduled}}
                          @isActive={{not this.isViewingSubview}}
                      />
                      {{#unless (or this.post.isDraft this.post.isPublished this.post.pastScheduledTime this.post.isSent)}}
                      <p>Utiliza el menu de publicacion para re programar</p>
                      {{/unless}}
                  </div>
  
                  {{#unless this.session.user.isContributor}}
                  <div class="form-group">
                      <label for="tag-input">Etiquetas</label>
                      <GhPsmTagsInput @post={{this.post}} @triggerId="tag-input" />
                  </div>
                  {{/unless}}
  
                  {{#if this.showVisibilityInput}}
                      {{#if (feature "multipleProducts")}}
                          <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="visibility">
                              <label for="visibility-input">{{capitalize @post.displayName}} permisos</label>
                              <GhPsmVisibilityInput @post={{this.post}} @triggerId="visibility-input" />
                          </GhFormGroup>
  
                          {{#if (eq this.post.visibility "filter")}}
                              <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="visibilityFilter" @class="nt3">
                                  <GhMembersSegmentSelect
                                      @hideLabels={{true}}
                                      @segment={{this.post.visibilitySegment}}
                                      @onChange={{action "setVisibility"}}
                                      @renderInPlace={{true}}
                                      @hideDefaultSegments={{true}}
                                      @hideOptionsWhenAllSelected={{true}}
                                  />
                                  <GhErrorMessage @errors={{this.post.errors}} @property="visibilityFilter" data-test-error="visibilityFilter" />
                              </GhFormGroup>
                          {{/if}}
                      {{else}}
                          <div class="form-group">
                              <label for="visibility-input">Permisos de la publicacion</label>
                              <GhPsmVisibilityInput @post={{this.post}} @triggerId="visibility-input" />
                          </div>
                      {{/if}}
                  {{/if}}
  
  
                  <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="customExcerpt">
                      <label for="custom-excerpt">Extracto</label>
                      <GhTextarea
                          @class="post-setting-custom-excerpt"
                          @id="custom-excerpt"
                          @name="post-setting-custom-excerpt"
                          @value={{readonly this.customExcerptScratch}}
                          @input={{action (mut this.customExcerptScratch) value="target.value"}}
                          @focus-out={{action "setCustomExcerpt" this.customExcerptScratch}}
                          @stopEnterKeyDownPropagation="true"
                          data-test-field="custom-excerpt"
                      />
                      <GhErrorMessage @errors={{this.post.errors}} @property="customExcerpt" data-test-error="custom-excerpt" />
                  </GhFormGroup>
  
                  {{#unless this.session.user.isAuthorOrContributor}}
                      <GhFormGroup @class="for-select" @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="authors" data-test-input="authors">
                          <label for="author-list">Autores</label>
                          <GhPsmAuthorsInput @selectedAuthors={{this.post.authors}} @updateAuthors={{action "changeAuthors"}} @triggerId="author-list" />
                          <GhErrorMessage @errors={{this.post.errors}} @property="authors" data-test-error="authors" />
                      </GhFormGroup>
                  {{/unless}}
  
                  <ul class="nav-list nav-list-block">
                      <li class="nav-list-item" {{action "showSubview" "meta-data"}} data-test-button="meta-data">
                          <button type="button">
                              <b>Meta datos</b>
                              <span>Contenido extra para los motores de busqueda</span>
                          </button>
                          {{svg-jar "arrow-right"}}
                      </li>
                      <li class="nav-list-item" {{action "showSubview" "twitter-data"}} data-test-button="twitter-data">
                          <button type="button">
                              <b>Twitter card</b>
                              <span>Customize structured data for Twitter</span>
                          </button>
                          {{svg-jar "arrow-right"}}
                      </li>
                      <li class="nav-list-item" {{action "showSubview" "facebook-data"}} data-test-button="facebook-data">
                          <button type="button">
                              <b>Facebook card</b>
                              <span>Customize Open Graph data</span>
                          </button>
                          {{svg-jar "arrow-right"}}
                      </li>
                      {{#if (and this.post.isPost showEmailNewsletter)}}
                          {{#if (not-eq this.settings.editorDefaultEmailRecipients "disabled")}}
                              <li class="nav-list-item" {{action "showSubview" "email-settings"}} data-test-button="email-settings">
                                  <button type="button">
                                      <b>Email newsletter</b>
                                      <span>Customize email settings</span>
                                  </button>
                                  {{svg-jar "arrow-right"}}
                              </li>
                          {{/if}}
                      {{/if}}
                      <li class="nav-list-item" {{action "showSubview" "codeinjection"}} data-test-button="codeinjection">
                          <button type="button">
                              <b>Inyection de codigo</b>
                              <span>Add styles/scripts to the header &amp; footer</span>
                          </button>
                          {{svg-jar "arrow-right"}}
                      </li>
                  </ul>
  
                  {{#unless this.session.user.isAuthorOrContributor}}
                  <div class="form-group for-checkbox">
                      <label class="checkbox" for="featured" {{action "toggleFeatured" bubbles="false"}}>
                          <input
                              type="checkbox"
                              checked={{this.post.featured}}
                              class="gh-input post-settings-featured"
                              onclick={{action (mut this.post.featured) value="target.checked"}}
                              data-test-checkbox="featured"
                          >
                          <span class="input-toggle-component"></span>
                          <p>Destacar este {{this.post.displayName}}</p>
                      </label>
                  </div>
                  {{/unless}}
  
                  <GhPsmTemplateSelect
                      @post={{this.post}}
                      @onTemplateSelect={{action (mut this.post.customTemplate)}} />
  
                  {{#unless this.post.isNew}}
                      <button type="button" class="gh-btn gh-btn-hover-red gh-btn-icon settings-menu-delete-button" {{action "deletePost"}}><span>{{svg-jar "trash"}} Delete {{this.post.displayName}}</span></button>
                  {{/unless}}
  
                  </form>
              </div>{{! .settings-menu-content }}
          </div>{{! .post-settings-menu }}
  
          {{#if this.isViewingSubview}}
          <div class="settings-menu settings-menu-pane {{unless (eq this.subview "email-settings") "settings-menu-pane-wide"}}">
              <div class="active">
                      {{#if (eq this.subview "meta-data")}}
                          <div class="settings-menu-header subview">
                              <button aria-label="Back" {{action "closeSubview"}} class="back settings-menu-header-action" data-test-button="close-psm-subview">{{svg-jar "arrow-left"}}<span class="hidden">Volver</span></button>
                              <h4>Meta datos</h4>
                              <div style="width:23px;"></div>
                          </div>
  
                          <div class="settings-menu-content">
                              <form {{action "discardEnter" on="submit"}}>
                                  <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="metaTitle">
                                      <label for="meta-title">Meta titulo</label>
                                      <GhTextInput
                                          @class="post-setting-meta-title"
                                          @id="meta-title"
                                          @name="post-setting-meta-title"
                                          @placeholder={{this.seoTitle}}
                                          @value={{readonly this.metaTitleScratch}}
                                          @input={{action (mut this.metaTitleScratch) value="target.value"}}
                                          @focus-out={{action "setMetaTitle" this.metaTitleScratch}}
                                          @stopEnterKeyDownPropagation={{true}}
                                          data-test-field="meta-title" />
                                      <p>Recomendado: <b>60</b> caracteres. Has utilizado {{gh-count-down-characters this.metaTitleScratch 60}}</p>
                                      <GhErrorMessage @errors={{this.post.errors}} @property="meta-title" />
                                  </GhFormGroup>
  
                                  <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="metaDescription">
                                      <label for="meta-description">Meta descripcion</label>
                                      <GhTextarea
                                          @class="post-setting-meta-description"
                                          @id="meta-description"
                                          @name="post-setting-meta-description"
                                          @placeholder={{truncate this.seoDescription 150}}
                                          @value={{readonly this.metaDescriptionScratch}}
                                          @input={{action (mut this.metaDescriptionScratch) value="target.value"}}
                                          @focus-out={{action "setMetaDescription" this.metaDescriptionScratch}}
                                          @stopEnterKeyDownPropagation="true"
                                          data-test-field="meta-description" />
                                      <p>Recomendado: <b>145</b> caracteres. Has utilizado {{gh-count-down-characters this.metaDescriptionScratch 145}}</p>
                                      <GhErrorMessage @errors={{this.post.errors}} @property="meta-description" />
                                  </GhFormGroup>
  
                                  <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="canonicalUrl">
                                      <label for="canonicalUrl">Canonical URL</label>
                                      <GhTextInput
                                          @class="post-setting-canonicalUrl"
                                          @name="post-setting-canonicalUrl"
                                          @value={{readonly this.canonicalUrlScratch}}
                                          @input={{action (mut this.canonicalUrlScratch) value="target.value"}}
                                          @focus-out={{action "setCanonicalUrl" this.canonicalUrlScratch}}
                                          @stopEnterKeyDownPropagation="true"
                                          data-test-field="canonicalUrl" />
                                      <GhErrorMessage @errors={{this.post.errors}} @property="canonicalUrl" />
                                  </GhFormGroup>
  
                                  <div class="form-group">
                                      <label>Previsualizacion del motor de busqueda</label>
                                      <div class="gh-seo-container">
                                          <div class="gh-seo-preview">
                                              <div class="flex mb7">
                                                  {{svg-jar "google"}}
                                                  <div class="gh-seo-search-bar">{{svg-jar "google-search"}}</div>
                                              </div>
                                              <div class="gh-seo-preview-link">{{this.seoURL}}</div>
                                              <div class="gh-seo-preview-title">{{truncate this.seoTitle 60}}</div>
                                              <div class="gh-seo-preview-desc">{{moment-format (now) "DD MMM YYYY"}} — {{truncate this.seoDescription 149}}</div>
                                          </div>
                                      </div>
                                  </div>
                              </form>
                          </div>
                      {{/if}}
  
                      {{#if (eq this.subview "twitter-data")}}
                          <div class="settings-menu-header subview">
                              <button aria-label="Back" {{action "closeSubview"}} class="back settings-menu-header-action" data-test-button="close-psm-subview">{{svg-jar "arrow-left"}}<span class="hidden">Volver</span></button>
                              <h4>Twitter card</h4>
                              <div style="width:23px;"></div>
                          </div>
  
                          <div class="settings-menu-content">
  
                              <form {{action "discardEnter" on="submit"}}>
                                  <GhImageUploaderWithPreview
                                      @image={{this.post.twitterImage}}
                                      @text="Add Twitter image"
                                      @allowUnsplash={{true}}
                                      @update={{action "setTwitterImage"}}
                                      @remove={{action "clearTwitterImage"}}
                                  />
                                  <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="twitterTitle">
                                      <label for="twitter-title">Twitter title</label>
                                      <GhTextInput
                                          @class="post-setting-twitter-title"
                                          @id="twitter-title"
                                          @name="post-setting-twitter-title"
                                          @placeholder={{truncate this.twitterTitle 40}}
                                          @value={{readonly this.twitterTitleScratch}}
                                          @input={{action (mut this.twitterTitleScratch) value="target.value"}}
                                          @focus-out={{action "setTwitterTitle" this.twitterTitleScratch}}
                                          @stopEnterKeyDownPropagation={{true}}
                                          data-test-field="twitter-title" />
                                      <GhErrorMessage @errors={{this.post.errors}} @property="twitterTitle" data-test-error="twitter-title" />
                                  </GhFormGroup>
  
                                  <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="twitterDescription">
                                      <label for="twitter-description">Twitter description</label>
                                      <GhTextarea
                                          @class="post-setting-twitter-description"
                                          @id="twitter-description"
                                          @name="post-setting-twitter-description"
                                          @placeholder={{truncate this.twitterDescription 150}}
                                          @stopEnterKeyDownPropagation="true"
                                          @value={{readonly this.twitterDescriptionScratch}}
                                          @input={{action (mut this.twitterDescriptionScratch) value="target.value"}}
                                          @focus-out={{action "setTwitterDescription" this.twitterDescriptionScratch}}
                                          data-test-field="twitter-description" />
                                      <GhErrorMessage @errors={{this.post.errors}} @property="twitterDescription" data-test-error="twitter-description" />
                                  </GhFormGroup>
  
                                  <div class="form-group">
                                      <label>Twitter preview</label>
                                      <div class="gh-social-twitter-post-preview">
                                          {{#if this.twitterImage}}
                                              <div class="gh-social-twitter-preview-image" style={{background-image-style this.twitterImage}}></div>
                                          {{/if}}
                                          <div class="gh-social-twitter-preview-content">
                                              <div class="gh-social-twitter-preview-title">{{this.twitterTitle}}</div>
                                              <div class="gh-social-twitter-preview-desc">{{truncate this.twitterDescription}}</div>
                                              <div class="gh-social-twitter-preview-meta">
                                                  {{svg-jar "twitter-link"}}
                                                  {{this.config.blogDomain}}
                                              </div>
                                          </div>
                                      </div>
                                  </div>
  
                              </form>
                          </div>
                      {{/if}}
  
                      {{#if (eq this.subview "email-settings")}}
                          <GhPostSettingsMenu::Email
                              @post={{this.post}}
                              @savePostTask={{this.savePostTask}}
                              @close={{action "closeSubview"}}
                          />
                      {{/if}}
  
                      {{#if (eq this.subview "facebook-data")}}
                          <div class="settings-menu-header subview">
                              <button aria-label="Back" {{action "closeSubview"}} class="back settings-menu-header-action" data-test-button="close-psm-subview">{{svg-jar "arrow-left"}}<span class="hidden">Volver</span></button>
                              <h4>Facebook card</h4>
                              <div style="width:23px;"></div>
                          </div>
  
                          <div class="settings-menu-content">
                              <form {{action "discardEnter" on="submit"}}>
                                  <GhImageUploaderWithPreview
                                      @image={{this.post.ogImage}}
                                      @text="Add Facebook image"
                                      @allowUnsplash={{true}}
                                      @update={{action "setOgImage"}}
                                      @remove={{action "clearOgImage"}}
                                  />
                                  <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="ogTitle">
                                      <label for="og-title">Facebook title</label>
                                      <GhTextInput
                                          @class="post-setting-og-title"
                                          @id="og-title"
                                          @name="post-setting-og-title"
                                          @placeholder={{truncate this.facebookTitle 40}}
                                          @value={{readonly this.ogTitleScratch}}
                                          @input={{action (mut this.ogTitleScratch) value="target.value"}}
                                          @focus-out={{action "setOgTitle" this.ogTitleScratch}}
                                          @stopEnterKeyDownPropagation={{true}}
                                          data-test-field="og-title" />
                                      <GhErrorMessage @errors={{this.post.errors}} @property="ogTitle" data-test-error="og-title" />
                                  </GhFormGroup>
  
                                  <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="ogDescription">
                                      <label for="og-description">Facebook description</label>
                                      <GhTextarea
                                          @class="post-setting-og-description"
                                          @id="og-description" @name="post-setting-og-description"
                                          @placeholder={{truncate this.facebookDescription 150}}
                                          @value={{readonly this.ogDescriptionScratch}}
                                          @input={{action (mut this.ogDescriptionScratch) value="target.value"}}
                                          @focus-out={{action "setOgDescription" this.ogDescriptionScratch}}
                                          @stopEnterKeyDownPropagation="true"
                                          data-test-field="og-description" />
                                      <GhErrorMessage @errors={{this.post.errors}} @property="ogDescription" data-test-error="og-description" />
                                  </GhFormGroup>
  
                                  <div class="form-group">
                                      <label>Facebook preview</label>
                                      <div class="gh-social-og-preview no-container">
                                          {{#if this.facebookImage}}
                                              <div class="gh-social-og-preview-image" style={{background-image-style this.facebookImage}}></div>
                                          {{/if}}
                                          <div class="gh-social-og-preview-bookmark">
                                              {{!-- Ensures description is hidden if title exceeds one line --}}
                                              <div class="gh-social-og-preview-content">
                                                  <div class="gh-social-og-preview-meta">
                                                      {{this.config.blogDomain}}
                                                  </div>
                                                  <div class="gh-social-og-preview-title">{{truncate this.facebookTitle}}</div>
                                                  <div class="gh-social-og-preview-desc">{{truncate this.facebookDescription}}</div>
                                              </div>
                                          </div>
                                      </div>
                                  </div>
  
                              </form>
                          </div>
                      {{/if}}
  
                      {{#if (eq this.subview "codeinjection")}}
                          <div class="settings-menu-header subview">
                              <button aria-label="Back" {{action "closeSubview"}} class="back settings-menu-header-action" data-test-button="close-psm-subview">{{svg-jar "arrow-left"}}<span class="hidden">Volver</span></button>
                              <h4>inyeccion de Codigo</h4>
                              <div style="width:23px;"></div>
                          </div>
  
                          <div class="settings-menu-content settings-menu-content-codeinjection">
                              <form {{action "discardEnter" on="submit"}}>
                                  <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="codeinjectionHead">
                                      <label for="codeinjection-head">{{capitalize this.post.displayName}} header <code>\{{ghost_head}}</code></label>
                                      <GhCmEditor @value={{this.codeinjectionHeadScratch}}
                                          @id="post-setting-codeinjection-head"
                                          @class="post-setting-codeinjection"
                                          @name="post-setting-codeinjection-head"
                                          @focusOut={{action "setHeaderInjection" this.codeinjectionHeadScratch}}
                                          @stopEnterKeyDownPropagation="true"
                                          @update={{action (mut this.codeinjectionHeadScratch)}}
                                          data-test-field="codeinjection-head" />
                                      <GhErrorMessage @errors={{this.post.errors}} @property="codeinjectionHead" data-test-error="codeinjection-head" />
                                  </GhFormGroup>
  
                                  <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="codeinjectionFoot">
                                      <label for="codeinjection-foot">{{capitalize this.post.displayName}} footer <code>\{{ghost_foot}}</code></label>
                                      <GhCmEditor @value={{this.codeinjectionFootScratch}}
                                          @id="post-setting-codeinjection-foot"
                                          @class="post-setting-codeinjection"
                                          @name="post-setting-codeinjection-foot"
                                          @focusOut={{action "setFooterInjection" this.codeinjectionFootScratch}}
                                          @stopEnterKeyDownPropagation="true"
                                          @update={{action (mut this.codeinjectionFootScratch)}}
                                          data-test-field="codeinjection-foot" />
                                      <GhErrorMessage @errors={{this.post.errors}} @property="codeinjectionFoot" data-test-error="codeinjection-foot" />
                                  </GhFormGroup>
                              </form>
                          </div>
                      {{/if}}
              </div>
          </div>
          {{/if}}
      </div>
  </div>
  
  */
  {
    "id": "BLEw6+LO",
    "block": "{\"symbols\":[\"@post\"],\"statements\":[[11,\"div\"],[16,0,[31,[\"settings-menu-container \",[30,[36,7],[[30,[36,17],[[32,0,[\"isViewingSubview\"]],[30,[36,16],[[30,[36,11],[[32,0,[\"subview\"]],\"email-settings\"],null]],null]],null],\"settings-menu-container-wide\"],null]]]],[4,[38,18],[[32,0,[\"setSidebarWidthFromElement\"]]],null],[4,[38,19],[[32,0,[\"setSidebarWidthFromElement\"]],[32,0,[\"isViewingSubview\"]]],null],[12],[2,\"\\n    \"],[10,\"div\"],[14,1,\"entry-controls\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"settings-menu settings-menu-pane settings-menu-pane-main\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"settings-menu-header\"],[12],[2,\"\\n                \"],[10,\"h4\"],[12],[1,[30,[36,2],[[32,0,[\"post\",\"displayName\"]]],null]],[2,\" config\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"settings-menu-content\"],[12],[2,\"\\n                \"],[10,\"form\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"url\"],[12],[1,[30,[36,2],[[32,0,[\"post\",\"displayName\"]]],null]],[2,\" URL\"],[13],[2,\"\\n\"],[6,[37,12],[[32,0,[\"post\",\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,7],[[30,[36,15],[[32,0,[\"post\",\"isPublished\"]],[32,0,[\"post\",\"isSent\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"a\"],[14,0,\"post-view-link\"],[14,\"target\",\"_blank\"],[15,6,[31,[[32,0,[\"post\",\"url\"]]]]],[12],[2,\"\\n                            Ver \"],[1,[32,0,[\"post\",\"displayName\"]]],[2,\" \"],[1,[30,[36,1],[\"external\"],null]],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,7],[[32,0,[\"post\",\"isScheduled\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"a\"],[14,0,\"post-view-link\"],[14,\"target\",\"_blank\"],[15,6,[31,[[32,0,[\"post\",\"previewUrl\"]]]]],[12],[2,\"\\n                            Previsualizar \"],[1,[30,[36,1],[\"external\"],null]],[2,\"\\n                        \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-input-icon gh-icon-link\"],[12],[2,\"\\n                        \"],[1,[30,[36,1],[\"link\"],null]],[2,\"\\n                        \"],[8,\"gh-text-input\",[],[[\"@class\",\"@id\",\"@name\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-slug\",\"url\",\"post-setting-slug\",[30,[36,6],[[32,0,[\"slugValue\"]]],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"slugValue\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"updateSlug\",[32,0,[\"slugValue\"]]],null],true]],null],[2,\"\\n                    \"],[13],[2,\"\\n\"],[6,[37,7],[[32,0,[\"post\",\"isSent\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[8,\"gh-url-preview\",[],[[\"@prefix\",\"@slug\",\"@tagName\",\"@classNames\"],[\"email\",[32,0,[\"uuidValue\"]],\"p\",\"description\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[8,\"gh-url-preview\",[],[[\"@slug\",\"@tagName\",\"@classNames\"],[[32,0,[\"slugValue\"]],\"p\",\"description\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n\"],[6,[37,7],[[30,[36,15],[[32,0,[\"post\",\"isDraft\"]],[32,0,[\"post\",\"isPublished\"]],[32,0,[\"post\",\"pastScheduledTime\"]],[32,0,[\"post\",\"isSent\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"label\"],[12],[2,\"Fecha de publicacion\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"label\"],[12],[2,\"Fecha de publicacion programada\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[8,\"gh-date-time-picker\",[],[[\"@date\",\"@time\",\"@setDate\",\"@setTime\",\"@errors\",\"@dateErrorProperty\",\"@timeErrorProperty\",\"@maxDate\",\"@disabled\",\"@isActive\"],[[32,0,[\"post\",\"publishedAtBlogDate\"]],[32,0,[\"post\",\"publishedAtBlogTime\"]],[30,[36,0],[[32,0],\"setPublishedAtBlogDate\"],null],[30,[36,0],[[32,0],\"setPublishedAtBlogTime\"],null],[32,0,[\"post\",\"errors\"]],\"publishedAtBlogDate\",\"publishedAtBlogTime\",\"now\",[32,0,[\"post\",\"isScheduled\"]],[30,[36,16],[[32,0,[\"isViewingSubview\"]]],null]]],null],[2,\"\\n\"],[6,[37,12],[[30,[36,15],[[32,0,[\"post\",\"isDraft\"]],[32,0,[\"post\",\"isPublished\"]],[32,0,[\"post\",\"pastScheduledTime\"]],[32,0,[\"post\",\"isSent\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"p\"],[12],[2,\"Utiliza el menu de publicacion para re programar\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n\\n\"],[6,[37,12],[[32,0,[\"session\",\"user\",\"isContributor\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"tag-input\"],[12],[2,\"Etiquetas\"],[13],[2,\"\\n                    \"],[8,\"gh-psm-tags-input\",[],[[\"@post\",\"@triggerId\"],[[32,0,[\"post\"]],\"tag-input\"]],null],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,7],[[32,0,[\"showVisibilityInput\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,7],[[30,[36,14],[\"multipleProducts\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"visibility\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"visibility-input\"],[12],[1,[30,[36,2],[[32,1,[\"displayName\"]]],null]],[2,\" permisos\"],[13],[2,\"\\n                            \"],[8,\"gh-psm-visibility-input\",[],[[\"@post\",\"@triggerId\"],[[32,0,[\"post\"]],\"visibility-input\"]],null],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,7],[[30,[36,11],[[32,0,[\"post\",\"visibility\"]],\"filter\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@class\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"visibilityFilter\",\"nt3\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[8,\"gh-members-segment-select\",[],[[\"@hideLabels\",\"@segment\",\"@onChange\",\"@renderInPlace\",\"@hideDefaultSegments\",\"@hideOptionsWhenAllSelected\"],[true,[32,0,[\"post\",\"visibilitySegment\"]],[30,[36,0],[[32,0],\"setVisibility\"],null],true,true,true]],null],[2,\"\\n                                \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"visibilityFilter\"]],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"visibilityFilter\"]],null],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"visibility-input\"],[12],[2,\"Permisos de la publicacion\"],[13],[2,\"\\n                            \"],[8,\"gh-psm-visibility-input\",[],[[\"@post\",\"@triggerId\"],[[32,0,[\"post\"]],\"visibility-input\"]],null],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\\n                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"customExcerpt\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"custom-excerpt\"],[12],[2,\"Extracto\"],[13],[2,\"\\n                    \"],[8,\"gh-textarea\",[[24,\"data-test-field\",\"custom-excerpt\"]],[[\"@class\",\"@id\",\"@name\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-custom-excerpt\",\"custom-excerpt\",\"post-setting-custom-excerpt\",[30,[36,6],[[32,0,[\"customExcerptScratch\"]]],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"customExcerptScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"setCustomExcerpt\",[32,0,[\"customExcerptScratch\"]]],null],\"true\"]],null],[2,\"\\n                    \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"custom-excerpt\"]],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"customExcerpt\"]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,12],[[32,0,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[8,\"gh-form-group\",[[24,\"data-test-input\",\"authors\"]],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"for-select\",[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"authors\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"label\"],[14,\"for\",\"author-list\"],[12],[2,\"Autores\"],[13],[2,\"\\n                        \"],[8,\"gh-psm-authors-input\",[],[[\"@selectedAuthors\",\"@updateAuthors\",\"@triggerId\"],[[32,0,[\"post\",\"authors\"]],[30,[36,0],[[32,0],\"changeAuthors\"],null],\"author-list\"]],null],[2,\"\\n                        \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"authors\"]],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"authors\"]],null],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[10,\"ul\"],[14,0,\"nav-list nav-list-block\"],[12],[2,\"\\n                    \"],[11,\"li\"],[24,0,\"nav-list-item\"],[24,\"data-test-button\",\"meta-data\"],[4,[38,0],[[32,0],\"showSubview\",\"meta-data\"],null],[12],[2,\"\\n                        \"],[10,\"button\"],[14,4,\"button\"],[12],[2,\"\\n                            \"],[10,\"b\"],[12],[2,\"Meta datos\"],[13],[2,\"\\n                            \"],[10,\"span\"],[12],[2,\"Contenido extra para los motores de busqueda\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[1,[30,[36,1],[\"arrow-right\"],null]],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"li\"],[24,0,\"nav-list-item\"],[24,\"data-test-button\",\"twitter-data\"],[4,[38,0],[[32,0],\"showSubview\",\"twitter-data\"],null],[12],[2,\"\\n                        \"],[10,\"button\"],[14,4,\"button\"],[12],[2,\"\\n                            \"],[10,\"b\"],[12],[2,\"Twitter card\"],[13],[2,\"\\n                            \"],[10,\"span\"],[12],[2,\"Customize structured data for Twitter\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[1,[30,[36,1],[\"arrow-right\"],null]],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"li\"],[24,0,\"nav-list-item\"],[24,\"data-test-button\",\"facebook-data\"],[4,[38,0],[[32,0],\"showSubview\",\"facebook-data\"],null],[12],[2,\"\\n                        \"],[10,\"button\"],[14,4,\"button\"],[12],[2,\"\\n                            \"],[10,\"b\"],[12],[2,\"Facebook card\"],[13],[2,\"\\n                            \"],[10,\"span\"],[12],[2,\"Customize Open Graph data\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[1,[30,[36,1],[\"arrow-right\"],null]],[2,\"\\n                    \"],[13],[2,\"\\n\"],[6,[37,7],[[30,[36,17],[[32,0,[\"post\",\"isPost\"]],[35,20]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,7],[[30,[36,13],[[32,0,[\"settings\",\"editorDefaultEmailRecipients\"]],\"disabled\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[11,\"li\"],[24,0,\"nav-list-item\"],[24,\"data-test-button\",\"email-settings\"],[4,[38,0],[[32,0],\"showSubview\",\"email-settings\"],null],[12],[2,\"\\n                                \"],[10,\"button\"],[14,4,\"button\"],[12],[2,\"\\n                                    \"],[10,\"b\"],[12],[2,\"Email newsletter\"],[13],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"Customize email settings\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[1,[30,[36,1],[\"arrow-right\"],null]],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                    \"],[11,\"li\"],[24,0,\"nav-list-item\"],[24,\"data-test-button\",\"codeinjection\"],[4,[38,0],[[32,0],\"showSubview\",\"codeinjection\"],null],[12],[2,\"\\n                        \"],[10,\"button\"],[14,4,\"button\"],[12],[2,\"\\n                            \"],[10,\"b\"],[12],[2,\"Inyection de codigo\"],[13],[2,\"\\n                            \"],[10,\"span\"],[12],[2,\"Add styles/scripts to the header & footer\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[1,[30,[36,1],[\"arrow-right\"],null]],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\\n\"],[6,[37,12],[[32,0,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"form-group for-checkbox\"],[12],[2,\"\\n                    \"],[11,\"label\"],[24,0,\"checkbox\"],[24,\"for\",\"featured\"],[4,[38,0],[[32,0],\"toggleFeatured\"],[[\"bubbles\"],[\"false\"]]],[12],[2,\"\\n                        \"],[10,\"input\"],[15,\"checked\",[32,0,[\"post\",\"featured\"]]],[14,0,\"gh-input post-settings-featured\"],[15,\"onclick\",[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"post\",\"featured\"]]],null]],[[\"value\"],[\"target.checked\"]]]],[14,\"data-test-checkbox\",\"featured\"],[14,4,\"checkbox\"],[12],[13],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"Destacar este \"],[1,[32,0,[\"post\",\"displayName\"]]],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[8,\"gh-psm-template-select\",[],[[\"@post\",\"@onTemplateSelect\"],[[32,0,[\"post\"]],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"post\",\"customTemplate\"]]],null]],null]]],null],[2,\"\\n\\n\"],[6,[37,12],[[32,0,[\"post\",\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-hover-red gh-btn-icon settings-menu-delete-button\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"deletePost\"],null],[12],[10,\"span\"],[12],[1,[30,[36,1],[\"trash\"],null]],[2,\" Delete \"],[1,[32,0,[\"post\",\"displayName\"]]],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n\"],[6,[37,7],[[32,0,[\"isViewingSubview\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[15,0,[31,[\"settings-menu settings-menu-pane \",[30,[36,12],[[30,[36,11],[[32,0,[\"subview\"]],\"email-settings\"],null],\"settings-menu-pane-wide\"],null]]]],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"active\"],[12],[2,\"\\n\"],[6,[37,7],[[30,[36,11],[[32,0,[\"subview\"]],\"meta-data\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"settings-menu-header subview\"],[12],[2,\"\\n                            \"],[11,\"button\"],[24,\"aria-label\",\"Back\"],[24,0,\"back settings-menu-header-action\"],[24,\"data-test-button\",\"close-psm-subview\"],[4,[38,0],[[32,0],\"closeSubview\"],null],[12],[1,[30,[36,1],[\"arrow-left\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Volver\"],[13],[13],[2,\"\\n                            \"],[10,\"h4\"],[12],[2,\"Meta datos\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,5,\"width:23px;\"],[12],[13],[2,\"\\n                        \"],[13],[2,\"\\n\\n                        \"],[10,\"div\"],[14,0,\"settings-menu-content\"],[12],[2,\"\\n                            \"],[11,\"form\"],[4,[38,0],[[32,0],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"metaTitle\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"meta-title\"],[12],[2,\"Meta titulo\"],[13],[2,\"\\n                                    \"],[8,\"gh-text-input\",[[24,\"data-test-field\",\"meta-title\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-meta-title\",\"meta-title\",\"post-setting-meta-title\",[32,0,[\"seoTitle\"]],[30,[36,6],[[32,0,[\"metaTitleScratch\"]]],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"metaTitleScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"setMetaTitle\",[32,0,[\"metaTitleScratch\"]]],null],true]],null],[2,\"\\n                                    \"],[10,\"p\"],[12],[2,\"Recomendado: \"],[10,\"b\"],[12],[2,\"60\"],[13],[2,\" caracteres. Has utilizado \"],[1,[30,[36,8],[[32,0,[\"metaTitleScratch\"]],60],null]],[13],[2,\"\\n                                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"meta-title\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"metaDescription\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"meta-description\"],[12],[2,\"Meta descripcion\"],[13],[2,\"\\n                                    \"],[8,\"gh-textarea\",[[24,\"data-test-field\",\"meta-description\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-meta-description\",\"meta-description\",\"post-setting-meta-description\",[30,[36,5],[[32,0,[\"seoDescription\"]],150],null],[30,[36,6],[[32,0,[\"metaDescriptionScratch\"]]],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"metaDescriptionScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"setMetaDescription\",[32,0,[\"metaDescriptionScratch\"]]],null],\"true\"]],null],[2,\"\\n                                    \"],[10,\"p\"],[12],[2,\"Recomendado: \"],[10,\"b\"],[12],[2,\"145\"],[13],[2,\" caracteres. Has utilizado \"],[1,[30,[36,8],[[32,0,[\"metaDescriptionScratch\"]],145],null]],[13],[2,\"\\n                                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"meta-description\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"canonicalUrl\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"canonicalUrl\"],[12],[2,\"Canonical URL\"],[13],[2,\"\\n                                    \"],[8,\"gh-text-input\",[[24,\"data-test-field\",\"canonicalUrl\"]],[[\"@class\",\"@name\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-canonicalUrl\",\"post-setting-canonicalUrl\",[30,[36,6],[[32,0,[\"canonicalUrlScratch\"]]],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"canonicalUrlScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"setCanonicalUrl\",[32,0,[\"canonicalUrlScratch\"]]],null],\"true\"]],null],[2,\"\\n                                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"canonicalUrl\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                                \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[12],[2,\"Previsualizacion del motor de busqueda\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-seo-container\"],[12],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-seo-preview\"],[12],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"flex mb7\"],[12],[2,\"\\n                                                \"],[1,[30,[36,1],[\"google\"],null]],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"gh-seo-search-bar\"],[12],[1,[30,[36,1],[\"google-search\"],null]],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-seo-preview-link\"],[12],[1,[32,0,[\"seoURL\"]]],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-seo-preview-title\"],[12],[1,[30,[36,5],[[32,0,[\"seoTitle\"]],60],null]],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-seo-preview-desc\"],[12],[1,[30,[36,10],[[30,[36,9],null,null],\"DD MMM YYYY\"],null]],[2,\" — \"],[1,[30,[36,5],[[32,0,[\"seoDescription\"]],149],null]],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,7],[[30,[36,11],[[32,0,[\"subview\"]],\"twitter-data\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"settings-menu-header subview\"],[12],[2,\"\\n                            \"],[11,\"button\"],[24,\"aria-label\",\"Back\"],[24,0,\"back settings-menu-header-action\"],[24,\"data-test-button\",\"close-psm-subview\"],[4,[38,0],[[32,0],\"closeSubview\"],null],[12],[1,[30,[36,1],[\"arrow-left\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Volver\"],[13],[13],[2,\"\\n                            \"],[10,\"h4\"],[12],[2,\"Twitter card\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,5,\"width:23px;\"],[12],[13],[2,\"\\n                        \"],[13],[2,\"\\n\\n                        \"],[10,\"div\"],[14,0,\"settings-menu-content\"],[12],[2,\"\\n\\n                            \"],[11,\"form\"],[4,[38,0],[[32,0],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n                                \"],[8,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[32,0,[\"post\",\"twitterImage\"]],\"Add Twitter image\",true,[30,[36,0],[[32,0],\"setTwitterImage\"],null],[30,[36,0],[[32,0],\"clearTwitterImage\"],null]]],null],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"twitterTitle\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"twitter-title\"],[12],[2,\"Twitter title\"],[13],[2,\"\\n                                    \"],[8,\"gh-text-input\",[[24,\"data-test-field\",\"twitter-title\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-twitter-title\",\"twitter-title\",\"post-setting-twitter-title\",[30,[36,5],[[32,0,[\"twitterTitle\"]],40],null],[30,[36,6],[[32,0,[\"twitterTitleScratch\"]]],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"twitterTitleScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"setTwitterTitle\",[32,0,[\"twitterTitleScratch\"]]],null],true]],null],[2,\"\\n                                    \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"twitter-title\"]],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"twitterTitle\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"twitterDescription\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"twitter-description\"],[12],[2,\"Twitter description\"],[13],[2,\"\\n                                    \"],[8,\"gh-textarea\",[[24,\"data-test-field\",\"twitter-description\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@stopEnterKeyDownPropagation\",\"@value\",\"@input\",\"@focus-out\"],[\"post-setting-twitter-description\",\"twitter-description\",\"post-setting-twitter-description\",[30,[36,5],[[32,0,[\"twitterDescription\"]],150],null],\"true\",[30,[36,6],[[32,0,[\"twitterDescriptionScratch\"]]],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"twitterDescriptionScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"setTwitterDescription\",[32,0,[\"twitterDescriptionScratch\"]]],null]]],null],[2,\"\\n                                    \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"twitter-description\"]],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"twitterDescription\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                                \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[12],[2,\"Twitter preview\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-social-twitter-post-preview\"],[12],[2,\"\\n\"],[6,[37,7],[[32,0,[\"twitterImage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                            \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-image\"],[15,5,[30,[36,4],[[32,0,[\"twitterImage\"]]],null]],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                        \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-content\"],[12],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-title\"],[12],[1,[32,0,[\"twitterTitle\"]]],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-desc\"],[12],[1,[30,[36,5],[[32,0,[\"twitterDescription\"]]],null]],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-meta\"],[12],[2,\"\\n                                                \"],[1,[30,[36,1],[\"twitter-link\"],null]],[2,\"\\n                                                \"],[1,[32,0,[\"config\",\"blogDomain\"]]],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,7],[[30,[36,11],[[32,0,[\"subview\"]],\"email-settings\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[8,\"gh-post-settings-menu/email\",[],[[\"@post\",\"@savePostTask\",\"@close\"],[[32,0,[\"post\"]],[32,0,[\"savePostTask\"]],[30,[36,0],[[32,0],\"closeSubview\"],null]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,7],[[30,[36,11],[[32,0,[\"subview\"]],\"facebook-data\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"settings-menu-header subview\"],[12],[2,\"\\n                            \"],[11,\"button\"],[24,\"aria-label\",\"Back\"],[24,0,\"back settings-menu-header-action\"],[24,\"data-test-button\",\"close-psm-subview\"],[4,[38,0],[[32,0],\"closeSubview\"],null],[12],[1,[30,[36,1],[\"arrow-left\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Volver\"],[13],[13],[2,\"\\n                            \"],[10,\"h4\"],[12],[2,\"Facebook card\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,5,\"width:23px;\"],[12],[13],[2,\"\\n                        \"],[13],[2,\"\\n\\n                        \"],[10,\"div\"],[14,0,\"settings-menu-content\"],[12],[2,\"\\n                            \"],[11,\"form\"],[4,[38,0],[[32,0],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n                                \"],[8,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[32,0,[\"post\",\"ogImage\"]],\"Add Facebook image\",true,[30,[36,0],[[32,0],\"setOgImage\"],null],[30,[36,0],[[32,0],\"clearOgImage\"],null]]],null],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"ogTitle\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"og-title\"],[12],[2,\"Facebook title\"],[13],[2,\"\\n                                    \"],[8,\"gh-text-input\",[[24,\"data-test-field\",\"og-title\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-og-title\",\"og-title\",\"post-setting-og-title\",[30,[36,5],[[32,0,[\"facebookTitle\"]],40],null],[30,[36,6],[[32,0,[\"ogTitleScratch\"]]],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"ogTitleScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"setOgTitle\",[32,0,[\"ogTitleScratch\"]]],null],true]],null],[2,\"\\n                                    \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"og-title\"]],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"ogTitle\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"ogDescription\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"og-description\"],[12],[2,\"Facebook description\"],[13],[2,\"\\n                                    \"],[8,\"gh-textarea\",[[24,\"data-test-field\",\"og-description\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-og-description\",\"og-description\",\"post-setting-og-description\",[30,[36,5],[[32,0,[\"facebookDescription\"]],150],null],[30,[36,6],[[32,0,[\"ogDescriptionScratch\"]]],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"ogDescriptionScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"setOgDescription\",[32,0,[\"ogDescriptionScratch\"]]],null],\"true\"]],null],[2,\"\\n                                    \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"og-description\"]],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"ogDescription\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                                \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[12],[2,\"Facebook preview\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-social-og-preview no-container\"],[12],[2,\"\\n\"],[6,[37,7],[[32,0,[\"facebookImage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                            \"],[10,\"div\"],[14,0,\"gh-social-og-preview-image\"],[15,5,[30,[36,4],[[32,0,[\"facebookImage\"]]],null]],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                        \"],[10,\"div\"],[14,0,\"gh-social-og-preview-bookmark\"],[12],[2,\"\\n\"],[2,\"                                            \"],[10,\"div\"],[14,0,\"gh-social-og-preview-content\"],[12],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"gh-social-og-preview-meta\"],[12],[2,\"\\n                                                    \"],[1,[32,0,[\"config\",\"blogDomain\"]]],[2,\"\\n                                                \"],[13],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"gh-social-og-preview-title\"],[12],[1,[30,[36,5],[[32,0,[\"facebookTitle\"]]],null]],[13],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"gh-social-og-preview-desc\"],[12],[1,[30,[36,5],[[32,0,[\"facebookDescription\"]]],null]],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,7],[[30,[36,11],[[32,0,[\"subview\"]],\"codeinjection\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"settings-menu-header subview\"],[12],[2,\"\\n                            \"],[11,\"button\"],[24,\"aria-label\",\"Back\"],[24,0,\"back settings-menu-header-action\"],[24,\"data-test-button\",\"close-psm-subview\"],[4,[38,0],[[32,0],\"closeSubview\"],null],[12],[1,[30,[36,1],[\"arrow-left\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Volver\"],[13],[13],[2,\"\\n                            \"],[10,\"h4\"],[12],[2,\"inyeccion de Codigo\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,5,\"width:23px;\"],[12],[13],[2,\"\\n                        \"],[13],[2,\"\\n\\n                        \"],[10,\"div\"],[14,0,\"settings-menu-content settings-menu-content-codeinjection\"],[12],[2,\"\\n                            \"],[11,\"form\"],[4,[38,0],[[32,0],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"codeinjectionHead\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"codeinjection-head\"],[12],[1,[30,[36,2],[[32,0,[\"post\",\"displayName\"]]],null]],[2,\" header \"],[10,\"code\"],[12],[2,\"{{ghost_head}}\"],[13],[13],[2,\"\\n                                    \"],[8,\"gh-cm-editor\",[[24,\"data-test-field\",\"codeinjection-head\"]],[[\"@value\",\"@id\",\"@class\",\"@name\",\"@focusOut\",\"@stopEnterKeyDownPropagation\",\"@update\"],[[32,0,[\"codeinjectionHeadScratch\"]],\"post-setting-codeinjection-head\",\"post-setting-codeinjection\",\"post-setting-codeinjection-head\",[30,[36,0],[[32,0],\"setHeaderInjection\",[32,0,[\"codeinjectionHeadScratch\"]]],null],\"true\",[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"codeinjectionHeadScratch\"]]],null]],null]]],null],[2,\"\\n                                    \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"codeinjection-head\"]],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"codeinjectionHead\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"codeinjectionFoot\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"codeinjection-foot\"],[12],[1,[30,[36,2],[[32,0,[\"post\",\"displayName\"]]],null]],[2,\" footer \"],[10,\"code\"],[12],[2,\"{{ghost_foot}}\"],[13],[13],[2,\"\\n                                    \"],[8,\"gh-cm-editor\",[[24,\"data-test-field\",\"codeinjection-foot\"]],[[\"@value\",\"@id\",\"@class\",\"@name\",\"@focusOut\",\"@stopEnterKeyDownPropagation\",\"@update\"],[[32,0,[\"codeinjectionFootScratch\"]],\"post-setting-codeinjection-foot\",\"post-setting-codeinjection\",\"post-setting-codeinjection-foot\",[30,[36,0],[[32,0],\"setFooterInjection\",[32,0,[\"codeinjectionFootScratch\"]]],null],\"true\",[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"codeinjectionFootScratch\"]]],null]],null]]],null],[2,\"\\n                                    \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"codeinjection-foot\"]],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"codeinjectionFoot\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"capitalize\",\"mut\",\"background-image-style\",\"truncate\",\"readonly\",\"if\",\"gh-count-down-characters\",\"now\",\"moment-format\",\"eq\",\"unless\",\"not-eq\",\"feature\",\"or\",\"not\",\"and\",\"did-insert\",\"did-update\",\"showEmailNewsletter\"]}",
    "moduleName": "ghost-admin/components/gh-post-settings-menu.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    feature: Ember.inject.service(),
    store: Ember.inject.service(),
    config: Ember.inject.service(),
    ajax: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    slugGenerator: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    ui: Ember.inject.service(),
    tagName: '',
    post: null,
    isViewingSubview: false,
    canonicalUrlScratch: Ember.computed.alias('post.canonicalUrlScratch'),
    customExcerptScratch: Ember.computed.alias('post.customExcerptScratch'),
    codeinjectionFootScratch: Ember.computed.alias('post.codeinjectionFootScratch'),
    codeinjectionHeadScratch: Ember.computed.alias('post.codeinjectionHeadScratch'),
    metaDescriptionScratch: Ember.computed.alias('post.metaDescriptionScratch'),
    metaTitleScratch: Ember.computed.alias('post.metaTitleScratch'),
    ogDescriptionScratch: Ember.computed.alias('post.ogDescriptionScratch'),
    ogTitleScratch: Ember.computed.alias('post.ogTitleScratch'),
    twitterDescriptionScratch: Ember.computed.alias('post.twitterDescriptionScratch'),
    twitterTitleScratch: Ember.computed.alias('post.twitterTitleScratch'),
    slugValue: (0, _boundOneWay.default)('post.slug'),
    uuidValue: (0, _boundOneWay.default)('post.uuid'),
    seoDescription: Ember.computed.or('metaDescriptionScratch', 'customExcerptScratch', 'post.excerpt'),
    facebookDescription: Ember.computed.or('ogDescriptionScratch', 'customExcerptScratch', 'seoDescription', 'post.excerpt', 'settings.description', ''),
    facebookImage: Ember.computed.or('post.ogImage', 'post.featureImage', 'settings.ogImage', 'settings.coverImage'),
    facebookTitle: Ember.computed.or('ogTitleScratch', 'seoTitle'),
    twitterDescription: Ember.computed.or('twitterDescriptionScratch', 'customExcerptScratch', 'seoDescription', 'post.excerpt', 'settings.description', ''),
    twitterImage: Ember.computed.or('post.twitterImage', 'post.featureImage', 'settings.twitterImage', 'settings.coverImage'),
    twitterTitle: Ember.computed.or('twitterTitleScratch', 'seoTitle'),
    showVisibilityInput: Ember.computed.or('session.user.isOwnerOnly', 'session.user.isAdminOnly', 'session.user.isEditor'),
    showEmailNewsletter: Ember.computed.or('session.user.isOwnerOnly', 'session.user.isAdminOnly', 'session.user.isEditor'),
    seoTitle: Ember.computed('metaTitleScratch', 'post.titleScratch', function () {
      return this.metaTitleScratch || this.post.titleScratch || '(Untitled)';
    }),
    seoURL: Ember.computed('post.{slug,canonicalUrl}', 'config.blogUrl', function () {
      const urlParts = [];

      if (this.post.canonicalUrl) {
        try {
          const canonicalUrl = new URL(this.post.canonicalUrl);
          urlParts.push(canonicalUrl.host);
          urlParts.push(...canonicalUrl.pathname.split('/').reject(p => !p));
        } catch (e) {// no-op, invalid URL
        }
      } else {
        const blogUrl = new URL(this.config.get('blogUrl'));
        urlParts.push(blogUrl.host);
        urlParts.push(...blogUrl.pathname.split('/').reject(p => !p));
        urlParts.push(this.post.slug);
      }

      return urlParts.join(' › ');
    }),

    willDestroyElement() {
      this._super(...arguments);

      let post = this.post;
      let errors = post.get('errors'); // reset the publish date if it has an error

      if (errors.has('publishedAtBlogDate') || errors.has('publishedAtBlogTime')) {
        post.set('publishedAtBlogTZ', post.get('publishedAtUTC'));
        post.validate({
          attribute: 'publishedAtBlog'
        });
      }

      this.setSidebarWidthVariable(0);
    },

    actions: {
      showSubview(subview) {
        this.set('isViewingSubview', true);
        this.set('subview', subview);
      },

      closeSubview() {
        this.set('isViewingSubview', false);
        this.set('subview', null);
      },

      discardEnter() {
        return false;
      },

      toggleFeatured() {
        this.toggleProperty('post.featured'); // If this is a new post.  Don't save the post.  Defer the save
        // to the user pressing the save button

        if (this.get('post.isNew')) {
          return;
        }

        this.savePostTask.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      /**
       * triggered by user manually changing slug
       */
      updateSlug(newSlug) {
        return this.updateSlugTask.perform(newSlug).catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      setPublishedAtBlogDate(date) {
        let post = this.post;
        let dateString = (0, _moment.default)(date).format('YYYY-MM-DD');
        post.get('errors').remove('publishedAtBlogDate');

        if (post.get('isNew') || date === post.get('publishedAtBlogDate')) {
          post.validate({
            property: 'publishedAtBlog'
          });
        } else {
          post.set('publishedAtBlogDate', dateString);
          return this.savePostTask.perform();
        }
      },

      async setVisibility(segment) {
        this.post.set('visibilityFilter', segment);

        try {
          await this.post.validate({
            property: 'visibility'
          });
          await this.post.validate({
            property: 'visibilityFilter'
          });

          if (this.post.get('isDraft') && this.post.changedAttributes().visibilityFilter) {
            await this.savePostTask.perform();
          }
        } catch (e) {
          if (!e) {
            // validation error
            return;
          }

          throw e;
        }
      },

      setPublishedAtBlogTime(time) {
        let post = this.post;
        post.get('errors').remove('publishedAtBlogDate');

        if (post.get('isNew') || time === post.get('publishedAtBlogTime')) {
          post.validate({
            property: 'publishedAtBlog'
          });
        } else {
          post.set('publishedAtBlogTime', time);
          return this.savePostTask.perform();
        }
      },

      setCustomExcerpt(excerpt) {
        let post = this.post;
        let currentExcerpt = post.get('customExcerpt');

        if (excerpt === currentExcerpt) {
          return;
        }

        post.set('customExcerpt', excerpt);
        return post.validate({
          property: 'customExcerpt'
        }).then(() => this.savePostTask.perform());
      },

      setHeaderInjection(code) {
        let post = this.post;
        let currentCode = post.get('codeinjectionHead');

        if (code === currentCode) {
          return;
        }

        post.set('codeinjectionHead', code);
        return post.validate({
          property: 'codeinjectionHead'
        }).then(() => this.savePostTask.perform());
      },

      setFooterInjection(code) {
        let post = this.post;
        let currentCode = post.get('codeinjectionFoot');

        if (code === currentCode) {
          return;
        }

        post.set('codeinjectionFoot', code);
        return post.validate({
          property: 'codeinjectionFoot'
        }).then(() => this.savePostTask.perform());
      },

      setMetaTitle(metaTitle) {
        // Grab the post and current stored meta title
        let post = this.post;
        let currentTitle = post.get('metaTitle'); // If the title entered matches the stored meta title, do nothing

        if (currentTitle === metaTitle) {
          return;
        } // If the title entered is different, set it as the new meta title


        post.set('metaTitle', metaTitle); // Make sure the meta title is valid and if so, save it into the post

        return post.validate({
          property: 'metaTitle'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePostTask.perform();
        });
      },

      setMetaDescription(metaDescription) {
        // Grab the post and current stored meta description
        let post = this.post;
        let currentDescription = post.get('metaDescription'); // If the title entered matches the stored meta title, do nothing

        if (currentDescription === metaDescription) {
          return;
        } // If the title entered is different, set it as the new meta title


        post.set('metaDescription', metaDescription); // Make sure the meta title is valid and if so, save it into the post

        return post.validate({
          property: 'metaDescription'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePostTask.perform();
        });
      },

      setCanonicalUrl(value) {
        // Grab the post and current stored meta description
        let post = this.post;
        let currentCanonicalUrl = post.canonicalUrl; // If the value entered matches the stored value, do nothing

        if (currentCanonicalUrl === value) {
          return;
        } // If the value supplied is different, set it as the new value


        post.set('canonicalUrl', value); // Make sure the value is valid and if so, save it into the post

        return post.validate({
          property: 'canonicalUrl'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePostTask.perform();
        });
      },

      setOgTitle(ogTitle) {
        // Grab the post and current stored facebook title
        let post = this.post;
        let currentTitle = post.get('ogTitle'); // If the title entered matches the stored facebook title, do nothing

        if (currentTitle === ogTitle) {
          return;
        } // If the title entered is different, set it as the new facebook title


        post.set('ogTitle', ogTitle); // Make sure the facebook title is valid and if so, save it into the post

        return post.validate({
          property: 'ogTitle'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePostTask.perform();
        });
      },

      setOgDescription(ogDescription) {
        // Grab the post and current stored facebook description
        let post = this.post;
        let currentDescription = post.get('ogDescription'); // If the title entered matches the stored facebook description, do nothing

        if (currentDescription === ogDescription) {
          return;
        } // If the description entered is different, set it as the new facebook description


        post.set('ogDescription', ogDescription); // Make sure the facebook description is valid and if so, save it into the post

        return post.validate({
          property: 'ogDescription'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePostTask.perform();
        });
      },

      setTwitterTitle(twitterTitle) {
        // Grab the post and current stored twitter title
        let post = this.post;
        let currentTitle = post.get('twitterTitle'); // If the title entered matches the stored twitter title, do nothing

        if (currentTitle === twitterTitle) {
          return;
        } // If the title entered is different, set it as the new twitter title


        post.set('twitterTitle', twitterTitle); // Make sure the twitter title is valid and if so, save it into the post

        return post.validate({
          property: 'twitterTitle'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePostTask.perform();
        });
      },

      setTwitterDescription(twitterDescription) {
        // Grab the post and current stored twitter description
        let post = this.post;
        let currentDescription = post.get('twitterDescription'); // If the description entered matches the stored twitter description, do nothing

        if (currentDescription === twitterDescription) {
          return;
        } // If the description entered is different, set it as the new twitter description


        post.set('twitterDescription', twitterDescription); // Make sure the twitter description is valid and if so, save it into the post

        return post.validate({
          property: 'twitterDescription'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePostTask.perform();
        });
      },

      setCoverImage(image) {
        this.set('post.featureImage', image);

        if (this.get('post.isNew')) {
          return;
        }

        this.savePostTask.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      clearCoverImage() {
        this.set('post.featureImage', '');

        if (this.get('post.isNew')) {
          return;
        }

        this.savePostTask.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      setOgImage(image) {
        this.set('post.ogImage', image);

        if (this.get('post.isNew')) {
          return;
        }

        this.savePostTask.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      clearOgImage() {
        this.set('post.ogImage', '');

        if (this.get('post.isNew')) {
          return;
        }

        this.savePostTask.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      setTwitterImage(image) {
        this.set('post.twitterImage', image);

        if (this.get('post.isNew')) {
          return;
        }

        this.savePostTask.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      clearTwitterImage() {
        this.set('post.twitterImage', '');

        if (this.get('post.isNew')) {
          return;
        }

        this.savePostTask.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      changeAuthors(newAuthors) {
        let post = this.post; // return if nothing changed

        if (newAuthors.mapBy('id').join() === post.get('authors').mapBy('id').join()) {
          return;
        }

        post.set('authors', newAuthors);
        post.validate({
          property: 'authors'
        }); // if this is a new post (never been saved before), don't try to save it

        if (post.get('isNew')) {
          return;
        }

        this.savePostTask.perform().catch(error => {
          this.showError(error);
          post.rollbackAttributes();
        });
      },

      deletePost() {
        if (this.deletePost) {
          this.deletePost();
        }
      }

    },

    showError(error) {
      // TODO: remove null check once ValidationEngine has been removed
      if (error) {
        this.notifications.showAPIError(error);
      }
    },

    setSidebarWidthFromElement: Ember._action(function (element) {
      const width = element.getBoundingClientRect().width;
      this.setSidebarWidthVariable(width);
    }),

    setSidebarWidthVariable(width) {
      document.documentElement.style.setProperty('--editor-sidebar-width', `${width}px`);
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-post-settings-menu/email", ["exports", "ghost-admin/errors/email-failed-error", "validator", "ember-concurrency"], function (_exports, _emailFailedError, _validator, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="settings-menu-header subview">
      <button {{on "click" this.close}} class="back settings-menu-header-action" data-test-button="close-psm-subview">{{svg-jar "arrow-left"}}<span class="hidden">Back</span></button>
      <h4>Email newsletter</h4>
      <div style="width:23px;"></div>
  </div>
  
  <div class="settings-menu-content settings-menu-email">
      {{#if this.post.email.isSuccess}}
          {{!-- Mail has already been sent --}}
          <div class="ba b--whitegrey bg-white br3">
              <div class="flex pa5 pt4 pb4 items-center bb b--whitegrey">
                  <div class="w16 flex flex-column items-center">
                      <span class="db mr4 mt2">{{svg-jar "send-email" class="w6 h6 stroke-midlightgrey"}}</span>
                  </div>
                  <div class="flex flex-column justify-center">
                      <p class="ma0 pa0 midgrey">Post was sent by email to</p>
                      <p class="ma0 pa0 f5 lh-solid">{{gh-pluralize this.post.email.emailCount "member"}}</p>
                  </div>
              </div>
              <div class="pa5 pt3 pb3 f7 bb b--whitegrey">
                  <table class="ma0" style="table-layout: fixed">
                      <tbody>
                          <tr>
                              <td class="pa1 pl0 fw7 f8 w16 v-top lh-copy">Subject:</td>
                              <td class="pa1 pa0 midgrey v-top lh-copy">{{this.post.email.subject}}</td>
                          </tr>
                          <tr>
                              <td class="pa1 pl0 fw7 f8 w16 nowrap v-top lh-copy">Sent:</td>
                              <td class="pa1 pa0 midgrey v-top lh-copy">{{gh-format-post-time this.post.email.createdAtUTC}}</td>
                          </tr>
                      </tbody>
                  </table>
              </div>
              <div class="pa5 pt3 pb3">
                  <p class="ma0 pa0">
                      <GhEmailPreviewLink class="green" @data={{this.post}}>View sent email</GhEmailPreviewLink>
                  </p>
              </div>
          </div>
      {{else if (or this.retryEmail.isRunning this.post.email.isFailure)}}
          {{!-- Mail failed to send --}}
  
          <div class="gh-box-error">
              <div class="flex pa5 pt4 pb4 items-center bb b--whitegrey">
                  <div class="w16 flex flex-column items-center">
                      <span class="db mr4 mt3">{{svg-jar "warning" class="w7 h7 fill-red"}}</span>
                  </div>
                  <div class="flex flex-column justify-center">
                      <p class="ma0 pa0 midgrey">Post failed to send to</p>
                      <p class="ma0 pa0 f5 lh-solid">{{gh-pluralize this.post.email.emailCount "member"}}</p>
                  </div>
              </div>
              <div class="pa5 pt3 pb3 f7 bb b--whitegrey">
                  <p class="mb2 lh-copy">
                      Email failed to send when publishing this post. Please verify your email settings if the error persists.
                  </p>
                  <p class="ma0 pa0">
                      <table class="ma0" style="table-layout: fixed">
                          <tbody>
                              <tr>
                                  <td class="pa1 pl0 fw7 f8 w16 v-top lh-copy">Error:</td>
                                  <td class="pa1 pl0 midgrey v-top lh-copy">{{this.post.email.error}}</td>
                              </tr>
                          </tbody>
                      </table>
                  </p>
              </div>
              <div class="pa5 pt3 pb3 f7 bb b--whitegrey">
                  <table class="ma0" style="table-layout: fixed">
                      <tbody>
                          <tr>
                              <td class="pa1 pl0 fw7 f8 w16 v-top lh-copy">Subject:</td>
                              <td class="pa1 pl0 truncate midgrey v-top lh-copy">{{this.post.email.subject}}</td>
                          </tr>
                          <tr>
                              <td class="pa1 pl0 fw7 f8 w16 nowrap v-top lh-copy">Tried:</td>
                              <td class="pa1 pl0 truncate midgrey v-top lh-copy">{{gh-format-post-time this.post.email.createdAtUTC}}</td>
                          </tr>
                      </tbody>
                  </table>
              </div>
              <div class="pa5 pt3 pb3 flex justify-between items center">
                  <GhEmailPreviewLink class="blue" @data={{this.post}}>View email</GhEmailPreviewLink>
                  <GhTaskButton @buttonText="Retry send" @runningText="Sending..." @task={{this.retryEmail}} @class="gh-btn gh-btn-icon" data-test-button="retry-email" />
              </div>
          </div>
      {{else}}
          {{!-- Mail not sent yet --}}
          {{#if this.mailgunError}}
              <p class="gh-box gh-box-alert settings-menu-mailgun-alert">
                  {{svg-jar "info" class="w5 h5 fill-yellow nl1"}}
                  You need to configure Mailgun in <LinkTo @route="settings.members-email" data-test-nav="labs">Settings &rarr; Email newsletter</LinkTo> to enable email newsletters.
              </p>
          {{/if}}
  
          <form {{action "discardEnter" on="submit"}}>
              <GhFormGroup @errors={{this.post.errors}} @hasValidated={{this.post.hasValidated}} @property="emailSubject">
                  <label for="og-title">Subject</label>
                  <GhTextInput
                      @class="post-setting-email-subject"
                      @id="email-subject"
                      @name="post-setting-email-subject"
                      @placeholder={{truncate this.emailSubject 40}}
                      @value={{readonly this.emailSubjectScratch}}
                      @input={{action (mut this.emailSubjectScratch) value="target.value"}}
                      @focus-out={{action "setEmailSubject" this.emailSubjectScratch}}
                      @stopEnterKeyDownPropagation={{true}}
                      @disabled={{this.mailgunError}}
                      data-test-field="email-subject" />
                  <GhErrorMessage @errors={{this.post.errors}} @property="emailSubject" data-test-error="email-subject" />
              </GhFormGroup>
  
              <div class="form-group">
                  <div class="flex">
                      <label class="nowrap flex-auto">Test email</label>
                      <GhEmailPreviewLink class="gh-btn gh-btn-link settings-menu-email-button" @data={{this.post}} data-test-button="toggle-email-preview">
                          <span class="green">
                              Preview in browser
                          </span>
                      </GhEmailPreviewLink>
                  </div>
  
                  <div class="{{if this.mailgunError "disabled"}}">
                      <GhTextInput
                          @class="post-setting-email-test"
                          @id="email-test"
                          @name="post-setting-email-test"
                          @placeholder="noreply@example.com"
                          @value={{this.testEmailAddress}}
                          @stopEnterKeyDownPropagation={{true}}
                          @disabled={{this.mailgunError}}
                          data-test-field="email-test" />
  
                      {{#if this.sendTestEmailError}}
                          <div class="error"><p class="response">{{this.sendTestEmailError}}</p></div>
                      {{/if}}
  
                      <GhTaskButton @buttonText="Send test email"
                          @task={{this.sendTestEmail}}
                          @successText="Email sent"
                          @runningText="Sending..."
                          @class="gh-btn w-100 mt2 gh-btn-icon"
                          @disabled={{this.mailgunError}}
                          data-test-send-test-mail="true"
                      />
                  </div>
              </div>
          </form>
      {{/if}}
  </div>
  */
  {
    "id": "5McVGULl",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"settings-menu-header subview\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"back settings-menu-header-action\"],[24,\"data-test-button\",\"close-psm-subview\"],[4,[38,9],[\"click\",[32,0,[\"close\"]]],null],[12],[1,[30,[36,0],[\"arrow-left\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Back\"],[13],[13],[2,\"\\n    \"],[10,\"h4\"],[12],[2,\"Email newsletter\"],[13],[2,\"\\n    \"],[10,\"div\"],[14,5,\"width:23px;\"],[12],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"settings-menu-content settings-menu-email\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"post\",\"email\",\"isSuccess\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"ba b--whitegrey bg-white br3\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"flex pa5 pt4 pb4 items-center bb b--whitegrey\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"w16 flex flex-column items-center\"],[12],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"db mr4 mt2\"],[12],[1,[30,[36,0],[\"send-email\"],[[\"class\"],[\"w6 h6 stroke-midlightgrey\"]]]],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"flex flex-column justify-center\"],[12],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"ma0 pa0 midgrey\"],[12],[2,\"Post was sent by email to\"],[13],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"ma0 pa0 f5 lh-solid\"],[12],[1,[30,[36,6],[[32,0,[\"post\",\"email\",\"emailCount\"]],\"member\"],null]],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"pa5 pt3 pb3 f7 bb b--whitegrey\"],[12],[2,\"\\n                \"],[10,\"table\"],[14,0,\"ma0\"],[14,5,\"table-layout: fixed\"],[12],[2,\"\\n                    \"],[10,\"tbody\"],[12],[2,\"\\n                        \"],[10,\"tr\"],[12],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"pa1 pl0 fw7 f8 w16 v-top lh-copy\"],[12],[2,\"Subject:\"],[13],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"pa1 pa0 midgrey v-top lh-copy\"],[12],[1,[32,0,[\"post\",\"email\",\"subject\"]]],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"tr\"],[12],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"pa1 pl0 fw7 f8 w16 nowrap v-top lh-copy\"],[12],[2,\"Sent:\"],[13],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"pa1 pa0 midgrey v-top lh-copy\"],[12],[1,[30,[36,7],[[32,0,[\"post\",\"email\",\"createdAtUTC\"]]],null]],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"pa5 pt3 pb3\"],[12],[2,\"\\n                \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                    \"],[8,\"gh-email-preview-link\",[[24,0,\"green\"]],[[\"@data\"],[[32,0,[\"post\"]]]],[[\"default\"],[{\"statements\":[[2,\"View sent email\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[30,[36,8],[[32,0,[\"retryEmail\",\"isRunning\"]],[32,0,[\"post\",\"email\",\"isFailure\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-box-error\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"flex pa5 pt4 pb4 items-center bb b--whitegrey\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"w16 flex flex-column items-center\"],[12],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"db mr4 mt3\"],[12],[1,[30,[36,0],[\"warning\"],[[\"class\"],[\"w7 h7 fill-red\"]]]],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"flex flex-column justify-center\"],[12],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"ma0 pa0 midgrey\"],[12],[2,\"Post failed to send to\"],[13],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"ma0 pa0 f5 lh-solid\"],[12],[1,[30,[36,6],[[32,0,[\"post\",\"email\",\"emailCount\"]],\"member\"],null]],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"pa5 pt3 pb3 f7 bb b--whitegrey\"],[12],[2,\"\\n                \"],[10,\"p\"],[14,0,\"mb2 lh-copy\"],[12],[2,\"\\n                    Email failed to send when publishing this post. Please verify your email settings if the error persists.\\n                \"],[13],[2,\"\\n                \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                    \"],[10,\"table\"],[14,0,\"ma0\"],[14,5,\"table-layout: fixed\"],[12],[2,\"\\n                        \"],[10,\"tbody\"],[12],[2,\"\\n                            \"],[10,\"tr\"],[12],[2,\"\\n                                \"],[10,\"td\"],[14,0,\"pa1 pl0 fw7 f8 w16 v-top lh-copy\"],[12],[2,\"Error:\"],[13],[2,\"\\n                                \"],[10,\"td\"],[14,0,\"pa1 pl0 midgrey v-top lh-copy\"],[12],[1,[32,0,[\"post\",\"email\",\"error\"]]],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"pa5 pt3 pb3 f7 bb b--whitegrey\"],[12],[2,\"\\n                \"],[10,\"table\"],[14,0,\"ma0\"],[14,5,\"table-layout: fixed\"],[12],[2,\"\\n                    \"],[10,\"tbody\"],[12],[2,\"\\n                        \"],[10,\"tr\"],[12],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"pa1 pl0 fw7 f8 w16 v-top lh-copy\"],[12],[2,\"Subject:\"],[13],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"pa1 pl0 truncate midgrey v-top lh-copy\"],[12],[1,[32,0,[\"post\",\"email\",\"subject\"]]],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"tr\"],[12],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"pa1 pl0 fw7 f8 w16 nowrap v-top lh-copy\"],[12],[2,\"Tried:\"],[13],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"pa1 pl0 truncate midgrey v-top lh-copy\"],[12],[1,[30,[36,7],[[32,0,[\"post\",\"email\",\"createdAtUTC\"]]],null]],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"pa5 pt3 pb3 flex justify-between items center\"],[12],[2,\"\\n                \"],[8,\"gh-email-preview-link\",[[24,0,\"blue\"]],[[\"@data\"],[[32,0,[\"post\"]]]],[[\"default\"],[{\"statements\":[[2,\"View email\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"retry-email\"]],[[\"@buttonText\",\"@runningText\",\"@task\",\"@class\"],[\"Retry send\",\"Sending...\",[32,0,[\"retryEmail\"]],\"gh-btn gh-btn-icon\"]],null],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[32,0,[\"mailgunError\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"p\"],[14,0,\"gh-box gh-box-alert settings-menu-mailgun-alert\"],[12],[2,\"\\n                \"],[1,[30,[36,0],[\"info\"],[[\"class\"],[\"w5 h5 fill-yellow nl1\"]]]],[2,\"\\n                You need to configure Mailgun in \"],[8,\"link-to\",[[24,\"data-test-nav\",\"labs\"]],[[\"@route\"],[\"settings.members-email\"]],[[\"default\"],[{\"statements\":[[2,\"Settings → Email newsletter\"]],\"parameters\":[]}]]],[2,\" to enable email newsletters.\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n        \"],[11,\"form\"],[4,[38,2],[[32,0],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"post\",\"errors\"]],[32,0,[\"post\",\"hasValidated\"]],\"emailSubject\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"label\"],[14,\"for\",\"og-title\"],[12],[2,\"Subject\"],[13],[2,\"\\n                \"],[8,\"gh-text-input\",[[24,\"data-test-field\",\"email-subject\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\",\"@disabled\"],[\"post-setting-email-subject\",\"email-subject\",\"post-setting-email-subject\",[30,[36,3],[[32,0,[\"emailSubject\"]],40],null],[30,[36,4],[[32,0,[\"emailSubjectScratch\"]]],null],[30,[36,2],[[32,0],[30,[36,5],[[32,0,[\"emailSubjectScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,2],[[32,0],\"setEmailSubject\",[32,0,[\"emailSubjectScratch\"]]],null],true,[32,0,[\"mailgunError\"]]]],null],[2,\"\\n                \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"email-subject\"]],[[\"@errors\",\"@property\"],[[32,0,[\"post\",\"errors\"]],\"emailSubject\"]],null],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"flex\"],[12],[2,\"\\n                    \"],[10,\"label\"],[14,0,\"nowrap flex-auto\"],[12],[2,\"Test email\"],[13],[2,\"\\n                    \"],[8,\"gh-email-preview-link\",[[24,0,\"gh-btn gh-btn-link settings-menu-email-button\"],[24,\"data-test-button\",\"toggle-email-preview\"]],[[\"@data\"],[[32,0,[\"post\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"span\"],[14,0,\"green\"],[12],[2,\"\\n                            Preview in browser\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[15,0,[31,[[30,[36,1],[[32,0,[\"mailgunError\"]],\"disabled\"],null]]]],[12],[2,\"\\n                    \"],[8,\"gh-text-input\",[[24,\"data-test-field\",\"email-test\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@stopEnterKeyDownPropagation\",\"@disabled\"],[\"post-setting-email-test\",\"email-test\",\"post-setting-email-test\",\"noreply@example.com\",[32,0,[\"testEmailAddress\"]],true,[32,0,[\"mailgunError\"]]]],null],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"sendTestEmailError\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"error\"],[12],[10,\"p\"],[14,0,\"response\"],[12],[1,[32,0,[\"sendTestEmailError\"]]],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[8,\"gh-task-button\",[[24,\"data-test-send-test-mail\",\"true\"]],[[\"@buttonText\",\"@task\",\"@successText\",\"@runningText\",\"@class\",\"@disabled\"],[\"Send test email\",[32,0,[\"sendTestEmail\"]],\"Email sent\",\"Sending...\",\"gh-btn w-100 mt2 gh-btn-icon\",[32,0,[\"mailgunError\"]]]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"action\",\"truncate\",\"readonly\",\"mut\",\"gh-pluralize\",\"gh-format-post-time\",\"or\",\"on\"]}",
    "moduleName": "ghost-admin/components/gh-post-settings-menu/email.hbs"
  });

  const RETRY_EMAIL_POLL_LENGTH = 1000;
  const RETRY_EMAIL_MAX_POLL_LENGTH = 15 * 1000;

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    ajax: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    config: Ember.inject.service(),
    post: null,
    sendTestEmailError: '',
    savePostTask: null,

    close() {},

    emailSubject: Ember.computed.or('emailSubjectScratch', 'post.title'),
    emailSubjectScratch: Ember.computed.alias('post.emailSubjectScratch'),
    testEmailAddress: Ember.computed.oneWay('session.user.email'),
    mailgunError: Ember.computed.not('mailgunIsEnabled'),
    mailgunIsEnabled: Ember.computed('settings.{mailgunApiKey,mailgunDomain,mailgunBaseUrl}', 'config.mailgunIsConfigured', function () {
      return this.get('settings.mailgunApiKey') && this.get('settings.mailgunDomain') && this.get('settings.mailgunBaseUrl') || this.get('config.mailgunIsConfigured');
    }),
    actions: {
      setEmailSubject(emailSubject) {
        // Grab the post and current stored email subject
        let post = this.post;
        let currentEmailSubject = post.get('emailSubject'); // If the subject entered matches the stored email subject, do nothing

        if (currentEmailSubject === emailSubject) {
          return;
        } // If the subject entered is different, set it as the new email subject


        post.set('emailSubject', emailSubject); // Make sure the email subject is valid and if so, save it into the post

        return post.validate({
          property: 'emailSubject'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePostTask.perform();
        });
      },

      discardEnter() {
        return false;
      }

    },
    sendTestEmail: (0, _emberConcurrency.task)(function* () {
      try {
        const resourceId = this.post.id;
        const testEmail = this.testEmailAddress.trim();

        if (!_validator.default.isEmail(testEmail)) {
          this.set('sendTestEmailError', 'Please enter a valid email');
          return false;
        }

        if (!this.mailgunIsEnabled) {
          this.set('sendTestEmailError', 'Please verify your email settings');
          return false;
        }

        this.set('sendTestEmailError', '');
        const url = this.ghostPaths.url.api('/email_preview/posts', resourceId);
        const data = {
          emails: [testEmail]
        };
        const options = {
          data,
          dataType: 'json'
        };
        return yield this.ajax.post(url, options);
      } catch (error) {
        if (error) {
          let message = 'Email could not be sent, verify mail settings'; // grab custom error message if present

          if (error.payload && error.payload.errors && error.payload.errors[0] && error.payload.errors[0].message) {
            message = Ember.String.htmlSafe(error.payload.errors[0].message);
          }

          this.set('sendTestEmailError', message);
        }
      }
    }).drop(),
    retryEmail: (0, _emberConcurrency.task)(function* () {
      let {
        email
      } = this.post;

      if (email && email.status === 'failed') {
        // trigger the retry
        yield email.retry(); // poll for success/failure state

        let pollTimeout = 0;

        while (pollTimeout < RETRY_EMAIL_MAX_POLL_LENGTH) {
          yield (0, _emberConcurrency.timeout)(RETRY_EMAIL_POLL_LENGTH);
          yield email.reload();

          if (email.status === 'submitted') {
            break;
          }

          if (email.status === 'failed') {
            throw new _emailFailedError.default(email.error);
          }

          pollTimeout += RETRY_EMAIL_POLL_LENGTH;
        }
      }

      return true;
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-posts-list-item", ["exports", "@glimmer/component", "ghost-admin/helpers/gh-format-post-time"], function (_exports, _component, _ghFormatPostTime) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <li class="gh-list-row gh-posts-list-item"
      {{on "mouseover" this.mouseOver}}
      {{on "mouseleave" this.mouseLeave}}
      ...attributes
  >
      <LinkTo @route="editor.edit" @models={{array @post.displayName @post.id}} class="permalink gh-list-data gh-post-list-title">
          <h3 class="gh-content-entry-title">
              {{@post.title}}
          </h3>
          <p>
              <span class="gh-content-entry-meta">
                  Por <span class="midgrey-l2 fw5">{{this.authorNames}}</span>
  
                  {{#if @post.primaryTag}}
                      en <span class="midgrey-l2 fw5">{{@post.primaryTag.name}}</span>
                  {{/if}}
  
                   • <span data-tooltip="{{gh-format-post-time @post.updatedAtUTC "D MMM YYYY"}}">{{gh-format-post-time @post.updatedAtUTC draft=true}}</span>
  
              </span>
          </p>
      </LinkTo>
  
      {{#if (not-eq this.settings.editorDefaultEmailRecipients "disabled")}}
          {{#if (and this.feature.emailAnalytics (eq @post.displayName "post"))}}
              <LinkTo @route="editor.edit" @models={{array @post.displayName @post.id}} class="permalink gh-list-data gh-post-list-recipients">
                  <div class="flex fw4">
                      {{#if (or @post.email @post.willEmail)}}
                          {{#if (eq @post.email.status "submitted")}}
                              <span class="flex" data-tooltip="{{capitalize @post.email.recipientFilter}} members">
                                  <span class="darkgrey fw5 gh-content-email-stats">{{@post.email.emailCount}}</span>
                                  <span class="midgrey-l2 fw4 gh-content-email-stats-mobile">{{gh-pluralize @post.email.emailCount "send"}}</span>
                              </span>
                          {{/if}}
                      {{/if}}
                  </div>
              </LinkTo>
  
              <LinkTo @route="editor.edit" @models={{array @post.displayName @post.id}} class="permalink gh-list-data gh-post-list-opens">
                  {{#if (and @post.email.trackOpens (eq @post.email.status "submitted"))}}
                      <div class="flex">
                          <span class="darkgrey fw5 gh-content-email-stats">
                              {{#if this.isHovered}}
                                  {{@post.email.openedCount}}
                              {{else}}
                                  {{@post.email.openRate}}%&nbsp;
                              {{/if}}
                          </span>
                          <span class="midgrey-l2 fw4 gh-content-email-stats-mobile">{{@post.email.openRate}}% aperturas</span>
                      </div>
                  {{/if}}
              </LinkTo>
          {{/if}}
      {{/if}}
  
      <LinkTo @route="editor.edit" @models={{array @post.displayName @post.id}} class="permalink gh-list-data gh-post-list-status">
          <div class="flex items-center">
              {{#if @post.isScheduled}}
              <span class="gh-content-status-scheduled gh-badge nowrap" title="Scheduled" data-tooltip="{{capitalize this.scheduledText}} to {{@post.emailRecipientFilter}} members">
                  Programado
                  {{#if @post.emailRecipientFilter}}
                  {{svg-jar "email-stroke"}}
                  {{/if}}
              </span>
              {{/if}}
  
              {{#if @post.isDraft}}
              <span class="gh-content-status-draft gh-badge gh-badge-pink nowrap">
                  Borrador
              </span>
              {{/if}}
  
              {{#if @post.isPublished}}
              <span class="gh-content-status-published nowrap">
                  Publicado
                  {{#if @post.hasEmail}}
                  {{svg-jar "email-stroke"}}
                  {{/if}}
              </span>
              {{/if}}
  
              {{#if @post.isSent}}
              <span class="gh-content-status-emailed nowrap">
                  {{svg-jar "email-stroke"}}
              </span>
              {{/if}}
          </div>
      </LinkTo>
  </li>
  */
  {
    "id": "mDlO5fMS",
    "block": "{\"symbols\":[\"@post\",\"&attrs\"],\"statements\":[[11,\"li\"],[24,0,\"gh-list-row gh-posts-list-item\"],[17,2],[4,[38,8],[\"mouseover\",[32,0,[\"mouseOver\"]]],null],[4,[38,8],[\"mouseleave\",[32,0,[\"mouseLeave\"]]],null],[12],[2,\"\\n    \"],[8,\"link-to\",[[24,0,\"permalink gh-list-data gh-post-list-title\"]],[[\"@route\",\"@models\"],[\"editor.edit\",[30,[36,5],[[32,1,[\"displayName\"]],[32,1,[\"id\"]]],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h3\"],[14,0,\"gh-content-entry-title\"],[12],[2,\"\\n            \"],[1,[32,1,[\"title\"]]],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            \"],[10,\"span\"],[14,0,\"gh-content-entry-meta\"],[12],[2,\"\\n                Por \"],[10,\"span\"],[14,0,\"midgrey-l2 fw5\"],[12],[1,[32,0,[\"authorNames\"]]],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,1,[\"primaryTag\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    en \"],[10,\"span\"],[14,0,\"midgrey-l2 fw5\"],[12],[1,[32,1,[\"primaryTag\",\"name\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                 • \"],[10,\"span\"],[15,\"data-tooltip\",[31,[[30,[36,9],[[32,1,[\"updatedAtUTC\"]],\"D MMM YYYY\"],null]]]],[12],[1,[30,[36,9],[[32,1,[\"updatedAtUTC\"]]],[[\"draft\"],[true]]]],[13],[2,\"\\n\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,1],[[30,[36,10],[[32,0,[\"settings\",\"editorDefaultEmailRecipients\"]],\"disabled\"],null]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[30,[36,7],[[32,0,[\"feature\",\"emailAnalytics\"]],[30,[36,4],[[32,1,[\"displayName\"]],\"post\"],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[8,\"link-to\",[[24,0,\"permalink gh-list-data gh-post-list-recipients\"]],[[\"@route\",\"@models\"],[\"editor.edit\",[30,[36,5],[[32,1,[\"displayName\"]],[32,1,[\"id\"]]],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"div\"],[14,0,\"flex fw4\"],[12],[2,\"\\n\"],[6,[37,1],[[30,[36,6],[[32,1,[\"email\"]],[32,1,[\"willEmail\"]]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[30,[36,4],[[32,1,[\"email\",\"status\"]],\"submitted\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"span\"],[14,0,\"flex\"],[15,\"data-tooltip\",[31,[[30,[36,2],[[32,1,[\"email\",\"recipientFilter\"]]],null],\" members\"]]],[12],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"darkgrey fw5 gh-content-email-stats\"],[12],[1,[32,1,[\"email\",\"emailCount\"]]],[13],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"midgrey-l2 fw4 gh-content-email-stats-mobile\"],[12],[1,[30,[36,3],[[32,1,[\"email\",\"emailCount\"]],\"send\"],null]],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n\\n            \"],[8,\"link-to\",[[24,0,\"permalink gh-list-data gh-post-list-opens\"]],[[\"@route\",\"@models\"],[\"editor.edit\",[30,[36,5],[[32,1,[\"displayName\"]],[32,1,[\"id\"]]],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,1],[[30,[36,7],[[32,1,[\"email\",\"trackOpens\"]],[30,[36,4],[[32,1,[\"email\",\"status\"]],\"submitted\"],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"flex\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"darkgrey fw5 gh-content-email-stats\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"isHovered\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[1,[32,1,[\"email\",\"openedCount\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[1,[32,1,[\"email\",\"openRate\"]]],[2,\"% \\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"midgrey-l2 fw4 gh-content-email-stats-mobile\"],[12],[1,[32,1,[\"email\",\"openRate\"]]],[2,\"% aperturas\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n    \"],[8,\"link-to\",[[24,0,\"permalink gh-list-data gh-post-list-status\"]],[[\"@route\",\"@models\"],[\"editor.edit\",[30,[36,5],[[32,1,[\"displayName\"]],[32,1,[\"id\"]]],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n\"],[6,[37,1],[[32,1,[\"isScheduled\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"gh-content-status-scheduled gh-badge nowrap\"],[14,\"title\",\"Scheduled\"],[15,\"data-tooltip\",[31,[[30,[36,2],[[32,0,[\"scheduledText\"]]],null],\" to \",[32,1,[\"emailRecipientFilter\"]],\" members\"]]],[12],[2,\"\\n                Programado\\n\"],[6,[37,1],[[32,1,[\"emailRecipientFilter\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[1,[30,[36,0],[\"email-stroke\"],null]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[32,1,[\"isDraft\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"gh-content-status-draft gh-badge gh-badge-pink nowrap\"],[12],[2,\"\\n                Borrador\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[32,1,[\"isPublished\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"gh-content-status-published nowrap\"],[12],[2,\"\\n                Publicado\\n\"],[6,[37,1],[[32,1,[\"hasEmail\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[1,[30,[36,0],[\"email-stroke\"],null]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[32,1,[\"isSent\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"gh-content-status-emailed nowrap\"],[12],[2,\"\\n                \"],[1,[30,[36,0],[\"email-stroke\"],null]],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"capitalize\",\"gh-pluralize\",\"eq\",\"array\",\"or\",\"and\",\"on\",\"gh-format-post-time\",\"not-eq\"]}",
    "moduleName": "ghost-admin/components/gh-posts-list-item.hbs"
  });

  let GhPostsListItemComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._tracked, _dec5 = Ember._action, _dec6 = Ember._action, (_class = class GhPostsListItemComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "feature", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "settings", _descriptor3, this);

      _initializerDefineProperty(this, "isHovered", _descriptor4, this);
    }

    get authorNames() {
      return this.args.post.authors.map(author => author.name || author.email).join(', ');
    }

    get sendEmailWhenPublished() {
      let {
        post
      } = this.args;
      return post.emailRecipientFilter && post.emailRecipientFilter !== 'none';
    }

    get scheduledText() {
      let {
        post
      } = this.args;
      let text = [];
      let formattedTime = (0, _ghFormatPostTime.formatPostTime)(post.publishedAtUTC, {
        timezone: this.settings.get('timezone'),
        scheduled: true
      });
      text.push(formattedTime);
      return text.join(' ');
    }

    mouseOver() {
      this.isHovered = true;
    }

    mouseLeave() {
      this.isHovered = false;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "isHovered", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "mouseOver", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "mouseOver"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "mouseLeave", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "mouseLeave"), _class.prototype)), _class));
  _exports.default = GhPostsListItemComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhPostsListItemComponent);
});
;define("ghost-admin/components/gh-power-select/trigger", ["exports", "ember-power-select/components/power-select/trigger"], function (_exports, _trigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if @select.selected}}
      {{#if @selectedItemComponent}}
          {{component @selectedItemComponent extra=(readonly @extra) option=(readonly @option.selected) select=(readonly @select)}}
      {{else}}
          <span class="ember-power-select-selected-item">{{yield @select.selected select}}</span>
      {{/if}}
      {{#if (and @allowClear (not @select.disabled))}}
          <span class="ember-power-select-clear-btn" {{on "mousedown" this.clear}} {{on "touchstart" this.clear}}>&times;</span>
      {{/if}}
  {{else}}
      {{component @placeholderComponent placeholder=@placeholder}}
  {{/if}}
  {{!-- this next line is the only difference from original trigger.hbs --}}
  {{svg-jar "arrow-down-small"}}
  
  */
  {
    "id": "Px6RqG0X",
    "block": "{\"symbols\":[\"@placeholder\",\"@placeholderComponent\",\"@select\",\"&default\",\"@option\",\"@extra\",\"@selectedItemComponent\",\"@allowClear\"],\"statements\":[[6,[37,4],[[32,3,[\"selected\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,4],[[32,7]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[1,[30,[36,0],[[32,7]],[[\"extra\",\"option\",\"select\"],[[30,[36,3],[[32,6]],null],[30,[36,3],[[32,5,[\"selected\"]]],null],[30,[36,3],[[32,3]],null]]]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[10,\"span\"],[14,0,\"ember-power-select-selected-item\"],[12],[18,4,[[32,3,[\"selected\"]],[35,2]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,4],[[30,[36,6],[[32,8],[30,[36,5],[[32,3,[\"disabled\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[11,\"span\"],[24,0,\"ember-power-select-clear-btn\"],[4,[38,1],[\"mousedown\",[32,0,[\"clear\"]]],null],[4,[38,1],[\"touchstart\",[32,0,[\"clear\"]]],null],[12],[2,\"×\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[1,[30,[36,0],[[32,2]],[[\"placeholder\"],[[32,1]]]]],[2,\"\\n\"]],\"parameters\":[]}]]],[1,[30,[36,7],[\"arrow-down-small\"],null]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"component\",\"on\",\"select\",\"readonly\",\"if\",\"not\",\"and\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/gh-power-select/trigger.hbs"
  });

  let Trigger = (_dec = Ember.inject.service, (_class = class Trigger extends _trigger.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "dropdown", _descriptor, this);

      this.dropdown.on('close', this, this.closeFromDropdown);
    }

    willDestroy() {
      super.willDestroy(...arguments);
      this.dropdown.off('close', this, this.closeFromDropdown);
    }

    closeFromDropdown() {
      this.args.select.actions.close();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "dropdown", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = Trigger;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Trigger);
});
;define("ghost-admin/components/gh-product-card", ["exports", "@glimmer/component", "ghost-admin/utils/currency"], function (_exports, _component, _currency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-main-content-card gh-product-card">
      <button class="gh-product-card-editbutton gh-btn gh-btn-text gh-btn-link green" {{action "openEditProduct" this.product}}>
          <span>Edit</span>
      </button>
      <div class="gh-product-card-block title-block">
          <h3 class="gh-product-card-name">
              {{this.product.name}}
          </h3>
          <p class="gh-product-card-description">
              {{this.product.description}}
          </p>
      </div>
      <div class="gh-product-card-block benefits-block">
          <h4>Benefits <span class="counter">({{if this.product.benefits.length product.benefits.length "0"}})</span></h4>
          {{#if this.product.benefits.length}}
              <ul class="benefits">
                  {{#each this.product.benefits as |benefit|}}
                      <li>{{svg-jar "check"}} {{benefit.name}} </li>
                  {{/each}}
              </ul>
          {{else}}
              <p class="gh-product-card-description">No benefits added for this tier.</p>
          {{/if}}
      </div>
      {{#if (eq this.product.type "free" )}}
          <div class="gh-product-card-block">
              <div class="gh-product-price-container">
                  <div class="gh-product-card-price">
                      <div class="flex items-start">
                          <span class="currency">{{currency-symbol this.productCurrency}}</span>
                          <span class="amount">0</span>
                      </div>
                  </div>
              </div>
          </div>
      {{/if}}
      {{#if (eq this.product.type "paid" )}}
          <div class="gh-product-card-block">
              <div class="gh-product-price-container">
                  <div class="gh-product-card-price">
                      <div class="flex items-start">
                          <span class="currency">{{currency-symbol this.productCurrency}}</span>
                          <span class="amount">{{gh-price-amount this.product.monthlyPrice.amount}}</span>
                      </div>
                      <div class="period">Monthly</div>
                  </div>
                  <div class="gh-product-card-price">
                      <div class="flex items-start">
                          <span class="currency">{{currency-symbol this.productCurrency}}</span>
                          <span class="amount">{{gh-price-amount this.product.yearlyPrice.amount}}</span>
                      </div>
                      <div class="period">Yearly</div>
                  </div>
              </div>
          </div>
      {{/if}}
  </div>
  
  */
  {
    "id": "rIzVWgmL",
    "block": "{\"symbols\":[\"benefit\"],\"statements\":[[10,\"div\"],[14,0,\"gh-main-content-card gh-product-card\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-product-card-editbutton gh-btn gh-btn-text gh-btn-link green\"],[4,[38,5],[[32,0],\"openEditProduct\",[32,0,[\"product\"]]],null],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Edit\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-product-card-block title-block\"],[12],[2,\"\\n        \"],[10,\"h3\"],[14,0,\"gh-product-card-name\"],[12],[2,\"\\n            \"],[1,[32,0,[\"product\",\"name\"]]],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"p\"],[14,0,\"gh-product-card-description\"],[12],[2,\"\\n            \"],[1,[32,0,[\"product\",\"description\"]]],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-product-card-block benefits-block\"],[12],[2,\"\\n        \"],[10,\"h4\"],[12],[2,\"Benefits \"],[10,\"span\"],[14,0,\"counter\"],[12],[2,\"(\"],[1,[30,[36,7],[[32,0,[\"product\",\"benefits\",\"length\"]],[35,6,[\"benefits\",\"length\"]],\"0\"],null]],[2,\")\"],[13],[13],[2,\"\\n\"],[6,[37,7],[[32,0,[\"product\",\"benefits\",\"length\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"ul\"],[14,0,\"benefits\"],[12],[2,\"\\n\"],[6,[37,4],[[30,[36,3],[[30,[36,3],[[32,0,[\"product\",\"benefits\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"li\"],[12],[1,[30,[36,2],[\"check\"],null]],[2,\" \"],[1,[32,1,[\"name\"]]],[2,\" \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"p\"],[14,0,\"gh-product-card-description\"],[12],[2,\"No benefits added for this tier.\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[6,[37,7],[[30,[36,8],[[32,0,[\"product\",\"type\"]],\"free\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"gh-product-card-block\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-product-price-container\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-product-card-price\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"flex items-start\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"currency\"],[12],[1,[30,[36,0],[[32,0,[\"productCurrency\"]]],null]],[13],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"amount\"],[12],[2,\"0\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,7],[[30,[36,8],[[32,0,[\"product\",\"type\"]],\"paid\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"gh-product-card-block\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-product-price-container\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-product-card-price\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"flex items-start\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"currency\"],[12],[1,[30,[36,0],[[32,0,[\"productCurrency\"]]],null]],[13],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"amount\"],[12],[1,[30,[36,1],[[32,0,[\"product\",\"monthlyPrice\",\"amount\"]]],null]],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"period\"],[12],[2,\"Monthly\"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-product-card-price\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"flex items-start\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"currency\"],[12],[1,[30,[36,0],[[32,0,[\"productCurrency\"]]],null]],[13],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"amount\"],[12],[1,[30,[36,1],[[32,0,[\"product\",\"yearlyPrice\",\"amount\"]]],null]],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"period\"],[12],[2,\"Yearly\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"currency-symbol\",\"gh-price-amount\",\"svg-jar\",\"-track-array\",\"each\",\"action\",\"product\",\"if\",\"eq\"]}",
    "moduleName": "ghost-admin/components/gh-product-card.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._action, (_class = class _class extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "membersUtils", _descriptor, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor2, this);

      _initializerDefineProperty(this, "ajax", _descriptor3, this);

      _initializerDefineProperty(this, "store", _descriptor4, this);

      _initializerDefineProperty(this, "config", _descriptor5, this);

      _initializerDefineProperty(this, "showProductModal", _descriptor6, this);

      _initializerDefineProperty(this, "productModel", _descriptor7, this);
    }

    get product() {
      return this.args.product;
    }

    get productCurrency() {
      if (this.isFreeProduct) {
        const firstPaidProduct = this.args.products.find(product => {
          return product.type === 'paid';
        });
        return firstPaidProduct?.monthlyPrice?.currency || 'usd';
      } else {
        return this.product?.monthlyPrice?.currency;
      }
    }

    get isPaidProduct() {
      return this.product.type === 'paid';
    }

    get hasCurrencySymbol() {
      const currencySymbol = (0, _currency.getSymbol)(this.product?.monthlyPrice?.currency);
      return currencySymbol?.length !== 3;
    }

    get isFreeProduct() {
      return this.product.type === 'free';
    }

    async openEditProduct(product) {
      this.args.openEditProduct(product);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "membersUtils", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "showProductModal", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "productModel", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "openEditProduct", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "openEditProduct"), _class.prototype)), _class)));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-products-price-billingperiod", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <span class="gh-select">
      <OneWaySelect
          @value={{this.value}}
          @disabled={{this.disabled}}
          @options={{this.availablePeriods}}
          @optionValuePath="period"
          @optionLabelPath="label"
          @optionTargetPath="period"
          @includeBlank={{false}}
          @promptIsSelectable={{false}}
          @prompt="Select a billing period"
          @update={{action "updatePeriod"}}
      />
      {{svg-jar "arrow-down-small"}}
  </span>
  */
  {
    "id": "h/V99HxD",
    "block": "{\"symbols\":[],\"statements\":[[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n    \"],[8,\"one-way-select\",[],[[\"@value\",\"@disabled\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@includeBlank\",\"@promptIsSelectable\",\"@prompt\",\"@update\"],[[32,0,[\"value\"]],[32,0,[\"disabled\"]],[32,0,[\"availablePeriods\"]],\"period\",\"label\",\"period\",false,false,\"Select a billing period\",[30,[36,0],[[32,0],\"updatePeriod\"],null]]],null],[2,\"\\n    \"],[1,[30,[36,1],[\"arrow-down-small\"],null]],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/gh-products-price-billingperiod.hbs"
  });

  const PERIODS = [{
    label: 'Monthly',
    period: 'month'
  }, {
    label: 'Yearly',
    period: 'year'
  }];
  let GhProductsPriceBillingPeriodComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._action, (_class = class GhProductsPriceBillingPeriodComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "feature", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "settings", _descriptor3, this);

      this.availablePeriods = PERIODS;
    }

    get value() {
      const {
        value
      } = this.args;
      return value;
    }

    get disabled() {
      const {
        disabled
      } = this.args;
      return disabled || false;
    }

    updatePeriod(newPeriod) {
      if (this.args.updatePeriod) {
        this.args.updatePeriod(this.args.value, newPeriod);
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "updatePeriod", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "updatePeriod"), _class.prototype)), _class));
  _exports.default = GhProductsPriceBillingPeriodComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhProductsPriceBillingPeriodComponent);
});
;define("ghost-admin/components/gh-profile-image", ["exports", "jquery", "blueimp-md5", "ember-ajax/request", "validator", "ember-concurrency"], function (_exports, _jquery, _blueimpMd, _request, _validator, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <figure class="account-image">
  
      {{#unless this.previewDataURL}}
          <div class="placeholder-img" style={{this.placeholderStyle}}></div>
          <div id="account-image" class="gravatar-img" style={{this.avatarStyle}}>
              <span class="sr-only">User image</span>
          </div>
      {{/unless}}
  
      {{#if this.previewDataURL}}
          <img src={{this.previewDataURL}} class="gravatar-img">
      {{/if}}
  
      <span class="edit-account-image" onclick={{action "openFileDialog"}} role="button">
          {{svg-jar "photos"}}
          <span class="sr-only">Upload an image</span>
      </span>
  
      <GhFileInput
          @alt={{null}}
          @name="uploadimage"
          @multiple={{false}}
          @action={{action "imageSelected"}}
          @accept={{this.imageMimeTypes}} />
  </figure>
  
  */
  {
    "id": "h2g2M0Dn",
    "block": "{\"symbols\":[],\"statements\":[[10,\"figure\"],[14,0,\"account-image\"],[12],[2,\"\\n\\n\"],[6,[37,0],[[32,0,[\"previewDataURL\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"placeholder-img\"],[15,5,[32,0,[\"placeholderStyle\"]]],[12],[13],[2,\"\\n        \"],[10,\"div\"],[14,1,\"account-image\"],[14,0,\"gravatar-img\"],[15,5,[32,0,[\"avatarStyle\"]]],[12],[2,\"\\n            \"],[10,\"span\"],[14,0,\"sr-only\"],[12],[2,\"User image\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[32,0,[\"previewDataURL\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"img\"],[15,\"src\",[32,0,[\"previewDataURL\"]]],[14,0,\"gravatar-img\"],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"span\"],[14,0,\"edit-account-image\"],[15,\"onclick\",[30,[36,2],[[32,0],\"openFileDialog\"],null]],[14,\"role\",\"button\"],[12],[2,\"\\n        \"],[1,[30,[36,3],[\"photos\"],null]],[2,\"\\n        \"],[10,\"span\"],[14,0,\"sr-only\"],[12],[2,\"Upload an image\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[8,\"gh-file-input\",[],[[\"@alt\",\"@name\",\"@multiple\",\"@action\",\"@accept\"],[null,\"uploadimage\",false,[30,[36,2],[[32,0],\"imageSelected\"],null],[32,0,[\"imageMimeTypes\"]]]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"unless\",\"if\",\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/gh-profile-image.hbs"
  });

  const ANIMATION_TIMEOUT = 1000;
  /**
   * A component to manage a user profile image. By default it just handles picture uploads,
   * but if passed a bound 'email' property it will render the user's gravatar image
   *
   * Example: {{gh-profile-image email=controllerEmailProperty setImage="controllerActionName" debounce=500}}
   *
   * @param  {int}            size              The size of the image to render
   * @param  {String}         email             Reference to a bound email object if gravatar image behavior is desired.
   * @param  {String|action}  setImage          The string name of the action on the controller to be called when an image is added.
   * @param  {int}            debounce          Period to wait after changes to email before attempting to load gravatar
   * @property  {Boolean}     hasUploadedImage  Whether or not the user has uploaded an image (whether or not to show the default image/gravatar image)
   * @property  {String}      defaultImage      String containing the background-image css property of the default user profile image
   * @property  {String}      imageBackground   String containing the background-image css property with the gravatar url
   */

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    email: '',
    size: 180,
    debounce: 300,
    imageFile: null,
    hasUploadedImage: false,
    _defaultImageUrl: '',

    // closure actions
    setImage() {},

    placeholderStyle: Ember.String.htmlSafe('background-image: url()'),
    avatarStyle: Ember.String.htmlSafe('display: none'),

    init() {
      this._super(...arguments);

      let defaultImage = '/img/user-image.png';
      this._defaultImageUrl = this.get('ghostPaths.assetRoot').replace(/\/$/, '') + defaultImage;

      this._setPlaceholderImage(this._defaultImageUrl);
    },

    didReceiveAttrs() {
      this._super(...arguments);

      if (this.get('config.useGravatar')) {
        this.setGravatar.perform();
      }
    },

    actions: {
      imageSelected(fileList, resetInput) {
        // eslint-disable-next-line
        let imageFile = fileList[0];

        if (imageFile) {
          let reader = new FileReader();
          this.set('imageFile', imageFile);
          this.setImage(imageFile);
          reader.addEventListener('load', () => {
            let dataURL = reader.result;
            this.set('previewDataURL', dataURL);
          }, false);
          reader.readAsDataURL(imageFile);
        }

        resetInput();
      },

      openFileDialog(event) {
        // simulate click to open file dialog
        // using jQuery because IE11 doesn't support MouseEvent
        (0, _jquery.default)(event.target).closest('figure').find('input[type="file"]').click();
      }

    },

    dragOver(event) {
      if (!event.dataTransfer) {
        return;
      } // this is needed to work around inconsistencies with dropping files
      // from Chrome's downloads bar


      if (navigator.userAgent.indexOf('Chrome') > -1) {
        let eA = event.dataTransfer.effectAllowed;
        event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
      }

      event.stopPropagation();
      event.preventDefault();
    },

    dragLeave(event) {
      event.preventDefault();
    },

    drop(event) {
      event.preventDefault();

      if (event.dataTransfer.files) {
        this.send('imageSelected', event.dataTransfer.files);
      }
    },

    setGravatar: (0, _emberConcurrency.task)(function* () {
      yield (0, _emberConcurrency.timeout)(this.debounce);
      let email = this.email;

      if (_validator.default.isEmail(email || '')) {
        let size = this.size;
        let gravatarUrl = `//www.gravatar.com/avatar/${(0, _blueimpMd.default)(email)}?s=${size}&d=404`;

        try {
          // HEAD request is needed otherwise jquery attempts to process
          // binary data as JSON and throws an error
          yield (0, _request.default)(gravatarUrl, {
            type: 'HEAD'
          }); // gravatar exists so switch style and let browser load it

          this._setAvatarImage(gravatarUrl); // wait for fade-in animation to finish before removing placeholder


          yield (0, _emberConcurrency.timeout)(ANIMATION_TIMEOUT);

          this._setPlaceholderImage('');
        } catch (e) {
          // gravatar doesn't exist so make sure we're still showing the placeholder
          this._setPlaceholderImage(this._defaultImageUrl); // then make sure the avatar isn't visible


          this._setAvatarImage('');
        }
      }
    }).restartable(),

    _setPlaceholderImage(url) {
      this.set('placeholderStyle', Ember.String.htmlSafe(`background-image: url(${url});`));
    },

    _setAvatarImage(url) {
      let display = url ? 'block' : 'none';
      this.set('avatarStyle', Ember.String.htmlSafe(`background-image: url(${url}); display: ${display}`));
    },

    queueFile(e, data) {
      let fileName = data.files[0].name;

      if (/\.(gif|jpe?g|png|svg?z)$/i.test(fileName)) {
        let action = this.setImage;

        if (action) {
          action(data);
        }
      }
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-progress-bar", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-progress-container">
      <div class="gh-progress-container-progress">
          <div
              class="gh-progress-bar {{if this.isError "-error"}}"
              style={{this.progressStyle}}
              data-test-progress-bar
              data-test-progress-width={{this.percentage}}
          ></div>
      </div>
  </div>
  
  */
  {
    "id": "vFuUyfY7",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"gh-progress-container\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-progress-container-progress\"],[12],[2,\"\\n        \"],[10,\"div\"],[15,0,[31,[\"gh-progress-bar \",[30,[36,0],[[32,0,[\"isError\"]],\"-error\"],null]]]],[15,5,[32,0,[\"progressStyle\"]]],[14,\"data-test-progress-bar\",\"\"],[15,\"data-test-progress-width\",[32,0,[\"percentage\"]]],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"if\"]}",
    "moduleName": "ghost-admin/components/gh-progress-bar.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    tagName: '',
    // Public attributes
    percentage: 0,
    isError: false,
    // Internal attributes
    progressStyle: '',

    didReceiveAttrs() {
      this._super(...arguments);

      let percentage = this.percentage;
      let width = percentage > 0 ? `${percentage}%` : '0';
      this.set('progressStyle', Ember.String.htmlSafe(`width: ${width}`));
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-psm-authors-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <GhTokenInput
      @options={{this.availableAuthors}}
      @selected={{this.selectedAuthors}}
      @onChange={{action "updateAuthors"}}
      @allowCreation={{false}}
      @renderInPlace={{true}}
      @triggerId={{this.triggerId}}
  />
  */
  {
    "id": "ljUtZm6S",
    "block": "{\"symbols\":[],\"statements\":[[8,\"gh-token-input\",[],[[\"@options\",\"@selected\",\"@onChange\",\"@allowCreation\",\"@renderInPlace\",\"@triggerId\"],[[32,0,[\"availableAuthors\"]],[32,0,[\"selectedAuthors\"]],[30,[36,0],[[32,0],\"updateAuthors\"],null],false,true,[32,0,[\"triggerId\"]]]],null]],\"hasEval\":false,\"upvars\":[\"action\"]}",
    "moduleName": "ghost-admin/components/gh-psm-authors-input.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    store: Ember.inject.service(),
    // public attrs
    selectedAuthors: null,
    tagName: '',
    triggerId: '',
    // internal attrs
    availableAuthors: null,

    // closure actions
    updateAuthors() {},

    availableAuthorNames: Ember.computed('availableAuthors.@each.name', function () {
      return this.availableAuthors.map(author => author.get('name').toLowerCase());
    }),

    init() {
      this._super(...arguments); // perform a background query to fetch all users and set `availableAuthors`
      // to a live-query that will be immediately populated with what's in the
      // store and be updated when the above query returns


      this.store.query('user', {
        limit: 'all'
      });
      this.set('availableAuthors', this.store.peekAll('user'));
    },

    actions: {
      updateAuthors(newAuthors) {
        this.updateAuthors(newAuthors);
      }

    }
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-psm-tags-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <GhTokenInput
      @extra={{hash
          tokenComponent="gh-token-input/tag-token"
      }}
      @onChange={{action "updateTags"}}
      @onCreate={{action "createTag"}}
      @options={{this.availableTags}}
      @renderInPlace={{true}}
      @selected={{this.post.tags}}
      @showCreateWhen={{action "hideCreateOptionOnMatchingTag"}}
      @triggerId={{this.triggerId}}
  />
  
  */
  {
    "id": "rDZ2h8Dn",
    "block": "{\"symbols\":[],\"statements\":[[8,\"gh-token-input\",[],[[\"@extra\",\"@onChange\",\"@onCreate\",\"@options\",\"@renderInPlace\",\"@selected\",\"@showCreateWhen\",\"@triggerId\"],[[30,[36,0],null,[[\"tokenComponent\"],[\"gh-token-input/tag-token\"]]],[30,[36,1],[[32,0],\"updateTags\"],null],[30,[36,1],[[32,0],\"createTag\"],null],[32,0,[\"availableTags\"]],true,[32,0,[\"post\",\"tags\"]],[30,[36,1],[[32,0],\"hideCreateOptionOnMatchingTag\"],null],[32,0,[\"triggerId\"]]]],null],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"hash\",\"action\"]}",
    "moduleName": "ghost-admin/components/gh-psm-tags-input.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    store: Ember.inject.service(),
    // public attrs
    post: null,
    tagName: '',
    // internal attrs
    _availableTags: null,
    availableTags: Ember.computed.sort('_availableTags.[]', function (tagA, tagB) {
      // ignorePunctuation means the # in internal tag names is ignored
      return tagA.name.localeCompare(tagB.name, undefined, {
        ignorePunctuation: true
      });
    }),
    availableTagNames: Ember.computed('availableTags.@each.name', function () {
      return this.availableTags.map(tag => tag.name.toLowerCase());
    }),

    init() {
      this._super(...arguments); // perform a background query to fetch all users and set `availableTags`
      // to a live-query that will be immediately populated with what's in the
      // store and be updated when the above query returns


      this.store.query('tag', {
        limit: 'all'
      });
      this.set('_availableTags', this.store.peekAll('tag'));
    },

    actions: {
      matchTags(tagName, term) {
        return tagName.toLowerCase() === term.trim().toLowerCase();
      },

      hideCreateOptionOnMatchingTag(term) {
        return !this.availableTagNames.includes(term.toLowerCase());
      },

      updateTags(newTags) {
        let currentTags = this.get('post.tags'); // destroy new+unsaved tags that are no longer selected

        currentTags.forEach(function (tag) {
          if (!newTags.includes(tag) && tag.get('isNew')) {
            tag.destroyRecord();
          }
        }); // update tags

        return this.set('post.tags', newTags);
      },

      createTag(tagName) {
        let currentTags = this.get('post.tags');
        let currentTagNames = currentTags.map(tag => tag.get('name').toLowerCase());
        let tagToAdd;
        tagName = tagName.trim(); // abort if tag is already selected

        if (currentTagNames.includes(tagName.toLowerCase())) {
          return;
        } // find existing tag if there is one


        tagToAdd = this._findTagByName(tagName); // create new tag if no match

        if (!tagToAdd) {
          tagToAdd = this.store.createRecord('tag', {
            name: tagName
          }); // set to public/internal based on the tag name

          tagToAdd.updateVisibility();
        } // push tag onto post relationship


        return currentTags.pushObject(tagToAdd);
      }

    },

    // methods
    _findTagByName(name) {
      let withMatchingName = function (tag) {
        return tag.name.toLowerCase() === name.toLowerCase();
      };

      return this.availableTags.find(withMatchingName);
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-psm-template-select", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if this.customTemplates}}
      <div class="form-group for-select" data-test-custom-template-form>
          <label for="author-list">Template</label>
          <span class="gh-input-icon gh-icon-user">
              {{svg-jar "file-text-document"}}
              <span class="gh-select {{if this.matchedSlugTemplate "disabled"}}">
                  <OneWaySelect @value={{this.selectedTemplate}}
                      @options={{this.customTemplates}}
                      @optionValuePath="filename"
                      @optionLabelPath="name"
                      @update={{action "selectTemplate"}}
                      @disabled={{this.matchedSlugTemplate}}
                      data-test-select="custom-template" />
                  {{svg-jar "arrow-down-small"}}
              </span>
          </span>
          {{#if this.matchedSlugTemplate}}
              <p>Post URL matches {{this.matchedSlugTemplate.filename}}</p>
          {{/if}}
      </div>
  {{/if}}
  
  */
  {
    "id": "Q4OpKZFj",
    "block": "{\"symbols\":[],\"statements\":[[6,[37,1],[[32,0,[\"customTemplates\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"form-group for-select\"],[14,\"data-test-custom-template-form\",\"\"],[12],[2,\"\\n        \"],[10,\"label\"],[14,\"for\",\"author-list\"],[12],[2,\"Template\"],[13],[2,\"\\n        \"],[10,\"span\"],[14,0,\"gh-input-icon gh-icon-user\"],[12],[2,\"\\n            \"],[1,[30,[36,0],[\"file-text-document\"],null]],[2,\"\\n            \"],[10,\"span\"],[15,0,[31,[\"gh-select \",[30,[36,1],[[32,0,[\"matchedSlugTemplate\"]],\"disabled\"],null]]]],[12],[2,\"\\n                \"],[8,\"one-way-select\",[[24,\"data-test-select\",\"custom-template\"]],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@update\",\"@disabled\"],[[32,0,[\"selectedTemplate\"]],[32,0,[\"customTemplates\"]],\"filename\",\"name\",[30,[36,2],[[32,0],\"selectTemplate\"],null],[32,0,[\"matchedSlugTemplate\"]]]],null],[2,\"\\n                \"],[1,[30,[36,0],[\"arrow-down-small\"],null]],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"],[6,[37,1],[[32,0,[\"matchedSlugTemplate\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"p\"],[12],[2,\"Post URL matches \"],[1,[32,0,[\"matchedSlugTemplate\",\"filename\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"action\"]}",
    "moduleName": "ghost-admin/components/gh-psm-template-select.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    store: Ember.inject.service(),
    // public attributes
    tagName: '',
    post: null,
    // internal properties
    activeTheme: null,

    // closure actions
    onTemplateSelect() {},

    // computed properties
    customTemplates: Ember.computed('activeTheme.customTemplates.[]', function () {
      let templates = this.get('activeTheme.customTemplates') || [];
      let defaultTemplate = {
        filename: '',
        name: 'Default'
      };
      return Ember.isEmpty(templates) ? templates : [defaultTemplate, ...templates.sortBy('name')];
    }),
    matchedSlugTemplate: Ember.computed('post.{page,slug}', 'activeTheme.slugTemplates.[]', function () {
      let slug = this.get('post.slug');
      let type = this.post.constructor.modelName;
      let [matchedTemplate] = this.get('activeTheme.slugTemplates').filter(function (template) {
        return template.for.includes(type) && template.slug === slug;
      });
      return matchedTemplate;
    }),
    selectedTemplate: Ember.computed('post.customTemplate', 'customTemplates.[]', function () {
      let templates = this.customTemplates;
      let filename = this.get('post.customTemplate');
      return templates.findBy('filename', filename);
    }),

    // hooks
    didInsertElement() {
      this._super(...arguments);

      this.loadActiveTheme.perform();
    },

    actions: {
      selectTemplate(template) {
        this.onTemplateSelect(template.filename);
      }

    },
    // tasks
    loadActiveTheme: (0, _emberConcurrency.task)(function* () {
      let store = this.store;
      let themes = yield store.peekAll('theme');

      if (Ember.isEmpty(themes)) {
        themes = yield store.findAll('theme');
      }

      let activeTheme = themes.filterBy('active', true).get('firstObject');
      this.set('activeTheme', activeTheme);
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-psm-visibility-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <span class="gh-select">
      <OneWaySelect @value={{this.selectedVisibility}}
          @options={{this.availableVisibilities}}
          @optionValuePath="name"
          @optionLabelPath="label"
          @optionTargetPath="name"
          @update={{action "updateVisibility"}}
      />
      {{svg-jar "arrow-down-small"}}
  </span>
  */
  {
    "id": "7CYoN9q6",
    "block": "{\"symbols\":[],\"statements\":[[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n    \"],[8,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@update\"],[[32,0,[\"selectedVisibility\"]],[32,0,[\"availableVisibilities\"]],\"name\",\"label\",\"name\",[30,[36,0],[[32,0],\"updateVisibility\"],null]]],null],[2,\"\\n    \"],[1,[30,[36,1],[\"arrow-down-small\"],null]],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/gh-psm-visibility-input.hbs"
  });

  const VISIBILITIES = [{
    label: 'Public',
    name: 'public'
  }, {
    label: 'Members only',
    name: 'members'
  }, {
    label: 'Paid-members only',
    name: 'paid'
  }];

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    settings: Ember.inject.service(),
    feature: Ember.inject.service(),
    // public attrs
    post: null,
    selectedVisibility: Ember.computed('post.visibility', function () {
      return this.get('post.visibility') || this.settings.get('defaultContentVisibility');
    }),

    init() {
      this._super(...arguments);

      this.availableVisibilities = [...VISIBILITIES];

      if (this.feature.get('multipleProducts')) {
        this.availableVisibilities.push({
          label: 'Specific tier(s)',
          name: 'filter'
        });
      }
    },

    actions: {
      updateVisibility(newVisibility) {
        this.post.set('visibility', newVisibility);

        if (newVisibility !== 'filter') {
          this.post.set('visibilityFilter', null);
        }
      }

    }
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-publishmenu-draft", ["exports", "@glimmer/component", "moment", "ember-concurrency-decorators"], function (_exports, _component, _moment, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div ...attributes>
      <header class="gh-publishmenu-heading">Ready to
          {{#if @canSendEmail}}
              <GhDistributionActionSelect
                  @distributionAction={{@distributionAction}}
                  @setDistributionAction={{@setDistributionAction}}
              />
          {{else}}
              publish
          {{/if}}
          this {{@post.displayName}}?
      </header>
      <section class="gh-publishmenu-content">
          <div class="gh-publishmenu-section">
              <div class="gh-publishmenu-radio {{if (eq @saveType "publish") "active"}}" {{on "click" (fn this.setSaveType "publish")}}>
                  <div class="gh-publishmenu-radio-button" data-test-publishmenu-published-option></div>
                  <div class="gh-publishmenu-radio-content">
                      <div class="gh-publishmenu-radio-label">{{#if @emailOnly}}Send email now{{else}}Set it live now{{/if}}</div>
                      <div class="gh-publishmenu-radio-desc">{{#if @emailOnly}}Deliver this immediately{{else}}Publish this {{@post.displayName}} immediately{{/if}}</div>
                  </div>
              </div>
              <div class="gh-publishmenu-radio {{if (eq @saveType "schedule") "active"}}" {{on "click" (fn this.setSaveType "schedule")}}>
                  <div class="gh-publishmenu-radio-button" data-test-publishmenu-scheduled-option></div>
                  <div class="gh-publishmenu-radio-content">
                      <div class="gh-publishmenu-radio-label">Schedule it for later</div>
                      <GhDateTimePicker
                          @date={{@post.publishedAtBlogDate}}
                          @time={{@post.publishedAtBlogTime}}
                          @setDate={{this.setDate}}
                          @setTime={{this.setTime}}
                          @setTypedDateError={{@setTypedDateError}}
                          @errors={{@post.errors}}
                          @dateErrorProperty="publishedAtBlogDate"
                          @timeErrorProperty="publishedAtBlogTime"
                          @minDate={{this._minDate}}
                          @isActive={{eq @saveType "schedule"}}
                      />
                      <div class="gh-publishmenu-radio-desc">{{#if @emailOnly}}Send email at a specific time{{else}}Set automatic future publish date{{/if}}</div>
                  </div>
              </div>
          </div>
  
          {{#if this.showEmailSection}}
              <div class="gh-publishmenu-section" {{did-insert (perform this.countTotalMembersTask)}}>
                  <div class="gh-publishmenu-email">
                      {{#if @isSendingEmailLimited}}
                          <p class="gh-box gh-box-alert">{{html-safe @sendingEmailLimitError}}</p>
                      {{else}}
                          <div class="gh-publishmenu-email-label {{if this.disableEmailOption "pe-none"}}">
                              <label class="gh-publishmenu-radio-label mb3 {{if this.disableEmailOption "midgrey"}}">Send by email to</label>
  
                              <div class="form-group">
                                  <GhMembersRecipientSelect
                                      @filter={{@recipientsFilter}}
                                      @onChange={{@setSendEmailWhenPublished}}
                                      @disabled={{this.disableEmailOption}}
                                  />
                              </div>
                          </div>
                      {{/if}}
                  </div>
              </div>
          {{/if}}
      </section>
  </div>
  */
  {
    "id": "QP2H0Js6",
    "block": "{\"symbols\":[\"@recipientsFilter\",\"@setSendEmailWhenPublished\",\"@sendingEmailLimitError\",\"@isSendingEmailLimited\",\"@post\",\"@distributionAction\",\"@setDistributionAction\",\"&attrs\",\"@canSendEmail\",\"@saveType\",\"@emailOnly\",\"@setTypedDateError\"],\"statements\":[[11,\"div\"],[17,8],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"gh-publishmenu-heading\"],[12],[2,\"Ready to\\n\"],[6,[37,0],[[32,9]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[8,\"gh-distribution-action-select\",[],[[\"@distributionAction\",\"@setDistributionAction\"],[[32,6],[32,7]]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            publish\\n\"]],\"parameters\":[]}]]],[2,\"        this \"],[1,[32,5,[\"displayName\"]]],[2,\"?\\n    \"],[13],[2,\"\\n    \"],[10,\"section\"],[14,0,\"gh-publishmenu-content\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-publishmenu-section\"],[12],[2,\"\\n            \"],[11,\"div\"],[16,0,[31,[\"gh-publishmenu-radio \",[30,[36,0],[[30,[36,4],[[32,10],\"publish\"],null],\"active\"],null]]]],[4,[38,6],[\"click\",[30,[36,5],[[32,0,[\"setSaveType\"]],\"publish\"],null]],null],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-button\"],[14,\"data-test-publishmenu-published-option\",\"\"],[12],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-content\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-label\"],[12],[6,[37,0],[[32,11]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"Send email now\"]],\"parameters\":[]},{\"statements\":[[2,\"Set it live now\"]],\"parameters\":[]}]]],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-desc\"],[12],[6,[37,0],[[32,11]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"Deliver this immediately\"]],\"parameters\":[]},{\"statements\":[[2,\"Publish this \"],[1,[32,5,[\"displayName\"]]],[2,\" immediately\"]],\"parameters\":[]}]]],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[11,\"div\"],[16,0,[31,[\"gh-publishmenu-radio \",[30,[36,0],[[30,[36,4],[[32,10],\"schedule\"],null],\"active\"],null]]]],[4,[38,6],[\"click\",[30,[36,5],[[32,0,[\"setSaveType\"]],\"schedule\"],null]],null],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-button\"],[14,\"data-test-publishmenu-scheduled-option\",\"\"],[12],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-content\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-label\"],[12],[2,\"Schedule it for later\"],[13],[2,\"\\n                    \"],[8,\"gh-date-time-picker\",[],[[\"@date\",\"@time\",\"@setDate\",\"@setTime\",\"@setTypedDateError\",\"@errors\",\"@dateErrorProperty\",\"@timeErrorProperty\",\"@minDate\",\"@isActive\"],[[32,5,[\"publishedAtBlogDate\"]],[32,5,[\"publishedAtBlogTime\"]],[32,0,[\"setDate\"]],[32,0,[\"setTime\"]],[32,12],[32,5,[\"errors\"]],\"publishedAtBlogDate\",\"publishedAtBlogTime\",[32,0,[\"_minDate\"]],[30,[36,4],[[32,10],\"schedule\"],null]]],null],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-desc\"],[12],[6,[37,0],[[32,11]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"Send email at a specific time\"]],\"parameters\":[]},{\"statements\":[[2,\"Set automatic future publish date\"]],\"parameters\":[]}]]],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n\"],[6,[37,0],[[32,0,[\"showEmailSection\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[11,\"div\"],[24,0,\"gh-publishmenu-section\"],[4,[38,3],[[30,[36,2],[[32,0,[\"countTotalMembersTask\"]]],null]],null],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-email\"],[12],[2,\"\\n\"],[6,[37,0],[[32,4]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"p\"],[14,0,\"gh-box gh-box-alert\"],[12],[1,[30,[36,1],[[32,3]],null]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"div\"],[15,0,[31,[\"gh-publishmenu-email-label \",[30,[36,0],[[32,0,[\"disableEmailOption\"]],\"pe-none\"],null]]]],[12],[2,\"\\n                            \"],[10,\"label\"],[15,0,[31,[\"gh-publishmenu-radio-label mb3 \",[30,[36,0],[[32,0,[\"disableEmailOption\"]],\"midgrey\"],null]]]],[12],[2,\"Send by email to\"],[13],[2,\"\\n\\n                            \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                                \"],[8,\"gh-members-recipient-select\",[],[[\"@filter\",\"@onChange\",\"@disabled\"],[[32,1],[32,2],[32,0,[\"disableEmailOption\"]]]],null],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"if\",\"html-safe\",\"perform\",\"did-insert\",\"eq\",\"fn\",\"on\"]}",
    "moduleName": "ghost-admin/components/gh-publishmenu-draft.hbs"
  });

  let GhPublishMenuDraftComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember._tracked, _dec7 = Ember._action, _dec8 = Ember._action, _dec9 = Ember._action, _dec10 = Ember._action, (_class = class GhPublishMenuDraftComponent extends _component.default {
    // used to set minDate in datepicker
    get disableEmailOption() {
      // TODO: remove owner or admin check when editors can count members
      return this.session.user.isAdmin && (this.totalMemberCount === 0 || this.countTotalMembersTask.isRunning);
    }

    get showEmailSection() {
      return this.args.canSendEmail && this.args.distributionAction !== 'publish';
    }

    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "feature", _descriptor2, this);

      _initializerDefineProperty(this, "session", _descriptor3, this);

      _initializerDefineProperty(this, "settings", _descriptor4, this);

      _initializerDefineProperty(this, "store", _descriptor5, this);

      _initializerDefineProperty(this, "totalMemberCount", _descriptor6, this);

      _defineProperty(this, "_minDate", null);

      _defineProperty(this, "_publishedAtBlogTZ", null);

      this.args.post.set('publishedAtBlogTZ', this.args.post.publishedAtUTC);

      this._updateDatesForSaveType(this.args.saveType);
    }

    setSaveType(type) {
      if (this.args.saveType !== type) {
        this._updateDatesForSaveType(type);

        this.args.setSaveType(type);
        this.args.post.validate();
      }
    }

    setDistributionAction(type) {
      this.args.setDistributionAction(type);
    }

    setDate(date) {
      let post = this.args.post;
      let dateString = (0, _moment.default)(date).format('YYYY-MM-DD');
      post.set('publishedAtBlogDate', dateString);
      return post.validate();
    }

    setTime(time) {
      let post = this.args.post;
      post.set('publishedAtBlogTime', time);
      return post.validate();
    }

    *countTotalMembersTask() {
      const user = yield this.session.user;

      if (user.isAdmin) {
        const result = yield this.store.query('member', {
          limit: 1,
          filter: 'subscribed:true'
        });
        this.totalMemberCount = result.meta.pagination.total;
      }
    }

    _updateDatesForSaveType(type) {
      let hasDateError = !Ember.isEmpty(this.args.post.errors.errorsFor('publishedAtBlogDate'));
      let hasTimeError = !Ember.isEmpty(this.args.post.errors.errorsFor('publishedAtBlogTime'));

      let minDate = this._getMinDate();

      this._minDate = minDate; // when publish: switch to now to avoid validation errors
      // when schedule: switch to last valid or new minimum scheduled date

      if (type === 'publish') {
        if (!hasDateError && !hasTimeError) {
          this._publishedAtBlogTZ = this.args.post.publishedAtBlogTZ;
        } else {
          this._publishedAtBlogTZ = this.args.post.publishedAtUTC;
        }

        this.args.post.set('publishedAtBlogTZ', this.args.post.publishedAtUTC);
      } else {
        if (!this._publishedAtBlogTZ || (0, _moment.default)(this._publishedAtBlogTZ).isBefore(minDate)) {
          this.args.post.set('publishedAtBlogTZ', minDate);
        } else {
          this.args.post.set('publishedAtBlogTZ', this._publishedAtBlogTZ);
        }
      }
    } // API only accepts dates at least 2 mins in the future, default the
    // scheduled date 5 mins in the future to avoid immediate validation errors


    _getMinDate() {
      return _moment.default.utc().add(5, 'minutes');
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "totalMemberCount", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 0;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setSaveType", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "setSaveType"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setDistributionAction", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "setDistributionAction"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setDate", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "setDate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setTime", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "setTime"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "countTotalMembersTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "countTotalMembersTask"), _class.prototype)), _class));
  _exports.default = GhPublishMenuDraftComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhPublishMenuDraftComponent);
});
;define("ghost-admin/components/gh-publishmenu-published", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div data-test-publishmenu-published="true" ...attributes>
      <header class="gh-publishmenu-heading">Actualizar {{@post.displayName}} estado</header>
      <section class="gh-publishmenu-content gh-publishmenu-section">
          <div class="gh-publishmenu-radio {{if (eq @saveType "draft") "active"}}" {{on "click" (fn @setSaveType "draft")}}>
              <div class="gh-publishmenu-radio-button" data-test-publishmenu-unpublished-option></div>
              <div class="gh-publishmenu-radio-content">
                  <div class="gh-publishmenu-radio-label">Despublicad</div>
                  <div class="gh-publishmenu-radio-desc">Revertir este {{@post.displayName}} a un borrador privado</div>
              </div>
          </div>
          <div class="gh-publishmenu-radio {{if (eq @saveType "publish") "active"}}" {{on "click" (fn @setSaveType "publish")}}>
              <div class="gh-publishmenu-radio-button" data-test-publishmenu-published-option></div>
              <div class="gh-publishmenu-radio-content">
                  <div class="gh-publishmenu-radio-label">Publicado</div>
                  <div class="gh-publishmenu-radio-desc">Ver este {{@post.displayName}} publicado</div>
              </div>
          </div>
      </section>
  </div>
  */
  {
    "id": "5oL8b+qb",
    "block": "{\"symbols\":[\"&attrs\",\"@post\",\"@saveType\",\"@setSaveType\"],\"statements\":[[11,\"div\"],[24,\"data-test-publishmenu-published\",\"true\"],[17,1],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"gh-publishmenu-heading\"],[12],[2,\"Actualizar \"],[1,[32,2,[\"displayName\"]]],[2,\" estado\"],[13],[2,\"\\n    \"],[10,\"section\"],[14,0,\"gh-publishmenu-content gh-publishmenu-section\"],[12],[2,\"\\n        \"],[11,\"div\"],[16,0,[31,[\"gh-publishmenu-radio \",[30,[36,1],[[30,[36,0],[[32,3],\"draft\"],null],\"active\"],null]]]],[4,[38,3],[\"click\",[30,[36,2],[[32,4],\"draft\"],null]],null],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-button\"],[14,\"data-test-publishmenu-unpublished-option\",\"\"],[12],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-content\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-label\"],[12],[2,\"Despublicad\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-desc\"],[12],[2,\"Revertir este \"],[1,[32,2,[\"displayName\"]]],[2,\" a un borrador privado\"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[11,\"div\"],[16,0,[31,[\"gh-publishmenu-radio \",[30,[36,1],[[30,[36,0],[[32,3],\"publish\"],null],\"active\"],null]]]],[4,[38,3],[\"click\",[30,[36,2],[[32,4],\"publish\"],null]],null],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-button\"],[14,\"data-test-publishmenu-published-option\",\"\"],[12],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-content\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-label\"],[12],[2,\"Publicado\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-desc\"],[12],[2,\"Ver este \"],[1,[32,2,[\"displayName\"]]],[2,\" publicado\"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"eq\",\"if\",\"fn\",\"on\"]}",
    "moduleName": "ghost-admin/components/gh-publishmenu-published.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-publishmenu-scheduled", ["exports", "@glimmer/component", "moment"], function (_exports, _component, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div data-test-publishmenu-scheduled="true" ...attributes>
      <header class="gh-publishmenu-heading">Will be published in {{this.timeToPublished}}</header>
      <div class="gh-publishmenu-content">
          <section class="gh-publishmenu-section">
              <div class="gh-publishmenu-radio {{if (eq @saveType "draft") "active"}}" {{on "click" (fn this.setSaveType "draft")}}>
                  <div class="gh-publishmenu-radio-button" data-test-publishmenu-draft-option></div>
                  <div class="gh-publishmenu-radio-content">
                      <div class="gh-publishmenu-radio-label">Revert to draft</div>
                      <div class="gh-publishmenu-radio-desc">Do not publish</div>
                  </div>
              </div>
              <div class="gh-publishmenu-radio {{if (eq @saveType "schedule") "active"}}" {{on "click" (fn this.setSaveType "schedule")}}>
                  <div class="gh-publishmenu-radio-button" data-test-publishmenu-scheduled-option></div>
                  <div class="gh-publishmenu-radio-content">
                      <div class="gh-publishmenu-radio-label">Schedule for later</div>
                      <GhDateTimePicker
                          @date={{@post.publishedAtBlogDate}}
                          @time={{@post.publishedAtBlogTime}}
                          @setDate={{this.setDate}}
                          @setTime={{this.setTime}}
                          @setTypedDateError={{@setTypedDateError}}
                          @errors={{@post.errors}}
                          @dateErrorProperty="publishedAtBlogDate"
                          @timeErrorProperty="publishedAtBlogTime"
                          @minDate={{this.minDate}}
                          @isActive={{eq @saveType "schedule"}}
                      />
                      <div class="gh-publishmenu-radio-desc">Set automatic future publish date</div>
                  </div>
              </div>
          </section>
          {{#if @canSendEmail}}
              <section class="gh-publishmenu-section">
                  <div class="gh-publishmenu-email">
                      {{#if @isSendingEmailLimited}}
                          <p>{{html-safe @sendingEmailLimitError}}</p>
                      {{else}}
                          <div class="gh-publishmenu-email-label pe-none">
                              <label class="gh-publishmenu-radio-label mb3 midgrey">Send by email to</label>
  
                              <div class="form-group">
                                  <GhMembersRecipientSelect
                                      @filter={{@recipientsFilter}}
                                      @disabled={{true}}
                                  />
                              </div>
                          </div>
                      {{/if}}
                  </div>
              </section>
          {{/if}}
      </div>
  </div>
  */
  {
    "id": "PxW+S9Yy",
    "block": "{\"symbols\":[\"@recipientsFilter\",\"@sendingEmailLimitError\",\"@isSendingEmailLimited\",\"&attrs\",\"@saveType\",\"@post\",\"@setTypedDateError\",\"@canSendEmail\"],\"statements\":[[11,\"div\"],[24,\"data-test-publishmenu-scheduled\",\"true\"],[17,4],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"gh-publishmenu-heading\"],[12],[2,\"Will be published in \"],[1,[32,0,[\"timeToPublished\"]]],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-publishmenu-content\"],[12],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-publishmenu-section\"],[12],[2,\"\\n            \"],[11,\"div\"],[16,0,[31,[\"gh-publishmenu-radio \",[30,[36,1],[[30,[36,2],[[32,5],\"draft\"],null],\"active\"],null]]]],[4,[38,4],[\"click\",[30,[36,3],[[32,0,[\"setSaveType\"]],\"draft\"],null]],null],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-button\"],[14,\"data-test-publishmenu-draft-option\",\"\"],[12],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-content\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-label\"],[12],[2,\"Revert to draft\"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-desc\"],[12],[2,\"Do not publish\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[11,\"div\"],[16,0,[31,[\"gh-publishmenu-radio \",[30,[36,1],[[30,[36,2],[[32,5],\"schedule\"],null],\"active\"],null]]]],[4,[38,4],[\"click\",[30,[36,3],[[32,0,[\"setSaveType\"]],\"schedule\"],null]],null],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-button\"],[14,\"data-test-publishmenu-scheduled-option\",\"\"],[12],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-content\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-label\"],[12],[2,\"Schedule for later\"],[13],[2,\"\\n                    \"],[8,\"gh-date-time-picker\",[],[[\"@date\",\"@time\",\"@setDate\",\"@setTime\",\"@setTypedDateError\",\"@errors\",\"@dateErrorProperty\",\"@timeErrorProperty\",\"@minDate\",\"@isActive\"],[[32,6,[\"publishedAtBlogDate\"]],[32,6,[\"publishedAtBlogTime\"]],[32,0,[\"setDate\"]],[32,0,[\"setTime\"]],[32,7],[32,6,[\"errors\"]],\"publishedAtBlogDate\",\"publishedAtBlogTime\",[32,0,[\"minDate\"]],[30,[36,2],[[32,5],\"schedule\"],null]]],null],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-desc\"],[12],[2,\"Set automatic future publish date\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"],[6,[37,1],[[32,8]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"section\"],[14,0,\"gh-publishmenu-section\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-email\"],[12],[2,\"\\n\"],[6,[37,1],[[32,3]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"p\"],[12],[1,[30,[36,0],[[32,2]],null]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-publishmenu-email-label pe-none\"],[12],[2,\"\\n                            \"],[10,\"label\"],[14,0,\"gh-publishmenu-radio-label mb3 midgrey\"],[12],[2,\"Send by email to\"],[13],[2,\"\\n\\n                            \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                                \"],[8,\"gh-members-recipient-select\",[],[[\"@filter\",\"@disabled\"],[[32,1],true]],null],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"html-safe\",\"if\",\"eq\",\"fn\",\"on\"]}",
    "moduleName": "ghost-admin/components/gh-publishmenu-scheduled.hbs"
  });

  let GhPublishmenuScheduledComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember._tracked, _dec7 = Ember._action, _dec8 = Ember._action, _dec9 = Ember._action, (_class = class GhPublishmenuScheduledComponent extends _component.default {
    // used to set minDate in datepicker
    get timeToPublished() {
      let publishedAtUTC = this.args.post.publishedAtUTC;

      if (!publishedAtUTC) {
        return null;
      }

      this.clock.get('second');
      return publishedAtUTC.toNow(true);
    }

    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "clock", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "feature", _descriptor3, this);

      _initializerDefineProperty(this, "settings", _descriptor4, this);

      _initializerDefineProperty(this, "config", _descriptor5, this);

      _initializerDefineProperty(this, "minDate", _descriptor6, this);

      this.minDate = new Date();
    }

    setSaveType(type) {
      if (this.args.saveType !== type) {
        this.minDate = new Date();
        this.args.setSaveType(type); // when draft switch to now to avoid validation errors
        // when schedule switch back to saved date to avoid unnecessary re-scheduling

        if (type === 'draft') {
          this.args.post.set('publishedAtBlogTZ', new Date());
        } else {
          this.args.post.set('publishedAtBlogTZ', this.args.post.publishedAtUTC);
        }

        this.args.post.validate();
      }
    }

    setDate(date) {
      let post = this.args.post;
      let dateString = (0, _moment.default)(date).format('YYYY-MM-DD');
      post.set('publishedAtBlogDate', dateString);
      return post.validate();
    }

    setTime(time) {
      let post = this.args.post;

      if (!this.args.isClosing) {
        post.set('publishedAtBlogTime', time);
        return post.validate();
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "clock", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "minDate", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setSaveType", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "setSaveType"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setDate", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "setDate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setTime", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "setTime"), _class.prototype)), _class));
  _exports.default = GhPublishmenuScheduledComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhPublishmenuScheduledComponent);
});
;define("ghost-admin/components/gh-publishmenu", ["exports", "ghost-admin/errors/email-failed-error", "ember-concurrency"], function (_exports, _emailFailedError, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if (eq this.displayState "sent")}}
  <div class="gh-btn gh-btn-text sent">Sent</div>
  {{else}}
  <GhBasicDropdown @verticalPosition="below" @horizontalPosition="right" @onOpen={{action "open"}} @onClose={{action "close"}} as |dd|>
      <dd.Trigger class="gh-btn gh-btn-editor {{if (or (eq this.displayState "published") (eq this.displayState "scheduled") (eq this.uiContext "preview")) "green"}} gh-publishmenu-trigger">
          <span data-test-publishmenu-trigger>{{this.triggerText}} {{svg-jar "arrow-down"}}</span>
      </dd.Trigger>
  
      <dd.Content class="gh-publishmenu-dropdown">
          {{#if (eq this.displayState "published")}}
              <GhPublishmenuPublished
                  @post={{this.post}}
                  @saveType={{this.saveType}}
                  @setSaveType={{action "setSaveType"}}
                  data-test-publishmenu-published="true" />
  
          {{else if (eq this.displayState "scheduled")}}
              <GhPublishmenuScheduled
                  @post={{this.post}}
                  @saveType={{this.saveType}}
                  @isClosing={{this.isClosing}}
                  @canSendEmail={{this.canSendEmail}}
                  @recipientsFilter={{this.sendEmailWhenPublished}}
                  @setSaveType={{action "setSaveType"}}
                  @setTypedDateError={{action (mut this.typedDateError)}}
                  @isSendingEmailLimited={{this.isSendingEmailLimited}}
                  @sendingEmailLimitError={{this.sendingEmailLimitError}}
                  data-test-publishmenu-scheduled="true" />
  
          {{else}}
              <GhPublishmenuDraft
                  @post={{this.post}}
                  @saveType={{this.saveType}}
                  @setSaveType={{action "setSaveType"}}
                  @setTypedDateError={{action (mut this.typedDateError)}}
                  @canSendEmail={{this.canSendEmail}}
                  @emailOnly={{this.emailOnly}}
                  @recipientsFilter={{this.sendEmailWhenPublished}}
                  @setSendEmailWhenPublished={{action "setSendEmailWhenPublished"}}
                  @isSendingEmailLimited={{this.isSendingEmailLimited}}
                  @sendingEmailLimitError={{this.sendingEmailLimitError}}
                  @distributionAction={{this.distributionAction}}
                  @setDistributionAction={{action "setDistributionAction"}}
                  data-test-publishmenu-draft="true" />
          {{/if}}
  
          {{!--
              save button needs to be outside of menu components so it doesn't lose state
              or cancel the task when the post status updates and switches components
           --}}
          <footer class="gh-publishmenu-footer">
              <button class="gh-btn gh-btn-outline" {{on "click" (action dd.actions.close)}} data-test-publishmenu-cancel>
                  <span>Cancel</span>
              </button>
              <GhTaskButton
                  @buttonText={{this.buttonText}}
                  @task={{this.save}}
                  @taskArgs={{hash dropdown=dd}}
                  @successText={{this.successText}}
                  @runningText={{this.runningText}}
                  @class="gh-btn gh-btn-black gh-publishmenu-button gh-btn-icon"
                  data-test-publishmenu-save="true"
              />
          </footer>
      </dd.Content>
  </GhBasicDropdown>
  {{/if}}
  
  {{!--
      Workaround to have an always-shown element to attach key handlers to.
      TODO: Move onto main element once converted to a glimmer component
  --}}
  <div class="hidden" {{on-key "cmd+shift+p" (action "publishFromShortcut")}}></div>
  */
  {
    "id": "tvuobqst",
    "block": "{\"symbols\":[\"dd\"],\"statements\":[[6,[37,3],[[30,[36,2],[[32,0,[\"displayState\"]],\"sent\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[10,\"div\"],[14,0,\"gh-btn gh-btn-text sent\"],[12],[2,\"Sent\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[8,\"gh-basic-dropdown\",[],[[\"@verticalPosition\",\"@horizontalPosition\",\"@onOpen\",\"@onClose\"],[\"below\",\"right\",[30,[36,0],[[32,0],\"open\"],null],[30,[36,0],[[32,0],\"close\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[8,[32,1,[\"Trigger\"]],[[16,0,[31,[\"gh-btn gh-btn-editor \",[30,[36,3],[[30,[36,4],[[30,[36,2],[[32,0,[\"displayState\"]],\"published\"],null],[30,[36,2],[[32,0,[\"displayState\"]],\"scheduled\"],null],[30,[36,2],[[32,0,[\"uiContext\"]],\"preview\"],null]],null],\"green\"],null],\" gh-publishmenu-trigger\"]]]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"span\"],[14,\"data-test-publishmenu-trigger\",\"\"],[12],[1,[32,0,[\"triggerText\"]]],[2,\" \"],[1,[30,[36,5],[\"arrow-down\"],null]],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[8,[32,1,[\"Content\"]],[[24,0,\"gh-publishmenu-dropdown\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[32,0,[\"displayState\"]],\"published\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[8,\"gh-publishmenu-published\",[[24,\"data-test-publishmenu-published\",\"true\"]],[[\"@post\",\"@saveType\",\"@setSaveType\"],[[32,0,[\"post\"]],[32,0,[\"saveType\"]],[30,[36,0],[[32,0],\"setSaveType\"],null]]],null],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,2],[[32,0,[\"displayState\"]],\"scheduled\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[8,\"gh-publishmenu-scheduled\",[[24,\"data-test-publishmenu-scheduled\",\"true\"]],[[\"@post\",\"@saveType\",\"@isClosing\",\"@canSendEmail\",\"@recipientsFilter\",\"@setSaveType\",\"@setTypedDateError\",\"@isSendingEmailLimited\",\"@sendingEmailLimitError\"],[[32,0,[\"post\"]],[32,0,[\"saveType\"]],[32,0,[\"isClosing\"]],[32,0,[\"canSendEmail\"]],[32,0,[\"sendEmailWhenPublished\"]],[30,[36,0],[[32,0],\"setSaveType\"],null],[30,[36,0],[[32,0],[30,[36,1],[[32,0,[\"typedDateError\"]]],null]],null],[32,0,[\"isSendingEmailLimited\"]],[32,0,[\"sendingEmailLimitError\"]]]],null],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[8,\"gh-publishmenu-draft\",[[24,\"data-test-publishmenu-draft\",\"true\"]],[[\"@post\",\"@saveType\",\"@setSaveType\",\"@setTypedDateError\",\"@canSendEmail\",\"@emailOnly\",\"@recipientsFilter\",\"@setSendEmailWhenPublished\",\"@isSendingEmailLimited\",\"@sendingEmailLimitError\",\"@distributionAction\",\"@setDistributionAction\"],[[32,0,[\"post\"]],[32,0,[\"saveType\"]],[30,[36,0],[[32,0],\"setSaveType\"],null],[30,[36,0],[[32,0],[30,[36,1],[[32,0,[\"typedDateError\"]]],null]],null],[32,0,[\"canSendEmail\"]],[32,0,[\"emailOnly\"]],[32,0,[\"sendEmailWhenPublished\"]],[30,[36,0],[[32,0],\"setSendEmailWhenPublished\"],null],[32,0,[\"isSendingEmailLimited\"]],[32,0,[\"sendingEmailLimitError\"]],[32,0,[\"distributionAction\"]],[30,[36,0],[[32,0],\"setDistributionAction\"],null]]],null],[2,\"\\n        \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[2,\"        \"],[10,\"footer\"],[14,0,\"gh-publishmenu-footer\"],[12],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-outline\"],[24,\"data-test-publishmenu-cancel\",\"\"],[4,[38,6],[\"click\",[30,[36,0],[[32,0],[32,1,[\"actions\",\"close\"]]],null]],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[8,\"gh-task-button\",[[24,\"data-test-publishmenu-save\",\"true\"]],[[\"@buttonText\",\"@task\",\"@taskArgs\",\"@successText\",\"@runningText\",\"@class\"],[[32,0,[\"buttonText\"]],[32,0,[\"save\"]],[30,[36,7],null,[[\"dropdown\"],[[32,1]]]],[32,0,[\"successText\"]],[32,0,[\"runningText\"]],\"gh-btn gh-btn-black gh-publishmenu-button gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[11,\"div\"],[24,0,\"hidden\"],[4,[38,8],[\"cmd+shift+p\",[30,[36,0],[[32,0],\"publishFromShortcut\"],null]],null],[12],[13]],\"hasEval\":false,\"upvars\":[\"action\",\"mut\",\"eq\",\"if\",\"or\",\"svg-jar\",\"on\",\"hash\",\"on-key\"]}",
    "moduleName": "ghost-admin/components/gh-publishmenu.hbs"
  });

  const CONFIRM_EMAIL_POLL_LENGTH = 1000;
  const CONFIRM_EMAIL_MAX_POLL_LENGTH = 15 * 1000;

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    clock: Ember.inject.service(),
    config: Ember.inject.service(),
    feature: Ember.inject.service(),
    limit: Ember.inject.service(),
    modals: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    store: Ember.inject.service(),
    classNames: 'gh-publishmenu',
    displayState: 'draft',
    saveType: 'publish',
    post: null,
    postStatus: 'draft',
    distributionAction: 'publish_send',
    runningText: null,
    saveTask: null,
    sendEmailWhenPublished: null,
    typedDateError: null,
    isSendingEmailLimited: false,
    sendingEmailLimitError: '',
    _publishedAtBlogTZ: null,
    _previousStatus: null,
    isClosing: null,

    onClose() {},

    forcePublishedMenu: Ember.computed.reads('post.pastScheduledTime'),
    hasEmailPermission: Ember.computed.or('session.user.isOwnerOnly', 'session.user.isAdminOnly', 'session.user.isEditor'),
    emailOnly: Ember.computed.equal('distributionAction', 'send'),
    canSendEmail: Ember.computed('hasEmailPermission', 'post.{isPost,email}', 'settings.{editorDefaultEmailRecipients,membersSignupAccess,mailgunIsConfigured}', 'config.mailgunIsConfigured', function () {
      let isDisabled = this.settings.get('editorDefaultEmailRecipients') === 'disabled' || this.settings.get('membersSignupAccess') === 'none';
      let mailgunIsConfigured = this.settings.get('mailgunIsConfigured') || this.config.get('mailgunIsConfigured');
      let isPost = this.post.isPost;
      let hasSentEmail = !!this.post.email;
      return this.hasEmailPermission && !isDisabled && mailgunIsConfigured && isPost && !hasSentEmail;
    }),
    postState: Ember.computed('post.{isPublished,isScheduled}', 'forcePublishedMenu', function () {
      if (this.forcePublishedMenu || this.get('post.isPublished')) {
        return 'published';
      } else if (this.get('post.isScheduled')) {
        return 'scheduled';
      } else {
        return 'draft';
      }
    }),
    triggerText: Ember.computed('postState', function () {
      let state = this.postState;

      if (state === 'published') {
        return 'Actualizar';
      } else if (state === 'scheduled') {
        return 'Programar';
      } else {
        return 'Publicar';
      }
    }),
    _runningText: Ember.computed('postState', 'saveType', function () {
      let saveType = this.saveType;
      let postState = this.postState;
      let runningText;

      if (postState === 'draft') {
        runningText = saveType === 'publish' ? 'Publicando' : 'Programando';
      }

      if (postState === 'published') {
        runningText = saveType === 'publish' ? 'Actualizando' : 'Despublicando';
      }

      if (postState === 'scheduled') {
        runningText = saveType === 'schedule' ? 'Reprogramando' : 'Desprogramando';
      }

      return runningText || 'Publicando';
    }),
    buttonText: Ember.computed('postState', 'saveType', 'distributionAction', 'sendEmailWhenPublished', function () {
      let saveType = this.saveType;
      let postState = this.postState;
      let distributionAction = this.distributionAction;
      let buttonText;

      if (postState === 'draft') {
        switch (distributionAction) {
          case 'publish_send':
            if (saveType === 'publish') {
              buttonText = 'Publish';

              if (this.canSendEmail && this.sendEmailWhenPublished && this.sendEmailWhenPublished !== 'none') {
                buttonText = `${buttonText} & enviar`;
              }
            } else {
              buttonText = 'Schedule';
            }

            break;

          case 'publish':
            buttonText = saveType === 'publish' ? 'Publicado' : 'Programado';
            break;

          case 'send':
            buttonText = saveType === 'publish' ? 'Enviado' : 'Programado';
            break;
        }
      }

      if (postState === 'published') {
        buttonText = saveType === 'publish' ? 'Actualizar' : 'Despublicar';
      }

      if (postState === 'scheduled') {
        buttonText = saveType === 'schedule' ? 'Reprogramar' : 'Dar de baja el progrmado';
      }

      return buttonText || 'Publicar';
    }),
    successText: Ember.computed('_previousStatus', 'postState', function () {
      let postState = this.postState;
      let previousStatus = this._previousStatus;
      let buttonText;

      if (previousStatus === 'draft') {
        buttonText = postState === 'published' ? 'Publicado' : 'Programado';
      }

      if (previousStatus === 'published') {
        buttonText = postState === 'draft' ? 'Despublicado' : 'Actualizado';
      }

      if (previousStatus === 'scheduled') {
        buttonText = postState === 'draft' ? 'Desprogramado' : 'Reprogramado';
      }

      return buttonText;
    }),
    defaultEmailRecipients: Ember.computed('settings.{editorDefaultEmailRecipients,editorDefaultEmailRecipientsFilter}', 'post.visibility', function () {
      const defaultEmailRecipients = this.settings.get('editorDefaultEmailRecipients');

      if (defaultEmailRecipients === 'disabled') {
        return null;
      }

      if (defaultEmailRecipients === 'visibility') {
        if (this.post.visibility === 'public') {
          return 'status:free,status:-free';
        }

        if (this.post.visibility === 'members') {
          return 'status:free,status:-free';
        }

        if (this.post.visibility === 'paid') {
          return 'status:-free';
        }

        if (this.post.visibility === 'filter') {
          return this.post.visibilityFilter;
        }

        return this.post.visibility;
      }

      return this.settings.get('editorDefaultEmailRecipientsFilter');
    }),

    didReceiveAttrs() {
      this._super(...arguments);

      const updateSaveTypeForPostStatus = status => {
        if (status === 'draft' || status === 'published') {
          this.set('saveType', 'publish');
        }

        if (status === 'scheduled') {
          this.set('saveType', 'schedule');
        }
      }; // update the displayState based on the post status but only after a
      // save has finished to avoid swapping the menu prematurely and triggering
      // calls to `setSaveType` due to the component re-rendering
      // TODO: we should have a better way of dealing with this where we don't
      // rely on the side-effect of component rendering calling setSaveType


      let postStatus = this.postStatus;

      if (postStatus !== this._postStatus) {
        if (this.get('saveTask.isRunning')) {
          this.get('saveTask.last').then(() => {
            this.set('displayState', postStatus);
            updateSaveTypeForPostStatus(postStatus);
          });
        } else {
          this.set('displayState', postStatus);
          updateSaveTypeForPostStatus(postStatus);
        }
      }

      this._postStatus = this.postStatus;
      this.setDefaultSendEmailWhenPublished();
      this.checkIsSendingEmailLimitedTask.perform();
      const defaultEmailRecipients = this.get('defaultEmailRecipients');

      if (this.post.isPage || !defaultEmailRecipients) {
        this.set('distributionAction', 'publish');
      }
    },

    actions: {
      setSaveType(saveType) {
        let post = this.post;
        this.set('saveType', saveType);

        if (saveType === 'draft') {
          post.set('statusScratch', 'draft');
        } else if (saveType === 'schedule') {
          post.set('statusScratch', 'scheduled');
        } else if (saveType === 'publish') {
          post.set('statusScratch', 'published');
        }
      },

      setSendEmailWhenPublished(sendEmailWhenPublished) {
        this.set('sendEmailWhenPublished', sendEmailWhenPublished);
      },

      setDistributionAction(distributionAction) {
        this.set('distributionAction', distributionAction);

        if (distributionAction === 'publish') {
          this.set('sendEmailWhenPublished', 'none');
        } else {
          this.set('sendEmailWhenPublished', this.defaultEmailRecipients);
        }
      },

      open() {
        this._cachePublishedAtBlogTZ();

        this.set('isClosing', false);
        this.get('post.errors').clear();
        this.setDefaultSendEmailWhenPublished();

        if (this.onOpen) {
          this.onOpen();
        }
      },

      close(dropdown, e) {
        // don't close the menu if the datepicker popup or confirm modal is clicked
        if (e) {
          let onDatepicker = !!e.target.closest('.ember-power-datepicker-content');
          let onModal = !!e.target.closest('.fullscreen-modal-container');

          if (onDatepicker || onModal) {
            return false;
          }
        }

        if (!this._skipDropdownCloseCleanup) {
          this._cleanup();
        }

        this._skipDropdownCloseCleanup = false;
        this.onClose();
        this.set('isClosing', true);
        return true;
      },

      updateMemberCount(count) {
        this.memberCount = count;
      },

      publishFromShortcut() {
        // trigger blur for inputs and textareas to trigger any actions
        // before attempting to save so we're saving after the result
        if (document.activeElement?.matches('input[type="text"], textarea')) {
          // trigger focusout so that it bubbles
          const focusout = new Event('focusout');
          document.activeElement.dispatchEvent(focusout); // make sure blur event is triggered too

          document.activeElement.blur();
        } // wait for actions to be triggered by the focusout/blur before saving


        Ember.run.schedule('actions', this, function () {
          this.send('setSaveType', 'publish');
          this.save.perform();
        });
      }

    },

    setDefaultSendEmailWhenPublished() {
      if (this.isSendingEmailLimited) {
        this.set('sendEmailWhenPublished', false);
      } else if (this.postStatus === 'draft' && this.canSendEmail) {
        // Set default newsletter recipients
        this.set('sendEmailWhenPublished', this.defaultEmailRecipients);
      } else {
        this.set('sendEmailWhenPublished', this.post.emailRecipientFilter);
      }
    },

    checkIsSendingEmailLimitedTask: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.reloadSettingsTask.perform();

        if (this.limit.limiter && this.limit.limiter.isLimited('emails')) {
          yield this.limit.limiter.errorIfWouldGoOverLimit('emails');
        } else if (this.settings.get('emailVerificationRequired')) {
          this.set('isSendingEmailLimited', true);
          this.set('sendingEmailLimitError', 'Email sending is temporarily disabled because your account is currently in review. You should have an email about this from us already, but you can also reach us any time at support@ghost.org.');
          this.set('sendEmailWhenPublished', 'none');
          return;
        }

        this.set('isSendingEmailLimited', false);
        this.set('sendingEmailLimitError', null);
      } catch (error) {
        this.set('isSendingEmailLimited', true);
        this.set('sendingEmailLimitError', error.message);
        this.set('sendEmailWhenPublished', 'none');
      }
    }),
    reloadSettingsTask: (0, _emberConcurrency.task)(function* () {
      yield this.settings.reload();
    }),
    save: (0, _emberConcurrency.task)(function* () {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const {
        post,
        saveType
      } = this; // don't allow save if an invalid schedule date is present

      if (this.typedDateError) {
        return false;
      } // validate publishedAtBlog to avoid an alert when saving for already displayed errors
      // important to do this before opening email confirmation modal too


      try {
        yield post.validate({
          property: 'publishedAtBlog'
        });
      } catch (error) {
        // re-throw if we don't have a validation error
        if (error) {
          throw error;
        }

        return false;
      }

      const isPublishOnly = this.distributionAction === 'publish' || this.sendEmailWhenPublished === 'none' || this.post.displayName === 'page' || this.post.email; // open publish confirmation if post will be published/scheduled and emailed

      if (!isPublishOnly && post.status === 'draft' && (saveType === 'publish' || saveType === 'schedule')) {
        if (options.dropdown) {
          this._skipDropdownCloseCleanup = true;
          options.dropdown.actions.close();
        }

        return yield this.modals.open('modals/editor/confirm-publish', {
          post: this.post,
          emailOnly: this.emailOnly,
          sendEmailWhenPublished: this.sendEmailWhenPublished,
          isScheduled: saveType === 'schedule',
          confirm: this.saveWithConfirmedPublish.perform,
          retryEmailSend: this.retryEmailSendTask.perform
        }, {
          beforeClose: Ember.run.bind(this, this._cleanup)
        });
      }

      return yield this._saveTask.perform(options);
    }),
    saveWithConfirmedPublish: (0, _emberConcurrency.task)(function* () {
      return yield this._saveTask.perform();
    }),
    retryEmailSendTask: (0, _emberConcurrency.task)(function* () {
      if (!this.post.email) {
        return;
      }

      let email = yield this.post.email.retry();
      let pollTimeout = 0;

      if (email && email.status !== 'submitted') {
        while (pollTimeout < CONFIRM_EMAIL_MAX_POLL_LENGTH) {
          yield (0, _emberConcurrency.timeout)(CONFIRM_EMAIL_POLL_LENGTH);
          pollTimeout += CONFIRM_EMAIL_POLL_LENGTH;
          email = yield email.reload();

          if (email.status === 'submitted') {
            break;
          }

          if (email.status === 'failed') {
            throw new _emailFailedError.default(email.error);
          }
        }
      }

      return email;
    }),
    _saveTask: (0, _emberConcurrency.task)(function* () {
      let {
        post,
        emailOnly,
        sendEmailWhenPublished,
        saveType
      } = this; // runningText needs to be declared before the other states change during the
      // save action.

      this.set('runningText', this._runningText);
      this.set('_previousStatus', this.get('post.status'));
      this.setSaveType(saveType);

      try {
        // will show alert for non-date related failed validations
        post = yield this.saveTask.perform({
          sendEmailWhenPublished,
          emailOnly
        });

        this._cachePublishedAtBlogTZ();

        if (sendEmailWhenPublished && sendEmailWhenPublished !== 'none') {
          let pollTimeout = 0;

          if (post.email && post.email.status !== 'submitted') {
            while (pollTimeout < CONFIRM_EMAIL_MAX_POLL_LENGTH) {
              yield (0, _emberConcurrency.timeout)(CONFIRM_EMAIL_POLL_LENGTH);
              pollTimeout += CONFIRM_EMAIL_POLL_LENGTH;
              post = yield post.reload();

              if (post.email.status === 'submitted') {
                break;
              }

              if (post.email.status === 'failed') {
                throw new _emailFailedError.default(post.email.error);
              }
            }
          }
        }

        this._cleanup();

        return post;
      } catch (error) {
        // re-throw if we don't have a validation error
        if (error) {
          throw error;
        }
      }
    }),

    _cachePublishedAtBlogTZ() {
      this._publishedAtBlogTZ = this.get('post.publishedAtBlogTZ');
    },

    _cleanup() {
      if (this.post.isPage || !this.defaultEmailRecipients) {
        this.set('distributionAction', 'publish');
      } else {
        this.set('distributionAction', 'publish_send');
      } // when closing the menu we reset the publishedAtBlogTZ date so that the
      // unsaved changes made to the scheduled date aren't reflected in the PSM


      this.post.set('publishedAtBlogTZ', this._publishedAtBlogTZ);
      this.post.set('statusScratch', null);
      this.post.validate();
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-recipient-filter-count", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if @filter}}
  <GhMembersFilterCount @filter={{concat "subscribed:true+(" @filter ")"}} @knownCount={{@knownCount}} />
  {{else}}
  0 members
  {{/if}}
  */
  {
    "id": "ChBD3qgE",
    "block": "{\"symbols\":[\"@filter\",\"@knownCount\"],\"statements\":[[6,[37,1],[[32,1]],null,[[\"default\",\"else\"],[{\"statements\":[[8,\"gh-members-filter-count\",[],[[\"@filter\",\"@knownCount\"],[[30,[36,0],[\"subscribed:true+(\",[32,1],\")\"],null],[32,2]]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"0 members\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"concat\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-recipient-filter-count.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-role-selection", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-roles-container" {{did-insert (perform this.fetchRolesTask)}}>
      {{#if this.fetchRolesTask.isRunning}}
          {{!-- width and height are needed to avoid layout shift after roles have loaded --}}
          <div style="width: 486px; height: 268px">
              <GhLoadingSpinner />
          </div>
      {{else}}
          <div class="gh-radio {{if (eq @selected.name "Contributor") "active"}}" {{on "click" (fn this.setRole "Contributor")}} data-test-option="Contributor">
              <div class="gh-radio-button"></div>
              <div class="gh-radio-content">
                  <div class="gh-radio-label">Contributor</div>
                  <div class="gh-radio-desc">Can create and edit their own posts, but cannot publish. An Editor needs to approve and publish for them.</div>
              </div>
              <div>
                  {{!-- Inner container collapses height to the SVG so popover can align correctly --}}
                  <div>
                      {{svg-jar "info"}}
                      <EmberPopover @tooltipClass="popover" @arrowClass="popover-arrow" @side="left">
                          <table>
                              <tbody>
                                  <tr>
                                      <td class="left">Settings</td>
                                      <td>View and edit own profile</td>
                                  </tr>
                                  <tr>
                                      <td class="left">Posts</td>
                                      <td>Create and edit own draft posts</td>
                                  </tr>
                              </tbody>
                          </table>
                      </EmberPopover>
                  </div>
              </div>
          </div>
  
          <div class="gh-radio {{if (eq @selected.name "Author") "active"}}" {{on "click" (fn this.setRole "Author")}} data-test-option="Author">
              <div class="gh-radio-button"></div>
              <div class="gh-radio-content">
                  <div class="gh-radio-label">Author</div>
                  <div class="gh-radio-desc">A trusted user who can create, edit and publish their own posts, but can’t modify others.</div>
              </div>
              <div>
                  {{!-- Inner container collapses height to the SVG so popover can align correctly --}}
                  <div>
                      {{svg-jar "info"}}
                      <EmberPopover @tooltipClass="popover" @arrowClass="popover-arrow" @side="left">
                          <table>
                              <tbody>
                                  <tr>
                                      <td class="left">Settings</td>
                                      <td>View and edit own profile</td>
                                  </tr>
                                  <tr>
                                      <td class="left">Users</td>
                                      <td>Browse users</td>
                                  </tr>
                                  <tr>
                                      <td class="left">Posts</td>
                                      <td>View, edit and publish own posts, generate slugs</td>
                                  </tr>
                                  <tr>
                                      <td class="left">Tags</td>
                                      <td>Add tags</td>
                                  </tr>
                              </tbody>
                          </table>
                      </EmberPopover>
                  </div>
              </div>
          </div>
  
          <div class="gh-radio {{if (eq @selected.name "Editor") "active"}}" {{on "click" (fn this.setRole "Editor")}} data-test-option="Editor">
              <div class="gh-radio-button"></div>
              <div class="gh-radio-content">
                  <div class="gh-radio-label">Editor</div>
                  <div class="gh-radio-desc">Can invite and manage other Authors and Contributors, as well as edit and publish any posts on the site.</div>
              </div>
              <div>
                  {{!-- Inner container collapses height to the SVG so popover can align correctly --}}
                  <div>
                      {{svg-jar "info"}}
                      <EmberPopover @tooltipClass="popover" @arrowClass="popover-arrow" @side="left">
                          <table>
                              <tbody>
                                  <tr>
                                      <td class="left">Settings</td>
                                      <td>View and edit own profile</td>
                                  </tr>
                                  <tr>
                                      <td class="left">Users</td>
                                      <td>Browse users, manage authors and contributors (invite, revoke, delete)</td>
                                  </tr>
                                  <tr>
                                      <td class="left">Posts</td>
                                      <td>Create, publish, edit and delete all posts, generate slugs</td>
                                  </tr>
                                  <tr>
                                      <td class="left">Tags</td>
                                      <td>Edit, add and delete tags</td>
                                  </tr>
                              </tbody>
                          </table>
                      </EmberPopover>
                  </div>
              </div>
          </div>
  
          <div class="gh-radio {{if (eq @selected.name "Administrator") "active"}}" {{on "click" (fn this.setRole "Administrator")}} data-test-option="Administrator">
              <div class="gh-radio-button"></div>
              <div class="gh-radio-content">
                  <div class="gh-radio-label">Administrator</div>
                  <div class="gh-radio-desc">Trusted staff user who should be able to manage all content and users, as well as site settings and options.</div>
              </div>
              <div>
                  {{!-- Inner container collapses height to the SVG so popover can align correctly --}}
                  <div>
                      {{svg-jar "info"}}
                      <EmberPopover @tooltipClass="popover" @arrowClass="popover-arrow" @side="left">
                          <table>
                              <tbody>
                                  <tr>
                                      <td class="left">Settings</td>
                                      <td>Access all except Stripe settings</td>
                                  </tr>
                                  <tr>
                                      <td class="left">Users</td>
                                      <td>Manage all users (invite, revoke, delete)</td>
                                  </tr>
                                  <tr>
                                      <td class="left">Posts</td>
                                      <td>Create, publish, edit and delete all posts, generate slugs</td>
                                  </tr>
                                  <tr>
                                      <td class="left">Tags</td>
                                      <td>Edit, add and delete tags</td>
                                  </tr>
                                  <tr>
                                      <td class="left">Database</td>
                                      <td>Import, export and delete all content</td>
                                  </tr>
                                  <tr>
                                      <td class="left">Email</td>
                                      <td>Send newsletters and test emails</td>
                                  </tr>
                              </tbody>
                          </table>
                      </EmberPopover>
                  </div>
              </div>
          </div>
  
  
          <div class="gh-content-box pa" hidden={{if this.limitErrorMessage false true}}>
              {{html-safe this.limitErrorMessage}} To use selected user role, upgrade to a different plan.
          </div>
      {{/if}}
  </div>
  */
  {
    "id": "5lA+l9gw",
    "block": "{\"symbols\":[\"@selected\"],\"statements\":[[11,\"div\"],[24,0,\"gh-roles-container\"],[4,[38,7],[[30,[36,6],[[32,0,[\"fetchRolesTask\"]]],null]],null],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"fetchRolesTask\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,5,\"width: 486px; height: 268px\"],[12],[2,\"\\n            \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[11,\"div\"],[16,0,[31,[\"gh-radio \",[30,[36,1],[[30,[36,0],[[32,1,[\"name\"]],\"Contributor\"],null],\"active\"],null]]]],[24,\"data-test-option\",\"Contributor\"],[4,[38,3],[\"click\",[30,[36,2],[[32,0,[\"setRole\"]],\"Contributor\"],null]],null],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-radio-button\"],[12],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-radio-content\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-radio-label\"],[12],[2,\"Contributor\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-radio-desc\"],[12],[2,\"Can create and edit their own posts, but cannot publish. An Editor needs to approve and publish for them.\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n\"],[2,\"                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[1,[30,[36,4],[\"info\"],null]],[2,\"\\n                    \"],[8,\"ember-popover\",[],[[\"@tooltipClass\",\"@arrowClass\",\"@side\"],[\"popover\",\"popover-arrow\",\"left\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"table\"],[12],[2,\"\\n                            \"],[10,\"tbody\"],[12],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Settings\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"View and edit own profile\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Posts\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"Create and edit own draft posts\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[11,\"div\"],[16,0,[31,[\"gh-radio \",[30,[36,1],[[30,[36,0],[[32,1,[\"name\"]],\"Author\"],null],\"active\"],null]]]],[24,\"data-test-option\",\"Author\"],[4,[38,3],[\"click\",[30,[36,2],[[32,0,[\"setRole\"]],\"Author\"],null]],null],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-radio-button\"],[12],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-radio-content\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-radio-label\"],[12],[2,\"Author\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-radio-desc\"],[12],[2,\"A trusted user who can create, edit and publish their own posts, but can’t modify others.\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n\"],[2,\"                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[1,[30,[36,4],[\"info\"],null]],[2,\"\\n                    \"],[8,\"ember-popover\",[],[[\"@tooltipClass\",\"@arrowClass\",\"@side\"],[\"popover\",\"popover-arrow\",\"left\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"table\"],[12],[2,\"\\n                            \"],[10,\"tbody\"],[12],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Settings\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"View and edit own profile\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Users\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"Browse users\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Posts\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"View, edit and publish own posts, generate slugs\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Tags\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"Add tags\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[11,\"div\"],[16,0,[31,[\"gh-radio \",[30,[36,1],[[30,[36,0],[[32,1,[\"name\"]],\"Editor\"],null],\"active\"],null]]]],[24,\"data-test-option\",\"Editor\"],[4,[38,3],[\"click\",[30,[36,2],[[32,0,[\"setRole\"]],\"Editor\"],null]],null],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-radio-button\"],[12],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-radio-content\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-radio-label\"],[12],[2,\"Editor\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-radio-desc\"],[12],[2,\"Can invite and manage other Authors and Contributors, as well as edit and publish any posts on the site.\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n\"],[2,\"                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[1,[30,[36,4],[\"info\"],null]],[2,\"\\n                    \"],[8,\"ember-popover\",[],[[\"@tooltipClass\",\"@arrowClass\",\"@side\"],[\"popover\",\"popover-arrow\",\"left\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"table\"],[12],[2,\"\\n                            \"],[10,\"tbody\"],[12],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Settings\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"View and edit own profile\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Users\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"Browse users, manage authors and contributors (invite, revoke, delete)\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Posts\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"Create, publish, edit and delete all posts, generate slugs\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Tags\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"Edit, add and delete tags\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[11,\"div\"],[16,0,[31,[\"gh-radio \",[30,[36,1],[[30,[36,0],[[32,1,[\"name\"]],\"Administrator\"],null],\"active\"],null]]]],[24,\"data-test-option\",\"Administrator\"],[4,[38,3],[\"click\",[30,[36,2],[[32,0,[\"setRole\"]],\"Administrator\"],null]],null],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-radio-button\"],[12],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-radio-content\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-radio-label\"],[12],[2,\"Administrator\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-radio-desc\"],[12],[2,\"Trusted staff user who should be able to manage all content and users, as well as site settings and options.\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n\"],[2,\"                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[1,[30,[36,4],[\"info\"],null]],[2,\"\\n                    \"],[8,\"ember-popover\",[],[[\"@tooltipClass\",\"@arrowClass\",\"@side\"],[\"popover\",\"popover-arrow\",\"left\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"table\"],[12],[2,\"\\n                            \"],[10,\"tbody\"],[12],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Settings\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"Access all except Stripe settings\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Users\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"Manage all users (invite, revoke, delete)\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Posts\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"Create, publish, edit and delete all posts, generate slugs\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Tags\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"Edit, add and delete tags\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Database\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"Import, export and delete all content\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"tr\"],[12],[2,\"\\n                                    \"],[10,\"td\"],[14,0,\"left\"],[12],[2,\"Email\"],[13],[2,\"\\n                                    \"],[10,\"td\"],[12],[2,\"Send newsletters and test emails\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n\\n        \"],[10,\"div\"],[14,0,\"gh-content-box pa\"],[15,\"hidden\",[30,[36,1],[[32,0,[\"limitErrorMessage\"]],false,true],null]],[12],[2,\"\\n            \"],[1,[30,[36,5],[[32,0,[\"limitErrorMessage\"]]],null]],[2,\" To use selected user role, upgrade to a different plan.\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13]],\"hasEval\":false,\"upvars\":[\"eq\",\"if\",\"fn\",\"on\",\"svg-jar\",\"html-safe\",\"perform\",\"did-insert\"]}",
    "moduleName": "ghost-admin/components/gh-role-selection.hbs"
  });

  const DEFAULT_ROLE_NAME = 'Contributor';
  let GhRoleSelectionComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._action, (_class = class GhRoleSelectionComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "limit", _descriptor, this);

      _initializerDefineProperty(this, "notifications", _descriptor2, this);

      _initializerDefineProperty(this, "store", _descriptor3, this);

      _initializerDefineProperty(this, "roles", _descriptor4, this);

      _initializerDefineProperty(this, "limitErrorMessage", _descriptor5, this);
    }

    async setRole(roleName) {
      const role = this.roles.findBy('name', roleName);
      this.args.setRole(role);
      return this.validateRole(role);
    }

    *fetchRolesTask() {
      const roles = yield this.store.query('role', {
        permissions: 'assign'
      });
      const defaultRole = roles.findBy('name', DEFAULT_ROLE_NAME);
      this.roles = roles;

      if (!this.args.selected && defaultRole) {
        this.args.setRole(defaultRole);
      }
    }

    async validateRole(role) {
      if (role.name === 'Contributor') {
        this.args.onValidationSuccess?.();
      }

      if (role.name !== 'Contributor' && this.limit.limiter && this.limit.limiter.isLimited('staff')) {
        try {
          await this.limit.limiter.errorIfWouldGoOverLimit('staff');
          this.limitErrorMessage = null;
          this.args.onValidationSuccess?.();
        } catch (error) {
          if (error.errorType === 'HostLimitError') {
            this.limitErrorMessage = error.message;
            this.args.onValidationFailure?.(this.limitErrorMessage);
          } else {
            this.notifications.showAPIError(error, {
              key: 'staff.limit'
            });
          }
        }
      } else {
        this.limitErrorMessage = null;
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "limit", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "roles", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "limitErrorMessage", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setRole", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "setRole"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchRolesTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "fetchRolesTask"), _class.prototype)), _class));
  _exports.default = GhRoleSelectionComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhRoleSelectionComponent);
});
;define("ghost-admin/components/gh-scroll-trigger", ["exports", "@glimmer/component", "ghost-admin/utils/get-scroll-parent"], function (_exports, _component, _getScrollParent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div {{did-insert this.setupInViewport}} {{will-destroy this.teardownInViewport}}>
    {{yield}}
  </div>
  */
  {
    "id": "o3+eYU0s",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[11,\"div\"],[4,[38,0],[[32,0,[\"setupInViewport\"]]],null],[4,[38,1],[[32,0,[\"teardownInViewport\"]]],null],[12],[2,\"\\n  \"],[18,1,null],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"did-insert\",\"will-destroy\"]}",
    "moduleName": "ghost-admin/components/gh-scroll-trigger.hbs"
  });

  let GhScrollTrigger = (_dec = Ember.inject.service, _dec2 = Ember._action, _dec3 = Ember._action, (_class = class GhScrollTrigger extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "inViewport", _descriptor, this);
    }

    setupInViewport(element) {
      this.loaderElement = element;
      let viewportTolerance = this.args.triggerOffset || {}; // if triggerOffset is a number we use it for all dimensions

      if (typeof viewportTolerance === 'number') {
        viewportTolerance = {
          top: viewportTolerance,
          bottom: viewportTolerance,
          left: viewportTolerance,
          right: viewportTolerance
        };
      }

      let options = {
        viewportSpy: true,
        viewportTolerance,
        scrollableArea: this.args.scrollable || (0, _getScrollParent.default)(element)
      };
      let {
        onEnter,
        onExit
      } = this.inViewport.watchElement(element, options);
      onEnter(this.didEnterViewport.bind(this));
      onExit(this.didExitViewport.bind(this));
      this.args.registerElement?.(element);
    }

    didEnterViewport() {
      this.args.enter?.();
    }

    didExitViewport() {
      this.args.exit?.();
    }

    teardownInViewport(element) {
      this.inViewport.stopWatching(element);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "inViewport", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "setupInViewport", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "setupInViewport"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "teardownInViewport", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "teardownInViewport"), _class.prototype)), _class));
  _exports.default = GhScrollTrigger;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhScrollTrigger);
});
;define("ghost-admin/components/gh-search-input", ["exports", "@glimmer/component", "ember-inflector", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _component, _emberInflector, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div ...attributes>
      <PowerSelect
          class="ember-power-select-search"
          @search={{perform this.searchTask}}
          @onChange={{this.openSelected}}
          @onClose={{this.onClose}}
          @placeholder="Search site"
          @searchEnabled={{false}}
          @triggerComponent="gh-input-with-select/trigger"
          @renderInPlace={{true}}
          @loadingMessage="Loading"
          @extra={{hash
              autofocus=true
              inputType="search"
              inputIcon="search"
              inputIconClass="gh-nav-search-icon"
          }}
          as |name select|
      >
          {{highlighted-text name.title select.searchText}}
      </PowerSelect>
  </div>
  */
  {
    "id": "KZRlVUN0",
    "block": "{\"symbols\":[\"name\",\"select\",\"&attrs\"],\"statements\":[[11,\"div\"],[17,3],[12],[2,\"\\n    \"],[8,\"power-select\",[[24,0,\"ember-power-select-search\"]],[[\"@search\",\"@onChange\",\"@onClose\",\"@placeholder\",\"@searchEnabled\",\"@triggerComponent\",\"@renderInPlace\",\"@loadingMessage\",\"@extra\"],[[30,[36,0],[[32,0,[\"searchTask\"]]],null],[32,0,[\"openSelected\"]],[32,0,[\"onClose\"]],\"Search site\",false,\"gh-input-with-select/trigger\",true,\"Loading\",[30,[36,1],null,[[\"autofocus\",\"inputType\",\"inputIcon\",\"inputIconClass\"],[true,\"search\",\"search\",\"gh-nav-search-icon\"]]]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[1,[30,[36,2],[[32,1,[\"title\"]],[32,2,[\"searchText\"]]],null]],[2,\"\\n    \"]],\"parameters\":[1,2]}]]],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"perform\",\"hash\",\"highlighted-text\"]}",
    "moduleName": "ghost-admin/components/gh-search-input.hbs"
  });
  /* eslint-disable camelcase */


  let GhSearchInputComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember._action, _dec6 = Ember._action, _dec7 = (0, _emberConcurrencyDecorators.task)({
    restartable: true
  }), _dec8 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class GhSearchInputComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ajax", _descriptor, this);

      _initializerDefineProperty(this, "notifications", _descriptor2, this);

      _initializerDefineProperty(this, "router", _descriptor3, this);

      _initializerDefineProperty(this, "store", _descriptor4, this);

      _defineProperty(this, "content", []);

      _defineProperty(this, "contentExpiresAt", false);

      _defineProperty(this, "contentExpiry", 30000);

      _defineProperty(this, "searchables", [{
        name: 'Posts',
        model: 'post',
        fields: ['id', 'title'],
        idField: 'id',
        titleField: 'title'
      }, {
        name: 'Pages',
        model: 'page',
        fields: ['id', 'title'],
        idField: 'id',
        titleField: 'title'
      }, {
        name: 'Users',
        model: 'user',
        fields: ['slug', 'name'],
        idField: 'slug',
        titleField: 'name'
      }, {
        name: 'Tags',
        model: 'tag',
        fields: ['slug', 'name'],
        idField: 'slug',
        titleField: 'name'
      }]);
    }

    openSelected(selected) {
      if (!selected) {
        return;
      }

      this.args.onSelected?.(selected);

      if (selected.searchable === 'Posts') {
        let id = selected.id.replace('post.', '');
        this.router.transitionTo('editor.edit', 'post', id);
      }

      if (selected.searchable === 'Pages') {
        let id = selected.id.replace('page.', '');
        this.router.transitionTo('editor.edit', 'page', id);
      }

      if (selected.searchable === 'Users') {
        let id = selected.id.replace('user.', '');
        this.router.transitionTo('settings.staff.user', id);
      }

      if (selected.searchable === 'Tags') {
        let id = selected.id.replace('tag.', '');
        this.router.transitionTo('tag', id);
      }
    }

    onClose(select, keyboardEvent) {
      // refocus search input after dropdown is closed (eg, by pressing Escape)
      Ember.run.later(() => {
        keyboardEvent?.target.focus();
      });
    }

    *searchTask(term) {
      if (Ember.isBlank(term)) {
        return [];
      } // start loading immediately in the background


      this.refreshContentTask.perform(); // debounce searches to 200ms to avoid thrashing CPU

      yield (0, _emberConcurrency.timeout)(200); // wait for any on-going refresh to finish

      if (this.refreshContentTask.isRunning) {
        yield (0, _emberConcurrency.waitForProperty)(this, 'refreshContentTask.isIdle');
      }

      const searchResult = this._searchContent(term);

      return searchResult;
    }

    _searchContent(term) {
      const normalizedTerm = term.toString().toLowerCase();
      const results = [];
      this.searchables.forEach(searchable => {
        const matchedContent = this.content.filter(item => {
          const normalizedTitle = item.title.toString().toLowerCase();
          return item.searchable === searchable.name && normalizedTitle.indexOf(normalizedTerm) >= 0;
        });

        if (!Ember.isEmpty(matchedContent)) {
          results.push({
            groupName: searchable.name,
            options: matchedContent
          });
        }
      });
      return results;
    }

    *refreshContentTask() {
      let now = new Date();
      let contentExpiresAt = this.contentExpiresAt;

      if (contentExpiresAt > now) {
        return true;
      }

      const content = [];
      const promises = this.searchables.map(searchable => this._loadSearchable(searchable, content));

      try {
        yield Ember.RSVP.all(promises);
        this.content = content;
      } catch (error) {
        // eslint-disable-next-line
        console.error(error);
      }

      let contentExpiry = this.contentExpiry;
      this.contentExpiresAt = new Date(now.getTime() + contentExpiry);
    }

    _loadSearchable(searchable, content) {
      let url = `${this.store.adapterFor(searchable.model).urlForQuery({}, searchable.model)}/`;
      let query = {
        fields: searchable.fields,
        limit: 'all'
      };
      return this.ajax.request(url, {
        data: query
      }).then(response => {
        const items = response[(0, _emberInflector.pluralize)(searchable.model)].map(item => ({
          id: `${searchable.model}.${item[searchable.idField]}`,
          title: item[searchable.titleField],
          searchable: searchable.name
        }));
        content.push(...items);
      }).catch(error => {
        this.notifications.showAPIError(error, {
          key: `search.load${searchable.name}.error`
        });
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "openSelected", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "openSelected"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onClose", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "onClose"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "searchTask", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "searchTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "refreshContentTask", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "refreshContentTask"), _class.prototype)), _class));
  _exports.default = GhSearchInputComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhSearchInputComponent);
});
;define("ghost-admin/components/gh-simplemde", ["exports", "ghost-admin/config/environment", "ember-concurrency"], function (_exports, _environment, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{yield}}
  
  */
  {
    "id": "BhMQLDvB",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[18,1,null],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-simplemde.hbs"
  });
  /* global SimpleMDE */


  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.TextArea.extend({
    lazyLoader: Ember.inject.service(),
    // Public attributes
    autofocus: false,
    options: null,
    value: null,
    placeholder: '',
    // Private
    _editor: null,

    // Closure actions
    onChange() {},

    onEditorInit() {},

    onEditorDestroy() {},

    // default SimpleMDE options, see docs for available config:
    // https://github.com/sparksuite/simplemde-markdown-editor#configuration
    defaultOptions: Ember.computed(function () {
      return {
        autofocus: this.autofocus,
        indentWithTabs: false,
        placeholder: this.placeholder,
        tabSize: 4
      };
    }),

    init() {
      this._super(...arguments);

      if (Ember.isEmpty(this.options)) {
        this.set('options', {});
      }
    },

    // update the editor when the value property changes from the outside
    didReceiveAttrs() {
      this._super(...arguments);

      if (Ember.isEmpty(this._editor)) {
        return;
      } // compare values before forcing a content reset to avoid clobbering
      // the undo behaviour


      if (this.value !== this._editor.value()) {
        let cursor = this._editor.codemirror.getDoc().getCursor();

        this._editor.value(this.value);

        this._editor.codemirror.getDoc().setCursor(cursor);
      }
    },

    // instantiate the editor with the contents of value
    didInsertElement() {
      this._super(...arguments);

      this.initSimpleMDE.perform();
    },

    willDestroyElement() {
      this._editor.toTextArea();

      delete this._editor;

      this._super(...arguments);
    },

    initSimpleMDE: (0, _emberConcurrency.task)(function* () {
      yield this.lazyLoader.loadScript('simplemde', 'assets/simplemde/simplemde.js');
      let editorOptions = Ember.assign({
        element: document.getElementById(this.elementId)
      }, this.defaultOptions, this.options); // disable spellchecker when testing so that the exterally loaded plugin
      // doesn't fail

      if (_environment.default.environment === 'test') {
        editorOptions.spellChecker = false;
      }

      this._editor = new SimpleMDE(editorOptions);

      this._editor.value(this.value || '');

      this._editor.codemirror.on('change', (instance, changeObj) => {
        // avoid a "modified x twice in a single render" error that occurs
        // when the underlying value is completely swapped out
        if (changeObj.origin !== 'setValue') {
          this.onChange(this._editor.value());
        }
      });

      this._editor.codemirror.on('focus', () => {
        this.onFocus();
      });

      this._editor.codemirror.on('blur', () => {
        this.onBlur();
      });

      if (this.autofocus) {
        this._editor.codemirror.execCommand('goDocEnd');
      }

      this.onEditorInit(this._editor);
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-site-iframe", ["exports", "@glimmer/component", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _component, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <iframe
      class="site-frame {{if this.isInvisible "invisible"}}"
      src={{this.srcUrl}}
      frameborder="0"
      allowtransparency="true"
      {{did-insert (optional @onInserted)}}
      {{did-insert this.attachMessageListener}}
      {{did-update this.resetSrcAttribute @guid}}
      {{on "load" this.onLoad}}
      ...attributes
  ></iframe>
  */
  {
    "id": "McfjA10F",
    "block": "{\"symbols\":[\"&attrs\",\"@onInserted\",\"@guid\"],\"statements\":[[11,\"iframe\"],[16,0,[31,[\"site-frame \",[30,[36,0],[[32,0,[\"isInvisible\"]],\"invisible\"],null]]]],[16,\"src\",[32,0,[\"srcUrl\"]]],[24,\"frameborder\",\"0\"],[24,\"allowtransparency\",\"true\"],[17,1],[4,[38,2],[[30,[36,1],[[32,2]],null]],null],[4,[38,2],[[32,0,[\"attachMessageListener\"]]],null],[4,[38,3],[[32,0,[\"resetSrcAttribute\"]],[32,3]],null],[4,[38,4],[\"load\",[32,0,[\"onLoad\"]]],null],[12],[13]],\"hasEval\":false,\"upvars\":[\"if\",\"optional\",\"did-insert\",\"did-update\",\"on\"]}",
    "moduleName": "ghost-admin/components/gh-site-iframe.hbs"
  });

  let GhSiteIframeComponent = (_dec = Ember.inject.service, _dec2 = Ember._tracked, _dec3 = Ember._action, _dec4 = Ember._action, _dec5 = Ember._action, (_class = class GhSiteIframeComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "isInvisible", _descriptor2, this);
    }

    willDestroy() {
      super.willDestroy?.(...arguments);

      if (this.messageListener) {
        window.removeEventListener('message', this.messageListener);
      }

      this.args.onDestroyed?.();
    }

    get srcUrl() {
      const srcUrl = new URL(this.args.src || `${this.config.get('blogUrl')}/`);

      if (this.args.guid) {
        srcUrl.searchParams.set('v', this.args.guid);
      }

      return srcUrl.href;
    }

    resetSrcAttribute(iframe) {
      // reset the src attribute and force reload each time the guid changes
      // - allows for a click on the navigation item to reset back to the homepage
      //   or a portal preview modal to force a reload so it can fetch server-side data
      if (this.args.guid !== this._lastGuid) {
        if (iframe) {
          if (this.args.invisibleUntilLoaded) {
            this.isInvisible = true;
          }

          try {
            if (iframe.contentWindow.location.href !== this.srcUrl) {
              iframe.contentWindow.location = this.srcUrl;
            } else {
              iframe.contentWindow.location.reload();
            }
          } catch (e) {
            if (e.name === 'SecurityError') {
              iframe.src = this.srcUrl;
            }
          }
        }
      }

      this._lastGuid = this.args.guid;
    }

    onLoad(event) {
      this.iframe = event.target;

      if (this.args.invisibleUntilLoaded && typeof this.args.invisibleUntilLoaded === 'boolean') {
        this.makeVisible.perform();
      } else {
        this.args.onLoad?.(this.iframe);
      }
    }

    attachMessageListener() {
      if (typeof this.args.invisibleUntilLoaded === 'string') {
        this.messageListener = event => {
          if (this.isDestroying || this.isDestroyed) {
            return;
          }

          const srcURL = new URL(this.srcUrl);
          const originURL = new URL(event.origin);

          if (originURL.origin === srcURL.origin) {
            if (event.data === this.args.invisibleUntilLoaded || event.data.type === this.args.invisibleUntilLoaded) {
              this.makeVisible.perform();
            }
          }
        };

        window.addEventListener('message', this.messageListener, true);
      }
    }

    *makeVisible() {
      // give any scripts a bit of time to render before making visible
      // allows portal to render it's overlay and prevent site background flashes
      yield (0, _emberConcurrency.timeout)(100);
      this.isInvisible = false;
      this.args.onLoad?.(this.iframe);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "isInvisible", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.args.invisibleUntilLoaded;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "resetSrcAttribute", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "resetSrcAttribute"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "onLoad", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "onLoad"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "attachMessageListener", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "attachMessageListener"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "makeVisible", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "makeVisible"), _class.prototype)), _class));
  _exports.default = GhSiteIframeComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhSiteIframeComponent);
});
;define("ghost-admin/components/gh-skip-link", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: 'a',
    anchor: '',
    classNames: ['sr-only', 'sr-only-focusable'],
    // Add attributes to component for href
    // href should be set to retain anchor properties
    // such as pointer cursor and text underline
    attributeBindings: ['href'],
    // Used so that upon clicking on the link
    // anchor behaviors or ignored
    href: Ember.String.htmlSafe('javascript:;'),

    click() {
      let el = document.querySelector(this.anchor);

      if (el) {
        // Scrolls to the top of main content or whatever
        // is passed to the anchor attribute
        document.body.scrollTop = el.getBoundingClientRect().top;

        let removeTabindex = function () {
          el.removeAttribute('tabindex');
        }; // This sets focus on the content which was skipped to
        // upon losing focus, the tabindex should be removed
        // so that normal keyboard navigation picks up from focused
        // element


        el.setAttribute('tabindex', -1);
        el.focus();
        el.addEventListener('blur', removeTabindex);
        el.addEventListener('focusout', removeTabindex);
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-tag-settings-form", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-main-section">
      <h4 class="gh-main-section-header small bn">Basic settings</h4>
      <section class="gh-main-section-block">
          <div class="gh-main-section-content grey columns-2">
              <div>
                  <div class="gh-tag-settings-multiprop">
                      <GhFormGroup @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="name" class="mr2 flex-auto">
                          <label for="tag-name">Name</label>
                          <GhTextInput
                              @id="tag-name"
                              @name="name"
                              @value={{this.scratchTag.name}}
                              @tabindex="1"
                              @focus-out={{action "setProperty" "name" this.scratchTag.name}}
                          />
                          <span class="error">
                              <GhErrorMessage @errors={{this.tag.errors}} @property="name" />
                              <GhErrorMessage @errors={{this.tag.errors}} @property="accentColor" data-test-error="accentColor" />
                          </span>
                          <p class="description">
                              Start with # to create internal tags
                              <a href="https://ghost.org/help/organising-content/#private-tags" target="_blank" rel="noreferrer">Learn more</a>
                          </p>
                      </GhFormGroup>
  
                      <GhFormGroup @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="accentColor" class="gh-tag-settings-colorcontainer">
                          <label for="accent-color">Color</label>
                          <div class="input-color">
                              <input
                                  type="text"
                                  placeholder="15171A"
                                  name="accent-color"
                                  autocorrect="off"
                                  maxlength="6"
                                  value={{this.accentColor}}
                                  class="gh-input"
                                  {{on "input" (perform this.debounceUpdateAccentColor)}}
                                  {{on "blur" this.updateAccentColor}}
                                  data-test-input="accentColor"
                              />
                              <div class="color-picker-horizontal-divider"></div>
                              <div
                                  class="color-box-container"
                                  style={{this.accentColorBgStyle}}
                              >
                                  <input
                                      type="color"
                                      name="accent-color"
                                      class="color-picker"
                                      value="{{this.accentColorPickerValue}}"
                                      {{on "input" (perform this.debounceUpdateAccentColor)}}
                                  >
                              </div>
                          </div>
                      </GhFormGroup>
                  </div>
  
                  <GhFormGroup @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="slug">
                      <label for="tag-slug">Slug</label>
                      <GhTextInput
                          @value={{this.scratchTag.slug}}
                          @id="tag-slug"
                          @name="slug"
                          @tabindex="2"
                          @focus-out={{action "setProperty" "slug" this.scratchTag.slug}}
                      />
                      <GhUrlPreview @prefix="tag" @slug={{this.scratchTag.slug}} @tagName="p" @classNames="description" />
                      <GhErrorMessage @errors={{this.activeTag.errors}} @property="slug" />
                  </GhFormGroup>
  
                  <GhFormGroup @class="no-margin" @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="description">
                      <label for="tag-description">Description</label>
                      <GhTextarea
                          @id="tag-description"
                          @name="description"
                          @class="gh-tag-details-textarea"
                          @tabindex="3"
                          @value={{this.scratchTag.description}}
                          @focus-out={{action "setProperty" "description" this.scratchTag.description}}
                      />
                      <GhErrorMessage @errors={{this.tag.errors}} @property="description" />
                      <p>Maximum: <b>500</b> characters. You’ve used {{gh-count-down-characters this.scratchTag.description 500}}</p>
                  </GhFormGroup>
              </div>
              <GhFormGroup @class="gh-tag-image-uploader no-margin" @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="featureImage">
                  <label for="tag-image">Tag image</label>
                  <GhImageUploaderWithPreview
                      @image={{this.tag.featureImage}}
                      @text="Upload tag image"
                      @allowUnsplash={{true}}
                      @update={{action "setCoverImage"}}
                      @remove={{action "clearCoverImage"}}
                  />
              </GhFormGroup>
          </div>
      </section>
  </div>
  
  <section class="gh-expandable">
      <div class="gh-expandable-block">
          <div class="gh-expandable-header">
              <div>
                  <h4 class="gh-expandable-title">Meta data</h4>
                  <p class="gh-expandable-description">Extra content for search engines.</p>
              </div>
              <button type="button" class="gh-btn gh-btn-expand" {{action (toggle "metadataOpen" this)}}><span>{{if this.metadataOpen "Close" "Expand"}}</span></button>
          </div>
  
          <div class="gh-expandable-content">
              {{#liquid-if this.metadataOpen}}
              <div class="gh-setting-content-extended">
                  <div class="gh-seo-settings">
                      <div class="gh-seo-settings-left flex-basis-1-2-m flex-basis-2-3-l">
                          <GhFormGroup @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="metaTitle">
                              <label for="meta-title">Meta title</label>
                              <GhTextInput
                                  @id="meta-title"
                                  @name="metaTitle"
                                  @placeholder={{this.scratchTag.name}}
                                  @tabindex="4"
                                  @value={{this.scratchTag.metaTitle}}
                                  @focus-out={{action "setProperty" "metaTitle" this.scratchTag.metaTitle}}
                              />
                              <GhErrorMessage @errors={{this.tag.errors}} @property="metaTitle" />
                              <p>Recommended: <b>70</b> characters. You’ve used {{gh-count-down-characters this.scratchTag.metaTitle 70}}</p>
                          </GhFormGroup>
  
                          <GhFormGroup @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="metaDescription">
                              <label for="meta-description">Meta description</label>
                              <GhTextarea
                                  @id="meta-description"
                                  @name="metaDescription"
                                  @class="gh-tag-details-textarea"
                                  @placeholder={{this.scratchTag.description}}
                                  @tabindex="5"
                                  @value={{this.scratchTag.metaDescription}}
                                  @focus-out={{action "setProperty" "metaDescription" this.scratchTag.metaDescription}}
                              />
                              <GhErrorMessage @errors={{this.tag.errors}} @property="metaDescription" />
                              <p>Recommended: <b>156</b> characters. You’ve used {{gh-count-down-characters this.scratchTag.metaDescription 156}}</p>
                          </GhFormGroup>
                          <GhFormGroup @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="canonicalUrl">
                              <label for="canonical-url">Canonical URL</label>
                              <GhTextInput
                                  @id="canonical-url"
                                  @name="canonicalUrl"
                                  @tabindex="4"
                                  @value={{this.scratchTag.canonicalUrl}}
                                  @focus-out={{action "validateCanonicalUrl"}}
                              />
                              <GhErrorMessage @errors={{this.tag.errors}} @property="canonicalUrl" />
                          </GhFormGroup>
                      </div>
                      <div class="flex-basis-1-2-m flex-basis-1-3-l">
                              <label>Search Engine Result Preview</label>
                              <div class="gh-seo-container">
                                  <div class="gh-seo-preview">
                                      <div class="flex mb7">
                                          {{svg-jar "google"}}
                                          <div class="gh-seo-search-bar">{{svg-jar "google-search"}}</div>
                                      </div>
                                      <div class="gh-seo-preview-link">{{this.seoURL}}</div>
                                      <div class="gh-seo-preview-title">{{this.seoTitle}}</div>
                                      <div class="gh-seo-preview-desc">{{this.seoDescription}}</div>
                                  </div>
                              </div>
                      </div>
                  </div>
              </div>
              {{/liquid-if}}
          </div>
      </div>
  
      <div class="gh-expandable-block">
          <div class="gh-expandable-header">
              <div>
                  <h4 class="gh-expandable-title">Twitter card</h4>
                  <p class="gh-expandable-description">Customized structured data for Twitter.</p>
              </div>
              <button type="button" class="gh-btn gh-btn-expand" {{action (toggle "twitterMetadataOpen" this)}}><span>{{if this.twitterMetadataOpen "Close" "Expand"}}</span></button>
          </div>
  
          <div class="gh-expandable-content">
              {{#liquid-if this.twitterMetadataOpen}}
              <div class="gh-setting-content-extended">
                  <div class="gh-twitter-settings">
                      <div class="gh-twitter-settings-left flex-basis-1-2-m flex-basis-2-3-l">
                          <GhFormGroup @class="gh-tag-image-uploader" @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="twitterImage">
                              <label for="twitter-image">Twitter image</label>
                              <GhImageUploaderWithPreview
                                  @image={{this.tag.twitterImage}}
                                  @text="Add Twitter image"
                                  @allowUnsplash={{true}}
                                  @update={{action "setTwitterImage"}}
                                  @remove={{action "clearTwitterImage"}}
                              />
                          </GhFormGroup>
                          <GhFormGroup @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="twitterTitle">
                              <label for="twitter-title">Twitter title</label>
                              <GhTextInput
                                  @id="twitter-title"
                                  @name="twitterTitle"
                                  @placeholder={{this.scratchTag.name}}
                                  @tabindex="4"
                                  @value={{this.scratchTag.twitterTitle}}
                                  @focus-out={{action "setProperty" "twitterTitle" this.scratchTag.twitterTitle}}
                              />
                              <GhErrorMessage @errors={{this.tag.errors}} @property="twitterTitle" />
                              <p>Recommended: <b>70</b> characters. You’ve used {{gh-count-down-characters this.scratchTag.twitterTitle 70}}</p>
                          </GhFormGroup>
  
                          <GhFormGroup @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="twitterDesctiption">
                              <label for="twitter-description">Twitter description</label>
                              <GhTextarea
                                  @id="twitter-description"
                                  @name="twitterDescription"
                                  @class="gh-tag-details-textarea"
                                  @placeholder={{this.scratchTag.description}}
                                  @tabindex="5"
                                  @value={{this.scratchTag.twitterDescription}}
                                  @focus-out={{action "setProperty" "twitterDescription" this.scratchTag.twitterDescription}}
                              />
                              <GhErrorMessage @errors={{this.tag.errors}} @property="twitterDescription" />
                              <p>Recommended: <b>125</b> characters. You’ve used {{gh-count-down-characters this.scratchTag.twitterDescription 125}}</p>
                          </GhFormGroup>
                      </div>
                      <div class="flex-basis-1-2-m flex-basis-1-3-l">
                          <label>Twitter preview</label>
                          <div class="gh-twitter-container">
                              <div class="flex ma4">
                                  <span>{{svg-jar "social-twitter" class="social-icon"}}</span>
                                  <div class="w-100">
                                      <span class="gh-social-og-title">{{or this.settings.metaTitle this.settings.title}}</span>
                                      <span class="gh-social-og-time">12 hrs</span>
                                      <div class="flex flex-column mt2 mb3">
                                          <span class="gh-social-og-desc w-100 mb2" />
                                          <span class="gh-social-og-desc w-60" />
                                      </div>
                                      <div class="gh-social-twitter-post-preview">
                                          {{#if this.twitterImage}}
                                              <div class="gh-social-twitter-preview-image" style={{background-image-style this.twitterImage}}></div>
                                          {{/if}}
                                          <div class="gh-social-twitter-preview-content">
                                              <div class="gh-social-twitter-preview-title">{{this.twitterTitle}}</div>
                                              <div class="gh-social-twitter-preview-desc">{{truncate this.twitterDescription}}</div>
                                              <div class="gh-social-twitter-preview-meta">
                                                  {{svg-jar "twitter-link"}}
                                                  {{this.config.blogDomain}}
                                              </div>
                                          </div>
                                      </div>
                                      <div class="gh-social-twitter-reactions">
                                          <div class="flex items-center">{{svg-jar "twitter-comment"}}2</div>
                                          <div class="flex items-center">{{svg-jar "twitter-retweet"}}11</div>
                                          <div class="flex items-center">{{svg-jar "twitter-like"}}32</div>
                                          <div class="flex items-center">{{svg-jar "twitter-share"}}</div>
                                      </div>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
              {{/liquid-if}}
          </div>
      </div>
  
      <div class="gh-expandable-block">
          <div class="gh-expandable-header">
              <div>
                  <h4 class="gh-expandable-title">Facebook card</h4>
                  <p class="gh-expandable-description">Customize Open Graph data.</p>
              </div>
              <button type="button" class="gh-btn gh-btn-expand" {{action (toggle "facebookMetadataOpen" this)}}><span>{{if this.facebookMetadataOpen "Close" "Expand"}}</span></button>
          </div>
  
          <div class="gh-expandable-content">
              {{#liquid-if this.facebookMetadataOpen}}
              <div class="gh-setting-content-extended">
                  <div class="gh-og-settings">
                      <div class="gh-og-settings-left flex-basis-1-2-m flex-basis-2-3-l">
                          <GhFormGroup @class="gh-tag-image-uploader" @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="ogImage">
                              <label for="og-image">Facebook image</label>
                              <GhImageUploaderWithPreview
                                  @image={{this.tag.ogImage}}
                                  @text="Add Facebook image"
                                  @allowUnsplash={{true}}
                                  @update={{action "setOgImage"}}
                                  @remove={{action "clearOgImage"}}
                              />
                          </GhFormGroup>
                          <GhFormGroup @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="metaTitle">
                              <label for="og-title">Facebook title</label>
                              <GhTextInput
                                  @id="og-title"
                                  @name="ogTitle"
                                  @placeholder={{this.scratchTag.name}}
                                  @tabindex="4"
                                  @value={{this.scratchTag.ogTitle}}
                                  @focus-out={{action "setProperty" "ogTitle" this.scratchTag.ogTitle}}
                              />
                              <GhErrorMessage @errors={{this.tag.errors}} @property="ogTitle" />
                              <p>Recommended: <b>100</b> characters. You’ve used {{gh-count-down-characters this.scratchTag.ogTitle 100}}</p>
                          </GhFormGroup>
  
                          <GhFormGroup @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="ogDescription">
                              <label for="og-description">Facebook description</label>
                              <GhTextarea
                                  @id="og-description"
                                  @name="ogDescription"
                                  @class="gh-tag-details-textarea"
                                  @placeholder={{this.scratchTag.description}}
                                  @tabindex="5"
                                  @value={{this.scratchTag.ogDescription}}
                                  @focus-out={{action "setProperty" "ogDescription" this.scratchTag.ogDescription}}
                              />
                              <GhErrorMessage @errors={{this.tag.errors}} @property="ogDescription" />
                              <p>Recommended: <b>65</b> characters. You’ve used {{gh-count-down-characters this.scratchTag.ogDescription 65}}</p>
                          </GhFormGroup>
                      </div>
                      <div class="flex-basis-1-2-m flex-basis-1-3-l">
                          <label>Facebook preview</label>
                          <div class="gh-og-container">
                              <div class="flex ma3 mb2">
                                  <span>{{svg-jar "social-facebook" class="social-icon"}}</span>
                                  <div>
                                      <div class="gh-social-og-title">{{or this.settings.metaTitle this.settings.title}}</div>
                                      <div class="gh-social-og-time">12 hrs</div>
                                  </div>
                              </div>
                              <div class="flex flex-column ma3 mt2">
                                  <span class="gh-social-og-desc w-100 mb2" />
                                  <span class="gh-social-og-desc w-60" />
                              </div>
                              <div class="gh-social-og-preview">
                                  {{#if this.facebookImage}}
                                      <div class="gh-social-og-preview-image" style={{background-image-style this.facebookImage}}></div>
                                  {{/if}}
                                  <div class="gh-social-og-preview-bookmark">
                                      {{!-- Ensures description is hidden if title exceeds one line --}}
                                      <div class="gh-social-og-preview-content">
                                          <div class="gh-social-og-preview-meta">
                                              {{this.config.blogDomain}}
                                          </div>
                                          <div class="gh-social-og-preview-title">{{truncate this.facebookTitle}}</div>
                                          <div class="gh-social-og-preview-desc">{{truncate this.facebookDescription}}</div>
                                      </div>
                                  </div>
                              </div>
                              <div class="gh-social-og-reactions">
                                  <span class="gh-social-og-likes">{{svg-jar "facebook-like" class="z-999"}}{{svg-jar "facebook-heart" class="nl1"}}182</span>
                                  <span class="gh-social-og-comments">7 comments</span>
                                  <span class="gh-social-og-comments ml2">2 shares</span>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
              {{/liquid-if}}
          </div>
      </div>
  
      <div class="gh-expandable-block">
          <div class="gh-expandable-header">
              <div>
                  <h4 class="gh-expandable-title">Code injection</h4>
                  <p class="gh-expandable-description">Add styles/scripts to the header and footer.</p>
              </div>
              <button type="button" class="gh-btn gh-btn-expand" {{action (toggle "codeInjectionOpen" this)}}><span>{{if this.codeInjectionOpen "Close" "Expand"}}</span></button>
          </div>
  
          <div class="gh-expandable-content">
              {{#liquid-if this.codeInjectionOpen}}
              <div class="gh-main-section">
                  <GhFormGroup @class="gh-main-section-block settings-code" @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="codeinjectionHead">
                      <label for="codeinjection-head" class="gh-tag-setting-codeheader">Tag header <code class="fw4 ml1">\{{ghost_head}}</code></label>
                      <GhCmEditor @value={{this.scratchTag.codeinjectionHead}}
                          @id="tag-setting-codeinjection-head"
                          @class="gh-tag-setting-codeinjection"
                          @name="tag-setting-codeinjection-head"
                          @focusOut={{action "setProperty" "codeinjectionHead" this.scratchTag.codeinjectionHead}}
                          @stopEnterKeyDownPropagation="true"
                          @update={{action (mut this.scratchTag.codeinjectionHead)}}
                      />
                      <GhErrorMessage @errors={{this.tag.errors}} @property="codeinjectionHead"/>
                  </GhFormGroup>
  
                  <GhFormGroup @class="gh-main-section-block settings-code" @errors={{this.tag.errors}} @hasValidated={{this.tag.hasValidated}} @property="codeinjectionFoot">
                      <label for="codeinjection-foot"class="gh-tag-setting-codeheader">Tag footer <code class="fw4 ml1">\{{ghost_foot}}</code></label>
                      <GhCmEditor @value={{this.scratchTag.codeinjectionFoot}}
                          @id="tag-setting-codeinjection-foot"
                          @class="gh-tag-setting-codeinjection"
                          @name="tag-setting-codeinjection-foot"
                          @focusOut={{action "setProperty" "codeinjectionFoot" this.scratchTag.codeinjectionFoot}}
                          @stopEnterKeyDownPropagation="true"
                          @update={{action (mut this.scratchTag.codeinjectionFoot)}}
                      />
                      <GhErrorMessage @errors={{this.tag.errors}} @property="codeinjectionFoot"/>
                  </GhFormGroup>
              </div>
              {{/liquid-if}}
          </div>
      </div>
  </section>
  */
  {
    "id": "LyvAns1Z",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n    \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Basic settings\"],[13],[2,\"\\n    \"],[10,\"section\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-content grey columns-2\"],[12],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-tag-settings-multiprop\"],[12],[2,\"\\n                    \"],[8,\"gh-form-group\",[[24,0,\"mr2 flex-auto\"]],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"name\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"label\"],[14,\"for\",\"tag-name\"],[12],[2,\"Name\"],[13],[2,\"\\n                        \"],[8,\"gh-text-input\",[],[[\"@id\",\"@name\",\"@value\",\"@tabindex\",\"@focus-out\"],[\"tag-name\",\"name\",[32,0,[\"scratchTag\",\"name\"]],\"1\",[30,[36,0],[[32,0],\"setProperty\",\"name\",[32,0,[\"scratchTag\",\"name\"]]],null]]],null],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"error\"],[12],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],\"name\"]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"accentColor\"]],[[\"@errors\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],\"accentColor\"]],null],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"description\"],[12],[2,\"\\n                            Start with # to create internal tags\\n                            \"],[10,\"a\"],[14,6,\"https://ghost.org/help/organising-content/#private-tags\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noreferrer\"],[12],[2,\"Learn more\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n\\n                    \"],[8,\"gh-form-group\",[[24,0,\"gh-tag-settings-colorcontainer\"]],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"accentColor\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"label\"],[14,\"for\",\"accent-color\"],[12],[2,\"Color\"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"input-color\"],[12],[2,\"\\n                            \"],[11,\"input\"],[24,\"placeholder\",\"15171A\"],[24,3,\"accent-color\"],[24,\"autocorrect\",\"off\"],[24,\"maxlength\",\"6\"],[16,2,[32,0,[\"accentColor\"]]],[24,0,\"gh-input\"],[24,\"data-test-input\",\"accentColor\"],[24,4,\"text\"],[4,[38,9],[\"input\",[30,[36,8],[[32,0,[\"debounceUpdateAccentColor\"]]],null]],null],[4,[38,9],[\"blur\",[32,0,[\"updateAccentColor\"]]],null],[12],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"color-picker-horizontal-divider\"],[12],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"color-box-container\"],[15,5,[32,0,[\"accentColorBgStyle\"]]],[12],[2,\"\\n                                \"],[11,\"input\"],[24,3,\"accent-color\"],[24,0,\"color-picker\"],[16,2,[31,[[32,0,[\"accentColorPickerValue\"]]]]],[24,4,\"color\"],[4,[38,9],[\"input\",[30,[36,8],[[32,0,[\"debounceUpdateAccentColor\"]]],null]],null],[12],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n\\n                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"slug\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"tag-slug\"],[12],[2,\"Slug\"],[13],[2,\"\\n                    \"],[8,\"gh-text-input\",[],[[\"@value\",\"@id\",\"@name\",\"@tabindex\",\"@focus-out\"],[[32,0,[\"scratchTag\",\"slug\"]],\"tag-slug\",\"slug\",\"2\",[30,[36,0],[[32,0],\"setProperty\",\"slug\",[32,0,[\"scratchTag\",\"slug\"]]],null]]],null],[2,\"\\n                    \"],[8,\"gh-url-preview\",[],[[\"@prefix\",\"@slug\",\"@tagName\",\"@classNames\"],[\"tag\",[32,0,[\"scratchTag\",\"slug\"]],\"p\",\"description\"]],null],[2,\"\\n                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"activeTag\",\"errors\"]],\"slug\"]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                \"],[8,\"gh-form-group\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"no-margin\",[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"description\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"tag-description\"],[12],[2,\"Description\"],[13],[2,\"\\n                    \"],[8,\"gh-textarea\",[],[[\"@id\",\"@name\",\"@class\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"tag-description\",\"description\",\"gh-tag-details-textarea\",\"3\",[32,0,[\"scratchTag\",\"description\"]],[30,[36,0],[[32,0],\"setProperty\",\"description\",[32,0,[\"scratchTag\",\"description\"]]],null]]],null],[2,\"\\n                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],\"description\"]],null],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Maximum: \"],[10,\"b\"],[12],[2,\"500\"],[13],[2,\" characters. You’ve used \"],[1,[30,[36,3],[[32,0,[\"scratchTag\",\"description\"]],500],null]],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"gh-tag-image-uploader no-margin\",[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"featureImage\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"label\"],[14,\"for\",\"tag-image\"],[12],[2,\"Tag image\"],[13],[2,\"\\n                \"],[8,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[32,0,[\"tag\",\"featureImage\"]],\"Upload tag image\",true,[30,[36,0],[[32,0],\"setCoverImage\"],null],[30,[36,0],[[32,0],\"clearCoverImage\"],null]]],null],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"section\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n                \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Meta data\"],[13],[2,\"\\n                \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Extra content for search engines.\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-expand\"],[24,4,\"button\"],[4,[38,0],[[32,0],[30,[36,10],[\"metadataOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,6],[[32,0,[\"metadataOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,11],[[32,0,[\"metadataOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-seo-settings\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-seo-settings-left flex-basis-1-2-m flex-basis-2-3-l\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"metaTitle\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"meta-title\"],[12],[2,\"Meta title\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[],[[\"@id\",\"@name\",\"@placeholder\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"meta-title\",\"metaTitle\",[32,0,[\"scratchTag\",\"name\"]],\"4\",[32,0,[\"scratchTag\",\"metaTitle\"]],[30,[36,0],[[32,0],\"setProperty\",\"metaTitle\",[32,0,[\"scratchTag\",\"metaTitle\"]]],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],\"metaTitle\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Recommended: \"],[10,\"b\"],[12],[2,\"70\"],[13],[2,\" characters. You’ve used \"],[1,[30,[36,3],[[32,0,[\"scratchTag\",\"metaTitle\"]],70],null]],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"metaDescription\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"meta-description\"],[12],[2,\"Meta description\"],[13],[2,\"\\n                            \"],[8,\"gh-textarea\",[],[[\"@id\",\"@name\",\"@class\",\"@placeholder\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"meta-description\",\"metaDescription\",\"gh-tag-details-textarea\",[32,0,[\"scratchTag\",\"description\"]],\"5\",[32,0,[\"scratchTag\",\"metaDescription\"]],[30,[36,0],[[32,0],\"setProperty\",\"metaDescription\",[32,0,[\"scratchTag\",\"metaDescription\"]]],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],\"metaDescription\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Recommended: \"],[10,\"b\"],[12],[2,\"156\"],[13],[2,\" characters. You’ve used \"],[1,[30,[36,3],[[32,0,[\"scratchTag\",\"metaDescription\"]],156],null]],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"canonicalUrl\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"canonical-url\"],[12],[2,\"Canonical URL\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[],[[\"@id\",\"@name\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"canonical-url\",\"canonicalUrl\",\"4\",[32,0,[\"scratchTag\",\"canonicalUrl\"]],[30,[36,0],[[32,0],\"validateCanonicalUrl\"],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],\"canonicalUrl\"]],null],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"flex-basis-1-2-m flex-basis-1-3-l\"],[12],[2,\"\\n                            \"],[10,\"label\"],[12],[2,\"Search Engine Result Preview\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-seo-container\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-seo-preview\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex mb7\"],[12],[2,\"\\n                                        \"],[1,[30,[36,4],[\"google\"],null]],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-seo-search-bar\"],[12],[1,[30,[36,4],[\"google-search\"],null]],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-seo-preview-link\"],[12],[1,[32,0,[\"seoURL\"]]],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-seo-preview-title\"],[12],[1,[32,0,[\"seoTitle\"]]],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-seo-preview-desc\"],[12],[1,[32,0,[\"seoDescription\"]]],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n                \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Twitter card\"],[13],[2,\"\\n                \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Customized structured data for Twitter.\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-expand\"],[24,4,\"button\"],[4,[38,0],[[32,0],[30,[36,10],[\"twitterMetadataOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,6],[[32,0,[\"twitterMetadataOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,11],[[32,0,[\"twitterMetadataOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-twitter-settings\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-twitter-settings-left flex-basis-1-2-m flex-basis-2-3-l\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"gh-tag-image-uploader\",[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"twitterImage\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"twitter-image\"],[12],[2,\"Twitter image\"],[13],[2,\"\\n                            \"],[8,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[32,0,[\"tag\",\"twitterImage\"]],\"Add Twitter image\",true,[30,[36,0],[[32,0],\"setTwitterImage\"],null],[30,[36,0],[[32,0],\"clearTwitterImage\"],null]]],null],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"twitterTitle\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"twitter-title\"],[12],[2,\"Twitter title\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[],[[\"@id\",\"@name\",\"@placeholder\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"twitter-title\",\"twitterTitle\",[32,0,[\"scratchTag\",\"name\"]],\"4\",[32,0,[\"scratchTag\",\"twitterTitle\"]],[30,[36,0],[[32,0],\"setProperty\",\"twitterTitle\",[32,0,[\"scratchTag\",\"twitterTitle\"]]],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],\"twitterTitle\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Recommended: \"],[10,\"b\"],[12],[2,\"70\"],[13],[2,\" characters. You’ve used \"],[1,[30,[36,3],[[32,0,[\"scratchTag\",\"twitterTitle\"]],70],null]],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"twitterDesctiption\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"twitter-description\"],[12],[2,\"Twitter description\"],[13],[2,\"\\n                            \"],[8,\"gh-textarea\",[],[[\"@id\",\"@name\",\"@class\",\"@placeholder\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"twitter-description\",\"twitterDescription\",\"gh-tag-details-textarea\",[32,0,[\"scratchTag\",\"description\"]],\"5\",[32,0,[\"scratchTag\",\"twitterDescription\"]],[30,[36,0],[[32,0],\"setProperty\",\"twitterDescription\",[32,0,[\"scratchTag\",\"twitterDescription\"]]],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],\"twitterDescription\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Recommended: \"],[10,\"b\"],[12],[2,\"125\"],[13],[2,\" characters. You’ve used \"],[1,[30,[36,3],[[32,0,[\"scratchTag\",\"twitterDescription\"]],125],null]],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"flex-basis-1-2-m flex-basis-1-3-l\"],[12],[2,\"\\n                        \"],[10,\"label\"],[12],[2,\"Twitter preview\"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-twitter-container\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex ma4\"],[12],[2,\"\\n                                \"],[10,\"span\"],[12],[1,[30,[36,4],[\"social-twitter\"],[[\"class\"],[\"social-icon\"]]]],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"w-100\"],[12],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"gh-social-og-title\"],[12],[1,[30,[36,5],[[32,0,[\"settings\",\"metaTitle\"]],[32,0,[\"settings\",\"title\"]]],null]],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"gh-social-og-time\"],[12],[2,\"12 hrs\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex flex-column mt2 mb3\"],[12],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-100 mb2\"],[12],[13],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-60\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-social-twitter-post-preview\"],[12],[2,\"\\n\"],[6,[37,6],[[32,0,[\"twitterImage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                            \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-image\"],[15,5,[30,[36,2],[[32,0,[\"twitterImage\"]]],null]],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                        \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-content\"],[12],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-title\"],[12],[1,[32,0,[\"twitterTitle\"]]],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-desc\"],[12],[1,[30,[36,7],[[32,0,[\"twitterDescription\"]]],null]],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-meta\"],[12],[2,\"\\n                                                \"],[1,[30,[36,4],[\"twitter-link\"],null]],[2,\"\\n                                                \"],[1,[32,0,[\"config\",\"blogDomain\"]]],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-social-twitter-reactions\"],[12],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[1,[30,[36,4],[\"twitter-comment\"],null]],[2,\"2\"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[1,[30,[36,4],[\"twitter-retweet\"],null]],[2,\"11\"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[1,[30,[36,4],[\"twitter-like\"],null]],[2,\"32\"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[1,[30,[36,4],[\"twitter-share\"],null]],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n                \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Facebook card\"],[13],[2,\"\\n                \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Customize Open Graph data.\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-expand\"],[24,4,\"button\"],[4,[38,0],[[32,0],[30,[36,10],[\"facebookMetadataOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,6],[[32,0,[\"facebookMetadataOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,11],[[32,0,[\"facebookMetadataOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-og-settings\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-og-settings-left flex-basis-1-2-m flex-basis-2-3-l\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"gh-tag-image-uploader\",[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"ogImage\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"og-image\"],[12],[2,\"Facebook image\"],[13],[2,\"\\n                            \"],[8,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[32,0,[\"tag\",\"ogImage\"]],\"Add Facebook image\",true,[30,[36,0],[[32,0],\"setOgImage\"],null],[30,[36,0],[[32,0],\"clearOgImage\"],null]]],null],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"metaTitle\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"og-title\"],[12],[2,\"Facebook title\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[],[[\"@id\",\"@name\",\"@placeholder\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"og-title\",\"ogTitle\",[32,0,[\"scratchTag\",\"name\"]],\"4\",[32,0,[\"scratchTag\",\"ogTitle\"]],[30,[36,0],[[32,0],\"setProperty\",\"ogTitle\",[32,0,[\"scratchTag\",\"ogTitle\"]]],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],\"ogTitle\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Recommended: \"],[10,\"b\"],[12],[2,\"100\"],[13],[2,\" characters. You’ve used \"],[1,[30,[36,3],[[32,0,[\"scratchTag\",\"ogTitle\"]],100],null]],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"ogDescription\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"og-description\"],[12],[2,\"Facebook description\"],[13],[2,\"\\n                            \"],[8,\"gh-textarea\",[],[[\"@id\",\"@name\",\"@class\",\"@placeholder\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"og-description\",\"ogDescription\",\"gh-tag-details-textarea\",[32,0,[\"scratchTag\",\"description\"]],\"5\",[32,0,[\"scratchTag\",\"ogDescription\"]],[30,[36,0],[[32,0],\"setProperty\",\"ogDescription\",[32,0,[\"scratchTag\",\"ogDescription\"]]],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],\"ogDescription\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Recommended: \"],[10,\"b\"],[12],[2,\"65\"],[13],[2,\" characters. You’ve used \"],[1,[30,[36,3],[[32,0,[\"scratchTag\",\"ogDescription\"]],65],null]],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"flex-basis-1-2-m flex-basis-1-3-l\"],[12],[2,\"\\n                        \"],[10,\"label\"],[12],[2,\"Facebook preview\"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-og-container\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex ma3 mb2\"],[12],[2,\"\\n                                \"],[10,\"span\"],[12],[1,[30,[36,4],[\"social-facebook\"],[[\"class\"],[\"social-icon\"]]]],[13],[2,\"\\n                                \"],[10,\"div\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-social-og-title\"],[12],[1,[30,[36,5],[[32,0,[\"settings\",\"metaTitle\"]],[32,0,[\"settings\",\"title\"]]],null]],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-social-og-time\"],[12],[2,\"12 hrs\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex flex-column ma3 mt2\"],[12],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-100 mb2\"],[12],[13],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-60\"],[12],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-social-og-preview\"],[12],[2,\"\\n\"],[6,[37,6],[[32,0,[\"facebookImage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[10,\"div\"],[14,0,\"gh-social-og-preview-image\"],[15,5,[30,[36,2],[[32,0,[\"facebookImage\"]]],null]],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[10,\"div\"],[14,0,\"gh-social-og-preview-bookmark\"],[12],[2,\"\\n\"],[2,\"                                    \"],[10,\"div\"],[14,0,\"gh-social-og-preview-content\"],[12],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-social-og-preview-meta\"],[12],[2,\"\\n                                            \"],[1,[32,0,[\"config\",\"blogDomain\"]]],[2,\"\\n                                        \"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-social-og-preview-title\"],[12],[1,[30,[36,7],[[32,0,[\"facebookTitle\"]]],null]],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-social-og-preview-desc\"],[12],[1,[30,[36,7],[[32,0,[\"facebookDescription\"]]],null]],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-social-og-reactions\"],[12],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"gh-social-og-likes\"],[12],[1,[30,[36,4],[\"facebook-like\"],[[\"class\"],[\"z-999\"]]]],[1,[30,[36,4],[\"facebook-heart\"],[[\"class\"],[\"nl1\"]]]],[2,\"182\"],[13],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"gh-social-og-comments\"],[12],[2,\"7 comments\"],[13],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"gh-social-og-comments ml2\"],[12],[2,\"2 shares\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n                \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Code injection\"],[13],[2,\"\\n                \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Add styles/scripts to the header and footer.\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-expand\"],[24,4,\"button\"],[4,[38,0],[[32,0],[30,[36,10],[\"codeInjectionOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,6],[[32,0,[\"codeInjectionOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,11],[[32,0,[\"codeInjectionOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n                \"],[8,\"gh-form-group\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"gh-main-section-block settings-code\",[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"codeinjectionHead\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"codeinjection-head\"],[14,0,\"gh-tag-setting-codeheader\"],[12],[2,\"Tag header \"],[10,\"code\"],[14,0,\"fw4 ml1\"],[12],[2,\"{{ghost_head}}\"],[13],[13],[2,\"\\n                    \"],[8,\"gh-cm-editor\",[],[[\"@value\",\"@id\",\"@class\",\"@name\",\"@focusOut\",\"@stopEnterKeyDownPropagation\",\"@update\"],[[32,0,[\"scratchTag\",\"codeinjectionHead\"]],\"tag-setting-codeinjection-head\",\"gh-tag-setting-codeinjection\",\"tag-setting-codeinjection-head\",[30,[36,0],[[32,0],\"setProperty\",\"codeinjectionHead\",[32,0,[\"scratchTag\",\"codeinjectionHead\"]]],null],\"true\",[30,[36,0],[[32,0],[30,[36,1],[[32,0,[\"scratchTag\",\"codeinjectionHead\"]]],null]],null]]],null],[2,\"\\n                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],\"codeinjectionHead\"]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                \"],[8,\"gh-form-group\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"gh-main-section-block settings-code\",[32,0,[\"tag\",\"errors\"]],[32,0,[\"tag\",\"hasValidated\"]],\"codeinjectionFoot\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"codeinjection-foot\"],[14,0,\"gh-tag-setting-codeheader\"],[12],[2,\"Tag footer \"],[10,\"code\"],[14,0,\"fw4 ml1\"],[12],[2,\"{{ghost_foot}}\"],[13],[13],[2,\"\\n                    \"],[8,\"gh-cm-editor\",[],[[\"@value\",\"@id\",\"@class\",\"@name\",\"@focusOut\",\"@stopEnterKeyDownPropagation\",\"@update\"],[[32,0,[\"scratchTag\",\"codeinjectionFoot\"]],\"tag-setting-codeinjection-foot\",\"gh-tag-setting-codeinjection\",\"tag-setting-codeinjection-foot\",[30,[36,0],[[32,0],\"setProperty\",\"codeinjectionFoot\",[32,0,[\"scratchTag\",\"codeinjectionFoot\"]]],null],\"true\",[30,[36,0],[[32,0],[30,[36,1],[[32,0,[\"scratchTag\",\"codeinjectionFoot\"]]],null]],null]]],null],[2,\"\\n                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"tag\",\"errors\"]],\"codeinjectionFoot\"]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"action\",\"mut\",\"background-image-style\",\"gh-count-down-characters\",\"svg-jar\",\"or\",\"if\",\"truncate\",\"perform\",\"on\",\"toggle\",\"liquid-if\"]}",
    "moduleName": "ghost-admin/components/gh-tag-settings-form.hbs"
  });

  const {
    Handlebars
  } = Ember;

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    feature: Ember.inject.service(),
    config: Ember.inject.service(),
    settings: Ember.inject.service(),
    tag: null,
    scratchTag: null,
    // Allowed actions
    setProperty: () => {},
    twitterTitle: Ember.computed.or('scratchTag.twitterTitle', 'seoTitle'),
    twitterDescription: Ember.computed.or('scratchTag.twitterDescription', 'seoDescription', 'settings.metaDescription', ''),
    twitterImage: Ember.computed.or('tag.twitterImage', 'tag.featureImage'),
    facebookTitle: Ember.computed.or('scratchTag.ogTitle', 'seoTitle'),
    facebookDescription: Ember.computed.or('scratchTag.ogDescription', 'seoDescription', 'settings.metaDescription', ''),
    facebookImage: Ember.computed.or('tag.ogImage', 'tag.featureImage'),
    accentColor: Ember.computed('tag.accentColor', function () {
      let color = this.get('tag.accentColor');

      if (color && color[0] === '#') {
        return color.slice(1);
      }

      return color;
    }),
    accentColorPickerValue: Ember.computed('tag.accentColor', function () {
      return this.tag.get('accentColor') || '#ffffff';
    }),
    accentColorBgStyle: Ember.computed('accentColorPickerValue', function () {
      return Ember.String.htmlSafe(`background-color: ${this.accentColorPickerValue}`);
    }),
    title: Ember.computed('tag.isNew', function () {
      if (this.get('tag.isNew')) {
        return 'New tag';
      } else {
        return 'Tag settings';
      }
    }),
    seoTitle: Ember.computed('scratchTag.{name,metaTitle}', function () {
      const settingsTitle = this.get('settings.title') || '';
      const tagName = settingsTitle ? `${this.scratchTag.name} - ${settingsTitle}` : this.scratchTag.name;
      let metaTitle = this.scratchTag.metaTitle || tagName;

      if (metaTitle && metaTitle.length > 70) {
        metaTitle = metaTitle.substring(0, 70).trim();
        metaTitle = Handlebars.Utils.escapeExpression(metaTitle);
        metaTitle = Ember.String.htmlSafe(`${metaTitle}&hellip;`);
      }

      return metaTitle;
    }),
    seoURL: Ember.computed('scratchTag.{canonicalUrl,slug}', function () {
      let blogUrl = this.get('config.blogUrl');
      let seoSlug = this.scratchTag.slug || '';
      let seoURL = this.scratchTag.canonicalUrl || `${blogUrl}/tag/${seoSlug}`; // only append a slash to the URL if the slug exists

      if (!seoURL.endsWith('/')) {
        seoURL += '/';
      }

      if (seoURL.length > 70) {
        seoURL = seoURL.substring(0, 70).trim();
        seoURL = Handlebars.Utils.escapeExpression(seoURL);
        seoURL = Ember.String.htmlSafe(`${seoURL}&hellip;`);
      }

      return seoURL;
    }),
    seoDescription: Ember.computed('scratchTag.{description,metaDescription}', function () {
      let metaDescription = this.scratchTag.metaDescription || '';
      metaDescription = metaDescription.length > 0 ? metaDescription : this.scratchTag.description;

      if (metaDescription && metaDescription.length > 156) {
        metaDescription = metaDescription.substring(0, 156).trim();
        metaDescription = Handlebars.Utils.escapeExpression(metaDescription);
        metaDescription = Ember.String.htmlSafe(`${metaDescription}&hellip;`);
      }

      return metaDescription;
    }),
    actions: {
      setProperty(property, value) {
        this.setProperty(property, value);
      },

      setTwitterImage(image) {
        this.setProperty('twitterImage', image);
      },

      clearTwitterImage() {
        this.setProperty('twitterImage', '');
      },

      setOgImage(image) {
        this.setProperty('ogImage', image);
      },

      clearOgImage() {
        this.setProperty('ogImage', '');
      },

      setCoverImage(image) {
        this.setProperty('featureImage', image);
      },

      clearCoverImage() {
        this.setProperty('featureImage', '');
      },

      validateCanonicalUrl() {
        let newUrl = this.get('scratchTag.canonicalUrl');
        let oldUrl = this.get('tag.canonicalUrl');
        let errMessage = '';
        this.get('tag.errors').remove('canonicalUrl');
        this.get('tag.hasValidated').removeObject('canonicalUrl');

        if (newUrl === '') {
          this.setProperty('canonicalUrl', '');
          return;
        }

        if (!newUrl) {
          newUrl = oldUrl;
        }

        try {
          new URL(newUrl);
          this.setProperty('canonicalUrl', '');
          Ember.run.schedule('afterRender', this, function () {
            this.setProperty('canonicalUrl', newUrl);
          });
        } catch (err) {
          errMessage = 'The url should be a valid url';
          this.get('tag.errors').add('canonicalUrl', errMessage);
          this.get('tag.hasValidated').pushObject('canonicalUrl');
        }
      }

    },
    updateAccentColor: Ember._action(async function (event) {
      let newColor = event.target.value;
      const oldColor = this.tag.get('accentColor'); // reset errors and validation

      this.tag.errors.remove('accentColor');
      this.tag.hasValidated.removeObject('accentColor');

      if (newColor === '') {
        if (newColor === oldColor) {
          return;
        } // clear out the accent color


        this.tag.set('accentColor', '');
        return;
      } // accentColor will be null unless the user has input something


      if (!newColor) {
        newColor = oldColor;
      }

      if (newColor[0] !== '#') {
        newColor = `#${newColor}`;
      }

      if (newColor.match(/#[0-9A-Fa-f]{6}$/)) {
        if (newColor === oldColor) {
          return;
        }

        this.tag.set('accentColor', newColor);
        this.scratchTag.set('accentColor', newColor);
      } else {
        this.tag.errors.add('accentColor', 'The colour should be in valid hex format');
        this.tag.hasValidated.pushObject('accentColor');
      }
    }),
    debounceUpdateAccentColor: (0, _emberConcurrency.task)(function* (event) {
      yield (0, _emberConcurrency.timeout)(10);
      this.updateAccentColor(event);
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-tags-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <li class="gh-list-row gh-tags-list-item" ...attributes>
      <LinkTo @route="tag" @model={{@tag}} class="gh-list-data gh-tag-list-title gh-list-cellwidth-70" @title="Edit tag">
          <h3 class="gh-tag-list-name">
              {{@tag.name}}
          </h3>
          {{#if @tag.description}}
              <p class="ma0 pa0 f8 midgrey gh-tag-list-description">
                  {{@tag.description}}
              </p>
          {{/if}}
      </LinkTo>
  
      <LinkTo @route="tag" @model={{@tag}} class="gh-list-data middarkgrey f8 gh-tag-list-slug gh-list-cellwidth-10" @title="Edit tag">
          <span title="{{@slug}}">{{@slug}}</span>
      </LinkTo>
  
      {{#if @tag.count.posts}}
          <LinkTo @route="posts" @query={{hash type=null author=null tag=@tag.slug order=null}} class="gh-list-data gh-tag-list-posts-count gh-list-cellwidth-10 f8" @title={{concat "List posts tagged with '" @tag.name "'"}}>
              <span class="nowrap">{{gh-pluralize @tag.count.posts "post"}}</span>
          </LinkTo>
      {{else}}
          <LinkTo @route="tag" @model={{@tag}} class="gh-list-data gh-tag-list-posts-count gh-list-cellwidth-10" @title="Edit tag">
              <span class="nowrap f8 midlightgrey">{{gh-pluralize @tag.count.posts "post"}}</span>
          </LinkTo>
      {{/if}}
  
      <LinkTo @route="tag" @model={{@tag}} class="gh-list-data gh-list-cellwidth-10 gh-list-chevron" @title="Edit tag">
          <div class="flex items-center justify-end w-100 h-100">
              <span class="nr2">{{svg-jar "arrow-right" class="w6 h6 fill-midgrey pa1"}}</span>
          </div>
      </LinkTo>
  </li>
  */
  {
    "id": "exHxovKX",
    "block": "{\"symbols\":[\"@tag\",\"&attrs\",\"@slug\"],\"statements\":[[11,\"li\"],[24,0,\"gh-list-row gh-tags-list-item\"],[17,2],[12],[2,\"\\n    \"],[8,\"link-to\",[[24,0,\"gh-list-data gh-tag-list-title gh-list-cellwidth-70\"]],[[\"@route\",\"@model\",\"@title\"],[\"tag\",[32,1],\"Edit tag\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h3\"],[14,0,\"gh-tag-list-name\"],[12],[2,\"\\n            \"],[1,[32,1,[\"name\"]]],[2,\"\\n        \"],[13],[2,\"\\n\"],[6,[37,3],[[32,1,[\"description\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"p\"],[14,0,\"ma0 pa0 f8 midgrey gh-tag-list-description\"],[12],[2,\"\\n                \"],[1,[32,1,[\"description\"]]],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[8,\"link-to\",[[24,0,\"gh-list-data middarkgrey f8 gh-tag-list-slug gh-list-cellwidth-10\"]],[[\"@route\",\"@model\",\"@title\"],[\"tag\",[32,1],\"Edit tag\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"span\"],[15,\"title\",[31,[[32,3]]]],[12],[1,[32,3]],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,3],[[32,1,[\"count\",\"posts\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[8,\"link-to\",[[24,0,\"gh-list-data gh-tag-list-posts-count gh-list-cellwidth-10 f8\"]],[[\"@route\",\"@query\",\"@title\"],[\"posts\",[30,[36,1],null,[[\"type\",\"author\",\"tag\",\"order\"],[null,null,[32,1,[\"slug\"]],null]]],[30,[36,2],[\"List posts tagged with '\",[32,1,[\"name\"]],\"'\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"span\"],[14,0,\"nowrap\"],[12],[1,[30,[36,0],[[32,1,[\"count\",\"posts\"]],\"post\"],null]],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[8,\"link-to\",[[24,0,\"gh-list-data gh-tag-list-posts-count gh-list-cellwidth-10\"]],[[\"@route\",\"@model\",\"@title\"],[\"tag\",[32,1],\"Edit tag\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"span\"],[14,0,\"nowrap f8 midlightgrey\"],[12],[1,[30,[36,0],[[32,1,[\"count\",\"posts\"]],\"post\"],null]],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[8,\"link-to\",[[24,0,\"gh-list-data gh-list-cellwidth-10 gh-list-chevron\"]],[[\"@route\",\"@model\",\"@title\"],[\"tag\",[32,1],\"Edit tag\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[14,0,\"flex items-center justify-end w-100 h-100\"],[12],[2,\"\\n            \"],[10,\"span\"],[14,0,\"nr2\"],[12],[1,[30,[36,4],[\"arrow-right\"],[[\"class\"],[\"w6 h6 fill-midgrey pa1\"]]]],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"gh-pluralize\",\"hash\",\"concat\",\"if\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/gh-tags-list-item.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-task-button", ["exports", "ghost-admin/config/environment", "ember-concurrency"], function (_exports, _environment, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if (has-block)}}
      {{yield (hash
          isIdle=this.isIdle
          isRunning=this.isRunning
          isSuccess=this.isSuccess
          isFailure=this.isFailure
      )}}
  {{else}}
      {{#if this.isRunning}}<span>{{svg-jar "spinner" class="gh-icon-spinner"}}{{this.runningText}}</span>{{/if}}
      {{#if this.isIdle}}<span>{{this.buttonText}}</span>{{/if}}
      {{#if this.isSuccess}}<span {{did-insert this.handleReset}}>{{svg-jar "check-circle"}} {{this.successText}}</span>{{/if}}
      {{#if this.isFailure}}<span>{{svg-jar "retry"}} {{this.failureText}}</span>{{/if}}
  {{/if}}
  
  */
  {
    "id": "GRKJ4EQX",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[6,[37,2],[[27,[32,1]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[18,1,[[30,[36,3],null,[[\"isIdle\",\"isRunning\",\"isSuccess\",\"isFailure\"],[[32,0,[\"isIdle\"]],[32,0,[\"isRunning\"]],[32,0,[\"isSuccess\"]],[32,0,[\"isFailure\"]]]]]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[6,[37,2],[[32,0,[\"isRunning\"]]],null,[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[1,[30,[36,0],[\"spinner\"],[[\"class\"],[\"gh-icon-spinner\"]]]],[1,[32,0,[\"runningText\"]]],[13]],\"parameters\":[]}]]],[2,\"\\n    \"],[6,[37,2],[[32,0,[\"isIdle\"]]],null,[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[1,[32,0,[\"buttonText\"]]],[13]],\"parameters\":[]}]]],[2,\"\\n    \"],[6,[37,2],[[32,0,[\"isSuccess\"]]],null,[[\"default\"],[{\"statements\":[[11,\"span\"],[4,[38,1],[[32,0,[\"handleReset\"]]],null],[12],[1,[30,[36,0],[\"check-circle\"],null]],[2,\" \"],[1,[32,0,[\"successText\"]]],[13]],\"parameters\":[]}]]],[2,\"\\n    \"],[6,[37,2],[[32,0,[\"isFailure\"]]],null,[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[1,[30,[36,0],[\"retry\"],null]],[2,\" \"],[1,[32,0,[\"failureText\"]]],[13]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"did-insert\",\"if\",\"hash\"]}",
    "moduleName": "ghost-admin/components/gh-task-button.hbs"
  });

  /**
   * Task Button works exactly like Spin button, but with one major difference:
   *
   * Instead of passing a "submitting" parameter (which is bound to the parent object),
   * you pass an ember-concurrency task. All of the "submitting" behavior is handled automatically.
   *
   * As another bonus, there's no need to handle canceling the promises when something
   * like a controller changes. Because the only task running is handled through this
   * component, all running promises will automatically be cancelled when this
   * component is removed from the DOM
   */
  const GhTaskButton = Ember.Component.extend({
    tagName: 'button',
    classNameBindings: ['isRunning:appear-disabled', 'isIdleClass', 'isRunningClass', 'isSuccessClass', 'isFailureClass'],
    attributeBindings: ['disabled', 'form', 'type', 'tabindex', 'data-test-button'],
    task: null,
    taskArgs: undefined,
    disabled: false,
    defaultClick: false,
    buttonText: 'Save',
    idleClass: '',
    runningClass: '',
    showSuccess: true,
    // set to false if you want the spinner to show until a transition occurs
    autoReset: true,
    // set to false if you want don't want task button to reset after timeout
    successText: 'Saved',
    successClass: 'gh-btn-green',
    failureText: 'Retry',
    failureClass: 'gh-btn-red',
    unlinkedTask: false,
    isTesting: undefined,
    // Allowed actions
    action: () => {},
    runningText: Ember.computed.reads('buttonText'),
    // hasRun is needed so that a newly rendered button does not show the last
    // state of the associated task
    hasRun: Ember.computed('task.performCount', function () {
      return this.get('task.performCount') > this._initialPerformCount;
    }),
    isIdleClass: Ember.computed('isIdle', function () {
      return this.isIdle ? this.idleClass : '';
    }),
    isRunning: Ember.computed('task.last.isRunning', 'hasRun', 'showSuccess', function () {
      let taskName = this.get('task.name');
      let lastTaskName = this.get('task.last.task.name');
      let isRunning = taskName === lastTaskName && this.get('task.last.isRunning');

      if (this.hasRun && taskName === lastTaskName && this.get('task.last.value') && !this.showSuccess) {
        isRunning = true;
      }

      return isRunning;
    }),
    isRunningClass: Ember.computed('isRunning', function () {
      return this.isRunning ? this.runningClass || this.idleClass : '';
    }),
    isSuccess: Ember.computed('hasRun', 'isRunning', 'task.last.value', function () {
      let taskName = this.get('task.name');
      let lastTaskName = this.get('task.last.task.name');

      if (!this.hasRun || this.isRunning || !this.showSuccess) {
        return false;
      }

      let value = this.get('task.last.value');
      return taskName === lastTaskName && !Ember.isBlank(value) && value !== false;
    }),
    isSuccessClass: Ember.computed('isSuccess', function () {
      return this.isSuccess ? this.successClass : '';
    }),
    isFailure: Ember.computed('hasRun', 'isRunning', 'isSuccess', 'task.last.error', function () {
      let taskName = this.get('task.name');
      let lastTaskName = this.get('task.last.task.name');

      if (!this.hasRun || this.isRunning || this.isSuccess) {
        return false;
      }

      return taskName === lastTaskName && this.get('task.last.error') !== undefined;
    }),
    isFailureClass: Ember.computed('isFailure', function () {
      return this.isFailure ? this.failureClass : '';
    }),
    isIdle: Ember.computed('isRunning', 'isSuccess', 'isFailure', function () {
      return !this.isRunning && !this.isSuccess && !this.isFailure;
    }),

    init() {
      this._super(...arguments);

      this._initialPerformCount = this.get('task.performCount');

      if (this.isTesting === undefined) {
        this.isTesting = _environment.default.environment === 'test';
      }
    },

    click() {
      // let the default click bubble if defaultClick===true - useful when
      // you want to handle a form submit action rather than triggering a
      // task directly
      if (this.defaultClick) {
        if (!this.isRunning) {
          this._restartAnimation.perform();
        }

        return;
      } // do nothing if disabled externally


      if (this.disabled) {
        return false;
      }

      let taskName = this.get('task.name');
      let lastTaskName = this.get('task.last.task.name'); // task-buttons are never disabled whilst running so that clicks when a
      // taskGroup is running don't get dropped BUT that means we need to check
      // here to avoid spamming actions from multiple clicks

      if (this.isRunning && taskName === lastTaskName) {
        return;
      }

      this.action();

      this._handleMainTask.perform();

      this._restartAnimation.perform(); // prevent the click from bubbling and triggering form actions


      return false;
    },

    // mouseDown can be prevented, this is useful for situations where we want
    // to avoid on-blur events triggering before the button click
    mouseDown(event) {
      if (this.disableMouseDown) {
        event.preventDefault();
      }
    },

    handleReset: Ember._action(function () {
      const isTaskSuccess = this.get('task.last.isSuccessful') && this.get('task.last.value');

      if (this.autoReset && this.showSuccess && isTaskSuccess) {
        this._resetButtonState.perform();
      }
    }),
    // when local validation fails there's no transition from failed->running
    // so we want to restart the retry spinner animation to show something
    // has happened when the button is clicked
    _restartAnimation: (0, _emberConcurrency.task)(function* () {
      let elem = this.element.querySelector('.retry-animated');

      if (elem) {
        elem.classList.remove('retry-animated');
        yield (0, _emberConcurrency.timeout)(10);
        elem.classList.add('retry-animated');
      }
    }),
    _handleMainTask: (0, _emberConcurrency.task)(function* () {
      this._resetButtonState.cancelAll(); // if the task button will be removed by the result of the task then
      // it needs to be marked as unlinked to ensure it runs to completion
      // and ember-concurrency doesn't output self-cancel warnings


      if (this.unlinkedTask) {
        yield this.task.unlinked().perform(this.taskArgs);
      } else {
        yield this.task.perform(this.taskArgs);
      }

      const isTaskSuccess = this.get('task.last.isSuccessful') && this.get('task.last.value');

      if (this.autoReset && this.showSuccess && isTaskSuccess) {
        this._resetButtonState.perform();
      }
    }),
    _resetButtonState: (0, _emberConcurrency.task)(function* () {
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 2500);

      if (!this.get('task.last.isRunning')) {
        // Reset last task to bring button back to idle state
        yield this.set('task.last', null);
      }
    }).restartable()
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhTaskButton);

  _exports.default = _default;
});
;define("ghost-admin/components/gh-text-input", ["exports", "ghost-admin/mixins/text-input"], function (_exports, _textInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{yield}}
  */
  {
    "id": "k2qc+kUV",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[18,1,null]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-text-input.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.TextField.extend(_textInput.default, {
    classNames: 'gh-input'
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-textarea", ["exports", "ghost-admin/mixins/text-input"], function (_exports, _textInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.TextArea.extend(_textInput.default, {
    resizeDetector: Ember.inject.service(),
    classNames: 'gh-input',
    autoExpand: false,

    didReceiveAttrs() {
      this._super(...arguments); // trigger auto-expand any time the value changes


      if (this.autoExpand) {
        Ember.run.scheduleOnce('afterRender', this, this._autoExpand);
      }
    },

    willInsertElement() {
      this._super(...arguments); // disable the draggable resize element that browsers add to textareas


      if (this.autoExpand) {
        this.element.style.resize = 'none';
      }
    },

    didInsertElement() {
      this._super(...arguments); // set up resize handler on element insert so that we can autoexpand
      // when the element container changes size


      if (this.autoExpand) {
        Ember.run.scheduleOnce('afterRender', this, this._setupAutoExpand);
      }

      if (this.didCreateTextarea) {
        this.didCreateTextarea(this.element);
      }
    },

    willDestroyElement() {
      this._teardownAutoExpand();

      this._super(...arguments);
    },

    _autoExpand() {
      let el = this.element; // collapse the element first so that we can shrink as well as expand
      // then set the height to match the text height

      if (el) {
        el.style.height = 0;
        el.style.height = `${el.scrollHeight}px`;
      }
    },

    _setupAutoExpand() {
      this._resizeCallback = Ember.run.bind(this, this._onResize);
      this.resizeDetector.setup(this.autoExpand, this._resizeCallback);

      this._autoExpand();
    },

    _onResize() {
      this._autoExpand();
    },

    _teardownAutoExpand() {
      this.resizeDetector.teardown(this.autoExpand, this._resizeCallback);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-theme-error-li", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <a href="" class="theme-validation-toggle-details" {{action "toggleDetails"}} data-test-toggle-details>
      <div class="theme-validation-type-label"></div>
      <div class="flex items-center flex-auto">
          <h4 class="theme-validation-rule-text">
              {{{this.error.rule}}}
          </h4>
          <div class="theme-validation-rule-icon">
              {{#if this.showDetails}}
                  {{svg-jar "arrow-down"}}
              {{else}}
                  {{svg-jar "arrow-right"}}
              {{/if}}
          </div>
      </div>
  </a>
  
  {{#if this.showDetails}}
      <p class="theme-validation-details">
          {{{this.error.details}}}
      </p>
      {{#if this.error.failures}}
          <div class="theme-validation-list">
              <h6>Affected files:</h6>
              <ul>
                  {{#each this.error.failures as |failure|}}
                      <li><code>{{failure.ref}}</code>{{#if failure.message}}: {{failure.message}}{{/if}}</li>
                  {{/each}}
              </ul>
          </div>
      {{/if}}
  {{/if}}
  
  */
  {
    "id": "qA4TcBbQ",
    "block": "{\"symbols\":[\"failure\"],\"statements\":[[11,\"a\"],[24,6,\"\"],[24,0,\"theme-validation-toggle-details\"],[24,\"data-test-toggle-details\",\"\"],[4,[38,4],[[32,0],\"toggleDetails\"],null],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"theme-validation-type-label\"],[12],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"flex items-center flex-auto\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"theme-validation-rule-text\"],[12],[2,\"\\n            \"],[2,[32,0,[\"error\",\"rule\"]]],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"theme-validation-rule-icon\"],[12],[2,\"\\n\"],[6,[37,0],[[32,0,[\"showDetails\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[1,[30,[36,3],[\"arrow-down\"],null]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[1,[30,[36,3],[\"arrow-right\"],null]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,0],[[32,0,[\"showDetails\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"p\"],[14,0,\"theme-validation-details\"],[12],[2,\"\\n        \"],[2,[32,0,[\"error\",\"details\"]]],[2,\"\\n    \"],[13],[2,\"\\n\"],[6,[37,0],[[32,0,[\"error\",\"failures\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"theme-validation-list\"],[12],[2,\"\\n            \"],[10,\"h6\"],[12],[2,\"Affected files:\"],[13],[2,\"\\n            \"],[10,\"ul\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,1],[[30,[36,1],[[32,0,[\"error\",\"failures\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"li\"],[12],[10,\"code\"],[12],[1,[32,1,[\"ref\"]]],[13],[6,[37,0],[[32,1,[\"message\"]]],null,[[\"default\"],[{\"statements\":[[2,\": \"],[1,[32,1,[\"message\"]]]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"if\",\"-track-array\",\"each\",\"svg-jar\",\"action\"]}",
    "moduleName": "ghost-admin/components/gh-theme-error-li.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    tagName: '',
    error: null,
    showDetails: false,
    actions: {
      toggleDetails() {
        this.toggleProperty('showDetails');
      }

    }
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-theme-table", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="apps-grid" data-test-themes-list>
      {{#each this.sortedThemes as |theme index|}}
          <div class="apps-grid-cell" data-test-theme-id="{{theme.name}}" data-test-theme-active="{{theme.active}}">
              <div class="apps-card-app {{if theme.active "theme-list-item--active"}}">
                  <div class="apps-card-meta flex-grow-1">
                      <h3 class="apps-card-app-title" data-test-theme-title>
                          {{theme.label}}
                          {{#if theme.active}}<span class="gh-badge gh-badge-green">Active</span>{{/if}}
                      </h3>
                      <p class="apps-card-app-desc" data-test-theme-description><span class="description">Version {{theme.version}}</span></p>
                  </div>
                  {{#unless theme.active}}
                      <button type="button" {{on "click" (fn this.activateTheme theme.model dd)}} class="apps-configured-action darkgrey apps-configured-action-activate green-hover green-bg-hover" data-test-button="activate">Activate</button>
                  {{/unless}}
                  <GhBasicDropdown @verticalPosition="below" @horizontalPosition="right" @buttonPosition="right" as |dd|>
                      <dd.Trigger class="gh-btn gh-btn-icon" data-test-button="actions"><span>{{svg-jar "dotdotdot"}}</span></dd.Trigger>
  
                      <dd.Content class="relative-dropdown-menu">
                          <ul class="dropdown-menu" data-test-actions-for={{theme.name}}>
  
                              <li><button type="button" {{on "click" (fn this.downloadTheme theme.name dd)}} class="darkgrey darkgrey-hover lightgrey-bg-hover" data-test-button="download">Download</button></li>
  
                              {{#if theme.isDeletable}}
                                  <li><button type="button" {{on "click" (fn this.deleteTheme theme.model dd)}} disabled={{theme.active}} class="gh-list-delete" data-test-button="delete">Delete</button></li>
                              {{/if}}
                          </ul>
                      </dd.Content>
                  </GhBasicDropdown>
              </div>
          </div>
      {{/each}}
  </div>
  
  */
  {
    "id": "vRSY9H6O",
    "block": "{\"symbols\":[\"theme\",\"index\",\"dd\"],\"statements\":[[10,\"div\"],[14,0,\"apps-grid\"],[14,\"data-test-themes-list\",\"\"],[12],[2,\"\\n\"],[6,[37,7],[[30,[36,6],[[30,[36,6],[[32,0,[\"sortedThemes\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[15,\"data-test-theme-id\",[31,[[32,1,[\"name\"]]]]],[15,\"data-test-theme-active\",[31,[[32,1,[\"active\"]]]]],[12],[2,\"\\n            \"],[10,\"div\"],[15,0,[31,[\"apps-card-app \",[30,[36,3],[[32,1,[\"active\"]],\"theme-list-item--active\"],null]]]],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"apps-card-meta flex-grow-1\"],[12],[2,\"\\n                    \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[14,\"data-test-theme-title\",\"\"],[12],[2,\"\\n                        \"],[1,[32,1,[\"label\"]]],[2,\"\\n                        \"],[6,[37,3],[[32,1,[\"active\"]]],null,[[\"default\"],[{\"statements\":[[10,\"span\"],[14,0,\"gh-badge gh-badge-green\"],[12],[2,\"Active\"],[13]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"apps-card-app-desc\"],[14,\"data-test-theme-description\",\"\"],[12],[10,\"span\"],[14,0,\"description\"],[12],[2,\"Version \"],[1,[32,1,[\"version\"]]],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n\"],[6,[37,4],[[32,1,[\"active\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"apps-configured-action darkgrey apps-configured-action-activate green-hover green-bg-hover\"],[24,\"data-test-button\",\"activate\"],[24,4,\"button\"],[4,[38,1],[\"click\",[30,[36,0],[[32,0,[\"activateTheme\"]],[32,1,[\"model\"]],[35,2]],null]],null],[12],[2,\"Activate\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[8,\"gh-basic-dropdown\",[],[[\"@verticalPosition\",\"@horizontalPosition\",\"@buttonPosition\"],[\"below\",\"right\",\"right\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[8,[32,3,[\"Trigger\"]],[[24,0,\"gh-btn gh-btn-icon\"],[24,\"data-test-button\",\"actions\"]],[[],[]],[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[1,[30,[36,5],[\"dotdotdot\"],null]],[13]],\"parameters\":[]}]]],[2,\"\\n\\n                    \"],[8,[32,3,[\"Content\"]],[[24,0,\"relative-dropdown-menu\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"ul\"],[14,0,\"dropdown-menu\"],[15,\"data-test-actions-for\",[32,1,[\"name\"]]],[12],[2,\"\\n\\n                            \"],[10,\"li\"],[12],[11,\"button\"],[24,0,\"darkgrey darkgrey-hover lightgrey-bg-hover\"],[24,\"data-test-button\",\"download\"],[24,4,\"button\"],[4,[38,1],[\"click\",[30,[36,0],[[32,0,[\"downloadTheme\"]],[32,1,[\"name\"]],[32,3]],null]],null],[12],[2,\"Download\"],[13],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,1,[\"isDeletable\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"li\"],[12],[11,\"button\"],[16,\"disabled\",[32,1,[\"active\"]]],[24,0,\"gh-list-delete\"],[24,\"data-test-button\",\"delete\"],[24,4,\"button\"],[4,[38,1],[\"click\",[30,[36,0],[[32,0,[\"deleteTheme\"]],[32,1,[\"model\"]],[32,3]],null]],null],[12],[2,\"Delete\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"]],\"parameters\":[3]}]]],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[1,2]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"fn\",\"on\",\"dd\",\"if\",\"unless\",\"svg-jar\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/gh-theme-table.hbs"
  });

  let GhThemeTableComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember._action, _dec6 = Ember._action, _dec7 = Ember._action, (_class = class GhThemeTableComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ghostPaths", _descriptor, this);

      _initializerDefineProperty(this, "modals", _descriptor2, this);

      _initializerDefineProperty(this, "themeManagement", _descriptor3, this);

      _initializerDefineProperty(this, "utils", _descriptor4, this);

      _defineProperty(this, "activateTaskInstance", null);

      _defineProperty(this, "confirmDeleteModal", null);
    }

    willDestroy() {
      super.willDestroy(...arguments);
      this.confirmDeleteModal?.close?.();
      this.activateTaskInstance?.cancel();
    }

    get sortedThemes() {
      let themes = this.args.themes.map(t => {
        let theme = {};
        let themePackage = Ember.get(t, 'package');
        theme.model = t;
        theme.name = Ember.get(t, 'name');
        theme.label = themePackage ? `${themePackage.name}` : theme.name;
        theme.version = themePackage ? `${themePackage.version}` : '1.0';
        theme.package = themePackage;
        theme.active = Ember.get(t, 'active');
        theme.isDeletable = !theme.active;
        return theme;
      });
      let duplicateThemes = [];
      themes.forEach(theme => {
        let duplicateLabels = themes.filterBy('label', theme.label);

        if (duplicateLabels.length > 1) {
          duplicateThemes.pushObject(theme);
        }
      });
      duplicateThemes.forEach(theme => {
        if (theme.name !== 'casper') {
          theme.label = `${theme.label} (${theme.name})`;
        }
      }); // "(default)" needs to be added to casper manually as it's always
      // displayed and would mess up the duplicate checking if added earlier

      let casper = themes.findBy('name', 'casper');

      if (casper) {
        casper.label = `${casper.label} (default)`;
        casper.isDefault = true;
        casper.isDeletable = false;
      } // sorting manually because .sortBy('label') has a different sorting
      // algorithm to [...strings].sort()


      return themes.sort((themeA, themeB) => {
        let a = themeA.label.toLowerCase();
        let b = themeB.label.toLowerCase();

        if (a < b) {
          return -1;
        }

        if (a > b) {
          return 1;
        }

        return 0;
      });
    }

    downloadTheme(themeName, dropdown) {
      dropdown?.actions.close();
      this.utils.downloadFile(`${this.ghostPaths.apiRoot}/themes/${themeName}/download/`);
    }

    activateTheme(theme, dropdown) {
      dropdown?.actions.close();
      this.activateTaskInstance = this.themeManagement.activateTask.perform(theme);
    }

    deleteTheme(theme, dropdown) {
      dropdown?.actions.close();
      this.confirmDeleteModal = this.modals.open('modals/design/confirm-delete-theme', {
        theme
      }).finally(() => {
        this.confirmDeleteModal = null;
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "modals", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "themeManagement", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "utils", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "downloadTheme", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "downloadTheme"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "activateTheme", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "activateTheme"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "deleteTheme", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "deleteTheme"), _class.prototype)), _class));
  _exports.default = GhThemeTableComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhThemeTableComponent);
});
;define("ghost-admin/components/gh-timezone-select", ["exports", "moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <span class="gh-select" data-select-text="{{this.selectedTimezone.label}}" tabindex="0">
      <OneWaySelect
          @id="timezone"
          @name="general[timezone]"
          @options={{this.selectableTimezones}}
          @optionValuePath="name"
          @optionLabelPath="label"
          @value={{this.selectedTimezone}}
          @update={{action "setTimezone"}}
      />
      {{svg-jar "arrow-down-small"}}
  </span>
  {{#if this.hasTimezoneOverride}}
      <p>Your timezone has been automatically set to {{this.timezone}}.</p>
  {{/if}}
  <p>The local time here is currently {{this.localTime}}</p>
  
  */
  {
    "id": "aoQ098/g",
    "block": "{\"symbols\":[],\"statements\":[[10,\"span\"],[14,0,\"gh-select\"],[15,\"data-select-text\",[31,[[32,0,[\"selectedTimezone\",\"label\"]]]]],[14,\"tabindex\",\"0\"],[12],[2,\"\\n    \"],[8,\"one-way-select\",[],[[\"@id\",\"@name\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@value\",\"@update\"],[\"timezone\",\"general[timezone]\",[32,0,[\"selectableTimezones\"]],\"name\",\"label\",[32,0,[\"selectedTimezone\"]],[30,[36,0],[[32,0],\"setTimezone\"],null]]],null],[2,\"\\n    \"],[1,[30,[36,1],[\"arrow-down-small\"],null]],[2,\"\\n\"],[13],[2,\"\\n\"],[6,[37,2],[[32,0,[\"hasTimezoneOverride\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"p\"],[12],[2,\"Your timezone has been automatically set to \"],[1,[32,0,[\"timezone\"]]],[2,\".\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[10,\"p\"],[12],[2,\"The local time here is currently \"],[1,[32,0,[\"localTime\"]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/components/gh-timezone-select.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    clock: Ember.inject.service(),
    classNames: ['form-group', 'for-select'],
    timezone: null,
    availableTimezones: null,
    // Allowed actions
    update: () => {},
    availableTimezoneNames: Ember.computed.mapBy('availableTimezones', 'name'),
    hasTimezoneOverride: Ember.computed('timezone', 'availableTimezoneNames', function () {
      let timezone = this.timezone;
      let availableTimezoneNames = this.availableTimezoneNames;
      return !availableTimezoneNames.includes(timezone);
    }),
    selectedTimezone: Ember.computed('timezone', 'availableTimezones', 'hasTimezoneOverride', function () {
      let hasTimezoneOverride = this.hasTimezoneOverride;
      let timezone = this.timezone;
      let availableTimezones = this.availableTimezones;

      if (hasTimezoneOverride) {
        return {
          name: '',
          label: ''
        };
      }

      return availableTimezones.filterBy('name', timezone).get('firstObject');
    }),
    selectableTimezones: Ember.computed('availableTimezones', 'hasTimezoneOverride', function () {
      let hasTimezoneOverride = this.hasTimezoneOverride;
      let availableTimezones = this.availableTimezones;

      if (hasTimezoneOverride) {
        return [{
          name: '',
          label: ''
        }, ...availableTimezones];
      }

      return availableTimezones;
    }),
    localTime: Ember.computed('hasTimezoneOverride', 'timezone', 'selectedTimezone', 'clock.second', function () {
      let hasTimezoneOverride = this.hasTimezoneOverride;
      let timezone = hasTimezoneOverride ? this.timezone : this.get('selectedTimezone.name');
      this.get('clock.second');
      return timezone ? (0, _moment.default)().tz(timezone).format('HH:mm:ss') : (0, _moment.default)().utc().format('HH:mm:ss');
    }),
    actions: {
      setTimezone(timezone) {
        this.update(timezone);
      }

    }
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-token-input", ["exports", "@glimmer/component", "ember-power-select/utils/group-utils", "ember-concurrency-decorators"], function (_exports, _component, _groupUtils, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class;

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <GhTokenInput::SelectMultiple
      class={{concat "gh-token-input " @class}}
      @triggerRole={{@triggerRole}}
      @ariaDescribedBy={{@ariaDescribedBy}}
      @ariaInvalid={{@ariaInvalid}}
      @ariaLabel={{@ariaLabel}}
      @ariaLabelledBy={{@ariaLabelledBy}}
      @afterOptionsComponent={{@afterOptionsComponent}}
      @allowClear={{@allowClear}}
      @beforeOptionsComponent={{@beforeOptionsComponent}}
      @buildSelection={{@buildSelection}}
      @calculatePosition={{@calculatePosition}}
      @closeOnSelect={{or @closeOnSelect false}}
      @defaultHighlighted={{this.defaultHighlighted}}
      @destination={{@destination}}
      @disabled={{@disabled}}
      @dropdownClass={{@dropdownClass}}
      @extra={{@extra}}
      @groupComponent={{or @groupComponent "power-select/power-select-group"}}
      @horizontalPosition={{@horizontalPosition}}
      @initiallyOpened={{@initiallyOpened}}
      @loadingMessage={{@loadingMessage}}
      @matcher={{this.matcher}}
      @matchTriggerWidth={{@matchTriggerWidth}}
      @noMatchesMessage={{@noMatchesMessage}}
      @onBlur={{this.handleBlur}}
      @onChange={{this.selectOrCreate}}
      @onClose={{@onClose}}
      @onFocus={{this.handleFocus}}
      @onInput={{@onInput}}
      @onKeydown={{this.handleKeydown}}
      @onOpen={{@onOpen}}
      @options={{this.optionsWithoutSelected}}
      @optionsComponent={{or @optionsComponent "power-select-vertical-collection-options"}}
      @placeholder={{@placeholder}}
      @placeholderComponent={{@placeholderComponent}}
      @preventScroll={{@preventScroll}}
      @registerAPI={{@registerAPI}}
      @renderInPlace={{@renderInPlace}}
      @required={{@required}}
      @scrollTo={{@scrollTo}}
      @search={{this.searchAndSuggest}}
      @searchEnabled={{true}}
      @searchField={{this.searchField}}
      @searchMessage={{@searchMessage}}
      @searchPlaceholder={{@searchPlaceholder}}
      @selected={{@selected}}
      @selectedItemComponent={{@selectedItemComponent}}
      @eventType={{@eventType}}
      @title={{@title}}
      @triggerClass={{@triggerClass}}
      @triggerComponent={{or @triggerComponent "gh-token-input/trigger"}}
      @triggerId={{@triggerId}}
      @verticalPosition={{@verticalPosition}}
      @tabindex={{@tabindex}}
      data-test-token-input="true"
      as |option|
  >
      {{#if option.__isSuggestion__}}
          <GhTokenInput::SuggestedOption @option={{option}} />
      {{else}}
          {{#if (has-block)}}
              {{yield option}}
          {{else}}
              {{get option (or @labelField "name")}}
          {{/if}}
      {{/if}}
  </GhTokenInput::SelectMultiple>
  */
  {
    "id": "sk8tL4KG",
    "block": "{\"symbols\":[\"option\",\"@labelField\",\"&default\",\"@class\",\"@triggerRole\",\"@ariaDescribedBy\",\"@ariaInvalid\",\"@ariaLabel\",\"@ariaLabelledBy\",\"@afterOptionsComponent\",\"@allowClear\",\"@beforeOptionsComponent\",\"@buildSelection\",\"@calculatePosition\",\"@closeOnSelect\",\"@destination\",\"@disabled\",\"@dropdownClass\",\"@extra\",\"@groupComponent\",\"@horizontalPosition\",\"@initiallyOpened\",\"@loadingMessage\",\"@matchTriggerWidth\",\"@noMatchesMessage\",\"@onClose\",\"@onInput\",\"@onOpen\",\"@optionsComponent\",\"@placeholder\",\"@placeholderComponent\",\"@preventScroll\",\"@registerAPI\",\"@renderInPlace\",\"@required\",\"@scrollTo\",\"@searchMessage\",\"@searchPlaceholder\",\"@selected\",\"@selectedItemComponent\",\"@eventType\",\"@title\",\"@triggerClass\",\"@triggerComponent\",\"@triggerId\",\"@verticalPosition\",\"@tabindex\"],\"statements\":[[8,\"gh-token-input/select-multiple\",[[16,0,[30,[36,3],[\"gh-token-input \",[32,4]],null]],[24,\"data-test-token-input\",\"true\"]],[[\"@triggerRole\",\"@ariaDescribedBy\",\"@ariaInvalid\",\"@ariaLabel\",\"@ariaLabelledBy\",\"@afterOptionsComponent\",\"@allowClear\",\"@beforeOptionsComponent\",\"@buildSelection\",\"@calculatePosition\",\"@closeOnSelect\",\"@defaultHighlighted\",\"@destination\",\"@disabled\",\"@dropdownClass\",\"@extra\",\"@groupComponent\",\"@horizontalPosition\",\"@initiallyOpened\",\"@loadingMessage\",\"@matcher\",\"@matchTriggerWidth\",\"@noMatchesMessage\",\"@onBlur\",\"@onChange\",\"@onClose\",\"@onFocus\",\"@onInput\",\"@onKeydown\",\"@onOpen\",\"@options\",\"@optionsComponent\",\"@placeholder\",\"@placeholderComponent\",\"@preventScroll\",\"@registerAPI\",\"@renderInPlace\",\"@required\",\"@scrollTo\",\"@search\",\"@searchEnabled\",\"@searchField\",\"@searchMessage\",\"@searchPlaceholder\",\"@selected\",\"@selectedItemComponent\",\"@eventType\",\"@title\",\"@triggerClass\",\"@triggerComponent\",\"@triggerId\",\"@verticalPosition\",\"@tabindex\"],[[32,5],[32,6],[32,7],[32,8],[32,9],[32,10],[32,11],[32,12],[32,13],[32,14],[30,[36,0],[[32,15],false],null],[32,0,[\"defaultHighlighted\"]],[32,16],[32,17],[32,18],[32,19],[30,[36,0],[[32,20],\"power-select/power-select-group\"],null],[32,21],[32,22],[32,23],[32,0,[\"matcher\"]],[32,24],[32,25],[32,0,[\"handleBlur\"]],[32,0,[\"selectOrCreate\"]],[32,26],[32,0,[\"handleFocus\"]],[32,27],[32,0,[\"handleKeydown\"]],[32,28],[32,0,[\"optionsWithoutSelected\"]],[30,[36,0],[[32,29],\"power-select-vertical-collection-options\"],null],[32,30],[32,31],[32,32],[32,33],[32,34],[32,35],[32,36],[32,0,[\"searchAndSuggest\"]],true,[32,0,[\"searchField\"]],[32,37],[32,38],[32,39],[32,40],[32,41],[32,42],[32,43],[30,[36,0],[[32,44],\"gh-token-input/trigger\"],null],[32,45],[32,46],[32,47]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,2],[[32,1,[\"__isSuggestion__\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[8,\"gh-token-input/suggested-option\",[],[[\"@option\"],[[32,1]]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[27,[32,3]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[18,3,[[32,1]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[1,[30,[36,1],[[32,1],[30,[36,0],[[32,2],\"name\"],null]],null]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[1]}]]]],\"hasEval\":false,\"upvars\":[\"or\",\"get\",\"if\",\"concat\"]}",
    "moduleName": "ghost-admin/components/gh-token-input.hbs"
  });
  /* global key */


  const {
    Handlebars
  } = Ember;
  const BACKSPACE = 8;
  const TAB = 9;
  let GhTokenInput = (_dec = Ember._action, _dec2 = Ember._action, _dec3 = Ember._action, _dec4 = Ember._action, _dec5 = Ember._action, _dec6 = Ember._action, (_class = class GhTokenInput extends _component.default {
    get matcher() {
      return this.args.matcher || _groupUtils.defaultMatcher;
    }

    get searchField() {
      return this.args.searchField === undefined ? 'name' : this.args.searchField;
    }

    get optionsWithoutSelected() {
      let options = this.args.options;
      let selected = this.args.selected;
      let optionsWithoutSelected = [];

      function filterSelectedOptions(opts, result) {
        opts.forEach(o => {
          if (o.options) {
            const withoutSelected = [];
            filterSelectedOptions(o.options, withoutSelected);

            if (withoutSelected.length > 0) {
              result.push({
                groupName: o.groupName,
                options: withoutSelected
              });
            }

            return;
          }

          if (!selected.includes(o)) {
            result.push(o);
          }
        });
      }

      filterSelectedOptions(options, optionsWithoutSelected);
      return optionsWithoutSelected;
    } // actions -----------------------------------------------------------------


    handleKeydown(select, event) {
      // On backspace with empty text, remove the last token but deviate
      // from default behaviour by not updating search to match last token
      if (event.keyCode === BACKSPACE && Ember.isBlank(event.target.value)) {
        let lastSelection = select.selected[select.selected.length - 1];

        if (lastSelection) {
          this.args.onChange(select.selected.slice(0, -1), select);
          select.actions.search('');
          select.actions.open(event);
        } // prevent default


        return false;
      } // Tab should work the same as Enter if there's a highlighted option


      if (event.keyCode === TAB && !Ember.isBlank(event.target.value) && select.highlighted) {
        if (!select.selected || select.selected.indexOf(select.highlighted) === -1) {
          select.actions.choose(select.highlighted, event);
          event.preventDefault(); // keep focus in search

          return false;
        }
      } // https://github.com/TryGhost/Ghost/issues/11786
      // ember-power-select stops propagation of events when ctrl/CMD or meta key is down.
      // So, we're dispatching KeyboardEvent directly to the root of ghost app.


      if (event.ctrlKey || event.metaKey) {
        const copy = new KeyboardEvent(event.type, event);
        document.getElementsByClassName('gh-app')[0].dispatchEvent(copy);
        event.preventDefault(); // don't show the save dialog.

        return false;
      } // fallback to default


      return true;
    }

    handleFocus() {
      key.setScope('gh-token-input');
      this.args.onFocus?.(...arguments);
    }

    handleBlur() {
      key.setScope('default');
      this.args.onBlur?.(...arguments);
    }

    searchAndSuggest(term, select) {
      return this.searchAndSuggestTask.perform(term, select);
    }

    selectOrCreate(selection, select, keyboardEvent) {
      // allow tokens to be created with spaces
      if (keyboardEvent && keyboardEvent.code === 'Space') {
        select.actions.search(`${select.searchText} `);
        return;
      } // guard against return being pressed when nothing is selected


      if (!Ember.isArray(selection)) {
        return;
      }

      let suggestion = selection.find(option => option.__isSuggestion__);

      if (suggestion) {
        this.args.onCreate(suggestion.__value__, select);
      } else {
        this.args.onChange(selection, select);
      } // clear select search


      select.actions.search('');
    } // tasks -------------------------------------------------------------------


    *searchAndSuggestTask(term, select) {
      let newOptions = this.optionsWithoutSelected.toArray();

      if (term.length === 0) {
        return newOptions;
      }

      let searchAction = this.args.search;

      if (searchAction) {
        let results = yield searchAction(term, select);

        if (results.toArray) {
          results = results.toArray();
        }

        this._addCreateOption(term, results);

        return results;
      }

      newOptions = this._filter(Ember.A(newOptions), term);

      this._addCreateOption(term, newOptions);

      return newOptions;
    } // internal ----------------------------------------------------------------
    // always select the first item in the list that isn't the "Add x" option


    defaultHighlighted(select) {
      let {
        results
      } = select;
      let option = (0, _groupUtils.advanceSelectableOption)(results, undefined, 1);

      if (results.length > 1 && option.__isSuggestion__) {
        option = (0, _groupUtils.advanceSelectableOption)(results, option, 1);
      }

      return option;
    } // private -----------------------------------------------------------------


    _addCreateOption(term, options) {
      if (this._shouldShowCreateOption(term, options)) {
        options.unshift(this._buildSuggestionForTerm(term));
      }
    }

    _shouldShowCreateOption(term, options) {
      if (this.args.allowCreation === false) {
        return false;
      }

      if (this.args.showCreateWhen) {
        return this.args.showCreateWhen(term, options);
      } else {
        return this._hideCreateOptionOnSameTerm(term, options);
      }
    }

    _buildSuggestionForTerm(term) {
      return {
        __isSuggestion__: true,
        __value__: term,
        text: this._buildSuggestionLabel(term)
      };
    }

    _hideCreateOptionOnSameTerm(term, options) {
      let existingOption = options.findBy(this.searchField, term);
      return !existingOption;
    }

    _filter(options, searchText) {
      let matcher;

      if (this.searchField) {
        matcher = (option, text) => this.matcher(Ember.get(option, this.searchField), text);
      } else {
        matcher = (option, text) => this.matcher(option, text);
      }

      return (0, _groupUtils.filterOptions)(options || [], searchText, matcher);
    }

    _buildSuggestionLabel(term) {
      if (this.args.buildSuggestion) {
        return this.args.buildSuggestion(term);
      }

      return Ember.String.htmlSafe(`Add <strong>"${Handlebars.Utils.escapeExpression(term)}"...</strong>`);
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "handleKeydown", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "handleKeydown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleFocus", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "handleFocus"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleBlur", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "handleBlur"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "searchAndSuggest", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "searchAndSuggest"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "selectOrCreate", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "selectOrCreate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "searchAndSuggestTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "searchAndSuggestTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "defaultHighlighted", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "defaultHighlighted"), _class.prototype)), _class));
  _exports.default = GhTokenInput;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhTokenInput);
});
;define("ghost-admin/components/gh-token-input/label-selected-item-labs", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{@option.name}}
  
  */
  {
    "id": "lZc5Y8uN",
    "block": "{\"symbols\":[\"@option\"],\"statements\":[[1,[32,1,[\"name\"]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-token-input/label-selected-item-labs.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-token-input/label-token-labs", ["exports", "ember-drag-drop/components/draggable-object"], function (_exports, _draggableObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{yield}}
  
  */
  {
    "id": "+WD1zWRM",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[18,1,null],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-token-input/label-token-labs.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _draggableObject.default.extend({
    attributeBindings: ['title'],
    classNames: ['label-token-labs'],
    title: 'Label'
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-token-input/label-token", ["exports", "ember-drag-drop/components/draggable-object"], function (_exports, _draggableObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{yield}}
  
  */
  {
    "id": "EBbGHkmI",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[18,1,null],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-token-input/label-token.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _draggableObject.default.extend({
    attributeBindings: ['title'],
    classNames: ['label-token'],
    title: 'Label'
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-token-input/select-multiple", ["exports", "jquery", "ember-power-select/components/power-select-multiple", "@ember-decorators/component"], function (_exports, _jquery, _powerSelectMultiple, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _class2;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{!--
      NOTE: changes from ember-power-select template...
      - `extra` has our custom drag-tracking actions assigned to it
  --}}
  <PowerSelect
      @triggerRole={{@triggerRole}}
      @ariaDescribedBy={{@ariaDescribedBy}}
      @ariaInvalid={{@ariaInvalid}}
      @ariaLabel={{@ariaLabel}}
      @ariaLabelledBy={{@ariaLabelledBy}}
      @afterOptionsComponent={{@afterOptionsComponent}}
      @allowClear={{@allowClear}}
      @beforeOptionsComponent={{or @beforeOptionsComponent null}}
      @buildSelection={{or @buildSelection this.defaultBuildSelection}}
      @calculatePosition={{@calculatePosition}}
      @closeOnSelect={{@closeOnSelect}}
      @defaultHighlighted={{@defaultHighlighted}}
      @destination={{@destination}}
      @disabled={{@disabled}}
      @dropdownClass={{@dropdownClass}}
      @extra={{assign @extra (hash
          optionMouseDown=this.optionMouseDown
          optionTouchStart=this.optionTouchStart
      )}}
      @groupComponent={{@groupComponent}}
      @horizontalPosition={{@horizontalPosition}}
      @initiallyOpened={{@initiallyOpened}}
      @loadingMessage={{@loadingMessage}}
      @matcher={{@matcher}}
      @matchTriggerWidth={{@matchTriggerWidth}}
      @noMatchesMessage={{@noMatchesMessage}}
      @onBlur={{@onBlur}}
      @onChange={{@onChange}}
      @onClose={{@onClose}}
      @onFocus={{this.handleFocus}}
      @onInput={{@onInput}}
      @onKeydown={{this.handleKeydown}}
      @onOpen={{this.handleOpen}}
      @options={{@options}}
      @optionsComponent={{@optionsComponent}}
      @placeholder={{@placeholder}}
      @placeholderComponent={{@placeholderComponent}}
      @preventScroll={{@preventScroll}}
      @registerAPI={{@registerAPI}}
      @renderInPlace={{@renderInPlace}}
      @required={{@required}}
      @scrollTo={{@scrollTo}}
      @search={{@search}}
      @searchEnabled={{@searchEnabled}}
      @searchField={{@searchField}}
      @searchMessage={{@searchMessage}}
      @searchPlaceholder={{@searchPlaceholder}}
      @selected={{@selected}}
      @selectedItemComponent={{@selectedItemComponent}}
      @eventType={{@eventType}}
      @title={{@title}}
      @triggerClass="ember-power-select-multiple-trigger {{@triggerClass}}"
      @triggerComponent={{component (or @triggerComponent "power-select-multiple/trigger") tabindex=@tabindex}}
      @triggerId={{@triggerId}}
      @verticalPosition={{@verticalPosition}}
      @tabindex={{this.computedTabIndex}}
      ...attributes as |option select|>
      {{yield option select}}
  </PowerSelect>
  */
  {
    "id": "SXwSrmf3",
    "block": "{\"symbols\":[\"option\",\"select\",\"@triggerRole\",\"@ariaDescribedBy\",\"@ariaInvalid\",\"@ariaLabel\",\"@ariaLabelledBy\",\"@afterOptionsComponent\",\"@allowClear\",\"@beforeOptionsComponent\",\"@buildSelection\",\"@calculatePosition\",\"@closeOnSelect\",\"@defaultHighlighted\",\"@destination\",\"@disabled\",\"@dropdownClass\",\"@extra\",\"@groupComponent\",\"@horizontalPosition\",\"@initiallyOpened\",\"@loadingMessage\",\"@matcher\",\"@matchTriggerWidth\",\"@noMatchesMessage\",\"@onBlur\",\"@onChange\",\"@onClose\",\"@onInput\",\"@options\",\"@optionsComponent\",\"@placeholder\",\"@placeholderComponent\",\"@preventScroll\",\"@registerAPI\",\"@renderInPlace\",\"@required\",\"@scrollTo\",\"@search\",\"@searchEnabled\",\"@searchField\",\"@searchMessage\",\"@searchPlaceholder\",\"@selected\",\"@selectedItemComponent\",\"@eventType\",\"@title\",\"@triggerClass\",\"@tabindex\",\"@triggerComponent\",\"@triggerId\",\"@verticalPosition\",\"&attrs\",\"&default\"],\"statements\":[[8,\"power-select\",[[17,53]],[[\"@triggerRole\",\"@ariaDescribedBy\",\"@ariaInvalid\",\"@ariaLabel\",\"@ariaLabelledBy\",\"@afterOptionsComponent\",\"@allowClear\",\"@beforeOptionsComponent\",\"@buildSelection\",\"@calculatePosition\",\"@closeOnSelect\",\"@defaultHighlighted\",\"@destination\",\"@disabled\",\"@dropdownClass\",\"@extra\",\"@groupComponent\",\"@horizontalPosition\",\"@initiallyOpened\",\"@loadingMessage\",\"@matcher\",\"@matchTriggerWidth\",\"@noMatchesMessage\",\"@onBlur\",\"@onChange\",\"@onClose\",\"@onFocus\",\"@onInput\",\"@onKeydown\",\"@onOpen\",\"@options\",\"@optionsComponent\",\"@placeholder\",\"@placeholderComponent\",\"@preventScroll\",\"@registerAPI\",\"@renderInPlace\",\"@required\",\"@scrollTo\",\"@search\",\"@searchEnabled\",\"@searchField\",\"@searchMessage\",\"@searchPlaceholder\",\"@selected\",\"@selectedItemComponent\",\"@eventType\",\"@title\",\"@triggerClass\",\"@triggerComponent\",\"@triggerId\",\"@verticalPosition\",\"@tabindex\"],[[32,3],[32,4],[32,5],[32,6],[32,7],[32,8],[32,9],[30,[36,0],[[32,10],null],null],[30,[36,0],[[32,11],[32,0,[\"defaultBuildSelection\"]]],null],[32,12],[32,13],[32,14],[32,15],[32,16],[32,17],[30,[36,2],[[32,18],[30,[36,1],null,[[\"optionMouseDown\",\"optionTouchStart\"],[[32,0,[\"optionMouseDown\"]],[32,0,[\"optionTouchStart\"]]]]]],null],[32,19],[32,20],[32,21],[32,22],[32,23],[32,24],[32,25],[32,26],[32,27],[32,28],[32,0,[\"handleFocus\"]],[32,29],[32,0,[\"handleKeydown\"]],[32,0,[\"handleOpen\"]],[32,30],[32,31],[32,32],[32,33],[32,34],[32,35],[32,36],[32,37],[32,38],[32,39],[32,40],[32,41],[32,42],[32,43],[32,44],[32,45],[32,46],[32,47],[31,[\"ember-power-select-multiple-trigger \",[32,48]]],[30,[36,3],[[30,[36,0],[[32,50],\"power-select-multiple/trigger\"],null]],[[\"tabindex\"],[[32,49]]]],[32,51],[32,52],[32,0,[\"computedTabIndex\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[18,54,[[32,1],[32,2]]],[2,\"\\n\"]],\"parameters\":[1,2]}]]]],\"hasEval\":false,\"upvars\":[\"or\",\"hash\",\"assign\",\"component\"]}",
    "moduleName": "ghost-admin/components/gh-token-input/select-multiple.hbs"
  });

  // TODO: convert from jQuery to native DOM
  const END_ACTIONS = 'click.ghToken mouseup.ghToken touchend.ghToken'; // triggering focus on the search input within ESA's onfocus event breaks the
  // drag-n-drop functionality in ember-drag-drop so we watch for events that
  // could be the start of a drag and disable the default focus behaviour until
  // we get another event signalling the end of a drag

  let GhTokenInputSelectMultiple = (_dec = (0, _component.tagName)('div'), _dec2 = Ember._action, _dec3 = Ember._action, _dec4 = Ember._action, _dec(_class = (_class2 = class GhTokenInputSelectMultiple extends _powerSelectMultiple.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "_canFocus", true);
    }

    willDestroyElement() {
      super.willDestroyElement(...arguments);

      if (this._allowFocusListener) {
        (0, _jquery.default)(window).off(END_ACTIONS, this._allowFocusListener);
      }
    } // actions


    optionMouseDown(event) {
      if (event.which === 1 && !event.ctrlKey) {
        this._denyFocus(event);
      }
    }

    optionTouchStart(event) {
      this._denyFocus(event);
    }

    handleFocus() {
      if (this._canFocus) {
        super.handleFocus(...arguments);
      }
    } // internal


    _denyFocus() {
      if (this._canFocus) {
        this._canFocus = false;
        this._allowFocusListener = Ember.run.bind(this, this._allowFocus);
        (0, _jquery.default)(window).on(END_ACTIONS, this._allowFocusListener);
      }
    }

    _allowFocus() {
      this._canFocus = true;
      (0, _jquery.default)(window).off(END_ACTIONS, this._allowFocusListener);
      this._allowFocusListener = null;
    }

  }, (_applyDecoratedDescriptor(_class2.prototype, "optionMouseDown", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "optionMouseDown"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "optionTouchStart", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "optionTouchStart"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleFocus", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "handleFocus"), _class2.prototype)), _class2)) || _class);

  window.__CLASSIC_OWN_CLASSES__.set(GhTokenInputSelectMultiple, true);

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhTokenInputSelectMultiple);

  _exports.default = _default;
});
;define("ghost-admin/components/gh-token-input/suggested-option", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{@option.text}}
  
  */
  {
    "id": "CbOdsNhW",
    "block": "{\"symbols\":[\"@option\"],\"statements\":[[1,[32,1,[\"text\"]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-token-input/suggested-option.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/gh-token-input/tag-token", ["exports", "ember-drag-drop/components/draggable-object"], function (_exports, _draggableObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{yield}}
  
  */
  {
    "id": "7t6Vxwo6",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[18,1,null],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-token-input/tag-token.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _draggableObject.default.extend({
    attributeBindings: ['title'],
    classNames: ['tag-token'],
    classNameBindings: ['internal:tag-token--internal'],
    internal: Ember.computed.readOnly('content.isInternal'),
    primary: Ember.computed('idx', 'internal', function () {
      return !this.internal && this.idx === 0;
    }),
    title: Ember.computed('internal', function () {
      return this.internal ? 'Internal tag' : '';
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-token-input/trigger", ["exports", "ember-power-select/components/power-select-multiple/trigger"], function (_exports, _trigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class;

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <SortableObjects
      @tagName="ul"
      @id={{concat "ember-power-select-multiple-options-" @select.uniqueId}}
      @class="ember-power-select-multiple-options"
      @sortableObjectList={{@select.selected}}
      @enableSort={{true}}
      @useSwap={{false}}
      @sortEndAction={{action "reorderItems"}}
  >
      {{#each @select.selected as |opt idx|}}
          {{#component (or @extra.tokenComponent "draggable-object")
              tagName="li"
              class=(concat "ember-power-select-multiple-option" (if opt.class (concat " token-" opt.class)))
              select=@select
              content=(readonly opt)
              idx=idx
              isSortable=true
              mouseDown=this.handleOptionMouseDown
              touchStart=this.handleOptionTouchStart
          }}
              {{#if @selectedItemComponent}}
                  {{component @selectedItemComponent option=(readonly opt) select=(readonly @select)}}
              {{else}}
                  {{yield opt @select}}
              {{/if}}
              {{#unless @select.disabled}}
                  <span role="button"
                      aria-label="remove element"
                      class="ember-power-select-multiple-remove-btn"
                      data-selected-index={{idx}}
                      {{on "mousedown" this.handleOptionMouseDown}}
                  >
                      {{svg-jar "close" data-selected-index=idx}}
                  </span>
              {{/unless}}
          {{/component}}
      {{else}}
          {{#if (and @placeholder (not @searchEnabled))}}
              <span class="ember-power-select-placeholder">{{@placeholder}}</span>
          {{/if}}
      {{/each}}
  
      {{#if @searchEnabled}}
          <input
              type="search"
              class="ember-power-select-trigger-multiple-input"
              autocomplete="off"
              autocorrect="off"
              autocapitalize="off"
              spellcheck="false"
              id="ember-power-select-trigger-multiple-input-{{@select.uniqueId}}"
              value={{@select.searchText}}
              aria-controls={{@listboxId}}
              style={{this.triggerMultipleInputStyle}}
              placeholder={{this.maybePlaceholder}}
              disabled={{@select.disabled}}
              tabindex={{@tabindex}}
              {{on "focus" @onFocus}}
              {{on "blur" @onBlur}}
              {{on "input" this.handleInput}}
              {{on "keydown" this.handleKeydown}}
              {{did-insert this.storeInputStyles}}
          >
      {{/if}}
  </SortableObjects>
  <span class="ember-power-select-status-icon"></span>
  
  */
  {
    "id": "tjaH18KD",
    "block": "{\"symbols\":[\"opt\",\"idx\",\"@select\",\"@listboxId\",\"@tabindex\",\"@onFocus\",\"@onBlur\",\"@placeholder\",\"@searchEnabled\",\"&default\",\"@selectedItemComponent\",\"@extra\"],\"statements\":[[8,\"sortable-objects\",[],[[\"@tagName\",\"@id\",\"@class\",\"@sortableObjectList\",\"@enableSort\",\"@useSwap\",\"@sortEndAction\"],[\"ul\",[30,[36,9],[\"ember-power-select-multiple-options-\",[32,3,[\"uniqueId\"]]],null],\"ember-power-select-multiple-options\",[32,3,[\"selected\"]],true,false,[30,[36,11],[[32,0],\"reorderItems\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,13],[[30,[36,12],[[30,[36,12],[[32,3,[\"selected\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,7],[[30,[36,10],[[32,12,[\"tokenComponent\"]],\"draggable-object\"],null]],[[\"tagName\",\"class\",\"select\",\"content\",\"idx\",\"isSortable\",\"mouseDown\",\"touchStart\"],[\"li\",[30,[36,9],[\"ember-power-select-multiple-option\",[30,[36,4],[[32,1,[\"class\"]],[30,[36,9],[\" token-\",[32,1,[\"class\"]]],null]],null]],null],[32,3],[30,[36,6],[[32,1]],null],[32,2],true,[32,0,[\"handleOptionMouseDown\"]],[32,0,[\"handleOptionTouchStart\"]]]],[[\"default\"],[{\"statements\":[[6,[37,4],[[32,11]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[1,[30,[36,7],[[32,11]],[[\"option\",\"select\"],[[30,[36,6],[[32,1]],null],[30,[36,6],[[32,3]],null]]]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[18,10,[[32,1],[32,3]]],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,8],[[32,3,[\"disabled\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[11,\"span\"],[24,\"role\",\"button\"],[24,\"aria-label\",\"remove element\"],[24,0,\"ember-power-select-multiple-remove-btn\"],[16,\"data-selected-index\",[32,2]],[4,[38,0],[\"mousedown\",[32,0,[\"handleOptionMouseDown\"]]],null],[12],[2,\"\\n                    \"],[1,[30,[36,5],[\"close\"],[[\"data-selected-index\"],[[32,2]]]]],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[1,2]},{\"statements\":[[6,[37,4],[[30,[36,3],[[32,8],[30,[36,2],[[32,9]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"ember-power-select-placeholder\"],[12],[1,[32,8]],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,4],[[32,9]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[11,\"input\"],[24,0,\"ember-power-select-trigger-multiple-input\"],[24,\"autocomplete\",\"off\"],[24,\"autocorrect\",\"off\"],[24,\"autocapitalize\",\"off\"],[24,\"spellcheck\",\"false\"],[16,1,[31,[\"ember-power-select-trigger-multiple-input-\",[32,3,[\"uniqueId\"]]]]],[16,2,[32,3,[\"searchText\"]]],[16,\"aria-controls\",[32,4]],[16,5,[32,0,[\"triggerMultipleInputStyle\"]]],[16,\"placeholder\",[32,0,[\"maybePlaceholder\"]]],[16,\"disabled\",[32,3,[\"disabled\"]]],[16,\"tabindex\",[32,5]],[24,4,\"search\"],[4,[38,0],[\"focus\",[32,6]],null],[4,[38,0],[\"blur\",[32,7]],null],[4,[38,0],[\"input\",[32,0,[\"handleInput\"]]],null],[4,[38,0],[\"keydown\",[32,0,[\"handleKeydown\"]]],null],[4,[38,1],[[32,0,[\"storeInputStyles\"]]],null],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[10,\"span\"],[14,0,\"ember-power-select-status-icon\"],[12],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"on\",\"did-insert\",\"not\",\"and\",\"if\",\"svg-jar\",\"readonly\",\"component\",\"unless\",\"concat\",\"or\",\"action\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/gh-token-input/trigger.hbs"
  });

  let Trigger = (_dec = Ember._action, _dec2 = Ember._action, _dec3 = Ember._action, _dec4 = Ember._action, (_class = class Trigger extends _trigger.default {
    handleOptionMouseDown(event) {
      if (!event.target.closest('[data-selected-index]')) {
        let optionMouseDown = this.args.extra.optionMouseDown;

        if (optionMouseDown) {
          return optionMouseDown(event);
        }
      }

      return this.chooseOption(event);
    }

    handleOptionTouchStart(event) {
      let optionTouchStart = this.args.extra.optionTouchStart;

      if (optionTouchStart) {
        return optionTouchStart(event);
      }
    }

    reorderItems() {
      // ember-drag-drop's sortable-objects has two-way bindings and will
      // update EPS' selected value directly. We have to create a copy
      // after sorting in order to force the onchange action to be triggered
      let selectedCopy = this.args.select.selected.slice();
      this.args.select.actions.select(selectedCopy);
    } // copied directly from EPS, the default behaviour of stopping propagation
    // of keydown events prevents our shortcuts from being triggered


    handleKeydown(e) {
      if (this.args.onKeydown && this.args.onKeydown(e) === false) {
        e.stopPropagation();
        return false;
      }

      if (e.keyCode === 8) {
        e.stopPropagation();

        if (Ember.isBlank(e.target.value)) {
          let lastSelection = this.args.select.selected[this.args.select.selected.length - 1];

          if (lastSelection) {
            this.args.select.actions.select(this.args.buildSelection(lastSelection, this.args.select), e);

            if (typeof lastSelection === 'string') {
              this.args.select.actions.search(lastSelection);
            } else {
              let searchField = this.searchField;
              (true && !(searchField) && Ember.assert('`{{power-select-multiple}}` requires a `searchField` when the options are not strings to remove options using backspace', searchField));
              this.args.select.actions.search(Ember.get(lastSelection, searchField));
            }

            this.args.select.actions.open(e);
          }
        }
      } // Disable the propagation cancellation so that our shortcuts still work
      // } else if (e.keyCode >= 48 && e.keyCode <= 90 || e.keyCode === 32) { // Keys 0-9, a-z or SPACE
      //     e.stopPropagation();
      // }

    }

  }, (_applyDecoratedDescriptor(_class.prototype, "handleOptionMouseDown", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "handleOptionMouseDown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleOptionTouchStart", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "handleOptionTouchStart"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "reorderItems", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "reorderItems"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleKeydown", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "handleKeydown"), _class.prototype)), _class));
  _exports.default = Trigger;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Trigger);
});
;define("ghost-admin/components/gh-trim-focus-input", ["exports", "ghost-admin/components/gh-text-input"], function (_exports, _ghTextInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /**
   * This doesn't override the OneWayInput component because
   * we need finer control. It borrows
   * parts from both the OneWayInput component and Ember's default
   * input component
   */
  const TrimFocusInputComponent = _ghTextInput.default.extend({
    shouldFocus: true,

    focusOut(event) {
      this._trimInput(event.target.value, event);

      this._super(...arguments);
    },

    _trimInput(value, event) {
      if (value && typeof value.trim === 'function') {
        value = value.trim();
      }

      this.element.value = value;

      this._elementValueDidChange(event);

      let inputMethod = this.input;

      if (inputMethod) {
        inputMethod(event);
      }
    }

  });

  var _default = TrimFocusInputComponent;
  _exports.default = _default;
});
;define("ghost-admin/components/gh-unsplash-photo", ["exports", "jquery"], function (_exports, _jquery) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <a class="gh-unsplash-photo" href="#" onclick={{action "zoom"}} data-unsplash-zoomed-photo={{if this.zoomed this.photo.id}} data-test-unsplash-photo={{this.photo.id}} style={{this.style}}>
      <div class="gh-unsplash-photo-container" style={{this.containerStyle}} data-test-unsplash-photo-container>
          <img src={{this.imageUrl}} alt={{this.photo.description}} width={{this.width}} height={{this.height}} data-test-unsplash-photo-image />
          <div class="gh-unsplash-photo-overlay">
              <div class="gh-unsplash-photo-header">
                  <a class="gh-unsplash-button-likes gh-unsplash-button" href="{{this.photo.links.html}}?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit" target="_blank">{{svg-jar "unsplash-heart"}}{{this.photo.likes}}</a>
                  <a class="gh-unsplash-button-download gh-unsplash-button" href="{{this.photo.links.download}}/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit&force=true">{{svg-jar "download"}}</a>
              </div>
              <div class="gh-unsplash-photo-footer">
                  <div class="gh-unsplash-photo-author">
                      <a class="gh-unsplash-photo-author-img" href="{{this.photo.user.links.html}}?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit" target="_blank">
                          <img src="{{this.photo.user.profile_image.medium}}" />
                      </a>
                      <a class="gh-unsplash-photo-author-name" href="{{this.photo.user.links.html}}?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit" target="_blank">
                          {{this.photo.user.name}}
                      </a>
                  </div>
                  <a class="gh-unsplash-button" href="#" onclick={{action "select"}}>Insert image</a>
              </div>
          </div>
      </div>
  </a>
  */
  {
    "id": "lsqYZcmQ",
    "block": "{\"symbols\":[],\"statements\":[[10,\"a\"],[14,0,\"gh-unsplash-photo\"],[14,6,\"#\"],[15,\"onclick\",[30,[36,0],[[32,0],\"zoom\"],null]],[15,\"data-unsplash-zoomed-photo\",[30,[36,1],[[32,0,[\"zoomed\"]],[32,0,[\"photo\",\"id\"]]],null]],[15,\"data-test-unsplash-photo\",[32,0,[\"photo\",\"id\"]]],[15,5,[32,0,[\"style\"]]],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-unsplash-photo-container\"],[15,5,[32,0,[\"containerStyle\"]]],[14,\"data-test-unsplash-photo-container\",\"\"],[12],[2,\"\\n        \"],[10,\"img\"],[15,\"src\",[32,0,[\"imageUrl\"]]],[15,\"alt\",[32,0,[\"photo\",\"description\"]]],[15,\"width\",[32,0,[\"width\"]]],[15,\"height\",[32,0,[\"height\"]]],[14,\"data-test-unsplash-photo-image\",\"\"],[12],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-unsplash-photo-overlay\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-unsplash-photo-header\"],[12],[2,\"\\n                \"],[10,\"a\"],[14,0,\"gh-unsplash-button-likes gh-unsplash-button\"],[15,6,[31,[[32,0,[\"photo\",\"links\",\"html\"]],\"?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\"]]],[14,\"target\",\"_blank\"],[12],[1,[30,[36,2],[\"unsplash-heart\"],null]],[1,[32,0,[\"photo\",\"likes\"]]],[13],[2,\"\\n                \"],[10,\"a\"],[14,0,\"gh-unsplash-button-download gh-unsplash-button\"],[15,6,[31,[[32,0,[\"photo\",\"links\",\"download\"]],\"/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit&force=true\"]]],[12],[1,[30,[36,2],[\"download\"],null]],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-unsplash-photo-footer\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-unsplash-photo-author\"],[12],[2,\"\\n                    \"],[10,\"a\"],[14,0,\"gh-unsplash-photo-author-img\"],[15,6,[31,[[32,0,[\"photo\",\"user\",\"links\",\"html\"]],\"?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\"]]],[14,\"target\",\"_blank\"],[12],[2,\"\\n                        \"],[10,\"img\"],[15,\"src\",[31,[[32,0,[\"photo\",\"user\",\"profile_image\",\"medium\"]]]]],[12],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"a\"],[14,0,\"gh-unsplash-photo-author-name\"],[15,6,[31,[[32,0,[\"photo\",\"user\",\"links\",\"html\"]],\"?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\"]]],[14,\"target\",\"_blank\"],[12],[2,\"\\n                        \"],[1,[32,0,[\"photo\",\"user\",\"name\"]]],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"a\"],[14,0,\"gh-unsplash-button\"],[14,6,\"#\"],[15,\"onclick\",[30,[36,0],[[32,0],\"select\"],null]],[12],[2,\"Insert image\"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"action\",\"if\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/gh-unsplash-photo.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    height: 0,
    photo: null,
    tagName: '',
    width: 1200,
    zoomed: false,

    // closure actions
    select() {},

    zoom() {},

    style: Ember.computed('zoomed', function () {
      return Ember.String.htmlSafe(this.zoomed ? 'width: auto; margin: 0;' : '');
    }),
    // avoid "binding style attributes" warnings
    containerStyle: Ember.computed('photo.color', 'zoomed', function () {
      let styles = [];
      let ratio = this.get('photo.ratio');
      let zoomed = this.zoomed;
      styles.push(`background-color: ${this.get('photo.color')}`);

      if (zoomed) {
        styles.push(`cursor: zoom-out`);
      } else {
        styles.push(`padding-bottom: ${ratio * 100}%`);
      }

      return Ember.String.htmlSafe(styles.join('; '));
    }),
    imageUrl: Ember.computed('photo.urls.regular', function () {
      let url = this.get('photo.urls.regular');
      url = url.replace('&w=1080', '&w=1200');
      return url;
    }),

    didReceiveAttrs() {
      this._super(...arguments);

      this.set('height', this.width * this.photo.ratio);

      if (this.zoomed && !this._zoomed) {
        this._setZoomedSize();
      }

      this._zoomed = this.zoomed;

      if (this.zoomed && !this._resizeHandler) {
        this._setupResizeHandler();
      } else if (!this.zoomed && this._resizeHandler) {
        this._teardownResizeHandler();
      }
    },

    didInsertElement() {
      this._super(...arguments);

      this._hasRendered = true;

      if (this.zoomed) {
        this._setZoomedSize();
      }
    },

    willDestroyElement() {
      this._super(...arguments);

      this._teardownResizeHandler();
    },

    actions: {
      select(event) {
        event.preventDefault();
        event.stopPropagation();
        this.select(this.photo);
      },

      zoom(event) {
        let $target = (0, _jquery.default)(event.target); // only zoom when it wasn't one of the child links clicked

        if (!$target.is('a') && $target.closest('a').hasClass('gh-unsplash-photo')) {
          event.preventDefault();
          this.zoom(this.photo);
        } // don't propagate otherwise we can trigger the closeZoom action on the overlay


        event.stopPropagation();
      }

    },

    _setZoomedSize() {
      if (!this._hasRendered) {
        return false;
      }

      let a = document.querySelector(`[data-unsplash-zoomed-photo="${this.photo.id}"]`);
      a.style.width = '100%';
      a.style.height = '100%';
      let offsets = a.getBoundingClientRect();
      let ratio = this.photo.ratio;
      let maxHeight = {
        width: offsets.height / ratio,
        height: offsets.height
      };
      let maxWidth = {
        width: offsets.width,
        height: offsets.width * ratio
      };
      let usableSize = null;

      if (ratio <= 1) {
        usableSize = maxWidth.height > offsets.height ? maxHeight : maxWidth;
      } else {
        usableSize = maxHeight.width > offsets.width ? maxWidth : maxHeight;
      }

      a.style.width = `${usableSize.width}px`;
      a.style.height = `${usableSize.height}px`;
    },

    _setupResizeHandler() {
      if (this._resizeHandler) {
        return;
      }

      this._resizeHandler = Ember.run.bind(this, this._handleResize);
      window.addEventListener('resize', this._resizeHandler);
    },

    _teardownResizeHandler() {
      window.removeEventListener('resize', this._resizeHandler);
      this._resizeHandler = null;
    },

    _handleResize() {
      this._throttleResize = Ember.run.throttle(this, this._setZoomedSize, 100);
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-unsplash", ["exports", "ghost-admin/mixins/shortcuts"], function (_exports, _shortcuts) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <LiquidWormhole @class="unsplash">
      {{!-- TODO: why does this modal background not cover the PSM without style override? --}}
      <div class="fullscreen-modal-background" {{action "close"}} style="z-index: 999"></div>
      <div class="absolute top-8 right-8 bottom-8 left-8 br4 overflow-hidden bg-white z-9999" data-unsplash>
          {{!-- close button --}}
          <button type="button" class="absolute top-6 right-6" {{action "close"}}>
              {{svg-jar "close" class="w4 stroke-midlightgrey-l2"}}
          </button>
  
          <div class="flex flex-column h-100">
              {{!-- static header --}}
              <header class="flex-shrink-0 flex flex-row-l flex-column justify-between pt6 pr8 pb6 pl8 pt10-l pr20-l pb10-l pl20-l items-center">
                  <h1 class="flex items-center darkgrey-d2 w-100 nudge-top--4">
                      <a class="dib w8 mr2" href="https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit" target="_blank">{{svg-jar "unsplash" class="fill-darkgrey-d2"}}</a>
                      Unsplash
                  </h1>
                  <span class="gh-input-icon mw88-l flex-auto w-100 mt3 mt0-l">
                      {{svg-jar "search"}}
                      <GhTextInput
                          @class="gh-unsplash-search"
                          @name="searchKeyword"
                          @placeholder="Search free high-resolution photos"
                          @tabindex="1"
                          @shouldFocus={{true}}
                          @autocorrect="off"
                          @value={{readonly this.unsplash.searchTerm}}
                          @input={{action "search" value="target.value"}}
                          @focusIn={{action "setKeyScope"}}
                          @focus-out={{action "resetKeyScope"}}
                      />
                  </span>
              </header>
  
              {{!-- content container --}}
              <div class="relative h-100 overflow-hidden">
                  {{!-- scrollable image container --}}
                  <div class="overflow-auto h-100 w-100 pr8 pl8 pr20-l pl20-l">
                      {{#if this.unsplash.photos}}
                          <section class="gh-unsplash-grid">
                              {{#each this.unsplash.columns as |photos|}}
                                  <div class="gh-unsplash-grid-column">
                                      {{#each photos as |photo|}}
                                          <GhUnsplashPhoto @photo={{photo}} @zoom={{action "zoomPhoto"}} @select={{action "select"}} />
                                      {{/each}}
                                  </div>
                              {{/each}}
                          </section>
                      {{else if (and this.unsplash.searchTerm (not this.unsplash.error this.unsplash.isLoading))}}
                          <section class="gh-unsplash-error h-100 flex items-center justify-center pb30">
                              <div>
                                  <img class="gh-unsplash-error-404" src="assets/img/unsplash-404.png" alt="No photos found" />
                                  <h4>No photos found for '{{this.unsplash.searchTerm}}'</h4>
                              </div>
                          </section>
                      {{/if}}
  
                      {{#if this.unsplash.error}}
                          {{!-- TODO: add better error styles? --}}
                          <section class="gh-unsplash-error h-100 flex items-center justify-center pb30">
                              <div>
                                  <img class="gh-unsplash-error-404" src="assets/img/unsplash-404.png" alt="Network error" />
                                  <h4>{{this.unsplash.error}} (<a href="#" {{action "retry"}}>retry</a>)</h4>
                              </div>
                          </section>
                      {{/if}}
  
                      {{#if this.unsplash.isLoading}}
                          <div class="gh-unsplash-loading h-100 flex items-center justify-center pb30">
                              <div class="gh-loading-spinner"></div>
                          </div>
                      {{/if}}
  
                      <GhScrollTrigger
                          @enter={{action "loadNextPage"}}
                          @triggerOffset={{1000}} />
                  </div>
  
                  {{!-- zoomed image overlay --}}
                  {{#if this.zoomedPhoto}}
                      <div class="absolute flex justify-center top-0 right-0 bottom-0 left-0 pr20 pb10 pl20 bg-white overflow-hidden" {{action "closeZoom"}}>
                          <GhUnsplashPhoto
                              @photo={{this.zoomedPhoto}}
                              @zoomed={{true}}
                              @zoom={{action "closeZoom"}}
                              @select={{action "select"}} />
                      </div>
                  {{/if}}
              </div>
          </div>
      </div>
  
  </LiquidWormhole>
  
  */
  {
    "id": "TOBYiq1Y",
    "block": "{\"symbols\":[\"photos\",\"photo\"],\"statements\":[[8,\"liquid-wormhole\",[],[[\"@class\"],[\"unsplash\"]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[2,\"    \"],[11,\"div\"],[24,0,\"fullscreen-modal-background\"],[24,5,\"z-index: 999\"],[4,[38,0],[[32,0],\"close\"],null],[12],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"absolute top-8 right-8 bottom-8 left-8 br4 overflow-hidden bg-white z-9999\"],[14,\"data-unsplash\",\"\"],[12],[2,\"\\n\"],[2,\"        \"],[11,\"button\"],[24,0,\"absolute top-6 right-6\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"close\"],null],[12],[2,\"\\n            \"],[1,[30,[36,6],[\"close\"],[[\"class\"],[\"w4 stroke-midlightgrey-l2\"]]]],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"flex flex-column h-100\"],[12],[2,\"\\n\"],[2,\"            \"],[10,\"header\"],[14,0,\"flex-shrink-0 flex flex-row-l flex-column justify-between pt6 pr8 pb6 pl8 pt10-l pr20-l pb10-l pl20-l items-center\"],[12],[2,\"\\n                \"],[10,\"h1\"],[14,0,\"flex items-center darkgrey-d2 w-100 nudge-top--4\"],[12],[2,\"\\n                    \"],[10,\"a\"],[14,0,\"dib w8 mr2\"],[14,6,\"https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\"],[14,\"target\",\"_blank\"],[12],[1,[30,[36,6],[\"unsplash\"],[[\"class\"],[\"fill-darkgrey-d2\"]]]],[13],[2,\"\\n                    Unsplash\\n                \"],[13],[2,\"\\n                \"],[10,\"span\"],[14,0,\"gh-input-icon mw88-l flex-auto w-100 mt3 mt0-l\"],[12],[2,\"\\n                    \"],[1,[30,[36,6],[\"search\"],null]],[2,\"\\n                    \"],[8,\"gh-text-input\",[],[[\"@class\",\"@name\",\"@placeholder\",\"@tabindex\",\"@shouldFocus\",\"@autocorrect\",\"@value\",\"@input\",\"@focusIn\",\"@focus-out\"],[\"gh-unsplash-search\",\"searchKeyword\",\"Search free high-resolution photos\",\"1\",true,\"off\",[30,[36,7],[[32,0,[\"unsplash\",\"searchTerm\"]]],null],[30,[36,0],[[32,0],\"search\"],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"setKeyScope\"],null],[30,[36,0],[[32,0],\"resetKeyScope\"],null]]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n\"],[2,\"            \"],[10,\"div\"],[14,0,\"relative h-100 overflow-hidden\"],[12],[2,\"\\n\"],[2,\"                \"],[10,\"div\"],[14,0,\"overflow-auto h-100 w-100 pr8 pl8 pr20-l pl20-l\"],[12],[2,\"\\n\"],[6,[37,3],[[32,0,[\"unsplash\",\"photos\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"section\"],[14,0,\"gh-unsplash-grid\"],[12],[2,\"\\n\"],[6,[37,5],[[30,[36,4],[[30,[36,4],[[32,0,[\"unsplash\",\"columns\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"div\"],[14,0,\"gh-unsplash-grid-column\"],[12],[2,\"\\n\"],[6,[37,5],[[30,[36,4],[[30,[36,4],[[32,1]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                        \"],[8,\"gh-unsplash-photo\",[],[[\"@photo\",\"@zoom\",\"@select\"],[[32,2],[30,[36,0],[[32,0],\"zoomPhoto\"],null],[30,[36,0],[[32,0],\"select\"],null]]],null],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"                                \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"                        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,2],[[32,0,[\"unsplash\",\"searchTerm\"]],[30,[36,1],[[32,0,[\"unsplash\",\"error\"]],[32,0,[\"unsplash\",\"isLoading\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"section\"],[14,0,\"gh-unsplash-error h-100 flex items-center justify-center pb30\"],[12],[2,\"\\n                            \"],[10,\"div\"],[12],[2,\"\\n                                \"],[10,\"img\"],[14,0,\"gh-unsplash-error-404\"],[14,\"src\",\"assets/img/unsplash-404.png\"],[14,\"alt\",\"No photos found\"],[12],[13],[2,\"\\n                                \"],[10,\"h4\"],[12],[2,\"No photos found for '\"],[1,[32,0,[\"unsplash\",\"searchTerm\"]]],[2,\"'\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,3],[[32,0,[\"unsplash\",\"error\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"section\"],[14,0,\"gh-unsplash-error h-100 flex items-center justify-center pb30\"],[12],[2,\"\\n                            \"],[10,\"div\"],[12],[2,\"\\n                                \"],[10,\"img\"],[14,0,\"gh-unsplash-error-404\"],[14,\"src\",\"assets/img/unsplash-404.png\"],[14,\"alt\",\"Network error\"],[12],[13],[2,\"\\n                                \"],[10,\"h4\"],[12],[1,[32,0,[\"unsplash\",\"error\"]]],[2,\" (\"],[11,\"a\"],[24,6,\"#\"],[4,[38,0],[[32,0],\"retry\"],null],[12],[2,\"retry\"],[13],[2,\")\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,3],[[32,0,[\"unsplash\",\"isLoading\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-unsplash-loading h-100 flex items-center justify-center pb30\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-loading-spinner\"],[12],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[8,\"gh-scroll-trigger\",[],[[\"@enter\",\"@triggerOffset\"],[[30,[36,0],[[32,0],\"loadNextPage\"],null],1000]],null],[2,\"\\n                \"],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"zoomedPhoto\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[11,\"div\"],[24,0,\"absolute flex justify-center top-0 right-0 bottom-0 left-0 pr20 pb10 pl20 bg-white overflow-hidden\"],[4,[38,0],[[32,0],\"closeZoom\"],null],[12],[2,\"\\n                        \"],[8,\"gh-unsplash-photo\",[],[[\"@photo\",\"@zoomed\",\"@zoom\",\"@select\"],[[32,0,[\"zoomedPhoto\"]],true,[30,[36,0],[[32,0],\"closeZoom\"],null],[30,[36,0],[[32,0],\"select\"],null]]],null],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"not\",\"and\",\"if\",\"-track-array\",\"each\",\"svg-jar\",\"readonly\"]}",
    "moduleName": "ghost-admin/components/gh-unsplash.hbs"
  });
  /* global key */


  const ONE_COLUMN_WIDTH = 540;
  const TWO_COLUMN_WIDTH = 940;

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend(_shortcuts.default, {
    resizeDetector: Ember.inject.service(),
    unsplash: Ember.inject.service(),
    ui: Ember.inject.service(),
    shortcuts: null,
    tagName: '',
    zoomedPhoto: null,
    searchTerm: null,

    // closure actions
    close() {},

    select() {},

    sideNavHidden: Ember.computed.or('ui.{isFullScreen,showMobileMenu}'),

    init() {
      this._super(...arguments);

      this.shortcuts = {
        escape: {
          action: 'handleEscape',
          scope: 'all'
        }
      };
    },

    didReceiveAttrs() {
      this._super(...arguments);

      if (this.searchTerm !== this._searchTerm) {
        this.unsplash.updateSearch(this.searchTerm);
      }

      this._searchTerm = this.searchTerm;
    },

    didInsertElement() {
      this._super(...arguments);

      this._resizeCallback = Ember.run.bind(this, this._handleResize);
      this.resizeDetector.setup('[data-unsplash]', this._resizeCallback);
      this.registerShortcuts();
    },

    willDestroyElement() {
      this.resizeDetector.teardown('[data-unsplash]', this._resizeCallback);
      this.removeShortcuts();
      this.send('resetKeyScope');

      this._super(...arguments);
    },

    actions: {
      loadNextPage() {
        this.unsplash.loadNextPage();
      },

      search(term) {
        this.unsplash.updateSearch(term);
        this.send('closeZoom');
      },

      zoomPhoto(photo) {
        this.set('zoomedPhoto', photo);
      },

      closeZoom() {
        this.set('zoomedPhoto', null);
      },

      select(photo) {
        this.unsplash.triggerDownload(photo);
        let selectParams = {
          src: photo.urls.regular.replace(/&w=1080/, '&w=2000'),
          width: photo.width,
          height: photo.height,
          alt: photo.description || '',
          caption: `Photo by <a href="${photo.user.links.html}?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit">${photo.user.name}</a> / <a href="https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit">Unsplash</a>`
        };
        this.select(selectParams);
        this.close();
      },

      close() {
        this.close();
      },

      retry() {
        this.unsplash.retryLastRequest();
      },

      setKeyScope() {
        key.setScope('unsplash');
      },

      resetKeyScope() {
        key.setScope('default');
      },

      handleEscape() {
        if (this.zoomedPhoto) {
          return this.send('closeZoom');
        }

        this.close();
      }

    },

    _handleResize(element) {
      let width = element.clientWidth;
      let columns = 3;

      if (width <= ONE_COLUMN_WIDTH) {
        columns = 1;
      } else if (width <= TWO_COLUMN_WIDTH) {
        columns = 2;
      }

      this.unsplash.changeColumnCount(columns);
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-uploader", ["exports", "ghost-admin/utils/ghost-paths", "ghost-admin/components/gh-image-uploader", "ember-concurrency"], function (_exports, _ghostPaths, _ghImageUploader, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{yield (hash
      cancel=(action "cancel")
      errors=this.errors
      files=this.files
      isUploading=this._uploadFiles.isRunning
      progressBar=(component "gh-progress-bar" percentage=this.uploadPercentage)
      setFiles=(action "setFiles")
      registerFileInput=(action "registerFileInput")
      triggerFileDialog=(action "triggerFileDialog")
      imageExtensions=this.imageExtensions
      imageMimeTypes=this.imageMimeTypes
      iconExtensions=this.iconExtensions
      iconMimeTypes=this.iconMimeTypes
  )}}
  
  */
  {
    "id": "hB0rEz8l",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[18,1,[[30,[36,2],null,[[\"cancel\",\"errors\",\"files\",\"isUploading\",\"progressBar\",\"setFiles\",\"registerFileInput\",\"triggerFileDialog\",\"imageExtensions\",\"imageMimeTypes\",\"iconExtensions\",\"iconMimeTypes\"],[[30,[36,0],[[32,0],\"cancel\"],null],[32,0,[\"errors\"]],[32,0,[\"files\"]],[32,0,[\"_uploadFiles\",\"isRunning\"]],[30,[36,1],[\"gh-progress-bar\"],[[\"percentage\"],[[32,0,[\"uploadPercentage\"]]]]],[30,[36,0],[[32,0],\"setFiles\"],null],[30,[36,0],[[32,0],\"registerFileInput\"],null],[30,[36,0],[[32,0],\"triggerFileDialog\"],null],[32,0,[\"imageExtensions\"]],[32,0,[\"imageMimeTypes\"]],[32,0,[\"iconExtensions\"]],[32,0,[\"iconMimeTypes\"]]]]]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"component\",\"hash\"]}",
    "moduleName": "ghost-admin/components/gh-uploader.hbs"
  });

  // TODO: this is designed to be a more re-usable/composable upload component, it
  // should be able to replace the duplicated upload logic in:
  // - gh-image-uploader
  // - gh-file-uploader
  //
  // In order to support the above components we'll need to introduce an
  // "allowMultiple" attribute so that single-image uploads don't allow multiple
  // simultaneous uploads
  const MAX_SIMULTANEOUS_UPLOADS = 2;
  /**
   * Result from a file upload
   * @typedef {Object} UploadResult
   * @property {string} fileName - file name, eg "my-image.png"
   * @property {string} url - url relative to Ghost root,eg "/content/images/2017/05/my-image.png"
   */

  const UploadTracker = Ember.Object.extend({
    file: null,
    total: 0,
    loaded: 0,

    init() {
      this._super(...arguments);

      this.total = this.file && this.file.size || 0;
    },

    update(_ref2) {
      let {
        loaded,
        total
      } = _ref2;
      this.total = total;
      this.loaded = loaded;
    }

  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    ajax: Ember.inject.service(),
    tagName: '',
    // Public attributes
    accept: '',
    extensions: '',
    files: null,
    paramName: 'file',
    paramsHash: null,
    resourceName: 'images',
    uploadUrl: null,
    requestMethod: 'post',
    // Interal attributes
    errors: null,
    // [{fileName: 'x', message: 'y'}, ...]
    totalSize: 0,
    uploadedSize: 0,
    uploadPercentage: 0,
    uploadUrls: null,
    // [{filename: 'x', url: 'y'}],
    // Private
    _defaultUploadUrl: '/images/upload/',
    _files: null,
    _uploadTrackers: null,

    // Closure actions
    onCancel() {},

    onComplete() {},

    onFailed() {},

    onStart() {},

    onUploadStart() {},

    onUploadFailure() {},

    onUploadSuccess() {},

    // Optional closure actions
    // validate(file) {}
    init() {
      this._super(...arguments);

      this.set('errors', []);
      this.set('uploadUrls', []);
      this._uploadTrackers = [];

      if (!this.paramsHash) {
        this.set('paramsHash', {
          purpose: 'image'
        });
      }

      this.set('imageExtensions', _ghImageUploader.IMAGE_EXTENSIONS);
      this.set('imageMimeTypes', _ghImageUploader.IMAGE_MIME_TYPES);
      this.set('iconExtensions', _ghImageUploader.ICON_EXTENSIONS);
      this.set('iconMimeTypes', _ghImageUploader.ICON_MIME_TYPES);
    },

    didReceiveAttrs() {
      this._super(...arguments); // set up any defaults


      if (!this.uploadUrl) {
        this.set('uploadUrl', this._defaultUploadUrl);
      } // if we have new files, validate and start an upload


      let files = this.files;

      this._setFiles(files);
    },

    actions: {
      registerFileInput(input) {
        this.fileInput = input;
      },

      triggerFileDialog() {
        if (!this.fileInput) {
          // eslint-disable-next-line
          console.error('When using uploader.triggerFileDialog you must call uploader.registerFileInput first');
          return;
        }

        this.fileInput.click();
      },

      setFiles(files, resetInput) {
        this._setFiles(files);

        if (resetInput) {
          this.fileInput = resetInput();
        }
      },

      cancel() {
        this._reset();

        this.onCancel();
      }

    },

    _setFiles(files) {
      this.set('files', files);

      if (files && files !== this._files) {
        if (this.get('_uploadFiles.isRunning')) {
          // eslint-disable-next-line
          console.error('Adding new files whilst an upload is in progress is not supported.');
        }

        this._files = files; // we cancel early if any file fails client-side validation

        if (this._validate()) {
          this._uploadFiles.perform(files);
        }
      }
    },

    _validate() {
      let files = this.files;

      let validate = this.validate || this._defaultValidator.bind(this);

      let ok = [];
      let errors = []; // NOTE: for...of loop results in a transpilation that errors in Edge,
      // once we drop IE11 support we should be able to use native for...of

      for (let i = 0; i < files.length; i += 1) {
        let file = files[i];
        let result = validate(file);

        if (result === true) {
          ok.push(file);
        } else {
          errors.push({
            fileName: file.name,
            message: result
          });
        }
      }

      if (Ember.isEmpty(errors)) {
        return true;
      }

      this.set('errors', errors);
      this.onFailed(errors);
      return false;
    },

    // we only check the file extension by default because IE doesn't always
    // expose the mime-type, we'll rely on the API for final validation
    _defaultValidator(file) {
      let extensions = this.extensions;
      let [, extension] = /(?:\.([^.]+))?$/.exec(file.name); // if extensions is falsy exit early and accept all files

      if (!extensions) {
        return true;
      }

      if (!Ember.isArray(extensions)) {
        extensions = extensions.split(',');
      }

      if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
        let validExtensions = `.${extensions.join(', .').toUpperCase()}`;
        return `The file type you uploaded is not supported. Please use ${validExtensions}`;
      }

      return true;
    },

    _uploadFiles: (0, _emberConcurrency.task)(function* (files) {
      let uploads = [];

      this._reset();

      this.onStart(files); // NOTE: for...of loop results in a transpilation that errors in Edge,
      // once we drop IE11 support we should be able to use native for...of

      for (let i = 0; i < files.length; i += 1) {
        let file = files[i];
        let tracker = UploadTracker.create({
          file
        });

        this._uploadTrackers.pushObject(tracker);

        uploads.push(this._uploadFile.perform(tracker, file, i));
      } // populates this.errors and this.uploadUrls


      yield (0, _emberConcurrency.all)(uploads);

      if (!Ember.isEmpty(this.errors)) {
        this.onFailed(this.errors);
      }

      this.onComplete(this.uploadUrls);
    }).drop(),
    // eslint-disable-next-line ghost/ember/order-in-components
    _uploadFile: (0, _emberConcurrency.task)(function* (tracker, file, index) {
      let ajax = this.ajax;

      let formData = this._getFormData(file);

      let url = `${(0, _ghostPaths.default)().apiRoot}${this.uploadUrl}`;
      let metadata = null;

      try {
        metadata = yield Promise.resolve(this.onUploadStart(file));
        let response = yield ajax[this.requestMethod](url, {
          data: formData,
          processData: false,
          contentType: false,
          dataType: 'text',
          xhr: () => {
            let xhr = new window.XMLHttpRequest();
            xhr.upload.addEventListener('progress', event => {
              Ember.run(() => {
                tracker.update(event);

                this._updateProgress();
              });
            }, false);
            return xhr;
          }
        }); // force tracker progress to 100% in case we didn't get a final event,
        // eg. when using mirage

        tracker.update({
          loaded: file.size,
          total: file.size
        });

        this._updateProgress();

        let uploadResponse;
        let responseUrl;

        try {
          uploadResponse = JSON.parse(response);
        } catch (e) {
          if (!(e instanceof SyntaxError)) {
            throw e;
          }
        }

        if (uploadResponse) {
          let resource = Ember.get(uploadResponse, this.resourceName);

          if (resource && Ember.isArray(resource) && resource[0]) {
            responseUrl = Ember.get(resource[0], 'url');
          }
        }

        let result = {
          url: responseUrl,
          fileName: file.name
        };
        this.uploadUrls[index] = result;
        this.onUploadSuccess(result, metadata);
        return true;
      } catch (error) {
        // grab custom error message if present
        let message = error.payload && error.payload.errors && error.payload.errors[0].message || '';
        let context = error.payload && error.payload.errors && error.payload.errors[0].context || ''; // fall back to EmberData/ember-ajax default message for error type

        if (!message) {
          message = error.message;
        }

        let result = {
          message,
          context,
          fileName: file.name
        }; // TODO: check for or expose known error types?

        this.errors.pushObject(result);
        this.onUploadFailure(result, metadata);
      }
    }).maxConcurrency(MAX_SIMULTANEOUS_UPLOADS).enqueue(),

    // NOTE: this is necessary because the API doesn't accept direct file uploads
    _getFormData(file) {
      let formData = new FormData();
      formData.append(this.paramName, file, file.name);
      Object.keys(this.paramsHash || {}).forEach(key => {
        formData.append(key, this.paramsHash[key]);
      });
      return formData;
    },

    // TODO: this was needed because using CPs directly resulted in infrequent updates
    // - I think this was because updates were being wrapped up to save
    // computation but that hypothesis needs testing
    _updateProgress() {
      if (this.isDestroyed || this.isDestroying) {
        return;
      }

      let trackers = this._uploadTrackers;
      let totalSize = trackers.reduce((total, tracker) => total + tracker.get('total'), 0);
      let uploadedSize = trackers.reduce((total, tracker) => total + tracker.get('loaded'), 0);
      this.set('totalSize', totalSize);
      this.set('uploadedSize', uploadedSize);

      if (totalSize === 0 || uploadedSize === 0) {
        return;
      }

      let uploadPercentage = Math.round(uploadedSize / totalSize * 100);
      this.set('uploadPercentage', uploadPercentage);
    },

    _reset() {
      this.set('errors', []);
      this.set('totalSize', 0);
      this.set('uploadedSize', 0);
      this.set('uploadPercentage', 0);
      this.set('uploadUrls', []);
      this._uploadTrackers = [];
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-url-input", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class;

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <GhTextInput
      @value={{this.value}}
      @type="text"
      @input={{setValue}}
      @focus-out={{validateUrlInput}}
      @placeholder={{placeholder}}
  />
  
  
  */
  {
    "id": "dsCr6snK",
    "block": "{\"symbols\":[],\"statements\":[[8,\"gh-text-input\",[],[[\"@value\",\"@type\",\"@input\",\"@focus-out\",\"@placeholder\"],[[32,0,[\"value\"]],\"text\",[34,0],[34,1],[34,2]]],null],[2,\"\\n\\n\"]],\"hasEval\":false,\"upvars\":[\"setValue\",\"validateUrlInput\",\"placeholder\"]}",
    "moduleName": "ghost-admin/components/gh-url-input.hbs"
  });

  function ensureEndsWith(string, endsWith) {
    return string.endsWith(endsWith) ? string : string + endsWith;
  }

  function removeLeadingSlash(string) {
    return string.replace(/^\//, '');
  }

  let GhUrlInput = (_dec = Ember._action, _dec2 = Ember._action, (_class = class GhUrlInput extends _component.default {
    constructor(owner, args) {
      super(owner, args);
      this.baseUrl = ensureEndsWith(args.baseUrl, '/');
      this.value = args.value && args.value !== '/' ? new URL(removeLeadingSlash(args.value), this.baseUrl).href : '';
      this.setResult = args.setResult;
      this.validateUrl = args.validateUrl;
      this.placeholder = args.placeholder;
    }

    setValue(event) {
      this.value = event.target.value;
      this.setResult(this.result);
    }

    validateUrlInput() {
      this.validateUrl(this.result);
    }

    get result() {
      try {
        return new URL(removeLeadingSlash(this.value), this.baseUrl);
      } catch (err) {
        return null;
      }
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "setValue", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "setValue"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "validateUrlInput", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "validateUrlInput"), _class.prototype)), _class));
  _exports.default = GhUrlInput;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, GhUrlInput);
});
;define("ghost-admin/components/gh-url-preview", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{this.url}}
  
  */
  {
    "id": "B7Cdxahk",
    "block": "{\"symbols\":[],\"statements\":[[1,[32,0,[\"url\"]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-url-preview.hbs"
  });

  /*
  Example usage:
  {{gh-url-preview prefix="tag" slug=theSlugValue tagName="p" classNames="description"}}
  */
  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    config: Ember.inject.service(),
    classNames: 'ghost-url-preview',
    prefix: null,
    slug: null,
    url: Ember.computed('slug', function () {
      // Get the blog URL and strip the scheme
      let blogUrl = this.get('config.blogUrl'); // Remove `http[s]://`

      let noSchemeBlogUrl = blogUrl.substr(blogUrl.indexOf('://') + 3); // Get the prefix and slug values

      let prefix = this.prefix ? `${this.prefix}/` : '';
      let slug = this.slug ? `${this.slug}/` : ''; // Join parts of the URL together with slashes

      let theUrl = `${noSchemeBlogUrl}/${prefix}${slug}`;
      return theUrl;
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-user-active", ["exports", "moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{yield this}}
  
  */
  {
    "id": "c5qWiOnQ",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[18,1,[[32,0]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-user-active.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    tagName: '',
    user: null,
    lastLoginUTC: Ember.computed('user.lastLoginUTC', function () {
      let lastLoginUTC = this.get('user.lastLoginUTC');
      return lastLoginUTC ? (0, _moment.default)(lastLoginUTC).fromNow() : '(Never)';
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-user-invited", ["exports", "moment", "ember-ajax/errors"], function (_exports, _moment, _errors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{yield this}}
  
  */
  {
    "id": "VVlI1rDE",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[18,1,[[32,0]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/components/gh-user-invited.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    notifications: Ember.inject.service(),
    store: Ember.inject.service(),
    tagName: '',
    invite: null,
    isSending: false,
    createdAt: Ember.computed('invite.createdAtUTC', function () {
      let createdAtUTC = this.get('invite.createdAtUTC');
      return createdAtUTC ? (0, _moment.default)(createdAtUTC).fromNow() : '';
    }),
    expiresAt: Ember.computed('invite.expires', function () {
      let expires = this.get('invite.expires');
      return expires ? (0, _moment.default)(expires).fromNow() : '';
    }),
    isExpired: Ember.computed('invite.expires', function () {
      let expires = this.get('invite.expires');
      let now = new Date().valueOf();
      return expires < now;
    }),
    actions: {
      resend() {
        let invite = this.invite;
        let notifications = this.notifications;
        this.set('isSending', true);
        invite.resend().then(result => {
          let notificationText = `Invitation resent! (${invite.get('email')})`; // the server deletes the old record and creates a new one when
          // resending so we need to update the store accordingly

          invite.unloadRecord();
          this.store.pushPayload('invite', result); // If sending the invitation email fails, the API will still return a status of 201
          // but the invite's status in the response object will be 'invited-pending'.

          if (result.invites[0].status === 'invited-pending') {
            notifications.showAlert('Invitation email was not sent.  Please try resending.', {
              type: 'error',
              key: 'invite.resend.not-sent'
            });
          } else {
            notifications.showNotification(notificationText, {
              icon: 'send-email',
              key: 'invite.resend.success'
            });
          }
        }).catch(error => {
          notifications.showAPIError(error, {
            key: 'invite.resend'
          });
        }).finally(() => {
          this.set('isSending', false);
        });
      },

      revoke() {
        let invite = this.invite;
        let email = invite.get('email');
        let notifications = this.notifications; // reload the invite to get the most up-to-date information

        invite.reload().then(() => {
          invite.destroyRecord().then(() => {
            notifications.showNotification('Invitation revoked', {
              key: 'invite.revoke.success',
              description: `${email}`
            });
          }).catch(error => {
            notifications.showAPIError(error, {
              key: 'invite.revoke'
            });
          });
        }).catch(error => {
          if ((0, _errors.isNotFoundError)(error)) {
            // if the invite no longer exists, then show a warning and reload the route
            let action = this.reload;

            if (action) {
              action();
            }

            notifications.showAlert('This invite has been revoked or a user has already accepted the invitation.', {
              type: 'error',
              delayed: true,
              key: 'invite.revoke.already-accepted'
            });
          } else {
            throw error;
          }
        });
      }

    }
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-user-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="apps-grid-cell tooltip-centered" data-tooltip="{{ if user.isLocked 'Requires password reset to log in'}}">
      <LinkTo @route="settings.staff.user" @model={{user.slug}} data-test-user-id={{user.id}}>
      <article class="apps-card-app">
          <div class="apps-card-left">
              <span class="user-list-item-figure" style={{background-image-style user.profileImageUrl}}>
                  <span class="hidden">Photo of {{user.name}}</span>
              </span>
              <div class="apps-card-meta">
                  <h3 class="apps-card-app-title">{{user.name}}</h3>
                  <p class="apps-card-app-desc">Last seen: {{component.lastLoginUTC}}</p>
              </div>
          </div>
          <div class="apps-card-right">
              {{#if user.isLocked}}
                  <span class="gh-badge locked">{{svg-jar "lock"}}</span>
              {{/if}}
              <div class="apps-configured">
                  {{#if user.isSuspended}}
                      <span class="gh-badge suspended">Suspended</span>
                  {{else}}
                      {{#unless this.session.user.isAuthorOrContributor}}
                          {{#each user.roles as |role|}}
                              <span class="gh-badge {{role.lowerCaseName}}" data-test-role-name>{{role.name}}</span>
                          {{/each}}
                      {{/unless}}
                  {{/if}}
                  {{svg-jar "arrow-right" class="gh-user-arrow-icon"}}
              </div>
          </div>
      </article>
      </LinkTo>
  </div>
  
  */
  {
    "id": "ExTcnIDr",
    "block": "{\"symbols\":[\"role\"],\"statements\":[[10,\"div\"],[14,0,\"apps-grid-cell tooltip-centered\"],[15,\"data-tooltip\",[31,[[30,[36,5],[[35,0,[\"isLocked\"]],\"Requires password reset to log in\"],null]]]],[12],[2,\"\\n    \"],[8,\"link-to\",[[16,\"data-test-user-id\",[34,0,[\"id\"]]]],[[\"@route\",\"@model\"],[\"settings.staff.user\",[34,0,[\"slug\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n            \"],[10,\"span\"],[14,0,\"user-list-item-figure\"],[15,5,[30,[36,6],[[35,0,[\"profileImageUrl\"]]],null]],[12],[2,\"\\n                \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Photo of \"],[1,[35,0,[\"name\"]]],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[1,[35,0,[\"name\"]]],[13],[2,\"\\n                \"],[10,\"p\"],[14,0,\"apps-card-app-desc\"],[12],[2,\"Last seen: \"],[1,[35,7,[\"lastLoginUTC\"]]],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"apps-card-right\"],[12],[2,\"\\n\"],[6,[37,5],[[35,0,[\"isLocked\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"span\"],[14,0,\"gh-badge locked\"],[12],[1,[30,[36,4],[\"lock\"],null]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[10,\"div\"],[14,0,\"apps-configured\"],[12],[2,\"\\n\"],[6,[37,5],[[35,0,[\"isSuspended\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"span\"],[14,0,\"gh-badge suspended\"],[12],[2,\"Suspended\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[32,0,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,2],[[30,[36,1],[[30,[36,1],[[35,0,[\"roles\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"span\"],[15,0,[31,[\"gh-badge \",[32,1,[\"lowerCaseName\"]]]]],[14,\"data-test-role-name\",\"\"],[12],[1,[32,1,[\"name\"]]],[13],[2,\"\\n\"]],\"parameters\":[1]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                \"],[1,[30,[36,4],[\"arrow-right\"],[[\"class\"],[\"gh-user-arrow-icon\"]]]],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"user\",\"-track-array\",\"each\",\"unless\",\"svg-jar\",\"if\",\"background-image-style\",\"component\"]}",
    "moduleName": "ghost-admin/components/gh-user-list-item.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    tagName: ''
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/gh-validation-status-container", ["exports", "ghost-admin/mixins/validation-state"], function (_exports, _validationState) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /**
   * Handles the CSS necessary to show a specific property state. When passed a
   * DS.Errors object and a property name, if the DS.Errors object has errors for
   * the specified property, it will change the CSS to reflect the error state
   * @param  {DS.Errors} errors   The DS.Errors object
   * @param  {string} property    Name of the property
   */
  var _default = Ember.Component.extend(_validationState.default, {
    classNameBindings: ['errorClass'],
    errorClass: Ember.computed('property', 'hasError', 'hasValidated.[]', function () {
      let hasValidated = this.hasValidated;
      let property = this.property;

      if (hasValidated && hasValidated.includes(property)) {
        return this.hasError ? 'error' : 'success';
      } else {
        return '';
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-view-title", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <button {{action "openMobileMenu" target=this.ui}} class="gh-mobilemenu-button" role="presentation">{{svg-jar "icon" class="icon-gh"}}<span class="sr-only">Menu</span></button>
  {{yield}}
  
  */
  {
    "id": "/bt/l597",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[11,\"button\"],[24,0,\"gh-mobilemenu-button\"],[24,\"role\",\"presentation\"],[4,[38,0],[[32,0],\"openMobileMenu\"],[[\"target\"],[[32,0,[\"ui\"]]]]],[12],[1,[30,[36,1],[\"icon\"],[[\"class\"],[\"icon-gh\"]]]],[10,\"span\"],[14,0,\"sr-only\"],[12],[2,\"Menu\"],[13],[13],[2,\"\\n\"],[18,1,null],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/gh-view-title.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    ui: Ember.inject.service(),
    tagName: 'h2',
    classNames: ['view-title']
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/illiquid-model", ["exports", "liquid-fire/components/illiquid-model"], function (_exports, _illiquidModel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _illiquidModel.default;
    }
  });
});
;define("ghost-admin/components/infinity-loader", ["exports", "ember-infinity/components/infinity-loader"], function (_exports, _infinityLoader) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _infinityLoader.default;
  _exports.default = _default;
});
;define("ghost-admin/components/kg-action-bar", ["exports", "koenig-editor/components/kg-action-bar"], function (_exports, _kgActionBar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _kgActionBar.default;
    }
  });
});
;define("ghost-admin/components/koenig-alt-input", ["exports", "koenig-editor/components/koenig-alt-input"], function (_exports, _koenigAltInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigAltInput.default;
    }
  });
});
;define("ghost-admin/components/koenig-basic-html-input", ["exports", "koenig-editor/components/koenig-basic-html-input"], function (_exports, _koenigBasicHtmlInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigBasicHtmlInput.default;
    }
  });
});
;define("ghost-admin/components/koenig-basic-html-textarea", ["exports", "koenig-editor/components/koenig-basic-html-textarea"], function (_exports, _koenigBasicHtmlTextarea) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigBasicHtmlTextarea.default;
    }
  });
});
;define("ghost-admin/components/koenig-caption-input", ["exports", "koenig-editor/components/koenig-caption-input"], function (_exports, _koenigCaptionInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCaptionInput.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-audio", ["exports", "koenig-editor/components/koenig-card-audio"], function (_exports, _koenigCardAudio) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardAudio.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-before-after", ["exports", "koenig-editor/components/koenig-card-before-after"], function (_exports, _koenigCardBeforeAfter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardBeforeAfter.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-bookmark", ["exports", "koenig-editor/components/koenig-card-bookmark"], function (_exports, _koenigCardBookmark) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardBookmark.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-button", ["exports", "koenig-editor/components/koenig-card-button"], function (_exports, _koenigCardButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardButton.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-callout", ["exports", "koenig-editor/components/koenig-card-callout"], function (_exports, _koenigCardCallout) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardCallout.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-code", ["exports", "koenig-editor/components/koenig-card-code"], function (_exports, _koenigCardCode) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardCode.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-email-cta", ["exports", "koenig-editor/components/koenig-card-email-cta"], function (_exports, _koenigCardEmailCta) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardEmailCta.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-email", ["exports", "koenig-editor/components/koenig-card-email"], function (_exports, _koenigCardEmail) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardEmail.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-embed", ["exports", "koenig-editor/components/koenig-card-embed"], function (_exports, _koenigCardEmbed) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardEmbed.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-embed/nft", ["exports", "koenig-editor/components/koenig-card-embed/nft"], function (_exports, _nft) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _nft.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-file", ["exports", "koenig-editor/components/koenig-card-file"], function (_exports, _koenigCardFile) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardFile.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-gallery", ["exports", "koenig-editor/components/koenig-card-gallery"], function (_exports, _koenigCardGallery) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardGallery.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-header", ["exports", "koenig-editor/components/koenig-card-header"], function (_exports, _koenigCardHeader) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardHeader.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-hr", ["exports", "koenig-editor/components/koenig-card-hr"], function (_exports, _koenigCardHr) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardHr.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-html", ["exports", "koenig-editor/components/koenig-card-html"], function (_exports, _koenigCardHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardHtml.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-image", ["exports", "koenig-editor/components/koenig-card-image"], function (_exports, _koenigCardImage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardImage.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-image/selector-tenor", ["exports", "koenig-editor/components/koenig-card-image/selector-tenor"], function (_exports, _selectorTenor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _selectorTenor.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-image/selector-tenor/gif", ["exports", "koenig-editor/components/koenig-card-image/selector-tenor/gif"], function (_exports, _gif) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _gif.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-markdown", ["exports", "koenig-editor/components/koenig-card-markdown"], function (_exports, _koenigCardMarkdown) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardMarkdown.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-paywall", ["exports", "koenig-editor/components/koenig-card-paywall"], function (_exports, _koenigCardPaywall) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardPaywall.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-product", ["exports", "koenig-editor/components/koenig-card-product"], function (_exports, _koenigCardProduct) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardProduct.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-toggle", ["exports", "koenig-editor/components/koenig-card-toggle"], function (_exports, _koenigCardToggle) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardToggle.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-video", ["exports", "koenig-editor/components/koenig-card-video"], function (_exports, _koenigCardVideo) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardVideo.default;
    }
  });
});
;define("ghost-admin/components/koenig-card", ["exports", "koenig-editor/components/koenig-card"], function (_exports, _koenigCard) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCard.default;
    }
  });
});
;define("ghost-admin/components/koenig-editor", ["exports", "koenig-editor/components/koenig-editor"], function (_exports, _koenigEditor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigEditor.default;
    }
  });
});
;define("ghost-admin/components/koenig-link-input", ["exports", "koenig-editor/components/koenig-link-input"], function (_exports, _koenigLinkInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigLinkInput.default;
    }
  });
});
;define("ghost-admin/components/koenig-link-toolbar", ["exports", "koenig-editor/components/koenig-link-toolbar"], function (_exports, _koenigLinkToolbar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigLinkToolbar.default;
    }
  });
});
;define("ghost-admin/components/koenig-media-selector", ["exports", "koenig-editor/components/koenig-media-selector"], function (_exports, _koenigMediaSelector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigMediaSelector.default;
    }
  });
});
;define("ghost-admin/components/koenig-menu-content", ["exports", "koenig-editor/components/koenig-menu-content"], function (_exports, _koenigMenuContent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigMenuContent.default;
    }
  });
});
;define("ghost-admin/components/koenig-plus-menu", ["exports", "koenig-editor/components/koenig-plus-menu"], function (_exports, _koenigPlusMenu) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigPlusMenu.default;
    }
  });
});
;define("ghost-admin/components/koenig-settings-panel", ["exports", "koenig-editor/components/koenig-settings-panel"], function (_exports, _koenigSettingsPanel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigSettingsPanel.default;
    }
  });
});
;define("ghost-admin/components/koenig-slash-menu", ["exports", "koenig-editor/components/koenig-slash-menu"], function (_exports, _koenigSlashMenu) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigSlashMenu.default;
    }
  });
});
;define("ghost-admin/components/koenig-snippet-input", ["exports", "koenig-editor/components/koenig-snippet-input"], function (_exports, _koenigSnippetInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigSnippetInput.default;
    }
  });
});
;define("ghost-admin/components/koenig-text-replacement-html-input", ["exports", "koenig-editor/components/koenig-text-replacement-html-input"], function (_exports, _koenigTextReplacementHtmlInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigTextReplacementHtmlInput.default;
    }
  });
});
;define("ghost-admin/components/koenig-toolbar", ["exports", "koenig-editor/components/koenig-toolbar"], function (_exports, _koenigToolbar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigToolbar.default;
    }
  });
});
;define("ghost-admin/components/lf-get-outlet-state", ["exports", "liquid-fire/components/lf-get-outlet-state"], function (_exports, _lfGetOutletState) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _lfGetOutletState.default;
    }
  });
});
;define("ghost-admin/components/liquid-append", ["exports", "liquid-wormhole/components/liquid-append"], function (_exports, _liquidAppend) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidAppend.default;
    }
  });
});
;define("ghost-admin/components/liquid-bind", ["exports", "liquid-fire/components/liquid-bind"], function (_exports, _liquidBind) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidBind.default;
    }
  });
});
;define("ghost-admin/components/liquid-child", ["exports", "liquid-fire/components/liquid-child"], function (_exports, _liquidChild) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidChild.default;
    }
  });
});
;define("ghost-admin/components/liquid-container", ["exports", "liquid-fire/components/liquid-container"], function (_exports, _liquidContainer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidContainer.default;
    }
  });
});
;define("ghost-admin/components/liquid-destination", ["exports", "liquid-wormhole/components/liquid-destination"], function (_exports, _liquidDestination) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidDestination.default;
    }
  });
});
;define("ghost-admin/components/liquid-if", ["exports", "liquid-fire/components/liquid-if"], function (_exports, _liquidIf) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidIf.default;
    }
  });
});
;define("ghost-admin/components/liquid-measured", ["exports", "liquid-fire/components/liquid-measured"], function (_exports, _liquidMeasured) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidMeasured.default;
    }
  });
  Object.defineProperty(_exports, "measure", {
    enumerable: true,
    get: function () {
      return _liquidMeasured.measure;
    }
  });
});
;define("ghost-admin/components/liquid-outlet", ["exports", "liquid-fire/components/liquid-outlet"], function (_exports, _liquidOutlet) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidOutlet.default;
    }
  });
});
;define("ghost-admin/components/liquid-spacer", ["exports", "liquid-fire/components/liquid-spacer"], function (_exports, _liquidSpacer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidSpacer.default;
    }
  });
});
;define("ghost-admin/components/liquid-sync", ["exports", "liquid-fire/components/liquid-sync"], function (_exports, _liquidSync) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidSync.default;
    }
  });
});
;define("ghost-admin/components/liquid-unless", ["exports", "liquid-fire/components/liquid-unless"], function (_exports, _liquidUnless) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidUnless.default;
    }
  });
});
;define("ghost-admin/components/liquid-versions", ["exports", "liquid-fire/components/liquid-versions"], function (_exports, _liquidVersions) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidVersions.default;
    }
  });
});
;define("ghost-admin/components/liquid-wormhole", ["exports", "liquid-wormhole/components/liquid-wormhole"], function (_exports, _liquidWormhole) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidWormhole.default;
    }
  });
});
;define("ghost-admin/components/maybe-in-element", ["exports", "ember-maybe-in-element/components/maybe-in-element"], function (_exports, _maybeInElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _maybeInElement.default;
    }
  });
});
;define("ghost-admin/components/member/activity-feed", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#let (members-event-fetcher filter=(members-event-filter member=@member.id) pageSize=5) as |eventsFetcher|}}
      {{#if eventsFetcher.data}}<h4 class="gh-main-section-header small bn">Activity</h4>{{/if}}
      <div class="gh-main-section-content bordered {{if eventsFetcher.data "" "mt8"}}">
          <div class="gh-member-feed" ...attributes>
              <div class="flex-auto flex flex-column items-stretch {{if eventsFetcher.data "justify-between" "h-100 justify-center"}}">
                  <div>
                      {{#if eventsFetcher.isLoading}}
                          <div class="relative h17"><GhLoadingSpinner class="h30" /></div>
                      {{else if eventsFetcher.data}}
                          {{#each eventsFetcher.data as |rawEvent|}}
                              {{#let (parse-member-event rawEvent) as |event|}}
                                  <div class="gh-member-feed-row">
                                      <div class="gh-member-feed-container">
                                          <div class="gh-member-feed-icon">
                                              {{svg-jar event.icon class=event.iconClass}}
                                          </div>
                                          <div class="gh-member-feed-detail">
                                              <div class="gh-member-feed-event">
                                                  {{#if event.email}}
                                                      <GhEmailPreviewLink @data={{event.email}} class="gh-member-feed-title" />
                                                  {{else}}
                                                      <span class="gh-member-feed-title">{{event.action}} {{event.object}}</span>
                                                  {{/if}}
                                              </div>
                                              <div class="gh-member-feed-time">
                                                  {{moment-from-now event.timestamp}}
                                              </div>
                                          </div>
                                      </div>
                                  </div>
                              {{/let}}
                          {{/each}}
  
                          <div class="gh-member-feed-footer">
                              <LinkTo @route="members-activity" @query={{hash excludedEvents=null member=@member.id}}>See all activity →</LinkTo>
                          </div>
                      {{else}}
                          <div class="gh-members-no-data gh-members-no-list">
                              <div class="lightgrey">{{svg-jar "no-data-list"}}</div>
                              <h4>Activity</h4>
                              <p>
                                  All events related to this member will be shown here.
                              </p>
                          </div>
                      {{/if}}
                  </div>
              </div>
          </div>
      </div>
  {{/let}}
  */
  {
    "id": "nSRHSRXQ",
    "block": "{\"symbols\":[\"eventsFetcher\",\"rawEvent\",\"event\",\"@member\",\"&attrs\"],\"statements\":[[6,[37,4],[[30,[36,9],null,[[\"filter\",\"pageSize\"],[[30,[36,8],null,[[\"member\"],[[32,4,[\"id\"]]]]],5]]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[6,[37,1],[[32,1,[\"data\"]]],null,[[\"default\"],[{\"statements\":[[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Activity\"],[13]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"div\"],[15,0,[31,[\"gh-main-section-content bordered \",[30,[36,1],[[32,1,[\"data\"]],\"\",\"mt8\"],null]]]],[12],[2,\"\\n        \"],[11,\"div\"],[24,0,\"gh-member-feed\"],[17,5],[12],[2,\"\\n            \"],[10,\"div\"],[15,0,[31,[\"flex-auto flex flex-column items-stretch \",[30,[36,1],[[32,1,[\"data\"]],\"justify-between\",\"h-100 justify-center\"],null]]]],[12],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n\"],[6,[37,1],[[32,1,[\"isLoading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"relative h17\"],[12],[8,\"gh-loading-spinner\",[[24,0,\"h30\"]],[[],[]],null],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[32,1,[\"data\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,6],[[30,[36,5],[[30,[36,5],[[32,1,[\"data\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,4],[[30,[36,3],[[32,2]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"div\"],[14,0,\"gh-member-feed-row\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-member-feed-container\"],[12],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-member-feed-icon\"],[12],[2,\"\\n                                            \"],[1,[30,[36,0],[[32,3,[\"icon\"]]],[[\"class\"],[[32,3,[\"iconClass\"]]]]]],[2,\"\\n                                        \"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-member-feed-detail\"],[12],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-member-feed-event\"],[12],[2,\"\\n\"],[6,[37,1],[[32,3,[\"email\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                    \"],[8,\"gh-email-preview-link\",[[24,0,\"gh-member-feed-title\"]],[[\"@data\"],[[32,3,[\"email\"]]]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                                    \"],[10,\"span\"],[14,0,\"gh-member-feed-title\"],[12],[1,[32,3,[\"action\"]]],[2,\" \"],[1,[32,3,[\"object\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                            \"],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-member-feed-time\"],[12],[2,\"\\n                                                \"],[1,[30,[36,2],[[32,3,[\"timestamp\"]]],null]],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n\"]],\"parameters\":[3]}]]]],\"parameters\":[2]}]]],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-member-feed-footer\"],[12],[2,\"\\n                            \"],[8,\"link-to\",[],[[\"@route\",\"@query\"],[\"members-activity\",[30,[36,7],null,[[\"excludedEvents\",\"member\"],[null,[32,4,[\"id\"]]]]]]],[[\"default\"],[{\"statements\":[[2,\"See all activity →\"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-members-no-data gh-members-no-list\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"lightgrey\"],[12],[1,[30,[36,0],[\"no-data-list\"],null]],[13],[2,\"\\n                            \"],[10,\"h4\"],[12],[2,\"Activity\"],[13],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"\\n                                All events related to this member will be shown here.\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"moment-from-now\",\"parse-member-event\",\"let\",\"-track-array\",\"each\",\"hash\",\"members-event-filter\",\"members-event-fetcher\"]}",
    "moduleName": "ghost-admin/components/member/activity-feed.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/members-activity/event-type-filter", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class;

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <GhBasicDropdown @verticalPosition="below" as |dd|>
      <dd.Trigger class="gh-btn gh-btn-icon gh-btn-action-icon">
          <span class={{if @excludedEvents "gh-btn-label-green"}}>
              {{svg-jar "filter"}}
              Filter events
          </span>
      </dd.Trigger>
  
      <dd.Content class="gh-member-activity-actions-menu dropdown-menu dropdown-triangle-top-right">
          {{!-- NOTE: re-using ember-power-select-options styles --}}
          <ul class="ember-power-select-options" role="listbox">
              {{#each this.eventTypes as |type idx|}}
                  <li class="ember-power-select-option {{if type.isSelected "selected"}}">
                      <label for="type-{{idx}}">
                          <span>
                              <input type="checkbox" checked={{type.isSelected}} id="type-{{idx}}" name="eventTypes" {{on "input" (fn this.toggleEventType type.event)}}>
                              {{svg-jar type.icon class="gh-member-activity-actions-icon"}}
                              {{type.name}}
                          </span>
                          {{#if type.isSelected}}
                              {{svg-jar "selected" class="gh-member-activity-actions-tick"}}
                          {{/if}}
                      </label>
                  </li>
              {{/each}}
          </ul>
      </dd.Content>
  </GhBasicDropdown>
  */
  {
    "id": "aq3b/eiv",
    "block": "{\"symbols\":[\"dd\",\"type\",\"idx\",\"@excludedEvents\"],\"statements\":[[8,\"gh-basic-dropdown\",[],[[\"@verticalPosition\"],[\"below\"]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[8,[32,1,[\"Trigger\"]],[[24,0,\"gh-btn gh-btn-icon gh-btn-action-icon\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"span\"],[15,0,[30,[36,1],[[32,4],\"gh-btn-label-green\"],null]],[12],[2,\"\\n            \"],[1,[30,[36,0],[\"filter\"],null]],[2,\"\\n            Filter events\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[8,[32,1,[\"Content\"]],[[24,0,\"gh-member-activity-actions-menu dropdown-menu dropdown-triangle-top-right\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[2,\"        \"],[10,\"ul\"],[14,0,\"ember-power-select-options\"],[14,\"role\",\"listbox\"],[12],[2,\"\\n\"],[6,[37,5],[[30,[36,4],[[30,[36,4],[[32,0,[\"eventTypes\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"li\"],[15,0,[31,[\"ember-power-select-option \",[30,[36,1],[[32,2,[\"isSelected\"]],\"selected\"],null]]]],[12],[2,\"\\n                    \"],[10,\"label\"],[15,\"for\",[31,[\"type-\",[32,3]]]],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"\\n                            \"],[11,\"input\"],[16,\"checked\",[32,2,[\"isSelected\"]]],[16,1,[31,[\"type-\",[32,3]]]],[24,3,\"eventTypes\"],[24,4,\"checkbox\"],[4,[38,3],[\"input\",[30,[36,2],[[32,0,[\"toggleEventType\"]],[32,2,[\"event\"]]],null]],null],[12],[13],[2,\"\\n                            \"],[1,[30,[36,0],[[32,2,[\"icon\"]]],[[\"class\"],[\"gh-member-activity-actions-icon\"]]]],[2,\"\\n                            \"],[1,[32,2,[\"name\"]]],[2,\"\\n                        \"],[13],[2,\"\\n\"],[6,[37,1],[[32,2,[\"isSelected\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[1,[30,[36,0],[\"selected\"],[[\"class\"],[\"gh-member-activity-actions-tick\"]]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[2,3]}]]],[2,\"        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[1]}]]]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"fn\",\"on\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/members-activity/event-type-filter.hbs"
  });

  const ALL_EVENT_TYPES = [{
    event: 'signup_event',
    icon: 'event-filter-signup',
    name: 'Signups'
  }, {
    event: 'login_event',
    icon: 'event-filter-login',
    name: 'Logins'
  }, {
    event: 'subscription_event',
    icon: 'event-filter-subscription',
    name: 'Paid subscriptions'
  }, {
    event: 'payment_event',
    icon: 'event-filter-payment',
    name: 'Payments'
  }, {
    event: 'newsletter_event',
    icon: 'event-filter-newsletter',
    name: 'Email subscriptions'
  }, {
    event: 'email_opened_event',
    icon: 'event-filter-email-opened',
    name: 'Email opens'
  }, {
    event: 'email_delivered_event',
    icon: 'event-filter-email-delivered',
    name: 'Email deliveries'
  }, {
    event: 'email_failed_event',
    icon: 'event-filter-email-failed',
    name: 'Email failures'
  }];
  let MembersActivityEventTypeFilter = (_dec = Ember._action, (_class = class MembersActivityEventTypeFilter extends _component.default {
    get availableEventTypes() {
      if (this.args.hiddenEvents?.length) {
        return ALL_EVENT_TYPES.filter(t => !this.args.hiddenEvents.includes(t.event));
      } else {
        return ALL_EVENT_TYPES;
      }
    }

    get eventTypes() {
      const excludedEvents = (this.args.excludedEvents || '').split(',');
      return this.availableEventTypes.map(type => ({
        event: type.event,
        icon: type.icon,
        name: type.name,
        isSelected: !excludedEvents.includes(type.event)
      }));
    }

    toggleEventType(eventType) {
      const excludedEvents = new Set(this.eventTypes.reject(type => type.isSelected).map(type => type.event));

      if (excludedEvents.has(eventType)) {
        excludedEvents.delete(eventType);
      } else {
        excludedEvents.add(eventType);
      }

      const excludeString = Array.from(excludedEvents).join(',');
      this.args.onChange(excludeString || null);
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "toggleEventType", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "toggleEventType"), _class.prototype)), _class));
  _exports.default = MembersActivityEventTypeFilter;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, MembersActivityEventTypeFilter);
});
;define("ghost-admin/components/members-activity/member-filter-trigger", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-btn"><span>Filter member {{svg-jar "arrow-down-small"}}</span></div>
  
  */
  {
    "id": "lWb3OU/5",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"gh-btn\"],[12],[10,\"span\"],[12],[2,\"Filter member \"],[1,[30,[36,0],[\"arrow-down-small\"],null]],[13],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/members-activity/member-filter-trigger.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/members-activity/member-filter", ["exports", "@glimmer/component", "ember-concurrency"], function (_exports, _component, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if @selected}}
      <div class="gh-btn" {{on "click" (fn @onChange null)}}>
          <span class="gh-btn-label-green">
              {{@selected.name}}
              &times;
          </span>
      </div>
  {{else}}
      <PowerSelect
          @searchEnabled={{false}}
          @search={{perform this.searchMembersTask}}
          @selected={{@selected}}
          @onChange={{@onChange}}
          @triggerComponent="gh-input-with-select/trigger"
          @placeholder="Search members"
          @extra={{hash showSearchMessage=false}}
          as |member|
      >
          <strong>{{member.name}}</strong><br>
          {{member.email}}
      </PowerSelect>
  {{/if}}
  */
  {
    "id": "dK2tkq9A",
    "block": "{\"symbols\":[\"member\",\"@selected\",\"@onChange\"],\"statements\":[[6,[37,4],[[32,2]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[11,\"div\"],[24,0,\"gh-btn\"],[4,[38,3],[\"click\",[30,[36,2],[[32,3],null],null]],null],[12],[2,\"\\n        \"],[10,\"span\"],[14,0,\"gh-btn-label-green\"],[12],[2,\"\\n            \"],[1,[32,2,[\"name\"]]],[2,\"\\n            ×\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[8,\"power-select\",[],[[\"@searchEnabled\",\"@search\",\"@selected\",\"@onChange\",\"@triggerComponent\",\"@placeholder\",\"@extra\"],[false,[30,[36,0],[[32,0,[\"searchMembersTask\"]]],null],[32,2],[32,3],\"gh-input-with-select/trigger\",\"Search members\",[30,[36,1],null,[[\"showSearchMessage\"],[false]]]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"strong\"],[12],[1,[32,1,[\"name\"]]],[13],[10,\"br\"],[12],[13],[2,\"\\n        \"],[1,[32,1,[\"email\"]]],[2,\"\\n    \"]],\"parameters\":[1]}]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"perform\",\"hash\",\"fn\",\"on\",\"if\"]}",
    "moduleName": "ghost-admin/components/members-activity/member-filter.hbs"
  });

  let MembersActivityMemberFilter = (_dec = Ember.inject.service, _dec2 = Ember._action, (_class = class MembersActivityMemberFilter extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "store", _descriptor, this);
    }

    clear() {
      this.args.onChange(null);
    }

    *searchMembersTask(term) {
      yield (0, _emberConcurrency.timeout)(300); // debounce

      return yield this.store.query('member', {
        search: term,
        limit: 20
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "clear", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "clear"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "searchMembersTask", [_emberConcurrency.task], Object.getOwnPropertyDescriptor(_class.prototype, "searchMembersTask"), _class.prototype)), _class));
  _exports.default = MembersActivityMemberFilter;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, MembersActivityMemberFilter);
});
;define("ghost-admin/components/members-activity/no-events", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="no-posts-box">
      <div class="no-posts">
          {{svg-jar "members-placeholder" class="gh-members-placeholder"}}
          {{#if @filter}}
              <h3>No activities match the current filter</h3>
              <LinkTo @route="members-activity" @query={{reset-query-params "members-activity"}} class="gh-btn gh-btn-lg">
                  <span>Show all activity</span>
              </LinkTo>
          {{else}}
              <h3>No member activity yet</h3>
          {{/if}}
      </div>
  </div>
  */
  {
    "id": "LSK+UQhf",
    "block": "{\"symbols\":[\"@filter\"],\"statements\":[[10,\"div\"],[14,0,\"no-posts-box\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"no-posts\"],[12],[2,\"\\n        \"],[1,[30,[36,1],[\"members-placeholder\"],[[\"class\"],[\"gh-members-placeholder\"]]]],[2,\"\\n\"],[6,[37,2],[[32,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"h3\"],[12],[2,\"No activities match the current filter\"],[13],[2,\"\\n            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-lg\"]],[[\"@route\",\"@query\"],[\"members-activity\",[30,[36,0],[\"members-activity\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Show all activity\"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"h3\"],[12],[2,\"No member activity yet\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"reset-query-params\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/components/members-activity/no-events.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/members-activity/table-row", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#let (parse-member-event @event) as |event|}}
      <tr>  
          {{#unless @hideMemberColumn}}
              <div class="gh-list-data">
                  <LinkTo @route="members-activity" @query={{hash member=event.member.id}}>
                      <div class="flex items-center">
                          <GhMemberAvatar @member={{event.member}} @containerClass="w9 h9 mr3 flex-shrink-0" />
                          <div class="w-80">
                              <h3 class="ma0 pa0 gh-members-list-name {{if (not event.member.name) "gh-members-name-noname"}}">{{or event.member.name event.member.email}}</h3>
                              {{#if event.member.name}}
                                  <p class="ma0 pa0 middarkgrey f8 gh-members-list-email">{{event.member.email}}</p>
                              {{/if}}
                          </div>
                      </div>
                  </LinkTo>
              </div>
          {{/unless}}
          <div class="gh-list-data">
              <div class="gh-members-activity-container">
                  <div class="gh-members-activity-icon">{{svg-jar event.icon}}</div>
                  <div class="gh-members-activity-event">
                      <span class="gh-members-activity-description">
                          {{event.action}}
                          {{event.object}}
                      </span>
                      {{#if event.email}}
                          "<GhEmailPreviewLink @data={{event.email}} />"
                      {{/if}}
                      <span class="highlight">{{event.info}}</span>
                  </div>
              </div>
          </div>
          <div class="gh-list-data">{{moment-format event.timestamp "D MMM YYYY HH:MM"}}</div>
      </tr>
  {{/let}}
  
  */
  {
    "id": "rBQqbq2e",
    "block": "{\"symbols\":[\"event\",\"@hideMemberColumn\",\"@event\"],\"statements\":[[6,[37,8],[[30,[36,7],[[32,3]],null]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"tr\"],[12],[2,\"  \\n\"],[6,[37,4],[[32,2]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n                \"],[8,\"link-to\",[],[[\"@route\",\"@query\"],[\"members-activity\",[30,[36,0],null,[[\"member\"],[[32,1,[\"member\",\"id\"]]]]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                        \"],[8,\"gh-member-avatar\",[],[[\"@member\",\"@containerClass\"],[[32,1,[\"member\"]],\"w9 h9 mr3 flex-shrink-0\"]],null],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"w-80\"],[12],[2,\"\\n                            \"],[10,\"h3\"],[15,0,[31,[\"ma0 pa0 gh-members-list-name \",[30,[36,2],[[30,[36,1],[[32,1,[\"member\",\"name\"]]],null],\"gh-members-name-noname\"],null]]]],[12],[1,[30,[36,3],[[32,1,[\"member\",\"name\"]],[32,1,[\"member\",\"email\"]]],null]],[13],[2,\"\\n\"],[6,[37,2],[[32,1,[\"member\",\"name\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"p\"],[14,0,\"ma0 pa0 middarkgrey f8 gh-members-list-email\"],[12],[1,[32,1,[\"member\",\"email\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-members-activity-container\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-members-activity-icon\"],[12],[1,[30,[36,5],[[32,1,[\"icon\"]]],null]],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-members-activity-event\"],[12],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-members-activity-description\"],[12],[2,\"\\n                        \"],[1,[32,1,[\"action\"]]],[2,\"\\n                        \"],[1,[32,1,[\"object\"]]],[2,\"\\n                    \"],[13],[2,\"\\n\"],[6,[37,2],[[32,1,[\"email\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \\\"\"],[8,\"gh-email-preview-link\",[],[[\"@data\"],[[32,1,[\"email\"]]]],null],[2,\"\\\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[10,\"span\"],[14,0,\"highlight\"],[12],[1,[32,1,[\"info\"]]],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[1,[30,[36,6],[[32,1,[\"timestamp\"]],\"D MMM YYYY HH:MM\"],null]],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]]],\"hasEval\":false,\"upvars\":[\"hash\",\"not\",\"if\",\"or\",\"unless\",\"svg-jar\",\"moment-format\",\"parse-member-event\",\"let\"]}",
    "moduleName": "ghost-admin/components/members-activity/table-row.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/members-activity/table", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <table class="gh-list">
      <thead>
          <tr>
              {{#unless @hideMemberColumn}}
                  <th>Member</th>
              {{/unless}}
              <th>Event</th>
              <th>Time</th>
          </tr>
      </thead>
      <tbody>
          {{#each @events as |event|}}
              <MembersActivity::TableRow @hideMemberColumn={{@hideMemberColumn}} @event={{event}} />
          {{/each}}
      </tbody>
  </table>
  
  */
  {
    "id": "fnHoLQa8",
    "block": "{\"symbols\":[\"event\",\"@hideMemberColumn\",\"@events\"],\"statements\":[[10,\"table\"],[14,0,\"gh-list\"],[12],[2,\"\\n    \"],[10,\"thead\"],[12],[2,\"\\n        \"],[10,\"tr\"],[12],[2,\"\\n\"],[6,[37,0],[[32,2]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"th\"],[12],[2,\"Member\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[10,\"th\"],[12],[2,\"Event\"],[13],[2,\"\\n            \"],[10,\"th\"],[12],[2,\"Time\"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"tbody\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,1],[[30,[36,1],[[32,3]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[8,\"members-activity/table-row\",[],[[\"@hideMemberColumn\",\"@event\"],[[32,2],[32,1]]],null],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"unless\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/members-activity/table.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/modal-add-label-members", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="add-label-members">
      <h1>Add Label</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  {{#if (not this.confirmed)}}
      <div class="modal-body" data-test-state="add-label-unconfirmed">
          <GhMemberSingleLabelInput @onChange={{action "setLabel"}} @triggerId="label-input" data-test-input="" />
          <p class="mt2 ml1">
              Will be added to the currently selected <span class="fw6" data-test-text="member-count">{{gh-pluralize this.model.memberCount "member"}}</span>
          </p>
      </div>
  {{else}}
      <div class="gh-content-box pa" data-test-state="add-complete">
          {{#if this.error}}
              <div class="flex items-center">
                  {{svg-jar "warning" class="w4 h4 fill-red mr2 nudge-top--3"}}
                  <div>
                      <p class="ma0 pa0">
                          <span class="fw5" data-test-text="add-error">{{this.error}}</span>
                      </p>
                  </div>
              </div>
          {{else}}
              <div class="flex items-center">
                  {{svg-jar "check-circle" class="w4 h4 stroke-green mr2"}}
                  <p class="ma0 pa0">
                      Label added to  <span class="fw6" data-test-text="add-count">{{gh-pluralize this.response.stats.successful "member"}}</span>
                      successfully
                  </p>
              </div>
              {{#if this.response.stats.unsuccessful}}
                  <div class="flex items-start mt2" data-test-bulk-label-add-errors>
                      {{svg-jar "warning" class="w4 h4 fill-red mr2 nudge-top--3"}}
                      <div>
                          <p class="ma0 pa0">
                              Failed to add label to <span class="fw5" data-test-text="invalid-count"> {{gh-pluralize this.response.stats.unsuccessful "member"}}</span>
                          </p>
                      </div>
                  </div>
              {{/if}}
          {{/if}}
      </div>
  {{/if}}
  
  <div class="modal-footer">
      {{#if (not this.confirmed)}}
          <button {{action "closeModal"}} class="gh-btn" data-test-button="cancel">
              <span>Cancel</span>
          </button>
  
          <GhTaskButton
              @buttonText="Add Label"
              @successText="Added"
              @disabled={{this.isDisabled}}
              @task={{this.addLabelTask}}
              @class="gh-btn gh-btn-green gh-btn-icon"
              data-test-button="confirm"
          />
      {{else}}
          <button {{action "closeModal"}} class="gh-btn gh-btn-black" data-test-button="close-modal">
              <span>Close</span>
          </button>
      {{/if}}
  </div>
  
  */
  {
    "id": "3TioCbxR",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"add-label-members\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Add Label\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[6,[37,3],[[30,[36,4],[[32,0,[\"confirmed\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"modal-body\"],[14,\"data-test-state\",\"add-label-unconfirmed\"],[12],[2,\"\\n        \"],[8,\"gh-member-single-label-input\",[[24,\"data-test-input\",\"\"]],[[\"@onChange\",\"@triggerId\"],[[30,[36,0],[[32,0],\"setLabel\"],null],\"label-input\"]],null],[2,\"\\n        \"],[10,\"p\"],[14,0,\"mt2 ml1\"],[12],[2,\"\\n            Will be added to the currently selected \"],[10,\"span\"],[14,0,\"fw6\"],[14,\"data-test-text\",\"member-count\"],[12],[1,[30,[36,2],[[32,0,[\"model\",\"memberCount\"]],\"member\"],null]],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"gh-content-box pa\"],[14,\"data-test-state\",\"add-complete\"],[12],[2,\"\\n\"],[6,[37,3],[[32,0,[\"error\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                \"],[1,[30,[36,1],[\"warning\"],[[\"class\"],[\"w4 h4 fill-red mr2 nudge-top--3\"]]]],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"fw5\"],[14,\"data-test-text\",\"add-error\"],[12],[1,[32,0,[\"error\"]]],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                \"],[1,[30,[36,1],[\"check-circle\"],[[\"class\"],[\"w4 h4 stroke-green mr2\"]]]],[2,\"\\n                \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                    Label added to  \"],[10,\"span\"],[14,0,\"fw6\"],[14,\"data-test-text\",\"add-count\"],[12],[1,[30,[36,2],[[32,0,[\"response\",\"stats\",\"successful\"]],\"member\"],null]],[13],[2,\"\\n                    successfully\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"],[6,[37,3],[[32,0,[\"response\",\"stats\",\"unsuccessful\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"flex items-start mt2\"],[14,\"data-test-bulk-label-add-errors\",\"\"],[12],[2,\"\\n                    \"],[1,[30,[36,1],[\"warning\"],[[\"class\"],[\"w4 h4 fill-red mr2 nudge-top--3\"]]]],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                            Failed to add label to \"],[10,\"span\"],[14,0,\"fw5\"],[14,\"data-test-text\",\"invalid-count\"],[12],[2,\" \"],[1,[30,[36,2],[[32,0,[\"response\",\"stats\",\"unsuccessful\"]],\"member\"],null]],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n\"],[6,[37,3],[[30,[36,4],[[32,0,[\"confirmed\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"confirm\"]],[[\"@buttonText\",\"@successText\",\"@disabled\",\"@task\",\"@class\"],[\"Add Label\",\"Added\",[32,0,[\"isDisabled\"]],[32,0,[\"addLabelTask\"]],\"gh-btn gh-btn-green gh-btn-icon\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black\"],[24,\"data-test-button\",\"close-modal\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Close\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"gh-pluralize\",\"if\",\"not\"]}",
    "moduleName": "ghost-admin/components/modal-add-label-members.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    membersStats: Ember.inject.service(),
    selectedLabel: null,
    // Allowed actions
    confirm: () => {},
    isDisabled: Ember.computed.not('selectedLabel'),
    member: Ember.computed.alias('model'),
    actions: {
      confirm() {
        this.addLabelTask.perform();
      },

      setLabel(label) {
        this.set('selectedLabel', label);
      }

    },
    addLabelTask: (0, _emberConcurrency.task)(function* () {
      try {
        const response = yield this.confirm(this.selectedLabel);
        this.set('response', response);
        this.set('confirmed', true);
      } catch (e) {
        if (e.payload?.errors) {
          this.set('confirmed', true);
          this.set('error', e.payload.errors[0].message);
        }

        throw e;
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-base", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: 'section',
    classNames: 'modal-content',
    _previousKeymasterScope: null,
    // Allowed Actions
    closeModal: () => {},

    didInsertElement() {
      this._super(...arguments);

      this._setupShortcuts();
    },

    willDestroyElement() {
      this._super(...arguments);

      this._removeShortcuts();
    },

    actions: {
      confirm() {
        throw new Error('You must override the "confirm" action in your modal component');
      },

      closeModal() {
        this.closeModal();
      }

    },

    _setupShortcuts() {
      Ember.run(function () {
        document.activeElement.blur();
      });
      this._previousKeymasterScope = key.getScope();
      key('enter', 'modal', () => {
        this.send('confirm');
      });
      key('escape', 'modal', event => {
        if (!event.target.dataset.preventEscapeCloseModal) {
          this.send('closeModal');
        }
      });
      key.setScope('modal');
    },

    _removeShortcuts() {
      key.unbind('enter', 'modal');
      key.unbind('escape', 'modal');
      key.setScope(this._previousKeymasterScope);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-custom-view-form", ["exports", "ghost-admin/components/modal-base", "ghost-admin/helpers/reset-query-params", "ember-concurrency"], function (_exports, _modalBase, _resetQueryParams, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="custom-view-form">
      <h1>{{if this.model.isNew "New view" "Edit view"}}</h1>
  </header>
  {{!-- disable mouseDown so it doesn't trigger focus-out validations --}}
  <button class="close" href title="Close" {{action "closeModal"}} {{action (optional this.noop) on="mouseDown"}}>
      {{svg-jar "close"}}
  </button>
  
  <div class="modal-body">
      <fieldset>
          <GhFormGroup @errors={{this.model.errors}} @hasValidated={{this.model.hasValidated}} @property="name">
              <label for="view-name" class="dib fw6">View name</label>
              <GhTextInput
                  @id="view-name"
                  @value={{this.model.name}}
                  @placeholder="Breaking news"
                  @focus-out={{action "validate" "name" target=this.model}}
                  data-test-input="custom-view-name"
              />
              {{#if this.model.errors}}
                  <GhErrorMessage @errors={{this.model.errors}} @property="name" data-test-error="custom-view-name" />
              {{else}}
                  {{#if this.model.isNew}}
                      <p>Saved views appear in the app sidebar.</p>
                  {{/if}}
              {{/if}}
          </GhFormGroup>
      </fieldset>
      <div>
          <label for="view-name" class="dib fw6">Icon color</label>
          <div class="flex justify-between mt3 nl1">
              {{#each this.customViews.availableColors as |color|}}
                  <div class="gh-radio-color">
                      <input
                          type="radio"
                          name="view-color"
                          id="view-{{color}}"
                          checked={{eq color this.delayedModelColor}}
                          value={{color}}
                          {{on "change" (action 'changeColor')}}
                      >
                      <label for="view-{{color}}"><span class="gh-radio-color-{{color}}"></span></label>
                  </div>
              {{/each}}
          </div>
      </div>
  </div>
  
  <div class="modal-footer">
      {{#if this.model.isNew}}
          <button
              class="gh-btn"
              {{action "closeModal"}}
              {{!-- disable mouseDown so it doesn't trigger focus-out validations --}}
              {{on "mousedown" (optional this.noop)}}
              data-test-button="cancel-custom-view-form"
          >
              <span>Cancel</span>
          </button>
      {{else}}
          <button
              class="gh-btn gh-btn-red gh-btn-icon"
              {{on "click" (perform this.deleteTask)}}
              {{on "mousedown" (optional this.noop)}}
              data-test-button="delete-custom-view"
          >
              <span>{{svg-jar "trash"}} Delete</span>
          </button
          >
      {{/if}}
  
      <GhTaskButton
          @buttonText="Save"
          @successText="Saved"
          @task={{this.saveTask}}
          @taskArgs={{this.model}}
          @class="gh-btn gh-btn-black gh-btn-icon"
          data-test-button="save-custom-view" />
  </div>
  */
  {
    "id": "FIc/7ZQE",
    "block": "{\"symbols\":[\"color\"],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"custom-view-form\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[1,[30,[36,6],[[32,0,[\"model\",\"isNew\"]],\"New view\",\"Edit view\"],null]],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"button\"],[24,0,\"close\"],[24,6,\"\"],[24,\"title\",\"Close\"],[4,[38,4],[[32,0],\"closeModal\"],null],[4,[38,4],[[32,0],[30,[36,2],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n    \"],[1,[30,[36,3],[\"close\"],null]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"fieldset\"],[12],[2,\"\\n        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"model\",\"errors\"]],[32,0,[\"model\",\"hasValidated\"]],\"name\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"label\"],[14,\"for\",\"view-name\"],[14,0,\"dib fw6\"],[12],[2,\"View name\"],[13],[2,\"\\n            \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"custom-view-name\"]],[[\"@id\",\"@value\",\"@placeholder\",\"@focus-out\"],[\"view-name\",[32,0,[\"model\",\"name\"]],\"Breaking news\",[30,[36,4],[[32,0],\"validate\",\"name\"],[[\"target\"],[[32,0,[\"model\"]]]]]]],null],[2,\"\\n\"],[6,[37,6],[[32,0,[\"model\",\"errors\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"custom-view-name\"]],[[\"@errors\",\"@property\"],[[32,0,[\"model\",\"errors\"]],\"name\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,6],[[32,0,[\"model\",\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"p\"],[12],[2,\"Saved views appear in the app sidebar.\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"        \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"div\"],[12],[2,\"\\n        \"],[10,\"label\"],[14,\"for\",\"view-name\"],[14,0,\"dib fw6\"],[12],[2,\"Icon color\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"flex justify-between mt3 nl1\"],[12],[2,\"\\n\"],[6,[37,8],[[30,[36,7],[[30,[36,7],[[32,0,[\"customViews\",\"availableColors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-radio-color\"],[12],[2,\"\\n                    \"],[11,\"input\"],[24,3,\"view-color\"],[16,1,[31,[\"view-\",[32,1]]]],[16,\"checked\",[30,[36,5],[[32,1],[32,0,[\"delayedModelColor\"]]],null]],[16,2,[32,1]],[24,4,\"radio\"],[4,[38,1],[\"change\",[30,[36,4],[[32,0],\"changeColor\"],null]],null],[12],[13],[2,\"\\n                    \"],[10,\"label\"],[15,\"for\",[31,[\"view-\",[32,1]]]],[12],[10,\"span\"],[15,0,[31,[\"gh-radio-color-\",[32,1]]]],[12],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n\"],[6,[37,6],[[32,0,[\"model\",\"isNew\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-custom-view-form\"],[4,[38,4],[[32,0],\"closeModal\"],null],[4,[38,1],[\"mousedown\",[30,[36,2],[[32,0,[\"noop\"]]],null]],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-red gh-btn-icon\"],[24,\"data-test-button\",\"delete-custom-view\"],[4,[38,1],[\"click\",[30,[36,0],[[32,0,[\"deleteTask\"]]],null]],null],[4,[38,1],[\"mousedown\",[30,[36,2],[[32,0,[\"noop\"]]],null]],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,3],[\"trash\"],null]],[2,\" Delete\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-custom-view\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@taskArgs\",\"@class\"],[\"Save\",\"Saved\",[32,0,[\"saveTask\"]],[32,0,[\"model\"]],\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"perform\",\"on\",\"optional\",\"svg-jar\",\"action\",\"eq\",\"if\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/modal-custom-view-form.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    customViews: Ember.inject.service(),
    router: Ember.inject.service(),
    delayedModelColor: '',

    confirm() {},

    init() {
      this._super(...arguments);

      this.set('model', this.customViews.editView());

      this._setDelayedModelColor.perform();
    },

    actions: {
      changeColor(event) {
        let color = event.target.value;
        this.set('model.color', color);
        this.set('delayedModelColor', color);
      },

      confirm() {
        return this.saveTask.perform();
      }

    },
    saveTask: (0, _emberConcurrency.task)(function* () {
      let view = yield this.customViews.saveViewTask.perform(this.model);
      this.send('closeModal');
      return view;
    }),
    deleteTask: (0, _emberConcurrency.task)(function* () {
      let view = yield this.customViews.deleteViewTask.perform(this.model);
      let routeName = this.router.currentRouteName;
      this.send('closeModal');
      this.router.transitionTo(routeName, {
        queryParams: (0, _resetQueryParams.resetQueryParams)(routeName)
      });
      return view;
    }),
    // this is a hack to get around radio buttons not working with liquid-fire.
    // The DOM is duplicated whilst animating-in so browsers end up setting the
    // checked property on the temporary DOM. Delaying the value being set
    // allows us to ensure we're updating the checked property after animation
    _setDelayedModelColor: (0, _emberConcurrency.task)(function* () {
      yield (0, _emberConcurrency.timeout)(200);
      this.set('delayedModelColor', this.model.color);
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-all", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Would you really like to delete all content from your blog?</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <p>This is permanent! No backups, no restores, no magic undo button. We warned you, k?</p>
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton @buttonText="Delete" @successText="Deleted" @task={{this.deleteAll}} @class="gh-btn gh-btn-red gh-btn-icon" />
  </div>
  
  */
  {
    "id": "bFlHsdVd",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Would you really like to delete all content from your blog?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"This is permanent! No backups, no restores, no magic undo button. We warned you, k?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete\",\"Deleted\",[32,0,[\"deleteAll\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-delete-all.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    store: Ember.inject.service(),
    ajax: Ember.inject.service(),
    actions: {
      confirm() {
        this.deleteAll.perform();
      }

    },

    _deleteAll() {
      let deleteUrl = this.get('ghostPaths.url').api('db');
      return this.ajax.del(deleteUrl);
    },

    _unloadData() {
      this.store.unloadAll('post');
      this.store.unloadAll('tag');
    },

    _showSuccess() {
      this.notifications.showAlert('All content deleted from database.', {
        type: 'success',
        key: 'all-content.delete.success'
      });
    },

    _showFailure(error) {
      this.notifications.showAPIError(error, {
        key: 'all-content.delete'
      });
    },

    deleteAll: (0, _emberConcurrency.task)(function* () {
      try {
        yield this._deleteAll();

        this._unloadData();

        this._showSuccess();
      } catch (error) {
        this._showFailure(error);
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-integration", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Are you sure?</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  <div class="modal-body">
      <p>
          Deleting this integration will remove all webhooks and api keys associated with it.
      </p>
  </div>
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton
          @buttonText="Delete Integration"
          @successText="Deleted"
          @task={{this.deleteIntegration}}
          @class="gh-btn gh-btn-red gh-btn-icon" />
  </div>
  
  */
  {
    "id": "MU+coPBD",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Are you sure?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"\\n        Deleting this integration will remove all webhooks and api keys associated with it.\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete Integration\",\"Deleted\",[32,0,[\"deleteIntegration\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-delete-integration.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    router: Ember.inject.service(),
    feature: Ember.inject.service(),
    notifications: Ember.inject.service(),
    integration: Ember.computed.alias('model'),
    actions: {
      confirm() {
        this.deleteIntegration.perform();
      }

    },
    deleteIntegration: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
        this.router.transitionTo('settings.integrations');
      } catch (error) {
        this.notifications.showAPIError(error, {
          key: 'integration.delete.failed'
        });
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-member", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Delete member account</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <p class="mb6">
          Permanently delete <strong>{{this.member.email}}</strong> from Ghost.
      </p>
  
      {{#if this.hasActiveStripeSubscriptions}}
          <div class="flex justify-between">
              <div class="form-group for-checkbox gh-member-cancelstripe-checkbox">
                  <label class="checkbox">
                      <input
                          class="gh-input"
                          type="checkbox"
                          checked={{this.shouldCancelSubscriptions}}
                          {{on "click" (action "toggleShouldCancelSubscriptions")}}
                      />
                      <span class="input-toggle-component"></span>
                      <div>
                          <h4>Also cancel subscription in Stripe</h4>
                          <p>If disabled, the member’s premium subscription will continue</p>
                      </div>
                  </label>
              </div>
          </div>
      {{/if}}
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton @buttonText={{if this.shouldCancelSubscriptions "Delete member + Cancel subscription" "Delete member"}} @successText="Deleted" @task={{this.deleteMember}} @class="gh-btn gh-btn-red gh-btn-icon" />
  </div>
  */
  {
    "id": "qDsJ7np6",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Delete member account\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,2],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[14,0,\"mb6\"],[12],[2,\"\\n        Permanently delete \"],[10,\"strong\"],[12],[1,[32,0,[\"member\",\"email\"]]],[13],[2,\" from Ghost.\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"hasActiveStripeSubscriptions\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"flex justify-between\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"form-group for-checkbox gh-member-cancelstripe-checkbox\"],[12],[2,\"\\n                \"],[10,\"label\"],[14,0,\"checkbox\"],[12],[2,\"\\n                    \"],[11,\"input\"],[24,0,\"gh-input\"],[16,\"checked\",[32,0,[\"shouldCancelSubscriptions\"]]],[24,4,\"checkbox\"],[4,[38,1],[\"click\",[30,[36,0],[[32,0],\"toggleShouldCancelSubscriptions\"],null]],null],[12],[13],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[12],[2,\"Also cancel subscription in Stripe\"],[13],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"If disabled, the member’s premium subscription will continue\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[[30,[36,3],[[32,0,[\"shouldCancelSubscriptions\"]],\"Delete member + Cancel subscription\",\"Delete member\"],null],\"Deleted\",[32,0,[\"deleteMember\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"action\",\"on\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/components/modal-delete-member.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    membersStats: Ember.inject.service(),
    shouldCancelSubscriptions: false,
    // Allowed actions
    confirm: () => {},
    member: Ember.computed.alias('model'),
    cancelSubscriptions: Ember.computed.reads('shouldCancelSubscriptions'),
    hasActiveStripeSubscriptions: Ember.computed('member', function () {
      let subscriptions = this.member.get('subscriptions');

      if (!subscriptions || subscriptions.length === 0) {
        return false;
      }

      let firstActiveStripeSubscription = subscriptions.find(subscription => {
        return ['active', 'trialing', 'unpaid', 'past_due'].includes(subscription.status);
      });
      return firstActiveStripeSubscription !== undefined;
    }),
    actions: {
      confirm() {
        this.deleteMember.perform();
      },

      toggleShouldCancelSubscriptions() {
        this.set('shouldCancelSubscriptions', !this.shouldCancelSubscriptions);
      }

    },
    deleteMember: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm(this.shouldCancelSubscriptions);
        this.membersStats.invalidate();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-members", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="delete-members">
      <h1>Delete selected members?</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  {{#if (not this.confirmed)}}
      <div class="modal-body" data-test-state="delete-unconfirmed">
          <p>
              You're about to delete
              <strong data-test-text="delete-count">{{gh-pluralize this.model.memberCount "member"}}</strong>.
              This is permanent! All Ghost data will be deleted, this will have no effect on subscriptions in Stripe.
          </p>
          <p>
              A backup of your selection will be automatically downloaded to your device before deletion.
          </p>
      </div>
  {{else}}
      <div class="gh-content-box pa" data-test-state="delete-complete">
          {{#if this.error}}
              <div class="flex items-center">
                  {{svg-jar "warning" class="w4 h4 fill-red mr2 nudge-top--3"}}
                  <div>
                      <p class="ma0 pa0">
                          <span class="fw5" data-test-text="delete-error">{{this.error}}</span>
                      </p>
                  </div>
              </div>
          {{else}}
              <div class="flex items-center">
                  {{svg-jar "check-circle" class="w4 h4 stroke-green mr2"}}
                  <p class="ma0 pa0">
                      <span class="fw6" data-test-text="deleted-count">{{gh-pluralize this.response.stats.successful "member"}}</span>
                      successfully deleted
                  </p>
              </div>
              {{#if this.response.stats.unsuccessful}}
                  <div class="flex items-start mt2" data-test-bulk-delete-errors>
                      {{svg-jar "warning" class="w4 h4 fill-red mr2 nudge-top--3"}}
                      <div>
                          <p class="ma0 pa0">
                              <span class="fw5" data-test-text="invalid-count">{{gh-pluralize this.response.stats.unsuccessful "member"}}</span>
                              failed to delete
                          </p>
                      </div>
                  </div>
              {{/if}}
          {{/if}}
      </div>
  {{/if}}
  
  <div class="modal-footer">
      {{#if (not this.confirmed)}}
          <button {{action "closeModal"}} class="gh-btn" data-test-button="cancel">
              <span>Cancel</span>
          </button>
  
          <GhTaskButton
              @buttonText="Download backup & delete members"
              @successText="Deleted"
              @task={{this.deleteMembersTask}}
              @class="gh-btn gh-btn-red gh-btn-icon"
              data-test-button="confirm"
          />
      {{else}}
          <button {{action "closeModal"}} class="gh-btn gh-btn-black" data-test-button="close-modal">
              <span>Close</span>
          </button>
      {{/if}}
  </div>
  */
  {
    "id": "OhNuHwpR",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"delete-members\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Delete selected members?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[6,[37,3],[[30,[36,4],[[32,0,[\"confirmed\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"modal-body\"],[14,\"data-test-state\",\"delete-unconfirmed\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            You're about to delete\\n            \"],[10,\"strong\"],[14,\"data-test-text\",\"delete-count\"],[12],[1,[30,[36,2],[[32,0,[\"model\",\"memberCount\"]],\"member\"],null]],[13],[2,\".\\n            This is permanent! All Ghost data will be deleted, this will have no effect on subscriptions in Stripe.\\n        \"],[13],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            A backup of your selection will be automatically downloaded to your device before deletion.\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"gh-content-box pa\"],[14,\"data-test-state\",\"delete-complete\"],[12],[2,\"\\n\"],[6,[37,3],[[32,0,[\"error\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                \"],[1,[30,[36,1],[\"warning\"],[[\"class\"],[\"w4 h4 fill-red mr2 nudge-top--3\"]]]],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"fw5\"],[14,\"data-test-text\",\"delete-error\"],[12],[1,[32,0,[\"error\"]]],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                \"],[1,[30,[36,1],[\"check-circle\"],[[\"class\"],[\"w4 h4 stroke-green mr2\"]]]],[2,\"\\n                \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"fw6\"],[14,\"data-test-text\",\"deleted-count\"],[12],[1,[30,[36,2],[[32,0,[\"response\",\"stats\",\"successful\"]],\"member\"],null]],[13],[2,\"\\n                    successfully deleted\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"],[6,[37,3],[[32,0,[\"response\",\"stats\",\"unsuccessful\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"flex items-start mt2\"],[14,\"data-test-bulk-delete-errors\",\"\"],[12],[2,\"\\n                    \"],[1,[30,[36,1],[\"warning\"],[[\"class\"],[\"w4 h4 fill-red mr2 nudge-top--3\"]]]],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"fw5\"],[14,\"data-test-text\",\"invalid-count\"],[12],[1,[30,[36,2],[[32,0,[\"response\",\"stats\",\"unsuccessful\"]],\"member\"],null]],[13],[2,\"\\n                            failed to delete\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n\"],[6,[37,3],[[30,[36,4],[[32,0,[\"confirmed\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"confirm\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Download backup & delete members\",\"Deleted\",[32,0,[\"deleteMembersTask\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black\"],[24,\"data-test-button\",\"close-modal\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Close\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"gh-pluralize\",\"if\",\"not\"]}",
    "moduleName": "ghost-admin/components/modal-delete-members.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    confirmed: false,
    response: null,
    error: null,
    // Allowed actions
    confirm: () => {},
    actions: {
      confirm() {
        this.deleteMembersTask.perform();
      }

    },
    deleteMembersTask: (0, _emberConcurrency.task)(function* () {
      try {
        this.set('response', yield this.confirm());
        this.set('confirmed', true);
      } catch (e) {
        if (e.payload?.errors) {
          this.set('confirmed', true);
          this.set('error', e.payload.errors[0].message);
        }

        throw e;
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-snippet", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Confirm snippet deletion</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <p>
          You're about to delete the "<strong>{{this.snippet.name}}</strong>" snippet. This is permanent, and will delete the snippet for all staff users. It will <strong>not</strong> change any posts where you’ve used this snippet in the past.
      </p>
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton
          @buttonText="Delete snippet"
          @successText="Deleted"
          @task={{this.deleteSnippet}}
          @taskArgs={{this.snippet}}
          @class="gh-btn gh-btn-red gh-btn-icon" />
  </div>
  
  */
  {
    "id": "OfnxgXok",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Confirm snippet deletion\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"\\n        You're about to delete the \\\"\"],[10,\"strong\"],[12],[1,[32,0,[\"snippet\",\"name\"]]],[13],[2,\"\\\" snippet. This is permanent, and will delete the snippet for all staff users. It will \"],[10,\"strong\"],[12],[2,\"not\"],[13],[2,\" change any posts where you’ve used this snippet in the past.\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@taskArgs\",\"@class\"],[\"Delete snippet\",\"Deleted\",[32,0,[\"deleteSnippet\"]],[32,0,[\"snippet\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-delete-snippet.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    router: Ember.inject.service(),
    notifications: Ember.inject.service(),
    snippet: Ember.computed.alias('model'),
    actions: {
      confirm() {
        this.deleteSnippet.perform();
      }

    },
    deleteSnippet: (0, _emberConcurrency.task)(function* (snippet) {
      try {
        yield this.confirm(snippet);
      } catch (error) {
        this.notifications.showAPIError(error, {
          key: 'snippet.delete.failed'
        });
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-tag", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Are you sure you want to delete this tag?</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      {{#if this.tag.post_count}}
          <span class="red">This tag is attached to {{this.tag.count.posts}} {{this.postInflection}}.</span>
      {{/if}}
      You're about to delete "<strong>{{this.tag.name}}</strong>". This is permanent! We warned you, k?
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton @buttonText="Delete" @successText="Deleted" @task={{this.deleteTag}} @class="gh-btn gh-btn-red gh-btn-icon" />
  </div>
  
  */
  {
    "id": "HeYrb81A",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Are you sure you want to delete this tag?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"tag\",\"post_count\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"span\"],[14,0,\"red\"],[12],[2,\"This tag is attached to \"],[1,[32,0,[\"tag\",\"count\",\"posts\"]]],[2,\" \"],[1,[32,0,[\"postInflection\"]]],[2,\".\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    You're about to delete \\\"\"],[10,\"strong\"],[12],[1,[32,0,[\"tag\",\"name\"]]],[13],[2,\"\\\". This is permanent! We warned you, k?\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete\",\"Deleted\",[32,0,[\"deleteTag\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/components/modal-delete-tag.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    // Allowed actions
    confirm: () => {},
    tag: Ember.computed.alias('model'),
    postInflection: Ember.computed('tag.count.posts', function () {
      return this.get('tag.count.posts') > 1 ? 'posts' : 'post';
    }),
    actions: {
      confirm() {
        this.deleteTag.perform();
      }

    },
    deleteTag: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-user", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="delete-user">
      <h1>Are you sure you want to delete this user?</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      {{#if this.user.count.posts}}
          <p>
              <strong>{{this.user.name}}</strong> and their <strong data-test-text="user-post-count">{{gh-pluralize this.user.count.posts 'post'}}</strong> will be permanently deleted. If you don’t want to lose these posts, you should assign them to a different author.
          </p>
          <p>
              A backup will be automatically downloaded to your device before deletion.
          </p>
      {{else}}
          <p>
              <strong>{{this.user.name}}</strong> will be permanently deleted. A backup will be automatically downloaded to your device before deletion.
          </p>
      {{/if}}
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn" data-test-button="cancel-delete-user">
          <span>Cancel</span>
      </button>
      <GhTaskButton @buttonText="Download backup & delete user"
          @successText="Deleted"
          @task={{this.deleteUser}}
          @class="gh-btn gh-btn-red gh-btn-icon"
          data-test-button="confirm-delete-user" />
  </div>
  
  */
  {
    "id": "vXgm3evN",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"delete-user\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Are you sure you want to delete this user?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,1],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,2],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n\"],[6,[37,3],[[32,0,[\"user\",\"count\",\"posts\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[10,\"p\"],[12],[2,\"\\n            \"],[10,\"strong\"],[12],[1,[32,0,[\"user\",\"name\"]]],[13],[2,\" and their \"],[10,\"strong\"],[14,\"data-test-text\",\"user-post-count\"],[12],[1,[30,[36,0],[[32,0,[\"user\",\"count\",\"posts\"]],\"post\"],null]],[13],[2,\" will be permanently deleted. If you don’t want to lose these posts, you should assign them to a different author.\\n        \"],[13],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            A backup will be automatically downloaded to your device before deletion.\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[10,\"p\"],[12],[2,\"\\n            \"],[10,\"strong\"],[12],[1,[32,0,[\"user\",\"name\"]]],[13],[2,\" will be permanently deleted. A backup will be automatically downloaded to your device before deletion.\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-delete-user\"],[4,[38,1],[[32,0],\"closeModal\"],null],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"confirm-delete-user\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Download backup & delete user\",\"Deleted\",[32,0,[\"deleteUser\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"gh-pluralize\",\"action\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/components/modal-delete-user.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    // Allowed actions
    confirm: () => {},
    user: Ember.computed.alias('model'),
    actions: {
      confirm() {
        this.deleteUser.perform();
      }

    },
    deleteUser: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-webhook", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Are you sure?</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <p>
          Deleting this webhook may prevent the integration from functioning.
      </p>
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton @buttonText="Delete Webhook" @successText="Deleted" @task={{this.deleteWebhook}} @class="gh-btn gh-btn-red gh-btn-icon" />
  </div>
  */
  {
    "id": "TfsUog14",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Are you sure?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"\\n        Deleting this webhook may prevent the integration from functioning.\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete Webhook\",\"Deleted\",[32,0,[\"deleteWebhook\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-delete-webhook.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    notifications: Ember.inject.service(),
    webhook: Ember.computed.alias('model'),
    actions: {
      confirm() {
        this.deleteWebhook.perform();
      }

    },
    deleteWebhook: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } catch (error) {
        this.notifications.showAPIError(error, {
          key: 'webhook.delete.failed'
        });
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-disconnect-stripe", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Are you sure you want to disconnect?</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      You're about to disconnect your Stripe account ({{this.stripeConnectAccountName}}) from this site. This will automatically turn off paid memberships on this site.
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton @buttonText="Disconnect" @successText="Disconnected" @task={{this.disconnectStripe}} @class="gh-btn gh-btn-red gh-btn-icon" />
  </div>
  
  */
  {
    "id": "4O6N8GaA",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Are you sure you want to disconnect?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    You're about to disconnect your Stripe account (\"],[1,[32,0,[\"stripeConnectAccountName\"]]],[2,\") from this site. This will automatically turn off paid memberships on this site.\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Disconnect\",\"Disconnected\",[32,0,[\"disconnectStripe\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-disconnect-stripe.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    // Allowed actions
    confirm: () => {},
    stripeConnectAccountName: Ember.computed.alias('model.stripeConnectAccountName'),
    actions: {
      confirm() {
        this.disconnectStripe.perform();
      }

    },
    disconnectStripe: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-early-access", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Enable early-access feature</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <p>You're about to enable a feature that's not fully finished yet, and <strong>once it's turned on there's no way back</strong>. Are you sure?</p>
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <button {{action "closeModal"}} class="gh-btn gh-btn-primary"><span>Enable feature</span></button>
  </div>
  
  */
  {
    "id": "MkJj+hO3",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Enable early-access feature\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"You're about to enable a feature that's not fully finished yet, and \"],[10,\"strong\"],[12],[2,\"once it's turned on there's no way back\"],[13],[2,\". Are you sure?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-primary\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Enable feature\"],[13],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-early-access.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({}));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-email-design-settings", ["exports", "ghost-admin/components/modal-base", "moment", "ghost-admin/components/gh-image-uploader", "ember-concurrency-decorators"], function (_exports, _modalBase, _moment, _ghImageUploader, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-body modal-fullsettings">
      <div class="flex items-center justify-between w-100 modal-fullsettings-topbar">
          <h2 class="modal-fullsettings-heading">Email newsletter design</h2>
          <div class="flex items-center">
              <button
                  class="gh-btn mr3"
                  {{on "click" (action "closeModal")}}
                  {{!-- disable mouseDown so it does not trigger focus-out validations --}}
                  {{on "mousedown" (optional this.noop)}}
                  data-test-button="cancel-custom-view-form"
              >
                  <span>Cancel</span>
              </button>
  
              <GhTaskButton
                  @buttonText="Save and close"
                  @successText="Saved"
                  @task={{this.saveSettings}}
                  @idleClass="gh-btn-primary"
                  @class="gh-btn gh-btn-icon"
                  data-test-button="save-members-modal-setting"
              />
          </div>
      </div>
      <div class="modal-fullsettings-body">
          <div class="modal-fullsettings-sidebar with-footer">
              <div>
                  <fieldset class="modal-fullsettings-form">
                      <div class="modal-fullsettings-section first">
                          <GhFormGroup @classNames="vertical">
                              <GhUploader
                                  @extensions={{this.imageExtensions}}
                                  @paramsHash={{hash purpose="image"}}
                                  @onComplete={{fn this.imageUploaded "headerImage"}}
                                  as |uploader|
                              >
                                  <div class="modal-fullsettings-uploader">
                                      <div class="gh-header-img-desc">
                                          <h4 class="modal-fullsettings-title">Header image</h4>
                                          <p>Optional, recommended size 1200x600</p>
                                      </div>
                                      {{#if uploader.isUploading}}
                                          <div class="gh-header-img-container">
                                              <div class="gh-loading-spinner"></div>
                                          </div>
                                      {{else if this.headerImage}}
                                          <div class="gh-header-img">
                                              <img
                                                  class="gh-header-img-thumbnail"
                                                  src={{this.headerImage}}
                                                  alt="header image"
                                                  data-test-img="header"
                                              >
                                              <button type="button" class="gh-btn gh-header-img-deleteicon" {{on "click" (fn this.changeSetting "headerImage" null)}}>
                                                  <span> {{svg-jar "trash" class="w5 h5"}} </span>
                                              </button>
                                          </div>
                                      {{else}}
                                          <button type="button" class="gh-btn gh-header-img-uploadicon" {{on "click" uploader.triggerFileDialog}} data-test-image-upload-btn="header-image">
                                              <span>{{svg-jar "upload-fill" class="w5 h5"}}</span>
                                          </button>
                                          <div style="display:none">
                                              <GhFileInput
                                                  @multiple={{false}}
                                                  @action={{uploader.setFiles}}
                                                  @accept={{uploader.imageMimeTypes}}
                                                  @onInsert={{uploader.registerFileInput}}
                                                  data-test-file-input="icon" />
                                          </div>
                                      {{/if}}
                                  </div>
                              </GhUploader>
                          </GhFormGroup>
  
                          <GhFormGroup data-tooltip={{if (not this.settings.icon) "A publication icon must be set in Branding settings."}}>
                              <h4 class="modal-fullsettings-title {{if (not this.settings.icon) "disabled"}}">Publication icon</h4>
                              <div class="for-switch small {{if (not this.settings.icon) "disabled"}}">
                                  <label class="switch" for="show-header">
                                      <input
                                          type="checkbox"
                                          checked={{and this.showHeaderIcon this.settings.icon}}
                                          id="show-header"
                                          name="show-header"
                                          disabled={{not this.settings.icon}}
                                          {{on "click" (fn this.toggleSetting "showHeaderIcon")}}
                                      >
                                      <span class="input-toggle-component"></span>
                                  </label>
                              </div>
                          </GhFormGroup>
                          <GhFormGroup>
                              <h4 class="modal-fullsettings-title">Publication title</h4>
                              <div class="for-switch small">
                                  <label class="switch" for="show-title">
                                      <input
                                          type="checkbox"
                                          checked={{this.showHeaderTitle}}
                                          id="show-title"
                                          name="show-title"
                                          {{on "click" (fn this.toggleSetting "showHeaderTitle")}}
                                      >
                                      <span class="input-toggle-component"></span>
                                  </label>
                              </div>
                          </GhFormGroup>
                      </div>
                      <div class="modal-fullsettings-section divider-top">
                          <GhFormGroup>
                              <h4 class="modal-fullsettings-title gh-email-design-alignment">Header style</h4>
                              <div class="gh-email-design-typography-wrapper header">
                                  <div class="modal-fullsettings-radiogroup gh-email-design-typography">
                                      <GhFontSelector
                                          @selected={{this.titleFontCategory}}
                                          @onChange={{fn this.changeSetting "titleFontCategory"}}
                                      />
                                  </div>
                                  <div class="gh-btn-group icons">
                                      <button type="button" class="gh-btn gh-btn-icon {{if (eq this.titleAlignment "left") "gh-btn-group-selected"}}" {{on "click" (fn this.changeSetting "titleAlignment" "left")}}><span>{{svg-jar "align-left"}}</span></button>
                                      <button type="button" class="gh-btn gh-btn-icon {{if (eq this.titleAlignment "center") "gh-btn-group-selected"}}" {{on "click" (fn this.changeSetting "titleAlignment" "center")}}><span>{{svg-jar "align-center"}}</span></button>
                                  </div>
                              </div>
                          </GhFormGroup>
                          <GhFormGroup>
                              <h4 class="modal-fullsettings-title">Feature image</h4>
                              <div class="for-switch small">
                                  <label class="switch" for="show-feature-image">
                                      <input
                                          type="checkbox"
                                          checked={{this.showFeatureImage}}
                                          id="show-feature-image"
                                          name="show-feature-image"
                                          {{on "click" (fn this.toggleSetting "showFeatureImage")}}
                                      >
                                      <span class="input-toggle-component"></span>
                                  </label>
                              </div>
                          </GhFormGroup>
                      </div>
                      <div class="modal-fullsettings-section">
                          <GhFormGroup>
                              <h4 class="modal-fullsettings-title">Body style</h4>
                              <div class="gh-email-design-typography-wrapper">
                                  <div class="modal-fullsettings-radiogroup gh-email-design-typography">
                                      <GhFontSelector
                                          @selected={{this.bodyFontCategory}}
                                          @onChange={{fn this.changeSetting "bodyFontCategory"}}
                                      />
                                  </div>
                              </div>
                          </GhFormGroup>
                      </div>
                      <div class="modal-fullsettings-section divider-top">
                          <GhFormGroup @classNames="vertical">
                              <h4 class="modal-fullsettings-title">Email footer</h4>
                              <KoenigBasicHtmlInput
                                  @name="footer"
                                  @html={{this.footerContent}}
                                  @class="miw-100 form-text gh-members-emailsettings-footer-input"
                                  @onChange={{fn this.changeSetting "footerContent"}}
                                  @onFocus={{this.handleInputFocus}}
                                  @onBlur={{this.handleInputBlur}}
                              />
                          <p>Any extra information or legal text</p>
                          </GhFormGroup>
                      </div>
                  </fieldset>
              </div>
              <div class="modal-fullsettings-section gh-members-emailsettings-footer">
                  <GhFormGroup>
                      <div class="gh-members-emailsettings-promotelabel">
                          <span>{{svg-jar "heart"}}</span>
                          <div>
                              <h4 class="modal-fullsettings-title">Promote independent publishing</h4>
                              <p>Show you’re a part of the indie publishing movement with a small badge in the footer</p>
                          </div>
                      </div>
                      <div class="for-switch small">
                          <label
                              class="switch"
                              for="promote-ghost"
                          >
                              <input
                                  type="checkbox"
                                  checked={{this.showBadge}}
                                  id="promote-ghost"
                                  name="promote-ghost"
                                  {{on "click" (fn this.toggleSetting "showBadge")}}
                              >
                              <span class="input-toggle-component"></span>
                          </label>
                      </div>
                  </GhFormGroup>
              </div>
          </div>
          <div class="modal-fullsettings-main">
              <div class="modal-fullsettings-preview-container gh-members-emailpreview">
                  <div class="gh-members-emailpreview-container">
                      <div class="gh-members-emailpreview-faux">
                          <p>
                              <span class="strong">{{this.config.blogTitle}}</span> &lt;{{full-email-address this.settings.membersFromAddress}}&gt;
                          </p>
                          <p><span class="dark">To:</span> Jamie Larson &lt;jamie@example.com&gt;</p>
                      </div>
                      <div class="gh-members-emailpreview-contents">
                          {{#if this.headerImage}}
                              <div class="gh-members-emailpreview-header-image">
                                  <img src={{this.headerImage}}>
                              </div>
                          {{/if}}
                          {{#if this.showHeader}}
                              <div class="gh-members-emailpreview-header">
                                  {{#if (and this.settings.icon this.showHeaderIcon)}}
                                      <img src={{this.settings.icon}} />
                                  {{/if}}
                                  {{#if this.showHeaderTitle}}
                                      <h4>{{this.config.blogTitle}}</h4>
                                  {{/if}}
                              </div>
                          {{/if}}
                          <div class="gh-members-emailpreview-title {{if (eq this.titleAlignment "left") "gh-members-emailpreview-title-left"}}">
                              <h2 class="{{if (eq this.titleFontCategory "serif") "serif"}}">Your email newsletter</h2>
                              <p>
                                  <span>By {{if this.session.user.name this.session.user.name this.session.user.email}} – {{this.currentDate}} – </span> <a href="javascript:">View online →</a>
                              </p>
                          </div>
                          {{#if this.showFeatureImage}}
                              <div class="gh-members-emailpreview-featureimage" style={{this.featureImageStyle}}></div>
                              <div class="gh-members-emailpreview-featureimage-caption">Feature image caption</div>
                          {{/if}}
                          <div class="gh-members-emailpreview-content {{if (eq this.bodyFontCategory "sans_serif") "sans-serif"}}">
                              <p>This is what your content will look like when you send one of your posts as an email newsletter to your subscribers.</p>
                              <p>Over there on the left you’ll see some settings that allow you to customize the look and feel of this template to make it perfectly suited to your brand. Email templates are exceptionally finnicky to make, but we’ve spent a long time optimising this one to make it work beautifully across devices, email clients and content types.</p>
                              <p>So, you can trust that every email you send with Ghost will look great and work well. Just like the rest of your site.</p>
                          </div>
                          <div class="gh-members-emailpreview-footer">
                              <div class="gh-members-emailpreview-footercontent">
                                  {{{this.footerContent}}}
                              </div>
                              <div class="gh-members-emailpreview-footersite">
                                  <span>{{this.config.blogTitle}} &copy; {{this.copyrightYear}} – </span> <a href="javascript:">Unsubscribe</a>
                              </div>
                          </div>
                          <div class="gh-members-emailpreview-badge {{if (not this.showBadge) "hide"}}">
                              <a href="javascript:"><svg viewBox="0 0 156 156"><g fill="none" fill-rule="evenodd"><rect fill="#15212B" width="156" height="156" rx="27"></rect><g transform="translate(36 36)" fill="#F6F8FA"><path d="M0 71.007A4.004 4.004 0 014 67h26a4 4 0 014 4.007v8.986A4.004 4.004 0 0130 84H4a4 4 0 01-4-4.007v-8.986zM50 71.007A4.004 4.004 0 0154 67h26a4 4 0 014 4.007v8.986A4.004 4.004 0 0180 84H54a4 4 0 01-4-4.007v-8.986z"></path><rect y="34" width="84" height="17" rx="4"></rect><path d="M0 4.007A4.007 4.007 0 014.007 0h41.986A4.003 4.003 0 0150 4.007v8.986A4.007 4.007 0 0145.993 17H4.007A4.003 4.003 0 010 12.993V4.007z"></path><rect x="67" width="17" height="17" rx="4"></rect></g></g></svg> <span>Publish with Ghost</span></a>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
      </div>
  </div>
  */
  {
    "id": "oFKSy4wx",
    "block": "{\"symbols\":[\"uploader\"],\"statements\":[[10,\"div\"],[14,0,\"modal-body modal-fullsettings\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"flex items-center justify-between w-100 modal-fullsettings-topbar\"],[12],[2,\"\\n        \"],[10,\"h2\"],[14,0,\"modal-fullsettings-heading\"],[12],[2,\"Email newsletter design\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn mr3\"],[24,\"data-test-button\",\"cancel-custom-view-form\"],[4,[38,2],[\"click\",[30,[36,5],[[32,0],\"closeModal\"],null]],null],[4,[38,2],[\"mousedown\",[30,[36,6],[[32,0,[\"noop\"]]],null]],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-members-modal-setting\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@idleClass\",\"@class\"],[\"Save and close\",\"Saved\",[32,0,[\"saveSettings\"]],\"gh-btn-primary\",\"gh-btn gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"modal-fullsettings-body\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"modal-fullsettings-sidebar with-footer\"],[12],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n                \"],[10,\"fieldset\"],[14,0,\"modal-fullsettings-form\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"modal-fullsettings-section first\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@classNames\"],[\"vertical\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@paramsHash\",\"@onComplete\"],[[32,0,[\"imageExtensions\"]],[30,[36,7],null,[[\"purpose\"],[\"image\"]]],[30,[36,4],[[32,0,[\"imageUploaded\"]],\"headerImage\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"div\"],[14,0,\"modal-fullsettings-uploader\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-header-img-desc\"],[12],[2,\"\\n                                        \"],[10,\"h4\"],[14,0,\"modal-fullsettings-title\"],[12],[2,\"Header image\"],[13],[2,\"\\n                                        \"],[10,\"p\"],[12],[2,\"Optional, recommended size 1200x600\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n\"],[6,[37,1],[[32,1,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                        \"],[10,\"div\"],[14,0,\"gh-header-img-container\"],[12],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-loading-spinner\"],[12],[13],[2,\"\\n                                        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[32,0,[\"headerImage\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                        \"],[10,\"div\"],[14,0,\"gh-header-img\"],[12],[2,\"\\n                                            \"],[10,\"img\"],[14,0,\"gh-header-img-thumbnail\"],[15,\"src\",[32,0,[\"headerImage\"]]],[14,\"alt\",\"header image\"],[14,\"data-test-img\",\"header\"],[12],[13],[2,\"\\n                                            \"],[11,\"button\"],[24,0,\"gh-btn gh-header-img-deleteicon\"],[24,4,\"button\"],[4,[38,2],[\"click\",[30,[36,4],[[32,0,[\"changeSetting\"]],\"headerImage\",null],null]],null],[12],[2,\"\\n                                                \"],[10,\"span\"],[12],[2,\" \"],[1,[30,[36,3],[\"trash\"],[[\"class\"],[\"w5 h5\"]]]],[2,\" \"],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                        \"],[11,\"button\"],[24,0,\"gh-btn gh-header-img-uploadicon\"],[24,\"data-test-image-upload-btn\",\"header-image\"],[24,4,\"button\"],[4,[38,2],[\"click\",[32,1,[\"triggerFileDialog\"]]],null],[12],[2,\"\\n                                            \"],[10,\"span\"],[12],[1,[30,[36,3],[\"upload-fill\"],[[\"class\"],[\"w5 h5\"]]]],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                                            \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"icon\"]],[[\"@multiple\",\"@action\",\"@accept\",\"@onInsert\"],[false,[32,1,[\"setFiles\"]],[32,1,[\"imageMimeTypes\"]],[32,1,[\"registerFileInput\"]]]],null],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                                \"],[13],[2,\"\\n                            \"]],\"parameters\":[1]}]]],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[[16,\"data-tooltip\",[30,[36,1],[[30,[36,8],[[32,0,[\"settings\",\"icon\"]]],null],\"A publication icon must be set in Branding settings.\"],null]]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"h4\"],[15,0,[31,[\"modal-fullsettings-title \",[30,[36,1],[[30,[36,8],[[32,0,[\"settings\",\"icon\"]]],null],\"disabled\"],null]]]],[12],[2,\"Publication icon\"],[13],[2,\"\\n                            \"],[10,\"div\"],[15,0,[31,[\"for-switch small \",[30,[36,1],[[30,[36,8],[[32,0,[\"settings\",\"icon\"]]],null],\"disabled\"],null]]]],[12],[2,\"\\n                                \"],[10,\"label\"],[14,0,\"switch\"],[14,\"for\",\"show-header\"],[12],[2,\"\\n                                    \"],[11,\"input\"],[16,\"checked\",[30,[36,0],[[32,0,[\"showHeaderIcon\"]],[32,0,[\"settings\",\"icon\"]]],null]],[24,1,\"show-header\"],[24,3,\"show-header\"],[16,\"disabled\",[30,[36,8],[[32,0,[\"settings\",\"icon\"]]],null]],[24,4,\"checkbox\"],[4,[38,2],[\"click\",[30,[36,4],[[32,0,[\"toggleSetting\"]],\"showHeaderIcon\"],null]],null],[12],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"modal-fullsettings-title\"],[12],[2,\"Publication title\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"for-switch small\"],[12],[2,\"\\n                                \"],[10,\"label\"],[14,0,\"switch\"],[14,\"for\",\"show-title\"],[12],[2,\"\\n                                    \"],[11,\"input\"],[16,\"checked\",[32,0,[\"showHeaderTitle\"]]],[24,1,\"show-title\"],[24,3,\"show-title\"],[24,4,\"checkbox\"],[4,[38,2],[\"click\",[30,[36,4],[[32,0,[\"toggleSetting\"]],\"showHeaderTitle\"],null]],null],[12],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"modal-fullsettings-section divider-top\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"modal-fullsettings-title gh-email-design-alignment\"],[12],[2,\"Header style\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-email-design-typography-wrapper header\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"modal-fullsettings-radiogroup gh-email-design-typography\"],[12],[2,\"\\n                                    \"],[8,\"gh-font-selector\",[],[[\"@selected\",\"@onChange\"],[[32,0,[\"titleFontCategory\"]],[30,[36,4],[[32,0,[\"changeSetting\"]],\"titleFontCategory\"],null]]],null],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-btn-group icons\"],[12],[2,\"\\n                                    \"],[11,\"button\"],[16,0,[31,[\"gh-btn gh-btn-icon \",[30,[36,1],[[30,[36,9],[[32,0,[\"titleAlignment\"]],\"left\"],null],\"gh-btn-group-selected\"],null]]]],[24,4,\"button\"],[4,[38,2],[\"click\",[30,[36,4],[[32,0,[\"changeSetting\"]],\"titleAlignment\",\"left\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,3],[\"align-left\"],null]],[13],[13],[2,\"\\n                                    \"],[11,\"button\"],[16,0,[31,[\"gh-btn gh-btn-icon \",[30,[36,1],[[30,[36,9],[[32,0,[\"titleAlignment\"]],\"center\"],null],\"gh-btn-group-selected\"],null]]]],[24,4,\"button\"],[4,[38,2],[\"click\",[30,[36,4],[[32,0,[\"changeSetting\"]],\"titleAlignment\",\"center\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,3],[\"align-center\"],null]],[13],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"modal-fullsettings-title\"],[12],[2,\"Feature image\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"for-switch small\"],[12],[2,\"\\n                                \"],[10,\"label\"],[14,0,\"switch\"],[14,\"for\",\"show-feature-image\"],[12],[2,\"\\n                                    \"],[11,\"input\"],[16,\"checked\",[32,0,[\"showFeatureImage\"]]],[24,1,\"show-feature-image\"],[24,3,\"show-feature-image\"],[24,4,\"checkbox\"],[4,[38,2],[\"click\",[30,[36,4],[[32,0,[\"toggleSetting\"]],\"showFeatureImage\"],null]],null],[12],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"modal-fullsettings-section\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"modal-fullsettings-title\"],[12],[2,\"Body style\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-email-design-typography-wrapper\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"modal-fullsettings-radiogroup gh-email-design-typography\"],[12],[2,\"\\n                                    \"],[8,\"gh-font-selector\",[],[[\"@selected\",\"@onChange\"],[[32,0,[\"bodyFontCategory\"]],[30,[36,4],[[32,0,[\"changeSetting\"]],\"bodyFontCategory\"],null]]],null],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"modal-fullsettings-section divider-top\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@classNames\"],[\"vertical\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"modal-fullsettings-title\"],[12],[2,\"Email footer\"],[13],[2,\"\\n                            \"],[8,\"koenig-basic-html-input\",[],[[\"@name\",\"@html\",\"@class\",\"@onChange\",\"@onFocus\",\"@onBlur\"],[\"footer\",[32,0,[\"footerContent\"]],\"miw-100 form-text gh-members-emailsettings-footer-input\",[30,[36,4],[[32,0,[\"changeSetting\"]],\"footerContent\"],null],[32,0,[\"handleInputFocus\"]],[32,0,[\"handleInputBlur\"]]]],null],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"Any extra information or legal text\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"modal-fullsettings-section gh-members-emailsettings-footer\"],[12],[2,\"\\n                \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-members-emailsettings-promotelabel\"],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[1,[30,[36,3],[\"heart\"],null]],[13],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"modal-fullsettings-title\"],[12],[2,\"Promote independent publishing\"],[13],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Show you’re a part of the indie publishing movement with a small badge in the footer\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"for-switch small\"],[12],[2,\"\\n                        \"],[10,\"label\"],[14,0,\"switch\"],[14,\"for\",\"promote-ghost\"],[12],[2,\"\\n                            \"],[11,\"input\"],[16,\"checked\",[32,0,[\"showBadge\"]]],[24,1,\"promote-ghost\"],[24,3,\"promote-ghost\"],[24,4,\"checkbox\"],[4,[38,2],[\"click\",[30,[36,4],[[32,0,[\"toggleSetting\"]],\"showBadge\"],null]],null],[12],[13],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"modal-fullsettings-main\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"modal-fullsettings-preview-container gh-members-emailpreview\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-members-emailpreview-container\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-members-emailpreview-faux\"],[12],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"strong\"],[12],[1,[32,0,[\"config\",\"blogTitle\"]]],[13],[2,\" <\"],[1,[30,[36,10],[[32,0,[\"settings\",\"membersFromAddress\"]]],null]],[2,\">\\n                        \"],[13],[2,\"\\n                        \"],[10,\"p\"],[12],[10,\"span\"],[14,0,\"dark\"],[12],[2,\"To:\"],[13],[2,\" Jamie Larson <jamie@example.com>\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-members-emailpreview-contents\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"headerImage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"gh-members-emailpreview-header-image\"],[12],[2,\"\\n                                \"],[10,\"img\"],[15,\"src\",[32,0,[\"headerImage\"]]],[12],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,1],[[32,0,[\"showHeader\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"gh-members-emailpreview-header\"],[12],[2,\"\\n\"],[6,[37,1],[[30,[36,0],[[32,0,[\"settings\",\"icon\"]],[32,0,[\"showHeaderIcon\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[10,\"img\"],[15,\"src\",[32,0,[\"settings\",\"icon\"]]],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,1],[[32,0,[\"showHeaderTitle\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[10,\"h4\"],[12],[1,[32,0,[\"config\",\"blogTitle\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[10,\"div\"],[15,0,[31,[\"gh-members-emailpreview-title \",[30,[36,1],[[30,[36,9],[[32,0,[\"titleAlignment\"]],\"left\"],null],\"gh-members-emailpreview-title-left\"],null]]]],[12],[2,\"\\n                            \"],[10,\"h2\"],[15,0,[31,[[30,[36,1],[[30,[36,9],[[32,0,[\"titleFontCategory\"]],\"serif\"],null],\"serif\"],null]]]],[12],[2,\"Your email newsletter\"],[13],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"\\n                                \"],[10,\"span\"],[12],[2,\"By \"],[1,[30,[36,1],[[32,0,[\"session\",\"user\",\"name\"]],[32,0,[\"session\",\"user\",\"name\"]],[32,0,[\"session\",\"user\",\"email\"]]],null]],[2,\" – \"],[1,[32,0,[\"currentDate\"]]],[2,\" – \"],[13],[2,\" \"],[10,\"a\"],[14,6,\"javascript:\"],[12],[2,\"View online →\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"],[6,[37,1],[[32,0,[\"showFeatureImage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"gh-members-emailpreview-featureimage\"],[15,5,[32,0,[\"featureImageStyle\"]]],[12],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-members-emailpreview-featureimage-caption\"],[12],[2,\"Feature image caption\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[10,\"div\"],[15,0,[31,[\"gh-members-emailpreview-content \",[30,[36,1],[[30,[36,9],[[32,0,[\"bodyFontCategory\"]],\"sans_serif\"],null],\"sans-serif\"],null]]]],[12],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"This is what your content will look like when you send one of your posts as an email newsletter to your subscribers.\"],[13],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Over there on the left you’ll see some settings that allow you to customize the look and feel of this template to make it perfectly suited to your brand. Email templates are exceptionally finnicky to make, but we’ve spent a long time optimising this one to make it work beautifully across devices, email clients and content types.\"],[13],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"So, you can trust that every email you send with Ghost will look great and work well. Just like the rest of your site.\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-members-emailpreview-footer\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-members-emailpreview-footercontent\"],[12],[2,\"\\n                                \"],[2,[32,0,[\"footerContent\"]]],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-members-emailpreview-footersite\"],[12],[2,\"\\n                                \"],[10,\"span\"],[12],[1,[32,0,[\"config\",\"blogTitle\"]]],[2,\" © \"],[1,[32,0,[\"copyrightYear\"]]],[2,\" – \"],[13],[2,\" \"],[10,\"a\"],[14,6,\"javascript:\"],[12],[2,\"Unsubscribe\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[15,0,[31,[\"gh-members-emailpreview-badge \",[30,[36,1],[[30,[36,8],[[32,0,[\"showBadge\"]]],null],\"hide\"],null]]]],[12],[2,\"\\n                            \"],[10,\"a\"],[14,6,\"javascript:\"],[12],[10,\"svg\"],[14,\"viewBox\",\"0 0 156 156\"],[12],[10,\"g\"],[14,\"fill\",\"none\"],[14,\"fill-rule\",\"evenodd\"],[12],[10,\"rect\"],[14,\"fill\",\"#15212B\"],[14,\"width\",\"156\"],[14,\"height\",\"156\"],[14,\"rx\",\"27\"],[12],[13],[10,\"g\"],[14,\"transform\",\"translate(36 36)\"],[14,\"fill\",\"#F6F8FA\"],[12],[10,\"path\"],[14,\"d\",\"M0 71.007A4.004 4.004 0 014 67h26a4 4 0 014 4.007v8.986A4.004 4.004 0 0130 84H4a4 4 0 01-4-4.007v-8.986zM50 71.007A4.004 4.004 0 0154 67h26a4 4 0 014 4.007v8.986A4.004 4.004 0 0180 84H54a4 4 0 01-4-4.007v-8.986z\"],[12],[13],[10,\"rect\"],[14,\"y\",\"34\"],[14,\"width\",\"84\"],[14,\"height\",\"17\"],[14,\"rx\",\"4\"],[12],[13],[10,\"path\"],[14,\"d\",\"M0 4.007A4.007 4.007 0 014.007 0h41.986A4.003 4.003 0 0150 4.007v8.986A4.007 4.007 0 0145.993 17H4.007A4.003 4.003 0 010 12.993V4.007z\"],[12],[13],[10,\"rect\"],[14,\"x\",\"67\"],[14,\"width\",\"17\"],[14,\"height\",\"17\"],[14,\"rx\",\"4\"],[12],[13],[13],[13],[13],[2,\" \"],[10,\"span\"],[12],[2,\"Publish with Ghost\"],[13],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"and\",\"if\",\"on\",\"svg-jar\",\"fn\",\"action\",\"optional\",\"hash\",\"not\",\"eq\",\"full-email-address\"]}",
    "moduleName": "ghost-admin/components/modal-email-design-settings.hbs"
  });

  let ModalEmailDesignSettings = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._tracked, _dec10 = Ember._tracked, _dec11 = Ember._tracked, _dec12 = Ember._tracked, _dec13 = Ember._tracked, _dec14 = Ember._action, _dec15 = Ember._action, _dec16 = Ember._action, _dec17 = Ember._action, _dec18 = Ember._action, _dec19 = Ember._action, _dec20 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class ModalEmailDesignSettings extends _modalBase.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor2, this);

      _initializerDefineProperty(this, "session", _descriptor3, this);

      _initializerDefineProperty(this, "settings", _descriptor4, this);

      _initializerDefineProperty(this, "headerImage", _descriptor5, this);

      _initializerDefineProperty(this, "showHeaderIcon", _descriptor6, this);

      _initializerDefineProperty(this, "showHeaderTitle", _descriptor7, this);

      _initializerDefineProperty(this, "titleFontCategory", _descriptor8, this);

      _initializerDefineProperty(this, "titleAlignment", _descriptor9, this);

      _initializerDefineProperty(this, "showFeatureImage", _descriptor10, this);

      _initializerDefineProperty(this, "bodyFontCategory", _descriptor11, this);

      _initializerDefineProperty(this, "footerContent", _descriptor12, this);

      _initializerDefineProperty(this, "showBadge", _descriptor13, this);

      _defineProperty(this, "currentDate", (0, _moment.default)().format('D MMM YYYY'));

      _defineProperty(this, "copyrightYear", new Date().getFullYear());

      _defineProperty(this, "imageExtensions", _ghImageUploader.IMAGE_EXTENSIONS);
    }

    get showHeader() {
      return this.showHeaderIcon && this.settings.get('icon') || this.showHeaderTitle;
    }

    get featureImageUrl() {
      // keep path separate so asset rewriting correctly picks it up
      let imagePath = '/img/user-cover.png';
      let fullPath = this.ghostPaths.assetRoot.replace(/\/$/, '') + imagePath;
      return fullPath;
    }

    get featureImageStyle() {
      return Ember.String.htmlSafe(`background-image: url(${this.featureImageUrl})`);
    }

    toggleSetting(setting, event) {
      this[setting] = event.target.checked;
    }

    changeSetting(setting, value) {
      this[setting] = value;
    }

    imageUploaded(setting, images) {
      if (images[0]) {
        this[setting] = images[0].url;
      }
    }

    handleInputFocus() {
      this._removeShortcuts();
    }

    handleInputBlur() {
      this._setupShortcuts();
    }

    confirm() {
      this.saveSettings.perform();
    }

    *saveSettings() {
      this.settings.set('newsletterHeaderImage', this.headerImage);
      this.settings.set('newsletterShowHeaderIcon', this.showHeaderIcon);
      this.settings.set('newsletterShowHeaderTitle', this.showHeaderTitle);
      this.settings.set('newsletterTitleFontCategory', this.titleFontCategory);
      this.settings.set('newsletterTitleAlignment', this.titleAlignment);
      this.settings.set('newsletterShowFeatureImage', this.showFeatureImage);
      this.settings.set('newsletterBodyFontCategory', this.bodyFontCategory);
      this.settings.set('newsletterFooterContent', this.footerContent);
      this.settings.set('newsletterShowBadge', this.showBadge);
      yield this.settings.save();
      this.closeModal();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "headerImage", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.settings.get('newsletterHeaderImage');
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "showHeaderIcon", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.settings.get('newsletterShowHeaderIcon');
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "showHeaderTitle", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.settings.get('newsletterShowHeaderTitle');
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "titleFontCategory", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.settings.get('newsletterTitleFontCategory');
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "titleAlignment", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.settings.get('newsletterTitleAlignment');
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "showFeatureImage", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.settings.get('newsletterShowFeatureImage');
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "bodyFontCategory", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.settings.get('newsletterBodyFontCategory');
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "footerContent", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.settings.get('newsletterFooterContent');
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "showBadge", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.settings.get('newsletterShowBadge');
    }
  }), _applyDecoratedDescriptor(_class.prototype, "toggleSetting", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "toggleSetting"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "changeSetting", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, "changeSetting"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "imageUploaded", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, "imageUploaded"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleInputFocus", [_dec17], Object.getOwnPropertyDescriptor(_class.prototype, "handleInputFocus"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleInputBlur", [_dec18], Object.getOwnPropertyDescriptor(_class.prototype, "handleInputBlur"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "confirm", [_dec19], Object.getOwnPropertyDescriptor(_class.prototype, "confirm"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveSettings", [_dec20], Object.getOwnPropertyDescriptor(_class.prototype, "saveSettings"), _class.prototype)), _class));
  _exports.default = ModalEmailDesignSettings;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalEmailDesignSettings);
});
;define("ghost-admin/components/modal-enable-tiers", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Tiers is a one-way street!</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <p>Tiers for paid memberships is currently in an early access beta. Once enabled, it cannot be switched off. <a href="http://ghost.org/help/tiers" target="_blank">Learn more here</a></p>
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <button {{action "confirm"}} class="gh-btn gh-btn-primary"><span>Enable Tiers</span></button>
  </div>
  
  */
  {
    "id": "6aZoH8iG",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Tiers is a one-way street!\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"Tiers for paid memberships is currently in an early access beta. Once enabled, it cannot be switched off. \"],[10,\"a\"],[14,6,\"http://ghost.org/help/tiers\"],[14,\"target\",\"_blank\"],[12],[2,\"Learn more here\"],[13],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-primary\"],[4,[38,0],[[32,0],\"confirm\"],null],[12],[10,\"span\"],[12],[2,\"Enable Tiers\"],[13],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-enable-tiers.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    feature: Ember.inject.service(),
    // Allowed actions
    confirm: () => {},
    actions: {
      confirm() {
        this.enableTiers.perform();
      }

    },
    enableTiers: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.feature.set('multipleProducts', true);
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-free-membership-settings", ["exports", "ghost-admin/components/modal-base", "ember-concurrency-decorators"], function (_exports, _modalBase, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="webhook-form">
      <h1 data-test-text="title">Free membership settings</h1>
  </header>
  <button class="close" href title="Close" {{action "closeModal"}} {{action (optional this.noop) on="mouseDown"}}>
      {{svg-jar "close"}}
  </button>
  
  <form>
  <div class="modal-body">
      <div class="gh-main-section-block">
          <div class="gh-main-section-content grey gh-product-priceform-block">
              <GhFormGroup @errors={{this.price.errors}} @hasValidated={{this.price.hasValidated}} @property="name">
                  <label for="name" class="fw6">Portal display name</label>
                  <GhTextInput
                      @value={{readonly this.settings.membersFreePriceName}}
                      @input={{action "updateName" value="target.value"}}
                      @name="name"
                      @id="name"
                      @class="gh-input" />
                  <GhErrorMessage @errors={{this.price.errors}} @property="name" />
              </GhFormGroup>
              <GhFormGroup @errors={{this.price.errors}} @hasValidated={{this.price.hasValidated}} @property="description">
                  <label for="description" class="fw6">Description</label>
                  <GhTextInput
                      @value={{readonly this.settings.membersFreePriceDescription}}
                      @input={{action "updateDescription" value="target.value"}}
                      @name="description"
                      @id="description"
                      @class="gh-input" />
                  <GhErrorMessage @errors={{this.price.errors}} @property="description" />
              </GhFormGroup>
              <GhFormGroup @errors={{this.price.errors}} @hasValidated={{this.price.hasValidated}} @property="welcome-page">
                  <label for="welcome-page" class="fw6">Welcome page</label>
                  <GhUrlInput
                      @value={{readonly this.settings.membersFreeSignupRedirect}}
                      @baseUrl={{readonly this.siteUrl}}
                      @setResult={{action "setFreeSignupRedirect"}}
                      @validateUrl={{action "validateFreeSignupRedirect"}}
                      @placeholder={{readonly this.siteUrl}}
                  />
                  <GhErrorMessage
                      @errors={{settings.errors}}
                      @property="membersFreeSignupRedirect"
                  />
                  <p>Redirect to this URL after signing up for a free membership</p>
                  <GhErrorMessage @errors={{this.price.errors}} @property="welcome-page" />
              </GhFormGroup>
          </div>
      </div>
  </div>
  </form>
  
  <div class="modal-footer">
      <button
          class="gh-btn"
          {{action "closeModal"}}
          {{!-- disable mouseDown so it doesn't trigger focus-out validations --}}
          {{!-- {{action (optional this.noop) on="mouseDown"}} --}}
          data-test-button="cancel-webhook"
      >
          <span>Cancel</span>
      </button>
      <GhTaskButton @buttonText="Save"
          {{!-- @successText={{this.successText}} --}}
          @task={{this.save}}
          @class="gh-btn gh-btn-black gh-btn-icon"
          data-test-button="save-price" />
  </div>
  */
  {
    "id": "PMKgXSoF",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"webhook-form\"],[12],[2,\"\\n    \"],[10,\"h1\"],[14,\"data-test-text\",\"title\"],[12],[2,\"Free membership settings\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"button\"],[24,0,\"close\"],[24,6,\"\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[4,[38,0],[[32,0],[30,[36,1],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n    \"],[1,[30,[36,2],[\"close\"],null]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"form\"],[12],[2,\"\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-content grey gh-product-priceform-block\"],[12],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"price\",\"errors\"]],[32,0,[\"price\",\"hasValidated\"]],\"name\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"label\"],[14,\"for\",\"name\"],[14,0,\"fw6\"],[12],[2,\"Portal display name\"],[13],[2,\"\\n                \"],[8,\"gh-text-input\",[],[[\"@value\",\"@input\",\"@name\",\"@id\",\"@class\"],[[30,[36,3],[[32,0,[\"settings\",\"membersFreePriceName\"]]],null],[30,[36,0],[[32,0],\"updateName\"],[[\"value\"],[\"target.value\"]]],\"name\",\"name\",\"gh-input\"]],null],[2,\"\\n                \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"price\",\"errors\"]],\"name\"]],null],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"price\",\"errors\"]],[32,0,[\"price\",\"hasValidated\"]],\"description\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"label\"],[14,\"for\",\"description\"],[14,0,\"fw6\"],[12],[2,\"Description\"],[13],[2,\"\\n                \"],[8,\"gh-text-input\",[],[[\"@value\",\"@input\",\"@name\",\"@id\",\"@class\"],[[30,[36,3],[[32,0,[\"settings\",\"membersFreePriceDescription\"]]],null],[30,[36,0],[[32,0],\"updateDescription\"],[[\"value\"],[\"target.value\"]]],\"description\",\"description\",\"gh-input\"]],null],[2,\"\\n                \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"price\",\"errors\"]],\"description\"]],null],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"price\",\"errors\"]],[32,0,[\"price\",\"hasValidated\"]],\"welcome-page\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"label\"],[14,\"for\",\"welcome-page\"],[14,0,\"fw6\"],[12],[2,\"Welcome page\"],[13],[2,\"\\n                \"],[8,\"gh-url-input\",[],[[\"@value\",\"@baseUrl\",\"@setResult\",\"@validateUrl\",\"@placeholder\"],[[30,[36,3],[[32,0,[\"settings\",\"membersFreeSignupRedirect\"]]],null],[30,[36,3],[[32,0,[\"siteUrl\"]]],null],[30,[36,0],[[32,0],\"setFreeSignupRedirect\"],null],[30,[36,0],[[32,0],\"validateFreeSignupRedirect\"],null],[30,[36,3],[[32,0,[\"siteUrl\"]]],null]]],null],[2,\"\\n                \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[34,4,[\"errors\"]],\"membersFreeSignupRedirect\"]],null],[2,\"\\n                \"],[10,\"p\"],[12],[2,\"Redirect to this URL after signing up for a free membership\"],[13],[2,\"\\n                \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"price\",\"errors\"]],\"welcome-page\"]],null],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-webhook\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-price\"]],[[\"@buttonText\",\"@task\",\"@class\"],[\"Save\",[32,0,[\"save\"]],\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"action\",\"optional\",\"svg-jar\",\"readonly\",\"settings\"]}",
    "moduleName": "ghost-admin/components/modal-free-membership-settings.hbs"
  });

  const classic = __EMBER_CLASSIC_DECORATOR;
  let ModalFreeMembershipSettings = ( // TODO: update modals to work fully with Glimmer components
  _dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._tracked, _dec4 = Ember._tracked, _dec5 = Ember._action, _dec6 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), classic(_class = (_class2 = class ModalFreeMembershipSettings extends _modalBase.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "settings", _descriptor, this);

      _initializerDefineProperty(this, "config", _descriptor2, this);

      _initializerDefineProperty(this, "freeSignupRedirect", _descriptor3, this);

      _initializerDefineProperty(this, "siteUrl", _descriptor4, this);

      _defineProperty(this, "actions", {
        // needed because ModalBase uses .send() for keyboard events
        closeModal() {
          this.close();
        },

        updateName(value) {
          this.settings.set('membersFreePriceName', value);
        },

        updateDescription(value) {
          this.settings.set('membersFreePriceDescription', value);
        },

        setFreeSignupRedirect(url) {
          this.freeSignupRedirect = url;
        },

        validateFreeSignupRedirect() {
          return this._validateSignupRedirect(this.freeSignupRedirect, 'membersFreeSignupRedirect');
        }

      });
    }

    init() {
      super.init(...arguments);
      this.siteUrl = this.config.get('blogUrl');
    }

    close(event) {
      event?.preventDefault?.();
      this.closeModal();
    }

    *save() {
      try {
        this.send('validateFreeSignupRedirect');

        if (this.settings.get('errors').length !== 0) {
          return;
        }

        yield this.settings.save();
        this.send('closeModal');
      } catch (error) {
        this.notifications.showAPIError(error, {
          key: 'settings.save'
        });
      } finally {
        this.send('closeModal');
      }
    }

    _validateSignupRedirect(url, type) {
      let errMessage = `Please enter a valid URL`;
      this.settings.get('errors').remove(type);
      this.settings.get('hasValidated').removeObject(type);

      if (url === null) {
        this.settings.get('errors').add(type, errMessage);
        this.settings.get('hasValidated').pushObject(type);
        return false;
      }

      if (url === undefined) {
        // Not initialised
        return;
      }

      if (url.href.startsWith(this.siteUrl)) {
        const path = url.href.replace(this.siteUrl, '');
        this.settings.set(type, path);
      } else {
        this.settings.set(type, url.href);
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "settings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "config", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "freeSignupRedirect", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "siteUrl", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "close", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "close"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "save", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "save"), _class2.prototype)), _class2)) || _class);
  _exports.default = ModalFreeMembershipSettings;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalFreeMembershipSettings);
});
;define("ghost-admin/components/modal-impersonate-member", ["exports", "ghost-admin/components/modal-base", "ghost-admin/utils/copy-text-to-clipboard", "ember-concurrency"], function (_exports, _modalBase, _copyTextToClipboard, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header flex justify-center">
      <h1 style="margin: 0;">Impersonate</h1>
  </header>
  {{!-- disable mouseDown so it doesn't trigger focus-out validations --}}
  <a class="close" href role="button" title="Close" {{action "closeModal"}} {{action (optional this.noop) on="mouseDown"}}>
      {{svg-jar "close"}}<span class="hidden">Close</span>
  </a>
  
  <div class="modal-body">
      <div class="flex items-center justify-center mt4 mb4">
          <GhMemberAvatar
              @member={{this.member}}
              @sizeClass={{if this.member.name 'f-headline fw4 lh-zero tracked-1' 'f-headline fw4 lh-zero tracked-1'}}
              @containerClass="w25 h25 gh-member-detail-avatar" />
      </div>
  
      <p class="tc pl4 pr4">
          This is an authentication link to sign into <strong>{{this.config.blogTitle}}</strong> as <strong>{{this.member.email}}</strong>, you can send it to them if they need it, or use it to sign into their account for customer support.
      </p>
  
      <fieldset>
          <div class="gh-input-group">
              <GhTextInput
                  @id="member-signin-url"
                  @name="member-signin-url"
                  @disabled={{true}}
                  @value={{readonly signinUrl}}
                  @placeholder="{{this.config.blogUrl}}/members/?token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
              />
              {{#if signinUrl}}
                  <GhTaskButton
                  @buttonText="Copy link"
                  @task={{this.copySigninUrl}}
                  @successText="Link copied"
                  @class="gh-btn gh-btn-black gh-btn-icon" />
              {{else}}
                  <GhTaskButton
                  @buttonText="Copy link"
                  @task={{this.copySigninUrl}}
                  @successText="Link copied"
                  @disabled="true"
                  @class="gh-btn gh-btn-black gh-btn-icon" />
              {{/if}}
          </div>
      </fieldset>
  </div>
  
  <div>
      <p class="tc pt4 mb2">This link is only valid for the next <strong>24 hours</strong></p>
  </div>
  
  */
  {
    "id": "AFjDhBss",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header flex justify-center\"],[12],[2,\"\\n    \"],[10,\"h1\"],[14,5,\"margin: 0;\"],[12],[2,\"Impersonate\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[4,[38,0],[[32,0],[30,[36,1],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n    \"],[1,[30,[36,2],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"flex items-center justify-center mt4 mb4\"],[12],[2,\"\\n        \"],[8,\"gh-member-avatar\",[],[[\"@member\",\"@sizeClass\",\"@containerClass\"],[[32,0,[\"member\"]],[30,[36,3],[[32,0,[\"member\",\"name\"]],\"f-headline fw4 lh-zero tracked-1\",\"f-headline fw4 lh-zero tracked-1\"],null],\"w25 h25 gh-member-detail-avatar\"]],null],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"p\"],[14,0,\"tc pl4 pr4\"],[12],[2,\"\\n        This is an authentication link to sign into \"],[10,\"strong\"],[12],[1,[32,0,[\"config\",\"blogTitle\"]]],[13],[2,\" as \"],[10,\"strong\"],[12],[1,[32,0,[\"member\",\"email\"]]],[13],[2,\", you can send it to them if they need it, or use it to sign into their account for customer support.\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"fieldset\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-input-group\"],[12],[2,\"\\n            \"],[8,\"gh-text-input\",[],[[\"@id\",\"@name\",\"@disabled\",\"@value\",\"@placeholder\"],[\"member-signin-url\",\"member-signin-url\",true,[30,[36,5],[[35,4]],null],[31,[[32,0,[\"config\",\"blogUrl\"]],\"/members/?token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"]]]],null],[2,\"\\n\"],[6,[37,3],[[35,4]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@successText\",\"@class\"],[\"Copy link\",[32,0,[\"copySigninUrl\"]],\"Link copied\",\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@successText\",\"@disabled\",\"@class\"],[\"Copy link\",[32,0,[\"copySigninUrl\"]],\"Link copied\",\"true\",\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[12],[2,\"\\n    \"],[10,\"p\"],[14,0,\"tc pt4 mb2\"],[12],[2,\"This link is only valid for the next \"],[10,\"strong\"],[12],[2,\"24 hours\"],[13],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"optional\",\"svg-jar\",\"if\",\"signinUrl\",\"readonly\"]}",
    "moduleName": "ghost-admin/components/modal-impersonate-member.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    config: Ember.inject.service(),
    store: Ember.inject.service(),
    classNames: 'modal-impersonate-member',
    signinUrl: null,
    member: Ember.computed.alias('model'),

    didInsertElement() {
      this._super(...arguments);

      this._signinUrlUpdateTask.perform();
    },

    actions: {
      // noop - we don't want the enter key doing anything
      confirm() {}

    },
    copySigninUrl: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.signinUrl);
      yield (0, _emberConcurrency.timeout)(1000);
      return true;
    }),
    _signinUrlUpdateTask: (0, _emberConcurrency.task)(function* () {
      const memberSigninURL = yield this.member.fetchSigninUrl.perform();
      this.set('signinUrl', memberSigninURL.url);
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-import-members", ["exports", "ghost-admin/components/modal-base", "ghost-admin/utils/ghost-paths", "moment", "@tryghost/members-csv/lib/unparse", "ghost-admin/services/ajax"], function (_exports, _modalBase, _ghostPaths, _moment, _unparse, _ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-member-import-wrapper {{if (or (eq this.state 'MAPPING') (eq this.state 'UPLOADING')) "wide"}}">
      {{#if (eq this.state 'INIT')}}
          <header class="modal-header" data-test-modal="import-members">
              <h1>Import members</h1>
          </header>
      {{/if}}
  
      {{#if (or (eq this.state 'MAPPING') (eq this.state 'UPLOADING'))}}
          <header class="modal-header" data-test-modal="import-members">
              <h1>Import members</h1>
          </header>
      {{/if}}
  
      {{#if (eq this.state 'PROCESSING')}}
          <header class="modal-header icon-center" data-test-modal="import-members">
              <GhLoadingSpinner />
              <h1>Import in progress</h1>
          </header>
      {{/if}}
  
      {{#if (eq this.state 'COMPLETE')}}
          <header class="modal-header icon-center" data-test-modal="import-members">
              {{#if this.importResponse.errorCount}}
                  {{#if (eq this.importResponse.importedCount 0)}}
                      {{svg-jar "members-outline" class="gh-member-import-icon-members midgrey"}}
                  {{else}}
                      {{svg-jar "members-outline" class="gh-member-import-icon-members green"}}
                  {{/if}}
              {{else}}
                  {{svg-jar "confetti" class="gh-member-import-icon-confetti"}}
              {{/if}}
              <h1>Import complete</h1>
          </header>
      {{/if}}
  
      {{#if (eq this.state 'ERROR')}}
          <header class="modal-header" data-test-modal="import-members">
              <h1>{{this.errorHeader}}</h1>
          </header>
      {{/if}}
  
      <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>
          {{svg-jar "close"}}
          <span class="hidden">Close</span>
      </a>
  
      <div class="modal-body">
          {{#if (eq this.state 'INIT')}}
              <ModalImportMembers::CsvFileSelect @setFile={{action "setFile"}} />
          {{/if}}
  
          {{#if (or (eq this.state 'MAPPING') (eq this.state 'UPLOADING'))}}
              <ModalImportMembers::CsvFileMapping
                  @file={{this.file}}
                  @setMappingResult={{action "setMappingResult"}}
                  @setFileData={{action "setMappingFileData"}}
                  @showErrors={{this.showMappingErrors}}
                  @disabled={{if (or (eq this.state 'UPLOADING') (eq this.mappingResult.membersCount 0)) true false}}
              />
          {{/if}}
  
          {{#if (eq this.state 'PROCESSING')}}
          <div class="gh-member-import-resultcontainer">
              <div class="gh-member-import-result-summary">
                  <p>Your import is being processed, and you’ll receive a confirmation email as soon as it’s complete. Usually this only takes a few minutes, but larger imports may take longer.</p>
              </div>
          </div>
          {{/if}}
  
          {{#if (eq this.state 'COMPLETE')}}
              <div class="gh-member-import-resultcontainer">
                  {{#if (eq this.importResponse.importedCount 0)}}
                  <div class="gh-member-import-result-summary">
                      <p>No members were added{{if this.importResponse.errorCount " due to the following errors:" "."}}</p>
                  </div>
                  {{else}}
                  <div class="gh-member-import-result-summary">
                      <p>A total of <strong>{{format-number this.importResponse.importedCount}}</strong> {{gh-pluralize this.importResponse.importedCount 'person' without-count=true}} were successfully added or updated in your list of members, and now have access to your site.</p>
                  </div>
                  {{/if}}
                  {{#if this.importResponse.errorCount}}
                      {{#unless (eq this.importResponse.importedCount 0)}}
                          <hr>
                          <div class="gh-member-import-result-summary">
                              <p><strong>{{format-number this.importResponse.errorCount}}</strong> {{gh-pluralize this.importResponse.errorCount "member" without-count=true}} {{if (eq this.importResponse.errorCount 1) "was" "were"}} skipped due to the following errors:</p>
                          </div>
                      {{/unless}}
                      <div class="gh-member-import-errorlist">
                          <ul>
                          {{#each this.importResponse.errorList as |error|}}
                              <li>{{error.message}} ({{error.count}}) </li>
                          {{/each}}
                          </ul>
                      </div>
                  {{/if}}
              </div>
          {{/if}}
  
          {{#if (eq this.state 'ERROR')}}
              <div class="failed flex items-start gh-members-upload-errorcontainer error">
                  <div class="mr2">{{svg-jar "warning" class="nudge-top--2 w4 h4 fill-red"}}</div>
                  <p class="ma0 pa0">{{this.errorMessage}}</p>
              </div>
          {{/if}}
      </div>
  
      <div class="modal-footer modal-footer-spread">
          {{#if (eq this.state 'INIT')}}
              <button {{action "closeModal"}} class="gh-btn" data-test-button="close-import-members">
                  <span>Close</span>
              </button>
              <a
                  class="gh-btn"
                  href="https://static.ghost.org/v4.0.0/files/member-import-template.csv"
                  target="_blank"
              >
                  <span>Download sample CSV file</span>
              </a>
          {{/if}}
  
          {{#if (eq this.state 'MAPPING')}}
              <button {{action "reset"}} class="gh-btn" data-test-button="restart-import-members">
                  <span>Start over</span>
              </button>
              <button class="gh-btn gh-btn-green {{unless this.mappingResult.membersCount "disabled"}}" {{action "upload"}}>
                  {{#if this.mappingResult.membersCount}}
                      <span>Import {{format-number this.mappingResult.membersCount}} {{gh-pluralize this.mappingResult.membersCount 'member' without-count=true}}</span>
                  {{else}}
                      <span>Import members</span>
                  {{/if}}
              </button>
          {{/if}}
  
          {{#if (eq this.state 'UPLOADING')}}
              <button {{action "reset"}} class="gh-btn disabled" disabled="disabled" data-test-button="restart-import-members">
                  <span>Start over</span>
              </button>
              <button class="gh-btn gh-btn-green gh-btn-icon disabled" disabled="disabled" {{action "upload"}}>
                  <span>{{svg-jar "spinner" class="gh-icon-spinner"}} {{this.runningText}}Uploading</span>
              </button>
          {{/if}}
  
          {{#if (eq this.state 'COMPLETE')}}
              {{#if this.importResponse.errorCount}}
                  <a href="{{this.importResponse.errorCsvUrl}}" download="{{this.importResponse.errorCsvName}}" class="gh-btn" data-test-button="restart-import-members">
                      <span>Download error file</span>
                  </a>
                  {{#if (eq this.importResponse.importedCount 0)}}
                      <button {{action "reset"}} class="gh-btn gh-btn-black" data-test-button="restart-import-members">
                          <span>Try again</span>
                      </button>
                  {{else}}
                      <button {{action "closeModal"}} class="gh-btn gh-btn-black" data-test-button="close-import-members">
                          <span>View members</span>
                      </button>
                  {{/if}}
              {{else}}
                  {{#if (eq this.importResponse.importedCount 0)}}
                      <button {{action "closeModal"}} class="gh-btn" data-test-button="close-import-members">
                          <span>Close</span>
                      </button>
                      <button {{action "reset"}} class="gh-btn gh-btn-black" data-test-button="restart-import-members">
                          <span>Try again</span>
                      </button>
                  {{else}}
                      <button {{action "reset"}} class="gh-btn" data-test-button="restart-import-members">
                          <span>Upload another file</span>
                      </button>
                      <button {{action "closeModal"}} class="gh-btn gh-btn-black" data-test-button="close-import-members">
                          <span>View members</span>
                      </button>
                  {{/if}}
              {{/if}}
          {{/if}}
  
          {{#if (eq this.state 'PROCESSING')}}
              <button {{action "reset"}} class="gh-btn" data-test-button="restart-import-members">
                  <span>Upload another file</span>
              </button>
              <button {{action "closeModal"}} class="gh-btn gh-btn-black" data-test-button="close-import-members">
                  <span>Got it</span>
              </button>
          {{/if}}
  
          {{#if (eq this.state 'ERROR')}}
              {{#if showTryAgainButton}}
                  <button {{action "reset"}} class="gh-btn" data-test-button="restart-import-members">
                      <span>Try again</span>
                  </button>
              {{/if}}
              <button {{action "closeModal"}} class="gh-btn gh-btn-black" data-test-button="close-import-members">
                  <span>OK</span>
              </button>
          {{/if}}
      </div>
  </div>
  */
  {
    "id": "9e6dQGqp",
    "block": "{\"symbols\":[\"error\"],\"statements\":[[10,\"div\"],[15,0,[31,[\"gh-member-import-wrapper \",[30,[36,2],[[30,[36,10],[[30,[36,3],[[32,0,[\"state\"]],\"MAPPING\"],null],[30,[36,3],[[32,0,[\"state\"]],\"UPLOADING\"],null]],null],\"wide\"],null]]]],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"INIT\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"import-members\"],[12],[2,\"\\n            \"],[10,\"h1\"],[12],[2,\"Import members\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,10],[[30,[36,3],[[32,0,[\"state\"]],\"MAPPING\"],null],[30,[36,3],[[32,0,[\"state\"]],\"UPLOADING\"],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"import-members\"],[12],[2,\"\\n            \"],[10,\"h1\"],[12],[2,\"Import members\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"PROCESSING\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"header\"],[14,0,\"modal-header icon-center\"],[14,\"data-test-modal\",\"import-members\"],[12],[2,\"\\n            \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n            \"],[10,\"h1\"],[12],[2,\"Import in progress\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"COMPLETE\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"header\"],[14,0,\"modal-header icon-center\"],[14,\"data-test-modal\",\"import-members\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"importResponse\",\"errorCount\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,2],[[30,[36,3],[[32,0,[\"importResponse\",\"importedCount\"]],0],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[1,[30,[36,4],[\"members-outline\"],[[\"class\"],[\"gh-member-import-icon-members midgrey\"]]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[1,[30,[36,4],[\"members-outline\"],[[\"class\"],[\"gh-member-import-icon-members green\"]]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[1,[30,[36,4],[\"confetti\"],[[\"class\"],[\"gh-member-import-icon-confetti\"]]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[10,\"h1\"],[12],[2,\"Import complete\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"ERROR\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"import-members\"],[12],[2,\"\\n            \"],[10,\"h1\"],[12],[1,[32,0,[\"errorHeader\"]]],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n        \"],[1,[30,[36,4],[\"close\"],null]],[2,\"\\n        \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"INIT\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[8,\"modal-import-members/csv-file-select\",[],[[\"@setFile\"],[[30,[36,0],[[32,0],\"setFile\"],null]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,10],[[30,[36,3],[[32,0,[\"state\"]],\"MAPPING\"],null],[30,[36,3],[[32,0,[\"state\"]],\"UPLOADING\"],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[8,\"modal-import-members/csv-file-mapping\",[],[[\"@file\",\"@setMappingResult\",\"@setFileData\",\"@showErrors\",\"@disabled\"],[[32,0,[\"file\"]],[30,[36,0],[[32,0],\"setMappingResult\"],null],[30,[36,0],[[32,0],\"setMappingFileData\"],null],[32,0,[\"showMappingErrors\"]],[30,[36,2],[[30,[36,10],[[30,[36,3],[[32,0,[\"state\"]],\"UPLOADING\"],null],[30,[36,3],[[32,0,[\"mappingResult\",\"membersCount\"]],0],null]],null],true,false],null]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"PROCESSING\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"gh-member-import-resultcontainer\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-member-import-result-summary\"],[12],[2,\"\\n                \"],[10,\"p\"],[12],[2,\"Your import is being processed, and you’ll receive a confirmation email as soon as it’s complete. Usually this only takes a few minutes, but larger imports may take longer.\"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"COMPLETE\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-member-import-resultcontainer\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"importResponse\",\"importedCount\"]],0],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-member-import-result-summary\"],[12],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"No members were added\"],[1,[30,[36,2],[[32,0,[\"importResponse\",\"errorCount\"]],\" due to the following errors:\",\".\"],null]],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-member-import-result-summary\"],[12],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"A total of \"],[10,\"strong\"],[12],[1,[30,[36,5],[[32,0,[\"importResponse\",\"importedCount\"]]],null]],[13],[2,\" \"],[1,[30,[36,6],[[32,0,[\"importResponse\",\"importedCount\"]],\"person\"],[[\"without-count\"],[true]]]],[2,\" were successfully added or updated in your list of members, and now have access to your site.\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,2],[[32,0,[\"importResponse\",\"errorCount\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,7],[[30,[36,3],[[32,0,[\"importResponse\",\"importedCount\"]],0],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"hr\"],[12],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-member-import-result-summary\"],[12],[2,\"\\n                            \"],[10,\"p\"],[12],[10,\"strong\"],[12],[1,[30,[36,5],[[32,0,[\"importResponse\",\"errorCount\"]]],null]],[13],[2,\" \"],[1,[30,[36,6],[[32,0,[\"importResponse\",\"errorCount\"]],\"member\"],[[\"without-count\"],[true]]]],[2,\" \"],[1,[30,[36,2],[[30,[36,3],[[32,0,[\"importResponse\",\"errorCount\"]],1],null],\"was\",\"were\"],null]],[2,\" skipped due to the following errors:\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[10,\"div\"],[14,0,\"gh-member-import-errorlist\"],[12],[2,\"\\n                        \"],[10,\"ul\"],[12],[2,\"\\n\"],[6,[37,9],[[30,[36,8],[[30,[36,8],[[32,0,[\"importResponse\",\"errorList\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"li\"],[12],[1,[32,1,[\"message\"]]],[2,\" (\"],[1,[32,1,[\"count\"]]],[2,\") \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"ERROR\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"failed flex items-start gh-members-upload-errorcontainer error\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"mr2\"],[12],[1,[30,[36,4],[\"warning\"],[[\"class\"],[\"nudge-top--2 w4 h4 fill-red\"]]]],[13],[2,\"\\n                \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[1,[32,0,[\"errorMessage\"]]],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer modal-footer-spread\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"INIT\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"close-import-members\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Close\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"a\"],[14,0,\"gh-btn\"],[14,6,\"https://static.ghost.org/v4.0.0/files/member-import-template.csv\"],[14,\"target\",\"_blank\"],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Download sample CSV file\"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"MAPPING\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"restart-import-members\"],[4,[38,0],[[32,0],\"reset\"],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Start over\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[11,\"button\"],[16,0,[31,[\"gh-btn gh-btn-green \",[30,[36,7],[[32,0,[\"mappingResult\",\"membersCount\"]],\"disabled\"],null]]]],[4,[38,0],[[32,0],\"upload\"],null],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"mappingResult\",\"membersCount\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"span\"],[12],[2,\"Import \"],[1,[30,[36,5],[[32,0,[\"mappingResult\",\"membersCount\"]]],null]],[2,\" \"],[1,[30,[36,6],[[32,0,[\"mappingResult\",\"membersCount\"]],\"member\"],[[\"without-count\"],[true]]]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[10,\"span\"],[12],[2,\"Import members\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"UPLOADING\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[11,\"button\"],[24,0,\"gh-btn disabled\"],[24,\"disabled\",\"disabled\"],[24,\"data-test-button\",\"restart-import-members\"],[4,[38,0],[[32,0],\"reset\"],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Start over\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green gh-btn-icon disabled\"],[24,\"disabled\",\"disabled\"],[4,[38,0],[[32,0],\"upload\"],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[1,[30,[36,4],[\"spinner\"],[[\"class\"],[\"gh-icon-spinner\"]]]],[2,\" \"],[1,[32,0,[\"runningText\"]]],[2,\"Uploading\"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"COMPLETE\"],null]],null,[[\"default\"],[{\"statements\":[[6,[37,2],[[32,0,[\"importResponse\",\"errorCount\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"a\"],[15,6,[31,[[32,0,[\"importResponse\",\"errorCsvUrl\"]]]]],[15,\"download\",[31,[[32,0,[\"importResponse\",\"errorCsvName\"]]]]],[14,0,\"gh-btn\"],[14,\"data-test-button\",\"restart-import-members\"],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Download error file\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"importResponse\",\"importedCount\"]],0],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black\"],[24,\"data-test-button\",\"restart-import-members\"],[4,[38,0],[[32,0],\"reset\"],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Try again\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black\"],[24,\"data-test-button\",\"close-import-members\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"View members\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[30,[36,3],[[32,0,[\"importResponse\",\"importedCount\"]],0],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"close-import-members\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Close\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black\"],[24,\"data-test-button\",\"restart-import-members\"],[4,[38,0],[[32,0],\"reset\"],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Try again\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"restart-import-members\"],[4,[38,0],[[32,0],\"reset\"],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Upload another file\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black\"],[24,\"data-test-button\",\"close-import-members\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"View members\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"PROCESSING\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"restart-import-members\"],[4,[38,0],[[32,0],\"reset\"],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Upload another file\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black\"],[24,\"data-test-button\",\"close-import-members\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Got it\"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"state\"]],\"ERROR\"],null]],null,[[\"default\"],[{\"statements\":[[6,[37,2],[[35,1]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"restart-import-members\"],[4,[38,0],[[32,0],\"reset\"],null],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Try again\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black\"],[24,\"data-test-button\",\"close-import-members\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"OK\"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"action\",\"showTryAgainButton\",\"if\",\"eq\",\"svg-jar\",\"format-number\",\"gh-pluralize\",\"unless\",\"-track-array\",\"each\",\"or\"]}",
    "moduleName": "ghost-admin/components/modal-import-members.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    config: Ember.inject.service(),
    ajax: Ember.inject.service(),
    notifications: Ember.inject.service(),
    store: Ember.inject.service(),
    state: 'INIT',
    file: null,
    mappingResult: null,
    mappingFileData: null,
    paramName: 'membersfile',
    importResponse: null,
    errorMessage: null,
    errorHeader: null,
    showMappingErrors: false,
    showTryAgainButton: true,
    // Allowed actions
    confirm: () => {},
    uploadUrl: Ember.computed(function () {
      return `${(0, _ghostPaths.default)().apiRoot}/members/upload/`;
    }),
    formData: Ember.computed('file', function () {
      let formData = new FormData();
      formData.append(this.paramName, this.file);

      if (this.mappingResult.labels) {
        this.mappingResult.labels.forEach(label => {
          formData.append('labels', label.name);
        });
      }

      if (this.mappingResult.mapping) {
        let mapping = this.mappingResult.mapping.toJSON();

        for (let [key, val] of Object.entries(mapping)) {
          formData.append(`mapping[${key}]`, val);
        }
      }

      return formData;
    }),
    actions: {
      setFile(file) {
        this.set('file', file);
        this.set('state', 'MAPPING');
      },

      setMappingResult(mappingResult) {
        this.set('mappingResult', mappingResult);
      },

      setMappingFileData(mappingFileData) {
        this.set('mappingFileData', mappingFileData);
      },

      upload() {
        if (this.file && !this.mappingResult.error) {
          this.generateRequest();
          this.set('showMappingErrors', false);
        } else {
          this.set('showMappingErrors', true);
        }
      },

      reset() {
        this.set('showMappingErrors', false);
        this.set('errorMessage', null);
        this.set('errorHeader', null);
        this.set('file', null);
        this.set('mapping', null);
        this.set('state', 'INIT');
        this.set('showTryAgainButton', true);
      },

      closeModal() {
        if (this.state !== 'UPLOADING') {
          this._super(...arguments);
        }
      },

      // noop - we don't want the enter key doing anything
      confirm() {}

    },

    generateRequest() {
      let ajax = this.ajax;
      let formData = this.formData;
      let url = this.uploadUrl;
      this.set('state', 'UPLOADING');
      ajax.post(url, {
        data: formData,
        processData: false,
        contentType: false,
        dataType: 'text'
      }).then(importResponse => {
        if (importResponse instanceof _ajax.AcceptedResponse) {
          this.set('state', 'PROCESSING');
        } else {
          this._uploadSuccess(JSON.parse(importResponse));

          this.set('state', 'COMPLETE');
        }
      }).catch(error => {
        this._uploadError(error);

        this.set('state', 'ERROR');
      });
    },

    _uploadSuccess(importResponse) {
      let importedCount = importResponse.meta.stats.imported;
      const erroredMembers = importResponse.meta.stats.invalid;
      let errorCount = erroredMembers.length;
      const errorList = {};
      const errorsWithFormattedMessages = erroredMembers.map(row => {
        const formattedError = row.error.replace('Value in [members.email] cannot be blank.', 'Missing email address').replace('Value in [members.note] exceeds maximum length of 2000 characters.', 'Note is too long').replace('Value in [members.subscribed] must be one of true, false, 0 or 1.', 'Value of "Subscribed to emails" must be "true" or "false"').replace('Validation (isEmail) failed for email', 'Invalid email address').replace(/No such customer:[^,]*/, 'Could not find Stripe customer');
        formattedError.split(',').forEach(errorMssg => {
          if (errorList[errorMssg]) {
            errorList[errorMssg].count = errorList[errorMssg].count + 1;
          } else {
            errorList[errorMssg] = {
              message: errorMssg,
              count: 1
            };
          }
        });
        return { ...row,
          error: formattedError
        };
      });
      let errorCsv = (0, _unparse.default)(errorsWithFormattedMessages);
      let errorCsvBlob = new Blob([errorCsv], {
        type: 'text/csv'
      });
      let errorCsvUrl = URL.createObjectURL(errorCsvBlob);
      let errorCsvName = importResponse.meta.import_label ? `${importResponse.meta.import_label.name} - Errors.csv` : `Import ${(0, _moment.default)().format('YYYY-MM-DD HH:mm')} - Errors.csv`;
      this.set('importResponse', {
        importedCount,
        errorCount,
        errorCsvUrl,
        errorCsvName,
        errorList: Object.values(errorList)
      }); // insert auto-created import label into store immediately if present
      // ready for filtering the members list

      if (importResponse.meta.import_label) {
        this.store.pushPayload({
          labels: [importResponse.meta.import_label]
        });
      } // invoke the passed in confirm action to refresh member data
      // @TODO wtf does confirm mean?


      this.confirm({
        label: importResponse.meta.import_label
      });
    },

    _uploadError(error) {
      let message;
      let header = 'Import error';

      if ((0, _ajax.isVersionMismatchError)(error)) {
        this.notifications.showAPIError(error);
      }

      if ((0, _ajax.isUnsupportedMediaTypeError)(error)) {
        message = 'The file type you uploaded is not supported.';
      } else if ((0, _ajax.isRequestEntityTooLargeError)(error)) {
        message = 'The file you uploaded was larger than the maximum file size your server allows.';
      } else if (error.payload && error.payload.errors && !Ember.isBlank(error.payload.errors[0].message)) {
        message = Ember.String.htmlSafe(error.payload.errors[0].message);

        if (error.payload.errors[0].message.match(/great deliverability/gi)) {
          header = 'Woah there cowboy, that\'s a big list';
          this.set('showTryAgainButton', false); // NOTE: confirm makes sure to refresh the members data in the background

          this.confirm();
        }
      } else {
        console.error(error); // eslint-disable-line

        message = 'Something went wrong :(';
      }

      this.set('errorMessage', message);
      this.set('errorHeader', header);
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-import-members/csv-file-mapping", ["exports", "@glimmer/component", "ghost-admin/errors/member-import-error", "papaparse"], function (_exports, _component, _memberImportError, _papaparse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if this.hasFileData}}
      <GhFormGroup class="gh-members-import-mapping">
          <div class="gh-members-import-mappingwrapper {{if (and this.error @showErrors) "error"}}">
              <div class="gh-members-import-scrollarea">
                  <GhMembersImportTable
                      @data={{this.fileData}}
                      @setMapping={{this.setMapping}}
                      @disabled={{@disabled}} />
              </div>
          </div>
          {{#if (and this.error @showErrors)}}
              <p class="pt2 error">{{this.error.message}}</p>
          {{/if}}
          <p class="pt2">If an email address in your CSV matches an existing member, they will be updated with the mapped values.</p>
  
          <div class="mt6">
              <label for="label-input"><span class="fw6 f8 dib mb1">Label these members</span></label>
              <GhMemberLabelInput @onChange={{this.updateLabels}} @disabled={{@disabled}} @triggerId="label-input" />
          </div>
      </GhFormGroup>
  {{else}}
      <div class="bg-whitegrey-l2 ba b--whitegrey br3 gh-image-uploader gh-members-import-spinner">
          <GhLoadingSpinner />
      </div>
  {{/if}}
  
  */
  {
    "id": "hdP5jm9F",
    "block": "{\"symbols\":[\"@showErrors\",\"@disabled\"],\"statements\":[[6,[37,1],[[32,0,[\"hasFileData\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[8,\"gh-form-group\",[[24,0,\"gh-members-import-mapping\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[15,0,[31,[\"gh-members-import-mappingwrapper \",[30,[36,1],[[30,[36,0],[[32,0,[\"error\"]],[32,1]],null],\"error\"],null]]]],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-members-import-scrollarea\"],[12],[2,\"\\n                \"],[8,\"gh-members-import-table\",[],[[\"@data\",\"@setMapping\",\"@disabled\"],[[32,0,[\"fileData\"]],[32,0,[\"setMapping\"]],[32,2]]],null],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"],[6,[37,1],[[30,[36,0],[[32,0,[\"error\"]],[32,1]],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"p\"],[14,0,\"pt2 error\"],[12],[1,[32,0,[\"error\",\"message\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[10,\"p\"],[14,0,\"pt2\"],[12],[2,\"If an email address in your CSV matches an existing member, they will be updated with the mapped values.\"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"mt6\"],[12],[2,\"\\n            \"],[10,\"label\"],[14,\"for\",\"label-input\"],[12],[10,\"span\"],[14,0,\"fw6 f8 dib mb1\"],[12],[2,\"Label these members\"],[13],[13],[2,\"\\n            \"],[8,\"gh-member-label-input\",[],[[\"@onChange\",\"@disabled\",\"@triggerId\"],[[32,0,[\"updateLabels\"]],[32,2],\"label-input\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"bg-whitegrey-l2 ba b--whitegrey br3 gh-image-uploader gh-members-import-spinner\"],[12],[2,\"\\n        \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"and\",\"if\"]}",
    "moduleName": "ghost-admin/components/modal-import-members/csv-file-mapping.hbs"
  });

  let CsvFileMapping = (_dec = Ember._tracked, _dec2 = Ember._tracked, _dec3 = Ember._action, _dec4 = Ember._action, (_class = class CsvFileMapping extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "error", _descriptor, this);

      _initializerDefineProperty(this, "fileData", _descriptor2, this);

      _defineProperty(this, "mappingResult", {});

      this.parseFileAndGenerateMapping(this.args.file);
    }

    parseFileAndGenerateMapping(file) {
      _papaparse.default.parse(file, {
        header: true,
        skipEmptyLines: true,
        complete: result => {
          if (result.data && result.data.length) {
            this.fileData = result.data;
          } else {
            this.fileData = [];
          }

          this.args.setFileData(this.fileData);
        }
      });
    }

    get hasFileData() {
      return !Ember.isNone(this.fileData);
    }

    setMapping(mapping) {
      if (this.fileData.length === 0) {
        this.error = new _memberImportError.default({
          message: 'File is empty, nothing to import. Please select a different file.'
        });
      } else if (!mapping.getKeyByValue('email')) {
        this.error = new _memberImportError.default({
          message: 'Please map "Email" to one of the fields in the CSV.'
        });
      } else {
        this.error = null;
      }

      this.mapping = mapping;
      this.setMappingResult();
    }

    updateLabels(labels) {
      this.labels = labels;
      this.setMappingResult();
    }

    setMappingResult() {
      this.args.setMappingResult({
        mapping: this.mapping,
        labels: this.labels,
        membersCount: this.fileData?.length,
        error: this.error
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "error", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "fileData", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setMapping", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "setMapping"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateLabels", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "updateLabels"), _class.prototype)), _class));
  _exports.default = CsvFileMapping;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, CsvFileMapping);
});
;define("ghost-admin/components/modal-import-members/csv-file-select", ["exports", "@glimmer/component", "ghost-admin/services/ajax"], function (_exports, _component, _ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if this.error}}
      <div class="failed flex items-start gh-members-upload-errorcontainer error">
          <div class="mr2">{{svg-jar "warning" class="nudge-top--2 w4 h4 fill-red"}}</div>
          <p class="ma0 pa0">{{this.error.message}}</p>
      </div>
  {{/if}}
  <div class="upload-form bg-whitegrey-l2 ba b--whitegrey br3">
      <section class="gh-image-uploader gh-members-import-uploader {{this.dragClass}}"
          {{on "drop" this.drop}}
          {{on "dragover" this.dragOver}}
          {{on "dragleave" this.dragLeave}}
      >
          <GhFileInput @multiple={{false}} @alt={{this.labelText}} @action={{this.fileSelected}} @accept={{this.accept}}>
          <div class="flex flex-column items-center">
              {{svg-jar "upload" class="w9 h9 mb1 stroke-midgrey"}}
              <div class="description midgrey">{{this.labelText}}</div>
          </div>
          </GhFileInput>
      </section>
  </div>
  
  */
  {
    "id": "iyqPre4V",
    "block": "{\"symbols\":[],\"statements\":[[6,[37,1],[[32,0,[\"error\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"failed flex items-start gh-members-upload-errorcontainer error\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"mr2\"],[12],[1,[30,[36,0],[\"warning\"],[[\"class\"],[\"nudge-top--2 w4 h4 fill-red\"]]]],[13],[2,\"\\n        \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[1,[32,0,[\"error\",\"message\"]]],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[10,\"div\"],[14,0,\"upload-form bg-whitegrey-l2 ba b--whitegrey br3\"],[12],[2,\"\\n    \"],[11,\"section\"],[16,0,[31,[\"gh-image-uploader gh-members-import-uploader \",[32,0,[\"dragClass\"]]]]],[4,[38,2],[\"drop\",[32,0,[\"drop\"]]],null],[4,[38,2],[\"dragover\",[32,0,[\"dragOver\"]]],null],[4,[38,2],[\"dragleave\",[32,0,[\"dragLeave\"]]],null],[12],[2,\"\\n        \"],[8,\"gh-file-input\",[],[[\"@multiple\",\"@alt\",\"@action\",\"@accept\"],[false,[32,0,[\"labelText\"]],[32,0,[\"fileSelected\"]],[32,0,[\"accept\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[14,0,\"flex flex-column items-center\"],[12],[2,\"\\n            \"],[1,[30,[36,0],[\"upload\"],[[\"class\"],[\"w9 h9 mb1 stroke-midgrey\"]]]],[2,\"\\n            \"],[10,\"div\"],[14,0,\"description midgrey\"],[12],[1,[32,0,[\"labelText\"]]],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"on\"]}",
    "moduleName": "ghost-admin/components/modal-import-members/csv-file-select.hbs"
  });

  let CsvFileSelect = (_dec = Ember._tracked, _dec2 = Ember._tracked, _dec3 = Ember._action, _dec4 = Ember._action, _dec5 = Ember._action, _dec6 = Ember._action, (_class = class CsvFileSelect extends _component.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "labelText", 'Select or drop a CSV file');

      _initializerDefineProperty(this, "error", _descriptor, this);

      _initializerDefineProperty(this, "dragClass", _descriptor2, this);
    }

    /*
    constructor(...args) {
        super(...args);
        assert(this.args.setFile);
    }
    */
    fileSelected(fileList) {
      let [file] = Array.from(fileList);

      try {
        this._validateFileType(file);

        this.error = null;
      } catch (err) {
        this.error = err;
        return;
      }

      this.args.setFile(file);
    }

    dragOver(event) {
      if (!event.dataTransfer) {
        return;
      } // this is needed to work around inconsistencies with dropping files
      // from Chrome's downloads bar


      if (navigator.userAgent.indexOf('Chrome') > -1) {
        let eA = event.dataTransfer.effectAllowed;
        event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
      }

      event.stopPropagation();
      event.preventDefault();
      this.dragClass = '-drag-over';
    }

    dragLeave(event) {
      event.preventDefault();
      this.dragClass = null;
    }

    drop(event) {
      event.preventDefault();
      this.dragClass = null;

      if (event.dataTransfer.files) {
        this.fileSelected(event.dataTransfer.files);
      }
    }

    _validateFileType(file) {
      let [, extension] = /(?:\.([^.]+))?$/.exec(file.name);

      if (extension.toLowerCase() !== 'csv') {
        throw new _ajax.UnsupportedMediaTypeError({
          message: 'The file type you uploaded is not supported'
        });
      }

      return true;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "error", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "dragClass", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "fileSelected", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "fileSelected"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "dragOver", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "dragOver"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "dragLeave", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "dragLeave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "drop", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "drop"), _class.prototype)), _class));
  _exports.default = CsvFileSelect;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, CsvFileSelect);
});
;define("ghost-admin/components/modal-invite-new-user", ["exports", "ghost-admin/components/modal-base", "ghost-admin/mixins/validation-engine", "ember-concurrency"], function (_exports, _modalBase, _validationEngine, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{!-- disable mouseDown so it doesn't trigger focus-out validations --}}
  <a class="close" href role="button" title="Close" {{action "closeModal"}} {{action (optional this.noop) on="mouseDown"}}>
      {{svg-jar "close"}}<span class="hidden">Close</span>
  </a>
  
  <div class="gh-modal-invite-user">
      <header class="modal-header" data-test-modal="invite-staff-user">
          <h1>Invite a new staff user</h1>
          <p>Send an invitation for a new person to create a staff account on your site, and select a role that matches what you’d like them to be able to do.</p>
      </header>
  
      <div class="modal-body">
          <fieldset>
              <GhFormGroup @errors={{this.errors}} @hasValidated={{this.hasValidated}} @property="email">
                  <label for="new-user-email">Email address</label>
                  <GhTextInput
                      @class="email"
                      @id="new-user-email"
                      @type="email"
                      @placeholder="youremail@example.com"
                      @name="email"
                      @shouldFocus={{true}}
                      @autocapitalize="off"
                      @autocorrect="off"
                      @value={{readonly email}}
                      @input={{action (mut email) value="target.value"}}
                      @keyEvents={{hash
                          Enter=(action "confirm")
                      }}
                  />
                  <GhErrorMessage @errors={{this.errors}} @property="email" />
              </GhFormGroup>
  
              <GhRoleSelection
                  @selected={{this.role}}
                  @setRole={{this.setRole}}
                  @onValidationSuccess={{action "roleValidationSucceeded"}}
                  @onValidationFailure={{action "roleValidationFailed"}}
              />
          </fieldset>
      </div>
      <div class="modal-footer">
          {{#if this.limitErrorMessage}}
              <GhTaskButton @buttonText="Upgrade my plan &rarr;"
                  @task={{this.transitionToBilling}}
                  @class="gh-btn gh-btn-green gh-btn-icon"
                  @disableMouseDown="true"
                  data-test-button="upgrade-my-plan" />
          {{else}}
              <GhTaskButton @buttonText="Send invitation now &rarr;"
                  @successText="Sent"
                  @task={{this.sendInvitation}}
                  @class="gh-btn gh-btn-black gh-btn-icon"
                  @disabled={{this.fetchRoles.isRunning}}
                  @disableMouseDown="true"
                  data-test-button="send-user-invite" />
          {{/if}}
      </div>
  </div>
  
  */
  {
    "id": "9OomTnoD",
    "block": "{\"symbols\":[],\"statements\":[[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[4,[38,0],[[32,0],[30,[36,1],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n    \"],[1,[30,[36,2],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"gh-modal-invite-user\"],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"invite-staff-user\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[2,\"Invite a new staff user\"],[13],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"Send an invitation for a new person to create a staff account on your site, and select a role that matches what you’d like them to be able to do.\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"fieldset\"],[12],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"errors\"]],[32,0,[\"hasValidated\"]],\"email\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"label\"],[14,\"for\",\"new-user-email\"],[12],[2,\"Email address\"],[13],[2,\"\\n                \"],[8,\"gh-text-input\",[],[[\"@class\",\"@id\",\"@type\",\"@placeholder\",\"@name\",\"@shouldFocus\",\"@autocapitalize\",\"@autocorrect\",\"@value\",\"@input\",\"@keyEvents\"],[\"email\",\"new-user-email\",\"email\",\"youremail@example.com\",\"email\",true,\"off\",\"off\",[30,[36,4],[[35,3]],null],[30,[36,0],[[32,0],[30,[36,5],[[35,3]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,6],null,[[\"Enter\"],[[30,[36,0],[[32,0],\"confirm\"],null]]]]]],null],[2,\"\\n                \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"email\"]],null],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n\\n            \"],[8,\"gh-role-selection\",[],[[\"@selected\",\"@setRole\",\"@onValidationSuccess\",\"@onValidationFailure\"],[[32,0,[\"role\"]],[32,0,[\"setRole\"]],[30,[36,0],[[32,0],\"roleValidationSucceeded\"],null],[30,[36,0],[[32,0],\"roleValidationFailed\"],null]]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n\"],[6,[37,7],[[32,0,[\"limitErrorMessage\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"upgrade-my-plan\"]],[[\"@buttonText\",\"@task\",\"@class\",\"@disableMouseDown\"],[\"Upgrade my plan →\",[32,0,[\"transitionToBilling\"]],\"gh-btn gh-btn-green gh-btn-icon\",\"true\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"send-user-invite\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\",\"@disabled\",\"@disableMouseDown\"],[\"Send invitation now →\",\"Sent\",[32,0,[\"sendInvitation\"]],\"gh-btn gh-btn-black gh-btn-icon\",[32,0,[\"fetchRoles\",\"isRunning\"]],\"true\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"optional\",\"svg-jar\",\"email\",\"readonly\",\"mut\",\"hash\",\"if\"]}",
    "moduleName": "ghost-admin/components/modal-invite-new-user.hbs"
  });

  const {
    Promise
  } = Ember.RSVP;

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend(_validationEngine.default, {
    router: Ember.inject.service(),
    notifications: Ember.inject.service(),
    store: Ember.inject.service(),
    classNames: 'modal-content invite-new-user',
    role: null,
    limitErrorMessage: null,
    validationType: 'inviteUser',

    willDestroyElement() {
      this._super(...arguments); // TODO: this should not be needed, ValidationEngine acts as a
      // singleton and so it's errors and hasValidated state stick around


      this.errors.clear();
      this.set('hasValidated', Ember.A());
    },

    actions: {
      confirm() {
        this.sendInvitation.perform();
      },

      roleValidationFailed(reason) {
        this.set('limitErrorMessage', reason);
      },

      roleValidationSucceeded() {
        this.set('limitErrorMessage', null);
      }

    },
    setRole: Ember._action(function (role) {
      this.set('role', role);
      this.errors.remove('role');
    }),

    validate() {
      let email = this.email; // TODO: either the validator should check the email's existence or
      // the API should return an appropriate error when attempting to save

      return new Promise((resolve, reject) => this._super().then(() => Ember.RSVP.hash({
        users: this.store.findAll('user', {
          reload: true
        }),
        invites: this.store.findAll('invite', {
          reload: true
        })
      }).then(data => {
        let existingUser = data.users.findBy('email', email);
        let existingInvite = data.invites.findBy('email', email);

        if (existingUser || existingInvite) {
          this.errors.clear('email');

          if (existingUser) {
            this.errors.add('email', 'A user with that email address already exists.');
          } else {
            this.errors.add('email', 'A user with that email address was already invited.');
          } // TODO: this shouldn't be needed, ValidationEngine doesn't mark
          // properties as validated when validating an entire object


          this.hasValidated.addObject('email');
          reject();
        } else {
          resolve();
        }
      }), () => {
        // TODO: this shouldn't be needed, ValidationEngine doesn't mark
        // properties as validated when validating an entire object
        this.hasValidated.addObject('email');
        reject();
      }));
    },

    sendInvitation: (0, _emberConcurrency.task)(function* () {
      let email = this.email;
      let role = this.role;
      let notifications = this.notifications;
      let invite;

      try {
        yield this.validate();
        invite = this.store.createRecord('invite', {
          email,
          role
        });
        yield invite.save(); // If sending the invitation email fails, the API will still return a status of 201
        // but the invite's status in the response object will be 'invited-pending'.

        if (invite.get('status') === 'pending') {
          notifications.showAlert('Invitation email was not sent', {
            type: 'error',
            key: 'invite.send.failed',
            description: 'Please try resending.'
          });
        } else {
          notifications.showNotification('Invitation sent', {
            icon: 'send-email',
            key: 'invite.send.success',
            description: `${email}`
          });
        }

        this.send('closeModal');
      } catch (error) {
        // validation will reject and cause this to be called with no error
        if (error) {
          invite.deleteRecord();
          notifications.showAPIError(error, {
            key: 'invite.send'
          });
          this.send('closeModal');
        }
      }
    }).drop(),
    transitionToBilling: (0, _emberConcurrency.task)(function () {
      this.router.transitionTo('pro');
      this.send('closeModal');
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-leave-settings", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="unsaved-settings">
      <h1>Are you sure you want to leave this page?</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <p>
          Hey there! It looks like you didn't save the changes you made.
      </p>
  
      <p>Save before you go!</p>
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn" data-test-stay-button><span>Stay</span></button>
      <button {{action "confirm"}} class="gh-btn gh-btn-red" data-test-leave-button><span>Leave</span></button>
  </div>
  
  */
  {
    "id": "EGUfhKNV",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"unsaved-settings\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Are you sure you want to leave this page?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"\\n        Hey there! It looks like you didn't save the changes you made.\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"p\"],[12],[2,\"Save before you go!\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-stay-button\",\"\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Stay\"],[13],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-red\"],[24,\"data-test-leave-button\",\"\"],[4,[38,0],[[32,0],\"confirm\"],null],[12],[10,\"span\"],[12],[2,\"Leave\"],[13],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-leave-settings.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    actions: {
      confirm() {
        this.confirm();
        this.send('closeModal');
      }

    },
    // Allowed actions
    confirm: () => Ember.RSVP.resolve()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-markdown-help", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Markdown Help</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <section class="markdown-help-container">
          <table class="modal-markdown-help-table">
              <thead>
              <tr>
                  <th>Markdown</th>
                  <th>Result</th>
                  <th>Shortcut</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>**text**</td>
                  <td><strong>Bold</strong></td>
                  <td>Ctrl/⌘ + B</td>
              </tr>
              <tr>
                  <td>*text*</td>
                  <td><em>Emphasize</em></td>
                  <td>Ctrl/⌘ + I</td>
              </tr>
              <tr>
                  <td>~~text~~</td>
                  <td><del>Strike-through</del></td>
                  <td></td>
              </tr>
              <tr>
                  <td>[title](http://)</td>
                  <td><a href="#">Link</a></td>
                  <td>Ctrl/⌘ + K</td>
              </tr>
              <tr>
                  <td>`code`</td>
                  <td><code>Inline Code</code></td>
                  <td>Ctrl/⌘ + Alt + C</td>
              </tr>
              <tr>
                  <td>![alt](http://)</td>
                  <td>Image</td>
                  <td>Ctrl/⌘ + Shift + I</td>
              </tr>
              <tr>
                  <td>* item</td>
                  <td>List</td>
                  <td>Ctrl/⌘ + L</td>
              </tr>
              <tr>
                  <td>1. item</td>
                  <td>Ordered List</td>
                  <td>Ctrl/⌘ + Alt + L</td>
              </tr>
              <tr>
                  <td>> quote</td>
                  <td>Blockquote</td>
                  <td>Ctrl/⌘ + '</td>
              </tr>
              <tr>
                  <td>==Highlight==</td>
                  <td><mark>Highlight</mark></td>
                  <td></td>
              </tr>
              <tr>
                  <td># Heading</td>
                  <td>H1</td>
                  <td></td>
              </tr>
              <tr>
                  <td>## Heading</td>
                  <td>H2</td>
                  <td>Ctrl/⌘ + H</td>
              </tr>
              <tr>
                  <td>### Heading</td>
                  <td>H3</td>
                  <td>Ctrl/⌘ + H (x2)</td>
              </tr>
              </tbody>
          </table>
          For further Markdown syntax reference: <a href="https://ghost.org/help/using-the-editor/#using-markdown" target="_blank">Markdown Documentation</a>
      </section>
  </div>
  
  */
  {
    "id": "/svNILku",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Markdown Help\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"section\"],[14,0,\"markdown-help-container\"],[12],[2,\"\\n        \"],[10,\"table\"],[14,0,\"modal-markdown-help-table\"],[12],[2,\"\\n            \"],[10,\"thead\"],[12],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"th\"],[12],[2,\"Markdown\"],[13],[2,\"\\n                \"],[10,\"th\"],[12],[2,\"Result\"],[13],[2,\"\\n                \"],[10,\"th\"],[12],[2,\"Shortcut\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tbody\"],[12],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"**text**\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[10,\"strong\"],[12],[2,\"Bold\"],[13],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Ctrl/⌘ + B\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"*text*\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[10,\"em\"],[12],[2,\"Emphasize\"],[13],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Ctrl/⌘ + I\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"~~text~~\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[10,\"del\"],[12],[2,\"Strike-through\"],[13],[13],[2,\"\\n                \"],[10,\"td\"],[12],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"[title](http://)\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[10,\"a\"],[14,6,\"#\"],[12],[2,\"Link\"],[13],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Ctrl/⌘ + K\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"`code`\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[10,\"code\"],[12],[2,\"Inline Code\"],[13],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Ctrl/⌘ + Alt + C\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"![alt](http://)\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Image\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Ctrl/⌘ + Shift + I\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"* item\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"List\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Ctrl/⌘ + L\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"1. item\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Ordered List\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Ctrl/⌘ + Alt + L\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"> quote\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Blockquote\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Ctrl/⌘ + '\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"==Highlight==\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[10,\"mark\"],[12],[2,\"Highlight\"],[13],[13],[2,\"\\n                \"],[10,\"td\"],[12],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"# Heading\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"H1\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"## Heading\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"H2\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Ctrl/⌘ + H\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"tr\"],[12],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"### Heading\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"H3\"],[13],[2,\"\\n                \"],[10,\"td\"],[12],[2,\"Ctrl/⌘ + H (x2)\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        For further Markdown syntax reference: \"],[10,\"a\"],[14,6,\"https://ghost.org/help/using-the-editor/#using-markdown\"],[14,\"target\",\"_blank\"],[12],[2,\"Markdown Documentation\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-markdown-help.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    actions: {
      // noop - we don't want the enter key doing anything
      confirm() {}

    }
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-member-product", ["exports", "ghost-admin/components/modal-base", "ember-concurrency-decorators"], function (_exports, _modalBase, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="delete-user" {{did-insert this.setup}}>
      <h1>Add subscription</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal" }}>
      {{svg-jar "close"}}<span class="hidden">Close</span>
  </a>
  
  <form>
      <div class="modal-body">
          <p class="gh-member-addcomp-subhed">
              Select a tier for <strong>{{or this.member.name this.member.email}}</strong>'s
              complimentary subscription.
          </p>
          {{#if this.activeSubscriptions.length}}
              <p class="gh-member-addcomp-warning">
                  Adding a complimentary subscription cancels all existing subscriptions of this member.
              </p>
          {{/if}}
          {{#if this.loadingProducts}}
              <div class="flex justify-center flex-auto">
                  <div class="gh-loading-spinner"> </div>
              </div>
          {{else}}
              <div class="form-rich-radio">
                  {{#each this.products as |product|}}
                      <div class="gh-radio {{if (eq this.selectedProduct product.id) "active"}}" {{on "click" (fn this.setProduct product.id)}}>
                          <div class="gh-radio-content">
                              <div class="gh-radio-label">
                                  <div class="description">
                                      <h4>{{product.name}}</h4>
                                      <p>{{product.description}}</p>
                                  </div>
                                  {{svg-jar "check" class="check"}}
                              </div>
                          </div>
                          <div class="gh-radio-button"></div>
                      </div>
                  {{/each}}
              </div>
          {{/if}}
      </div>
  </form>
  
  <div class="modal-footer">
      <button
          class="gh-btn"
          {{action "closeModal" }}
          {{!-- disable mouseDown so it does not trigger focus-out validations --}}
          {{action (optional this.noop) on="mouseDown" }}
          data-test-button="cancel-webhook">
          <span>Cancel</span>
      </button>
  
  
      <GhTaskButton @buttonText="Add subscription"
          @successText={{"Added"}}
          @task={{this.addProduct}}
          @class="gh-btn gh-btn-green gh-btn-icon gh-btn-add-memberproduct"
          data-test-button="save-comp-product" />
  </div>
  */
  {
    "id": "GZ4B/ZCK",
    "block": "{\"symbols\":[\"product\"],\"statements\":[[11,\"header\"],[24,0,\"modal-header\"],[24,\"data-test-modal\",\"delete-user\"],[4,[38,7],[[32,0,[\"setup\"]]],null],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Add subscription\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,8],[[32,0],\"closeModal\"],null],[12],[2,\"\\n    \"],[1,[30,[36,4],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"form\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"p\"],[14,0,\"gh-member-addcomp-subhed\"],[12],[2,\"\\n            Select a tier for \"],[10,\"strong\"],[12],[1,[30,[36,9],[[32,0,[\"member\",\"name\"]],[32,0,[\"member\",\"email\"]]],null]],[13],[2,\"'s\\n            complimentary subscription.\\n        \"],[13],[2,\"\\n\"],[6,[37,1],[[32,0,[\"activeSubscriptions\",\"length\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"p\"],[14,0,\"gh-member-addcomp-warning\"],[12],[2,\"\\n                Adding a complimentary subscription cancels all existing subscriptions of this member.\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,1],[[32,0,[\"loadingProducts\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"flex justify-center flex-auto\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-loading-spinner\"],[12],[2,\" \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"form-rich-radio\"],[12],[2,\"\\n\"],[6,[37,6],[[30,[36,5],[[30,[36,5],[[32,0,[\"products\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[11,\"div\"],[16,0,[31,[\"gh-radio \",[30,[36,1],[[30,[36,0],[[32,0,[\"selectedProduct\"]],[32,1,[\"id\"]]],null],\"active\"],null]]]],[4,[38,3],[\"click\",[30,[36,2],[[32,0,[\"setProduct\"]],[32,1,[\"id\"]]],null]],null],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-radio-content\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-radio-label\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"description\"],[12],[2,\"\\n                                    \"],[10,\"h4\"],[12],[1,[32,1,[\"name\"]]],[13],[2,\"\\n                                    \"],[10,\"p\"],[12],[1,[32,1,[\"description\"]]],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[1,[30,[36,4],[\"check\"],[[\"class\"],[\"check\"]]]],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-radio-button\"],[12],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-webhook\"],[4,[38,8],[[32,0],\"closeModal\"],null],[4,[38,8],[[32,0],[30,[36,10],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\\n    \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-comp-product\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Add subscription\",\"Added\",[32,0,[\"addProduct\"]],\"gh-btn gh-btn-green gh-btn-icon gh-btn-add-memberproduct\"]],null],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"eq\",\"if\",\"fn\",\"on\",\"svg-jar\",\"-track-array\",\"each\",\"did-insert\",\"action\",\"or\",\"optional\"]}",
    "moduleName": "ghost-admin/components/modal-member-product.hbs"
  });

  let ModalMemberProduct = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), _dec10 = Ember._action, _dec11 = Ember._action, _dec12 = Ember._action, _dec13 = Ember._action, _dec14 = Ember._action, _dec15 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class ModalMemberProduct extends _modalBase.default {
    constructor() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      super(...args);

      _initializerDefineProperty(this, "store", _descriptor, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor2, this);

      _initializerDefineProperty(this, "ajax", _descriptor3, this);

      _initializerDefineProperty(this, "price", _descriptor4, this);

      _initializerDefineProperty(this, "product", _descriptor5, this);

      _initializerDefineProperty(this, "products", _descriptor6, this);

      _initializerDefineProperty(this, "selectedProduct", _descriptor7, this);

      _initializerDefineProperty(this, "loadingProducts", _descriptor8, this);

      _defineProperty(this, "actions", {
        confirm() {
          this.confirmAction(...arguments);
        },

        // needed because ModalBase uses .send() for keyboard events
        closeModal() {
          this.close();
        }

      });
    }

    *fetchProducts() {
      this.products = yield this.store.query('product', {
        filter: 'type:paid+active:true',
        include: 'monthly_price,yearly_price,benefits'
      });
      this.loadingProducts = false;

      if (this.products.length > 0) {
        this.selectedProduct = this.products.firstObject.id;
      }
    }

    get activeSubscriptions() {
      const subscriptions = this.member.get('subscriptions') || [];
      return subscriptions.filter(sub => {
        return ['active', 'trialing', 'unpaid', 'past_due'].includes(sub.status);
      });
    }

    get member() {
      return this.model;
    }

    get cannotAddPrice() {
      return !this.price || this.price.amount !== 0;
    }

    setup() {
      this.loadingProducts = true;
      this.fetchProducts.perform();
    }

    setProduct(productId) {
      this.selectedProduct = productId;
    }

    setPrice(price) {
      this.price = price;
    }

    confirmAction() {
      return this.addProduct.perform();
    }

    close(event) {
      event?.preventDefault?.();
      this.closeModal();
    }

    *addProduct() {
      let url = this.ghostPaths.url.api(`members/${this.member.get('id')}`); // Cancel existing active subscriptions for member

      for (let i = 0; i < this.activeSubscriptions.length; i++) {
        const subscription = this.activeSubscriptions[i];
        const cancelUrl = this.ghostPaths.url.api(`members/${this.member.get('id')}/subscriptions/${subscription.id}`);
        yield this.ajax.put(cancelUrl, {
          data: {
            status: 'canceled'
          }
        });
      }

      let response = yield this.ajax.put(url, {
        data: {
          members: [{
            id: this.member.get('id'),
            email: this.member.get('email'),
            products: [{
              id: this.selectedProduct
            }]
          }]
        }
      });
      this.store.pushPayload('member', response);
      this.closeModal();
      return response;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "price", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "product", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "products", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "selectedProduct", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "loadingProducts", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "fetchProducts", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "fetchProducts"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setup", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "setup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setProduct", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "setProduct"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setPrice", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "setPrice"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "confirmAction", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, "confirmAction"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "close", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "close"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "addProduct", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, "addProduct"), _class.prototype)), _class));
  _exports.default = ModalMemberProduct;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalMemberProduct);
});
;define("ghost-admin/components/modal-members-label-form", ["exports", "ghost-admin/components/modal-base", "ghost-admin/helpers/reset-query-params", "ember-concurrency"], function (_exports, _modalBase, _resetQueryParams, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    {{#if this.showDeleteLabelModal}}
      <header class="modal-header">
          <h1>Are you sure you want to delete this label?</h1>
      </header>
      <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
      <div class="modal-body">
          <p>
              You're about to delete label "<strong>{{this.label.name}}</strong>". This is permanent! We warned you, k?
          </p>
      </div>
  
      <div class="modal-footer">
          <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
          <GhTaskButton @buttonText="Delete" @successText="Deleted" @task={{this.deleteLabel}} @class="gh-btn gh-btn-red gh-btn-icon" />
      </div>
  {{else}}
  
      <header class="modal-header" data-test-modal="label-form">
          <h1>{{if this.label.isNew "New label" "Edit label"}}</h1>
      </header>
      {{!-- disable mouseDown so it doesn't trigger focus-out validations --}}
      <button class="close" href title="Close" {{action "closeModal"}} {{action (optional this.noop) on="mouseDown"}}>
          {{svg-jar "close"}}
      </button>
  
      <div class="modal-body">
          <fieldset>
              <GhFormGroup @errors={{this.label.errors}} @hasValidated={{this.label.hasValidated}} @property="name">
                  <label for="label-name" class="fw6 dib">Label name</label>
                  <GhTextInput
                      @id="label-name"
                      @value={{this.label.name}}
                      @focus-out={{action "validate" "name" target=this.label}}
                      data-test-input="label-name"
                  />
                  {{#if this.label.errors}}
                      <GhErrorMessage @errors={{this.label.errors}} @property="name" data-test-error="label-name" />
                  {{/if}}
              </GhFormGroup>
          </fieldset>
      </div>
  
      <div class="modal-footer">
          {{#if this.label.isNew}}
              <button
                  class="gh-btn"
                  {{action "closeModal"}}
                  {{!-- disable mouseDown so it doesn't trigger focus-out validations --}}
                  {{action (optional this.noop) on="mouseDown"}}
                  data-test-button="cancel-label-form"
              >
                  <span>Cancel</span>
              </button>
          {{else}}
              <button
                  class="gh-btn gh-btn-red gh-btn-icon"
                  {{on "click" (action "toggleDeleteLabelModal")}}
                  {{on "mousedown" (optional this.noop)}}
                  data-test-button="delete-label"
              >
                  <span>{{svg-jar "trash"}} Delete</span>
              </button
              >
          {{/if}}
  
          <GhTaskButton
              @buttonText="Save"
              @runningText="Saving..."
              @successText="Saved"
              @task={{this.saveTask}}
              @taskArgs={{this.label}}
              @class="gh-btn gh-btn-black gh-btn-icon"
              data-test-button="save-label" />
      </div>
  {{/if}}
  */
  {
    "id": "jz7TxHe8",
    "block": "{\"symbols\":[],\"statements\":[[6,[37,4],[[32,0,[\"showDeleteLabelModal\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[2,\"Are you sure you want to delete this label?\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,3],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            You're about to delete label \\\"\"],[10,\"strong\"],[12],[1,[32,0,[\"label\",\"name\"]]],[13],[2,\"\\\". This is permanent! We warned you, k?\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n        \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete\",\"Deleted\",[32,0,[\"deleteLabel\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"label-form\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[1,[30,[36,4],[[32,0,[\"label\",\"isNew\"]],\"New label\",\"Edit label\"],null]],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[2,\"    \"],[11,\"button\"],[24,0,\"close\"],[24,6,\"\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[4,[38,0],[[32,0],[30,[36,2],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n        \"],[1,[30,[36,3],[\"close\"],null]],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"fieldset\"],[12],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"label\",\"errors\"]],[32,0,[\"label\",\"hasValidated\"]],\"name\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"label\"],[14,\"for\",\"label-name\"],[14,0,\"fw6 dib\"],[12],[2,\"Label name\"],[13],[2,\"\\n                \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"label-name\"]],[[\"@id\",\"@value\",\"@focus-out\"],[\"label-name\",[32,0,[\"label\",\"name\"]],[30,[36,0],[[32,0],\"validate\",\"name\"],[[\"target\"],[[32,0,[\"label\"]]]]]]],null],[2,\"\\n\"],[6,[37,4],[[32,0,[\"label\",\"errors\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"label-name\"]],[[\"@errors\",\"@property\"],[[32,0,[\"label\",\"errors\"]],\"name\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"label\",\"isNew\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-label-form\"],[4,[38,0],[[32,0],\"closeModal\"],null],[4,[38,0],[[32,0],[30,[36,2],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-red gh-btn-icon\"],[24,\"data-test-button\",\"delete-label\"],[4,[38,1],[\"click\",[30,[36,0],[[32,0],\"toggleDeleteLabelModal\"],null]],null],[4,[38,1],[\"mousedown\",[30,[36,2],[[32,0,[\"noop\"]]],null]],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[1,[30,[36,3],[\"trash\"],null]],[2,\" Delete\"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n        \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-label\"]],[[\"@buttonText\",\"@runningText\",\"@successText\",\"@task\",\"@taskArgs\",\"@class\"],[\"Save\",\"Saving...\",\"Saved\",[32,0,[\"saveTask\"]],[32,0,[\"label\"]],\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"on\",\"optional\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/components/modal-members-label-form.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    router: Ember.inject.service(),
    notifications: Ember.inject.service(),
    model: null,
    showDeleteLabelModal: false,

    confirm() {},

    label: Ember.computed.and('model', 'model.label'),

    willDestroyElement() {
      this._super(...arguments);

      this.label.errors.clear();
      this.label.rollbackAttributes();
    },

    actions: {
      toggleDeleteLabelModal() {
        this.label.rollbackAttributes();
        this.set('showDeleteLabelModal', true);
      },

      validate(property) {
        return this.label.validate({
          property
        });
      },

      confirm() {
        return this.saveTask.perform();
      }

    },
    saveTask: (0, _emberConcurrency.task)(function* () {
      let label = this.model && this.model.label;
      let availableLabels = this.model && this.model.labels || [];

      if (!label) {
        return false;
      }

      try {
        yield label.validate();
        let duplicateLabel = availableLabels.find(existingLabel => {
          return existingLabel.name.trim().toLowerCase() === label.name.trim().toLowerCase() && existingLabel.slug !== label.slug;
        });

        if (duplicateLabel) {
          label.errors.add('name', 'A label with the same name already exists');
          label.hasValidated.pushObject('name'); // label.invalidate();

          return false;
        }

        let savedLabel = yield label.save();
        this.notifications.showNotification('Label saved');
        this.send('closeModal');
        return savedLabel;
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'label.save'
          });
        }
      }
    }),
    deleteLabel: (0, _emberConcurrency.task)(function* () {
      let label = this.model && this.model.label;

      if (!label) {
        return false;
      }

      try {
        yield label.destroyRecord();
        let routeName = this.router.currentRouteName;
        this.notifications.showNotification('Label deleted');
        this.send('closeModal');
        this.router.transitionTo(routeName, {
          queryParams: (0, _resetQueryParams.resetQueryParams)(routeName)
        });
      } catch (error) {
        if (error) {
          return this.notifications.showAPIError(error, {
            key: 'label.delete'
          });
        }
      }
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-portal-settings", ["exports", "jquery", "ghost-admin/components/modal-base", "ghost-admin/utils/copy-text-to-clipboard", "ember-concurrency"], function (_exports, _jquery, _modalBase, _copyTextToClipboard, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-body gh-ps-modal-body">
      <div class="flex pa0 flex-grow-1 gh-portal-settings" {{did-insert (fn this.finishPreloading)}}>
          {{#if this.isPreloading}}
              <GhLoadingSpinner />
          {{else}}
          <div class="gh-portal-settings-sidebar">
              <h2 class="gh-portal-settings-title">Portal settings</h2>
              <div class="gh-portal-form-wrapper">
                  <fieldset class="gh-portal-settings-form">
                      <div class="gh-portal-setting-section {{if (not-eq this.settings.membersSignupAccess "all") "disabled-overlay"}}" onclick={{action "switchPreviewPage" "signup"}}>
                          <h3 class="gh-portal-setting-sectionheading">Signup options</h3>
                          <GhFormGroup @classNames="gh-members-subscribed-checkbox gh-portal-setting-first pb5 mb0">
                              <div class="flex justify-between items-center">
                                  <div class="mr3">
                                      <h4 class="gh-portal-setting-title">Display name in signup form</h4>
                                  </div>
                                  <div class="for-switch small">
                                      <label
                                          class="switch"
                                          for="signup-name-checkbox"
                                      >
                                          <input
                                              type="checkbox"
                                              checked={{this.settings.portalName}}
                                              id="signup-name-checkbox"
                                              name="signup-name-checkbox"
                                              disabled={{not-eq this.settings.membersSignupAccess "all"}}
                                              {{on "click" (action "togglePortalName" value="target.checked")}}
                                          >
                                          <span class="input-toggle-component"></span>
                                      </label>
                                  </div>
                              </div>
                          </GhFormGroup>
                          {{#if this.membersUtils.isStripeEnabled}}
                              <div {{did-insert this.refreshAfterStripeConnected}}>
                                  {{#if this.showPortalTiers}}
                                      <div class="mb3">
                                          <h4 class="gh-portal-setting-title">Tiers available at signup</h4>
                                      </div>
                                      <div class="form-group mb0 for-checkbox">
                                          <label
                                              class="checkbox"
                                              for="free-plan"
                                          >
                                              <input
                                                  type="checkbox"
                                                  checked={{this.membersUtils.isFreeChecked}}
                                                  id="free-plan"
                                                  name="free-plan"
                                                  disabled={{or
                                                      (not this.membersUtils.isStripeEnabled)
                                                      (not-eq this.settings.membersSignupAccess "all")
                                                  }}
                                                  class="gh-input post-settings-featured"
                                                  {{on "click" (action "togglePlan" "free")}}
                                              >
                                              <span class="input-toggle-component"></span>
                                              <p>Free</p>
                                          </label>
                                      </div>
                                      {{#each this.products as |product|}}
                                          <div class="form-group mb0 for-checkbox">
                                              <label
                                                  class="checkbox"
                                                  for={{product.id}}
                                              >
                                                  <input
                                                      type="checkbox"
                                                      id={{product.id}}
                                                      name={{product.id}}
                                                      checked={{product.checked}}
                                                      disabled={{or
                                                          (not this.membersUtils.isStripeEnabled)
                                                          (not-eq this.settings.membersSignupAccess "all")
                                                      }}
                                                      class="gh-input post-settings-featured"
                                                      {{on "click" (action "toggleProduct" product.id)}}
                                                  >
                                                  <span class="input-toggle-component"></span>
                                                  <p>{{product.name}}</p>
                                              </label>
                                          </div>
                                      {{/each}}
                                  {{/if}}
                                  <div class="mb3 {{if (and (feature "multipleProducts") this.showPortalTiers) "mt5" ""}}">
                                      <h4 class="gh-portal-setting-title">Prices available at signup</h4>
                                  </div>
                                  {{#unless this.showPortalTiers}}
                                      <div class="form-group mb0 for-checkbox">
                                          <label
                                              class="checkbox"
                                              for="free-plan"
                                          >
                                              <input
                                                  type="checkbox"
                                                  checked={{this.membersUtils.isFreeChecked}}
                                                  id="free-plan"
                                                  name="free-plan"
                                                  disabled={{or
                                                      (not this.membersUtils.isStripeEnabled)
                                                      (not-eq this.settings.membersSignupAccess "all")
                                                  }}
                                                  class="gh-input post-settings-featured"
                                                  {{on "click" (action "togglePlan" "free")}}
                                              >
                                              <span class="input-toggle-component"></span>
                                              <p>Free</p>
                                          </label>
                                      </div>
                                  {{/unless}}
                                  <div class="form-group mb0 for-checkbox">
                                      <label
                                          class="checkbox"
                                          for="monthly-plan"
                                      >
                                          <input
                                              type="checkbox"
                                              id="monthly-plan"
                                              name="monthly-plan"
                                              checked={{this.isMonthlyChecked}}
                                              disabled={{or
                                                  (not this.membersUtils.isStripeEnabled)
                                                  (not-eq this.settings.membersSignupAccess "all")
                                              }}
                                              class="gh-input post-settings-featured"
                                              {{on "click" (action "togglePlan" "monthly")}}
                                          >
                                          <span class="input-toggle-component"></span>
                                          <p>Monthly</p>
                                      </label>
                                  </div>
                                  <div class="form-group mb0 for-checkbox">
                                      <label
                                          class="checkbox"
                                          for="yearly-plan"
                                      >
                                          <input
                                              type="checkbox"
                                              id="yearly-plan"
                                              name="yearly-plan"
                                              checked={{this.isYearlyChecked}}
                                              disabled={{or
                                                  (not this.membersUtils.isStripeEnabled)
                                                  (not-eq this.settings.membersSignupAccess "all")
                                              }}
                                              class="gh-input post-settings-featured"
                                              {{on "click" (action "togglePlan" "yearly")}}
                                          >
                                          <span class="input-toggle-component"></span>
                                          <p>Yearly</p>
                                      </label>
                                  </div>
                              </div>
                          {{else}}
                          <div class="gh-portal-setting-no-stripe">
                              You need to <button class="gh-btn gh-btn-link black {{if (not this.session.user.isAdmin) "disabled"}}" {{on "click" (action "openStripeSettings")}}>connect to Stripe</button> to take payments
                          </div>
                          {{/if}}
                      </div>
                      <div class="gh-portal-setting-section" onclick={{action "switchPreviewPage" "signup"}}>
                          <h3 class="gh-portal-setting-sectionheading">Look & feel</h3>
                          <GhFormGroup @classNames="gh-members-subscribed-checkbox gh-portal-setting-first mb0 b--whitegrey">
                              <div class="flex justify-between items-center">
                                  <h4 class="gh-portal-setting-title">Show Portal button</h4>
                                  <div class="for-switch small">
                                      <label
                                          class="switch"
                                          for="portal-button-checkbox"
                                      >
                                          <input
                                              type="checkbox"
                                              checked={{this.settings.portalButton}}
                                              id="portal-button-checkbox"
                                              name="portal-button-checkbox"
                                              onclick={{action "togglePortalButton" value="target.checked"}}
                                          >
                                          <span class="input-toggle-component"></span>
                                      </label>
                                  </div>
                              </div>
                          </GhFormGroup>
                          {{#if this.settings.portalButton}}
                              <div class="mt5">
                                  <GhFormGroup @classNames="space-l">
                                      <h4 class="gh-portal-setting-title mb1">Portal button style</h4>
                                      <span
                                          class="gh-select mt2"
                                          data-select-text="test"
                                          tabindex="0"
                                      >
                                          <OneWaySelect
                                              @id="portal-button-style"
                                              @name="portal[button-style]"
                                              @options={{this.buttonStyleOptions}}
                                              @optionValuePath="name"
                                              @optionLabelPath="label"
                                              @value={{this.selectedButtonStyle}}
                                              @update={{action "setButtonStyle"}}
                                          />
                                          {{svg-jar "arrow-down-small"}}
                                      </span>
                                  </GhFormGroup>
                                  {{#if showIconSetting}}
                                      <GhFormGroup @classNames="space-l">
                                          <h4 class="gh-portal-setting-title">Icon</h4>
                                          <GhUploader
                                              @extensions={{this.iconExtensions}}
                                              @paramsHash={{hash purpose="image"}}
                                              @onComplete={{action "imageUploaded" "buttonIcon"}}
                                              as
                                              |uploader|
                                          >
                                              <div class="flex items-center justify-between mt2 br3 ba b--whitegrey bg-white">
                                                  <div class="gh-portal-settings-icons">
                                                      {{#each this.membersUtils.defaultButtonIcons as |imgIcon| }}
                                                          <span class="gh-portal-button-icon {{if (eq this.membersUtils.buttonIcon imgIcon.value) "selected-icon"}}" onclick={{action "selectDefaultIcon" imgIcon.value}}>
                                                              {{svg-jar imgIcon.icon}}
                                                          </span>
                                                      {{/each}}
                                                  </div>
                                                  <div class="flex gh-setting-action gh-portal-custom-icon">
                                                      {{#if uploader.isUploading}}
                                                          <div class="gh-portal-button-icon">
                                                              <div class="gh-loading-spinner"></div>
                                                          </div>
                                                      {{else if this.customIcon}}
                                                          <img
                                                              class="gh-portal-button-icon gh-portal-button-custom {{if (eq this.membersUtils.buttonIcon this.customIcon) "selected-icon"}}"
                                                              src="{{this.customIcon}}"
                                                              onclick={{action "selectDefaultIcon" this.customIcon}}
                                                              alt="icon"
                                                              data-test-icon-img
                                                          >
                                                          {{#if (eq this.membersUtils.buttonIcon this.customIcon)}}
                                                          <button type="button" class="gh-btn gh-btn-hover-red gh-portal-button-deleteicon" {{action "deleteCustomIcon"}}>
                                                              <span> {{svg-jar "trash" class="w5 h5"}} </span>
                                                          </button>
                                                          {{/if}}
                                                      {{else}}
                                                          <button type="button" class="gh-btn gh-portal-button-uploadicon" onclick={{action "triggerFileDialog"}} data-test-image-upload-btn="icon" data-tooltip="Upload icon">
                                                              <span>{{svg-jar "upload-fill" class="w5 h5"}}</span>
                                                          </button>
                                                          <div style="display:none">
                                                              <GhFileInput
                                                                  @multiple={{false}}
                                                                  @action={{uploader.setFiles}}
                                                                  @accept={{this.iconMimeTypes}}
                                                                  data-test-file-input="icon"
                                                              />
                                                          </div>
                                                      {{/if}}
                                                  </div>
                                              </div>
                                          </GhUploader>
  
                                      </GhFormGroup>
                                  {{/if}}
                              </div>
                              {{#if showButtonTextSetting}}
                              <GhFormGroup @classNames="space-l">
                                  <h4 class="gh-portal-setting-title">Signup button text</h4>
  
                                  <div class="flex items-center mt2">
                                      <GhTextInput
                                          @value={{readonly this.settings.portalButtonSignupText}}
                                          @type="text"
                                          @input={{action "setSignupButtonText"}}
                                      />
                                  </div>
                              </GhFormGroup>
                              {{/if}}
                          {{/if}}
                      </div>
  
                      <div class="gh-portal-setting-section" onclick={{action "switchPreviewPage" "accountHome"}}>
                          <h3 class="gh-portal-setting-sectionheading">Account page settings</h3>
                          <GhFormGroup @classNames="space-l mt5">
                              <h4 class="gh-portal-setting-title">Support email address</h4>
                              <div class="mt2">
                                  <GhTextInput
                                      @value={{readonly this.supportAddress}}
                                      @input={{action "setSupportAddress" value="target.value"}}
                                  />
                                  <GhTaskButton
                                      @buttonText="Update support address"
                                      @runningText="Sending..."
                                      @successText="Confirmation email sent"
                                      @disabled={{this.disableUpdateSupportAddressButton}}
                                      @task={{this.updateSupportAddress}}
                                      @class="gh-btn gh-btn-green gh-btn-icon gh-btn-textfield-group gh-portal-emailupdate-button"
                                      data-test-button="update-support-address"
                                  />
                              </div>
                              <p>How members can reach you for help with their account (public)</p>
                          </GhFormGroup>
                      </div>
                  </fieldset>
              </div>
          </div>
          <div class="gh-portal-settings-main">
              <div class="gh-portal-settings-previewheader">
  
                  <div class="gh-btn-group">
                      <a class="gh-btn {{if (eq this.page "signup") "gh-btn-group-selected"}}" href="#" {{action "switchPreviewPage" "signup"}} data-test-link="switch-portal-preview-page"><span>Signup</span></a>
                      <a class="gh-btn {{if (eq this.page "accountHome") "gh-btn-group-selected"}}" href="#" {{action "switchPreviewPage" "accountHome"}} data-test-link="switch-portal-preview-page"><span>Account</span></a>
                      <a class="gh-btn {{if this.showLinksPage "gh-btn-group-selected"}}" href="#" {{action "switchPreviewPage" "links"}} data-test-link="switch-portal-preview-page"><span>Links</span></a>
                  </div>
  
                  <div class="gh-portal-settings-actions">
                      <button
                          class="gh-btn mr3"
                          {{action "closeModal"}}
                          {{!-- disable mouseDown so it doesn't trigger focus-out validations --}}
                          {{on "mousedown" (optional this.noop)}}
                          data-test-button="cancel-custom-view-form"
                      >
                          <span>Cancel</span>
                      </button>
  
                      <GhTaskButton
                          @buttonText="Save and close"
                          @successText="Saved"
                          @task={{this.saveTask}}
                          @idleClass="gh-btn-primary"
                          @class="gh-btn gh-btn-icon"
                          data-test-button="save-members-modal-setting"
                      />
                  </div>
              </div>
  
              {{#if this.showLinksPage}}
              <div class="gh-portal-preview-wrapper">
                  <div class="gh-portal-preview-container">
                      <GhPortalLinks />
                  </div>
              </div>
              {{/if}}
  
              <div class="gh-portal-preview-container {{if this.showLinksPage "hide"}}">
                  <div class="gh-portal-site-frame-cover"> </div>
                  <GhSiteIframe
                      class="gh-portal-siteiframe {{if (feature "multipleProducts") "gh-portal-siteiframe-enabled"}}"
                      @src={{this.portalPreviewUrl}}
                      @guid={{this.portalPreviewGuid}}
                      @invisibleUntilLoaded="portal-ready" />
              </div>
  
          </div>
          {{/if}}
      </div>
  </div>
  
  */
  {
    "id": "b9sQtbh6",
    "block": "{\"symbols\":[\"uploader\",\"imgIcon\",\"product\"],\"statements\":[[10,\"div\"],[14,0,\"modal-body gh-ps-modal-body\"],[12],[2,\"\\n    \"],[11,\"div\"],[24,0,\"flex pa0 flex-grow-1 gh-portal-settings\"],[4,[38,14],[[30,[36,19],[[32,0,[\"finishPreloading\"]]],null]],null],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"isPreloading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"gh-portal-settings-sidebar\"],[12],[2,\"\\n            \"],[10,\"h2\"],[14,0,\"gh-portal-settings-title\"],[12],[2,\"Portal settings\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-portal-form-wrapper\"],[12],[2,\"\\n                \"],[10,\"fieldset\"],[14,0,\"gh-portal-settings-form\"],[12],[2,\"\\n                    \"],[10,\"div\"],[15,0,[31,[\"gh-portal-setting-section \",[30,[36,4],[[30,[36,12],[[32,0,[\"settings\",\"membersSignupAccess\"]],\"all\"],null],\"disabled-overlay\"],null]]]],[15,\"onclick\",[30,[36,1],[[32,0],\"switchPreviewPage\",\"signup\"],null]],[12],[2,\"\\n                        \"],[10,\"h3\"],[14,0,\"gh-portal-setting-sectionheading\"],[12],[2,\"Signup options\"],[13],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@classNames\"],[\"gh-members-subscribed-checkbox gh-portal-setting-first pb5 mb0\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex justify-between items-center\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"mr3\"],[12],[2,\"\\n                                    \"],[10,\"h4\"],[14,0,\"gh-portal-setting-title\"],[12],[2,\"Display name in signup form\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"for-switch small\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[14,0,\"switch\"],[14,\"for\",\"signup-name-checkbox\"],[12],[2,\"\\n                                        \"],[11,\"input\"],[16,\"checked\",[32,0,[\"settings\",\"portalName\"]]],[24,1,\"signup-name-checkbox\"],[24,3,\"signup-name-checkbox\"],[16,\"disabled\",[30,[36,12],[[32,0,[\"settings\",\"membersSignupAccess\"]],\"all\"],null]],[24,4,\"checkbox\"],[4,[38,11],[\"click\",[30,[36,1],[[32,0],\"togglePortalName\"],[[\"value\"],[\"target.checked\"]]]],null],[12],[13],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,4],[[32,0,[\"membersUtils\",\"isStripeEnabled\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[11,\"div\"],[4,[38,14],[[32,0,[\"refreshAfterStripeConnected\"]]],null],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"showPortalTiers\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[10,\"div\"],[14,0,\"mb3\"],[12],[2,\"\\n                                        \"],[10,\"h4\"],[14,0,\"gh-portal-setting-title\"],[12],[2,\"Tiers available at signup\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"form-group mb0 for-checkbox\"],[12],[2,\"\\n                                        \"],[10,\"label\"],[14,0,\"checkbox\"],[14,\"for\",\"free-plan\"],[12],[2,\"\\n                                            \"],[11,\"input\"],[16,\"checked\",[32,0,[\"membersUtils\",\"isFreeChecked\"]]],[24,1,\"free-plan\"],[24,3,\"free-plan\"],[16,\"disabled\",[30,[36,13],[[30,[36,10],[[32,0,[\"membersUtils\",\"isStripeEnabled\"]]],null],[30,[36,12],[[32,0,[\"settings\",\"membersSignupAccess\"]],\"all\"],null]],null]],[24,0,\"gh-input post-settings-featured\"],[24,4,\"checkbox\"],[4,[38,11],[\"click\",[30,[36,1],[[32,0],\"togglePlan\",\"free\"],null]],null],[12],[13],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                            \"],[10,\"p\"],[12],[2,\"Free\"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n\"],[6,[37,7],[[30,[36,6],[[30,[36,6],[[32,0,[\"products\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                        \"],[10,\"div\"],[14,0,\"form-group mb0 for-checkbox\"],[12],[2,\"\\n                                            \"],[10,\"label\"],[14,0,\"checkbox\"],[15,\"for\",[32,3,[\"id\"]]],[12],[2,\"\\n                                                \"],[11,\"input\"],[16,1,[32,3,[\"id\"]]],[16,3,[32,3,[\"id\"]]],[16,\"checked\",[32,3,[\"checked\"]]],[16,\"disabled\",[30,[36,13],[[30,[36,10],[[32,0,[\"membersUtils\",\"isStripeEnabled\"]]],null],[30,[36,12],[[32,0,[\"settings\",\"membersSignupAccess\"]],\"all\"],null]],null]],[24,0,\"gh-input post-settings-featured\"],[24,4,\"checkbox\"],[4,[38,11],[\"click\",[30,[36,1],[[32,0],\"toggleProduct\",[32,3,[\"id\"]]],null]],null],[12],[13],[2,\"\\n                                                \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                                \"],[10,\"p\"],[12],[1,[32,3,[\"name\"]]],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n\"]],\"parameters\":[3]}]]]],\"parameters\":[]}]]],[2,\"                                \"],[10,\"div\"],[15,0,[31,[\"mb3 \",[30,[36,4],[[30,[36,16],[[30,[36,15],[\"multipleProducts\"],null],[32,0,[\"showPortalTiers\"]]],null],\"mt5\",\"\"],null]]]],[12],[2,\"\\n                                    \"],[10,\"h4\"],[14,0,\"gh-portal-setting-title\"],[12],[2,\"Prices available at signup\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n\"],[6,[37,17],[[32,0,[\"showPortalTiers\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[10,\"div\"],[14,0,\"form-group mb0 for-checkbox\"],[12],[2,\"\\n                                        \"],[10,\"label\"],[14,0,\"checkbox\"],[14,\"for\",\"free-plan\"],[12],[2,\"\\n                                            \"],[11,\"input\"],[16,\"checked\",[32,0,[\"membersUtils\",\"isFreeChecked\"]]],[24,1,\"free-plan\"],[24,3,\"free-plan\"],[16,\"disabled\",[30,[36,13],[[30,[36,10],[[32,0,[\"membersUtils\",\"isStripeEnabled\"]]],null],[30,[36,12],[[32,0,[\"settings\",\"membersSignupAccess\"]],\"all\"],null]],null]],[24,0,\"gh-input post-settings-featured\"],[24,4,\"checkbox\"],[4,[38,11],[\"click\",[30,[36,1],[[32,0],\"togglePlan\",\"free\"],null]],null],[12],[13],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                            \"],[10,\"p\"],[12],[2,\"Free\"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[10,\"div\"],[14,0,\"form-group mb0 for-checkbox\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[14,0,\"checkbox\"],[14,\"for\",\"monthly-plan\"],[12],[2,\"\\n                                        \"],[11,\"input\"],[24,1,\"monthly-plan\"],[24,3,\"monthly-plan\"],[16,\"checked\",[32,0,[\"isMonthlyChecked\"]]],[16,\"disabled\",[30,[36,13],[[30,[36,10],[[32,0,[\"membersUtils\",\"isStripeEnabled\"]]],null],[30,[36,12],[[32,0,[\"settings\",\"membersSignupAccess\"]],\"all\"],null]],null]],[24,0,\"gh-input post-settings-featured\"],[24,4,\"checkbox\"],[4,[38,11],[\"click\",[30,[36,1],[[32,0],\"togglePlan\",\"monthly\"],null]],null],[12],[13],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                        \"],[10,\"p\"],[12],[2,\"Monthly\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"form-group mb0 for-checkbox\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[14,0,\"checkbox\"],[14,\"for\",\"yearly-plan\"],[12],[2,\"\\n                                        \"],[11,\"input\"],[24,1,\"yearly-plan\"],[24,3,\"yearly-plan\"],[16,\"checked\",[32,0,[\"isYearlyChecked\"]]],[16,\"disabled\",[30,[36,13],[[30,[36,10],[[32,0,[\"membersUtils\",\"isStripeEnabled\"]]],null],[30,[36,12],[[32,0,[\"settings\",\"membersSignupAccess\"]],\"all\"],null]],null]],[24,0,\"gh-input post-settings-featured\"],[24,4,\"checkbox\"],[4,[38,11],[\"click\",[30,[36,1],[[32,0],\"togglePlan\",\"yearly\"],null]],null],[12],[13],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                        \"],[10,\"p\"],[12],[2,\"Yearly\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-portal-setting-no-stripe\"],[12],[2,\"\\n                            You need to \"],[11,\"button\"],[16,0,[31,[\"gh-btn gh-btn-link black \",[30,[36,4],[[30,[36,10],[[32,0,[\"session\",\"user\",\"isAdmin\"]]],null],\"disabled\"],null]]]],[4,[38,11],[\"click\",[30,[36,1],[[32,0],\"openStripeSettings\"],null]],null],[12],[2,\"connect to Stripe\"],[13],[2,\" to take payments\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-portal-setting-section\"],[15,\"onclick\",[30,[36,1],[[32,0],\"switchPreviewPage\",\"signup\"],null]],[12],[2,\"\\n                        \"],[10,\"h3\"],[14,0,\"gh-portal-setting-sectionheading\"],[12],[2,\"Look & feel\"],[13],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@classNames\"],[\"gh-members-subscribed-checkbox gh-portal-setting-first mb0 b--whitegrey\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex justify-between items-center\"],[12],[2,\"\\n                                \"],[10,\"h4\"],[14,0,\"gh-portal-setting-title\"],[12],[2,\"Show Portal button\"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"for-switch small\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[14,0,\"switch\"],[14,\"for\",\"portal-button-checkbox\"],[12],[2,\"\\n                                        \"],[10,\"input\"],[15,\"checked\",[32,0,[\"settings\",\"portalButton\"]]],[14,1,\"portal-button-checkbox\"],[14,3,\"portal-button-checkbox\"],[15,\"onclick\",[30,[36,1],[[32,0],\"togglePortalButton\"],[[\"value\"],[\"target.checked\"]]]],[14,4,\"checkbox\"],[12],[13],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,4],[[32,0,[\"settings\",\"portalButton\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"mt5\"],[12],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[\"@classNames\"],[\"space-l\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"h4\"],[14,0,\"gh-portal-setting-title mb1\"],[12],[2,\"Portal button style\"],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"gh-select mt2\"],[14,\"data-select-text\",\"test\"],[14,\"tabindex\",\"0\"],[12],[2,\"\\n                                        \"],[8,\"one-way-select\",[],[[\"@id\",\"@name\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@value\",\"@update\"],[\"portal-button-style\",\"portal[button-style]\",[32,0,[\"buttonStyleOptions\"]],\"name\",\"label\",[32,0,[\"selectedButtonStyle\"]],[30,[36,1],[[32,0],\"setButtonStyle\"],null]]],null],[2,\"\\n                                        \"],[1,[30,[36,2],[\"arrow-down-small\"],null]],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,4],[[35,8]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[8,\"gh-form-group\",[],[[\"@classNames\"],[\"space-l\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[10,\"h4\"],[14,0,\"gh-portal-setting-title\"],[12],[2,\"Icon\"],[13],[2,\"\\n                                        \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@paramsHash\",\"@onComplete\"],[[32,0,[\"iconExtensions\"]],[30,[36,5],null,[[\"purpose\"],[\"image\"]]],[30,[36,1],[[32,0],\"imageUploaded\",\"buttonIcon\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"flex items-center justify-between mt2 br3 ba b--whitegrey bg-white\"],[12],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"gh-portal-settings-icons\"],[12],[2,\"\\n\"],[6,[37,7],[[30,[36,6],[[30,[36,6],[[32,0,[\"membersUtils\",\"defaultButtonIcons\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                                        \"],[10,\"span\"],[15,0,[31,[\"gh-portal-button-icon \",[30,[36,4],[[30,[36,3],[[32,0,[\"membersUtils\",\"buttonIcon\"]],[32,2,[\"value\"]]],null],\"selected-icon\"],null]]]],[15,\"onclick\",[30,[36,1],[[32,0],\"selectDefaultIcon\",[32,2,[\"value\"]]],null]],[12],[2,\"\\n                                                            \"],[1,[30,[36,2],[[32,2,[\"icon\"]]],null]],[2,\"\\n                                                        \"],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"                                                \"],[13],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"flex gh-setting-action gh-portal-custom-icon\"],[12],[2,\"\\n\"],[6,[37,4],[[32,1,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                        \"],[10,\"div\"],[14,0,\"gh-portal-button-icon\"],[12],[2,\"\\n                                                            \"],[10,\"div\"],[14,0,\"gh-loading-spinner\"],[12],[13],[2,\"\\n                                                        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,4],[[32,0,[\"customIcon\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                        \"],[10,\"img\"],[15,0,[31,[\"gh-portal-button-icon gh-portal-button-custom \",[30,[36,4],[[30,[36,3],[[32,0,[\"membersUtils\",\"buttonIcon\"]],[32,0,[\"customIcon\"]]],null],\"selected-icon\"],null]]]],[15,\"src\",[31,[[32,0,[\"customIcon\"]]]]],[15,\"onclick\",[30,[36,1],[[32,0],\"selectDefaultIcon\",[32,0,[\"customIcon\"]]],null]],[14,\"alt\",\"icon\"],[14,\"data-test-icon-img\",\"\"],[12],[13],[2,\"\\n\"],[6,[37,4],[[30,[36,3],[[32,0,[\"membersUtils\",\"buttonIcon\"]],[32,0,[\"customIcon\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                                        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-hover-red gh-portal-button-deleteicon\"],[24,4,\"button\"],[4,[38,1],[[32,0],\"deleteCustomIcon\"],null],[12],[2,\"\\n                                                            \"],[10,\"span\"],[12],[2,\" \"],[1,[30,[36,2],[\"trash\"],[[\"class\"],[\"w5 h5\"]]]],[2,\" \"],[13],[2,\"\\n                                                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"                                                        \"],[10,\"button\"],[14,0,\"gh-btn gh-portal-button-uploadicon\"],[15,\"onclick\",[30,[36,1],[[32,0],\"triggerFileDialog\"],null]],[14,\"data-test-image-upload-btn\",\"icon\"],[14,\"data-tooltip\",\"Upload icon\"],[14,4,\"button\"],[12],[2,\"\\n                                                            \"],[10,\"span\"],[12],[1,[30,[36,2],[\"upload-fill\"],[[\"class\"],[\"w5 h5\"]]]],[13],[2,\"\\n                                                        \"],[13],[2,\"\\n                                                        \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                                                            \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"icon\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[32,1,[\"setFiles\"]],[32,0,[\"iconMimeTypes\"]]]],null],[2,\"\\n                                                        \"],[13],[2,\"\\n                                                    \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                                                \"],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"]],\"parameters\":[1]}]]],[2,\"\\n\\n                                    \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n\"],[6,[37,4],[[35,9]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[8,\"gh-form-group\",[],[[\"@classNames\"],[\"space-l\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"h4\"],[14,0,\"gh-portal-setting-title\"],[12],[2,\"Signup button text\"],[13],[2,\"\\n\\n                                \"],[10,\"div\"],[14,0,\"flex items-center mt2\"],[12],[2,\"\\n                                    \"],[8,\"gh-text-input\",[],[[\"@value\",\"@type\",\"@input\"],[[30,[36,0],[[32,0,[\"settings\",\"portalButtonSignupText\"]]],null],\"text\",[30,[36,1],[[32,0],\"setSignupButtonText\"],null]]],null],[2,\"\\n                                \"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n\\n                    \"],[10,\"div\"],[14,0,\"gh-portal-setting-section\"],[15,\"onclick\",[30,[36,1],[[32,0],\"switchPreviewPage\",\"accountHome\"],null]],[12],[2,\"\\n                        \"],[10,\"h3\"],[14,0,\"gh-portal-setting-sectionheading\"],[12],[2,\"Account page settings\"],[13],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@classNames\"],[\"space-l mt5\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-portal-setting-title\"],[12],[2,\"Support email address\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"mt2\"],[12],[2,\"\\n                                \"],[8,\"gh-text-input\",[],[[\"@value\",\"@input\"],[[30,[36,0],[[32,0,[\"supportAddress\"]]],null],[30,[36,1],[[32,0],\"setSupportAddress\"],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                                \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"update-support-address\"]],[[\"@buttonText\",\"@runningText\",\"@successText\",\"@disabled\",\"@task\",\"@class\"],[\"Update support address\",\"Sending...\",\"Confirmation email sent\",[32,0,[\"disableUpdateSupportAddressButton\"]],[32,0,[\"updateSupportAddress\"]],\"gh-btn gh-btn-green gh-btn-icon gh-btn-textfield-group gh-portal-emailupdate-button\"]],null],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"How members can reach you for help with their account (public)\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-portal-settings-main\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-portal-settings-previewheader\"],[12],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"gh-btn-group\"],[12],[2,\"\\n                    \"],[11,\"a\"],[16,0,[31,[\"gh-btn \",[30,[36,4],[[30,[36,3],[[32,0,[\"page\"]],\"signup\"],null],\"gh-btn-group-selected\"],null]]]],[24,6,\"#\"],[24,\"data-test-link\",\"switch-portal-preview-page\"],[4,[38,1],[[32,0],\"switchPreviewPage\",\"signup\"],null],[12],[10,\"span\"],[12],[2,\"Signup\"],[13],[13],[2,\"\\n                    \"],[11,\"a\"],[16,0,[31,[\"gh-btn \",[30,[36,4],[[30,[36,3],[[32,0,[\"page\"]],\"accountHome\"],null],\"gh-btn-group-selected\"],null]]]],[24,6,\"#\"],[24,\"data-test-link\",\"switch-portal-preview-page\"],[4,[38,1],[[32,0],\"switchPreviewPage\",\"accountHome\"],null],[12],[10,\"span\"],[12],[2,\"Account\"],[13],[13],[2,\"\\n                    \"],[11,\"a\"],[16,0,[31,[\"gh-btn \",[30,[36,4],[[32,0,[\"showLinksPage\"]],\"gh-btn-group-selected\"],null]]]],[24,6,\"#\"],[24,\"data-test-link\",\"switch-portal-preview-page\"],[4,[38,1],[[32,0],\"switchPreviewPage\",\"links\"],null],[12],[10,\"span\"],[12],[2,\"Links\"],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"gh-portal-settings-actions\"],[12],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn mr3\"],[24,\"data-test-button\",\"cancel-custom-view-form\"],[4,[38,1],[[32,0],\"closeModal\"],null],[4,[38,11],[\"mousedown\",[30,[36,18],[[32,0,[\"noop\"]]],null]],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\\n                    \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-members-modal-setting\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@idleClass\",\"@class\"],[\"Save and close\",\"Saved\",[32,0,[\"saveTask\"]],\"gh-btn-primary\",\"gh-btn gh-btn-icon\"]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n\"],[6,[37,4],[[32,0,[\"showLinksPage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-portal-preview-wrapper\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-portal-preview-container\"],[12],[2,\"\\n                    \"],[8,\"gh-portal-links\",[],[[],[]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"div\"],[15,0,[31,[\"gh-portal-preview-container \",[30,[36,4],[[32,0,[\"showLinksPage\"]],\"hide\"],null]]]],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-portal-site-frame-cover\"],[12],[2,\" \"],[13],[2,\"\\n                \"],[8,\"gh-site-iframe\",[[16,0,[31,[\"gh-portal-siteiframe \",[30,[36,4],[[30,[36,15],[\"multipleProducts\"],null],\"gh-portal-siteiframe-enabled\"],null]]]]],[[\"@src\",\"@guid\",\"@invisibleUntilLoaded\"],[[32,0,[\"portalPreviewUrl\"]],[32,0,[\"portalPreviewGuid\"]],\"portal-ready\"]],null],[2,\"\\n            \"],[13],[2,\"\\n\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"readonly\",\"action\",\"svg-jar\",\"eq\",\"if\",\"hash\",\"-track-array\",\"each\",\"showIconSetting\",\"showButtonTextSetting\",\"not\",\"on\",\"not-eq\",\"or\",\"did-insert\",\"feature\",\"and\",\"unless\",\"optional\",\"fn\"]}",
    "moduleName": "ghost-admin/components/modal-portal-settings.hbs"
  });

  const ICON_EXTENSIONS = ['gif', 'jpg', 'jpeg', 'png', 'svg'];

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    config: Ember.inject.service(),
    membersUtils: Ember.inject.service(),
    settings: Ember.inject.service(),
    store: Ember.inject.service(),
    session: Ember.inject.service(),
    feature: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),
    page: 'signup',
    iconExtensions: null,
    isShowModalLink: true,
    customIcon: null,
    showLinksPage: false,
    showLeaveSettingsModal: false,
    isPreloading: true,
    portalPreviewGuid: 'modal-portal-settings',

    confirm() {},

    backgroundStyle: Ember.computed('settings.accentColor', function () {
      let color = this.settings.get('accentColor') || '#ffffff';
      return Ember.String.htmlSafe(`background-color: ${color}`);
    }),
    disableUpdateSupportAddressButton: Ember.computed('supportAddress', function () {
      const savedSupportAddress = this.get('settings.membersSupportAddress') || '';

      if (!savedSupportAddress.includes('@') && this.config.emailDomain) {
        return !this.supportAddress || this.supportAddress === `${savedSupportAddress}@${this.config.emailDomain}`;
      }

      return !this.supportAddress || this.supportAddress === savedSupportAddress;
    }),
    showModalLinkOrAttribute: Ember.computed('isShowModalLink', function () {
      if (this.isShowModalLink) {
        return `#/portal`;
      }

      return `data-portal`;
    }),
    portalPreviewUrl: Ember.computed('page', 'membersUtils.{isFreeChecked,isMonthlyChecked,isYearlyChecked}', 'settings.{portalName,portalButton,portalButtonIcon,portalButtonSignupText,portalButtonStyle,accentColor,portalPlans.[],portalProducts.[]}', function () {
      const options = this.getProperties(['page']);
      return this.membersUtils.getPortalPreviewUrl(options);
    }),
    showIconSetting: Ember.computed('selectedButtonStyle', function () {
      const selectedButtonStyle = this.get('selectedButtonStyle.name') || '';
      return selectedButtonStyle.includes('icon');
    }),
    showButtonTextSetting: Ember.computed('selectedButtonStyle', function () {
      const selectedButtonStyle = this.get('selectedButtonStyle.name') || '';
      return selectedButtonStyle.includes('text');
    }),
    selectedButtonStyle: Ember.computed('settings.portalButtonStyle', function () {
      return this.buttonStyleOptions.find(buttonStyle => {
        return buttonStyle.name === this.settings.get('portalButtonStyle');
      });
    }),
    isFreeChecked: Ember.computed('settings.{portalPlans.[],membersSignupAccess}', function () {
      const allowedPlans = this.settings.get('portalPlans') || [];
      return this.settings.get('membersSignupAccess') === 'all' && allowedPlans.includes('free');
    }),
    isMonthlyChecked: Ember.computed('settings.portalPlans.[]', 'isStripeConfigured', function () {
      const allowedPlans = this.settings.get('portalPlans') || [];
      return this.membersUtils.isStripeEnabled && allowedPlans.includes('monthly');
    }),
    isYearlyChecked: Ember.computed('settings.portalPlans.[]', 'isStripeConfigured', function () {
      const allowedPlans = this.settings.get('portalPlans') || [];
      return this.membersUtils.isStripeEnabled && allowedPlans.includes('yearly');
    }),
    products: Ember.computed('model.products.[]', 'settings.portalProducts.[]', 'isPreloading', function () {
      const paidProducts = this.model.products?.filter(product => product.type === 'paid' && product.active === true);

      if (this.isPreloading || !paidProducts?.length) {
        return [];
      }

      const portalProducts = this.settings.get('portalProducts') || [];
      const products = paidProducts.map(product => {
        return {
          id: product.id,
          name: product.name,
          checked: portalProducts.includes(product.id)
        };
      });
      return products;
    }),
    showPortalTiers: Ember.computed('products', 'feature.multipleProducts', function () {
      return this.products?.length > 1 && this.feature.get('multipleProducts');
    }),

    init() {
      this._super(...arguments);

      this.buttonStyleOptions = [{
        name: 'icon-and-text',
        label: 'Icon and text'
      }, {
        name: 'icon-only',
        label: 'Icon only'
      }, {
        name: 'text-only',
        label: 'Text only'
      }];
      this.iconExtensions = ICON_EXTENSIONS;
      this.set('supportAddress', this.parseEmailAddress(this.settings.get('membersSupportAddress')));
    },

    didInsertElement() {
      this._super(...arguments);

      this.settings.get('errors').clear();
    },

    actions: {
      toggleFreePlan(isChecked) {
        this.updateAllowedPlan('free', isChecked);
      },

      togglePlan(plan, event) {
        this.updateAllowedPlan(plan, event.target.checked);
      },

      toggleProduct(productId, event) {
        this.updateAllowedProduct(productId, event.target.checked);
      },

      togglePortalButton(showButton) {
        this.settings.set('portalButton', showButton);
      },

      togglePortalName(showSignupName) {
        this.settings.set('portalName', showSignupName);
      },

      confirm() {
        return this.saveTask.perform();
      },

      isPlanSelected(plan) {
        const allowedPlans = this.settings.get('portalPlans');
        return allowedPlans.includes(plan);
      },

      switchPreviewPage(page) {
        if (page === 'links') {
          this.set('showLinksPage', true);
          this.set('page', '');
        } else {
          this.set('showLinksPage', false);
          this.set('page', page);
        }
      },

      switchToSignupPage() {
        if (this.showLinksPage) {
          this.set('showLinksPage', false);
          this.set('page', 'signup');
        }
      },

      setButtonStyle(buttonStyle) {
        this.settings.set('portalButtonStyle', buttonStyle.name);
      },

      setSignupButtonText(event) {
        this.settings.set('portalButtonSignupText', event.target.value);
      },

      /**
       * Fired after an image upload completes
       * @param  {string} property - Property name to be set on `this.settings`
       * @param  {UploadResult[]} results - Array of UploadResult objects
       * @return {string} The URL that was set on `this.settings.property`
       */
      imageUploaded(property, results) {
        if (results[0]) {
          this.set('customIcon', results[0].url);
          this.settings.set('portalButtonIcon', results[0].url);
        }
      },

      /**
       * Opens a file selection dialog - Triggered by "Upload Image" buttons,
       * searches for the hidden file input within the .gh-setting element
       * containing the clicked button then simulates a click
       * @param  {MouseEvent} event - MouseEvent fired by the button click
       */
      triggerFileDialog(event) {
        // simulate click to open file dialog
        // using jQuery because IE11 doesn't support MouseEvent
        (0, _jquery.default)(event.target).closest('.gh-setting-action').find('input[type="file"]').click();
      },

      deleteCustomIcon() {
        this.set('customIcon', null);
        this.settings.set('portalButtonIcon', this.membersUtils.defaultIconKeys[0]);
      },

      selectDefaultIcon(icon) {
        this.settings.set('portalButtonIcon', icon);
      },

      closeLeaveSettingsModal() {
        this.set('showLeaveSettingsModal', false);
      },

      openStripeSettings() {
        this.isWaitingForStripeConnection = true;
        this.model.openStripeSettings();
      },

      leaveSettings() {
        this.closeModal();
      },

      validateFreeSignupRedirect() {
        return this._validateSignupRedirect(this.freeSignupRedirect, 'membersFreeSignupRedirect');
      },

      validatePaidSignupRedirect() {
        return this._validateSignupRedirect(this.paidSignupRedirect, 'membersPaidSignupRedirect');
      },

      setSupportAddress(supportAddress) {
        this.set('supportAddress', supportAddress);
      }

    },

    parseEmailAddress(address) {
      const emailAddress = address || 'noreply'; // Adds default domain as site domain

      if (emailAddress.indexOf('@') < 0 && this.config.emailDomain) {
        return `${emailAddress}@${this.config.emailDomain}`;
      }

      return emailAddress;
    },

    updateAllowedPlan(plan, isChecked) {
      const portalPlans = this.settings.get('portalPlans') || [];
      const allowedPlans = [...portalPlans];

      if (!isChecked) {
        this.settings.set('portalPlans', allowedPlans.filter(p => p !== plan));
      } else {
        allowedPlans.push(plan);
        this.settings.set('portalPlans', allowedPlans);
      }
    },

    updateAllowedProduct(productId, isChecked) {
      const portalProducts = this.settings.get('portalProducts') || [];
      const allowedProducts = [...portalProducts];

      if (!isChecked) {
        this.settings.set('portalProducts', allowedProducts.filter(p => p !== productId));
      } else {
        allowedProducts.push(productId);
        this.settings.set('portalProducts', allowedProducts);
      }
    },

    _validateSignupRedirect(url, type) {
      let errMessage = `Please enter a valid URL`;
      this.settings.get('errors').remove(type);
      this.settings.get('hasValidated').removeObject(type);

      if (url === null) {
        this.settings.get('errors').add(type, errMessage);
        this.settings.get('hasValidated').pushObject(type);
        return false;
      }

      if (url === undefined) {
        // Not initialised
        return;
      }

      if (url.href.startsWith(this.siteUrl)) {
        const path = url.href.replace(this.siteUrl, '');
        this.settings.set(type, path);
      } else {
        this.settings.set(type, url.href);
      }
    },

    finishPreloading: Ember._action(async function () {
      if (this.model.preloadTask?.isRunning) {
        await this.model.preloadTask;
      }

      const portalButtonIcon = this.settings.get('portalButtonIcon') || '';

      if (portalButtonIcon && !this.membersUtils.defaultIconKeys.includes(portalButtonIcon)) {
        this.set('customIcon', this.settings.get('portalButtonIcon'));
      }

      this.siteUrl = this.config.get('blogUrl');
      this.set('isPreloading', false);
    }),
    refreshAfterStripeConnected: Ember._action(async function () {
      if (this.isWaitingForStripeConnection) {
        await this.finishPreloading();
        this.notifyPropertyChange('page'); // force preview url to recompute

        this.set('portalPreviewGuid', Date.now().valueOf()); // force preview re-render

        this.isWaitingForStripeConnection = false;
      }
    }),
    copyLinkOrAttribute: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.showModalLinkOrAttribute);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 3000);
    }),
    saveTask: (0, _emberConcurrency.task)(function* () {
      this.send('validateFreeSignupRedirect');
      this.send('validatePaidSignupRedirect');

      if (this.settings.get('errors').length !== 0) {
        return;
      }

      yield this.settings.save();
      this.closeModal();
    }).drop(),
    updateSupportAddress: (0, _emberConcurrency.task)(function* () {
      let url = this.get('ghostPaths.url').api('/settings/members/email');

      try {
        const response = yield this.ajax.post(url, {
          data: {
            email: this.supportAddress,
            type: 'supportAddressUpdate'
          }
        }); // this.toggleProperty('showSupportAddressConfirmation');

        return response;
      } catch (e) {
        // Failed to send email, retry
        return false;
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-product-price", ["exports", "ghost-admin/components/modal-base", "ghost-admin/utils/currency", "ember-concurrency-decorators"], function (_exports, _modalBase, _currency, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="webhook-form">
      <h1 data-test-text="title">{{this.title}}</h1>
  </header>
  <button class="close" href title="Close" {{action "closeModal"}} {{action (optional this.noop) on="mouseDown"}}>
      {{svg-jar "close"}}
  </button>
  
  <form>
  <div class="modal-body">
      <div class="gh-main-section-block">
          <div class="gh-main-section-content grey gh-product-priceform-block">
              <GhFormGroup @errors={{this.errors}} @property="name">
                  <label for="name" class="fw6">Name</label>
                  <GhTextInput
                      @value={{readonly this.price.nickname}}
                      @input={{action (mut this.price.nickname) value="target.value"}}
                      @name="name"
                      @id="name"
                      @class="gh-input" />
                  <GhErrorMessage @errors={{this.errors}} @property="name" />
              </GhFormGroup>
              <GhFormGroup @errors={{this.errors}} @property="description">
                  <label for="description" class="fw6">Description</label>
                  <GhTextInput
                      @value={{readonly this.price.description}}
                      @input={{action (mut this.price.description) value="target.value"}}
                      @name="description"
                      @id="description"
                      @class="gh-input" />
                  <GhErrorMessage @errors={{this.errors}} @property="description" />
              </GhFormGroup>
              <div class="gh-product-priceform-pricecurrency">
                  <GhFormGroup @errors={{this.errors}} @property="amount">
                      <label for="amount" class="fw6">Price</label>
                      <div class="flex items-center justify-center gh-labs-price-label">
                          <GhTextInput
                              @id="amount"
                              @value={{this.price.amount}}
                              @type="number"
                              @disabled={{this.isExistingPrice}}
                              @input={{action "setAmount" value="target.value"}}
                          />
                      </div>
                      <GhErrorMessage @errors={{this.errors}} @property="amount" />
                  </GhFormGroup>
                  <GhFormGroup @class="for-select">
                      <label class="fw6 f8"for="currency">Plan currency</label>
                      <span class="gh-select mt1">
                          {{one-way-select this.selectedCurrencyObj
                              id="currency"
                              name="currency"
                              options=(readonly this.allCurrencies)
                              optionValuePath="value"
                              optionLabelPath="label"
                              disabled=this.isExistingPrice
                              update=(action "setCurrency")
                          }}
                          {{svg-jar "arrow-down-small"}}
                      </span>
                  </GhFormGroup>
              </div>
              <GhFormGroup @errors={{this.price.errors}} @hasValidated={{this.price.hasValidated}} @property="billing-period">
                  <label for="billing-period" class="fw6">Billing period</label>
                  <GhProductsPriceBillingperiod
                      @updatePeriod={{action "updatePeriod"}}
                      @triggerId="period-input"
                      @value={{this.price.interval}} @disabled={{this.isExistingPrice}}
                  />
                  <GhErrorMessage @errors={{this.errors}} @property="interval" />
              </GhFormGroup>
          </div>
      </div>
  </div>
  </form>
  
  <div class="modal-footer">
      <button
          class="gh-btn"
          {{action "closeModal"}}
          {{!-- disable mouseDown so it doesn't trigger focus-out validations --}}
          {{action (optional this.noop) on="mouseDown"}}
          data-test-button="cancel-webhook"
      >
          <span>Cancel</span>
      </button>
      <GhTaskButton @buttonText="Save"
          @successText={{this.successText}}
          @task={{this.savePrice}}
          @class="gh-btn gh-btn-black gh-btn-icon"
          data-test-button="save-price" />
  </div>
  */
  {
    "id": "10hIIh2h",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"webhook-form\"],[12],[2,\"\\n    \"],[10,\"h1\"],[14,\"data-test-text\",\"title\"],[12],[1,[32,0,[\"title\"]]],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"button\"],[24,0,\"close\"],[24,6,\"\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[4,[38,0],[[32,0],[30,[36,1],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n    \"],[1,[30,[36,2],[\"close\"],null]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"form\"],[12],[2,\"\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-content grey gh-product-priceform-block\"],[12],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"name\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"label\"],[14,\"for\",\"name\"],[14,0,\"fw6\"],[12],[2,\"Name\"],[13],[2,\"\\n                \"],[8,\"gh-text-input\",[],[[\"@value\",\"@input\",\"@name\",\"@id\",\"@class\"],[[30,[36,3],[[32,0,[\"price\",\"nickname\"]]],null],[30,[36,0],[[32,0],[30,[36,4],[[32,0,[\"price\",\"nickname\"]]],null]],[[\"value\"],[\"target.value\"]]],\"name\",\"name\",\"gh-input\"]],null],[2,\"\\n                \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"name\"]],null],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"description\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"label\"],[14,\"for\",\"description\"],[14,0,\"fw6\"],[12],[2,\"Description\"],[13],[2,\"\\n                \"],[8,\"gh-text-input\",[],[[\"@value\",\"@input\",\"@name\",\"@id\",\"@class\"],[[30,[36,3],[[32,0,[\"price\",\"description\"]]],null],[30,[36,0],[[32,0],[30,[36,4],[[32,0,[\"price\",\"description\"]]],null]],[[\"value\"],[\"target.value\"]]],\"description\",\"description\",\"gh-input\"]],null],[2,\"\\n                \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"description\"]],null],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-product-priceform-pricecurrency\"],[12],[2,\"\\n                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"amount\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"amount\"],[14,0,\"fw6\"],[12],[2,\"Price\"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"flex items-center justify-center gh-labs-price-label\"],[12],[2,\"\\n                        \"],[8,\"gh-text-input\",[],[[\"@id\",\"@value\",\"@type\",\"@disabled\",\"@input\"],[\"amount\",[32,0,[\"price\",\"amount\"]],\"number\",[32,0,[\"isExistingPrice\"]],[30,[36,0],[[32,0],\"setAmount\"],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"amount\"]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[8,\"gh-form-group\",[],[[\"@class\"],[\"for-select\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,0,\"fw6 f8\"],[14,\"for\",\"currency\"],[12],[2,\"Plan currency\"],[13],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-select mt1\"],[12],[2,\"\\n                        \"],[1,[30,[36,5],[[32,0,[\"selectedCurrencyObj\"]]],[[\"id\",\"name\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"disabled\",\"update\"],[\"currency\",\"currency\",[30,[36,3],[[32,0,[\"allCurrencies\"]]],null],\"value\",\"label\",[32,0,[\"isExistingPrice\"]],[30,[36,0],[[32,0],\"setCurrency\"],null]]]]],[2,\"\\n                        \"],[1,[30,[36,2],[\"arrow-down-small\"],null]],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"price\",\"errors\"]],[32,0,[\"price\",\"hasValidated\"]],\"billing-period\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"label\"],[14,\"for\",\"billing-period\"],[14,0,\"fw6\"],[12],[2,\"Billing period\"],[13],[2,\"\\n                \"],[8,\"gh-products-price-billingperiod\",[],[[\"@updatePeriod\",\"@triggerId\",\"@value\",\"@disabled\"],[[30,[36,0],[[32,0],\"updatePeriod\"],null],\"period-input\",[32,0,[\"price\",\"interval\"]],[32,0,[\"isExistingPrice\"]]]],null],[2,\"\\n                \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"interval\"]],null],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-webhook\"],[4,[38,0],[[32,0],\"closeModal\"],null],[4,[38,0],[[32,0],[30,[36,1],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-price\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Save\",[32,0,[\"successText\"]],[32,0,[\"savePrice\"]],\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"action\",\"optional\",\"svg-jar\",\"readonly\",\"mut\",\"one-way-select\"]}",
    "moduleName": "ghost-admin/components/modal-product-price.hbs"
  });

  const classic = __EMBER_CLASSIC_DECORATOR;
  let ModalProductPrice = ( // TODO: update modals to work fully with Glimmer components
  _dec = Ember._tracked, _dec2 = Ember._tracked, _dec3 = Ember._tracked, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._action, _dec7 = Ember._action, _dec8 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), classic(_class = (_class2 = class ModalProductPrice extends _modalBase.default {
    constructor() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      super(...args);

      _initializerDefineProperty(this, "model", _descriptor, this);

      _initializerDefineProperty(this, "price", _descriptor2, this);

      _initializerDefineProperty(this, "currencyVal", _descriptor3, this);

      _initializerDefineProperty(this, "periodVal", _descriptor4, this);

      _initializerDefineProperty(this, "errors", _descriptor5, this);

      _defineProperty(this, "actions", {
        confirm() {
          this.confirmAction(...arguments);
        },

        updatePeriod(oldPeriod, newPeriod) {
          this.price.interval = newPeriod;
          this.periodVal = newPeriod;
        },

        setAmount(amount) {
          this.price.amount = !isNaN(amount) ? parseInt(amount) : 0;
        },

        setCurrency(currency) {
          this.price.currency = currency.value;
          this.currencyVal = currency.value;
        },

        // needed because ModalBase uses .send() for keyboard events
        closeModal() {
          this.close();
        }

      });
    }

    init() {
      super.init(...arguments);
      this.price = { ...(this.model.price || {})
      };
      this.topCurrencies = _currency.currencies.slice(0, 5).map(currency => {
        return {
          value: currency.isoCode.toLowerCase(),
          label: `${currency.isoCode} - ${currency.name}`,
          isoCode: currency.isoCode
        };
      });
      this.currencies = _currency.currencies.slice(5, _currency.currencies.length).map(currency => {
        return {
          value: currency.isoCode.toLowerCase(),
          label: `${currency.isoCode} - ${currency.name}`,
          isoCode: currency.isoCode
        };
      });
      this.allCurrencies = [{
        groupName: '—',
        options: this.topCurrencies
      }, {
        groupName: '—',
        options: this.currencies
      }];
      this.currencyVal = this.price.currency || 'usd';
      this.periodVal = this.price.interval || 'month';
    }

    get title() {
      if (this.isExistingPrice) {
        return `Price - ${this.price.nickname || 'No Name'}`;
      }

      return 'New Price';
    }

    get isExistingPrice() {
      return !!this.model.price;
    }

    get currency() {
      return this.price.currency || 'usd';
    }

    get selectedCurrencyObj() {
      return this.currencies.findBy('value', this.price.currency) || this.topCurrencies.findBy('value', this.price.currency);
    } // TODO: rename to confirm() when modals have full Glimmer support


    confirmAction() {
      this.confirm(this.price);
      this.close();
    }

    close(event) {
      event?.preventDefault?.();
      this.closeModal();
    }

    *savePrice() {
      this.validatePriceData();

      if (!Ember.isEmpty(this.errors) && Object.keys(this.errors).length > 0) {
        return;
      }

      const priceObj = { ...this.price,
        amount: (this.price.amount || 0) * 100
      };

      if (!priceObj.id) {
        priceObj.active = 1;
        priceObj.currency = priceObj.currency || 'usd';
        priceObj.interval = priceObj.interval || 'month';
        priceObj.type = 'recurring';
      }

      yield this.confirm(priceObj);
      this.send('closeModal');
    }

    validatePriceData() {
      this.errors = Ember.Object.create();

      if (!this.price.nickname) {
        this.errors.set('name', [{
          message: 'Please enter name'
        }]);
      }

      if (isNaN(this.price.amount) || this.price.amount === '') {
        this.errors.set('amount', [{
          message: 'Please enter amount'
        }]);
      }

      if (!this.price.interval || !['month', 'year'].includes(this.price.interval)) {
        this.errors.set('interval', [{
          message: 'Please enter billing interval'
        }]);
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "model", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "price", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "currencyVal", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "periodVal", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "errors", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return Ember.Object.create();
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "confirmAction", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "confirmAction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "close", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "close"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "savePrice", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "savePrice"), _class2.prototype)), _class2)) || _class);
  _exports.default = ModalProductPrice;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalProductPrice);
});
;define("ghost-admin/components/modal-product", ["exports", "ghost-admin/components/modal-base", "ghost-admin/models/product-benefit-item", "ghost-admin/utils/currency", "ember-concurrency-decorators"], function (_exports, _modalBase, _productBenefitItem, _currency, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <button class="close" href title="Close" {{action "closeModal"}} {{action (optional this.noop) on="mouseDown"}}>
      {{svg-jar "close"}}
  </button>
  
  <div class="gh-product-modal-content">
      <header class="modal-header" data-test-modal="webhook-form">
          <h1 data-test-text="title">{{this.title}}</h1>
      </header>
  
      <form>
      <div class="modal-body gh-form-edit-product">
          <div class="gh-main-section columns-3">
              <div class="gh-main-section-block span-2">
                  <h4 class="gh-main-section-header small bn">Basic</h4>
                  <div class="gh-main-section-content grey gh-product-priceform-block">
                      {{#if (not this.isFreeProduct)}}
                          <GhFormGroup @errors={{this.errors}} @property="name">
                              <label for="name" class="fw6">Name</label>
                              <GhTextInput
                                  @value={{readonly this.product.name}}
                                  @input={{action (mut this.product.name) value="target.value"}}
                                  @name="name"
                                  @placeholder="Bronze"
                                  @id="name"
                                  @class="gh-input" />
                              <GhErrorMessage @errors={{this.errors}} @property="name" />
                          </GhFormGroup>
                      {{/if}}
                      <GhFormGroup @errors={{this.errors}} @property="description">
                          <label for="description" class="fw6">Description</label>
                          {{#if (not this.isFreeProduct)}}
                              <GhTextInput
                                  @value={{readonly this.product.description}}
                                  @input={{action (mut this.product.description) value="target.value"}}
                                  @name="description"
                                  @placeholder="Full access to premium content"
                                  @id="description"
                                  @class="gh-input" />
                          {{else}}
                              <GhTextInput
                                  @value={{readonly this.product.description}}
                                  @input={{action (mut this.product.description) value="target.value"}}
                                  @name="description"
                                  @placeholder="Free preview of {{this.settings.title}}"
                                  @id="description"
                                  @class="gh-input" />
                          {{/if}}
                          <GhErrorMessage @errors={{this.errors}} @property="description" />
                      </GhFormGroup>
                      {{#if (not this.isFreeProduct)}}
                          <GhFormGroup @errors={{this.settings.errors}} @hasValidated={{this.settings.hasValidated}} @property="prices">
                              <div class="gh-settings-members-pricelabelcont">
                                  <label for="monthlyPrice">Prices</label>
                                  <span>–</span>
                                  <div>
                                      <span class="gh-setting-members-currency gh-select">
                                          <div class="gh-setting-members-currencylabel">
                                              <span>{{this.currency}}</span>
                                              {{svg-jar "arrow-down-small"}}
                                          </div>
                                          <OneWaySelect
                                              @value={{this.selectedCurrency}}
                                              id="currency"
                                              name="currency"
                                              @options={{readonly this.allCurrencies}}
                                              @optionValuePath="value"
                                              @optionLabelPath="label"
                                              @update={{action "setCurrency"}}
                                          />
                                      </span>
                                  </div>
                              </div>
                              <div class="gh-setting-members-prices">
  
                                  <div class="gh-input-group">
                                      <GhTextInput
                                          @id="monthlyPrice"
                                          @value={{readonly this.stripeMonthlyAmount}}
                                          @type="number"
                                          @input={{action (mut this.stripeMonthlyAmount) value="target.value"}}
                                          @focus-out={{action "validateStripePlans"}}
                                      />
                                      <span class="gh-input-append"><span class="ttu">{{this.currency}}</span>/month</span>
                                  </div>
                                  <div class="gh-input-group">
                                      <GhTextInput
                                          @id="yearlyPrice"
                                          @value={{readonly this.stripeYearlyAmount}}
                                          @type="number"
                                          @input={{action (mut this.stripeYearlyAmount) value="target.value"}}
                                          @focus-out={{this.validateStripePlans}}
                                          @placeholder=''
                                          data-test-title-input={{true}}
                                      />
                                      <span class="gh-input-append"><span class="ttu">{{this.currency}}</span>/year</span>
                                  </div>
                              </div>
                              {{#if this.stripePlanError}}
                                  <p class="response w-100"><span class="red">{{this.stripePlanError}}</span></p>
                              {{/if}}
                          </GhFormGroup>
                      {{/if}}
                  </div>
  
                  <h4 class="gh-main-section-header small bn">Benefits</h4>
                  <div class="gh-main-section-content grey gh-product-form-benefits">
                      <div class="gh-product-benefits">
                          <form id="product-benefits" class="gh-blognav" novalidate="novalidate">
                              <SortableObjects
                                  @sortableObjectList={{this.benefits}}
                                  @useSwap={{false}}
                                  @sortEndAction={{action "reorderItems"}}
                              >
                                  {{#each this.benefits as |benefitItem index|}}
                                      <DraggableObject @content={{benefitItem}} @dragHandle=".gh-blognav-grab" @isSortable={{true}}>
                                          <GhBenefitItem
                                              @benefitItem={{benefitItem}}
                                              @id={{index}}
                                              @addItem={{action "addBenefit"}}
                                              @focusItem={{action "focusItem"}}
                                              @deleteItem={{action "deleteBenefit"}}
                                              @updateLabel={{action "updateLabel"}}
                                              data-test-navitem={{index}} />
                                      </DraggableObject>
                                  {{/each}}
                              </SortableObjects>
                              <GhBenefitItem
                                  @isFreeProduct={{this.isFreeProduct}}
                                  @benefitItem={{this.newBenefit}}
                                  @addItem={{action "addBenefit"}}
                                  @deleteItem={{action "deleteBenefit"}}
                                  @updateLabel={{action "updateLabel"}}
                                  data-test-navitem="new" />
                          </form>
                      </div>
                  </div>
                  <h4 class="gh-main-section-header small bn">Advanced</h4>
                  <div class="gh-main-section-content grey gh-product-priceform-block">
                      <GhFormGroup>
                          <label for="" class="fw6">Welcome page</label>
                          <GhTextInput
                              @class="gh-input" />
                              <p>Redirect to this URL after signup for premium membership</p>
                      </GhFormGroup>
                  </div>
              </div>
              <div class="gh-main-section-block gh-product-form-tierpreview">
                  <div class="gh-product-form-tierpreview-content">
                      {{#if (not this.isFreeProduct)}}
                          <h4 class="gh-main-section-header small bn">Tier Preview</h4>
                      {{else}}
                          <h4 class="gh-main-section-header small bn">Free Membership Preview</h4>
                      {{/if}}
                      <div class="gh-main-section-content" style="border-color: {{this.settings.accentColor}}">
                          <span class="checkmark" style="background-color: {{this.settings.accentColor}}"></span>
  
                          {{#if this.product.name}}
                              <h4>{{this.product.name}}</h4>
                          {{else}}
                              <h4 class="placeholder">Bronze</h4>
                          {{/if}}
  
                          {{#if this.product.description}}
                              <p>{{this.product.description}}</p>
                          {{else}}
                              {{#if (not this.isFreeProduct)}}
                                  <p class="placeholder">Full access to premium content</p>
                              {{else}}
                                  <p class="placeholder">Free preview of {{this.settings.title}}</p>
                              {{/if}}
                          {{/if}}
  
                          {{#if this.benefits}}
                              <ul>
                              {{#each this.benefits as |benefitItem index|}}
                                  <li>{{svg-jar "check-2"}} <span>{{benefitItem.name}}</span></li>
                              {{/each}}
                              </ul>
                          {{else}}
                              <ul class="placeholder">
                                  {{#if (not this.isFreeProduct)}}
                                      <li>{{svg-jar "check-2"}} <span>Expert analysis</span></li>
                                  {{else}}
                                      <li>{{svg-jar "check-2"}} <span>Access to all public posts</span></li>
                                  {{/if}}
                              </ul>
                          {{/if}}
                          <div class="price">
                              {{#if (not this.isFreeProduct)}}
                                  {{#if this.stripeMonthlyAmount}}
                                      <span class="monthly-price">
                                          <span class="currency">{{currency-symbol this.currency}}</span>
                                          {{format-number this.stripeMonthlyAmount}}
                                          <span class="period">/month</span>
                                      </span>
                                  {{else}}
                                      <span class="monthly-price placeholder">
                                          <span class="currency">{{currency-symbol this.currency}}</span>
                                          0
                                          <span class="period">/month</span>
                                      </span>
                                  {{/if}}
  
                                  {{#if this.stripeYearlyAmount}}
                                      <span class="yearly-price">{{currency-symbol this.currency}}{{format-number this.stripeYearlyAmount}}/year</span>
                                  {{else}}
                                      <span class="yearly-price placeholder">0<span class="currency">{{this.currency}}</span>/year</span>
                                  {{/if}}
                              {{else}}
                              <span class="monthly-price">
                                  <span class="currency">{{currency-symbol this.currency}}</span>
                                  0
                              </span>
                              {{/if}}
                          </div>
                      </div>
                  </div>
              </div>
          </div>
      </div>
      </form>
  </div>
  
  <div class="modal-footer top-shadow items-center">
      <button
          class="gh-btn"
          {{action "closeModal"}}
          {{!-- disable mouseDown so it doesn't trigger focus-out validations --}}
          {{action (optional this.noop) on="mouseDown"}}
          data-test-button="cancel-webhook"
      >
          <span>Cancel</span>
      </button>
      <GhTaskButton @buttonText="{{if this.isExistingProduct "Save" "Add tier"}}"
          @successText={{this.successText}}
          @task={{this.saveProduct}}
          @idleClass="gh-btn-primary"
          @class="gh-btn {{if this.isExistingProduct "gh-btn-black" "gh-btn-green"}} gh-btn-icon"
          data-test-button="save-product" />
  </div>
  
  */
  {
    "id": "WeQhj4Oc",
    "block": "{\"symbols\":[\"benefitItem\",\"index\",\"benefitItem\",\"index\"],\"statements\":[[11,\"button\"],[24,0,\"close\"],[24,6,\"\"],[24,\"title\",\"Close\"],[4,[38,7],[[32,0],\"closeModal\"],null],[4,[38,7],[[32,0],[30,[36,10],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n    \"],[1,[30,[36,3],[\"close\"],null]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"gh-product-modal-content\"],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"webhook-form\"],[12],[2,\"\\n        \"],[10,\"h1\"],[14,\"data-test-text\",\"title\"],[12],[1,[32,0,[\"title\"]]],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"form\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"modal-body gh-form-edit-product\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section columns-3\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-block span-2\"],[12],[2,\"\\n                \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Basic\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-main-section-content grey gh-product-priceform-block\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,4],[[32,0,[\"isFreeProduct\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"name\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"name\"],[14,0,\"fw6\"],[12],[2,\"Name\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[],[[\"@value\",\"@input\",\"@name\",\"@placeholder\",\"@id\",\"@class\"],[[30,[36,8],[[32,0,[\"product\",\"name\"]]],null],[30,[36,7],[[32,0],[30,[36,9],[[32,0,[\"product\",\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],\"name\",\"Bronze\",\"name\",\"gh-input\"]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"name\"]],null],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"description\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"label\"],[14,\"for\",\"description\"],[14,0,\"fw6\"],[12],[2,\"Description\"],[13],[2,\"\\n\"],[6,[37,2],[[30,[36,4],[[32,0,[\"isFreeProduct\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[8,\"gh-text-input\",[],[[\"@value\",\"@input\",\"@name\",\"@placeholder\",\"@id\",\"@class\"],[[30,[36,8],[[32,0,[\"product\",\"description\"]]],null],[30,[36,7],[[32,0],[30,[36,9],[[32,0,[\"product\",\"description\"]]],null]],[[\"value\"],[\"target.value\"]]],\"description\",\"Full access to premium content\",\"description\",\"gh-input\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                            \"],[8,\"gh-text-input\",[],[[\"@value\",\"@input\",\"@name\",\"@placeholder\",\"@id\",\"@class\"],[[30,[36,8],[[32,0,[\"product\",\"description\"]]],null],[30,[36,7],[[32,0],[30,[36,9],[[32,0,[\"product\",\"description\"]]],null]],[[\"value\"],[\"target.value\"]]],\"description\",[31,[\"Free preview of \",[32,0,[\"settings\",\"title\"]]]],\"description\",\"gh-input\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"description\"]],null],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,4],[[32,0,[\"isFreeProduct\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"prices\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-settings-members-pricelabelcont\"],[12],[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"monthlyPrice\"],[12],[2,\"Prices\"],[13],[2,\"\\n                                \"],[10,\"span\"],[12],[2,\"–\"],[13],[2,\"\\n                                \"],[10,\"div\"],[12],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"gh-setting-members-currency gh-select\"],[12],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-setting-members-currencylabel\"],[12],[2,\"\\n                                            \"],[10,\"span\"],[12],[1,[32,0,[\"currency\"]]],[13],[2,\"\\n                                            \"],[1,[30,[36,3],[\"arrow-down-small\"],null]],[2,\"\\n                                        \"],[13],[2,\"\\n                                        \"],[8,\"one-way-select\",[[24,1,\"currency\"],[24,3,\"currency\"]],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@update\"],[[32,0,[\"selectedCurrency\"]],[30,[36,8],[[32,0,[\"allCurrencies\"]]],null],\"value\",\"label\",[30,[36,7],[[32,0],\"setCurrency\"],null]]],null],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-members-prices\"],[12],[2,\"\\n\\n                                \"],[10,\"div\"],[14,0,\"gh-input-group\"],[12],[2,\"\\n                                    \"],[8,\"gh-text-input\",[],[[\"@id\",\"@value\",\"@type\",\"@input\",\"@focus-out\"],[\"monthlyPrice\",[30,[36,8],[[32,0,[\"stripeMonthlyAmount\"]]],null],\"number\",[30,[36,7],[[32,0],[30,[36,9],[[32,0,[\"stripeMonthlyAmount\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,7],[[32,0],\"validateStripePlans\"],null]]],null],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"gh-input-append\"],[12],[10,\"span\"],[14,0,\"ttu\"],[12],[1,[32,0,[\"currency\"]]],[13],[2,\"/month\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-input-group\"],[12],[2,\"\\n                                    \"],[8,\"gh-text-input\",[[16,\"data-test-title-input\",true]],[[\"@id\",\"@value\",\"@type\",\"@input\",\"@focus-out\",\"@placeholder\"],[\"yearlyPrice\",[30,[36,8],[[32,0,[\"stripeYearlyAmount\"]]],null],\"number\",[30,[36,7],[[32,0],[30,[36,9],[[32,0,[\"stripeYearlyAmount\"]]],null]],[[\"value\"],[\"target.value\"]]],[32,0,[\"validateStripePlans\"]],\"\"]],null],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"gh-input-append\"],[12],[10,\"span\"],[14,0,\"ttu\"],[12],[1,[32,0,[\"currency\"]]],[13],[2,\"/year\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"],[6,[37,2],[[32,0,[\"stripePlanError\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"p\"],[14,0,\"response w-100\"],[12],[10,\"span\"],[14,0,\"red\"],[12],[1,[32,0,[\"stripePlanError\"]]],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n\\n                \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Benefits\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-main-section-content grey gh-product-form-benefits\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-product-benefits\"],[12],[2,\"\\n                        \"],[10,\"form\"],[14,1,\"product-benefits\"],[14,0,\"gh-blognav\"],[14,\"novalidate\",\"novalidate\"],[12],[2,\"\\n                            \"],[8,\"sortable-objects\",[],[[\"@sortableObjectList\",\"@useSwap\",\"@sortEndAction\"],[[32,0,[\"benefits\"]],false,[30,[36,7],[[32,0],\"reorderItems\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,6],[[30,[36,5],[[30,[36,5],[[32,0,[\"benefits\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[8,\"draggable-object\",[],[[\"@content\",\"@dragHandle\",\"@isSortable\"],[[32,3],\".gh-blognav-grab\",true]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[8,\"gh-benefit-item\",[[16,\"data-test-navitem\",[32,4]]],[[\"@benefitItem\",\"@id\",\"@addItem\",\"@focusItem\",\"@deleteItem\",\"@updateLabel\"],[[32,3],[32,4],[30,[36,7],[[32,0],\"addBenefit\"],null],[30,[36,7],[[32,0],\"focusItem\"],null],[30,[36,7],[[32,0],\"deleteBenefit\"],null],[30,[36,7],[[32,0],\"updateLabel\"],null]]],null],[2,\"\\n                                    \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[3,4]}]]],[2,\"                            \"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[8,\"gh-benefit-item\",[[24,\"data-test-navitem\",\"new\"]],[[\"@isFreeProduct\",\"@benefitItem\",\"@addItem\",\"@deleteItem\",\"@updateLabel\"],[[32,0,[\"isFreeProduct\"]],[32,0,[\"newBenefit\"]],[30,[36,7],[[32,0],\"addBenefit\"],null],[30,[36,7],[[32,0],\"deleteBenefit\"],null],[30,[36,7],[[32,0],\"updateLabel\"],null]]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Advanced\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-main-section-content grey gh-product-priceform-block\"],[12],[2,\"\\n                    \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"label\"],[14,\"for\",\"\"],[14,0,\"fw6\"],[12],[2,\"Welcome page\"],[13],[2,\"\\n                        \"],[8,\"gh-text-input\",[],[[\"@class\"],[\"gh-input\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Redirect to this URL after signup for premium membership\"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-block gh-product-form-tierpreview\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-product-form-tierpreview-content\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,4],[[32,0,[\"isFreeProduct\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Tier Preview\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Free Membership Preview\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[10,\"div\"],[14,0,\"gh-main-section-content\"],[15,5,[31,[\"border-color: \",[32,0,[\"settings\",\"accentColor\"]]]]],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"checkmark\"],[15,5,[31,[\"background-color: \",[32,0,[\"settings\",\"accentColor\"]]]]],[12],[13],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"product\",\"name\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[10,\"h4\"],[12],[1,[32,0,[\"product\",\"name\"]]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                            \"],[10,\"h4\"],[14,0,\"placeholder\"],[12],[2,\"Bronze\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,0,[\"product\",\"description\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[10,\"p\"],[12],[1,[32,0,[\"product\",\"description\"]]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[30,[36,4],[[32,0,[\"isFreeProduct\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"p\"],[14,0,\"placeholder\"],[12],[2,\"Full access to premium content\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"p\"],[14,0,\"placeholder\"],[12],[2,\"Free preview of \"],[1,[32,0,[\"settings\",\"title\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,0,[\"benefits\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[10,\"ul\"],[12],[2,\"\\n\"],[6,[37,6],[[30,[36,5],[[30,[36,5],[[32,0,[\"benefits\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"li\"],[12],[1,[30,[36,3],[\"check-2\"],null]],[2,\" \"],[10,\"span\"],[12],[1,[32,1,[\"name\"]]],[13],[13],[2,\"\\n\"]],\"parameters\":[1,2]}]]],[2,\"                            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                            \"],[10,\"ul\"],[14,0,\"placeholder\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,4],[[32,0,[\"isFreeProduct\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[10,\"li\"],[12],[1,[30,[36,3],[\"check-2\"],null]],[2,\" \"],[10,\"span\"],[12],[2,\"Expert analysis\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[10,\"li\"],[12],[1,[30,[36,3],[\"check-2\"],null]],[2,\" \"],[10,\"span\"],[12],[2,\"Access to all public posts\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[10,\"div\"],[14,0,\"price\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,4],[[32,0,[\"isFreeProduct\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,2],[[32,0,[\"stripeMonthlyAmount\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,0,\"monthly-price\"],[12],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"currency\"],[12],[1,[30,[36,0],[[32,0,[\"currency\"]]],null]],[13],[2,\"\\n                                        \"],[1,[30,[36,1],[[32,0,[\"stripeMonthlyAmount\"]]],null]],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"period\"],[12],[2,\"/month\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,0,\"monthly-price placeholder\"],[12],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"currency\"],[12],[1,[30,[36,0],[[32,0,[\"currency\"]]],null]],[13],[2,\"\\n                                        0\\n                                        \"],[10,\"span\"],[14,0,\"period\"],[12],[2,\"/month\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,0,[\"stripeYearlyAmount\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,0,\"yearly-price\"],[12],[1,[30,[36,0],[[32,0,[\"currency\"]]],null]],[1,[30,[36,1],[[32,0,[\"stripeYearlyAmount\"]]],null]],[2,\"/year\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,0,\"yearly-price placeholder\"],[12],[2,\"0\"],[10,\"span\"],[14,0,\"currency\"],[12],[1,[32,0,[\"currency\"]]],[13],[2,\"/year\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"                            \"],[10,\"span\"],[14,0,\"monthly-price\"],[12],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"currency\"],[12],[1,[30,[36,0],[[32,0,[\"currency\"]]],null]],[13],[2,\"\\n                                0\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer top-shadow items-center\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-webhook\"],[4,[38,7],[[32,0],\"closeModal\"],null],[4,[38,7],[[32,0],[30,[36,10],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-product\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@idleClass\",\"@class\"],[[31,[[30,[36,2],[[32,0,[\"isExistingProduct\"]],\"Save\",\"Add tier\"],null]]],[32,0,[\"successText\"]],[32,0,[\"saveProduct\"]],\"gh-btn-primary\",[31,[\"gh-btn \",[30,[36,2],[[32,0,[\"isExistingProduct\"]],\"gh-btn-black\",\"gh-btn-green\"],null],\" gh-btn-icon\"]]]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"currency-symbol\",\"format-number\",\"if\",\"svg-jar\",\"not\",\"-track-array\",\"each\",\"action\",\"readonly\",\"mut\",\"optional\"]}",
    "moduleName": "ghost-admin/components/modal-product.hbs"
  });

  const classic = __EMBER_CLASSIC_DECORATOR;

  const CURRENCIES = _currency.currencies.map(currency => {
    return {
      value: currency.isoCode.toLowerCase(),
      label: `${currency.isoCode} - ${currency.name}`,
      isoCode: currency.isoCode
    };
  }); // TODO: update modals to work fully with Glimmer components


  let ModalProductPrice = (_dec = Ember.inject.service, _dec2 = Ember._tracked, _dec3 = Ember._tracked, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._tracked, _dec10 = Ember._tracked, _dec11 = Ember._tracked, _dec12 = Ember._action, _dec13 = Ember._action, _dec14 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), classic(_class = (_class2 = class ModalProductPrice extends _modalBase.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "settings", _descriptor, this);

      _initializerDefineProperty(this, "model", _descriptor2, this);

      _initializerDefineProperty(this, "product", _descriptor3, this);

      _initializerDefineProperty(this, "periodVal", _descriptor4, this);

      _initializerDefineProperty(this, "stripeMonthlyAmount", _descriptor5, this);

      _initializerDefineProperty(this, "stripeYearlyAmount", _descriptor6, this);

      _initializerDefineProperty(this, "currency", _descriptor7, this);

      _initializerDefineProperty(this, "errors", _descriptor8, this);

      _initializerDefineProperty(this, "stripePlanError", _descriptor9, this);

      _initializerDefineProperty(this, "benefits", _descriptor10, this);

      _initializerDefineProperty(this, "newBenefit", _descriptor11, this);

      _defineProperty(this, "actions", {
        addBenefit(item) {
          return item.validate().then(() => {
            this.addNewBenefitItem(item);
          });
        },

        focusItem() {// Focus on next benefit on enter
        },

        deleteBenefit(item) {
          if (!item) {
            return;
          }

          this.benefits.removeObject(item);
        },

        reorderItems() {
          this.product.set('benefits', this.benefits);
        },

        updateLabel(label, benefitItem) {
          if (!benefitItem) {
            return;
          }

          if (benefitItem.get('name') !== label) {
            benefitItem.set('name', label);
          }
        },

        // noop - we don't want the enter key doing anything
        confirm() {},

        setAmount(amount) {
          this.price.amount = !isNaN(amount) ? parseInt(amount) : 0;
        },

        setCurrency(event) {
          const newCurrency = event.value;
          this.currency = newCurrency;
        },

        validateStripePlans() {
          this.stripePlanError = undefined;

          try {
            const yearlyAmount = this.stripeYearlyAmount;
            const monthlyAmount = this.stripeMonthlyAmount;
            const symbol = (0, _currency.getSymbol)(this.currency);

            if (!yearlyAmount || yearlyAmount < 1 || !monthlyAmount || monthlyAmount < 1) {
              throw new TypeError(`Subscription amount must be at least ${symbol}1.00`);
            }
          } catch (err) {
            this.stripePlanError = err.message;
          }
        },

        // needed because ModalBase uses .send() for keyboard events
        closeModal() {
          this.close();
        }

      });
    }

    confirm() {}

    get isFreeProduct() {
      return this.product.type === 'free';
    }

    get allCurrencies() {
      return (0, _currency.getCurrencyOptions)();
    }

    get productCurrency() {
      if (this.isFreeProduct) {
        const firstPaidProduct = this.model.products?.find(product => {
          return product.type === 'paid';
        });
        return firstPaidProduct?.monthlyPrice?.currency || 'usd';
      } else {
        return this.product?.monthlyPrice?.currency;
      }
    }

    get selectedCurrency() {
      return CURRENCIES.findBy('value', this.currency);
    }

    init() {
      super.init(...arguments);
      this.product = this.model.product;
      const monthlyPrice = this.product.get('monthlyPrice');
      const yearlyPrice = this.product.get('yearlyPrice');

      if (monthlyPrice) {
        this.stripeMonthlyAmount = monthlyPrice.amount / 100;
      }

      if (yearlyPrice) {
        this.stripeYearlyAmount = yearlyPrice.amount / 100;
      }

      this.currency = this.productCurrency || 'usd';
      this.benefits = this.product.get('benefits') || Ember.A([]);
      this.newBenefit = _productBenefitItem.default.create({
        isNew: true,
        name: ''
      });
    }

    get title() {
      if (this.isExistingProduct) {
        if (this.isFreeProduct) {
          return `Edit free membership`;
        }

        return `Edit tier`;
      }

      return 'New tier';
    }

    get isExistingProduct() {
      return !this.model.product.isNew;
    }

    close(event) {
      this.reset();
      event?.preventDefault?.();
      this.closeModal();
    }

    setCurrency(event) {
      const newCurrency = event.value;
      this.currency = newCurrency;
    }

    reset() {
      this.newBenefit = _productBenefitItem.default.create({
        isNew: true,
        name: ''
      });
      const savedBenefits = this.product.benefits?.filter(benefit => !!benefit.id) || Ember.A([]);
      this.product.set('benefits', savedBenefits);
    }

    *saveProduct() {
      this.validatePrices();

      if (!Ember.isEmpty(this.errors) && Object.keys(this.errors).length > 0) {
        return;
      }

      if (this.stripePlanError) {
        return;
      }

      if (!this.newBenefit.get('isBlank')) {
        yield this.send('addBenefit', this.newBenefit);
      }

      if (!this.isFreeProduct) {
        const monthlyAmount = this.stripeMonthlyAmount * 100;
        const yearlyAmount = this.stripeYearlyAmount * 100;
        this.product.set('monthlyPrice', {
          nickname: 'Monthly',
          amount: monthlyAmount,
          active: true,
          currency: this.currency,
          interval: 'month',
          type: 'recurring'
        });
        this.product.set('yearlyPrice', {
          nickname: 'Yearly',
          amount: yearlyAmount,
          active: true,
          currency: this.currency,
          interval: 'year',
          type: 'recurring'
        });
      }

      this.product.set('benefits', this.benefits);
      yield this.product.save();
      yield this.confirm();
      this.send('closeModal');
    }

    validatePrices() {
      this.stripePlanError = undefined;

      try {
        const yearlyAmount = this.stripeYearlyAmount;
        const monthlyAmount = this.stripeMonthlyAmount;
        const symbol = (0, _currency.getSymbol)(this.currency);

        if (!yearlyAmount || yearlyAmount < 1 || !monthlyAmount || monthlyAmount < 1) {
          throw new TypeError(`Subscription amount must be at least ${symbol}1.00`);
        }
      } catch (err) {
        this.stripePlanError = err.message;
      }
    }

    addNewBenefitItem(item) {
      item.set('isNew', false);
      this.benefits.pushObject(item);
      this.newBenefit = _productBenefitItem.default.create({
        isNew: true,
        name: ''
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "settings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "model", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "product", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "periodVal", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "stripeMonthlyAmount", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 5;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "stripeYearlyAmount", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 50;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "currency", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'usd';
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "errors", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return Ember.Object.create();
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "stripePlanError", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "benefits", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return Ember.A([]);
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "newBenefit", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "close", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "close"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setCurrency", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "setCurrency"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "saveProduct", [_dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "saveProduct"), _class2.prototype)), _class2)) || _class);
  _exports.default = ModalProductPrice;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalProductPrice);
});
;define("ghost-admin/components/modal-re-authenticate", ["exports", "ghost-admin/components/modal-base", "ghost-admin/mixins/validation-engine", "ghost-admin/services/ajax", "ember-concurrency"], function (_exports, _modalBase, _validationEngine, _ajax, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Please re-authenticate</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body {{if this.authenticationError 'error'}}">
  
      <form id="login" class="login-form" method="post" novalidate="novalidate" {{action "confirm" on="submit"}}>
          <GhValidationStatusContainer @class="password-wrap" @errors={{this.errors}} @property="password" @hasValidated={{this.hasValidated}}>
              <GhTextInput
                  @class="password"
                  @type="password"
                  @placeholder="Password"
                  @name="password"
                  @value={{readonly this.password}}
                  @input={{action (mut this.password) value="target.value"}} />
          </GhValidationStatusContainer>
          <div>
              <GhTaskButton @buttonText="Log in" @task={{this.reauthenticate}} @class="gh-btn gh-btn-black gh-btn-icon" @type="submit" />
          </div>
      </form>
  
     {{#if this.authenticationError}}
       <p class="response">{{this.authenticationError}}</p>
     {{/if}}
  </div>
  
  */
  {
    "id": "C9gSA7+B",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Please re-authenticate\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[15,0,[31,[\"modal-body \",[30,[36,2],[[32,0,[\"authenticationError\"]],\"error\"],null]]]],[12],[2,\"\\n\\n    \"],[11,\"form\"],[24,1,\"login\"],[24,0,\"login-form\"],[24,\"method\",\"post\"],[24,\"novalidate\",\"novalidate\"],[4,[38,0],[[32,0],\"confirm\"],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n        \"],[8,\"gh-validation-status-container\",[],[[\"@class\",\"@errors\",\"@property\",\"@hasValidated\"],[\"password-wrap\",[32,0,[\"errors\"]],\"password\",[32,0,[\"hasValidated\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[8,\"gh-text-input\",[],[[\"@class\",\"@type\",\"@placeholder\",\"@name\",\"@value\",\"@input\"],[\"password\",\"password\",\"Password\",\"password\",[30,[36,3],[[32,0,[\"password\"]]],null],[30,[36,0],[[32,0],[30,[36,4],[[32,0,[\"password\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[10,\"div\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@class\",\"@type\"],[\"Log in\",[32,0,[\"reauthenticate\"]],\"gh-btn gh-btn-black gh-btn-icon\",\"submit\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"authenticationError\"]]],null,[[\"default\"],[{\"statements\":[[2,\"     \"],[10,\"p\"],[14,0,\"response\"],[12],[1,[32,0,[\"authenticationError\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"if\",\"readonly\",\"mut\"]}",
    "moduleName": "ghost-admin/components/modal-re-authenticate.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend(_validationEngine.default, {
    config: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    validationType: 'signin',
    authenticationError: null,
    identification: Ember.computed.reads('session.user.email'),
    actions: {
      confirm() {
        this.reauthenticate.perform();
      }

    },

    _authenticate() {
      let session = this.session;
      let authStrategy = 'authenticator:cookie';
      let identification = this.identification;
      let password = this.password;
      session.set('skipAuthSuccessHandler', true);
      this.toggleProperty('submitting');
      return session.authenticate(authStrategy, identification, password).finally(() => {
        this.toggleProperty('submitting');
        session.set('skipAuthSuccessHandler', undefined);
      });
    },

    _passwordConfirm() {
      // Manually trigger events for input fields, ensuring legacy compatibility with
      // browsers and password managers that don't send proper events on autofill
      const inputs = document.querySelectorAll('#login input');
      inputs.forEach(input => input.dispatchEvent(new Event('change')));
      this.set('authenticationError', null);
      return this.validate({
        property: 'signin'
      }).then(() => this._authenticate().then(() => {
        this.notifications.closeAlerts();
        this.send('closeModal');
        return true;
      }).catch(error => {
        if (error && error.payload && error.payload.errors) {
          error.payload.errors.forEach(err => {
            if ((0, _ajax.isVersionMismatchError)(err)) {
              return this.notifications.showAPIError(error);
            }

            err.message = Ember.String.htmlSafe(err.context || err.message);
          });
          this.errors.add('password', 'Incorrect password');
          this.hasValidated.pushObject('password');
          this.set('authenticationError', error.payload.errors[0].message);
        }
      }), () => {
        this.hasValidated.pushObject('password');
        return false;
      });
    },

    reauthenticate: (0, _emberConcurrency.task)(function* () {
      return yield this._passwordConfirm();
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-regenerate-key", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Regenerate {{capitalize this.apiKey.type}} API Key</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <p>
          {{#if (eq this.internalIntegration "zapier")}}
              You will need to locate the Ghost App within your Zapier account and click on "Reconnect" to enter the new Admin API Key.
          {{else}}
              You can regenerate <strong>{{capitalize this.apiKey.type}} API Key</strong> any time, but any scripts or applications using it will need to be updated.
          {{/if}}
      </p>
      {{#if this.errorMessage}}
          <p class='red'> {{this.errorMessage}}</p>
      {{/if}}
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton @buttonText="Regenerate {{capitalize this.apiKey.type}} API Key" @successText="Regenerated" @task={{this.regenerateKey}} @class="gh-btn gh-btn-icon gh-btn-red" />
  </div>
  
  */
  {
    "id": "vz6uXhdn",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Regenerate \"],[1,[30,[36,0],[[32,0,[\"apiKey\",\"type\"]]],null]],[2,\" API Key\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,1],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,2],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"\\n\"],[6,[37,4],[[30,[36,3],[[32,0,[\"internalIntegration\"]],\"zapier\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            You will need to locate the Ghost App within your Zapier account and click on \\\"Reconnect\\\" to enter the new Admin API Key.\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            You can regenerate \"],[10,\"strong\"],[12],[1,[30,[36,0],[[32,0,[\"apiKey\",\"type\"]]],null]],[2,\" API Key\"],[13],[2,\" any time, but any scripts or applications using it will need to be updated.\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[6,[37,4],[[32,0,[\"errorMessage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"p\"],[14,0,\"red\"],[12],[2,\" \"],[1,[32,0,[\"errorMessage\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,1],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[[31,[\"Regenerate \",[30,[36,0],[[32,0,[\"apiKey\",\"type\"]]],null],\" API Key\"]],\"Regenerated\",[32,0,[\"regenerateKey\"]],\"gh-btn gh-btn-icon gh-btn-red\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"capitalize\",\"action\",\"svg-jar\",\"eq\",\"if\"]}",
    "moduleName": "ghost-admin/components/modal-regenerate-key.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    ajax: Ember.inject.service(),
    store: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    errorMessage: null,
    // Allowed actions
    confirm: () => {},
    apiKey: Ember.computed.alias('model.apiKey'),
    integration: Ember.computed.alias('model.integration'),
    internalIntegration: Ember.computed.alias('model.internalIntegration'),
    actions: {
      confirm() {
        this.regenerateApiKey.perform();
      }

    },
    regenerateKey: (0, _emberConcurrency.task)(function* () {
      let url = this.get('ghostPaths.url').api('/integrations/', this.integration.id, 'api_key', this.apiKey.id, 'refresh');

      try {
        const response = yield this.ajax.post(url, {
          data: {
            integrations: [{
              id: this.integration.id
            }]
          }
        });
        this.store.pushPayload(response);
        yield this.confirm();
        this.send('closeModal');
      } catch (e) {
        let errMessage = `There was an error regenerating the ${Ember.String.capitalize(this.apiKey.type)} API Key. Please try again`;
        this.set('errorMessage', errMessage);
        return;
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-regenerate-token", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Regenerate your Staff Access Token</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <p>
          You can regenerate your Staff Access Token any time, but any scripts or applications using it will need to be updated.
      </p>
      {{#if this.errorMessage}}
          <p class='red'> {{this.errorMessage}}</p>
      {{/if}}
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn" autofocus><span>Cancel</span></button>
      <button class="gh-btn gh-btn-icon gh-btn-red" {{action "confirm"}}>
          <span>Regenerate your Staff Access Token</span>
      </button>
  </div>
  
  */
  {
    "id": "QML7FSE7",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Regenerate your Staff Access Token\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"\\n        You can regenerate your Staff Access Token any time, but any scripts or applications using it will need to be updated.\\n    \"],[13],[2,\"\\n\"],[6,[37,2],[[32,0,[\"errorMessage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"p\"],[14,0,\"red\"],[12],[2,\" \"],[1,[32,0,[\"errorMessage\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"autofocus\",\"\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-icon gh-btn-red\"],[4,[38,0],[[32,0],\"confirm\"],null],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Regenerate your Staff Access Token\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/components/modal-regenerate-token.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    actions: {
      confirm() {
        this.confirm();
        this.send('closeModal');
      }

    }
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-remove-label-members", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="remove-label-members">
      <h1>Remove Label</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  {{#if (not this.confirmed)}}
      <div class="modal-body" data-test-state="add-label-unconfirmed">
          <GhMemberSingleLabelInput @onChange={{action "setLabel"}} @triggerId="label-input" data-test-input="" />
          <p class="mt2 ml1">
              Will be removed from the currently selected <span class="fw6" data-test-text="member-count">{{gh-pluralize this.model.memberCount "member"}}</span>
          </p>
      </div>
  {{else}}
      <div class="gh-content-box pa" data-test-state="remove-complete">
          {{#if this.error}}
              <div class="flex items-center">
                  {{svg-jar "warning" class="w4 h4 fill-red mr2 nudge-top--3"}}
                  <div>
                      <p class="ma0 pa0">
                          <span class="fw5" data-test-text="remove-error">{{this.error}}</span>
                      </p>
                  </div>
              </div>
          {{else}}
              <div class="flex items-center">
                  {{svg-jar "check-circle" class="w4 h4 stroke-green mr2"}}
                  <p class="ma0 pa0">
                      Label removed from <span class="fw6" data-test-text="remove-count">{{gh-pluralize this.response.stats.successful "member"}}</span>
                      successfully
                  </p>
              </div>
              {{#if this.response.stats.unsuccessful}}
                  <div class="flex items-start mt2" data-test-bulk-label-add-errors>
                      {{svg-jar "warning" class="w4 h4 fill-red mr2 nudge-top--3"}}
                      <div>
                          <p class="ma0 pa0">
                              Failed to remove label from  <span class="fw5" data-test-text="invalid-count">{{gh-pluralize this.response.stats.unsuccessful "member"}}</span>
                          </p>
                      </div>
                  </div>
              {{/if}}
          {{/if}}
      </div>
  {{/if}}
  
  <div class="modal-footer">
      {{#if (not this.confirmed)}}
          <button {{action "closeModal"}} class="gh-btn" data-test-button="cancel">
              <span>Cancel</span>
          </button>
  
          <GhTaskButton
              @disabled={{this.isDisabled}}
              @buttonText="Remove Label"
              @successText="Removed"
              @task={{this.removeLabelTask}}
              @class="gh-btn gh-btn-red gh-btn-icon"
              data-test-button="confirm"
          />
      {{else}}
          <button {{action "closeModal"}} class="gh-btn gh-btn-black" data-test-button="close-modal">
              <span>Close</span>
          </button>
      {{/if}}
  </div>
  
  */
  {
    "id": "J28Dwvzx",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"remove-label-members\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Remove Label\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[6,[37,3],[[30,[36,4],[[32,0,[\"confirmed\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"modal-body\"],[14,\"data-test-state\",\"add-label-unconfirmed\"],[12],[2,\"\\n        \"],[8,\"gh-member-single-label-input\",[[24,\"data-test-input\",\"\"]],[[\"@onChange\",\"@triggerId\"],[[30,[36,0],[[32,0],\"setLabel\"],null],\"label-input\"]],null],[2,\"\\n        \"],[10,\"p\"],[14,0,\"mt2 ml1\"],[12],[2,\"\\n            Will be removed from the currently selected \"],[10,\"span\"],[14,0,\"fw6\"],[14,\"data-test-text\",\"member-count\"],[12],[1,[30,[36,2],[[32,0,[\"model\",\"memberCount\"]],\"member\"],null]],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"gh-content-box pa\"],[14,\"data-test-state\",\"remove-complete\"],[12],[2,\"\\n\"],[6,[37,3],[[32,0,[\"error\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                \"],[1,[30,[36,1],[\"warning\"],[[\"class\"],[\"w4 h4 fill-red mr2 nudge-top--3\"]]]],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"fw5\"],[14,\"data-test-text\",\"remove-error\"],[12],[1,[32,0,[\"error\"]]],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                \"],[1,[30,[36,1],[\"check-circle\"],[[\"class\"],[\"w4 h4 stroke-green mr2\"]]]],[2,\"\\n                \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                    Label removed from \"],[10,\"span\"],[14,0,\"fw6\"],[14,\"data-test-text\",\"remove-count\"],[12],[1,[30,[36,2],[[32,0,[\"response\",\"stats\",\"successful\"]],\"member\"],null]],[13],[2,\"\\n                    successfully\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"],[6,[37,3],[[32,0,[\"response\",\"stats\",\"unsuccessful\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"flex items-start mt2\"],[14,\"data-test-bulk-label-add-errors\",\"\"],[12],[2,\"\\n                    \"],[1,[30,[36,1],[\"warning\"],[[\"class\"],[\"w4 h4 fill-red mr2 nudge-top--3\"]]]],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                            Failed to remove label from  \"],[10,\"span\"],[14,0,\"fw5\"],[14,\"data-test-text\",\"invalid-count\"],[12],[1,[30,[36,2],[[32,0,[\"response\",\"stats\",\"unsuccessful\"]],\"member\"],null]],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n\"],[6,[37,3],[[30,[36,4],[[32,0,[\"confirmed\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"confirm\"]],[[\"@disabled\",\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[[32,0,[\"isDisabled\"]],\"Remove Label\",\"Removed\",[32,0,[\"removeLabelTask\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black\"],[24,\"data-test-button\",\"close-modal\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Close\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"gh-pluralize\",\"if\",\"not\"]}",
    "moduleName": "ghost-admin/components/modal-remove-label-members.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    membersStats: Ember.inject.service(),
    selectedLabel: null,
    // Allowed actions
    confirm: () => {},
    isDisabled: Ember.computed.not('selectedLabel'),
    member: Ember.computed.alias('model'),
    actions: {
      confirm() {
        this.removeLabelTask.perform();
      },

      setLabel(label) {
        this.set('selectedLabel', label);
      }

    },
    removeLabelTask: (0, _emberConcurrency.task)(function* () {
      try {
        const response = yield this.confirm(this.selectedLabel);
        this.set('response', response);
        this.set('confirmed', true);
      } catch (e) {
        if (e.payload?.errors) {
          this.set('confirmed', true);
          this.set('error', e.payload.errors[0].message);
        }

        throw e;
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-reset-all-passwords", ["exports", "ghost-admin/components/modal-base", "fetch", "ember-concurrency"], function (_exports, _modalBase, _fetch, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Reset all passwords</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body gh-modal-reset-passwords">
      <p>You're about to end all active staff user sessions and trigger a password reset for everyone (including yourself). Are you sure?</p>
      <div class="flex mt2 mb2">
          <div class="for-checkbox">
              <label class="checkbox">
                  <input type="checkbox" checked={{this.isChecked}} {{on "click" (action "toggleCheckbox")}} class="gh-input" name="checkbox" data-test-checkbox="reset-all-passwords">
                  <span class="input-toggle-component"></span>
              </label>
          </div>
          <div>
              <h4>Yes, end sessions and reset passwords for all users.</h4>
              <p class="description">Upon submission, you will be logged out. Please check your email to reset your password.</p>
          </div>
      </div>
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton @buttonText="Reset Passwords" @task={{this.resetPasswords}} @class="gh-btn gh-btn-red gh-btn-icon" disabled={{this.isConfirmDisabled}} />
  </div>
  
  */
  {
    "id": "IlaJoeNE",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Reset all passwords\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body gh-modal-reset-passwords\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"You're about to end all active staff user sessions and trigger a password reset for everyone (including yourself). Are you sure?\"],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"flex mt2 mb2\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"for-checkbox\"],[12],[2,\"\\n            \"],[10,\"label\"],[14,0,\"checkbox\"],[12],[2,\"\\n                \"],[11,\"input\"],[16,\"checked\",[32,0,[\"isChecked\"]]],[24,0,\"gh-input\"],[24,3,\"checkbox\"],[24,\"data-test-checkbox\",\"reset-all-passwords\"],[24,4,\"checkbox\"],[4,[38,2],[\"click\",[30,[36,0],[[32,0],\"toggleCheckbox\"],null]],null],[12],[13],[2,\"\\n                \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[12],[2,\"\\n            \"],[10,\"h4\"],[12],[2,\"Yes, end sessions and reset passwords for all users.\"],[13],[2,\"\\n            \"],[10,\"p\"],[14,0,\"description\"],[12],[2,\"Upon submission, you will be logged out. Please check your email to reset your password.\"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[[16,\"disabled\",[32,0,[\"isConfirmDisabled\"]]]],[[\"@buttonText\",\"@task\",\"@class\"],[\"Reset Passwords\",[32,0,[\"resetPasswords\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"on\"]}",
    "moduleName": "ghost-admin/components/modal-reset-all-passwords.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    notifications: Ember.inject.service(),
    isChecked: false,
    isConfirmDisabled: Ember.computed.not('isChecked'),
    actions: {
      toggleCheckbox() {
        Ember.set(this, 'isChecked', !this.isChecked);
      },

      confirm() {
        this.deletePost.perform();
      }

    },

    async _resetPasswords() {
      const res = await (0, _fetch.fetch)('/ghost/api/canary/admin/authentication/reset_all_passwords/', {
        method: 'POST'
      });

      if (res.status < 200 || res.status >= 300) {
        throw new Error('api failed ' + res.status + ' ' + res.statusText);
      }
    },

    _failure(error) {
      this.notifications.showAPIError(error, {
        key: 'user.resetAllPasswords.failed'
      });
    },

    resetPasswords: (0, _emberConcurrency.task)(function* () {
      try {
        yield this._resetPasswords();
        window.location = window.location.href.split('#')[0];
      } catch (e) {
        this._failure(e);
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-select-user-role", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Change user role</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{on "click" this.close}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body" {{did-insert this.setRoleFromModel}}>
      <GhRoleSelection
          @selected={{this.role}}
          @setRole={{fn (mut this.role)}}
      />
  </div>
  
  <div class="modal-footer">
      <button {{on "click" this.close}} class="gh-btn"><span>Cancel</span></button>
      <button {{on "click" this.confirmAction}} class="gh-btn gh-btn-black"><span>Change role</span></button>
  </div>
  
  */
  {
    "id": "gTnOa4KH",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Change user role\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[\"click\",[32,0,[\"close\"]]],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[11,\"div\"],[24,0,\"modal-body\"],[4,[38,2],[[32,0,[\"setRoleFromModel\"]]],null],[12],[2,\"\\n    \"],[8,\"gh-role-selection\",[],[[\"@selected\",\"@setRole\"],[[32,0,[\"role\"]],[30,[36,4],[[30,[36,3],[[32,0,[\"role\"]]],null]],null]]],null],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[\"click\",[32,0,[\"close\"]]],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black\"],[4,[38,0],[\"click\",[32,0,[\"confirmAction\"]]],null],[12],[10,\"span\"],[12],[2,\"Change role\"],[13],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"on\",\"svg-jar\",\"did-insert\",\"mut\",\"fn\"]}",
    "moduleName": "ghost-admin/components/modal-select-user-role.hbs"
  });

  const classic = __EMBER_CLASSIC_DECORATOR;
  let ModalPostPreviewComponent = ( // TODO: update modals to work fully with Glimmer components
  _dec = Ember._tracked, _dec2 = Ember._action, _dec3 = Ember._action, _dec4 = Ember._action, classic(_class = (_class2 = class ModalPostPreviewComponent extends _modalBase.default {
    constructor() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      super(...args);

      _initializerDefineProperty(this, "role", _descriptor, this);

      _defineProperty(this, "actions", {
        confirm() {
          this.confirmAction(...arguments);
        },

        // needed because ModalBase uses .send() for keyboard events
        closeModal() {
          this.close();
        }

      });
    }

    // TODO: rename to confirm() when modals have full Glimmer support
    confirmAction() {
      this.confirm(this.role);
      this.close();
    }

    close(event) {
      event?.preventDefault?.();
      this.closeModal();
    }

    setRoleFromModel() {
      this.role = this.model;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "role", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "confirmAction", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "confirmAction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "close", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "close"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setRoleFromModel", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "setRoleFromModel"), _class2.prototype)), _class2)) || _class);
  _exports.default = ModalPostPreviewComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalPostPreviewComponent);
});
;define("ghost-admin/components/modal-stripe-connect", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="webhook-form" {{will-destroy this.reset}}>
      <h1 data-test-text="title">Connect with Stripe</h1>
  </header>
  <button class="close" href title="Close" {{action "closeModal"}} {{action (optional this.noop) on="mouseDown"}}>
      {{svg-jar "close"}}
  </button>
  
  <form>
  <div class="modal-body" {{did-insert this.updateSuccessModifier}}>
      <GhMembersPaymentsSetting
          @setStripeConnectIntegrationTokenSetting={{this.setStripeConnectIntegrationTokenSetting}}
          @onConnected={{this.updateSuccessModifier}}
          @onDisconnected={{this.updateSuccessModifier}}
      />
  </div>
  </form>
  
  <div class="modal-footer">
      {{#if this.settings.stripeConnectAccountId}}
          <button
              class="gh-btn gh-btn-black"
              {{action "confirm"}}
              {{action (optional this.noop) on="mouseDown"}}
              data-test-button="stripe-connect-ok"
          >
              <span>OK</span>
          </button>
      {{/if}}
  </div>
  
  */
  {
    "id": "ZueT9lws",
    "block": "{\"symbols\":[],\"statements\":[[11,\"header\"],[24,0,\"modal-header\"],[24,\"data-test-modal\",\"webhook-form\"],[4,[38,2],[[32,0,[\"reset\"]]],null],[12],[2,\"\\n    \"],[10,\"h1\"],[14,\"data-test-text\",\"title\"],[12],[2,\"Connect with Stripe\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"button\"],[24,0,\"close\"],[24,6,\"\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[4,[38,0],[[32,0],[30,[36,1],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n    \"],[1,[30,[36,3],[\"close\"],null]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"form\"],[12],[2,\"\\n\"],[11,\"div\"],[24,0,\"modal-body\"],[4,[38,4],[[32,0,[\"updateSuccessModifier\"]]],null],[12],[2,\"\\n    \"],[8,\"gh-members-payments-setting\",[],[[\"@setStripeConnectIntegrationTokenSetting\",\"@onConnected\",\"@onDisconnected\"],[[32,0,[\"setStripeConnectIntegrationTokenSetting\"]],[32,0,[\"updateSuccessModifier\"]],[32,0,[\"updateSuccessModifier\"]]]],null],[2,\"\\n\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n\"],[6,[37,5],[[32,0,[\"settings\",\"stripeConnectAccountId\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black\"],[24,\"data-test-button\",\"stripe-connect-ok\"],[4,[38,0],[[32,0],\"confirm\"],null],[4,[38,0],[[32,0],[30,[36,1],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"OK\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"optional\",\"will-destroy\",\"svg-jar\",\"did-insert\",\"if\"]}",
    "moduleName": "ghost-admin/components/modal-stripe-connect.hbs"
  });

  const classic = __EMBER_CLASSIC_DECORATOR;
  let ModalStripeConnect = ( // TODO: update modals to work fully with Glimmer components
  _dec = Ember.inject.service, _dec2 = Ember._action, _dec3 = Ember._action, _dec4 = Ember._action, _dec5 = Ember._action, _dec6 = Ember._action, classic(_class = (_class2 = class ModalStripeConnect extends _modalBase.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "settings", _descriptor, this);

      _defineProperty(this, "actions", {
        confirm() {
          if (this.settings.get('stripeConnectAccountId')) {
            return this.confirmAction();
          } // noop - enter key shouldn't do anything

        },

        // needed because ModalBase uses .send() for keyboard events
        closeModal() {
          this.close();
        }

      });
    }

    setStripeConnectIntegrationTokenSetting(stripeConnectIntegrationToken) {
      this.settings.set('stripeConnectIntegrationToken', stripeConnectIntegrationToken);
    }

    reset() {
      // stripeConnectIntegrationToken is not a persisted value so we don't want
      // to keep it around across transitions
      this.settings.set('stripeConnectIntegrationToken', undefined);
    }

    close(event) {
      event?.preventDefault?.();
      this.closeModal();
    }

    confirmAction() {
      this.confirm();
      this.close();
    }

    updateSuccessModifier() {
      if (this.settings.get('stripeConnectAccountId')) {
        if (this.modifier?.indexOf('stripe-connected') === -1) {
          this.updateModifier(`${this.modifier} stripe-connected`);
        }
      } else {
        if (this.modifier?.indexOf('stripe-connected') !== -1) {
          this.updateModifier(this.modifier.replace(/\s?stripe-connected/, ''));
        }
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "settings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "setStripeConnectIntegrationTokenSetting", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "setStripeConnectIntegrationTokenSetting"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "reset", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "reset"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "close", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "close"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "confirmAction", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "confirmAction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "updateSuccessModifier", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "updateSuccessModifier"), _class2.prototype)), _class2)) || _class);
  _exports.default = ModalStripeConnect;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalStripeConnect);
});
;define("ghost-admin/components/modal-suspend-user", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Are you sure you want to suspend this user?</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <strong>WARNING:</strong> This user will no longer be able to log in but their posts will be kept.
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton @buttonText="Suspend" @successText="Suspended" @task={{this.suspendUser}} @class="gh-btn gh-btn-red gh-btn-icon" data-test-modal-confirm="true" />
  </div>
  
  */
  {
    "id": "dssNK/PZ",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Are you sure you want to suspend this user?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"strong\"],[12],[2,\"WARNING:\"],[13],[2,\" This user will no longer be able to log in but their posts will be kept.\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[[24,\"data-test-modal-confirm\",\"true\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Suspend\",\"Suspended\",[32,0,[\"suspendUser\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-suspend-user.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    // Allowed actions
    confirm: () => {},
    user: Ember.computed.alias('model'),
    actions: {
      confirm() {
        return this.suspendUser.perform();
      }

    },
    suspendUser: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-transfer-owner", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Transfer Ownership</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <p>
          Are you sure you want to transfer the ownership of this blog?
          You will not be able to undo this action.
      </p>
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton @buttonText="Yep - I'm sure" @task={{this.transferOwnership}} @class="gh-btn gh-btn-red gh-btn-icon" />
  </div>
  
  */
  {
    "id": "JIaJ7hb/",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Transfer Ownership\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"\\n        Are you sure you want to transfer the ownership of this blog?\\n        You will not be able to undo this action.\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@class\"],[\"Yep - I'm sure\",[32,0,[\"transferOwnership\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-transfer-owner.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    user: null,
    // Allowed actions
    confirm: () => {},
    actions: {
      confirm() {
        this.transferOwnership.perform();
      }

    },
    transferOwnership: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-unsubscribe-members", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="unsubscribe-members">
      <h1>Unsubscribe members from email?</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  {{#if (not this.confirmed)}}
      <div class="modal-body" data-test-state="unsubscribe-unconfirmed">
          <p>
              You're about to unsubscribe
              <strong data-test-text="unsubscribe-count">{{gh-pluralize this.model.memberCount "member"}}</strong> from email newsletters.
              Are you sure?
          </p>
      </div>
  {{else}}
      <div class="gh-content-box pa" data-test-state="unsubscribe-complete">
          {{#if this.error}}
              <div class="flex items-center">
                  {{svg-jar "warning" class="w4 h4 fill-red mr2 nudge-top--3"}}
                  <div>
                      <p class="ma0 pa0">
                          <span class="fw5" data-test-text="unsubscribe-error">{{this.error}}</span>
                      </p>
                  </div>
              </div>
          {{else}}
              <div class="flex items-center">
                  {{svg-jar "check-circle" class="w4 h4 stroke-green mr2"}}
                  <p class="ma0 pa0">
                      <span class="fw6" data-test-text="unsubscribe-count">{{gh-pluralize this.response.stats.successful "member"}}</span>
                      successfully unsubscribed
                  </p>
              </div>
              {{#if this.response.stats.unsuccessful}}
                  <div class="flex items-start mt2" data-test-bulk-delete-errors>
                      {{svg-jar "warning" class="w4 h4 fill-red mr2 nudge-top--3"}}
                      <div>
                          <p class="ma0 pa0">
                              <span class="fw5" data-test-text="invalid-count">{{gh-pluralize this.response.stats.unsuccessful "member"}}</span>
                              failed to unsubscribe
                          </p>
                      </div>
                  </div>
              {{/if}}
          {{/if}}
      </div>
  {{/if}}
  
  <div class="modal-footer">
      {{#if (not this.confirmed)}}
          <button {{action "closeModal"}} class="gh-btn" data-test-button="cancel">
              <span>Cancel</span>
          </button>
  
          <GhTaskButton
              @buttonText="Unsubscribe members"
              @successText="Unsubscribed"
              @task={{this.unsubscribeMemberTask}}
              @class="gh-btn gh-btn-red gh-btn-icon"
              data-test-button="confirm"
          />
      {{else}}
          <button {{action "closeModal"}} class="gh-btn gh-btn-black" data-test-button="close-modal">
              <span>Close</span>
          </button>
      {{/if}}
  </div>
  
  */
  {
    "id": "NB1q40yZ",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"unsubscribe-members\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Unsubscribe members from email?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[6,[37,3],[[30,[36,4],[[32,0,[\"confirmed\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"modal-body\"],[14,\"data-test-state\",\"unsubscribe-unconfirmed\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            You're about to unsubscribe\\n            \"],[10,\"strong\"],[14,\"data-test-text\",\"unsubscribe-count\"],[12],[1,[30,[36,2],[[32,0,[\"model\",\"memberCount\"]],\"member\"],null]],[13],[2,\" from email newsletters.\\n            Are you sure?\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"gh-content-box pa\"],[14,\"data-test-state\",\"unsubscribe-complete\"],[12],[2,\"\\n\"],[6,[37,3],[[32,0,[\"error\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                \"],[1,[30,[36,1],[\"warning\"],[[\"class\"],[\"w4 h4 fill-red mr2 nudge-top--3\"]]]],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"fw5\"],[14,\"data-test-text\",\"unsubscribe-error\"],[12],[1,[32,0,[\"error\"]]],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                \"],[1,[30,[36,1],[\"check-circle\"],[[\"class\"],[\"w4 h4 stroke-green mr2\"]]]],[2,\"\\n                \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"fw6\"],[14,\"data-test-text\",\"unsubscribe-count\"],[12],[1,[30,[36,2],[[32,0,[\"response\",\"stats\",\"successful\"]],\"member\"],null]],[13],[2,\"\\n                    successfully unsubscribed\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"],[6,[37,3],[[32,0,[\"response\",\"stats\",\"unsuccessful\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"flex items-start mt2\"],[14,\"data-test-bulk-delete-errors\",\"\"],[12],[2,\"\\n                    \"],[1,[30,[36,1],[\"warning\"],[[\"class\"],[\"w4 h4 fill-red mr2 nudge-top--3\"]]]],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"ma0 pa0\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"fw5\"],[14,\"data-test-text\",\"invalid-count\"],[12],[1,[30,[36,2],[[32,0,[\"response\",\"stats\",\"unsuccessful\"]],\"member\"],null]],[13],[2,\"\\n                            failed to unsubscribe\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n\"],[6,[37,3],[[30,[36,4],[[32,0,[\"confirmed\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"confirm\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Unsubscribe members\",\"Unsubscribed\",[32,0,[\"unsubscribeMemberTask\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black\"],[24,\"data-test-button\",\"close-modal\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Close\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"gh-pluralize\",\"if\",\"not\"]}",
    "moduleName": "ghost-admin/components/modal-unsubscribe-members.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    membersStats: Ember.inject.service(),
    shouldCancelSubscriptions: false,
    // Allowed actions
    confirm: () => {},
    member: Ember.computed.alias('model'),
    actions: {
      confirm() {
        this.unsubscribeMemberTask.perform();
      }

    },
    unsubscribeMemberTask: (0, _emberConcurrency.task)(function* () {
      try {
        const response = yield this.confirm();
        this.set('response', response);
        this.set('confirmed', true);
      } catch (e) {
        if (e.payload?.errors) {
          this.set('confirmed', true);
          this.set('error', e.payload.errors[0].message);
        }

        throw e;
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-unsuspend-user", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Are you sure you want to un-suspend this user?</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <strong>WARNING:</strong> This user will be able to log in again and will have the same permissions they had previously.
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton @buttonText="Un-suspend" @successText="Suspended" @task={{this.unsuspendUser}} @class="gh-btn gh-btn-red gh-btn-icon" data-test-modal-confirm="true" />
  </div>
  
  */
  {
    "id": "wpRHejoc",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Are you sure you want to un-suspend this user?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"strong\"],[12],[2,\"WARNING:\"],[13],[2,\" This user will be able to log in again and will have the same permissions they had previously.\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[[24,\"data-test-modal-confirm\",\"true\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Un-suspend\",\"Suspended\",[32,0,[\"unsuspendUser\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-unsuspend-user.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    // Allowed actions
    confirm: () => {},
    user: Ember.computed.alias('model'),
    actions: {
      confirm() {
        return this.unsuspendUser.perform();
      }

    },
    unsuspendUser: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-update-snippet", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header">
      <h1>Update this snippet?</h1>
  </header>
  <a class="close" href="" role="button" title="Close" {{action "closeModal"}}>{{svg-jar "close"}}<span class="hidden">Close</span></a>
  
  <div class="modal-body">
      <p>
          "<strong>{{this.snippet.name}}</strong>" will be overwritten.
          Don't worry, this will only affect using the snippet in the future.
          Any older posts using this snippet will stay the same.
      </p>
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      <GhTaskButton
          @buttonText="Update"
          @successText="Updated"
          @task={{this.updateSnippet}}
          @class="gh-btn gh-btn-black gh-btn-icon" />
  </div>
  
  */
  {
    "id": "JcTzK7Tp",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Update this snippet?\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"a\"],[24,0,\"close\"],[24,6,\"\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"\\n        \\\"\"],[10,\"strong\"],[12],[1,[32,0,[\"snippet\",\"name\"]]],[13],[2,\"\\\" will be overwritten.\\n        Don't worry, this will only affect using the snippet in the future.\\n        Any older posts using this snippet will stay the same.\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Update\",\"Updated\",[32,0,[\"updateSnippet\"]],\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modal-update-snippet.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    router: Ember.inject.service(),
    notifications: Ember.inject.service(),
    snippet: Ember.computed.alias('model.snippetRecord'),
    actions: {
      confirm() {
        this.updateSnippet.perform();
      }

    },
    updateSnippet: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } catch (error) {
        this.notifications.showAPIError(error, {
          key: 'snippet.update.failed'
        });
      } finally {
        this.send('closeModal');
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-upgrade-host-limit", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    
  <header class="modal-header" data-test-modal="delete-user">
      <h1>{{headerMessage}}</h1>
  </header>
  <button class="close" title="Close" {{on "click" this.closeModal}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
  <div class="modal-body">
      <p>
          {{html-safe upgradeMessage.message}}
      </p>
  </div>
  
  <div class="modal-footer">
      <button {{on "click" this.closeModal}} class="gh-btn" data-test-button="cancel-upgrade">
          <span>Cancel</span>
      </button>
  
      <button {{on "click" (action "upgrade")}} class="gh-btn gh-btn-green" data-test-button="upgrade-plan">
          <span>Upgrade</span>
      </button>
  </div>
  */
  {
    "id": "QH252AAQ",
    "block": "{\"symbols\":[],\"statements\":[[2,\"\\n\"],[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"delete-user\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[1,[34,0]],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[4,[38,1],[\"click\",[32,0,[\"closeModal\"]]],null],[12],[1,[30,[36,2],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"\\n        \"],[1,[30,[36,4],[[35,3,[\"message\"]]],null]],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-upgrade\"],[4,[38,1],[\"click\",[32,0,[\"closeModal\"]]],null],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green\"],[24,\"data-test-button\",\"upgrade-plan\"],[4,[38,1],[\"click\",[30,[36,5],[[32,0],\"upgrade\"],null]],null],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Upgrade\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"headerMessage\",\"on\",\"svg-jar\",\"upgradeMessage\",\"html-safe\",\"action\"]}",
    "moduleName": "ghost-admin/components/modal-upgrade-host-limit.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    router: Ember.inject.service(),
    billing: Ember.inject.service(),
    headerMessage: Ember.computed('details', function () {
      let header = 'Upgrade to enable publishing';

      if (this.model.message && this.model.message.match(/account is currently in review/gi)) {
        header = `Hold up, we're missing some details`;
      }

      return header;
    }),
    upgradeMessage: Ember.computed('details', function () {
      const {
        limit,
        total
      } = this.model.details || {};
      const message = this.model.message;
      return {
        limit,
        total,
        message
      };
    }),
    actions: {
      upgrade() {
        this.router.transitionTo('pro', {
          queryParams: {
            action: 'checkout'
          }
        });
      },

      confirm() {
        this.send('upgrade');
      }

    }
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-upgrade-unsuspend-user-host-limit", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="delete-user">
      <h1>Upgrade to un-suspend this user</h1>
  </header>
  <button class="close" title="Close" {{on "click" this.closeModal}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
  <div class="modal-body">
      <p>
          {{html-safe this.model.message}} To give this user access to Ghost, upgrade to a different plan.
      </p>
  </div>
  
  <div class="modal-footer">
      <button {{on "click" this.closeModal}} class="gh-btn" data-test-button="cancel-upgrade">
          <span>Cancel</span>
      </button>
  
      <button {{on "click" (action "upgrade")}} class="gh-btn gh-btn-green" data-test-button="upgrade-plan">
          <span>Upgrade my plan</span>
      </button>
  </div>
  */
  {
    "id": "bSNtmaPO",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"delete-user\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Upgrade to un-suspend this user\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[4,[38,0],[\"click\",[32,0,[\"closeModal\"]]],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"\\n        \"],[1,[30,[36,2],[[32,0,[\"model\",\"message\"]]],null]],[2,\" To give this user access to Ghost, upgrade to a different plan.\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-upgrade\"],[4,[38,0],[\"click\",[32,0,[\"closeModal\"]]],null],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green\"],[24,\"data-test-button\",\"upgrade-plan\"],[4,[38,0],[\"click\",[30,[36,3],[[32,0],\"upgrade\"],null]],null],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Upgrade my plan\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\",\"svg-jar\",\"html-safe\",\"action\"]}",
    "moduleName": "ghost-admin/components/modal-upgrade-unsuspend-user-host-limit.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    router: Ember.inject.service(),
    actions: {
      upgrade() {
        this.router.transitionTo('pro');
      },

      confirm() {
        this.send('upgrade');
      }

    }
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-upload-image", ["exports", "ghost-admin/components/modal-base", "ghost-admin/utils/caja-sanitizers", "ember-concurrency"], function (_exports, _modalBase, _cajaSanitizers, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-body">
      {{#if this.url}}
          <div class="gh-image-uploader -with-image">
              <div><img src={{this.url}}></div>
              <a class="image-delete" title="Delete" {{action 'removeImage'}}>
                  {{svg-jar "trash"}}
                  <span class="hidden">Delete</span>
              </a>
          </div>
      {{else}}
          <GhImageUploader
              @image={{this.newUrl}}
              @saveButton={{false}}
              @update={{action "fileUploaded"}}
              @uploadStarted={{action "isUploading"}}
              @uploadFinished={{action "isUploading"}}
              @accept={{this.model.accept}}
              @extensions={{this.model.extensions}}
              @uploadUrl={{this.model.uploadUrl}}
              @paramsHash={{this.model.paramsHas}}
          />
      {{/if}}
  </div>
  
  <div class="modal-footer">
      <button {{action "closeModal"}} class="gh-btn"><span>Cancel</span></button>
      {{#if this._isUploading}}
          <button class="gh-btn gh-btn-black right gh-btn-icon disabled"><span>Save</span></button>
      {{else}}
          <GhTaskButton @task={{this.uploadImage}} @class="gh-btn gh-btn-black right gh-btn-icon" data-test-modal-accept-button={{true}} />
      {{/if}}
  </div>
  
  */
  {
    "id": "SvtF3PGy",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"url\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"gh-image-uploader -with-image\"],[12],[2,\"\\n            \"],[10,\"div\"],[12],[10,\"img\"],[15,\"src\",[32,0,[\"url\"]]],[12],[13],[13],[2,\"\\n            \"],[11,\"a\"],[24,0,\"image-delete\"],[24,\"title\",\"Delete\"],[4,[38,0],[[32,0],\"removeImage\"],null],[12],[2,\"\\n                \"],[1,[30,[36,1],[\"trash\"],null]],[2,\"\\n                \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Delete\"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[8,\"gh-image-uploader\",[],[[\"@image\",\"@saveButton\",\"@update\",\"@uploadStarted\",\"@uploadFinished\",\"@accept\",\"@extensions\",\"@uploadUrl\",\"@paramsHash\"],[[32,0,[\"newUrl\"]],false,[30,[36,0],[[32,0],\"fileUploaded\"],null],[30,[36,0],[[32,0],\"isUploading\"],null],[30,[36,0],[[32,0],\"isUploading\"],null],[32,0,[\"model\",\"accept\"]],[32,0,[\"model\",\"extensions\"]],[32,0,[\"model\",\"uploadUrl\"]],[32,0,[\"model\",\"paramsHas\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[[32,0],\"closeModal\"],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n\"],[6,[37,2],[[32,0,[\"_isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[10,\"button\"],[14,0,\"gh-btn gh-btn-black right gh-btn-icon disabled\"],[12],[10,\"span\"],[12],[2,\"Save\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[8,\"gh-task-button\",[[16,\"data-test-modal-accept-button\",true]],[[\"@task\",\"@class\"],[[32,0,[\"uploadImage\"]],\"gh-btn gh-btn-black right gh-btn-icon\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/components/modal-upload-image.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    config: Ember.inject.service(),
    notifications: Ember.inject.service(),
    model: null,
    url: '',
    newUrl: '',
    _isUploading: false,
    image: Ember.computed('model.{model,imageProperty}', {
      get() {
        let imageProperty = this.get('model.imageProperty');
        return this.get(`model.model.${imageProperty}`);
      },

      set(key, value) {
        let model = this.get('model.model');
        let imageProperty = this.get('model.imageProperty');
        return model.set(imageProperty, value);
      }

    }),

    didReceiveAttrs() {
      this._super(...arguments);

      let image = this.image;
      this.set('url', image);
      this.set('newUrl', image);
    },

    actions: {
      fileUploaded(url) {
        this.set('url', url);
        this.set('newUrl', url);
      },

      removeImage() {
        this.set('url', '');
        this.set('newUrl', '');
      },

      confirm() {
        this.uploadImage.perform();
      },

      isUploading() {
        this.toggleProperty('_isUploading');
      }

    },

    // TODO: should validation be handled in the gh-image-uploader component?
    //  pro - consistency everywhere, simplification here
    //  con - difficult if the "save" is happening externally as it does here
    //
    //  maybe it should be handled at the model level?
    //      - automatically present everywhere
    //      - file uploads should always result in valid urls so it should only
    //        affect the url input form
    keyDown() {
      this._setErrorState(false);
    },

    _setErrorState(state) {
      if (state) {
        this.element.querySelector('.url').classList.add('error');
      } else {
        this.element.querySelector('.url').classList.remove('error');
      }
    },

    _validateUrl(url) {
      if (!Ember.isEmpty(url) && !_cajaSanitizers.default.url(url)) {
        this._setErrorState(true);

        return {
          message: 'Image URI is not valid'
        };
      }

      return true;
    },

    // end validation
    uploadImage: (0, _emberConcurrency.task)(function* () {
      let model = this.get('model.model');
      let newUrl = this.newUrl;

      let result = this._validateUrl(newUrl);

      let notifications = this.notifications;

      if (result === true) {
        this.set('image', newUrl);

        try {
          yield model.save();
        } catch (e) {
          notifications.showAPIError(e, {
            key: 'image.upload'
          });
        } finally {
          this.send('closeModal');
        }
      }
    }).drop()
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-webhook-form", ["exports", "ghost-admin/components/modal-base", "ghost-admin/models/webhook", "ghost-admin/helpers/event-name", "ember-concurrency"], function (_exports, _modalBase, _webhook, _eventName, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <header class="modal-header" data-test-modal="webhook-form">
      <h1 data-test-text="title">{{if this.webhook.isNew "New" "Edit"}} webhook</h1>
  </header>
  <button class="close" href title="Close" {{action "closeModal"}} {{action (optional this.noop) on="mouseDown"}}>
      {{svg-jar "close"}}
  </button>
  
  <div class="modal-body">
      <fieldset>
          <GhFormGroup @errors={{this.webhook.errors}} @hasValidated={{this.webhook.hasValidated}} @property="name">
              <label for="webhook-name" class="fw6">Name</label>
              <GhTextInput
                  @value={{readonly this.webhook.name}}
                  @input={{action (mut this.webhook.name) value="target.value"}}
                  @focus-out={{action "validate" "name" target=this.webhook}}
                  @id="webhook-name"
                  @name="name"
                  @class="gh-input mt1"
                  @shouldFocus={{true}}
                  @autocapitalize="off"
                  @autocorrect="off"
                  data-test-input="webhook-name" />
              <GhErrorMessage @errors={{this.webhook.errors}} @property="name" data-test-error="webhook-name" />
          </GhFormGroup>
      </fieldset>
      <fieldset>
          <GhFormGroup @errors={{this.webhook.errors}} @hasValidated={{this.webhook.hasValidated}} @property="event">
              <label for="webhook-event" class="fw6">Event</label>
              <span class="gh-select">
                  <OneWaySelect @value={{this.webhook.event}}
                      @options={{this.availableEvents}}
                      @optionValuePath="event"
                      @optionLabelPath="name"
                      @optionTargetPath="event"
                      @groupLabelPath="group"
                      @class="mt1"
                      @includeBlank={{true}}
                      @prompt="Select an event"
                      @update={{action "selectEvent"}}
                      @id="webhook-event"
                      @name="event"
                      data-test-select="webhook-event" />
                  {{svg-jar "arrow-down-small"}}
              </span>
              <GhErrorMessage @errors={{this.webhook.errors}} @property="event" data-test-error="webhook-event" />
          </GhFormGroup>
      </fieldset>
      <fieldset>
          <GhFormGroup @errors={{this.webhook.errors}} @hasValidated={{this.webhook.hasValidated}} @property="targetUrl">
              <label for="webhook-targetUrl" class="fw6">Target URL</label>
              <GhTextInput
                  @value={{readonly this.webhook.targetUrl}}
                  @input={{action (mut this.webhook.targetUrl) value="target.value"}}
                  @focus-out={{action "validate" "targetUrl" target=this.webhook}}
                  @id="webhook-targetUrl"
                  @name="targetUrl"
                  @placeholder="https://example.com"
                  @class="gh-input mt1"
                  @shouldFocus={{true}}
                  @autocapitalize="off"
                  @autocorrect="off"
                  data-test-input="webhook-targetUrl" />
              <GhErrorMessage @errors={{this.webhook.errors}} @property="targetUrl" data-test-error="webhook-targetUrl" />
          </GhFormGroup>
      </fieldset>
      {{#if (enable-developer-experiments)}}
          <fieldset>
              <GhFormGroup @errors={{this.webhook.errors}} @hasValidated={{this.webhook.hasValidated}} @property="secret">
                  <label for="webhook-secret" class="fw6">Secret</label>
                  <GhTextInput
                      @value={{readonly this.webhook.secret}}
                      @oninput={{action (mut this.webhook.secret) value="target.value"}}
                      @focus-out={{action "validate" "secret" target=this.webhook}}
                      @id="webhook-secret"
                      @name="secret"
                      @class="gh-input mt1"
                      @shouldFocus={{true}}
                      @autocapitalize="off"
                      @autocorrect="off"
                      data-test-input="webhook-secret" />
                  <GhErrorMessage @errors={{this.webhook.errors}} @property="secret" data-test-error="webhook-secret" />
              </GhFormGroup>
          </fieldset>
      {{/if}}
      {{#if this.error}}
          <p class="red">{{this.error}}</p>
      {{/if}}
  </div>
  
  <div class="modal-footer">
      <button
          class="gh-btn"
          {{action "closeModal"}}
          {{!-- disable mouseDown so it doesn't trigger focus-out validations --}}
          {{action (optional this.noop) on="mouseDown"}}
          data-test-button="cancel-webhook"
      >
          <span>Cancel</span>
      </button>
      <GhTaskButton @buttonText={{this.buttonText}}
          @successText={{this.successText}}
          @task={{this.saveWebhook}}
          @class="gh-btn gh-btn-black gh-btn-icon"
          data-test-button="save-webhook" />
  </div>
  
  */
  {
    "id": "b43JwI4G",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"webhook-form\"],[12],[2,\"\\n    \"],[10,\"h1\"],[14,\"data-test-text\",\"title\"],[12],[1,[30,[36,3],[[32,0,[\"webhook\",\"isNew\"]],\"New\",\"Edit\"],null]],[2,\" webhook\"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[11,\"button\"],[24,0,\"close\"],[24,6,\"\"],[24,\"title\",\"Close\"],[4,[38,2],[[32,0],\"closeModal\"],null],[4,[38,2],[[32,0],[30,[36,4],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n    \"],[1,[30,[36,5],[\"close\"],null]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n    \"],[10,\"fieldset\"],[12],[2,\"\\n        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"webhook\",\"errors\"]],[32,0,[\"webhook\",\"hasValidated\"]],\"name\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"label\"],[14,\"for\",\"webhook-name\"],[14,0,\"fw6\"],[12],[2,\"Name\"],[13],[2,\"\\n            \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"webhook-name\"]],[[\"@value\",\"@input\",\"@focus-out\",\"@id\",\"@name\",\"@class\",\"@shouldFocus\",\"@autocapitalize\",\"@autocorrect\"],[[30,[36,0],[[32,0,[\"webhook\",\"name\"]]],null],[30,[36,2],[[32,0],[30,[36,1],[[32,0,[\"webhook\",\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,2],[[32,0],\"validate\",\"name\"],[[\"target\"],[[32,0,[\"webhook\"]]]]],\"webhook-name\",\"name\",\"gh-input mt1\",true,\"off\",\"off\"]],null],[2,\"\\n            \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"webhook-name\"]],[[\"@errors\",\"@property\"],[[32,0,[\"webhook\",\"errors\"]],\"name\"]],null],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"fieldset\"],[12],[2,\"\\n        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"webhook\",\"errors\"]],[32,0,[\"webhook\",\"hasValidated\"]],\"event\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"label\"],[14,\"for\",\"webhook-event\"],[14,0,\"fw6\"],[12],[2,\"Event\"],[13],[2,\"\\n            \"],[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n                \"],[8,\"one-way-select\",[[24,\"data-test-select\",\"webhook-event\"]],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@groupLabelPath\",\"@class\",\"@includeBlank\",\"@prompt\",\"@update\",\"@id\",\"@name\"],[[32,0,[\"webhook\",\"event\"]],[32,0,[\"availableEvents\"]],\"event\",\"name\",\"event\",\"group\",\"mt1\",true,\"Select an event\",[30,[36,2],[[32,0],\"selectEvent\"],null],\"webhook-event\",\"event\"]],null],[2,\"\\n                \"],[1,[30,[36,5],[\"arrow-down-small\"],null]],[2,\"\\n            \"],[13],[2,\"\\n            \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"webhook-event\"]],[[\"@errors\",\"@property\"],[[32,0,[\"webhook\",\"errors\"]],\"event\"]],null],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"fieldset\"],[12],[2,\"\\n        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"webhook\",\"errors\"]],[32,0,[\"webhook\",\"hasValidated\"]],\"targetUrl\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"label\"],[14,\"for\",\"webhook-targetUrl\"],[14,0,\"fw6\"],[12],[2,\"Target URL\"],[13],[2,\"\\n            \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"webhook-targetUrl\"]],[[\"@value\",\"@input\",\"@focus-out\",\"@id\",\"@name\",\"@placeholder\",\"@class\",\"@shouldFocus\",\"@autocapitalize\",\"@autocorrect\"],[[30,[36,0],[[32,0,[\"webhook\",\"targetUrl\"]]],null],[30,[36,2],[[32,0],[30,[36,1],[[32,0,[\"webhook\",\"targetUrl\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,2],[[32,0],\"validate\",\"targetUrl\"],[[\"target\"],[[32,0,[\"webhook\"]]]]],\"webhook-targetUrl\",\"targetUrl\",\"https://example.com\",\"gh-input mt1\",true,\"off\",\"off\"]],null],[2,\"\\n            \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"webhook-targetUrl\"]],[[\"@errors\",\"@property\"],[[32,0,[\"webhook\",\"errors\"]],\"targetUrl\"]],null],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n\"],[6,[37,3],[[30,[36,6],null,null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"fieldset\"],[12],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"webhook\",\"errors\"]],[32,0,[\"webhook\",\"hasValidated\"]],\"secret\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"label\"],[14,\"for\",\"webhook-secret\"],[14,0,\"fw6\"],[12],[2,\"Secret\"],[13],[2,\"\\n                \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"webhook-secret\"]],[[\"@value\",\"@oninput\",\"@focus-out\",\"@id\",\"@name\",\"@class\",\"@shouldFocus\",\"@autocapitalize\",\"@autocorrect\"],[[30,[36,0],[[32,0,[\"webhook\",\"secret\"]]],null],[30,[36,2],[[32,0],[30,[36,1],[[32,0,[\"webhook\",\"secret\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,2],[[32,0],\"validate\",\"secret\"],[[\"target\"],[[32,0,[\"webhook\"]]]]],\"webhook-secret\",\"secret\",\"gh-input mt1\",true,\"off\",\"off\"]],null],[2,\"\\n                \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"webhook-secret\"]],[[\"@errors\",\"@property\"],[[32,0,[\"webhook\",\"errors\"]],\"secret\"]],null],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,3],[[32,0,[\"error\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"p\"],[14,0,\"red\"],[12],[1,[32,0,[\"error\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\\n\"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-webhook\"],[4,[38,2],[[32,0],\"closeModal\"],null],[4,[38,2],[[32,0],[30,[36,4],[[32,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-webhook\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[[32,0,[\"buttonText\"]],[32,0,[\"successText\"]],[32,0,[\"saveWebhook\"]],\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"readonly\",\"mut\",\"action\",\"if\",\"optional\",\"svg-jar\",\"enable-developer-experiments\"]}",
    "moduleName": "ghost-admin/components/modal-webhook-form.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, _modalBase.default.extend({
    router: Ember.inject.service(),
    feature: Ember.inject.service(),
    availableEvents: null,
    error: null,
    buttonText: 'Save',
    successText: 'Saved',

    confirm() {},

    webhook: Ember.computed.alias('model'),

    init() {
      this._super(...arguments);

      this.availableEvents = _eventName.AVAILABLE_EVENTS;
    },

    didReceiveAttrs() {
      this._super(...arguments);

      if (this.webhook.isNew) {
        this.set('buttonText', 'Create');
        this.set('successText', 'Created');
      }
    },

    actions: {
      selectEvent(value) {
        this.webhook.set('event', value);
        this.webhook.validate({
          property: 'event'
        });
      },

      confirm() {
        this.saveWebhook.perform();
      }

    },
    saveWebhook: (0, _emberConcurrency.task)(function* () {
      this.set('error', null);

      try {
        let webhook = yield this.confirm();
        let integration = yield webhook.get('integration');
        this.router.transitionTo('settings.integration', integration);
      } catch (e) {
        // TODO: server-side validation errors should be serialized
        // properly so that errors are added to model.errors automatically
        if (e && e.payload && e.payload.errors) {
          let attrs = Array.from(_webhook.default.attributes.keys());
          e.payload.errors.forEach(error => {
            let {
              message,
              property = ''
            } = error;
            property = Ember.String.camelize(property);

            if (property && attrs.includes(property)) {
              this.webhook.errors.add(property, message);
              this.webhook.hasValidated.pushObject(property);
            } else {
              this.set('error', `Error: ${message}`);
            }
          });
          return;
        } // bubble up to the global error handler


        if (e) {
          throw e;
        }
      }
    })
  }));

  _exports.default = _default;
});
;define("ghost-admin/components/modal-whats-new", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    whatsNew: Ember.inject.service(),

    confirm() {},

    actions: {
      // noop - enter key shouldn't do anything
      confirm() {}

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modals/confirm-unsaved-changes", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content">
      <header class="modal-header" data-test-modal="unsaved-settings">
          <h1>Are you sure you want to leave this page?</h1>
      </header>
      <button type="button" class="close" role="button" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
      <div class="modal-body">
          <p>
              Hey there! It looks like you didn't save the changes you made.
          </p>
  
          <p>Save before you go!</p>
      </div>
  
      <div class="modal-footer">
          <button {{on "click" (fn @close false)}} class="gh-btn" data-test-stay-button><span>Stay</span></button>
          <button {{on "click" (fn @close true)}} class="gh-btn gh-btn-red" data-test-leave-button><span>Leave</span></button>
      </div>
  </div>
  */
  {
    "id": "mB6HkqyD",
    "block": "{\"symbols\":[\"@close\"],\"statements\":[[10,\"div\"],[14,0,\"modal-content\"],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"unsaved-settings\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[2,\"Are you sure you want to leave this page?\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"close\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,1]],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            Hey there! It looks like you didn't save the changes you made.\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"p\"],[12],[2,\"Save before you go!\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-stay-button\",\"\"],[4,[38,0],[\"click\",[30,[36,2],[[32,1],false],null]],null],[12],[10,\"span\"],[12],[2,\"Stay\"],[13],[13],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-red\"],[24,\"data-test-leave-button\",\"\"],[4,[38,0],[\"click\",[30,[36,2],[[32,1],true],null]],null],[12],[10,\"span\"],[12],[2,\"Leave\"],[13],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\",\"svg-jar\",\"fn\"]}",
    "moduleName": "ghost-admin/components/modals/confirm-unsaved-changes.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/modals/delete-post", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content" {{on-key "Enter" (perform this.deletePostTask)}}>
      <header class="modal-header">
          <h1>Are you sure you want to delete this {{@data.post.displayName}}?</h1>
      </header>
      <button type="button" class="close" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
      <div class="modal-body">
          <p>
              You're about to delete "<strong>{{@data.post.title}}</strong>".
              This is permanent! We warned you, k?
          </p>
      </div>
  
      <div class="modal-footer">
          <button type="button" class="gh-btn" {{on "click" @close}}><span>Cancel</span></button>
          <GhTaskButton
              @buttonText="Delete"
              @successText="Deleted"
              @task={{this.deletePostTask}}
              @class="gh-btn gh-btn-red gh-btn-icon"
          />
      </div>
  </div>
  */
  {
    "id": "plQAYTbl",
    "block": "{\"symbols\":[\"@data\",\"@close\"],\"statements\":[[11,\"div\"],[24,0,\"modal-content\"],[4,[38,1],[\"Enter\",[30,[36,0],[[32,0,[\"deletePostTask\"]]],null]],null],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[2,\"Are you sure you want to delete this \"],[1,[32,1,[\"post\",\"displayName\"]]],[2,\"?\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[24,4,\"button\"],[4,[38,2],[\"click\",[32,2]],null],[12],[1,[30,[36,3],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            You're about to delete \\\"\"],[10,\"strong\"],[12],[1,[32,1,[\"post\",\"title\"]]],[13],[2,\"\\\".\\n            This is permanent! We warned you, k?\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,4,\"button\"],[4,[38,2],[\"click\",[32,2]],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n        \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete\",\"Deleted\",[32,0,[\"deletePostTask\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"perform\",\"on-key\",\"on\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modals/delete-post.hbs"
  });

  let DeletePostModalComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class DeletePostModalComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "notifications", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);
    }

    *deletePostTask() {
      try {
        const {
          post
        } = this.args.data;

        if (post.isDeleted) {
          return true;
        } // clear the data store and post of any unsaved client-generated tags before deleting


        post.updateTags();
        yield post.destroyRecord();
        this.notifications.closeAlerts('post.delete');
        this.router.transitionTo(post.displayName === 'page' ? 'pages' : 'posts');
        return true;
      } catch (error) {
        this.notifications.showAPIError(error, {
          key: 'post.delete.failed'
        });
      } finally {
        this.args.close();
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "deletePostTask", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "deletePostTask"), _class.prototype)), _class));
  _exports.default = DeletePostModalComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, DeletePostModalComponent);
});
;define("ghost-admin/components/modals/design/confirm-delete-theme", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content" {{on-key "Enter" (perform this.deleteThemeTask)}} data-test-modal="delete-theme">
      <header class="modal-header">
          <h1>Are you sure you want to delete this?</h1>
      </header>
      <button type="button" class="close" role="button" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
      <div class="modal-body">
          <p>You're about to delete "<strong>{{@data.theme.name}}</strong>". This is permanent! We warned you, k? Maybe <a href="#" {{on "click" this.downloadTheme}}>download your theme before continuing</a></p>
      </div>
  
      <div class="modal-footer">
          <button {{on "click" (fn @close false)}} class="gh-btn" data-test-button="cancel"><span>Stay</span></button>
          <GhTaskButton
              @buttonText="Delete"
              @successText="Deleted"
              @task={{this.deleteThemeTask}}
              @class="gh-btn gh-btn-red gh-btn-icon"
              data-test-button="confirm" />
      </div>
  </div>
  */
  {
    "id": "721Kzhen",
    "block": "{\"symbols\":[\"@close\",\"@data\"],\"statements\":[[11,\"div\"],[24,0,\"modal-content\"],[24,\"data-test-modal\",\"delete-theme\"],[4,[38,1],[\"Enter\",[30,[36,0],[[32,0,[\"deleteThemeTask\"]]],null]],null],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[2,\"Are you sure you want to delete this?\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"close\"],[24,\"role\",\"button\"],[24,\"title\",\"Close\"],[24,4,\"button\"],[4,[38,2],[\"click\",[32,1]],null],[12],[1,[30,[36,3],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"You're about to delete \\\"\"],[10,\"strong\"],[12],[1,[32,2,[\"theme\",\"name\"]]],[13],[2,\"\\\". This is permanent! We warned you, k? Maybe \"],[11,\"a\"],[24,6,\"#\"],[4,[38,2],[\"click\",[32,0,[\"downloadTheme\"]]],null],[12],[2,\"download your theme before continuing\"],[13],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel\"],[4,[38,2],[\"click\",[30,[36,4],[[32,1],false],null]],null],[12],[10,\"span\"],[12],[2,\"Stay\"],[13],[13],[2,\"\\n        \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"confirm\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete\",\"Deleted\",[32,0,[\"deleteThemeTask\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"perform\",\"on-key\",\"on\",\"svg-jar\",\"fn\"]}",
    "moduleName": "ghost-admin/components/modals/design/confirm-delete-theme.hbs"
  });

  let ConfirmDeleteThemeComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._action, (_class = class ConfirmDeleteThemeComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ghostPaths", _descriptor, this);

      _initializerDefineProperty(this, "notifications", _descriptor2, this);

      _initializerDefineProperty(this, "utils", _descriptor3, this);
    }

    downloadTheme(event) {
      event.preventDefault();
      this.utils.downloadFile(`${this.ghostPaths.apiRoot}/themes/${this.args.data.theme.name}/download/`);
    }

    *deleteThemeTask() {
      try {
        yield this.args.data.theme.destroyRecord(); // we need to unload from the store here so that uploading another
        // theme with the same "id" doesn't attempt to update the deleted record

        this.args.data.theme.unloadRecord();
        this.args.close();
        return true;
      } catch (error) {
        // TODO: show error in modal rather than generic message
        this.notifications.showAPIError(error);
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "utils", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "downloadTheme", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "downloadTheme"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "deleteThemeTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "deleteThemeTask"), _class.prototype)), _class));
  _exports.default = ConfirmDeleteThemeComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ConfirmDeleteThemeComponent);
});
;define("ghost-admin/components/modals/design/install-theme", ["exports", "@glimmer/component", "ghost-admin/services/ajax", "ember-concurrency-decorators"], function (_exports, _component, _ajax, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content" data-test-modal="install-theme">
      <div class="theme-validation-container">
          <header class="modal-header">
              <h1>{{if this.installSuccess "Success" "Install theme"}}</h1>
          </header>
          <button type="button" class="close" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
          <div class="modal-body">
              {{#if this.isConfirming}}
                  <p data-test-state="confirm">
                      By clicking below, <strong>{{this.themeName}}</strong> will automatically be activated as the theme for your site.
                  </p>
  
                  {{#if this.willOverwriteExisting}}
                      <p data-test-state="confirm-overwrite">
                          This will overwrite your existing version of {{this.themeName}}{{if this.willOverwriteExisting.active ", which is your active theme"}}. All custom changes will be lost.
                      </p>
                  {{/if}}
              {{/if}}
  
              {{#if this.installSuccess}}
                  {{#if this.hasWarningsOrErrors}}
                      <p data-test-state="installed-with-notes">
                          The theme <strong>"{{this.themeName}}"</strong> was installed successfully but we detected some {{if this.validationErrors "errors" "warnings"}}.
                      </p>
                  {{else}}
                      {{!-- Installed with no errors --}}
                      <p data-test-state="installed-no-notes"><strong>{{this.themeName}}</strong> has been successfully installed and activated as your theme.</p>
                  {{/if}}
              {{/if}}
  
              {{#if this.installError}}
                  {{!-- Outright failure - not found, not a theme, server error, etc --}}
                  <p data-test-state="failed-error">{{this.themeName}} failed to install.</p>
                  <p class="error" data-test-text="install-error"><strong class="response">{{this.installError}}</strong></p>
              {{/if}}
  
              {{#if this.installFailure}}
                  {{!-- Invalid theme --}}
                  <p data-test-state="failed-invalid">This theme is invalid and cannot be installed. Contact the theme developer.</p>
              {{/if}}
  
              {{#if this.fatalValidationErrors}}
                  <div>
                      <h2 class="mb0 mt4 f5 fw6">Fatal Errors</h2>
                      <p class="mb2">Must-fix to install theme</p>
                  </div>
  
                  <ul class="pa0">
                  {{#each this.fatalValidationErrors as |error|}}
                      <li class="theme-validation-item theme-fatal-error">
                          <GhThemeErrorLi @error={{error}} />
                      </li>
                  {{/each}}
                  </ul>
              {{/if}}
  
              {{#if this.validationErrors}}
                  <div>
                      <h2 class="mb0 mt4 f5 fw6">Errors</h2>
                      <p class="mb2">Highly recommended to fix, functionality <strong>could</strong> be restricted</p>
                  </div>
                  <ul class="pa0">
                  {{#each this.validationErrors as |error|}}
                      <li class="theme-validation-item theme-error">
                          <GhThemeErrorLi @error={{error}} />
                      </li>
                  {{/each}}
                  </ul>
              {{/if}}
  
              {{#if this.validationWarnings}}
                  <div>
                      <h2 class="mb0 mt4 f5 fw6">Warnings</h2>
                  </div>
                  <ul class="pa0">
                  {{#each this.validationWarnings as |error|}}
                      <li class="theme-validation-item theme-warning">
                          <GhThemeErrorLi @error={{error}} />
                      </li>
                  {{/each}}
                  </ul>
              {{/if}}
          </div>
  
          <div class="modal-footer">
              <div class="flex items-center justify-between">
                  <button {{on "click" (fn @close false)}} class="gh-btn" data-test-button="cancel">
                      <span>{{if (or this.installSuccess this.installFailure) "Close" "Cancel"}}</span>
                  </button>
  
                  {{#if this.shouldShowInstall}}
                      <GhTaskButton
                          @disabled={{this.refreshThemesTask.isRunning}}
                          @buttonText={{if this.willOverwriteExisting "Overwrite" "Install"}}
                          @runningText="Installing"
                          @successText="Installed"
                          @task={{this.installThemeTask}}
                          @unlinkedTask={{true}} {{!-- button will be removed on success so avoid self-cancel warning --}}
                          @class="gh-btn gh-btn-primary gh-btn-icon"
                          data-test-button="confirm-install"
                      />
                  {{/if}}
              </div>
          </div>
      </div>
  </div>
  */
  {
    "id": "P4O9zf4l",
    "block": "{\"symbols\":[\"error\",\"error\",\"error\",\"@close\"],\"statements\":[[10,\"div\"],[14,0,\"modal-content\"],[14,\"data-test-modal\",\"install-theme\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"theme-validation-container\"],[12],[2,\"\\n        \"],[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n            \"],[10,\"h1\"],[12],[1,[30,[36,0],[[32,0,[\"installSuccess\"]],\"Success\",\"Install theme\"],null]],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[24,4,\"button\"],[4,[38,3],[\"click\",[32,4]],null],[12],[1,[30,[36,4],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n\"],[6,[37,0],[[32,0,[\"isConfirming\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"p\"],[14,\"data-test-state\",\"confirm\"],[12],[2,\"\\n                    By clicking below, \"],[10,\"strong\"],[12],[1,[32,0,[\"themeName\"]]],[13],[2,\" will automatically be activated as the theme for your site.\\n                \"],[13],[2,\"\\n\\n\"],[6,[37,0],[[32,0,[\"willOverwriteExisting\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"p\"],[14,\"data-test-state\",\"confirm-overwrite\"],[12],[2,\"\\n                        This will overwrite your existing version of \"],[1,[32,0,[\"themeName\"]]],[1,[30,[36,0],[[32,0,[\"willOverwriteExisting\",\"active\"]],\", which is your active theme\"],null]],[2,\". All custom changes will be lost.\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,0],[[32,0,[\"installSuccess\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,0],[[32,0,[\"hasWarningsOrErrors\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"p\"],[14,\"data-test-state\",\"installed-with-notes\"],[12],[2,\"\\n                        The theme \"],[10,\"strong\"],[12],[2,\"\\\"\"],[1,[32,0,[\"themeName\"]]],[2,\"\\\"\"],[13],[2,\" was installed successfully but we detected some \"],[1,[30,[36,0],[[32,0,[\"validationErrors\"]],\"errors\",\"warnings\"],null]],[2,\".\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[10,\"p\"],[14,\"data-test-state\",\"installed-no-notes\"],[12],[10,\"strong\"],[12],[1,[32,0,[\"themeName\"]]],[13],[2,\" has been successfully installed and activated as your theme.\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,0],[[32,0,[\"installError\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"p\"],[14,\"data-test-state\",\"failed-error\"],[12],[1,[32,0,[\"themeName\"]]],[2,\" failed to install.\"],[13],[2,\"\\n                \"],[10,\"p\"],[14,0,\"error\"],[14,\"data-test-text\",\"install-error\"],[12],[10,\"strong\"],[14,0,\"response\"],[12],[1,[32,0,[\"installError\"]]],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,0],[[32,0,[\"installFailure\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"p\"],[14,\"data-test-state\",\"failed-invalid\"],[12],[2,\"This theme is invalid and cannot be installed. Contact the theme developer.\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,0],[[32,0,[\"fatalValidationErrors\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h2\"],[14,0,\"mb0 mt4 f5 fw6\"],[12],[2,\"Fatal Errors\"],[13],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"mb2\"],[12],[2,\"Must-fix to install theme\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\\n                \"],[10,\"ul\"],[14,0,\"pa0\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,1],[[30,[36,1],[[32,0,[\"fatalValidationErrors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"li\"],[14,0,\"theme-validation-item theme-fatal-error\"],[12],[2,\"\\n                        \"],[8,\"gh-theme-error-li\",[],[[\"@error\"],[[32,3]]],null],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[3]}]]],[2,\"                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,0],[[32,0,[\"validationErrors\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h2\"],[14,0,\"mb0 mt4 f5 fw6\"],[12],[2,\"Errors\"],[13],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"mb2\"],[12],[2,\"Highly recommended to fix, functionality \"],[10,\"strong\"],[12],[2,\"could\"],[13],[2,\" be restricted\"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"ul\"],[14,0,\"pa0\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,1],[[30,[36,1],[[32,0,[\"validationErrors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"li\"],[14,0,\"theme-validation-item theme-error\"],[12],[2,\"\\n                        \"],[8,\"gh-theme-error-li\",[],[[\"@error\"],[[32,2]]],null],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,0],[[32,0,[\"validationWarnings\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h2\"],[14,0,\"mb0 mt4 f5 fw6\"],[12],[2,\"Warnings\"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"ul\"],[14,0,\"pa0\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,1],[[30,[36,1],[[32,0,[\"validationWarnings\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"li\"],[14,0,\"theme-validation-item theme-warning\"],[12],[2,\"\\n                        \"],[8,\"gh-theme-error-li\",[],[[\"@error\"],[[32,1]]],null],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"flex items-center justify-between\"],[12],[2,\"\\n                \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel\"],[4,[38,3],[\"click\",[30,[36,5],[[32,4],false],null]],null],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[1,[30,[36,0],[[30,[36,6],[[32,0,[\"installSuccess\"]],[32,0,[\"installFailure\"]]],null],\"Close\",\"Cancel\"],null]],[13],[2,\"\\n                \"],[13],[2,\"\\n\\n\"],[6,[37,0],[[32,0,[\"shouldShowInstall\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"confirm-install\"]],[[\"@disabled\",\"@buttonText\",\"@runningText\",\"@successText\",\"@task\",\"@unlinkedTask\",\"@class\"],[[32,0,[\"refreshThemesTask\",\"isRunning\"]],[30,[36,0],[[32,0,[\"willOverwriteExisting\"]],\"Overwrite\",\"Install\"],null],\"Installing\",\"Installed\",[32,0,[\"installThemeTask\"]],true,\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"if\",\"-track-array\",\"each\",\"on\",\"svg-jar\",\"fn\",\"or\"]}",
    "moduleName": "ghost-admin/components/modals/design/install-theme.hbs"
  });

  let InstallThemeModalComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._tracked, (_class = class InstallThemeModalComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ajax", _descriptor, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor2, this);

      _initializerDefineProperty(this, "store", _descriptor3, this);

      _initializerDefineProperty(this, "themeManagement", _descriptor4, this);

      _initializerDefineProperty(this, "installedTheme", _descriptor5, this);

      _initializerDefineProperty(this, "installError", _descriptor6, this);

      _initializerDefineProperty(this, "validationWarnings", _descriptor7, this);

      _initializerDefineProperty(this, "validationErrors", _descriptor8, this);

      _initializerDefineProperty(this, "fatalValidationErrors", _descriptor9, this);

      _defineProperty(this, "themes", this.store.peekAll('theme'));

      this.refreshThemesTask.perform();
    }

    get themeName() {
      return this.args.data.theme?.name || this.args.data.ref.split('/')[1];
    }

    get themeRef() {
      return this.args.data.theme?.ref || this.args.data.ref;
    }

    get isDefaultTheme() {
      return this.themeName.toLowerCase() === 'casper';
    }

    get isConfirming() {
      return !this.installSuccess && !this.installError && !this.installFailure;
    }

    get installSuccess() {
      return !!this.installedTheme;
    }

    get installFailure() {
      return !this.installSuccess && (this.validationErrors.length || this.fatalValidationErrors.length);
    }

    get willOverwriteExisting() {
      return !this.isDefaultTheme && this.themes.findBy('name', this.themeName.toLowerCase());
    }

    get hasWarningsOrErrors() {
      return this.validationWarnings.length > 0 || this.validationErrors.length > 0;
    }

    get shouldShowInstall() {
      return !this.installSuccess && !this.installFailure;
    }

    *refreshThemesTask() {
      yield this.store.findAll('theme', {
        reload: true
      });
    }

    *installThemeTask() {
      try {
        if (this.isDefaultTheme) {
          // default theme can't be installed, only activated
          const defaultTheme = this.store.peekRecord('theme', 'casper');
          yield this.themeManagement.activateTask.perform(defaultTheme, {
            skipErrors: true
          });
          this.installedTheme = defaultTheme; // let modal opener do any other background stuff

          this.args.data.onSuccess?.();
          return true;
        }

        const url = this.ghostPaths.url.api('themes/install') + `?source=github&ref=${this.themeRef}`;
        const result = yield this.ajax.post(url);
        this.installError = '';

        if (result.themes) {
          // show theme in list immediately
          this.store.pushPayload(result);
          this.installedTheme = this.store.peekRecord('theme', result.themes[0].name);
          this.validationWarnings = this.installedTheme.warnings || [];
          this.validationErrors = this.installedTheme.errors || [];
          this.fatalValidationErrors = []; // activate but prevent additional error modal from showing

          yield this.themeManagement.activateTask.perform(this.installedTheme, {
            skipErrors: true
          }); // let modal opener do any other background stuff

          this.args.data.onSuccess?.();
          return true;
        }
      } catch (error) {
        if ((0, _ajax.isThemeValidationError)(error)) {
          this.resetErrors();
          let errors = error.payload.errors[0].details.errors;
          let fatalErrors = [];
          let normalErrors = []; // to have a proper grouping of fatal errors and none fatal, we need to check
          // our errors for the fatal property

          if (errors && errors.length > 0) {
            for (let i = 0; i < errors.length; i += 1) {
              if (errors[i].fatal) {
                fatalErrors.push(errors[i]);
              } else {
                normalErrors.push(errors[i]);
              }
            }
          }

          this.fatalValidationErrors = fatalErrors;
          this.validationErrors = normalErrors;
          return false;
        }

        if (error.payload?.errors) {
          this.installError = error.payload.errors[0].message;
          return false;
        }

        this.installError = error.message;
        throw error;
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "themeManagement", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "installedTheme", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "installError", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "validationWarnings", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "validationErrors", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "fatalValidationErrors", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _applyDecoratedDescriptor(_class.prototype, "refreshThemesTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "refreshThemesTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "installThemeTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "installThemeTask"), _class.prototype)), _class));
  _exports.default = InstallThemeModalComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, InstallThemeModalComponent);
});
;define("ghost-admin/components/modals/design/theme-errors", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content">
      <div class="theme-validation-container" data-test-modal="theme-errors">
          <header class="modal-header">
              <h1 data-test-theme-warnings-title>
                  {{#unless @data.canActivate}}
                      {{@data.title}}
                  {{else}}
                      {{@data.title}} with {{#if @data.errors}}errors{{else}}warnings{{/if}}
                  {{/unless}}
              </h1>
          </header>
          <button type="button" class="close" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
          <div class="modal-body">
              {{#if @data.fatalErrors}}
                  <div>
                      <h2 class="mb0 mt4 f5 fw6 red">Fatal Errors</h2>
                      <p class="mb2 red">Must-fix to activate theme</p>
                  </div>
                  <ul class="pa0" data-test-theme-fatal-errors>
                      {{#each @data.fatalErrors as |error|}}
                          <li class="theme-validation-item theme-fatal-error">
                              <GhThemeErrorLi @error={{error}} />
                          </li>
                      {{/each}}
                  </ul>
              {{/if}}
  
              {{#if @data.errors}}
                  <div>
                      <h2 class="mb0 mt4 f5 fw6">Errors</h2>
                      <p class="mb2">Highly recommended to fix, functionality <span>could</span> be restricted</p>
                  </div>
  
                  <ul class="pa0" data-test-theme-errors>
                      {{#each @data.errors as |error|}}
                          <li class="theme-validation-item theme-error">
                              <GhThemeErrorLi @error={{error}} />
                          </li>
                      {{/each}}
                  </ul>
              {{/if}}
  
              {{#if (and @data.warnings (or @data.fatalErrors @data.errors))}}
                  <div>
                      <h2 class="mb0 mt4 f5 fw6">Warnings</h2>
                  </div>
              {{/if}}
              {{#if @data.warnings}}
                  <ul class="pa0" data-test-theme-warnings>
                      {{#each @data.warnings as |error|}}
                          <li class="theme-validation-item theme-warning">
                              <GhThemeErrorLi @error={{error}} />
                          </li>
                      {{/each}}
                  </ul>
              {{/if}}
          </div>
      </div>
  
      <div class="modal-footer">
          <button type="button" {{on "click" @close}} class="gh-btn" data-test-modal-close-button>
              <span>Ok</span>
          </button>
      </div>
  
  </div>
  */
  {
    "id": "KE9Lm2Sz",
    "block": "{\"symbols\":[\"error\",\"error\",\"error\",\"@data\",\"@close\"],\"statements\":[[10,\"div\"],[14,0,\"modal-content\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"theme-validation-container\"],[14,\"data-test-modal\",\"theme-errors\"],[12],[2,\"\\n        \"],[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n            \"],[10,\"h1\"],[14,\"data-test-theme-warnings-title\",\"\"],[12],[2,\"\\n\"],[6,[37,3],[[32,4,[\"canActivate\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[1,[32,4,[\"title\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[1,[32,4,[\"title\"]]],[2,\" with \"],[6,[37,2],[[32,4,[\"errors\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"errors\"]],\"parameters\":[]},{\"statements\":[[2,\"warnings\"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[24,4,\"button\"],[4,[38,4],[\"click\",[32,5]],null],[12],[1,[30,[36,5],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n\"],[6,[37,2],[[32,4,[\"fatalErrors\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h2\"],[14,0,\"mb0 mt4 f5 fw6 red\"],[12],[2,\"Fatal Errors\"],[13],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"mb2 red\"],[12],[2,\"Must-fix to activate theme\"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"ul\"],[14,0,\"pa0\"],[14,\"data-test-theme-fatal-errors\",\"\"],[12],[2,\"\\n\"],[6,[37,1],[[30,[36,0],[[30,[36,0],[[32,4,[\"fatalErrors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"li\"],[14,0,\"theme-validation-item theme-fatal-error\"],[12],[2,\"\\n                            \"],[8,\"gh-theme-error-li\",[],[[\"@error\"],[[32,3]]],null],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[3]}]]],[2,\"                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,4,[\"errors\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h2\"],[14,0,\"mb0 mt4 f5 fw6\"],[12],[2,\"Errors\"],[13],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"mb2\"],[12],[2,\"Highly recommended to fix, functionality \"],[10,\"span\"],[12],[2,\"could\"],[13],[2,\" be restricted\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\\n                \"],[10,\"ul\"],[14,0,\"pa0\"],[14,\"data-test-theme-errors\",\"\"],[12],[2,\"\\n\"],[6,[37,1],[[30,[36,0],[[30,[36,0],[[32,4,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"li\"],[14,0,\"theme-validation-item theme-error\"],[12],[2,\"\\n                            \"],[8,\"gh-theme-error-li\",[],[[\"@error\"],[[32,2]]],null],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,7],[[32,4,[\"warnings\"]],[30,[36,6],[[32,4,[\"fatalErrors\"]],[32,4,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h2\"],[14,0,\"mb0 mt4 f5 fw6\"],[12],[2,\"Warnings\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,2],[[32,4,[\"warnings\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"ul\"],[14,0,\"pa0\"],[14,\"data-test-theme-warnings\",\"\"],[12],[2,\"\\n\"],[6,[37,1],[[30,[36,0],[[30,[36,0],[[32,4,[\"warnings\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"li\"],[14,0,\"theme-validation-item theme-warning\"],[12],[2,\"\\n                            \"],[8,\"gh-theme-error-li\",[],[[\"@error\"],[[32,1]]],null],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-modal-close-button\",\"\"],[24,4,\"button\"],[4,[38,4],[\"click\",[32,5]],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Ok\"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"-track-array\",\"each\",\"if\",\"unless\",\"on\",\"svg-jar\",\"or\",\"and\"]}",
    "moduleName": "ghost-admin/components/modals/design/theme-errors.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/modals/design/upload-theme", ["exports", "@glimmer/component", "ghost-admin/services/ajax", "ember-concurrency-decorators"], function (_exports, _component, _ajax, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content" data-test-modal="upload-theme">
      <div class="theme-validation-container">
          <header class="modal-header">
              <h1>
                  {{#if this.theme}}
                      {{#if this.hasWarningsOrErrors}}
                          Upload successful with {{#if this.validationErrors}}errors{{else}}warnings{{/if}}
                      {{else}}
                          Upload successful!
                      {{/if}}
                  {{else if (or this.validationErrors this.fatalValidationErrors)}}
                      Invalid theme
                  {{else}}
                      Upload a theme
                  {{/if}}
              </h1>
          </header>
          <button type="button" class="close" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
          <div class="modal-body">
              {{#if this.theme}}
                  {{#if this.hasWarningsOrErrors}}
                      <p data-test-state="installed-with-notes">
                          The theme <strong>"{{this.themeName}}"</strong> was installed successfully but we detected some {{if this.validationErrors "errors" "warnings"}}.
                          {{#if this.canActivateTheme}}
                              You are still able to activate and use the theme but it is recommended to fix these {{if this.validationErrors "errors" "warnings"}} before you do so.
                          {{/if}}
                      </p>
  
                      {{#if this.validationErrors}}
                          <div>
                              <h2 class="mb0 mt4 f5 fw6">Errors</h2>
                              <p class="mb2">Highly recommended to fix, functionality <strong>could</strong> be restricted</p>
                          </div>
                          <ul class="pa0">
                          {{#each this.validationErrors as |error|}}
                              <li class="theme-validation-item theme-error">
                                  <GhThemeErrorLi @error={{error}} />
                              </li>
                          {{/each}}
                          </ul>
                      {{/if}}
  
                      {{#if this.validationWarnings}}
                          <div>
                              <h2 class="mb0 mt4 f5 fw6">Warnings</h2>
                          </div>
                          <ul class="pa0">
                          {{#each this.validationWarnings as |error|}}
                              <li class="theme-validation-item theme-warning">
                                  <GhThemeErrorLi @error={{error}} />
                              </li>
                          {{/each}}
                          </ul>
                      {{/if}}
                  {{else}}
                      <p data-test-state="installed-no-notes">
                          <strong>{{this.themeName}}</strong> uploaded successfully.
                          {{#if this.canActivateTheme}}Do you want to activate it now?{{/if}}
                      </p>
                  {{/if}}
              {{else if this.displayOverwriteWarning}}
                  <p data-test-state="overwrite">
                      The theme <strong>"{{this.fileThemeName}}"</strong> already exists. Do you want to overwrite it?
                  </p>
              {{else if (or this.validationErrors this.fatalValidationErrors)}}
  
                  <p data-test-state="invalid">
                      This theme is invalid and cannot be activated. Fix the following errors and re-upload the theme.
                  </p>
  
                  {{#if this.fatalValidationErrors}}
                      <div>
                          <h2 class="mb0 mt4 f5 fw6">Fatal Errors</h2>
                          <p class="mb2">Must-fix to activate theme</p>
                      </div>
  
                      <ul class="pa0">
                      {{#each this.fatalValidationErrors as |error|}}
                          <li class="theme-validation-item theme-fatal-error">
                              <GhThemeErrorLi @error={{error}} />
                          </li>
                      {{/each}}
                      </ul>
                  {{/if}}
  
                  {{#if this.validationErrors}}
                      <div>
                          <h2 class="mb0 mt4 f5 fw6">Errors</h2>
                          <p class="mb2">Highly recommended to fix, functionality <strong>could</strong> be restricted</p>
                      </div>
                      <ul class="pa0">
                      {{#each this.validationErrors as |error|}}
                          <li class="theme-validation-item theme-error">
                              <GhThemeErrorLi @error={{error}} />
                          </li>
                      {{/each}}
                      </ul>
                  {{/if}}
              {{else}}
                  <GhFileUploader
                      @url={{this.uploadUrl}}
                      @paramName="file"
                      @accept={{this.accept}}
                      @labelText="Click to select or drag-and-drop your theme zip file here."
                      @validate={{this.validateTheme}}
                      @uploadStarted={{fn (mut this.themeManagement.isUploading) true}}
                      @uploadFinished={{fn (mut this.themeManagement.isUploading) false}}
                      @uploadSuccess={{this.uploadSuccess}}
                      @uploadFailed={{this.uploadFailed}}
                      @listenTo="themeUploader" />
              {{/if}}
          </div>
      </div>
  
      <div class="modal-footer {{if (and this.theme this.hasWarningsOrErrors) "top-shadow"}}">
          <div class="flex items-center justify-between {{if (or this.displayOverwriteWarning this.canActivateTheme this.validationErrors this.fatalValidationErrors) "flex-auto"}}">
              <button type="button" {{on "click" @close}} disabled={{this.closeDisabled}} class="gh-btn" data-test-button="cancel">
                  <span>{{#if this.theme}}Close{{else}}Cancel{{/if}}</span>
              </button>
              <div class="flex items-center">
                  {{#if this.displayOverwriteWarning}}
                      <button type="button" {{on "click" this.confirmOverwrite}} class="gh-btn gh-btn-red" data-test-button="overwrite">
                          <span>Overwrite</span>
                      </button>
                  {{/if}}
                  {{#if this.canActivateTheme}}
                      <button type="button" {{on "click" this.activate}} class="gh-btn gh-btn-primary" data-test-button="activate">
                          <span>Activate{{#if this.validationErrors}} with errors{{/if}}</span>
                      </button>
                  {{/if}}
                  {{#if (or this.validationErrors this.fatalValidationErrors)}}
                      <button type="button" {{on "click" this.reset}} class="gh-btn gh-btn-black ml2" data-test-button="retry">
                          <span>Retry</span>
                      </button>
                  {{/if}}
              </div>
          </div>
      </div>
  </div>
  */
  {
    "id": "eO/08b7q",
    "block": "{\"symbols\":[\"error\",\"error\",\"error\",\"error\",\"@close\"],\"statements\":[[10,\"div\"],[14,0,\"modal-content\"],[14,\"data-test-modal\",\"upload-theme\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"theme-validation-container\"],[12],[2,\"\\n        \"],[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n            \"],[10,\"h1\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"theme\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,1],[[32,0,[\"hasWarningsOrErrors\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        Upload successful with \"],[6,[37,1],[[32,0,[\"validationErrors\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"errors\"]],\"parameters\":[]},{\"statements\":[[2,\"warnings\"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        Upload successful!\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[30,[36,6],[[32,0,[\"validationErrors\"]],[32,0,[\"fatalValidationErrors\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    Invalid theme\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    Upload a theme\\n                \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,5]],null],[12],[1,[30,[36,7],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"theme\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,1],[[32,0,[\"hasWarningsOrErrors\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"p\"],[14,\"data-test-state\",\"installed-with-notes\"],[12],[2,\"\\n                        The theme \"],[10,\"strong\"],[12],[2,\"\\\"\"],[1,[32,0,[\"themeName\"]]],[2,\"\\\"\"],[13],[2,\" was installed successfully but we detected some \"],[1,[30,[36,1],[[32,0,[\"validationErrors\"]],\"errors\",\"warnings\"],null]],[2,\".\\n\"],[6,[37,1],[[32,0,[\"canActivateTheme\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            You are still able to activate and use the theme but it is recommended to fix these \"],[1,[30,[36,1],[[32,0,[\"validationErrors\"]],\"errors\",\"warnings\"],null]],[2,\" before you do so.\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"validationErrors\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h2\"],[14,0,\"mb0 mt4 f5 fw6\"],[12],[2,\"Errors\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"mb2\"],[12],[2,\"Highly recommended to fix, functionality \"],[10,\"strong\"],[12],[2,\"could\"],[13],[2,\" be restricted\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"ul\"],[14,0,\"pa0\"],[12],[2,\"\\n\"],[6,[37,5],[[30,[36,4],[[30,[36,4],[[32,0,[\"validationErrors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"li\"],[14,0,\"theme-validation-item theme-error\"],[12],[2,\"\\n                                \"],[8,\"gh-theme-error-li\",[],[[\"@error\"],[[32,4]]],null],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[4]}]]],[2,\"                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[32,0,[\"validationWarnings\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h2\"],[14,0,\"mb0 mt4 f5 fw6\"],[12],[2,\"Warnings\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"ul\"],[14,0,\"pa0\"],[12],[2,\"\\n\"],[6,[37,5],[[30,[36,4],[[30,[36,4],[[32,0,[\"validationWarnings\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"li\"],[14,0,\"theme-validation-item theme-warning\"],[12],[2,\"\\n                                \"],[8,\"gh-theme-error-li\",[],[[\"@error\"],[[32,3]]],null],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[3]}]]],[2,\"                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[10,\"p\"],[14,\"data-test-state\",\"installed-no-notes\"],[12],[2,\"\\n                        \"],[10,\"strong\"],[12],[1,[32,0,[\"themeName\"]]],[13],[2,\" uploaded successfully.\\n                        \"],[6,[37,1],[[32,0,[\"canActivateTheme\"]]],null,[[\"default\"],[{\"statements\":[[2,\"Do you want to activate it now?\"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[32,0,[\"displayOverwriteWarning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"p\"],[14,\"data-test-state\",\"overwrite\"],[12],[2,\"\\n                    The theme \"],[10,\"strong\"],[12],[2,\"\\\"\"],[1,[32,0,[\"fileThemeName\"]]],[2,\"\\\"\"],[13],[2,\" already exists. Do you want to overwrite it?\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[30,[36,6],[[32,0,[\"validationErrors\"]],[32,0,[\"fatalValidationErrors\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"\\n                \"],[10,\"p\"],[14,\"data-test-state\",\"invalid\"],[12],[2,\"\\n                    This theme is invalid and cannot be activated. Fix the following errors and re-upload the theme.\\n                \"],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"fatalValidationErrors\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h2\"],[14,0,\"mb0 mt4 f5 fw6\"],[12],[2,\"Fatal Errors\"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"mb2\"],[12],[2,\"Must-fix to activate theme\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\\n                    \"],[10,\"ul\"],[14,0,\"pa0\"],[12],[2,\"\\n\"],[6,[37,5],[[30,[36,4],[[30,[36,4],[[32,0,[\"fatalValidationErrors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"li\"],[14,0,\"theme-validation-item theme-fatal-error\"],[12],[2,\"\\n                            \"],[8,\"gh-theme-error-li\",[],[[\"@error\"],[[32,2]]],null],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[32,0,[\"validationErrors\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h2\"],[14,0,\"mb0 mt4 f5 fw6\"],[12],[2,\"Errors\"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"mb2\"],[12],[2,\"Highly recommended to fix, functionality \"],[10,\"strong\"],[12],[2,\"could\"],[13],[2,\" be restricted\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"ul\"],[14,0,\"pa0\"],[12],[2,\"\\n\"],[6,[37,5],[[30,[36,4],[[30,[36,4],[[32,0,[\"validationErrors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"li\"],[14,0,\"theme-validation-item theme-error\"],[12],[2,\"\\n                            \"],[8,\"gh-theme-error-li\",[],[[\"@error\"],[[32,1]]],null],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[8,\"gh-file-uploader\",[],[[\"@url\",\"@paramName\",\"@accept\",\"@labelText\",\"@validate\",\"@uploadStarted\",\"@uploadFinished\",\"@uploadSuccess\",\"@uploadFailed\",\"@listenTo\"],[[32,0,[\"uploadUrl\"]],\"file\",[32,0,[\"accept\"]],\"Click to select or drag-and-drop your theme zip file here.\",[32,0,[\"validateTheme\"]],[30,[36,3],[[30,[36,2],[[32,0,[\"themeManagement\",\"isUploading\"]]],null],true],null],[30,[36,3],[[30,[36,2],[[32,0,[\"themeManagement\",\"isUploading\"]]],null],false],null],[32,0,[\"uploadSuccess\"]],[32,0,[\"uploadFailed\"]],\"themeUploader\"]],null],[2,\"\\n            \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[15,0,[31,[\"modal-footer \",[30,[36,1],[[30,[36,8],[[32,0,[\"theme\"]],[32,0,[\"hasWarningsOrErrors\"]]],null],\"top-shadow\"],null]]]],[12],[2,\"\\n        \"],[10,\"div\"],[15,0,[31,[\"flex items-center justify-between \",[30,[36,1],[[30,[36,6],[[32,0,[\"displayOverwriteWarning\"]],[32,0,[\"canActivateTheme\"]],[32,0,[\"validationErrors\"]],[32,0,[\"fatalValidationErrors\"]]],null],\"flex-auto\"],null]]]],[12],[2,\"\\n            \"],[11,\"button\"],[16,\"disabled\",[32,0,[\"closeDisabled\"]]],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,5]],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[6,[37,1],[[32,0,[\"theme\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"Close\"]],\"parameters\":[]},{\"statements\":[[2,\"Cancel\"]],\"parameters\":[]}]]],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"displayOverwriteWarning\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-red\"],[24,\"data-test-button\",\"overwrite\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"confirmOverwrite\"]]],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Overwrite\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,1],[[32,0,[\"canActivateTheme\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-primary\"],[24,\"data-test-button\",\"activate\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"activate\"]]],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Activate\"],[6,[37,1],[[32,0,[\"validationErrors\"]]],null,[[\"default\"],[{\"statements\":[[2,\" with errors\"]],\"parameters\":[]}]]],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,1],[[30,[36,6],[[32,0,[\"validationErrors\"]],[32,0,[\"fatalValidationErrors\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black ml2\"],[24,\"data-test-button\",\"retry\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"reset\"]]],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Retry\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\",\"if\",\"mut\",\"fn\",\"-track-array\",\"each\",\"or\",\"svg-jar\",\"and\"]}",
    "moduleName": "ghost-admin/components/modals/design/upload-theme.hbs"
  });

  let UploadThemeModalComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._tracked, _dec10 = Ember._tracked, _dec11 = Ember._action, _dec12 = Ember._action, _dec13 = Ember._action, _dec14 = Ember._action, _dec15 = Ember._action, _dec16 = Ember._action, (_class = class UploadThemeModalComponent extends _component.default {
    get themes() {
      return this.store.peekAll('theme');
    }

    get currentThemeNames() {
      return this.themes.map(theme => theme.name);
    }

    get themeName() {
      let themePackage = this.theme.package;
      let name = this.theme.name;
      return themePackage ? `${themePackage.name} - ${themePackage.version}` : name;
    }

    get fileThemeName() {
      return this.file?.name.replace(/\.zip$/, '');
    }

    get canActivateTheme() {
      return this.theme && !this.theme.active;
    }

    get uploadUrl() {
      return `${this.ghostPaths.apiRoot}/themes/upload/`;
    }

    get hasWarningsOrErrors() {
      return this.validationWarnings?.length || this.validationErrors?.length;
    }

    get closeDisabled() {
      return this.themeManagement.isUploading;
    }

    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "eventBus", _descriptor, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor2, this);

      _initializerDefineProperty(this, "store", _descriptor3, this);

      _initializerDefineProperty(this, "themeManagement", _descriptor4, this);

      _initializerDefineProperty(this, "displayOverwriteWarning", _descriptor5, this);

      _initializerDefineProperty(this, "file", _descriptor6, this);

      _initializerDefineProperty(this, "theme", _descriptor7, this);

      _initializerDefineProperty(this, "validationErrors", _descriptor8, this);

      _initializerDefineProperty(this, "validationWarnings", _descriptor9, this);

      _initializerDefineProperty(this, "fatalValidationErrors", _descriptor10, this);

      _defineProperty(this, "accept", ['application/zip', 'application/x-zip-compressed']);

      _defineProperty(this, "extensions", ['zip']);

      this.refreshThemesTask.perform();
    }

    *refreshThemesTask() {
      yield this.store.findAll('theme');
    }

    validateTheme(file) {
      const themeName = file.name.replace(/\.zip$/, '').replace(/[^\w@.]/gi, '-').toLowerCase();
      this.file = file;
      const [, extension] = /(?:\.([^.]+))?$/.exec(file.name);
      const extensions = this.extensions;

      if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
        return new _ajax.UnsupportedMediaTypeError();
      }

      if (file.name.match(/^casper\.zip$/i)) {
        return {
          payload: {
            errors: [{
              message: 'Sorry, the default Casper theme cannot be overwritten.<br>Please rename your zip file and try again.'
            }]
          }
        };
      }

      if (!this._allowOverwrite && this.currentThemeNames.includes(themeName)) {
        this.displayOverwriteWarning = true;
        return false;
      }

      return true;
    }

    confirmOverwrite() {
      this._allowOverwrite = true;
      this.displayOverwriteWarning = false; // we need to schedule afterRender so that the upload component is
      // displayed again in order to subscribe/respond to the event bus

      Ember.run.schedule('afterRender', this, function () {
        this.eventBus.publish('themeUploader:upload', this.file);
      });
    }

    uploadSuccess(response) {
      this.store.pushPayload(response);
      const theme = this.store.peekRecord('theme', response.themes[0].name);
      this.theme = theme;

      if (theme.warnings?.length > 0) {
        this.validationWarnings = theme.warnings;
      } // Ghost differentiates between errors and fatal errors
      // You can't activate a theme with fatal errors, but with errors.


      if (theme.errors?.length > 0) {
        this.validationErrors = theme.errors;
      }
    }

    uploadFailed(errorResponse) {
      if ((0, _ajax.isThemeValidationError)(errorResponse)) {
        const errors = errorResponse.payload.errors[0].details.errors;
        const fatalErrors = [];
        const normalErrors = []; // to have a proper grouping of fatal errors and none fatal, we need to check
        // our errors for the fatal property

        errors.forEach?.(error => {
          if (error.fatal) {
            fatalErrors.push(error);
          } else {
            normalErrors.push(error);
          }
        });
        this.fatalValidationErrors = fatalErrors;
        this.validationErrors = normalErrors;
      }
    }

    activate() {
      this.themeManagement.activateTask.perform(this.theme);
      this.args.data.onActivationSuccess?.();
      this.args.close();
    }

    reset() {
      this.theme = null;
      this.validationWarnings = [];
      this.validationErrors = [];
      this.fatalValidationErrors = [];
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "eventBus", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "themeManagement", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "displayOverwriteWarning", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "file", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "theme", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "validationErrors", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "validationWarnings", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "fatalValidationErrors", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "refreshThemesTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "refreshThemesTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "validateTheme", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "validateTheme"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "confirmOverwrite", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "confirmOverwrite"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "uploadSuccess", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, "uploadSuccess"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "uploadFailed", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "uploadFailed"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "activate", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, "activate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "reset", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, "reset"), _class.prototype)), _class));
  _exports.default = UploadThemeModalComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, UploadThemeModalComponent);
});
;define("ghost-admin/components/modals/design/view-theme", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <section class="gh-canvas gh-theme-preview flex flex-column h-100">
      <GhCanvasHeader class="gh-canvas-header">
          <h2 class="gh-canvas-title" data-test-screen-title>
              <LinkTo @route="settings.design.change-theme" data-test-link="back">Themes</LinkTo>
              <span>{{svg-jar "arrow-right"}}</span>
              {{@data.theme.name}}
          </h2>
  
          <section class="view-actions">
              <div class="gh-contentfilter gh-btn-group">
                  <button type="button" class="gh-btn gh-design-preview-mode {{if this.isDesktopPreview "gh-btn-group-selected"}}" {{on "click" (fn this.setPreviewSize "desktop")}}><span>{{svg-jar "desktop"}}</span></button>
                  <button type="button" class="gh-btn gh-design-preview-mode {{if this.isMobilePreview "gh-btn-group-selected"}}" {{on "click" (fn this.setPreviewSize "mobile")}}><span>{{svg-jar "mobile-phone"}}</span></button>
              </div>
  
              <button type="button" class="gh-btn gh-btn-primary" {{on "click" this.installTheme}} data-test-button="install-theme"><span>Use {{@data.theme.name}}</span></button>
          </section>
      </GhCanvasHeader>
  
      <section class="view-container">
          {{!-- changes only classes between desktop/mobile to avoid re-rendering iframe contents --}}
          <div class="{{if this.isMobilePreview "gh-pe-mobile-container flex justify-center" "gh-browserpreview-previewcontainer gh-theme-previewcontainer"}}">
              {{#if this.isDesktopPreview}}
                  <div class="gh-browserpreview-browser">
                      <div class="tabs">
                          <ul><li></li><li></li><li></li></ul>
                          <div>
                              {{#if this.settings.icon}}
                                  <span class="favicon"><img src={{this.settings.icon}} alt="icon"></span>
                              {{else}}
                                  <span class="favicon default">{{svg-jar "default-favicon"}}</span>
                              {{/if}}
                              <span class="site-title">{{this.settings.title}}</span>
                          </div>
                      </div>
                  </div>
              {{/if}}
              <div class="{{if this.isMobilePreview "gh-pe-mobile-bezel" "gh-browserpreview-iframecontainer"}}">
                  <div class="{{if this.isMobilePreview "gh-pe-mobile-screen"}}">
                      <iframe class={{if this.isMobilePreview "gh-post-preview-iframe" "site-frame"}} src={{@data.theme.previewUrl}} />
                  </div>
              </div>
          </div>
      </section>
  </section>
  */
  {
    "id": "F3rXmOj3",
    "block": "{\"symbols\":[\"@data\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas gh-theme-preview flex flex-column h-100\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[[24,\"data-test-link\",\"back\"]],[[\"@route\"],[\"settings.design.change-theme\"]],[[\"default\"],[{\"statements\":[[2,\"Themes\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            \"],[1,[32,1,[\"theme\",\"name\"]]],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-contentfilter gh-btn-group\"],[12],[2,\"\\n                \"],[11,\"button\"],[16,0,[31,[\"gh-btn gh-design-preview-mode \",[30,[36,1],[[32,0,[\"isDesktopPreview\"]],\"gh-btn-group-selected\"],null]]]],[24,4,\"button\"],[4,[38,3],[\"click\",[30,[36,2],[[32,0,[\"setPreviewSize\"]],\"desktop\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,0],[\"desktop\"],null]],[13],[13],[2,\"\\n                \"],[11,\"button\"],[16,0,[31,[\"gh-btn gh-design-preview-mode \",[30,[36,1],[[32,0,[\"isMobilePreview\"]],\"gh-btn-group-selected\"],null]]]],[24,4,\"button\"],[4,[38,3],[\"click\",[30,[36,2],[[32,0,[\"setPreviewSize\"]],\"mobile\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,0],[\"mobile-phone\"],null]],[13],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-primary\"],[24,\"data-test-button\",\"install-theme\"],[24,4,\"button\"],[4,[38,3],[\"click\",[32,0,[\"installTheme\"]]],null],[12],[10,\"span\"],[12],[2,\"Use \"],[1,[32,1,[\"theme\",\"name\"]]],[13],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n\"],[2,\"        \"],[10,\"div\"],[15,0,[31,[[30,[36,1],[[32,0,[\"isMobilePreview\"]],\"gh-pe-mobile-container flex justify-center\",\"gh-browserpreview-previewcontainer gh-theme-previewcontainer\"],null]]]],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"isDesktopPreview\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-browserpreview-browser\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"tabs\"],[12],[2,\"\\n                        \"],[10,\"ul\"],[12],[10,\"li\"],[12],[13],[10,\"li\"],[12],[13],[10,\"li\"],[12],[13],[13],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"settings\",\"icon\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"favicon\"],[12],[10,\"img\"],[15,\"src\",[32,0,[\"settings\",\"icon\"]]],[14,\"alt\",\"icon\"],[12],[13],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"favicon default\"],[12],[1,[30,[36,0],[\"default-favicon\"],null]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[10,\"span\"],[14,0,\"site-title\"],[12],[1,[32,0,[\"settings\",\"title\"]]],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[10,\"div\"],[15,0,[31,[[30,[36,1],[[32,0,[\"isMobilePreview\"]],\"gh-pe-mobile-bezel\",\"gh-browserpreview-iframecontainer\"],null]]]],[12],[2,\"\\n                \"],[10,\"div\"],[15,0,[31,[[30,[36,1],[[32,0,[\"isMobilePreview\"]],\"gh-pe-mobile-screen\"],null]]]],[12],[2,\"\\n                    \"],[10,\"iframe\"],[15,0,[30,[36,1],[[32,0,[\"isMobilePreview\"]],\"gh-post-preview-iframe\",\"site-frame\"],null]],[15,\"src\",[32,1,[\"theme\",\"previewUrl\"]]],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"fn\",\"on\"]}",
    "moduleName": "ghost-admin/components/modals/design/view-theme.hbs"
  });

  let ViewThemeModalComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._tracked, _dec4 = Ember._action, _dec5 = Ember._action, (_class = class ViewThemeModalComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "modals", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);

      _initializerDefineProperty(this, "previewSize", _descriptor3, this);
    }

    get isDesktopPreview() {
      return this.previewSize === 'desktop';
    }

    get isMobilePreview() {
      return this.previewSize === 'mobile';
    }

    willDestroy() {
      super.willDestroy(...arguments); // leave install modal visiible if it's in the success state because
      // we're switching over to the design customisation screen in the bg
      // and don't want to auto-close when this modal closes

      if (this.installModal && !this.showingSuccessModal) {
        this.installModal.close();
      }
    }

    installTheme() {
      this.installModal = this.modals.open('modals/design/install-theme', {
        theme: this.args.data.theme,
        onSuccess: () => {
          this.showingSuccessModal = true;
          this.router.transitionTo('settings.design');
        }
      });
    }

    setPreviewSize(size) {
      this.previewSize = size;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modals", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "previewSize", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'desktop';
    }
  }), _applyDecoratedDescriptor(_class.prototype, "installTheme", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "installTheme"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setPreviewSize", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "setPreviewSize"), _class.prototype)), _class));
  _exports.default = ViewThemeModalComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ViewThemeModalComponent);
});
;define("ghost-admin/components/modals/editor/confirm-leave", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content">
      <header class="modal-header">
          <h1>Are you sure you want to leave this page?</h1>
      </header>
      <button class="close" title="Close" type="button" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
      <div class="modal-body">
          <p>
              Hey there! It looks like you're in the middle of writing something and
              you haven't saved all of your content.
          </p>
  
          <p>Save before you go!</p>
      </div>
  
      <div class="modal-footer">
          <button class="gh-btn" {{on "click" @close}}><span>Stay</span></button>
          <button class="gh-btn gh-btn-red" {{on "click" (fn @close true)}}><span>Leave</span></button>
      </div>
  
  </div>
  */
  {
    "id": "YatpUozM",
    "block": "{\"symbols\":[\"@close\"],\"statements\":[[10,\"div\"],[14,0,\"modal-content\"],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[2,\"Are you sure you want to leave this page?\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,1]],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            Hey there! It looks like you're in the middle of writing something and\\n            you haven't saved all of your content.\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"p\"],[12],[2,\"Save before you go!\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn\"],[4,[38,0],[\"click\",[32,1]],null],[12],[10,\"span\"],[12],[2,\"Stay\"],[13],[13],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-red\"],[4,[38,0],[\"click\",[30,[36,2],[[32,1],true],null]],null],[12],[10,\"span\"],[12],[2,\"Leave\"],[13],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\",\"svg-jar\",\"fn\"]}",
    "moduleName": "ghost-admin/components/modals/editor/confirm-leave.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/modals/editor/confirm-publish", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content" data-test-modal="editor/confirm-publish">
      {{#unless this.errorMessage}}
          <header class="modal-header" data-test-state="confirm-publish">
              <h1>Ready to go? Here’s what happens next</h1>
          </header>
          <button class="close" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
          <div class="modal-body" {{did-insert this.countRecipientsTask.perform}}>
              {{#if (eq @data.post.displayName 'page')}}
                  <p>
                      Your page will be published {{if @data.isScheduled "at the scheduled time" "immediately"}}. Sound good?
                  </p>
              {{else if this.isPublishOnly}}
                  <p>
                      Your post will be published {{if @data.isScheduled "at the scheduled time" "immediately"}}
                      and won't be sent as an email. Sound good?
                  </p>
              {{else}}
                  {{#if this.countRecipientsTask.isRunning}}
                      <div class="flex flex-column items-center">
                          <div class="gh-loading-spinner"></div>
                      </div>
                  {{else}}
                      {{#if this.isEmailOnlyWithNoMembers}}
                          <p>
                              You're trying to {{if @data.isScheduled "schedule" "send"}} a post
                              as an email newsletter with <strong>0 members</strong> selected.
                              Choose a segment of your audience and try again!
                          </p>
                      {{else if (eq this.memberCount 0)}}
                          <p>
                              Your post will be published {{if @data.isScheduled "at the scheduled time" "immediately"}}
                              and won't be sent as an email. Sound good?
                          </p>
                      {{else}}
                          <p>
                              Your post will be delivered to <strong>{{this.memberCountString}}</strong>
                              {{#if @data.emailOnly}}
                                  but it will <strong>not</strong>
                              {{else}}
                                  and will
                              {{/if}}
                              be published on your site{{#if @data.isScheduled}} at the scheduled time{{/if}}. Sound good?
                          </p>
                      {{/if}}
                  {{/if}}
              {{/if}}
          </div>
  
          <div class="modal-footer">
              {{#if this.isEmailOnlyWithNoMembers}}
                  <button type="button" class="gh-btn" {{on "click" @close}} data-test-button="cancel-email-with-no-members">
                      <span>Close</span>
                  </button>
              {{else}}
                  <button {{on "click" @close}} class="gh-btn" data-test-button="cancel-publish-and-email">
                      <span>Cancel</span>
                  </button>
                  {{#if @data.isScheduled}}
                      <GhTaskButton
                          @disabled={{this.countRecipientsTask.isRunning}}
                          @buttonText="Schedule"
                          @runningText="Scheduling..."
                          @task={{this.confirmAndCheckErrorTask}}
                          @class="gh-btn gh-btn-black gh-btn-icon"
                          data-test-button="confirm-schedule"
                      />
                  {{else}}
                      <GhTaskButton
                          @disabled={{this.countRecipientsTask.isRunning}}
                          @buttonText={{this.publishAndSendButtonText}}
                          @runningText={{if @data.emailOnly "Sending..." "Publishing..."}}
                          @task={{this.confirmAndCheckErrorTask}}
                          @class="gh-btn gh-btn-black gh-btn-icon"
                          data-test-button="confirm-publish"
                      />
                  {{/if}}
              {{/if}}
          </div>
  
      {{else}}
          <header class="modal-header" data-test-state="failed-send">
              <h1>Failed to send email</h1>
          </header>
          <button class="close" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
          <div class="modal-body">
              <p>Your post has been published but the email failed to send. Please verify your email settings if the error persists.</p>
              <p class="mb0">
                  <button type="button" class="gh-btn gh-btn-text regular" {{on "click" this.toggleErrorDetails}} data-test-toggle-error>
                      {{#if this.errorDetailsOpen}}
                          {{svg-jar "arrow-down" class="nudge-top--2 w2 h2 fill-darkgrey mr1"}}
                      {{else}}
                          {{svg-jar "arrow-right" class="nudge-top--1 w2 h2 fill-darkgrey mr1"}}
                      {{/if}}
                      <span>Error details</span>
                  </button>
              </p>
  
              {{#liquid-if this.errorDetailsOpen}}
                  <p class="error gh-box gh-box-error mt3 mb3">
                      {{svg-jar "warning"}}
                      {{this.errorMessage}}
                  </p>
              {{/liquid-if}}
          </div>
  
          <div class="modal-footer">
              <button {{on "click" @close}} class="gh-btn" data-test-button="cancel-publish-and-email">
                  <span>Close</span>
              </button>
              <GhTaskButton
                  @buttonText="Retry email"
                  @runningText="Sending..."
                  @task={{this.retryEmailTask}}
                  @class="gh-btn gh-btn-red gh-btn-icon"
                  data-test-button="retry-email"
              />
          </div>
      {{/unless}}
  </div>
  */
  {
    "id": "MqBA7kgo",
    "block": "{\"symbols\":[\"@close\",\"@data\"],\"statements\":[[10,\"div\"],[14,0,\"modal-content\"],[14,\"data-test-modal\",\"editor/confirm-publish\"],[12],[2,\"\\n\"],[6,[37,6],[[32,0,[\"errorMessage\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-state\",\"confirm-publish\"],[12],[2,\"\\n            \"],[10,\"h1\"],[12],[2,\"Ready to go? Here’s what happens next\"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[4,[38,1],[\"click\",[32,1]],null],[12],[1,[30,[36,0],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n        \"],[11,\"div\"],[24,0,\"modal-body\"],[4,[38,5],[[32,0,[\"countRecipientsTask\",\"perform\"]]],null],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,4],[[32,2,[\"post\",\"displayName\"]],\"page\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"p\"],[12],[2,\"\\n                    Your page will be published \"],[1,[30,[36,2],[[32,2,[\"isScheduled\"]],\"at the scheduled time\",\"immediately\"],null]],[2,\". Sound good?\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[32,0,[\"isPublishOnly\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"p\"],[12],[2,\"\\n                    Your post will be published \"],[1,[30,[36,2],[[32,2,[\"isScheduled\"]],\"at the scheduled time\",\"immediately\"],null]],[2,\"\\n                    and won't be sent as an email. Sound good?\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[32,0,[\"countRecipientsTask\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"flex flex-column items-center\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-loading-spinner\"],[12],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[32,0,[\"isEmailOnlyWithNoMembers\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"p\"],[12],[2,\"\\n                            You're trying to \"],[1,[30,[36,2],[[32,2,[\"isScheduled\"]],\"schedule\",\"send\"],null]],[2,\" a post\\n                            as an email newsletter with \"],[10,\"strong\"],[12],[2,\"0 members\"],[13],[2,\" selected.\\n                            Choose a segment of your audience and try again!\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[30,[36,4],[[32,0,[\"memberCount\"]],0],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"p\"],[12],[2,\"\\n                            Your post will be published \"],[1,[30,[36,2],[[32,2,[\"isScheduled\"]],\"at the scheduled time\",\"immediately\"],null]],[2,\"\\n                            and won't be sent as an email. Sound good?\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"p\"],[12],[2,\"\\n                            Your post will be delivered to \"],[10,\"strong\"],[12],[1,[32,0,[\"memberCountString\"]]],[13],[2,\"\\n\"],[6,[37,2],[[32,2,[\"emailOnly\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                but it will \"],[10,\"strong\"],[12],[2,\"not\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                and will\\n\"]],\"parameters\":[]}]]],[2,\"                            be published on your site\"],[6,[37,2],[[32,2,[\"isScheduled\"]]],null,[[\"default\"],[{\"statements\":[[2,\" at the scheduled time\"]],\"parameters\":[]}]]],[2,\". Sound good?\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"            \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"isEmailOnlyWithNoMembers\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-email-with-no-members\"],[24,4,\"button\"],[4,[38,1],[\"click\",[32,1]],null],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Close\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-publish-and-email\"],[4,[38,1],[\"click\",[32,1]],null],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"],[6,[37,2],[[32,2,[\"isScheduled\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"confirm-schedule\"]],[[\"@disabled\",\"@buttonText\",\"@runningText\",\"@task\",\"@class\"],[[32,0,[\"countRecipientsTask\",\"isRunning\"]],\"Schedule\",\"Scheduling...\",[32,0,[\"confirmAndCheckErrorTask\"]],\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"confirm-publish\"]],[[\"@disabled\",\"@buttonText\",\"@runningText\",\"@task\",\"@class\"],[[32,0,[\"countRecipientsTask\",\"isRunning\"]],[32,0,[\"publishAndSendButtonText\"]],[30,[36,2],[[32,2,[\"emailOnly\"]],\"Sending...\",\"Publishing...\"],null],[32,0,[\"confirmAndCheckErrorTask\"]],\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-state\",\"failed-send\"],[12],[2,\"\\n            \"],[10,\"h1\"],[12],[2,\"Failed to send email\"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[4,[38,1],[\"click\",[32,1]],null],[12],[1,[30,[36,0],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n            \"],[10,\"p\"],[12],[2,\"Your post has been published but the email failed to send. Please verify your email settings if the error persists.\"],[13],[2,\"\\n            \"],[10,\"p\"],[14,0,\"mb0\"],[12],[2,\"\\n                \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-text regular\"],[24,\"data-test-toggle-error\",\"\"],[24,4,\"button\"],[4,[38,1],[\"click\",[32,0,[\"toggleErrorDetails\"]]],null],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"errorDetailsOpen\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[1,[30,[36,0],[\"arrow-down\"],[[\"class\"],[\"nudge-top--2 w2 h2 fill-darkgrey mr1\"]]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[1,[30,[36,0],[\"arrow-right\"],[[\"class\"],[\"nudge-top--1 w2 h2 fill-darkgrey mr1\"]]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[10,\"span\"],[12],[2,\"Error details\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"errorDetailsOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"p\"],[14,0,\"error gh-box gh-box-error mt3 mb3\"],[12],[2,\"\\n                    \"],[1,[30,[36,0],[\"warning\"],null]],[2,\"\\n                    \"],[1,[32,0,[\"errorMessage\"]]],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-publish-and-email\"],[4,[38,1],[\"click\",[32,1]],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Close\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"retry-email\"]],[[\"@buttonText\",\"@runningText\",\"@task\",\"@class\"],[\"Retry email\",\"Sending...\",[32,0,[\"retryEmailTask\"]],\"gh-btn gh-btn-red gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"on\",\"if\",\"liquid-if\",\"eq\",\"did-insert\",\"unless\"]}",
    "moduleName": "ghost-admin/components/modals/editor/confirm-publish.hbs"
  });

  let ModalsEditorConfirmPublishComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._action, _dec9 = Ember._action, (_class = class ModalsEditorConfirmPublishComponent extends _component.default {
    get isEmailOnlyWithNoMembers() {
      return this.isEmailOnly && this.memberCount === 0;
    }

    get publishAndSendButtonText() {
      if (this.isEmailOnly) {
        return 'Send';
      }

      if (this.isPublishOnly || this.memberCount === 0) {
        return 'Publish';
      }

      return 'Publish and Send';
    }

    constructor() {
      super(...arguments); // set static up-front so it doesn't change when post is saved and email is created

      _initializerDefineProperty(this, "membersCountCache", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "store", _descriptor3, this);

      _initializerDefineProperty(this, "errorMessage", _descriptor4, this);

      _initializerDefineProperty(this, "errorDetailsOpen", _descriptor5, this);

      _initializerDefineProperty(this, "memberCount", _descriptor6, this);

      _initializerDefineProperty(this, "memberCountString", _descriptor7, this);

      this.isPublishOnly = this.args.data.sendEmailWhenPublished === 'none' || this.args.data.post.displayName === 'page' || this.args.data.post.email;
      this.isEmailOnly = this.args.data.emailOnly;
    }

    confirm() {
      if (this.errorMessage) {
        return this.retryEmailTask.perform();
      } else {
        if (!this.countRecipientsTask.isRunning) {
          return this.confirmAndCheckErrorTask.perform();
        }
      }
    }

    toggleErrorDetails() {
      this.errorDetailsOpen = !this.errorDetailsOpen;
    }

    *countRecipientsTask() {
      const {
        sendEmailWhenPublished
      } = this.args.data;
      const filter = `subscribed:true+(${sendEmailWhenPublished})`;
      this.memberCount = sendEmailWhenPublished ? yield this.membersCountCache.count(filter) : 0;
      this.memberCountString = sendEmailWhenPublished ? yield this.membersCountCache.countString(filter) : '0 members';
    }

    *confirmAndCheckErrorTask() {
      try {
        yield this.args.data.confirm();
        this.args.close();
        return true;
      } catch (e) {
        // switch to "failed" state if email fails
        if (e && e.name === 'EmailFailedError') {
          this.errorMessage = e.message;
          return false;
        } // close modal and continue with normal error handling if it was
        // a non-email-related error


        this.args.close();

        if (e) {
          throw e;
        }
      }
    }

    *retryEmailTask() {
      try {
        yield this.args.data.retryEmailSend();
        this.args.close();
        return true;
      } catch (e) {
        // update "failed" state if email fails again
        if (e && e.name === 'EmailFailedError') {
          this.errorMessage = e.message;
          return;
        } // TODO: test a non-email failure - maybe this needs to go through
        // the notifications service


        if (e) {
          throw e;
        }
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "membersCountCache", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "errorMessage", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "errorDetailsOpen", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "memberCount", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "memberCountString", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "confirm", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "confirm"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleErrorDetails", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "toggleErrorDetails"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "countRecipientsTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "countRecipientsTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "confirmAndCheckErrorTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "confirmAndCheckErrorTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "retryEmailTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "retryEmailTask"), _class.prototype)), _class));
  _exports.default = ModalsEditorConfirmPublishComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalsEditorConfirmPublishComponent);
});
;define("ghost-admin/components/modals/email-preview", ["exports", "@glimmer/component", "ember-concurrency"], function (_exports, _component, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content">
      <header class="modal-header gh-pe-header gh-pe-header-border" data-test-modal="preview-email" style="display:flex">
          <h2 class="f6 fw6">{{this.subject}}</h2>
          <div>
              <div class="gh-contentfilter gh-btn-group gh-pe-btn-group" style="display:flex;flex-grow:1;justify-content:center">
                  <button class="gh-btn {{if (eq this.tab "desktop") "gh-btn-group-selected"}}" {{on "click" (fn this.changeTab "desktop")}}><span>Desktop</span></button>
                  <button class="gh-btn {{if (eq this.tab "mobile") "gh-btn-group-selected"}}" {{on "click" (fn this.changeTab "mobile")}}><span>Mobile</span></button>
              </div>
          </div>
          <div class="gh-pe-close">
              <button class="close" href title="Close" {{on "click" @close}}>
                  {{svg-jar "close"}}
              </button>
          </div>
      </header>
  
      {{#if (eq this.tab "mobile")}}
          <div class="modal-body modal-preview-email-content gh-pe-mobile-container">
              <div class="gh-pe-mobile-bezel">
                  <div class="gh-pe-mobile-screen">
                      <div class="gh-pe-emailclient-sender">
                          <p>
                              <span class="strong">{{this.config.blogTitle}}</span> &lt;{{this.settings.membersFromAddress}}&gt;
                          </p>
                          <p><span class="dark">To:</span> Jamie Larson &lt;jamie@example.com&gt;</p>
                      </div>
                      <iframe class="bn gh-pe-iframe" {{did-insert this.renderEmailPreview}} sandbox="allow-same-origin"></iframe>
                  </div>
              </div>
          </div>
      {{/if}}
  
      {{#if (eq this.tab "desktop")}}
          <div class="modal-body modal-preview-email-content gh-pe-desktop-container">
              <div class="gh-pe-emailclient-mockup">
                  <div class="gh-pe-emailclient-sender">
                      <p>
                          <span class="strong">{{this.config.blogTitle}}</span> &lt;{{this.settings.membersFromAddress}}&gt;
                      </p>
                      <p><span class="dark">To:</span> Jamie Larson &lt;jamie@example.com&gt;</p>
                  </div>
                  <iframe class="gh-pe-iframe" {{did-insert this.renderEmailPreview}} sandbox="allow-same-origin"></iframe>
              </div>
          </div>
      {{/if}}
  </div>
  */
  {
    "id": "nUzQduSo",
    "block": "{\"symbols\":[\"@close\"],\"statements\":[[10,\"div\"],[14,0,\"modal-content\"],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header gh-pe-header gh-pe-header-border\"],[14,\"data-test-modal\",\"preview-email\"],[14,5,\"display:flex\"],[12],[2,\"\\n        \"],[10,\"h2\"],[14,0,\"f6 fw6\"],[12],[1,[32,0,[\"subject\"]]],[13],[2,\"\\n        \"],[10,\"div\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-contentfilter gh-btn-group gh-pe-btn-group\"],[14,5,\"display:flex;flex-grow:1;justify-content:center\"],[12],[2,\"\\n                \"],[11,\"button\"],[16,0,[31,[\"gh-btn \",[30,[36,2],[[30,[36,1],[[32,0,[\"tab\"]],\"desktop\"],null],\"gh-btn-group-selected\"],null]]]],[4,[38,4],[\"click\",[30,[36,3],[[32,0,[\"changeTab\"]],\"desktop\"],null]],null],[12],[10,\"span\"],[12],[2,\"Desktop\"],[13],[13],[2,\"\\n                \"],[11,\"button\"],[16,0,[31,[\"gh-btn \",[30,[36,2],[[30,[36,1],[[32,0,[\"tab\"]],\"mobile\"],null],\"gh-btn-group-selected\"],null]]]],[4,[38,4],[\"click\",[30,[36,3],[[32,0,[\"changeTab\"]],\"mobile\"],null]],null],[12],[10,\"span\"],[12],[2,\"Mobile\"],[13],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-pe-close\"],[12],[2,\"\\n            \"],[11,\"button\"],[24,0,\"close\"],[24,6,\"\"],[24,\"title\",\"Close\"],[4,[38,4],[\"click\",[32,1]],null],[12],[2,\"\\n                \"],[1,[30,[36,5],[\"close\"],null]],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,2],[[30,[36,1],[[32,0,[\"tab\"]],\"mobile\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"modal-body modal-preview-email-content gh-pe-mobile-container\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-pe-mobile-bezel\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-pe-mobile-screen\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-pe-emailclient-sender\"],[12],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"strong\"],[12],[1,[32,0,[\"config\",\"blogTitle\"]]],[13],[2,\" <\"],[1,[32,0,[\"settings\",\"membersFromAddress\"]]],[2,\">\\n                        \"],[13],[2,\"\\n                        \"],[10,\"p\"],[12],[10,\"span\"],[14,0,\"dark\"],[12],[2,\"To:\"],[13],[2,\" Jamie Larson <jamie@example.com>\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"iframe\"],[24,0,\"bn gh-pe-iframe\"],[24,\"sandbox\",\"allow-same-origin\"],[4,[38,0],[[32,0,[\"renderEmailPreview\"]]],null],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,1],[[32,0,[\"tab\"]],\"desktop\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"modal-body modal-preview-email-content gh-pe-desktop-container\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-pe-emailclient-mockup\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-pe-emailclient-sender\"],[12],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"strong\"],[12],[1,[32,0,[\"config\",\"blogTitle\"]]],[13],[2,\" <\"],[1,[32,0,[\"settings\",\"membersFromAddress\"]]],[2,\">\\n                    \"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[10,\"span\"],[14,0,\"dark\"],[12],[2,\"To:\"],[13],[2,\" Jamie Larson <jamie@example.com>\"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[11,\"iframe\"],[24,0,\"gh-pe-iframe\"],[24,\"sandbox\",\"allow-same-origin\"],[4,[38,0],[[32,0,[\"renderEmailPreview\"]]],null],[12],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13]],\"hasEval\":false,\"upvars\":[\"did-insert\",\"eq\",\"if\",\"fn\",\"on\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modals/email-preview.hbs"
  });

  const INJECTED_CSS = `
html::-webkit-scrollbar {
    display: none;
    width: 0;
    background: transparent
}
html {
    scrollbar-width: none;
}
`;
  let EmailPreviewModal = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._action, _dec8 = Ember._action, (_class = class EmailPreviewModal extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ajax", _descriptor, this);

      _initializerDefineProperty(this, "config", _descriptor2, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor3, this);

      _initializerDefineProperty(this, "settings", _descriptor4, this);

      _initializerDefineProperty(this, "tab", _descriptor5, this);

      _initializerDefineProperty(this, "subject", _descriptor6, this);

      _defineProperty(this, "html", null);
    }

    changeTab(tab) {
      this.tab = tab;
    }

    async renderEmailPreview(iframe) {
      await this._fetchEmailData(); // avoid timing issues when _fetchEmailData didn't perform any async ops

      await (0, _emberConcurrency.timeout)(100);

      if (iframe) {
        iframe.contentWindow.document.open();
        iframe.contentWindow.document.write(this.html);
        iframe.contentWindow.document.close();
      }
    }

    async _fetchEmailData() {
      let {
        html,
        subject
      } = this;

      if (html && subject) {
        return;
      } // data is an email object


      if (this.args.data.html && this.args.data.subject) {
        html = this.args.data.html;
        subject = this.args.data.subject; // data is an object with an email property
      } else if (this.args.data.email) {
        html = this.args.data.email.html;
        subject = this.args.data.email.subject; // data is a post? try fetching email preview
      } else {
        let url = this.ghostPaths.url.api('/email_preview/posts', this.args.data.id);
        let response = await this.ajax.request(url);
        let [emailPreview] = response.email_previews;
        html = emailPreview.html;
        subject = emailPreview.subject;
      } // inject extra CSS into the html for disabling links and scrollbars etc


      let domParser = new DOMParser();
      let htmlDoc = domParser.parseFromString(html, 'text/html');
      let stylesheet = htmlDoc.querySelector('style');
      let originalCss = stylesheet.innerHTML;
      stylesheet.innerHTML = `${originalCss}\n\n${INJECTED_CSS}`;
      const doctype = new XMLSerializer().serializeToString(htmlDoc.doctype);
      html = doctype + htmlDoc.documentElement.outerHTML;
      this.html = html;
      this.subject = subject;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "tab", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'desktop';
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "subject", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "changeTab", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "changeTab"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "renderEmailPreview", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "renderEmailPreview"), _class.prototype)), _class));
  _exports.default = EmailPreviewModal;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, EmailPreviewModal);
});
;define("ghost-admin/components/modals/limits/custom-integration", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content" data-test-modal="limits/custom-integration">
      <header class="modal-header">
          <h1>Upgrade to enable custom integrations</h1>
      </header>
      <button class="close" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
      <div class="modal-body">
          <p>
              {{html-safe @data.message}}
          </p>
      </div>
  
      <div class="modal-footer">
          <button {{on "click" @close}} class="gh-btn" data-test-button="cancel-upgrade">
              <span>Cancel</span>
          </button>
  
          <LinkTo @route="pro" class="gh-btn gh-btn-green" {{on "click" @close}} data-test-button="upgrade-plan">
              <span>Upgrade my plan</span>
          </LinkTo>
      </div>
  </div>
  */
  {
    "id": "OjQpu8IP",
    "block": "{\"symbols\":[\"@close\",\"@data\"],\"statements\":[[10,\"div\"],[14,0,\"modal-content\"],[14,\"data-test-modal\",\"limits/custom-integration\"],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[2,\"Upgrade to enable custom integrations\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[4,[38,0],[\"click\",[32,1]],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            \"],[1,[30,[36,2],[[32,2,[\"message\"]]],null]],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-upgrade\"],[4,[38,0],[\"click\",[32,1]],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-green\"],[24,\"data-test-button\",\"upgrade-plan\"],[4,[38,0],[\"click\",[32,1]],null]],[[\"@route\"],[\"pro\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Upgrade my plan\"],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\",\"svg-jar\",\"html-safe\"]}",
    "moduleName": "ghost-admin/components/modals/limits/custom-integration.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/modals/limits/custom-theme", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    
  <div class="modal-content" data-test-modal="limits/custom-theme">
      <header class="modal-header">
          <h1>Upgrade to enable custom themes</h1>
      </header>
      <button class="close" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
      <div class="modal-body">
          <p>
              {{#if @data.message}}
                  {{html-safe @data.message}}
              {{else}}
                  Your current plan only supports official themes. You can install them from the <a href="https://ghost.org/marketplace/">Ghost theme marketplace</a>.
              {{/if}}
          </p>
      </div>
  
      <div class="modal-footer">
          <button {{on "click" @close}} class="gh-btn" data-test-button="cancel-upgrade">
              <span>Cancel</span>
          </button>
  
          <LinkTo @route="pro" class="gh-btn gh-btn-green" {{on "click" @close}} data-test-button="upgrade-plan">
              <span>Upgrade</span>
          </LinkTo>
      </div>
  </div>
  */
  {
    "id": "nFaJf1P7",
    "block": "{\"symbols\":[\"@data\",\"@close\"],\"statements\":[[2,\"\\n\"],[10,\"div\"],[14,0,\"modal-content\"],[14,\"data-test-modal\",\"limits/custom-theme\"],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[2,\"Upgrade to enable custom themes\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[4,[38,1],[\"click\",[32,2]],null],[12],[1,[30,[36,2],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n\"],[6,[37,3],[[32,1,[\"message\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[1,[30,[36,0],[[32,1,[\"message\"]]],null]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                Your current plan only supports official themes. You can install them from the \"],[10,\"a\"],[14,6,\"https://ghost.org/marketplace/\"],[12],[2,\"Ghost theme marketplace\"],[13],[2,\".\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-upgrade\"],[4,[38,1],[\"click\",[32,2]],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-green\"],[24,\"data-test-button\",\"upgrade-plan\"],[4,[38,1],[\"click\",[32,2]],null]],[[\"@route\"],[\"pro\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Upgrade\"],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"html-safe\",\"on\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/components/modals/limits/custom-theme.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/modals/new-custom-integration", ["exports", "@glimmer/component", "ghost-admin/services/ajax", "ember-ajax/errors", "ember-concurrency-decorators"], function (_exports, _component, _ajax, _errors, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content">
      <header class="modal-header" data-test-modal="new-integration">
          <h1>New custom integration</h1>
      </header>
      {{!-- disable mouseDown so it doesn't trigger focus-out validations --}}
      <button class="close" href title="Close" {{on "click" @close}}>
          {{svg-jar "close"}}
      </button>
  
      <div class="modal-body">
          <fieldset>
              <GhFormGroup @errors={{this.integration.errors}} @hasValidated={{this.integration.hasValidated}} @property="name">
                  <label for="new-integration-name" class="fw6">Name</label>
                  <input type="text"
                      value={{this.integration.name}}
                      {{on "input" this.updateName}}
                      {{on-key "Enter" (perform this.createIntegrationTask)}}
                      id="new-integration-name"
                      class="gh-input mt1"
                      name="integration-name"
                      autofocus="autofocus"
                      {{autofocus}}
                      autocapitalize="off"
                      autocorrect="off"
                      data-test-input="new-integration-name">
                  <GhErrorMessage @errors={{this.integration.errors}} @property="name" data-test-error="new-integration-name" />
              </GhFormGroup>
          </fieldset>
  
          {{#if this.errorMessage}}
              <p class="error"><strong class="response">{{this.errorMessage}}</strong></p>
          {{/if}}
      </div>
  
      <div class="modal-footer">
          <button class="gh-btn" {{on "click" @close}} data-test-button="cancel-new-integration">
              <span>Cancel</span>
          </button>
  
          <GhTaskButton
              @buttonText="Create"
              @successText="Created"
              @task={{this.createIntegrationTask}}
              @class="gh-btn gh-btn-black gh-btn-icon"
              data-test-button="create-integration" />
      </div>
  
  </div>
  */
  {
    "id": "cr/evwit",
    "block": "{\"symbols\":[\"@close\"],\"statements\":[[10,\"div\"],[14,0,\"modal-content\"],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[14,\"data-test-modal\",\"new-integration\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[2,\"New custom integration\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[2,\"    \"],[11,\"button\"],[24,0,\"close\"],[24,6,\"\"],[24,\"title\",\"Close\"],[4,[38,0],[\"click\",[32,1]],null],[12],[2,\"\\n        \"],[1,[30,[36,1],[\"close\"],null]],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"fieldset\"],[12],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"integration\",\"errors\"]],[32,0,[\"integration\",\"hasValidated\"]],\"name\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"label\"],[14,\"for\",\"new-integration-name\"],[14,0,\"fw6\"],[12],[2,\"Name\"],[13],[2,\"\\n                \"],[11,\"input\"],[16,2,[32,0,[\"integration\",\"name\"]]],[24,1,\"new-integration-name\"],[24,0,\"gh-input mt1\"],[24,3,\"integration-name\"],[24,\"autofocus\",\"autofocus\"],[24,\"autocapitalize\",\"off\"],[24,\"autocorrect\",\"off\"],[24,\"data-test-input\",\"new-integration-name\"],[24,4,\"text\"],[4,[38,0],[\"input\",[32,0,[\"updateName\"]]],null],[4,[38,3],[\"Enter\",[30,[36,2],[[32,0,[\"createIntegrationTask\"]]],null]],null],[4,[38,4],null,null],[12],[13],[2,\"\\n                \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"new-integration-name\"]],[[\"@errors\",\"@property\"],[[32,0,[\"integration\",\"errors\"]],\"name\"]],null],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"errorMessage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"p\"],[14,0,\"error\"],[12],[10,\"strong\"],[14,0,\"response\"],[12],[1,[32,0,[\"errorMessage\"]]],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-button\",\"cancel-new-integration\"],[4,[38,0],[\"click\",[32,1]],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"create-integration\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Create\",\"Created\",[32,0,[\"createIntegrationTask\"]],\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\",\"svg-jar\",\"perform\",\"on-key\",\"autofocus\",\"if\"]}",
    "moduleName": "ghost-admin/components/modals/new-custom-integration.hbs"
  });

  let NewCustomIntegrationModalComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._tracked, _dec4 = Ember._action, _dec5 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class NewCustomIntegrationModalComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "router", _descriptor, this);

      _initializerDefineProperty(this, "store", _descriptor2, this);

      _initializerDefineProperty(this, "errorMessage", _descriptor3, this);

      this.integration = this.store.createRecord('integration');
    }

    willDestroy() {
      super.willDestroy(...arguments);
      this.integration.rollbackAttributes();
    }

    updateName(inputEvent) {
      this.integration.set('name', inputEvent.target.value);
      this.integration.set('hasValidated', Ember.A());
      this.integration.errors.clear();
    }

    *createIntegrationTask() {
      try {
        const integration = yield this.integration.save();
        this.router.transitionTo('settings.integration', integration);
        return true;
      } catch (error) {
        // TODO: server-side validation errors should be serialized
        // properly so that errors are added to model.errors automatically
        if (error && (0, _errors.isInvalidError)(error)) {
          let [firstError] = error.payload.errors;
          let {
            message
          } = firstError;

          if (message && message.match(/name/i)) {
            this.integration.errors.add('name', message);
            this.integration.hasValidated.pushObject('name');
            return;
          }
        }

        if ((0, _ajax.isHostLimitError)(error)) {
          this.errorMessage = error.payload.errors[0].context;
          return;
        } // bubble up to the global error handler


        if (error) {
          throw error;
        }
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "errorMessage", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "updateName", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "updateName"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "createIntegrationTask", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "createIntegrationTask"), _class.prototype)), _class));
  _exports.default = NewCustomIntegrationModalComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, NewCustomIntegrationModalComponent);
});
;define("ghost-admin/components/modals/offers/archive", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    
  <div class="modal-content" {{on-key "Enter" (perform this.archiveOfferTask)}}>
      <header class="modal-header">
          <h1>Archive offer</h1>
      </header>
      <button type="button" class="close" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
      <div class="modal-body">
          <p>
              New members will no longer be able to subscribe using this offer. All members that previously redeemed <strong>{{@data.offer.name}}</strong> will remain unchanged.
          </p>
      </div>
  
      <div class="modal-footer">
          <button type="button" class="gh-btn" {{on "click" @close}}><span>Cancel</span></button>
          <GhTaskButton
              @buttonText="Archive"
              @successText="Archived"
              @task={{this.archiveOfferTask}}
              @class="gh-btn gh-btn-black gh-btn-icon"
          />
      </div>
  </div>
  
  */
  {
    "id": "Yhh9A1Tt",
    "block": "{\"symbols\":[\"@close\",\"@data\"],\"statements\":[[2,\"\\n\"],[11,\"div\"],[24,0,\"modal-content\"],[4,[38,1],[\"Enter\",[30,[36,0],[[32,0,[\"archiveOfferTask\"]]],null]],null],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[2,\"Archive offer\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[24,4,\"button\"],[4,[38,2],[\"click\",[32,1]],null],[12],[1,[30,[36,3],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            New members will no longer be able to subscribe using this offer. All members that previously redeemed \"],[10,\"strong\"],[12],[1,[32,2,[\"offer\",\"name\"]]],[13],[2,\" will remain unchanged.\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,4,\"button\"],[4,[38,2],[\"click\",[32,1]],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n        \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Archive\",\"Archived\",[32,0,[\"archiveOfferTask\"]],\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"perform\",\"on-key\",\"on\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modals/offers/archive.hbs"
  });

  let ArchiveOfferModalComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class ArchiveOfferModalComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "notifications", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);
    }

    get isActive() {
      const {
        offer
      } = this.args.data;
      return offer.status === 'active';
    }

    *archiveOfferTask() {
      const {
        offer
      } = this.args.data;
      offer.status = 'archived';

      try {
        yield offer.save();
        this.router.transitionTo('offers', {
          queryParams: {
            type: 'archived'
          }
        });
        return offer;
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'offer.save.failed'
          });
        }
      } finally {
        this.args.close();
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "archiveOfferTask", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "archiveOfferTask"), _class.prototype)), _class));
  _exports.default = ArchiveOfferModalComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ArchiveOfferModalComponent);
});
;define("ghost-admin/components/modals/offers/link", ["exports", "@glimmer/component", "ghost-admin/config/environment", "ghost-admin/utils/copy-text-to-clipboard", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _component, _environment, _copyTextToClipboard, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content">
      <header class="modal-header">
          <h1>Offer link</h1>
      </header>
      <button type="button" class="close" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
      <div class="modal-body">
          <p>
              You can share this link anywhere. In your newsletter, social media, a podcast, or in-person. It all just works.
          </p>
          <div class="gh-input-group">
              <GhTextInput
                  @name="url"
                  @value={{this.offerUrl}}
                  @id="url"
                  @disabled="disabled"
                  @class="gh-input" />
  
              <GhTaskButton
                  @buttonText="Copy link"
                  @task={{this.copyOfferUrl}}
                  @successText="Link copied"
                  @class="gh-btn gh-btn-black gh-btn-icon" />
          </div>
      </div>
  </div>
  
  */
  {
    "id": "SYbV/y53",
    "block": "{\"symbols\":[\"@close\"],\"statements\":[[10,\"div\"],[14,0,\"modal-content\"],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[2,\"Offer link\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,1]],null],[12],[1,[30,[36,1],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            You can share this link anywhere. In your newsletter, social media, a podcast, or in-person. It all just works.\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-input-group\"],[12],[2,\"\\n            \"],[8,\"gh-text-input\",[],[[\"@name\",\"@value\",\"@id\",\"@disabled\",\"@class\"],[\"url\",[32,0,[\"offerUrl\"]],\"url\",\"disabled\",\"gh-input\"]],null],[2,\"\\n\\n            \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@successText\",\"@class\"],[\"Copy link\",[32,0,[\"copyOfferUrl\"]],\"Link copied\",\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"on\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modals/offers/link.hbs"
  });

  let ModalsOffersLinkComponent = (_dec = Ember.inject.service, _dec2 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class ModalsOffersLinkComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      if (this.isTesting === undefined) {
        this.isTesting = _environment.default.environment === 'test';
      }
    }

    get offerUrl() {
      const code = this.args.data.offer?.code || '';

      if (code) {
        const siteUrl = this.config.get('blogUrl');
        return `${siteUrl}/${code}`;
      }

      return '';
    }

    *copyOfferUrl() {
      (0, _copyTextToClipboard.default)(this.offerUrl);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 500);
      return true;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "copyOfferUrl", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "copyOfferUrl"), _class.prototype)), _class));
  _exports.default = ModalsOffersLinkComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalsOffersLinkComponent);
});
;define("ghost-admin/components/modals/offers/unarchive", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    
  <div class="modal-content" {{on-key "Enter" (perform this.unarchiveOfferTask)}}>
      <header class="modal-header">
          <h1>Reactivate offer</h1>
      </header>
      <button type="button" class="close" title="Close" {{on "click" @close}}>{{svg-jar "close"}}<span class="hidden">Close</span></button>
  
      <div class="modal-body">
          <p>
              Reactivating <strong>{{@data.offer.name}}</strong> will immediately allow new members to subscribe using this offer.
          </p>
      </div>
  
      <div class="modal-footer">
          <button type="button" class="gh-btn" {{on "click" @close}}><span>Cancel</span></button>
          <GhTaskButton
              @buttonText="Reactivate"
              @task={{this.unarchiveOfferTask}}
              @class="gh-btn gh-btn-black gh-btn-icon"
          />
      </div>
  </div>
  
  */
  {
    "id": "CgBTOlS1",
    "block": "{\"symbols\":[\"@close\",\"@data\"],\"statements\":[[2,\"\\n\"],[11,\"div\"],[24,0,\"modal-content\"],[4,[38,1],[\"Enter\",[30,[36,0],[[32,0,[\"unarchiveOfferTask\"]]],null]],null],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"modal-header\"],[12],[2,\"\\n        \"],[10,\"h1\"],[12],[2,\"Reactivate offer\"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"close\"],[24,\"title\",\"Close\"],[24,4,\"button\"],[4,[38,2],[\"click\",[32,1]],null],[12],[1,[30,[36,3],[\"close\"],null]],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Close\"],[13],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-body\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"\\n            Reactivating \"],[10,\"strong\"],[12],[1,[32,2,[\"offer\",\"name\"]]],[13],[2,\" will immediately allow new members to subscribe using this offer.\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"modal-footer\"],[12],[2,\"\\n        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,4,\"button\"],[4,[38,2],[\"click\",[32,1]],null],[12],[10,\"span\"],[12],[2,\"Cancel\"],[13],[13],[2,\"\\n        \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@class\"],[\"Reactivate\",[32,0,[\"unarchiveOfferTask\"]],\"gh-btn gh-btn-black gh-btn-icon\"]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"perform\",\"on-key\",\"on\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modals/offers/unarchive.hbs"
  });

  let ArchiveOfferModalComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class ArchiveOfferModalComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "notifications", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);
    }

    get isActive() {
      const {
        offer
      } = this.args.data;
      return offer.status === 'active';
    }

    *unarchiveOfferTask() {
      const {
        offer
      } = this.args.data;
      offer.status = 'active';

      try {
        yield offer.save();
        this.router.transitionTo('offers', {
          queryParams: {
            type: 'active'
          }
        });
        return offer;
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'offer.save.failed'
          });
        }
      } finally {
        this.args.close();
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "unarchiveOfferTask", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "unarchiveOfferTask"), _class.prototype)), _class));
  _exports.default = ArchiveOfferModalComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ArchiveOfferModalComponent);
});
;define("ghost-admin/components/modals/post-preview", ["exports", "@glimmer/component", "ember-concurrency-decorators"], function (_exports, _component, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content">
      <div class="flex flex-column h-100">
          <header class="modal-header gh-post-preview-header gh-post-preview-header-border" data-test-modal="preview-email">
              <div>
                  <button class="gh-editor-back-button" title="Close" {{on "click" @close}}>
                      <span>{{svg-jar "arrow-left"}} Back</span>
                  </button>
              </div>
              <div class="gh-post-preview-btn-group">
                  <div class="gh-contentfilter gh-btn-group">
                      <button type="button" class="gh-btn {{if (eq this.tab "browser") "gh-btn-group-selected"}} gh-post-preview-mode" {{on "click" (fn this.changeTab "browser")}}><span>{{svg-jar "desktop"}}</span></button>
                      <button type="button" class="gh-btn {{if (eq this.tab "mobile") "gh-btn-group-selected"}} gh-post-preview-mode" {{on "click" (fn this.changeTab "mobile")}}><span>{{svg-jar "mobile-phone"}}</span></button>
                      {{#if (not-eq this.settings.editorDefaultEmailRecipients "disabled")}}
                          {{#if @data.post.isPost}}
                              <button type="button" class="gh-btn {{if (eq this.tab "email") "gh-btn-group-selected"}} gh-post-preview-mode" {{on "click" (fn this.changeTab "email")}}><span>{{svg-jar "email-unread"}}</span></button>
                          {{/if}}
                      {{/if}}
                      <button type="button" class="gh-btn {{if (eq this.tab "social") "gh-btn-group-selected"}} gh-post-preview-mode" {{on "click" (fn this.changeTab "social")}}><span>{{svg-jar "twitter"}}</span></button>
                  </div>
              </div>
  
              <GhPublishmenu
                  @post={{@data.post}}
                  @postStatus={{@data.post.status}}
                  @saveTask={{@data.saveTask}}
                  @setSaveType={{@data.setEditorSaveType}}
                  @memberCount={{@data.memberCount}}
                  @uiContext="preview" />
          </header>
  
          {{#if this.saveFirstTask.isRunning}}
              <GhLoadingSpinner />
          {{else}}
              {{#if (eq this.tab "browser")}}
                  <Modals::PostPreview::Browser @post={{@data.post}} />
              {{/if}}
  
              {{#if (and (eq this.tab "mobile"))}}
                  <Modals::PostPreview::Mobile @post={{@data.post}} />
              {{/if}}
  
              {{#if (and (eq this.tab "email") @data.post.isPost)}}
                  <Modals::PostPreview::Email @post={{@data.post}} />
              {{/if}}
  
              {{#if (eq this.tab "social")}}
                  <Modals::PostPreview::Social @post={{@data.post}} />
              {{/if}}
          {{/if}}
      </div>
  </div>
  */
  {
    "id": "sFNq6Hiz",
    "block": "{\"symbols\":[\"@data\",\"@close\"],\"statements\":[[10,\"div\"],[14,0,\"modal-content\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"flex flex-column h-100\"],[12],[2,\"\\n        \"],[10,\"header\"],[14,0,\"modal-header gh-post-preview-header gh-post-preview-header-border\"],[14,\"data-test-modal\",\"preview-email\"],[12],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n                \"],[11,\"button\"],[24,0,\"gh-editor-back-button\"],[24,\"title\",\"Close\"],[4,[38,4],[\"click\",[32,2]],null],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[1,[30,[36,5],[\"arrow-left\"],null]],[2,\" Back\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-post-preview-btn-group\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-contentfilter gh-btn-group\"],[12],[2,\"\\n                    \"],[11,\"button\"],[16,0,[31,[\"gh-btn \",[30,[36,1],[[30,[36,0],[[32,0,[\"tab\"]],\"browser\"],null],\"gh-btn-group-selected\"],null],\" gh-post-preview-mode\"]]],[24,4,\"button\"],[4,[38,4],[\"click\",[30,[36,3],[[32,0,[\"changeTab\"]],\"browser\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,5],[\"desktop\"],null]],[13],[13],[2,\"\\n                    \"],[11,\"button\"],[16,0,[31,[\"gh-btn \",[30,[36,1],[[30,[36,0],[[32,0,[\"tab\"]],\"mobile\"],null],\"gh-btn-group-selected\"],null],\" gh-post-preview-mode\"]]],[24,4,\"button\"],[4,[38,4],[\"click\",[30,[36,3],[[32,0,[\"changeTab\"]],\"mobile\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,5],[\"mobile-phone\"],null]],[13],[13],[2,\"\\n\"],[6,[37,1],[[30,[36,6],[[32,0,[\"settings\",\"editorDefaultEmailRecipients\"]],\"disabled\"],null]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[32,1,[\"post\",\"isPost\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[11,\"button\"],[16,0,[31,[\"gh-btn \",[30,[36,1],[[30,[36,0],[[32,0,[\"tab\"]],\"email\"],null],\"gh-btn-group-selected\"],null],\" gh-post-preview-mode\"]]],[24,4,\"button\"],[4,[38,4],[\"click\",[30,[36,3],[[32,0,[\"changeTab\"]],\"email\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,5],[\"email-unread\"],null]],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                    \"],[11,\"button\"],[16,0,[31,[\"gh-btn \",[30,[36,1],[[30,[36,0],[[32,0,[\"tab\"]],\"social\"],null],\"gh-btn-group-selected\"],null],\" gh-post-preview-mode\"]]],[24,4,\"button\"],[4,[38,4],[\"click\",[30,[36,3],[[32,0,[\"changeTab\"]],\"social\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,5],[\"twitter\"],null]],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[8,\"gh-publishmenu\",[],[[\"@post\",\"@postStatus\",\"@saveTask\",\"@setSaveType\",\"@memberCount\",\"@uiContext\"],[[32,1,[\"post\"]],[32,1,[\"post\",\"status\"]],[32,1,[\"saveTask\"]],[32,1,[\"setEditorSaveType\"]],[32,1,[\"memberCount\"]],\"preview\"]],null],[2,\"\\n        \"],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"saveFirstTask\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,1],[[30,[36,0],[[32,0,[\"tab\"]],\"browser\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"modals/post-preview/browser\",[],[[\"@post\"],[[32,1,[\"post\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[30,[36,2],[[30,[36,0],[[32,0,[\"tab\"]],\"mobile\"],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"modals/post-preview/mobile\",[],[[\"@post\"],[[32,1,[\"post\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[30,[36,2],[[30,[36,0],[[32,0,[\"tab\"]],\"email\"],null],[32,1,[\"post\",\"isPost\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"modals/post-preview/email\",[],[[\"@post\"],[[32,1,[\"post\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[30,[36,0],[[32,0,[\"tab\"]],\"social\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"modals/post-preview/social\",[],[[\"@post\"],[[32,1,[\"post\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"eq\",\"if\",\"and\",\"fn\",\"on\",\"svg-jar\",\"not-eq\"]}",
    "moduleName": "ghost-admin/components/modals/post-preview.hbs"
  });

  let ModalPostPreviewComponent = (_dec = Ember._tracked, _dec2 = Ember.inject.service, _dec3 = Ember._action, (_class = class ModalPostPreviewComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "tab", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);

      this.saveFirstTask.perform();
    }

    changeTab(tab) {
      this.tab = tab;
    }

    *saveFirstTask() {
      const {
        saveTask,
        post,
        hasDirtyAttributes
      } = this.args.data;

      if (saveTask.isRunning) {
        return yield saveTask.last;
      }

      if (post.isDraft && hasDirtyAttributes) {
        yield saveTask.perform();
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "tab", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'browser';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "changeTab", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "changeTab"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveFirstTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "saveFirstTask"), _class.prototype)), _class));
  _exports.default = ModalPostPreviewComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalPostPreviewComponent);
});
;define("ghost-admin/components/modals/post-preview/browser", ["exports", "@glimmer/component", "ghost-admin/utils/copy-text-to-clipboard", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _component, _copyTextToClipboard, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _class;

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-post-preview-browser-container">
      <iframe class="gh-pe-iframe" src={{@post.previewUrl}}></iframe>
  </div>
  <div class="gh-post-preview-browser-footer">
      <span class="mr3 nowrap fw6 f8 darkgrey">Share preview privately</span>
      <div class="gh-post-preview-url-container truncate">
          <span class="db truncate w-90">{{@post.previewUrl}}</span>
      </div>
      <button type="button" {{on "click" (perform this.copyPreviewUrl)}} class="gh-btn gh-btn-green gh-btn-icon gh-post-preview-copy-url-trigger">
          <span>
              {{#if this.copyPreviewUrl.isRunning}}
                  Copied!
              {{else}}
                  copy
              {{/if}}
          </span>
      </button>
      <div>
          <a href={{@post.previewUrl}} target="_blank" rel="noopener noreferrer" class="gh-btn gh-btn-editor gh-btn-icon gh-btn-icon-right gh-btn-external">
              <span>Open in new tab {{svg-jar "external"}}</span>
          </a>
      </div>
  </div>
  */
  {
    "id": "oyvl1kQL",
    "block": "{\"symbols\":[\"@post\"],\"statements\":[[10,\"div\"],[14,0,\"gh-post-preview-browser-container\"],[12],[2,\"\\n    \"],[10,\"iframe\"],[14,0,\"gh-pe-iframe\"],[15,\"src\",[32,1,[\"previewUrl\"]]],[12],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"div\"],[14,0,\"gh-post-preview-browser-footer\"],[12],[2,\"\\n    \"],[10,\"span\"],[14,0,\"mr3 nowrap fw6 f8 darkgrey\"],[12],[2,\"Share preview privately\"],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-post-preview-url-container truncate\"],[12],[2,\"\\n        \"],[10,\"span\"],[14,0,\"db truncate w-90\"],[12],[1,[32,1,[\"previewUrl\"]]],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green gh-btn-icon gh-post-preview-copy-url-trigger\"],[24,4,\"button\"],[4,[38,1],[\"click\",[30,[36,0],[[32,0,[\"copyPreviewUrl\"]]],null]],null],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"copyPreviewUrl\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                Copied!\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                copy\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"div\"],[12],[2,\"\\n        \"],[10,\"a\"],[15,6,[32,1,[\"previewUrl\"]]],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[14,0,\"gh-btn gh-btn-editor gh-btn-icon gh-btn-icon-right gh-btn-external\"],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Open in new tab \"],[1,[30,[36,3],[\"external\"],null]],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"perform\",\"on\",\"if\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modals/post-preview/browser.hbs"
  });

  let ModalPostPreviewBrowserComponent = (_class = class ModalPostPreviewBrowserComponent extends _component.default {
    *copyPreviewUrl() {
      (0, _copyTextToClipboard.default)(this.args.post.previewUrl);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 3000);
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "copyPreviewUrl", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "copyPreviewUrl"), _class.prototype)), _class);
  _exports.default = ModalPostPreviewBrowserComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalPostPreviewBrowserComponent);
});
;define("ghost-admin/components/modals/post-preview/email", ["exports", "@glimmer/component", "validator", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _component, _validator, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-post-preview-email-container">
      <div class="gh-post-preview-email-mockup">
          <div class="gh-pe-emailclient-sender">
              <p>
                  <span class="strong">{{this.config.blogTitle}}</span> &lt;{{full-email-address this.settings.membersFromAddress}}&gt;
              </p>
              <p><span class="dark">To:</span> Jamie Larson &lt;jamie@example.com&gt;</p>
          </div>
          <iframe class="gh-pe-iframe" {{did-insert this.renderEmailPreview}} sandbox="allow-same-origin allow-popups allow-popups-to-escape-sandbox"></iframe>
      </div>
  </div>
  <div class="gh-post-preview-email-footer">
      <div class="gh-btn-group mr3">
          <button type="button" class="gh-btn {{if (eq this.memberSegment "status:free") "gh-btn-group-selected"}}" {{on "click" (fn this.changeMemberSegment "status:free")}}><span>Free member</span></button>
          <button type="button" class="gh-btn {{if (eq this.memberSegment "status:-free") "gh-btn-group-selected"}}" {{on "click" (fn this.changeMemberSegment "status:-free")}}><span>Paid member</span></button>
      </div>
  
      <div class="gh-post-preview-email-input {{if this.sendPreviewEmailError "error"}}">
          <Input
              @value={{this.previewEmailAddress}}
              class="gh-input gh-post-preview-email-input"
              placeholder="you@yoursite.com"
              aria-invalid={{if this.sendPreviewEmailError "true"}}
              aria-describedby={{if this.sendPreviewEmailError "sendError"}}
              {{on-key "Enter" (perform this.sendPreviewEmailTask)}}
          />
          {{#if this.sendPreviewEmailError}}
              <div class="error fixed nowrap f8 lh-heading"><span class="response" id="sendError">{{this.sendPreviewEmailError}}</span></div>
          {{/if}}
      </div>
  
      <GhTaskButton
          @task={{this.sendPreviewEmailTask}}
          @buttonText="Send test email"
          @successText="Sent"
          @runningText="Sending..."
          @class="gh-btn gh-btn-green gh-btn-icon gh-post-preview-email-trigger"
      />
  </div>
  */
  {
    "id": "yykRvEdt",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"gh-post-preview-email-container\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-post-preview-email-mockup\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-pe-emailclient-sender\"],[12],[2,\"\\n            \"],[10,\"p\"],[12],[2,\"\\n                \"],[10,\"span\"],[14,0,\"strong\"],[12],[1,[32,0,[\"config\",\"blogTitle\"]]],[13],[2,\" <\"],[1,[30,[36,0],[[32,0,[\"settings\",\"membersFromAddress\"]]],null]],[2,\">\\n            \"],[13],[2,\"\\n            \"],[10,\"p\"],[12],[10,\"span\"],[14,0,\"dark\"],[12],[2,\"To:\"],[13],[2,\" Jamie Larson <jamie@example.com>\"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[11,\"iframe\"],[24,0,\"gh-pe-iframe\"],[24,\"sandbox\",\"allow-same-origin allow-popups allow-popups-to-escape-sandbox\"],[4,[38,1],[[32,0,[\"renderEmailPreview\"]]],null],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"div\"],[14,0,\"gh-post-preview-email-footer\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-btn-group mr3\"],[12],[2,\"\\n        \"],[11,\"button\"],[16,0,[31,[\"gh-btn \",[30,[36,3],[[30,[36,2],[[32,0,[\"memberSegment\"]],\"status:free\"],null],\"gh-btn-group-selected\"],null]]]],[24,4,\"button\"],[4,[38,5],[\"click\",[30,[36,4],[[32,0,[\"changeMemberSegment\"]],\"status:free\"],null]],null],[12],[10,\"span\"],[12],[2,\"Free member\"],[13],[13],[2,\"\\n        \"],[11,\"button\"],[16,0,[31,[\"gh-btn \",[30,[36,3],[[30,[36,2],[[32,0,[\"memberSegment\"]],\"status:-free\"],null],\"gh-btn-group-selected\"],null]]]],[24,4,\"button\"],[4,[38,5],[\"click\",[30,[36,4],[[32,0,[\"changeMemberSegment\"]],\"status:-free\"],null]],null],[12],[10,\"span\"],[12],[2,\"Paid member\"],[13],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[15,0,[31,[\"gh-post-preview-email-input \",[30,[36,3],[[32,0,[\"sendPreviewEmailError\"]],\"error\"],null]]]],[12],[2,\"\\n        \"],[8,\"input\",[[24,0,\"gh-input gh-post-preview-email-input\"],[24,\"placeholder\",\"you@yoursite.com\"],[16,\"aria-invalid\",[30,[36,3],[[32,0,[\"sendPreviewEmailError\"]],\"true\"],null]],[16,\"aria-describedby\",[30,[36,3],[[32,0,[\"sendPreviewEmailError\"]],\"sendError\"],null]],[4,[38,7],[\"Enter\",[30,[36,6],[[32,0,[\"sendPreviewEmailTask\"]]],null]],null]],[[\"@value\"],[[32,0,[\"previewEmailAddress\"]]]],null],[2,\"\\n\"],[6,[37,3],[[32,0,[\"sendPreviewEmailError\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"error fixed nowrap f8 lh-heading\"],[12],[10,\"span\"],[14,0,\"response\"],[14,1,\"sendError\"],[12],[1,[32,0,[\"sendPreviewEmailError\"]]],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\\n    \"],[8,\"gh-task-button\",[],[[\"@task\",\"@buttonText\",\"@successText\",\"@runningText\",\"@class\"],[[32,0,[\"sendPreviewEmailTask\"]],\"Send test email\",\"Sent\",\"Sending...\",\"gh-btn gh-btn-green gh-btn-icon gh-post-preview-email-trigger\"]],null],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"full-email-address\",\"did-insert\",\"eq\",\"if\",\"fn\",\"on\",\"perform\",\"on-key\"]}",
    "moduleName": "ghost-admin/components/modals/post-preview/email.hbs"
  });

  const INJECTED_CSS = `
html::-webkit-scrollbar {
    display: none;
    width: 0;
    background: transparent
}
html {
    scrollbar-width: none;
}
`; // TODO: remove duplication with <ModalPostEmailPreview>

  let ModalPostPreviewEmailComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._tracked, _dec10 = Ember._tracked, _dec11 = Ember._tracked, _dec12 = Ember._action, _dec13 = Ember._action, _dec14 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class ModalPostPreviewEmailComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ajax", _descriptor, this);

      _initializerDefineProperty(this, "config", _descriptor2, this);

      _initializerDefineProperty(this, "feature", _descriptor3, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor4, this);

      _initializerDefineProperty(this, "session", _descriptor5, this);

      _initializerDefineProperty(this, "settings", _descriptor6, this);

      _initializerDefineProperty(this, "html", _descriptor7, this);

      _initializerDefineProperty(this, "subject", _descriptor8, this);

      _initializerDefineProperty(this, "memberSegment", _descriptor9, this);

      _initializerDefineProperty(this, "previewEmailAddress", _descriptor10, this);

      _initializerDefineProperty(this, "sendPreviewEmailError", _descriptor11, this);
    }

    get mailgunIsEnabled() {
      return this.config.get('mailgunIsConfigured') || !!(this.settings.get('mailgunApiKey') && this.settings.get('mailgunDomain') && this.settings.get('mailgunBaseUrl'));
    }

    async renderEmailPreview(iframe) {
      this._previewIframe = iframe;
      await this._fetchEmailData(); // avoid timing issues when _fetchEmailData didn't perform any async ops

      await (0, _emberConcurrency.timeout)(100);

      if (iframe) {
        iframe.contentWindow.document.open();
        iframe.contentWindow.document.write(this.html);
        iframe.contentWindow.document.close();
      }
    }

    changeMemberSegment(segment) {
      this.memberSegment = segment;

      if (this._previewIframe) {
        this.renderEmailPreview(this._previewIframe);
      }
    }

    *sendPreviewEmailTask() {
      try {
        const resourceId = this.args.post.id;
        const testEmail = this.previewEmailAddress.trim();

        if (!_validator.default.isEmail(testEmail)) {
          this.sendPreviewEmailError = 'Please enter a valid email';
          return false;
        }

        if (!this.mailgunIsEnabled) {
          this.sendPreviewEmailError = 'Please verify your email settings';
          return false;
        }

        this.sendPreviewEmailError = '';
        const url = this.ghostPaths.url.api('/email_preview/posts', resourceId);
        const data = {
          emails: [testEmail],
          memberSegment: this.memberSegment
        };
        const options = {
          data,
          dataType: 'json'
        };
        return yield this.ajax.post(url, options);
      } catch (error) {
        if (error) {
          let message = 'Email could not be sent, verify mail settings'; // grab custom error message if present

          if (error.payload && error.payload.errors && error.payload.errors[0] && error.payload.errors[0].message) {
            message = Ember.String.htmlSafe(error.payload.errors[0].message);
          }

          this.sendPreviewEmailError = message;
          throw error;
        }
      }
    }

    async _fetchEmailData() {
      let {
        html,
        subject,
        memberSegment
      } = this;
      let {
        post
      } = this.args;

      if (html && subject && memberSegment === this._lastMemberSegment) {
        return {
          html,
          subject
        };
      }

      this._lastMemberSegment = memberSegment; // model is an email

      if (post.html && post.subject) {
        html = post.html;
        subject = post.subject; // model is a post with an existing email
      } else if (post.email) {
        html = post.email.html;
        subject = post.email.subject; // model is a post, fetch email preview
      } else {
        let url = new URL(this.ghostPaths.url.api('/email_preview/posts', post.id), window.location.href);
        url.searchParams.set('memberSegment', this.memberSegment);
        let response = await this.ajax.request(url.href);
        let [emailPreview] = response.email_previews;
        html = emailPreview.html;
        subject = emailPreview.subject;
      } // inject extra CSS into the html for disabling links and scrollbars etc


      let domParser = new DOMParser();
      let htmlDoc = domParser.parseFromString(html, 'text/html');
      let stylesheet = htmlDoc.querySelector('style');
      let originalCss = stylesheet.innerHTML;
      stylesheet.innerHTML = `${originalCss}\n\n${INJECTED_CSS}`;
      const doctype = new XMLSerializer().serializeToString(htmlDoc.doctype);
      html = doctype + htmlDoc.documentElement.outerHTML;
      this.html = html;
      this.subject = subject;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "html", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "subject", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "memberSegment", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'status:free';
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "previewEmailAddress", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.session.user.email;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "sendPreviewEmailError", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _applyDecoratedDescriptor(_class.prototype, "renderEmailPreview", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "renderEmailPreview"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "changeMemberSegment", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, "changeMemberSegment"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "sendPreviewEmailTask", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "sendPreviewEmailTask"), _class.prototype)), _class));
  _exports.default = ModalPostPreviewEmailComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalPostPreviewEmailComponent);
});
;define("ghost-admin/components/modals/post-preview/mobile", ["exports", "@glimmer/component", "ghost-admin/utils/copy-text-to-clipboard", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _component, _copyTextToClipboard, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _class;

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-body modal-preview-email-content gh-pe-mobile-container h-auto overflow-auto">
      <div class="gh-pe-mobile-bezel">
          <div class="gh-pe-mobile-screen">
              <iframe class="gh-post-preview-iframe" src={{@post.previewUrl}}></iframe>
          </div>
      </div>
  </div>
  <div class="gh-post-preview-browser-footer">
      <span class="mr3 nowrap fw6 f8 darkgrey">Share preview privately</span>
      <div class="gh-post-preview-url-container truncate">
          <span class="db truncate w-90">{{@post.previewUrl}}</span>
      </div>
      <button type="button" {{on "click" (perform this.copyPreviewUrl)}} class="gh-btn gh-btn-green gh-btn-icon gh-post-preview-copy-url-trigger">
          <span>
              {{#if this.copyPreviewUrl.isRunning}}
                  Copied!
              {{else}}
                  copy
              {{/if}}
          </span>
      </button>
      <div>
          <a href={{@post.previewUrl}} target="_blank" rel="noopener noreferrer" class="gh-btn gh-btn-editor gh-btn-icon gh-btn-icon-right gh-btn-external">
              <span>Open in new tab {{svg-jar "external"}}</span>
          </a>
      </div>
  </div>
  */
  {
    "id": "EEJ5CDUp",
    "block": "{\"symbols\":[\"@post\"],\"statements\":[[10,\"div\"],[14,0,\"modal-body modal-preview-email-content gh-pe-mobile-container h-auto overflow-auto\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-pe-mobile-bezel\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-pe-mobile-screen\"],[12],[2,\"\\n            \"],[10,\"iframe\"],[14,0,\"gh-post-preview-iframe\"],[15,\"src\",[32,1,[\"previewUrl\"]]],[12],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"div\"],[14,0,\"gh-post-preview-browser-footer\"],[12],[2,\"\\n    \"],[10,\"span\"],[14,0,\"mr3 nowrap fw6 f8 darkgrey\"],[12],[2,\"Share preview privately\"],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-post-preview-url-container truncate\"],[12],[2,\"\\n        \"],[10,\"span\"],[14,0,\"db truncate w-90\"],[12],[1,[32,1,[\"previewUrl\"]]],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green gh-btn-icon gh-post-preview-copy-url-trigger\"],[24,4,\"button\"],[4,[38,1],[\"click\",[30,[36,0],[[32,0,[\"copyPreviewUrl\"]]],null]],null],[12],[2,\"\\n        \"],[10,\"span\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"copyPreviewUrl\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                Copied!\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                copy\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"div\"],[12],[2,\"\\n        \"],[10,\"a\"],[15,6,[32,1,[\"previewUrl\"]]],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[14,0,\"gh-btn gh-btn-editor gh-btn-icon gh-btn-icon-right gh-btn-external\"],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Open in new tab \"],[1,[30,[36,3],[\"external\"],null]],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"perform\",\"on\",\"if\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/modals/post-preview/mobile.hbs"
  });

  let ModalPostPreviewBrowserComponent = (_class = class ModalPostPreviewBrowserComponent extends _component.default {
    *copyPreviewUrl() {
      (0, _copyTextToClipboard.default)(this.args.post.previewUrl);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 3000);
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "copyPreviewUrl", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "copyPreviewUrl"), _class.prototype)), _class);
  _exports.default = ModalPostPreviewBrowserComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalPostPreviewBrowserComponent);
});
;define("ghost-admin/components/modals/post-preview/social", ["exports", "@glimmer/component", "ghost-admin/components/gh-image-uploader"], function (_exports, _component, _ghImageUploader) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    
  <div class="gh-post-preview-social-container">
      <p class="mb4">This is how your content will look when shared, you can click on any elements you’d like to edit.</p>
      <div class="flex flex-column">
          <div class="flex gh-social-container-responsive">
              <div class="gh-social-og-container">
                  <div class="flex ma3 mb2">
                      <span>{{svg-jar "social-facebook" class="social-icon"}}</span>
                      <div>
                          <div class="gh-social-og-title">{{or this.settings.metaTitle this.settings.title}}</div>
                          <div class="gh-social-og-time">12 hrs</div>
                      </div>
                  </div>
                  <div class="flex flex-column ma3 mt2">
                      <span class="gh-social-og-desc w-100 mb2" />
                      <span class="gh-social-og-desc w-100 mb2" />
                      <span class="gh-social-og-desc w-60" />
                  </div>
                  <div
                      class="gh-social-og-preview"
                      {{on "mouseenter" (action (mut this.facebookHovered) true)}}
                      {{on "mouseleave" (action (mut this.facebookHovered) false)}}
                  >
                      {{#if (and this.facebookHovered (not this.facebookImage))}}
                          {{!-- only shown on hover when there's no image or fallback --}}
                          <button class="gh-social-og-preview-img-add" {{on "click" (fn this.triggerFileDialog "facebook")}}>+ Add image</button>
                      {{/if}}
  
                      <GhUploader
                          @extensions={{this.imageExtensions}}
                          @onComplete={{this.setFacebookImage}}
                          as |uploader|
                      >
                          {{#each uploader.errors as |error|}}
                              <div class="error pa2"><span class="response">{{or error.context error.message}}</span></div>
                          {{/each}}
  
                          {{#if (or this.facebookImage uploader.isUploading)}}
                              <div class="gh-social-og-preview-image relative" style={{background-image-style this.facebookImage}}>
                                  <div class="flex h-100 items-center justify-center">
                                      {{#if (or this.facebookHovered uploader.isUploading)}}
                                          {{#if uploader.isUploading}}
                                              {{uploader.progressBar}}
                                          {{else}}
                                              <button type="button" class="gh-btn gh-btn-white" {{on "click" (fn this.triggerFileDialog "facebook")}}><span>{{if @post.ogImage "Change" "Upload"}} image</span></button>
                                          {{/if}}
                                      {{/if}}
  
                                      {{#if (and this.facebookHovered @post.ogImage)}}
                                          <button type="button" class="gh-btn gh-btn-black gh-btn-icon gh-social-preview-img-delete" title="Remove custom Facebook image" {{on "click" this.clearFacebookImage}}>
                                              <span>{{svg-jar "trash"}}</span>
                                              <span class="hidden">Remove custom Facebook image</span>
                                          </button>
                                      {{/if}}
                                  </div>
                              </div>
                          {{/if}}
  
                          <div style="display:none">
                              <GhFileInput id="facebookFileInput" @multiple={{false}} @action={{uploader.setFiles}} @accept={{this.imageMimeTypes}} />
                          </div>
                      </GhUploader>
  
                      <div class="gh-social-og-preview-bookmark">
                          {{!-- Ensures description is hidden if title exceeds one line --}}
                          <div class="gh-social-og-preview-content {{if this.editingFacebookTitle 'edit-mode'}} {{if this.editingFacebookDescription 'edit-mode'}}">
                              <div class="gh-social-og-preview-meta">
                                  {{this.config.blogDomain}}
                              </div>
                              {{#if this.editingFacebookTitle}}
                                  <input
                                      type="text"
                                      class="gh-input"
                                      placeholder={{this.facebookTitle}}
                                      value={{@post.ogTitle}}
                                      maxlength="300"
                                      {{on "blur" this.setFacebookTitle}}
                                      {{on-key "Enter" this.blurElement}}
                                      {{on-key "Escape" (fn this.cancelEdit "ogTitle")}}
                                      {{autofocus}}
                                      data-prevent-escape-close-modal="true"
                                  />
                              {{else}}
                                  <div class="gh-social-og-preview-title editable pointer" {{on "click" this.editFacebookTitle}}>
                                      {{truncate this.facebookTitle}}
                                  </div>
                              {{/if}}
                              {{#if this.editingFacebookDescription}}
                                  <textarea
                                      class="gh-input"
                                      maxlength="500"
                                      placeholder={{truncate this.facebookDescription 160}}
                                      {{on "blur" this.setFacebookDescription}}
                                      {{on-key "Enter" this.blurElement}}
                                      {{on-key "Escape" (fn this.cancelEdit "ogDescription")}}
                                      {{autofocus}}
                                      data-prevent-escape-close-modal="true"
                                  >{{@post.ogDescription}}</textarea>
                              {{else}}
                                  <div class="gh-social-og-preview-desc editable pointer" {{on "click" this.editFacebookDescription}}>
                                      {{truncate this.facebookDescription}}
                                  </div>
                              {{/if}}
                          </div>
                      </div>
                  </div>
                  <div class="gh-social-og-reactions">
                      <span class="gh-social-og-likes">{{svg-jar "facebook-like" class="z-999"}}{{svg-jar "facebook-heart" class="nl1"}}182</span>
                      <span class="gh-social-og-comments">7 comments</span>
                      <span class="gh-social-og-comments ml2">2 shares</span>
                  </div>
              </div>
  
              <div class="gh-social-twitter-container">
                  <div class="flex ma4">
                      <span>{{svg-jar "social-twitter" class="social-icon"}}</span>
                      <div>
                          <span class="gh-social-og-title">{{or this.settings.metaTitle this.settings.title}}</span>
                          <span class="gh-social-og-time">12 hrs</span>
                          <div class="flex flex-column mt2 mb3">
                              <span class="gh-social-og-desc w-100 mb2" />
                              <span class="gh-social-og-desc w-60" />
                          </div>
                          <div class="gh-social-twitter-post-preview"
                              {{on "mouseenter" (action (mut this.twitterHovered) true)}}
                              {{on "mouseleave" (action (mut this.twitterHovered) false)}}
                          >
                              {{#if (and this.twitterHovered (not this.twitterImage))}}
                                  {{!-- only shown on hover when there's no image or fallback --}}
                                  <button class="gh-social-twitter-preview-img-add" {{on "click" (fn this.triggerFileDialog "twitter")}}>+ Add image</button>
                              {{/if}}
  
                              <GhUploader
                                  @extensions={{this.imageExtensions}}
                                  @onComplete={{this.setTwitterImage}}
                                  as |uploader|
                              >
                                  {{#each uploader.errors as |error|}}
                                      <div class="error pa2"><span class="response">{{or error.context error.message}}</span></div>
                                  {{/each}}
  
                                  {{#if (or this.twitterImage uploader.isUploading)}}
                                      <div class="gh-social-twitter-preview-image relative" style={{background-image-style this.twitterImage}}>
                                          <div class="flex h-100 items-center justify-center">
                                              {{#if (or this.twitterHovered uploader.isUploading)}}
                                                  {{#if uploader.isUploading}}
                                                      {{uploader.progressBar}}
                                                  {{else}}
                                                      <button type="button" class="gh-btn gh-btn-white" {{on "click" (fn this.triggerFileDialog "twitter")}}><span>{{if @post.twitterImage "Change" "Upload"}} image</span></button>
                                                  {{/if}}
                                              {{/if}}
  
                                              {{#if (and this.twitterHovered @post.twitterImage)}}
                                                  <button type="button" class="gh-btn gh-btn-black gh-btn-icon gh-social-preview-img-delete" title="Remove custom Twitter image" {{on "click" this.clearTwitterImage}}>
                                                      <span>{{svg-jar "trash"}}</span>
                                                      <span class="hidden">Remove custom Twitter image</span>
                                                  </button>
                                              {{/if}}
                                          </div>
                                      </div>
                                  {{/if}}
  
                                  <div style="display:none">
                                      <GhFileInput id="twitterFileInput" @multiple={{false}} @action={{uploader.setFiles}} @accept={{this.imageMimeTypes}} />
                                  </div>
                              </GhUploader>
  
                              <div class="gh-social-twitter-preview-content">
                                  {{#if this.editingTwitterTitle}}
                                      <input
                                          type="text"
                                          class="gh-input"
                                          placeholder={{this.twitterTitle}}
                                          value={{@post.twitterTitle}}
                                          maxlength="300"
                                          {{on "blur" this.setTwitterTitle}}
                                          {{on-key "Enter" this.blurElement}}
                                          {{on-key "Escape" (fn this.cancelEdit "twitterTitle")}}
                                          {{autofocus}}
                                          data-prevent-escape-close-modal="true"
                                      />
                                  {{else}}
                                      <div class="gh-social-twitter-preview-title editable pointer" {{on "click" this.editTwitterTitle}}>{{this.twitterTitle}}</div>
                                  {{/if}}
                                  {{#if this.editingTwitterDescription}}
                                      <textarea
                                          class="gh-input"
                                          maxlength="500"
                                          placeholder={{truncate this.twitterDescription 160}}
                                          {{on "blur" this.setTwitterDescription}}
                                          {{on-key "Enter" this.blurElement}}
                                          {{on-key "Escape" (fn this.cancelEdit "twitterDescription")}}
                                          {{autofocus}}
                                          data-prevent-escape-close-modal="true"
                                      >{{@post.twitterDescription}}</textarea>
                                  {{else}}
                                      <div class="gh-social-twitter-preview-desc editable pointer" {{on "click" this.editTwitterDescription}}>{{truncate this.twitterDescription}}</div>
                                  {{/if}}
                                  <div class="gh-social-twitter-preview-meta">
                                      {{svg-jar "twitter-link"}}
                                      {{this.config.blogDomain}}
                                  </div>
                              </div>
                          </div>
                          <div class="gh-social-twitter-reactions">
                              <div class="flex items-center">{{svg-jar "twitter-comment"}}2</div>
                              <div class="flex items-center">{{svg-jar "twitter-retweet"}}11</div>
                              <div class="flex items-center">{{svg-jar "twitter-like"}}32</div>
                              <div class="flex items-center">{{svg-jar "twitter-share"}}</div>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
  
          <div class="gh-seo-preview-container">
              {{svg-jar "google"}}
              <div class="gh-seo-preview">
                  <div class="gh-seo-search-bar mb12">{{svg-jar "google-search"}}</div>
                  <div class="gh-seo-preview-link">{{this.serpURL}}</div>
                  {{#if this.editingMetaTitle}}
                      <input
                          type="text"
                          class="gh-input"
                          placeholder={{this.serpTitle}}
                          value={{@post.metaTitle}}
                          maxlength="300"
                          {{on "blur" this.setMetaTitle}}
                          {{on-key "Enter" this.blurElement}}
                          {{on-key "Escape" (fn this.cancelEdit "metaTitle")}}
                          {{autofocus}}
                          data-prevent-escape-close-modal="true"
                      >
                  {{else}}
                      <div class="gh-seo-preview-title editable pointer" {{on "click" this.editMetaTitle}}>
                          {{this.serpTitle}}
                      </div>
                  {{/if}}
                  {{#if this.editingMetaDescription}}
                      <textarea
                          class="gh-input"
                          placeholder={{this.serpDescription}}
                          maxlength="500"
                          {{on "blur" this.setMetaDescription}}
                          {{on-key "Enter" this.blurElement}}
                          {{on-key "Escape" (fn this.cancelEdit "metaDescription")}}
                          {{autofocus}}
                          data-prevent-escape-close-modal="true"
                      >{{@post.metaDescription}}</textarea>
                  {{else}}
                      <div class="gh-seo-preview-desc editable pointer" {{on "click" this.editMetaDescription}}>
                          {{moment-format (now) "DD MMM YYYY"}} — {{truncate this.serpDescription 149}}
                      </div>
                  {{/if}}
              </div>
          </div>
      </div>
  </div>
  */
  {
    "id": "u5AX53M6",
    "block": "{\"symbols\":[\"uploader\",\"error\",\"uploader\",\"error\",\"@post\"],\"statements\":[[2,\"\\n\"],[10,\"div\"],[14,0,\"gh-post-preview-social-container\"],[12],[2,\"\\n    \"],[10,\"p\"],[14,0,\"mb4\"],[12],[2,\"This is how your content will look when shared, you can click on any elements you’d like to edit.\"],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"flex flex-column\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"flex gh-social-container-responsive\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-social-og-container\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"flex ma3 mb2\"],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[1,[30,[36,7],[\"social-facebook\"],[[\"class\"],[\"social-icon\"]]]],[13],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-social-og-title\"],[12],[1,[30,[36,10],[[32,0,[\"settings\",\"metaTitle\"]],[32,0,[\"settings\",\"title\"]]],null]],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-social-og-time\"],[12],[2,\"12 hrs\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"flex flex-column ma3 mt2\"],[12],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-100 mb2\"],[12],[13],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-100 mb2\"],[12],[13],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-60\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[11,\"div\"],[24,0,\"gh-social-og-preview\"],[4,[38,0],[\"mouseenter\",[30,[36,13],[[32,0],[30,[36,12],[[32,0,[\"facebookHovered\"]]],null],true],null]],null],[4,[38,0],[\"mouseleave\",[30,[36,13],[[32,0],[30,[36,12],[[32,0,[\"facebookHovered\"]]],null],false],null]],null],[12],[2,\"\\n\"],[6,[37,8],[[30,[36,11],[[32,0,[\"facebookHovered\"]],[30,[36,14],[[32,0,[\"facebookImage\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[11,\"button\"],[24,0,\"gh-social-og-preview-img-add\"],[4,[38,0],[\"click\",[30,[36,5],[[32,0,[\"triggerFileDialog\"]],\"facebook\"],null]],null],[12],[2,\"+ Add image\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@onComplete\"],[[32,0,[\"imageExtensions\"]],[32,0,[\"setFacebookImage\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,16],[[30,[36,15],[[30,[36,15],[[32,3,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"error pa2\"],[12],[10,\"span\"],[14,0,\"response\"],[12],[1,[30,[36,10],[[32,4,[\"context\"]],[32,4,[\"message\"]]],null]],[13],[13],[2,\"\\n\"]],\"parameters\":[4]}]]],[2,\"\\n\"],[6,[37,8],[[30,[36,10],[[32,0,[\"facebookImage\"]],[32,3,[\"isUploading\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"gh-social-og-preview-image relative\"],[15,5,[30,[36,9],[[32,0,[\"facebookImage\"]]],null]],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"flex h-100 items-center justify-center\"],[12],[2,\"\\n\"],[6,[37,8],[[30,[36,10],[[32,0,[\"facebookHovered\"]],[32,3,[\"isUploading\"]]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,8],[[32,3,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                            \"],[1,[32,3,[\"progressBar\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-white\"],[24,4,\"button\"],[4,[38,0],[\"click\",[30,[36,5],[[32,0,[\"triggerFileDialog\"]],\"facebook\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,8],[[32,5,[\"ogImage\"]],\"Change\",\"Upload\"],null]],[2,\" image\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,8],[[30,[36,11],[[32,0,[\"facebookHovered\"]],[32,5,[\"ogImage\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black gh-btn-icon gh-social-preview-img-delete\"],[24,\"title\",\"Remove custom Facebook image\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"clearFacebookImage\"]]],null],[12],[2,\"\\n                                            \"],[10,\"span\"],[12],[1,[30,[36,7],[\"trash\"],null]],[13],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Remove custom Facebook image\"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                            \"],[8,\"gh-file-input\",[[24,1,\"facebookFileInput\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[32,3,[\"setFiles\"]],[32,0,[\"imageMimeTypes\"]]]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[3]}]]],[2,\"\\n\\n                    \"],[10,\"div\"],[14,0,\"gh-social-og-preview-bookmark\"],[12],[2,\"\\n\"],[2,\"                        \"],[10,\"div\"],[15,0,[31,[\"gh-social-og-preview-content \",[30,[36,8],[[32,0,[\"editingFacebookTitle\"]],\"edit-mode\"],null],\" \",[30,[36,8],[[32,0,[\"editingFacebookDescription\"]],\"edit-mode\"],null]]]],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-social-og-preview-meta\"],[12],[2,\"\\n                                \"],[1,[32,0,[\"config\",\"blogDomain\"]]],[2,\"\\n                            \"],[13],[2,\"\\n\"],[6,[37,8],[[32,0,[\"editingFacebookTitle\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[11,\"input\"],[24,0,\"gh-input\"],[16,\"placeholder\",[32,0,[\"facebookTitle\"]]],[16,2,[32,5,[\"ogTitle\"]]],[24,\"maxlength\",\"300\"],[24,\"data-prevent-escape-close-modal\",\"true\"],[24,4,\"text\"],[4,[38,0],[\"blur\",[32,0,[\"setFacebookTitle\"]]],null],[4,[38,4],[\"Enter\",[32,0,[\"blurElement\"]]],null],[4,[38,4],[\"Escape\",[30,[36,5],[[32,0,[\"cancelEdit\"]],\"ogTitle\"],null]],null],[4,[38,6],null,null],[12],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[11,\"div\"],[24,0,\"gh-social-og-preview-title editable pointer\"],[4,[38,0],[\"click\",[32,0,[\"editFacebookTitle\"]]],null],[12],[2,\"\\n                                    \"],[1,[30,[36,3],[[32,0,[\"facebookTitle\"]]],null]],[2,\"\\n                                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,8],[[32,0,[\"editingFacebookDescription\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[11,\"textarea\"],[24,0,\"gh-input\"],[24,\"maxlength\",\"500\"],[16,\"placeholder\",[30,[36,3],[[32,0,[\"facebookDescription\"]],160],null]],[24,\"data-prevent-escape-close-modal\",\"true\"],[4,[38,0],[\"blur\",[32,0,[\"setFacebookDescription\"]]],null],[4,[38,4],[\"Enter\",[32,0,[\"blurElement\"]]],null],[4,[38,4],[\"Escape\",[30,[36,5],[[32,0,[\"cancelEdit\"]],\"ogDescription\"],null]],null],[4,[38,6],null,null],[12],[1,[32,5,[\"ogDescription\"]]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[11,\"div\"],[24,0,\"gh-social-og-preview-desc editable pointer\"],[4,[38,0],[\"click\",[32,0,[\"editFacebookDescription\"]]],null],[12],[2,\"\\n                                    \"],[1,[30,[36,3],[[32,0,[\"facebookDescription\"]]],null]],[2,\"\\n                                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-social-og-reactions\"],[12],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-social-og-likes\"],[12],[1,[30,[36,7],[\"facebook-like\"],[[\"class\"],[\"z-999\"]]]],[1,[30,[36,7],[\"facebook-heart\"],[[\"class\"],[\"nl1\"]]]],[2,\"182\"],[13],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-social-og-comments\"],[12],[2,\"7 comments\"],[13],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-social-og-comments ml2\"],[12],[2,\"2 shares\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-social-twitter-container\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"flex ma4\"],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[1,[30,[36,7],[\"social-twitter\"],[[\"class\"],[\"social-icon\"]]]],[13],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"gh-social-og-title\"],[12],[1,[30,[36,10],[[32,0,[\"settings\",\"metaTitle\"]],[32,0,[\"settings\",\"title\"]]],null]],[13],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"gh-social-og-time\"],[12],[2,\"12 hrs\"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"flex flex-column mt2 mb3\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-100 mb2\"],[12],[13],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-60\"],[12],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[11,\"div\"],[24,0,\"gh-social-twitter-post-preview\"],[4,[38,0],[\"mouseenter\",[30,[36,13],[[32,0],[30,[36,12],[[32,0,[\"twitterHovered\"]]],null],true],null]],null],[4,[38,0],[\"mouseleave\",[30,[36,13],[[32,0],[30,[36,12],[[32,0,[\"twitterHovered\"]]],null],false],null]],null],[12],[2,\"\\n\"],[6,[37,8],[[30,[36,11],[[32,0,[\"twitterHovered\"]],[30,[36,14],[[32,0,[\"twitterImage\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[11,\"button\"],[24,0,\"gh-social-twitter-preview-img-add\"],[4,[38,0],[\"click\",[30,[36,5],[[32,0,[\"triggerFileDialog\"]],\"twitter\"],null]],null],[12],[2,\"+ Add image\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@onComplete\"],[[32,0,[\"imageExtensions\"]],[32,0,[\"setTwitterImage\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,16],[[30,[36,15],[[30,[36,15],[[32,1,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[10,\"div\"],[14,0,\"error pa2\"],[12],[10,\"span\"],[14,0,\"response\"],[12],[1,[30,[36,10],[[32,2,[\"context\"]],[32,2,[\"message\"]]],null]],[13],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"\\n\"],[6,[37,8],[[30,[36,10],[[32,0,[\"twitterImage\"]],[32,1,[\"isUploading\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-image relative\"],[15,5,[30,[36,9],[[32,0,[\"twitterImage\"]]],null]],[12],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"flex h-100 items-center justify-center\"],[12],[2,\"\\n\"],[6,[37,8],[[30,[36,10],[[32,0,[\"twitterHovered\"]],[32,1,[\"isUploading\"]]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,8],[[32,1,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                    \"],[1,[32,1,[\"progressBar\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-white\"],[24,4,\"button\"],[4,[38,0],[\"click\",[30,[36,5],[[32,0,[\"triggerFileDialog\"]],\"twitter\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,8],[[32,5,[\"twitterImage\"]],\"Change\",\"Upload\"],null]],[2,\" image\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,8],[[30,[36,11],[[32,0,[\"twitterHovered\"]],[32,5,[\"twitterImage\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                                \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black gh-btn-icon gh-social-preview-img-delete\"],[24,\"title\",\"Remove custom Twitter image\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"clearTwitterImage\"]]],null],[12],[2,\"\\n                                                    \"],[10,\"span\"],[12],[1,[30,[36,7],[\"trash\"],null]],[13],[2,\"\\n                                                    \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Remove custom Twitter image\"],[13],[2,\"\\n                                                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                                \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                                    \"],[8,\"gh-file-input\",[[24,1,\"twitterFileInput\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[32,1,[\"setFiles\"]],[32,0,[\"imageMimeTypes\"]]]],null],[2,\"\\n                                \"],[13],[2,\"\\n                            \"]],\"parameters\":[1]}]]],[2,\"\\n\\n                            \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-content\"],[12],[2,\"\\n\"],[6,[37,8],[[32,0,[\"editingTwitterTitle\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[11,\"input\"],[24,0,\"gh-input\"],[16,\"placeholder\",[32,0,[\"twitterTitle\"]]],[16,2,[32,5,[\"twitterTitle\"]]],[24,\"maxlength\",\"300\"],[24,\"data-prevent-escape-close-modal\",\"true\"],[24,4,\"text\"],[4,[38,0],[\"blur\",[32,0,[\"setTwitterTitle\"]]],null],[4,[38,4],[\"Enter\",[32,0,[\"blurElement\"]]],null],[4,[38,4],[\"Escape\",[30,[36,5],[[32,0,[\"cancelEdit\"]],\"twitterTitle\"],null]],null],[4,[38,6],null,null],[12],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[11,\"div\"],[24,0,\"gh-social-twitter-preview-title editable pointer\"],[4,[38,0],[\"click\",[32,0,[\"editTwitterTitle\"]]],null],[12],[1,[32,0,[\"twitterTitle\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,8],[[32,0,[\"editingTwitterDescription\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[11,\"textarea\"],[24,0,\"gh-input\"],[24,\"maxlength\",\"500\"],[16,\"placeholder\",[30,[36,3],[[32,0,[\"twitterDescription\"]],160],null]],[24,\"data-prevent-escape-close-modal\",\"true\"],[4,[38,0],[\"blur\",[32,0,[\"setTwitterDescription\"]]],null],[4,[38,4],[\"Enter\",[32,0,[\"blurElement\"]]],null],[4,[38,4],[\"Escape\",[30,[36,5],[[32,0,[\"cancelEdit\"]],\"twitterDescription\"],null]],null],[4,[38,6],null,null],[12],[1,[32,5,[\"twitterDescription\"]]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[11,\"div\"],[24,0,\"gh-social-twitter-preview-desc editable pointer\"],[4,[38,0],[\"click\",[32,0,[\"editTwitterDescription\"]]],null],[12],[1,[30,[36,3],[[32,0,[\"twitterDescription\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-meta\"],[12],[2,\"\\n                                    \"],[1,[30,[36,7],[\"twitter-link\"],null]],[2,\"\\n                                    \"],[1,[32,0,[\"config\",\"blogDomain\"]]],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-social-twitter-reactions\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[1,[30,[36,7],[\"twitter-comment\"],null]],[2,\"2\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[1,[30,[36,7],[\"twitter-retweet\"],null]],[2,\"11\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[1,[30,[36,7],[\"twitter-like\"],null]],[2,\"32\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[1,[30,[36,7],[\"twitter-share\"],null]],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-seo-preview-container\"],[12],[2,\"\\n            \"],[1,[30,[36,7],[\"google\"],null]],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-seo-preview\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-seo-search-bar mb12\"],[12],[1,[30,[36,7],[\"google-search\"],null]],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-seo-preview-link\"],[12],[1,[32,0,[\"serpURL\"]]],[13],[2,\"\\n\"],[6,[37,8],[[32,0,[\"editingMetaTitle\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[11,\"input\"],[24,0,\"gh-input\"],[16,\"placeholder\",[32,0,[\"serpTitle\"]]],[16,2,[32,5,[\"metaTitle\"]]],[24,\"maxlength\",\"300\"],[24,\"data-prevent-escape-close-modal\",\"true\"],[24,4,\"text\"],[4,[38,0],[\"blur\",[32,0,[\"setMetaTitle\"]]],null],[4,[38,4],[\"Enter\",[32,0,[\"blurElement\"]]],null],[4,[38,4],[\"Escape\",[30,[36,5],[[32,0,[\"cancelEdit\"]],\"metaTitle\"],null]],null],[4,[38,6],null,null],[12],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[11,\"div\"],[24,0,\"gh-seo-preview-title editable pointer\"],[4,[38,0],[\"click\",[32,0,[\"editMetaTitle\"]]],null],[12],[2,\"\\n                        \"],[1,[32,0,[\"serpTitle\"]]],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,8],[[32,0,[\"editingMetaDescription\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[11,\"textarea\"],[24,0,\"gh-input\"],[16,\"placeholder\",[32,0,[\"serpDescription\"]]],[24,\"maxlength\",\"500\"],[24,\"data-prevent-escape-close-modal\",\"true\"],[4,[38,0],[\"blur\",[32,0,[\"setMetaDescription\"]]],null],[4,[38,4],[\"Enter\",[32,0,[\"blurElement\"]]],null],[4,[38,4],[\"Escape\",[30,[36,5],[[32,0,[\"cancelEdit\"]],\"metaDescription\"],null]],null],[4,[38,6],null,null],[12],[1,[32,5,[\"metaDescription\"]]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[11,\"div\"],[24,0,\"gh-seo-preview-desc editable pointer\"],[4,[38,0],[\"click\",[32,0,[\"editMetaDescription\"]]],null],[12],[2,\"\\n                        \"],[1,[30,[36,2],[[30,[36,1],null,null],\"DD MMM YYYY\"],null]],[2,\" — \"],[1,[30,[36,3],[[32,0,[\"serpDescription\"]],149],null]],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\",\"now\",\"moment-format\",\"truncate\",\"on-key\",\"fn\",\"autofocus\",\"svg-jar\",\"if\",\"background-image-style\",\"or\",\"and\",\"mut\",\"action\",\"not\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/modals/post-preview/social.hbs"
  });

  let ModalPostPreviewSocialComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._tracked, _dec10 = Ember._action, _dec11 = Ember._action, _dec12 = Ember._action, _dec13 = Ember._action, _dec14 = Ember._action, _dec15 = Ember._action, _dec16 = Ember._action, _dec17 = Ember._action, _dec18 = Ember._action, _dec19 = Ember._action, _dec20 = Ember._action, _dec21 = Ember._action, _dec22 = Ember._action, _dec23 = Ember._action, _dec24 = Ember._action, _dec25 = Ember._action, _dec26 = Ember._action, _dec27 = Ember._action, _dec28 = Ember._action, (_class = class ModalPostPreviewSocialComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor3, this);

      _initializerDefineProperty(this, "editingFacebookTitle", _descriptor4, this);

      _initializerDefineProperty(this, "editingFacebookDescription", _descriptor5, this);

      _initializerDefineProperty(this, "editingTwitterTitle", _descriptor6, this);

      _initializerDefineProperty(this, "editingTwitterDescription", _descriptor7, this);

      _initializerDefineProperty(this, "editingMetaTitle", _descriptor8, this);

      _initializerDefineProperty(this, "editingMetaDescription", _descriptor9, this);

      _defineProperty(this, "imageExtensions", _ghImageUploader.IMAGE_EXTENSIONS);

      _defineProperty(this, "imageMimeTypes", _ghImageUploader.IMAGE_MIME_TYPES);
    }

    get _fallbackDescription() {
      return this.args.post.customExcerpt || this.serpDescription || this.settings.get('description');
    }

    blurElement(event) {
      if (!event.shiftKey) {
        event.preventDefault();
        event.target.blur();
      }
    }

    triggerFileDialog(name) {
      const input = document.querySelector(`#${name}FileInput input`);

      if (input) {
        input.click();
      }
    } // SERP


    get serpTitle() {
      return this.args.post.metaTitle || this.args.post.title || '(Untitled)';
    }

    get serpURL() {
      const urlParts = [];

      if (this.args.post.canonicalUrl) {
        const canonicalUrl = new URL(this.args.post.canonicalUrl);
        urlParts.push(canonicalUrl.host);
        urlParts.push(...canonicalUrl.pathname.split('/').reject(p => !p));
      } else {
        const blogUrl = new URL(this.config.get('blogUrl'));
        urlParts.push(blogUrl.host);
        urlParts.push(...blogUrl.pathname.split('/').reject(p => !p));
        urlParts.push(this.args.post.slug);
      }

      return urlParts.join(' > ');
    }

    get serpDescription() {
      return this.args.post.metaDescription || this.args.post.excerpt;
    }

    editMetaTitle() {
      this.editingMetaTitle = true;
    }

    setMetaTitle(event) {
      const title = event.target.value;
      this.args.post.metaTitle = title.trim();
      this.args.post.save();
      this.editingMetaTitle = false;
    }

    editMetaDescription() {
      this.editingMetaDescription = true;
    }

    setMetaDescription(event) {
      const description = event.target.value;
      this.args.post.metaDescription = description.trim();
      this.args.post.save();
      this.editingMetaDescription = false;
    } // Facebook


    get facebookTitle() {
      return this.args.post.ogTitle || this.serpTitle;
    }

    get facebookDescription() {
      return this.args.post.ogDescription || this._fallbackDescription;
    }

    get facebookImage() {
      return this.args.post.ogImage || this.args.post.featureImage || this.settings.get('ogImage') || this.settings.get('coverImage');
    }

    editFacebookTitle() {
      this.editingFacebookTitle = true;
    }

    cancelEdit(property, event) {
      event.preventDefault();
      event.target.value = this.args.post[property];
      event.target.blur();
    }

    setFacebookTitle(event) {
      const title = event.target.value;
      this.args.post.ogTitle = title.trim();
      this.args.post.save();
      this.editingFacebookTitle = false;
    }

    editFacebookDescription() {
      this.editingFacebookDescription = true;
    }

    setFacebookDescription() {
      const description = event.target.value;
      this.args.post.ogDescription = description.trim();
      this.args.post.save();
      this.editingFacebookDescription = false;
    }

    setFacebookImage(_ref2) {
      let [image] = _ref2;
      this.args.post.ogImage = image.url;
      this.args.post.save();
    }

    clearFacebookImage() {
      this.args.post.ogImage = null;
      this.args.post.save();
    } // Twitter


    get twitterTitle() {
      return this.args.post.twitterTitle || this.serpTitle;
    }

    get twitterDescription() {
      return this.args.post.twitterDescription || this._fallbackDescription;
    }

    get twitterImage() {
      return this.args.post.twitterImage || this.args.post.featureImage || this.settings.get('twitterImage') || this.settings.get('coverImage');
    }

    editTwitterTitle() {
      this.editingTwitterTitle = true;
    }

    setTwitterTitle(event) {
      const title = event.target.value;
      this.args.post.twitterTitle = title.trim();
      this.args.post.save();
      this.editingTwitterTitle = false;
    }

    editTwitterDescription() {
      this.editingTwitterDescription = true;
    }

    setTwitterDescription() {
      const description = event.target.value;
      this.args.post.twitterDescription = description.trim();
      this.args.post.save();
      this.editingTwitterDescription = false;
    }

    setTwitterImage(_ref3) {
      let [image] = _ref3;
      this.args.post.twitterImage = image.url;
      this.args.post.save();
    }

    clearTwitterImage() {
      this.args.post.twitterImage = null;
      this.args.post.save();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "editingFacebookTitle", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "editingFacebookDescription", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "editingTwitterTitle", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "editingTwitterDescription", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "editingMetaTitle", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "editingMetaDescription", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "blurElement", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "blurElement"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "triggerFileDialog", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "triggerFileDialog"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "editMetaTitle", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "editMetaTitle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setMetaTitle", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, "setMetaTitle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "editMetaDescription", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "editMetaDescription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setMetaDescription", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, "setMetaDescription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "editFacebookTitle", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, "editFacebookTitle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "cancelEdit", [_dec17], Object.getOwnPropertyDescriptor(_class.prototype, "cancelEdit"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setFacebookTitle", [_dec18], Object.getOwnPropertyDescriptor(_class.prototype, "setFacebookTitle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "editFacebookDescription", [_dec19], Object.getOwnPropertyDescriptor(_class.prototype, "editFacebookDescription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setFacebookDescription", [_dec20], Object.getOwnPropertyDescriptor(_class.prototype, "setFacebookDescription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setFacebookImage", [_dec21], Object.getOwnPropertyDescriptor(_class.prototype, "setFacebookImage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "clearFacebookImage", [_dec22], Object.getOwnPropertyDescriptor(_class.prototype, "clearFacebookImage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "editTwitterTitle", [_dec23], Object.getOwnPropertyDescriptor(_class.prototype, "editTwitterTitle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setTwitterTitle", [_dec24], Object.getOwnPropertyDescriptor(_class.prototype, "setTwitterTitle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "editTwitterDescription", [_dec25], Object.getOwnPropertyDescriptor(_class.prototype, "editTwitterDescription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setTwitterDescription", [_dec26], Object.getOwnPropertyDescriptor(_class.prototype, "setTwitterDescription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setTwitterImage", [_dec27], Object.getOwnPropertyDescriptor(_class.prototype, "setTwitterImage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "clearTwitterImage", [_dec28], Object.getOwnPropertyDescriptor(_class.prototype, "clearTwitterImage"), _class.prototype)), _class));
  _exports.default = ModalPostPreviewSocialComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, ModalPostPreviewSocialComponent);
});
;define("ghost-admin/components/modals/search", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class;

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="modal-content">
      <div class="gh-nav-search-modal" {{on "click" this.focusFirstInput}}>
          <GhSearchInput class="gh-nav-search-input" @onSelected={{@close}} />
          <div class="gh-search-tips">Open with Ctrl/⌘ + K</div>
      </div>
  </div>
  */
  {
    "id": "W8dYWR3m",
    "block": "{\"symbols\":[\"@close\"],\"statements\":[[10,\"div\"],[14,0,\"modal-content\"],[12],[2,\"\\n    \"],[11,\"div\"],[24,0,\"gh-nav-search-modal\"],[4,[38,0],[\"click\",[32,0,[\"focusFirstInput\"]]],null],[12],[2,\"\\n        \"],[8,\"gh-search-input\",[[24,0,\"gh-nav-search-input\"]],[[\"@onSelected\"],[[32,1]]],null],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-search-tips\"],[12],[2,\"Open with Ctrl/⌘ + K\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\"]}",
    "moduleName": "ghost-admin/components/modals/search.hbs"
  });

  let SearchModalComponent = (_dec = Ember._action, (_class = class SearchModalComponent extends _component.default {
    focusFirstInput(mouseEvent) {
      mouseEvent.target.querySelector('input')?.focus();
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "focusFirstInput", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "focusFirstInput"), _class.prototype)), _class));
  _exports.default = SearchModalComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, SearchModalComponent);
});
;define("ghost-admin/components/object-bin", ["exports", "ember-drag-drop/components/object-bin"], function (_exports, _objectBin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _objectBin.default;
  _exports.default = _default;
});
;define("ghost-admin/components/one-way-select", ["exports", "ember-one-way-select/components/one-way-select"], function (_exports, _oneWaySelect) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _oneWaySelect.default;
    }
  });
});
;define("ghost-admin/components/one-way-select/option", ["exports", "ember-one-way-select/components/one-way-select/option"], function (_exports, _option) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _option.default;
    }
  });
});
;define("ghost-admin/components/power-calendar-multiple", ["exports", "ember-power-calendar/components/power-calendar-multiple"], function (_exports, _powerCalendarMultiple) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerCalendarMultiple.default;
    }
  });
});
;define("ghost-admin/components/power-calendar-multiple/days", ["exports", "ember-power-calendar/components/power-calendar-multiple/days"], function (_exports, _days) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _days.default;
    }
  });
});
;define("ghost-admin/components/power-calendar-range", ["exports", "ember-power-calendar/components/power-calendar-range"], function (_exports, _powerCalendarRange) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerCalendarRange.default;
    }
  });
});
;define("ghost-admin/components/power-calendar-range/days", ["exports", "ember-power-calendar/components/power-calendar-range/days"], function (_exports, _days) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _days.default;
    }
  });
});
;define("ghost-admin/components/power-calendar", ["exports", "ember-power-calendar/components/power-calendar"], function (_exports, _powerCalendar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerCalendar.default;
    }
  });
});
;define("ghost-admin/components/power-calendar/days", ["exports", "ember-power-calendar/components/power-calendar/days"], function (_exports, _days) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _days.default;
    }
  });
});
;define("ghost-admin/components/power-calendar/nav", ["exports", "ember-power-calendar/components/power-calendar/nav"], function (_exports, _nav) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _nav.default;
    }
  });
});
;define("ghost-admin/components/power-datepicker", ["exports", "ember-power-datepicker/components/power-datepicker"], function (_exports, _powerDatepicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerDatepicker.default;
    }
  });
});
;define("ghost-admin/components/power-select-multiple", ["exports", "ember-power-select/components/power-select-multiple"], function (_exports, _powerSelectMultiple) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerSelectMultiple.default;
    }
  });
});
;define("ghost-admin/components/power-select-multiple/trigger", ["exports", "ember-power-select/components/power-select-multiple/trigger"], function (_exports, _trigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _trigger.default;
    }
  });
});
;define("ghost-admin/components/power-select-vertical-collection-options", ["exports", "ember-power-select/components/power-select/options"], function (_exports, _options) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    
  <ul role="listbox" aria-controls="ember-power-select-trigger-{{@select.uniqueId}}" {{did-insert this.addHandlers}} ...attributes>
      {{#if @select.loading}}
          {{#if @loadingMessage}}
              <li class="ember-power-select-option ember-power-select-option--loading-message" role="option">{{@loadingMessage}}</li>
          {{/if}}
      {{/if}}
  
      {{#vertical-collection @options minHeight=30 estimateHeight=6 bufferSize=10 as |opt index|}}
          <li class="ember-power-select-option"
              aria-selected="{{ember-power-select-is-selected opt @select.selected}}"
              aria-disabled={{if opt.disabled "true"}}
              aria-current="{{eq opt @select.highlighted}}"
              data-option-index="{{@groupIndex}}{{index}}"
              role="option">
              {{yield opt @select}}
          </li>
      {{/vertical-collection}}
  </ul>
  */
  {
    "id": "Nqz2AV3b",
    "block": "{\"symbols\":[\"opt\",\"index\",\"@select\",\"@groupIndex\",\"&default\",\"@loadingMessage\",\"&attrs\",\"@options\"],\"statements\":[[2,\"\\n\"],[11,\"ul\"],[24,\"role\",\"listbox\"],[16,\"aria-controls\",[31,[\"ember-power-select-trigger-\",[32,3,[\"uniqueId\"]]]]],[17,7],[4,[38,3],[[32,0,[\"addHandlers\"]]],null],[12],[2,\"\\n\"],[6,[37,1],[[32,3,[\"loading\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[32,6]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"li\"],[14,0,\"ember-power-select-option ember-power-select-option--loading-message\"],[14,\"role\",\"option\"],[12],[1,[32,6]],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,4],[[32,8]],[[\"minHeight\",\"estimateHeight\",\"bufferSize\"],[30,6,10]],[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"li\"],[14,0,\"ember-power-select-option\"],[15,\"aria-selected\",[31,[[30,[36,0],[[32,1],[32,3,[\"selected\"]]],null]]]],[15,\"aria-disabled\",[30,[36,1],[[32,1,[\"disabled\"]],\"true\"],null]],[15,\"aria-current\",[31,[[30,[36,2],[[32,1],[32,3,[\"highlighted\"]]],null]]]],[15,\"data-option-index\",[31,[[32,4],[32,2]]]],[14,\"role\",\"option\"],[12],[2,\"\\n            \"],[18,5,[[32,1],[32,3]]],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[1,2]}]]],[13]],\"hasEval\":false,\"upvars\":[\"ember-power-select-is-selected\",\"if\",\"eq\",\"did-insert\",\"vertical-collection\"]}",
    "moduleName": "ghost-admin/components/power-select-vertical-collection-options.hbs"
  });

  class PowerSelectVerticalCollectionOptions extends _options.default {}

  _exports.default = PowerSelectVerticalCollectionOptions;

  window.__CLASSIC_OWN_CLASSES__.set(PowerSelectVerticalCollectionOptions, true);

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, PowerSelectVerticalCollectionOptions);
});
;define("ghost-admin/components/power-select", ["exports", "ember-power-select/components/power-select"], function (_exports, _powerSelect) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerSelect.default;
    }
  });
});
;define("ghost-admin/components/power-select/before-options", ["exports", "ember-power-select/components/power-select/before-options"], function (_exports, _beforeOptions) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _beforeOptions.default;
    }
  });
});
;define("ghost-admin/components/power-select/no-matches-message", ["exports", "ember-power-select/components/power-select/no-matches-message"], function (_exports, _noMatchesMessage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _noMatchesMessage.default;
    }
  });
});
;define("ghost-admin/components/power-select/options", ["exports", "ember-power-select/components/power-select/options"], function (_exports, _options) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _options.default;
    }
  });
});
;define("ghost-admin/components/power-select/placeholder", ["exports", "ember-power-select/components/power-select/placeholder"], function (_exports, _placeholder) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _placeholder.default;
    }
  });
});
;define("ghost-admin/components/power-select/power-select-group", ["exports", "ember-power-select/components/power-select/power-select-group"], function (_exports, _powerSelectGroup) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerSelectGroup.default;
    }
  });
});
;define("ghost-admin/components/power-select/search-message", ["exports", "ember-power-select/components/power-select/search-message"], function (_exports, _searchMessage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _searchMessage.default;
    }
  });
});
;define("ghost-admin/components/power-select/trigger", ["exports", "ember-power-select/components/power-select/trigger"], function (_exports, _trigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _trigger.default;
    }
  });
});
;define("ghost-admin/components/settings/design/general-settings-form", ["exports", "@glimmer/component", "ghost-admin/components/gh-image-uploader", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _component, _ghImageUploader, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-stack" ...attributes>
      <div class="gh-stack-item gh-setting-first">
          <div class="flex-grow-1">
              <div class="gh-setting-title">Site description</div>
              <div class="gh-setting-desc mb3">Used in your theme, meta data and search results</div>
              <div class="gh-setting-action" data-test-setting="description">
                  <GhFormGroup @errors={{this.settings.errors}} @hasValidated={{this.settings.hasValidated}} @property="description" @class="description-container-labs">
                      <GhTextInput
                          @value={{readonly this.settings.description}}
                          @input={{action (mut this.settings.description) value="target.value"}}
                          @focus-out={{fn this.updateSetting "description" this.settings.description}}
                          data-test-description-input={{true}}
                      />
                      <GhErrorMessage @errors={{this.settings.errors}} @property="description"/>
                  </GhFormGroup>
              </div>
          </div>
      </div>
  
      <div class="gh-stack-item gh-setting gh-accent-color">
          <div class="gh-setting-content">
              <div class="gh-setting-title">Accent color</div>
              <div class="gh-setting-desc">Primary color used in your publication theme</div>
              <div class="w-100 flex flex-column flex-row-ns">
                  <GhErrorMessage @errors={{settings.errors}} @property="accentColor" class="w-100 red"/>
              </div>
          </div>
  
          <div class="gh-setting-action" data-test-setting="accentColor">
              <GhFormGroup
                  @errors={{this.settings.errors}}
                  @hasValidated={{this.settings.hasValidated}}
                  @property="accentColor"
                  @class="input-color-form-group"
              >
                  <div class="input-color">
                      <input
                          type="text"
                          placeholder="15171A"
                          name="accent-color"
                          autocorrect="off"
                          maxlength="6"
                          value={{this.accentColor}}
                          class="gh-input"
                          {{on "input" (perform this.debounceUpdateAccentColor)}}
                          {{on "blur" this.updateAccentColor}}
                          {{on-key "Enter" this.blurElement}}
                          data-test-input="accentColor"
                      />
                      <div class="color-picker-horizontal-divider"></div>
                      <div
                          class="color-box-container"
                          style={{this.accentColorBgStlye}}
                      >
                          <input
                              type="color"
                              name="accent-color"
                              class="color-picker"
                              value="{{this.accentColorPickerValue}}"
                              {{on "input" (perform this.debounceUpdateAccentColor)}}
                          >
                      </div>
                  </div>
              </GhFormGroup>
          </div>
      </div>
  
      <div class="gh-stack-item gh-setting" data-test-setting="icon">
          <GhUploader
              @extensions={{this.iconExtensions}}
              @paramsHash={{hash purpose="icon"}}
              @onComplete={{fn this.imageUploaded "icon"}}
              as |uploader|
          >
          <div class="gh-setting-content">
              <div class="gh-setting-title">Publication icon</div>
              <div class="gh-setting-desc">A square, social icon, at least 60x60px</div>
              {{#each uploader.errors as |error|}}
                  <div class="gh-setting-error" data-test-error="icon">{{or error.context error.message}}</div>
              {{/each}}
          </div>
          <div class="gh-setting-action gh-uploadbutton-container gh-setting-action-smallimg flex flex-column">
              {{#if uploader.isUploading}}
                  {{uploader.progressBar}}
              {{else if this.settings.icon}}
                  <div class="gh-branding-image-container transparent-bg">
                      <img class="blog-icon" src="{{this.settings.icon}}" {{on "click" this.triggerFileDialog}} alt="icon" data-test-icon-img>
                      <button type="button" class="gh-setting-action-smallimg-delete" {{on "click" (fn this.updateSetting "icon" null)}} data-test-delete-image="icon">
                          {{svg-jar "trash" class="w4 h4 fill-white"}}
                      </button>
                  </div>
              {{else}}
                  <button type="button" class="gh-btn gh-btn-white self-center" {{on "click" triggerFileDialog}} data-test-image-upload-btn="icon">
                      <span>Upload icon</span>
                  </button>
              {{/if}}
              <div style="display:none">
                  <GhFileInput @multiple={{false}} @action={{uploader.setFiles}} @accept={{this.iconMimeTypes}} data-test-file-input="icon" />
              </div>
          </div>
          </GhUploader>
      </div>
  
      <div class="gh-stack-item gh-setting" data-test-setting="logo">
          <GhUploader
              @extensions={{this.imageExtensions}}
              @onComplete={{fn this.imageUploaded "logo"}}
              as |uploader|
          >
              <div>
                  <div class="gh-setting-title">Publication logo</div>
                  <div class="gh-setting-desc mb3">The primary logo, should be transparent and at least 600x72px</div>
  
                  <div class="gh-setting-action gh-uploadbutton-container gh-setting-action-smallimg flex flex-column">
                      {{#each uploader.errors as |error|}}
                          <div class="gh-setting-error" data-test-error="logo">{{or error.context error.message}}</div>
                      {{/each}}
                      {{#if uploader.isUploading}}
                          {{uploader.progressBar}}
                      {{else if this.settings.logo}}
                          <div class="gh-branding-image-container largeimg justify-center transparent-bg">
                              <img class="blog-logo" src="{{this.settings.logo}}" {{on "click" this.triggerFileDialog}} alt="logo" data-test-logo-img>
                              <button type="button" class="gh-setting-action-smallimg-delete" {{on "click" (fn this.updateSetting "logo" null)}} data-test-delete-image="logo">
                                  {{svg-jar "trash" class="w4 h4 fill-white"}}
                              </button>
                          </div>
                      {{else}}
                          <button type="button" class="gh-btn gh-btn-white self-start" {{on "click" this.triggerFileDialog}} data-test-image-upload-btn="logo">
                              <span>Upload logo</span>
                          </button>
                      {{/if}}
                      <div style="display:none">
                          <GhFileInput @multiple={{false}} @action={{uploader.setFiles}} @accept={{this.imageMimeTypes}} data-test-file-input="logo" />
                      </div>
                  </div>
              </div>
          </GhUploader>
      </div>
  
      <div class="gh-stack-item gh-setting" data-test-setting="coverImage">
          <GhUploader
              @extensions={{this.imageExtensions}}
              @onComplete={{fn this.imageUploaded "coverImage"}}
              as |uploader|
          >
          <div>
              <div class="gh-setting-title">Publication cover</div>
              <div class="gh-setting-desc mb3">An optional large background image for your site</div>
              {{#each uploader.errors as |error|}}
                  <div class="gh-setting-error" data-test-error="coverImage">{{or error.context error.message}}</div>
              {{/each}}
  
              <div class="gh-setting-action gh-uploadbutton-container flex flex-column items-stretch">
                  {{#if uploader.isUploading}}
                      {{uploader.progressBar}}
                  {{else if this.settings.coverImage}}
                      <div class="gh-branding-image-container largeimg justify-start">
                          <img class="blog-cover" src="{{this.settings.coverImage}}" {{on "click" this.triggerFileDialog}} alt="cover photo" data-test-cover-img>
                          <button type="button" class="gh-setting-action-largeimg-delete" {{on "click" (fn this.updateSetting "coverImage" null)}} data-test-delete-image="coverImage">
                              {{svg-jar "trash" class="w4 h4 fill-white"}}
                          </button>
                      </div>
                  {{else}}
                      <button type="button" class="gh-btn gh-btn-white self-start" {{on "click" this.triggerFileDialog}} data-test-image-upload-btn="coverImage">
                          <span>Upload cover</span>
                      </button>
                  {{/if}}
                  <div style="display:none">
                      <GhFileInput @multiple={{false}} @action={{uploader.setFiles}} @accept={{this.imageMimeTypes}} data-test-file-input="coverImage" />
                  </div>
              </div>
          </div>
          </GhUploader>
      </div>
  </div>
  */
  {
    "id": "BaSxmXvU",
    "block": "{\"symbols\":[\"uploader\",\"error\",\"uploader\",\"error\",\"uploader\",\"error\",\"&attrs\"],\"statements\":[[11,\"div\"],[24,0,\"gh-stack\"],[17,7],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting-first\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"flex-grow-1\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Site description\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-desc mb3\"],[12],[2,\"Used in your theme, meta data and search results\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-action\"],[14,\"data-test-setting\",\"description\"],[12],[2,\"\\n                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@class\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"description\",\"description-container-labs\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[8,\"gh-text-input\",[[16,\"data-test-description-input\",true]],[[\"@value\",\"@input\",\"@focus-out\"],[[30,[36,6],[[32,0,[\"settings\",\"description\"]]],null],[30,[36,8],[[32,0],[30,[36,7],[[32,0,[\"settings\",\"description\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,1],[[32,0,[\"updateSetting\"]],\"description\",[32,0,[\"settings\",\"description\"]]],null]]],null],[2,\"\\n                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"description\"]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting gh-accent-color\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-setting-content\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Accent color\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-desc\"],[12],[2,\"Primary color used in your publication theme\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"w-100 flex flex-column flex-row-ns\"],[12],[2,\"\\n                \"],[8,\"gh-error-message\",[[24,0,\"w-100 red\"]],[[\"@errors\",\"@property\"],[[34,9,[\"errors\"]],\"accentColor\"]],null],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-setting-action\"],[14,\"data-test-setting\",\"accentColor\"],[12],[2,\"\\n            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@class\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"accentColor\",\"input-color-form-group\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"div\"],[14,0,\"input-color\"],[12],[2,\"\\n                    \"],[11,\"input\"],[24,\"placeholder\",\"15171A\"],[24,3,\"accent-color\"],[24,\"autocorrect\",\"off\"],[24,\"maxlength\",\"6\"],[16,2,[32,0,[\"accentColor\"]]],[24,0,\"gh-input\"],[24,\"data-test-input\",\"accentColor\"],[24,4,\"text\"],[4,[38,0],[\"input\",[30,[36,10],[[32,0,[\"debounceUpdateAccentColor\"]]],null]],null],[4,[38,0],[\"blur\",[32,0,[\"updateAccentColor\"]]],null],[4,[38,11],[\"Enter\",[32,0,[\"blurElement\"]]],null],[12],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"color-picker-horizontal-divider\"],[12],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"color-box-container\"],[15,5,[32,0,[\"accentColorBgStlye\"]]],[12],[2,\"\\n                        \"],[11,\"input\"],[24,3,\"accent-color\"],[24,0,\"color-picker\"],[16,2,[31,[[32,0,[\"accentColorPickerValue\"]]]]],[24,4,\"color\"],[4,[38,0],[\"input\",[30,[36,10],[[32,0,[\"debounceUpdateAccentColor\"]]],null]],null],[12],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting\"],[14,\"data-test-setting\",\"icon\"],[12],[2,\"\\n        \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@paramsHash\",\"@onComplete\"],[[32,0,[\"iconExtensions\"]],[30,[36,12],null,[[\"purpose\"],[\"icon\"]]],[30,[36,1],[[32,0,[\"imageUploaded\"]],\"icon\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-setting-content\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Publication icon\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-desc\"],[12],[2,\"A square, social icon, at least 60x60px\"],[13],[2,\"\\n\"],[6,[37,14],[[30,[36,13],[[30,[36,13],[[32,5,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-setting-error\"],[14,\"data-test-error\",\"icon\"],[12],[1,[30,[36,4],[[32,6,[\"context\"]],[32,6,[\"message\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[6]}]]],[2,\"        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-setting-action gh-uploadbutton-container gh-setting-action-smallimg flex flex-column\"],[12],[2,\"\\n\"],[6,[37,3],[[32,5,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[1,[32,5,[\"progressBar\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[32,0,[\"settings\",\"icon\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-branding-image-container transparent-bg\"],[12],[2,\"\\n                    \"],[11,\"img\"],[24,0,\"blog-icon\"],[16,\"src\",[31,[[32,0,[\"settings\",\"icon\"]]]]],[24,\"alt\",\"icon\"],[24,\"data-test-icon-img\",\"\"],[4,[38,0],[\"click\",[32,0,[\"triggerFileDialog\"]]],null],[12],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-setting-action-smallimg-delete\"],[24,\"data-test-delete-image\",\"icon\"],[24,4,\"button\"],[4,[38,0],[\"click\",[30,[36,1],[[32,0,[\"updateSetting\"]],\"icon\",null],null]],null],[12],[2,\"\\n                        \"],[1,[30,[36,2],[\"trash\"],[[\"class\"],[\"w4 h4 fill-white\"]]]],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-white self-center\"],[24,\"data-test-image-upload-btn\",\"icon\"],[24,4,\"button\"],[4,[38,0],[\"click\",[35,5]],null],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Upload icon\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"            \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"icon\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[32,5,[\"setFiles\"]],[32,0,[\"iconMimeTypes\"]]]],null],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"]],\"parameters\":[5]}]]],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting\"],[14,\"data-test-setting\",\"logo\"],[12],[2,\"\\n        \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@onComplete\"],[[32,0,[\"imageExtensions\"]],[30,[36,1],[[32,0,[\"imageUploaded\"]],\"logo\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Publication logo\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-setting-desc mb3\"],[12],[2,\"The primary logo, should be transparent and at least 600x72px\"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"gh-setting-action gh-uploadbutton-container gh-setting-action-smallimg flex flex-column\"],[12],[2,\"\\n\"],[6,[37,14],[[30,[36,13],[[30,[36,13],[[32,3,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-setting-error\"],[14,\"data-test-error\",\"logo\"],[12],[1,[30,[36,4],[[32,4,[\"context\"]],[32,4,[\"message\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[4]}]]],[6,[37,3],[[32,3,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[1,[32,3,[\"progressBar\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[32,0,[\"settings\",\"logo\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-branding-image-container largeimg justify-center transparent-bg\"],[12],[2,\"\\n                            \"],[11,\"img\"],[24,0,\"blog-logo\"],[16,\"src\",[31,[[32,0,[\"settings\",\"logo\"]]]]],[24,\"alt\",\"logo\"],[24,\"data-test-logo-img\",\"\"],[4,[38,0],[\"click\",[32,0,[\"triggerFileDialog\"]]],null],[12],[13],[2,\"\\n                            \"],[11,\"button\"],[24,0,\"gh-setting-action-smallimg-delete\"],[24,\"data-test-delete-image\",\"logo\"],[24,4,\"button\"],[4,[38,0],[\"click\",[30,[36,1],[[32,0,[\"updateSetting\"]],\"logo\",null],null]],null],[12],[2,\"\\n                                \"],[1,[30,[36,2],[\"trash\"],[[\"class\"],[\"w4 h4 fill-white\"]]]],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-white self-start\"],[24,\"data-test-image-upload-btn\",\"logo\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"triggerFileDialog\"]]],null],[12],[2,\"\\n                            \"],[10,\"span\"],[12],[2,\"Upload logo\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                    \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                        \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"logo\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[32,3,[\"setFiles\"]],[32,0,[\"imageMimeTypes\"]]]],null],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"]],\"parameters\":[3]}]]],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-stack-item gh-setting\"],[14,\"data-test-setting\",\"coverImage\"],[12],[2,\"\\n        \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@onComplete\"],[[32,0,[\"imageExtensions\"]],[30,[36,1],[[32,0,[\"imageUploaded\"]],\"coverImage\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Publication cover\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-desc mb3\"],[12],[2,\"An optional large background image for your site\"],[13],[2,\"\\n\"],[6,[37,14],[[30,[36,13],[[30,[36,13],[[32,1,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-setting-error\"],[14,\"data-test-error\",\"coverImage\"],[12],[1,[30,[36,4],[[32,2,[\"context\"]],[32,2,[\"message\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-action gh-uploadbutton-container flex flex-column items-stretch\"],[12],[2,\"\\n\"],[6,[37,3],[[32,1,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[1,[32,1,[\"progressBar\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[32,0,[\"settings\",\"coverImage\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-branding-image-container largeimg justify-start\"],[12],[2,\"\\n                        \"],[11,\"img\"],[24,0,\"blog-cover\"],[16,\"src\",[31,[[32,0,[\"settings\",\"coverImage\"]]]]],[24,\"alt\",\"cover photo\"],[24,\"data-test-cover-img\",\"\"],[4,[38,0],[\"click\",[32,0,[\"triggerFileDialog\"]]],null],[12],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-setting-action-largeimg-delete\"],[24,\"data-test-delete-image\",\"coverImage\"],[24,4,\"button\"],[4,[38,0],[\"click\",[30,[36,1],[[32,0,[\"updateSetting\"]],\"coverImage\",null],null]],null],[12],[2,\"\\n                            \"],[1,[30,[36,2],[\"trash\"],[[\"class\"],[\"w4 h4 fill-white\"]]]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-white self-start\"],[24,\"data-test-image-upload-btn\",\"coverImage\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"triggerFileDialog\"]]],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Upload cover\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                    \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"coverImage\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[32,1,[\"setFiles\"]],[32,0,[\"imageMimeTypes\"]]]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"]],\"parameters\":[1]}]]],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"on\",\"fn\",\"svg-jar\",\"if\",\"or\",\"triggerFileDialog\",\"readonly\",\"mut\",\"action\",\"settings\",\"perform\",\"on-key\",\"hash\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/settings/design/general-settings-form.hbs"
  });

  let DesignTabGeneralSettingsComponent = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._action, _dec5 = Ember._action, _dec6 = Ember._action, _dec7 = Ember._action, _dec8 = Ember._action, _dec9 = (0, _emberConcurrencyDecorators.task)({
    restartable: true
  }), (_class = class DesignTabGeneralSettingsComponent extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor2, this);

      _initializerDefineProperty(this, "settings", _descriptor3, this);

      _defineProperty(this, "iconExtensions", _ghImageUploader.ICON_EXTENSIONS);

      _defineProperty(this, "iconMimeTypes", _ghImageUploader.ICON_MIME_TYPES);

      _defineProperty(this, "imageExtensions", _ghImageUploader.IMAGE_EXTENSIONS);

      _defineProperty(this, "imageMimeTypes", _ghImageUploader.IMAGE_MIME_TYPES);
    }

    get accentColor() {
      const color = this.settings.get('accentColor');

      if (color && color[0] === '#') {
        return color.slice(1);
      }

      return color;
    }

    get accentColorPickerValue() {
      return this.settings.get('accentColor') || '#ffffff';
    }

    get accentColorBgStyle() {
      return Ember.String.htmlSafe(`background-color: ${this.accentColorPickerValue}`);
    }

    get previewData() {
      const params = new URLSearchParams();
      params.append('c', this.accentColorPickerValue);
      params.append('icon', this.settings.get('icon'));
      params.append('logo', this.settings.get('logo'));
      params.append('cover', this.settings.get('coverImage'));
      return params.toString();
    }

    willDestroy() {
      super.willDestroy?.(...arguments);
      this.settings.errors.remove('accentColor');
    }

    triggerFileDialog(_ref2) {
      let {
        target
      } = _ref2;
      target.closest('.gh-setting-action')?.querySelector('input[type="file"]')?.click();
    }

    async imageUploaded(property, results) {
      if (results[0]) {
        this.settings.set(property, results[0].url);
        this.args.updatePreview();
      }
    }

    blurElement(event) {
      event.preventDefault();
      event.target.blur();
    }

    async updateSetting(setting, value) {
      this.settings.set(setting, value);
      await this.settings.validate({
        property: setting
      });
      this.args.updatePreview();
    }

    async updateAccentColor(event) {
      let newColor = event.target.value;
      const oldColor = this.settings.get('accentColor'); // reset errors and validation

      this.settings.errors.remove('accentColor');
      this.settings.hasValidated.removeObject('accentColor');

      if (newColor === '') {
        if (newColor === oldColor) {
          return;
        } // Don't allow empty accent color


        this.settings.errors.add('accentColor', 'Please select an accent color');
        this.settings.hasValidated.pushObject('accentColor');
        return;
      } // accentColor will be null unless the user has input something


      if (!newColor) {
        newColor = oldColor;
      }

      if (newColor[0] !== '#') {
        newColor = `#${newColor}`;
      }

      if (newColor.match(/#[0-9A-Fa-f]{6}$/)) {
        if (newColor === oldColor) {
          return;
        }

        this.settings.set('accentColor', newColor);
        this.args.updatePreview();
      } else {
        this.settings.errors.add('accentColor', 'Please enter a color in hex format');
        this.settings.hasValidated.pushObject('accentColor');
      }
    }

    *debounceUpdateAccentColor(event) {
      yield (0, _emberConcurrency.timeout)(500);
      this.updateAccentColor(event);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "triggerFileDialog", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "triggerFileDialog"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "imageUploaded", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "imageUploaded"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "blurElement", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "blurElement"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateSetting", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "updateSetting"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateAccentColor", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "updateAccentColor"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "debounceUpdateAccentColor", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "debounceUpdateAccentColor"), _class.prototype)), _class));
  _exports.default = DesignTabGeneralSettingsComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, DesignTabGeneralSettingsComponent);
});
;define("ghost-admin/components/settings/design/theme-settings-form", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-stack">
      <form>
          {{#each @themeSettings as |setting index|}}
              {{#if (eq setting.type "select")}}
                  <CustomThemeSettings::Select @setting={{setting}} @index={{index}} @onChange={{@updatePreview}} />
              {{/if}}
              {{#if (eq setting.type "boolean")}}
                  <CustomThemeSettings::Boolean @setting={{setting}} @index={{index}} @onChange={{@updatePreview}} />
              {{/if}}
              {{#if (eq setting.type "color")}}
                  <CustomThemeSettings::Color @setting={{setting}} @index={{index}} @onChange={{@updatePreview}} />
              {{/if}}
              {{#if (eq setting.type "text")}}
                  <CustomThemeSettings::Text @setting={{setting}} @index={{index}} @onChange={{@updatePreview}} />
              {{/if}}
              {{#if (eq setting.type "image")}}
                  <CustomThemeSettings::Image @setting={{setting}} @index={{index}} @onChange={{@updatePreview}} />
              {{/if}}
          {{/each}}
      </form>
  </div>
  */
  {
    "id": "X6W6cMx5",
    "block": "{\"symbols\":[\"setting\",\"index\",\"@updatePreview\",\"@themeSettings\"],\"statements\":[[10,\"div\"],[14,0,\"gh-stack\"],[12],[2,\"\\n    \"],[10,\"form\"],[12],[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[30,[36,2],[[32,4]],null]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[30,[36,0],[[32,1,[\"type\"]],\"select\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"custom-theme-settings/select\",[],[[\"@setting\",\"@index\",\"@onChange\"],[[32,1],[32,2],[32,3]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,1],[[30,[36,0],[[32,1,[\"type\"]],\"boolean\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"custom-theme-settings/boolean\",[],[[\"@setting\",\"@index\",\"@onChange\"],[[32,1],[32,2],[32,3]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,1],[[30,[36,0],[[32,1,[\"type\"]],\"color\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"custom-theme-settings/color\",[],[[\"@setting\",\"@index\",\"@onChange\"],[[32,1],[32,2],[32,3]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,1],[[30,[36,0],[[32,1,[\"type\"]],\"text\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"custom-theme-settings/text\",[],[[\"@setting\",\"@index\",\"@onChange\"],[[32,1],[32,2],[32,3]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,1],[[30,[36,0],[[32,1,[\"type\"]],\"image\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"custom-theme-settings/image\",[],[[\"@setting\",\"@index\",\"@onChange\"],[[32,1],[32,2],[32,3]]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[1,2]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"eq\",\"if\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/components/settings/design/theme-settings-form.hbs"
  });

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember._templateOnlyComponent());

  _exports.default = _default;
});
;define("ghost-admin/components/settings/members-default-post-access", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="mb4 gh-setting-large-dropdown">
      <div class="gh-expandable-header">
          <div>
              <h4 class="gh-expandable-title">Default post access</h4>
              <p class="gh-expandable-description">When a new post is created, who should have access?</p>
          </div>
      </div>
  
      <PowerSelect
          @options={{this.options}}
          @selected={{this.selectedOption}}
          @onChange={{this.setDefaultContentVisibility}}
          @disabled={{eq this.settings.membersSignupAccess "none"}}
          @triggerClass="gh-setting-dropdown"
          @dropdownClass="gh-setting-dropdown-list"
          as |option|
      >
          <div class="gh-setting-dropdown-content">
              {{svg-jar option.icon class=(concat "w8 h8 mr2 fill-" (or option.icon_color "green"))}}
              <div class="gh-radio-label">
                  {{option.name}}<br>
                  <div class="gh-radio-desc">{{option.description}}</div>
              </div>
          </div>
      </PowerSelect>
      {{#if this.hasVisibilityFilter}}
          <div class="mt2">
              <GhMembersSegmentSelect
                  @hideLabels={{true}}
                  @selectDefaultProduct={{true}}
                  @segment={{this.settings.defaultContentVisibility}}
                  @onChange={{action "setVisibility"}}
                  @renderInPlace={{true}}
                  @hideDefaultSegments={{true}}
                  @hideOptionsWhenAllSelected={{true}}
              />
              {{#if this.showSegmentError}}
                  <p class="response red">
                      Please select at least one tier
                  </p>
              {{/if}}
          </div>
      {{/if}}
  </div>
  
  */
  {
    "id": "NWVrFzfO",
    "block": "{\"symbols\":[\"option\"],\"statements\":[[10,\"div\"],[14,0,\"mb4 gh-setting-large-dropdown\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n        \"],[10,\"div\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Default post access\"],[13],[2,\"\\n            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"When a new post is created, who should have access?\"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[8,\"power-select\",[],[[\"@options\",\"@selected\",\"@onChange\",\"@disabled\",\"@triggerClass\",\"@dropdownClass\"],[[32,0,[\"options\"]],[32,0,[\"selectedOption\"]],[32,0,[\"setDefaultContentVisibility\"]],[30,[36,2],[[32,0,[\"settings\",\"membersSignupAccess\"]],\"none\"],null],\"gh-setting-dropdown\",\"gh-setting-dropdown-list\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-setting-dropdown-content\"],[12],[2,\"\\n            \"],[1,[30,[36,5],[[32,1,[\"icon\"]]],[[\"class\"],[[30,[36,4],[\"w8 h8 mr2 fill-\",[30,[36,3],[[32,1,[\"icon_color\"]],\"green\"],null]],null]]]]],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-radio-label\"],[12],[2,\"\\n                \"],[1,[32,1,[\"name\"]]],[10,\"br\"],[12],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-radio-desc\"],[12],[1,[32,1,[\"description\"]]],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[1]}]]],[2,\"\\n\"],[6,[37,1],[[32,0,[\"hasVisibilityFilter\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"mt2\"],[12],[2,\"\\n            \"],[8,\"gh-members-segment-select\",[],[[\"@hideLabels\",\"@selectDefaultProduct\",\"@segment\",\"@onChange\",\"@renderInPlace\",\"@hideDefaultSegments\",\"@hideOptionsWhenAllSelected\"],[true,true,[32,0,[\"settings\",\"defaultContentVisibility\"]],[30,[36,0],[[32,0],\"setVisibility\"],null],true,true,true]],null],[2,\"\\n\"],[6,[37,1],[[32,0,[\"showSegmentError\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"p\"],[14,0,\"response red\"],[12],[2,\"\\n                    Please select at least one tier\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"if\",\"eq\",\"or\",\"concat\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/settings/members-default-post-access.hbs"
  });

  let SettingsMembersDefaultPostAccess = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._tracked, _dec4 = Ember._action, _dec5 = Ember._action, (_class = class SettingsMembersDefaultPostAccess extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "settings", _descriptor, this);

      _initializerDefineProperty(this, "feature", _descriptor2, this);

      _initializerDefineProperty(this, "showSegmentError", _descriptor3, this);
    }

    get options() {
      const defaultOptions = [{
        name: 'Public',
        description: 'All site visitors to your site, no login required',
        value: 'public',
        icon: 'globe',
        icon_color: 'green'
      }, {
        name: 'Members only',
        description: 'All logged-in members',
        value: 'members',
        icon: 'members-all',
        icon_color: 'blue'
      }, {
        name: 'Paid-members only',
        description: 'Only logged-in members with an active Stripe subscription',
        value: 'paid',
        icon: 'members-paid',
        icon_color: 'pink'
      }];

      if (this.feature.get('multipleProducts')) {
        defaultOptions.push({
          name: 'Specific tier(s)',
          description: 'Members with any of the selected tiers',
          value: 'filter',
          icon: 'members-segment',
          icon_color: 'yellow'
        });
      }

      return defaultOptions;
    }

    get hasVisibilityFilter() {
      return this.feature.get('multipleProducts') && !['public', 'members', 'paid'].includes(this.settings.get('defaultContentVisibility'));
    }

    get selectedOption() {
      if (this.settings.get('membersSignupAccess') === 'none') {
        return this.options.find(o => o.value === 'public');
      }

      if (!['public', 'members', 'paid'].includes(this.settings.get('defaultContentVisibility'))) {
        return this.options.find(o => o.value === 'filter');
      }

      return this.options.find(o => o.value === this.settings.get('defaultContentVisibility'));
    }

    setVisibility(segment) {
      if (segment) {
        this.settings.set('defaultContentVisibility', segment);
        this.showSegmentError = false;
      } else {
        this.settings.set('defaultContentVisibility', '');
        this.showSegmentError = true;
      }
    }

    setDefaultContentVisibility(option) {
      if (this.settings.get('membersSignupAccess') !== 'none') {
        if (option.value === 'filter') {
          this.settings.set('defaultContentVisibility', '');
        } else {
          this.settings.set('defaultContentVisibility', option.value);
        }
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "showSegmentError", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "setVisibility", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "setVisibility"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setDefaultContentVisibility", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "setDefaultContentVisibility"), _class.prototype)), _class));
  _exports.default = SettingsMembersDefaultPostAccess;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, SettingsMembersDefaultPostAccess);
});
;define("ghost-admin/components/settings/members-email", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <section class="gh-main-section gh-setting-email-section">
      <div class="gh-expandable">
          <div class="gh-expandable-block">
              <div class="gh-expandable-header">
                  <div>
                      <h4 class="gh-expandable-title">Enable newsletter sending</h4>
                      <p class="gh-expandable-description">Newsletter features are active, posts can be sent by email</p>
                  </div>
                  <div class="for-switch">
                      <label class="switch" for="email-newsletter-enabled" {{on "click" (action "toggleEmailNewsletterEnabled")}}>
                          <input type="checkbox" checked={{this.emailNewsletterEnabled}} class="gh-input" {{on "click" (action "toggleEmailNewsletterEnabled")}} name="email-newsletter-enabled" data-test-checkbox="email-newsletter-enabled">
                          <span class="input-toggle-component mt1"></span>
                      </label>
                  </div>
              </div>
          </div>
      </div>
  </section>
  
  {{#if this.emailNewsletterEnabled}}
  
      <section class="gh-main-section gh-setting-email-section">
          <div class="gh-expandable">
              <div class="gh-expandable-block">
                  <div class="gh-expandable-header">
                      <div>
                          <h4 class="gh-expandable-title">Email design</h4>
                          <p class="gh-expandable-description">Customize the look and feel of your newsletters</p>
                      </div>
                      <button type="button" class="gh-btn gh-btn-green" {{on "click" @toggleEmailDesignSettings}} data-test-toggle-membersFrom><span> Customize design &rarr;</span></button>
                  </div>
              </div>
          </div>
      </section>
  
      <hr>
  
      <section class="gh-main-section gh-setting-email-section content-preview">
          <div>
              <div class="gh-expandable">
                  <div class="gh-setting-richdd-container gh-setting-rich-dropdown">
                      <div class="gh-expandable-header">
                          <div>
                              <h4 class="gh-expandable-title">Default newsletter recipients</h4>
                              <p class="gh-expandable-description">When you publish new content, who do you usually want to send it to?</p>
                          </div>
                      </div>
                      <Settings::MembersEmail::DefaultRecipientsSelect
                          @recipients={{this.recipientsSelectValue}}
                          @segment={{this.settings.editorDefaultEmailRecipientsFilter}}
                          @onRecipientsChange={{action "setDefaultEmailRecipients"}}
                          @onSegmentChange={{action "setDefaultEmailRecipientsFilter"}}
                      />
                  </div>
              </div>
              <div class="gh-expandable">
                  <div class="gh-expandable-block">
                      <div class="gh-expandable-header">
                          <div>
                              <h4 class="gh-expandable-title">Email addresses</h4>
                              <p class="gh-expandable-description">Contact information used for newsletters and member login emails</p>
                          </div>
                          <button type="button" class="gh-btn" {{action (toggle "membersFromOpen" this)}} data-test-toggle-membersFrom><span>{{if this.membersFromOpen "Close" "Expand"}}</span></button>
                      </div>
                      <div class="gh-expandable-content">
                          {{#liquid-if this.membersFromOpen}}
                              <div>
                                  <GhFormGroup>
                                      <label class="fw6 f8">Newsletter email address</label>
                                      <div class="flex items-center justify-center mt1">
                                          <GhTextInput
                                              @value={{readonly this.fromAddress}}
                                              @input={{action "setFromAddress" value="target.value"}}
                                              @class="gh-labs-members-emailinput"
                                          />
                                          <GhTaskButton
                                              @buttonText="Update newsletter address"
                                              @runningText="Sending..."
                                              @successText="Confirmation email sent"
                                              @disabled={{this.disableUpdateFromAddressButton}}
                                              @task={{this.updateFromAddress}}
                                              @class="gh-btn gh-btn-icon gh-btn-green gh-btn-textfield-group gh-labs-members-emaildropdown"
                                              data-test-button="update-from-address"
                                          />
                                      </div>
                                      <p>The address your newsletter posts are sent from</p>
                                  </GhFormGroup>
                                  {{#if this.showFromAddressConfirmation}}
                                  <div class="flex items-center green-d1 nt3 lh-1">
                                      {{svg-jar "check-circle" class="w4 h4 mr1 stroke-green-d1"}} <span class="nudge-left--2">Check your inbox and confirm before saving your settings</span>
                                  </div>
                                  {{/if}}
                              </div>
                              <GhFormGroup @class="for-select gh-members-defaultemaildd">
                                  <label class="fw6 f8" for="reply-address">Newsletter replies go to</label>
                                  <span class="gh-select mt1">
                                      {{one-way-select this.selectedReplyAddress
                                          id="reply-address"
                                          name="reply-address"
                                          options=(readonly this.replyAddresses)
                                          optionValuePath="value"
                                          optionLabelPath="label"
                                          update=(action "setReplyAddress")
                                      }}
                                      {{svg-jar "arrow-down-small"}}
                                  </span>
                                  <p>Where you receive responses to newsletters</p>
                              </GhFormGroup>
                          {{/liquid-if}}
                      </div>
                  </div>
              </div>
              <div class="gh-expandable">
                  <div class="gh-expandable-block">
                      <div class="gh-expandable-header">
                          <div>
                              <h4 class="gh-expandable-title">Enable newsletter open-rate</h4>
                              <p class="gh-expandable-description">Track how many members are reading your emails</p>
                          </div>
                          <div class="for-switch">
                              <label class="switch" for="email-track-opens" {{on "click" (action "toggleEmailTrackOpens")}}>
                                  <input type="checkbox" checked={{this.settings.emailTrackOpens}} class="gh-input" {{on "click" (action "toggleEmailTrackOpens")}} name="email-track-opens" data-test-checkbox="email-track-opens">
                                  <span class="input-toggle-component mt1"></span>
                              </label>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
          <div class="gh-email-publishmenu-preview">
              <h4 class="gh-main-section-header small bn">Preview</h4>
              <div class="gh-publishmenu-dropdown-container">
                  <div class="gh-publishmenu-dropdown">
                      <header class="gh-publishmenu-heading">Ready to <span class="gh-publishmenu-heading-dropdown">{{#if this.emailPreviewVisible}} publish & send {{else}} publish {{/if}}{{svg-jar "arrow-down"}}</span> this post?</header>
                      <section class="gh-publishmenu-content">
                          <div class="gh-publishmenu-section {{if this.emailPreviewVisible "" "mb7"}}">
                              <div class="gh-publishmenu-radio active">
                                  <div class="gh-publishmenu-radio-button"></div>
                                  <div class="gh-publishmenu-radio-content">
                                      <div class="gh-publishmenu-radio-label">Set it live now</div>
                                  </div>
                              </div>
                              <div class="gh-publishmenu-radio">
                                  <div class="gh-publishmenu-radio-button"></div>
                                  <div class="gh-publishmenu-radio-content">
                                      <div class="gh-publishmenu-radio-label">Schedule it for later</div>
                                  </div>
                              </div>
                          </div>
                          {{#if this.emailPreviewVisible}}
                              <div class="gh-publishmenu-section">
                                  <div class="gh-publishmenu-email">
                                      <div class="gh-publishmenu-email-label">
                                          <label class="gh-publishmenu-radio-label mb3">Send by email to</label>
                                          <div class="form-group">
                                              <GhMembersRecipientSelect
                                                  @filter={{this.settings.editorDefaultEmailRecipientsFilter}}
                                              />
                                          </div>
                                      </div>
                                  </div>
                              </div>
                          {{/if}}
                      </section>
                  </div>
              </div>
          </div>
      </section>
  
      {{#unless this.config.mailgunIsConfigured}}
          <hr>
          <section class="gh-main-section">
              <h4 class="gh-main-section-header small bn">Advanced</h4>
              <div class="gh-expandable">
                  <div class="gh-expandable-block">
                      <div class="gh-expandable-header">
                          <div>
                              <h4 class="gh-expandable-title">Mailgun configuration</h4>
                              <p class="gh-expandable-description">The Mailgun API is used for bulk email newsletter delivery. <a href="https://ghost.org/docs/faq/mailgun-newsletters/" target="_blank" rel="noopener">Why is this required?</a></p>
                          </div>
                          <button type="button" class="gh-btn" {{action (toggle "membersEmailOpen" this)}} data-test-toggle-membersemail>
                              <span>{{if this.membersEmailOpen "Close" "Expand"}}</span>
                          </button>
                      </div>
                      <div class="gh-expandable-content">
                          {{#liquid-if this.membersEmailOpen}}
                              <div class="flex flex-column flex">
                                  <GhFormGroup>
                                      <div class="flex items-center">
                                          <GhFormGroup @class="gh-mailgun-region no-margin">
                                              <label class="fw6 f8">Mailgun region</label>
                                              <div class="mt1">
                                                  <PowerSelect
                                                      @options={{this.mailgunRegions}}
                                                      @selected={{this.mailgunRegion}}
                                                      @onChange={{action "setMailgunRegion"}}
                                                      @class="gh-select"
                                                      @searchEnabled={{false}}
                                                      @triggerComponent="gh-power-select/trigger"
                                                      as |region|
                                                  >
                                                      {{region.flag}} {{region.name}}
                                                  </PowerSelect>
                                              </div>
                                          </GhFormGroup>
                                          <GhFormGroup @class="no-margin">
                                              <label class="fw6 f8">Mailgun domain</label>
                                              <GhTextInput
                                                  @value={{readonly this.mailgunSettings.domain}}
                                                  @input={{action "setMailgunDomain"}}
                                                  @class="mt1"
                                                  data-test-mailgun-domain-input={{true}}
                                              />
                                          </GhFormGroup>
                                      </div>
                                      <p>Find your Mailgun region and domain
                                          <a href="https://app.mailgun.com/app/sending/domains" target="_blank" class="fw5">here</a>
                                      </p>
                                  </GhFormGroup>
                                  <GhFormGroup>
                                      <label class="fw6 f8">Mailgun Private API key</label>
                                      <GhTextInput
                                          @type="password"
                                          @value={{readonly this.mailgunSettings.apiKey}}
                                          @input={{action "setMailgunApiKey"}}
                                          @class="mt1 password" @autocomplete="new-password"
                                          data-test-mailgun-api-key-input={{true}}
                                      />
                                      <p>Find your Mailgun API keys
                                          <a href="https://app.mailgun.com/app/account/security/api_keys" target="_blank" class="fw5">here</a>
                                      </p>
                                  </GhFormGroup>
                              </div>
                          {{/liquid-if}}
                      </div>
                  </div>
              </div>
          </section>
      {{/unless}}
  
  {{/if}}
  */
  {
    "id": "WIX5MtPx",
    "block": "{\"symbols\":[\"region\",\"@toggleEmailDesignSettings\"],\"statements\":[[10,\"section\"],[14,0,\"gh-main-section gh-setting-email-section\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Enable newsletter sending\"],[13],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Newsletter features are active, posts can be sent by email\"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"for-switch\"],[12],[2,\"\\n                    \"],[11,\"label\"],[24,0,\"switch\"],[24,\"for\",\"email-newsletter-enabled\"],[4,[38,7],[\"click\",[30,[36,0],[[32,0],\"toggleEmailNewsletterEnabled\"],null]],null],[12],[2,\"\\n                        \"],[11,\"input\"],[16,\"checked\",[32,0,[\"emailNewsletterEnabled\"]]],[24,0,\"gh-input\"],[24,3,\"email-newsletter-enabled\"],[24,\"data-test-checkbox\",\"email-newsletter-enabled\"],[24,4,\"checkbox\"],[4,[38,7],[\"click\",[30,[36,0],[[32,0],\"toggleEmailNewsletterEnabled\"],null]],null],[12],[13],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"input-toggle-component mt1\"],[12],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"emailNewsletterEnabled\"]]],null,[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[10,\"section\"],[14,0,\"gh-main-section gh-setting-email-section\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Email design\"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Customize the look and feel of your newsletters\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green\"],[24,\"data-test-toggle-membersFrom\",\"\"],[24,4,\"button\"],[4,[38,7],[\"click\",[32,2]],null],[12],[10,\"span\"],[12],[2,\" Customize design →\"],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"hr\"],[12],[13],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"gh-main-section gh-setting-email-section content-preview\"],[12],[2,\"\\n        \"],[10,\"div\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-setting-richdd-container gh-setting-rich-dropdown\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Default newsletter recipients\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"When you publish new content, who do you usually want to send it to?\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[8,\"settings/members-email/default-recipients-select\",[],[[\"@recipients\",\"@segment\",\"@onRecipientsChange\",\"@onSegmentChange\"],[[32,0,[\"recipientsSelectValue\"]],[32,0,[\"settings\",\"editorDefaultEmailRecipientsFilter\"]],[30,[36,0],[[32,0],\"setDefaultEmailRecipients\"],null],[30,[36,0],[[32,0],\"setDefaultEmailRecipientsFilter\"],null]]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Email addresses\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Contact information used for newsletters and member login emails\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-toggle-membersFrom\",\"\"],[24,4,\"button\"],[4,[38,0],[[32,0],[30,[36,2],[\"membersFromOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,3],[[32,0,[\"membersFromOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"membersFromOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[12],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,0,\"fw6 f8\"],[12],[2,\"Newsletter email address\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex items-center justify-center mt1\"],[12],[2,\"\\n                                        \"],[8,\"gh-text-input\",[],[[\"@value\",\"@input\",\"@class\"],[[30,[36,1],[[32,0,[\"fromAddress\"]]],null],[30,[36,0],[[32,0],\"setFromAddress\"],[[\"value\"],[\"target.value\"]]],\"gh-labs-members-emailinput\"]],null],[2,\"\\n                                        \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"update-from-address\"]],[[\"@buttonText\",\"@runningText\",\"@successText\",\"@disabled\",\"@task\",\"@class\"],[\"Update newsletter address\",\"Sending...\",\"Confirmation email sent\",[32,0,[\"disableUpdateFromAddressButton\"]],[32,0,[\"updateFromAddress\"]],\"gh-btn gh-btn-icon gh-btn-green gh-btn-textfield-group gh-labs-members-emaildropdown\"]],null],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"p\"],[12],[2,\"The address your newsletter posts are sent from\"],[13],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,3],[[32,0,[\"showFromAddressConfirmation\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"div\"],[14,0,\"flex items-center green-d1 nt3 lh-1\"],[12],[2,\"\\n                                    \"],[1,[30,[36,5],[\"check-circle\"],[[\"class\"],[\"w4 h4 mr1 stroke-green-d1\"]]]],[2,\" \"],[10,\"span\"],[14,0,\"nudge-left--2\"],[12],[2,\"Check your inbox and confirm before saving your settings\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                            \"],[8,\"gh-form-group\",[],[[\"@class\"],[\"for-select gh-members-defaultemaildd\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"label\"],[14,0,\"fw6 f8\"],[14,\"for\",\"reply-address\"],[12],[2,\"Newsletter replies go to\"],[13],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"gh-select mt1\"],[12],[2,\"\\n                                    \"],[1,[30,[36,6],[[32,0,[\"selectedReplyAddress\"]]],[[\"id\",\"name\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"update\"],[\"reply-address\",\"reply-address\",[30,[36,1],[[32,0,[\"replyAddresses\"]]],null],\"value\",\"label\",[30,[36,0],[[32,0],\"setReplyAddress\"],null]]]]],[2,\"\\n                                    \"],[1,[30,[36,5],[\"arrow-down-small\"],null]],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"p\"],[12],[2,\"Where you receive responses to newsletters\"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Enable newsletter open-rate\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Track how many members are reading your emails\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"for-switch\"],[12],[2,\"\\n                            \"],[11,\"label\"],[24,0,\"switch\"],[24,\"for\",\"email-track-opens\"],[4,[38,7],[\"click\",[30,[36,0],[[32,0],\"toggleEmailTrackOpens\"],null]],null],[12],[2,\"\\n                                \"],[11,\"input\"],[16,\"checked\",[32,0,[\"settings\",\"emailTrackOpens\"]]],[24,0,\"gh-input\"],[24,3,\"email-track-opens\"],[24,\"data-test-checkbox\",\"email-track-opens\"],[24,4,\"checkbox\"],[4,[38,7],[\"click\",[30,[36,0],[[32,0],\"toggleEmailTrackOpens\"],null]],null],[12],[13],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"input-toggle-component mt1\"],[12],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-email-publishmenu-preview\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Preview\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-publishmenu-dropdown-container\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-publishmenu-dropdown\"],[12],[2,\"\\n                    \"],[10,\"header\"],[14,0,\"gh-publishmenu-heading\"],[12],[2,\"Ready to \"],[10,\"span\"],[14,0,\"gh-publishmenu-heading-dropdown\"],[12],[6,[37,3],[[32,0,[\"emailPreviewVisible\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\" publish & send \"]],\"parameters\":[]},{\"statements\":[[2,\" publish \"]],\"parameters\":[]}]]],[1,[30,[36,5],[\"arrow-down\"],null]],[13],[2,\" this post?\"],[13],[2,\"\\n                    \"],[10,\"section\"],[14,0,\"gh-publishmenu-content\"],[12],[2,\"\\n                        \"],[10,\"div\"],[15,0,[31,[\"gh-publishmenu-section \",[30,[36,3],[[32,0,[\"emailPreviewVisible\"]],\"\",\"mb7\"],null]]]],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio active\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-button\"],[12],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-content\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-label\"],[12],[2,\"Set it live now\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-button\"],[12],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-content\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-publishmenu-radio-label\"],[12],[2,\"Schedule it for later\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"],[6,[37,3],[[32,0,[\"emailPreviewVisible\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"gh-publishmenu-section\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-publishmenu-email\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-publishmenu-email-label\"],[12],[2,\"\\n                                        \"],[10,\"label\"],[14,0,\"gh-publishmenu-radio-label mb3\"],[12],[2,\"Send by email to\"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                                            \"],[8,\"gh-members-recipient-select\",[],[[\"@filter\"],[[32,0,[\"settings\",\"editorDefaultEmailRecipientsFilter\"]]]],null],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,8],[[32,0,[\"config\",\"mailgunIsConfigured\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"hr\"],[12],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Advanced\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Mailgun configuration\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"The Mailgun API is used for bulk email newsletter delivery. \"],[10,\"a\"],[14,6,\"https://ghost.org/docs/faq/mailgun-newsletters/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[12],[2,\"Why is this required?\"],[13],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-toggle-membersemail\",\"\"],[24,4,\"button\"],[4,[38,0],[[32,0],[30,[36,2],[\"membersEmailOpen\",[32,0]],null]],null],[12],[2,\"\\n                            \"],[10,\"span\"],[12],[1,[30,[36,3],[[32,0,[\"membersEmailOpen\"]],\"Close\",\"Expand\"],null]],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"membersEmailOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"flex flex-column flex\"],[12],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                                        \"],[8,\"gh-form-group\",[],[[\"@class\"],[\"gh-mailgun-region no-margin\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                            \"],[10,\"label\"],[14,0,\"fw6 f8\"],[12],[2,\"Mailgun region\"],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"mt1\"],[12],[2,\"\\n                                                \"],[8,\"power-select\",[],[[\"@options\",\"@selected\",\"@onChange\",\"@class\",\"@searchEnabled\",\"@triggerComponent\"],[[32,0,[\"mailgunRegions\"]],[32,0,[\"mailgunRegion\"]],[30,[36,0],[[32,0],\"setMailgunRegion\"],null],\"gh-select\",false,\"gh-power-select/trigger\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                                    \"],[1,[32,1,[\"flag\"]]],[2,\" \"],[1,[32,1,[\"name\"]]],[2,\"\\n                                                \"]],\"parameters\":[1]}]]],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"]],\"parameters\":[]}]]],[2,\"\\n                                        \"],[8,\"gh-form-group\",[],[[\"@class\"],[\"no-margin\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                            \"],[10,\"label\"],[14,0,\"fw6 f8\"],[12],[2,\"Mailgun domain\"],[13],[2,\"\\n                                            \"],[8,\"gh-text-input\",[[16,\"data-test-mailgun-domain-input\",true]],[[\"@value\",\"@input\",\"@class\"],[[30,[36,1],[[32,0,[\"mailgunSettings\",\"domain\"]]],null],[30,[36,0],[[32,0],\"setMailgunDomain\"],null],\"mt1\"]],null],[2,\"\\n                                        \"]],\"parameters\":[]}]]],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"p\"],[12],[2,\"Find your Mailgun region and domain\\n                                        \"],[10,\"a\"],[14,6,\"https://app.mailgun.com/app/sending/domains\"],[14,\"target\",\"_blank\"],[14,0,\"fw5\"],[12],[2,\"here\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,0,\"fw6 f8\"],[12],[2,\"Mailgun Private API key\"],[13],[2,\"\\n                                    \"],[8,\"gh-text-input\",[[16,\"data-test-mailgun-api-key-input\",true]],[[\"@type\",\"@value\",\"@input\",\"@class\",\"@autocomplete\"],[\"password\",[30,[36,1],[[32,0,[\"mailgunSettings\",\"apiKey\"]]],null],[30,[36,0],[[32,0],\"setMailgunApiKey\"],null],\"mt1 password\",\"new-password\"]],null],[2,\"\\n                                    \"],[10,\"p\"],[12],[2,\"Find your Mailgun API keys\\n                                        \"],[10,\"a\"],[14,6,\"https://app.mailgun.com/app/account/security/api_keys\"],[14,\"target\",\"_blank\"],[14,0,\"fw5\"],[12],[2,\"here\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"readonly\",\"toggle\",\"if\",\"liquid-if\",\"svg-jar\",\"one-way-select\",\"on\",\"unless\"]}",
    "moduleName": "ghost-admin/components/settings/members-email.hbs"
  });

  const US = {
    flag: '🇺🇸',
    name: 'US',
    baseUrl: 'https://api.mailgun.net/v3'
  };
  const EU = {
    flag: '🇪🇺',
    name: 'EU',
    baseUrl: 'https://api.eu.mailgun.net/v3'
  };

  var _default = Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, Ember.Component.extend({
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),
    settings: Ember.inject.service(),
    replyAddresses: null,
    recipientsSelectValue: null,
    showFromAddressConfirmation: false,
    showEmailDesignSettings: false,
    emailNewsletterEnabled: Ember.computed('settings.editorDefaultEmailRecipients', function () {
      return this.get('settings.editorDefaultEmailRecipients') !== 'disabled';
    }),
    emailPreviewVisible: Ember.computed('recipientsSelectValue', function () {
      return this.recipientsSelectValue !== 'none';
    }),
    selectedReplyAddress: Ember.computed('settings.membersReplyAddress', function () {
      return this.replyAddresses.findBy('value', this.get('settings.membersReplyAddress'));
    }),
    disableUpdateFromAddressButton: Ember.computed('fromAddress', function () {
      const savedFromAddress = this.get('settings.membersFromAddress') || '';

      if (!savedFromAddress.includes('@') && this.config.emailDomain) {
        return !this.fromAddress || this.fromAddress === `${savedFromAddress}@${this.config.emailDomain}`;
      }

      return !this.fromAddress || this.fromAddress === savedFromAddress;
    }),
    mailgunRegion: Ember.computed('settings.mailgunBaseUrl', function () {
      if (!this.settings.get('mailgunBaseUrl')) {
        return US;
      }

      return [US, EU].find(region => {
        return region.baseUrl === this.settings.get('mailgunBaseUrl');
      });
    }),
    mailgunSettings: Ember.computed('settings.{mailgunBaseUrl,mailgunApiKey,mailgunDomain}', function () {
      return {
        apiKey: this.get('settings.mailgunApiKey') || '',
        domain: this.get('settings.mailgunDomain') || '',
        baseUrl: this.get('settings.mailgunBaseUrl') || ''
      };
    }),

    init() {
      this._super(...arguments);

      this.set('mailgunRegions', [US, EU]);
      this.set('replyAddresses', [{
        label: 'Newsletter email address (' + this.fromAddress + ')',
        value: 'newsletter'
      }, {
        label: 'Support email address (' + this.supportAddress + ')',
        value: 'support'
      }]); // set recipientsSelectValue as a static property because within this
      // component's lifecycle it's not always derived from the settings values.
      // e.g. can be set to "segment" when the filter is empty which is not derivable
      // from settings as it would equate to "none"

      this.set('recipientsSelectValue', this._getDerivedRecipientsSelectValue());
    },

    actions: {
      toggleFromAddressConfirmation() {
        this.toggleProperty('showFromAddressConfirmation');
      },

      closeEmailDesignSettings() {
        this.set('showEmailDesignSettings', false);
      },

      setMailgunDomain(event) {
        this.set('settings.mailgunDomain', event.target.value);

        if (!this.get('settings.mailgunBaseUrl')) {
          this.set('settings.mailgunBaseUrl', this.mailgunRegion.baseUrl);
        }
      },

      setMailgunApiKey(event) {
        this.set('settings.mailgunApiKey', event.target.value);

        if (!this.get('settings.mailgunBaseUrl')) {
          this.set('settings.mailgunBaseUrl', this.mailgunRegion.baseUrl);
        }
      },

      setMailgunRegion(region) {
        this.set('settings.mailgunBaseUrl', region.baseUrl);
      },

      setFromAddress(fromAddress) {
        this.setEmailAddress('fromAddress', fromAddress);
      },

      toggleEmailTrackOpens(event) {
        if (event) {
          event.preventDefault();
        }

        this.set('settings.emailTrackOpens', !this.emailTrackOpens);
      },

      toggleEmailNewsletterEnabled(event) {
        if (event) {
          event.preventDefault();
        }

        const newsletterEnabled = !this.emailNewsletterEnabled;

        if (newsletterEnabled) {
          this.set('settings.editorDefaultEmailRecipients', 'visibility');
        } else {
          this.set('settings.editorDefaultEmailRecipients', 'disabled');
          this.set('settings.editorDefaultEmailRecipientsFilter', null);
        }

        this.set('recipientsSelectValue', this._getDerivedRecipientsSelectValue());
      },

      setReplyAddress(event) {
        const newReplyAddress = event.value;
        this.set('settings.membersReplyAddress', newReplyAddress);
      },

      setDefaultEmailRecipients(value) {
        // Update the underlying setting properties to match the selected recipients option
        if (['visibility', 'disabled'].includes(value)) {
          this.settings.set('editorDefaultEmailRecipients', value);
          this.settings.set('editorDefaultEmailRecipientsFilter', null);
        } else {
          this.settings.set('editorDefaultEmailRecipients', 'filter');
        }

        if (value === 'all-members') {
          this.settings.set('editorDefaultEmailRecipientsFilter', 'status:free,status:-free');
        }

        if (value === 'paid-only') {
          this.settings.set('editorDefaultEmailRecipientsFilter', 'status:-free');
        }

        if (value === 'none') {
          this.settings.set('editorDefaultEmailRecipientsFilter', null);
        } // Update the value used to display the selected recipients option explicitly
        // because it's local non-derived state


        this.set('recipientsSelectValue', value);
      },

      setDefaultEmailRecipientsFilter(filter) {
        this.settings.set('editorDefaultEmailRecipientsFilter', filter);
      }

    },
    updateFromAddress: (0, _emberConcurrency.task)(function* () {
      let url = this.get('ghostPaths.url').api('/settings/members/email');

      try {
        const response = yield this.ajax.post(url, {
          data: {
            email: this.fromAddress,
            type: 'fromAddressUpdate'
          }
        });
        this.toggleProperty('showFromAddressConfirmation');
        return response;
      } catch (e) {
        // Failed to send email, retry
        return false;
      }
    }).drop(),

    _getDerivedRecipientsSelectValue() {
      const defaultEmailRecipients = this.settings.get('editorDefaultEmailRecipients');
      const defaultEmailRecipientsFilter = this.settings.get('editorDefaultEmailRecipientsFilter');

      if (defaultEmailRecipients === 'filter') {
        if (defaultEmailRecipientsFilter === 'status:free,status:-free') {
          return 'all-members';
        } else if (defaultEmailRecipientsFilter === 'status:-free') {
          return 'paid-only';
        } else if (defaultEmailRecipientsFilter === null) {
          return 'none';
        } else {
          return 'segment';
        }
      }

      return defaultEmailRecipients;
    }

  }));

  _exports.default = _default;
});
;define("ghost-admin/components/settings/members-email/default-recipients-select", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class;

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <PowerSelect
      @options={{this.options}}
      @selected={{this.selectedOption}}
      @onChange={{this.setRecipients}}
      @triggerClass="gh-setting-dropdown"
      @dropdownClass="gh-setting-dropdown-list"
      as |option|
  >
      <div class="gh-setting-dropdown-content">
          {{svg-jar option.icon class=(concat "w8 h8 mr2 fill-" (or option.icon_color "green"))}}
          <div class="gh-radio-label">
              {{option.name}}<br>
              <div class="gh-radio-desc">{{option.description}}</div>
          </div>
      </div>
  </PowerSelect>
  
  {{#if (eq @recipients "segment")}}
      <div class="gh-setting-large-dropdown mt2">
          <GhMembersSegmentSelect
              @segment={{@segment}}
              @onChange={{@onSegmentChange}}
              @enforcedCountFilter="subscribed:true"
          />
      </div>
  {{/if}}
  */
  {
    "id": "Vp2i/UD3",
    "block": "{\"symbols\":[\"option\",\"@segment\",\"@onSegmentChange\",\"@recipients\"],\"statements\":[[8,\"power-select\",[],[[\"@options\",\"@selected\",\"@onChange\",\"@triggerClass\",\"@dropdownClass\"],[[32,0,[\"options\"]],[32,0,[\"selectedOption\"]],[32,0,[\"setRecipients\"]],\"gh-setting-dropdown\",\"gh-setting-dropdown-list\"]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-setting-dropdown-content\"],[12],[2,\"\\n        \"],[1,[30,[36,2],[[32,1,[\"icon\"]]],[[\"class\"],[[30,[36,1],[\"w8 h8 mr2 fill-\",[30,[36,0],[[32,1,[\"icon_color\"]],\"green\"],null]],null]]]]],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-radio-label\"],[12],[2,\"\\n            \"],[1,[32,1,[\"name\"]]],[10,\"br\"],[12],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-radio-desc\"],[12],[1,[32,1,[\"description\"]]],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"\\n\\n\"],[6,[37,4],[[30,[36,3],[[32,4],\"segment\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"div\"],[14,0,\"gh-setting-large-dropdown mt2\"],[12],[2,\"\\n        \"],[8,\"gh-members-segment-select\",[],[[\"@segment\",\"@onChange\",\"@enforcedCountFilter\"],[[32,2],[32,3],\"subscribed:true\"]],null],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"or\",\"concat\",\"svg-jar\",\"eq\",\"if\"]}",
    "moduleName": "ghost-admin/components/settings/members-email/default-recipients-select.hbs"
  });

  let SettingsDefaultEmailRecipientsComponent = (_dec = Ember._action, (_class = class SettingsDefaultEmailRecipientsComponent extends _component.default {
    get options() {
      return [{
        name: 'Whoever has access to the post',
        description: 'Free posts to everyone, premium posts sent to paid members',
        value: 'visibility',
        icon: 'members-post',
        icon_color: 'green'
      }, {
        name: 'All members',
        description: 'Everyone who is subscribed to newsletter updates, whether free or paid members',
        value: 'all-members',
        icon: 'members-all',
        icon_color: 'blue'
      }, {
        name: 'Paid-members only',
        description: 'People who have a premium subscription',
        value: 'paid-only',
        icon: 'members-paid',
        icon_color: 'pink'
      }, {
        name: 'Specific people',
        description: 'Only people with any of the selected tiers or labels',
        value: 'segment',
        icon: 'members-segment',
        icon_color: 'yellow'
      }, {
        name: 'Usually nobody',
        description: 'Newsletters are off for new posts, but can be enabled when needed',
        value: 'none',
        icon: 'no-members',
        icon_color: 'midlightgrey-d2'
      }];
    }

    get selectedOption() {
      return this.options.find(o => o.value === this.args.recipients);
    }

    setRecipients(option) {
      this.args.onRecipientsChange(option.value);
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "setRecipients", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "setRecipients"), _class.prototype)), _class));
  _exports.default = SettingsDefaultEmailRecipientsComponent;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, SettingsDefaultEmailRecipientsComponent);
});
;define("ghost-admin/components/settings/members-subscription-access", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const __COLOCATED_TEMPLATE__ = Ember.HTMLBars.template(
  /*
    <div class="gh-setting-richdd-container">
      <div class="gh-expandable-header">
          <div>
              <h4 class="gh-expandable-title">Subscription access</h4>
              <p class="gh-expandable-description">Who should be able to subscribe to your site?</p>
          </div>
      </div>
  
      <PowerSelect
          @options={{this.options}}
          @selected={{this.selectedOption}}
          @onChange={{this.setSignupAccess}}
          @triggerClass="gh-setting-dropdown"
          @dropdownClass="gh-setting-dropdown-list"
          as |option|
      >
          <div class="gh-setting-dropdown-content">
              {{svg-jar option.icon class=(concat "w8 h8 mr2 fill-" (or option.icon_color "green"))}}
              <div class="gh-radio-label">
                  {{option.name}}<br>
                  <div class="gh-radio-desc">{{option.description}}</div>
              </div>
          </div>
      </PowerSelect>
  </div>
  */
  {
    "id": "McpDxjLN",
    "block": "{\"symbols\":[\"option\"],\"statements\":[[10,\"div\"],[14,0,\"gh-setting-richdd-container\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n        \"],[10,\"div\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Subscription access\"],[13],[2,\"\\n            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Who should be able to subscribe to your site?\"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[8,\"power-select\",[],[[\"@options\",\"@selected\",\"@onChange\",\"@triggerClass\",\"@dropdownClass\"],[[32,0,[\"options\"]],[32,0,[\"selectedOption\"]],[32,0,[\"setSignupAccess\"]],\"gh-setting-dropdown\",\"gh-setting-dropdown-list\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-setting-dropdown-content\"],[12],[2,\"\\n            \"],[1,[30,[36,2],[[32,1,[\"icon\"]]],[[\"class\"],[[30,[36,1],[\"w8 h8 mr2 fill-\",[30,[36,0],[[32,1,[\"icon_color\"]],\"green\"],null]],null]]]]],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-radio-label\"],[12],[2,\"\\n                \"],[1,[32,1,[\"name\"]]],[10,\"br\"],[12],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-radio-desc\"],[12],[1,[32,1,[\"description\"]]],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[1]}]]],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"or\",\"concat\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/components/settings/members-subscription-access.hbs"
  });

  let SettingsMembersSubscriptionAccess = (_dec = Ember.inject.service, _dec2 = Ember._action, (_class = class SettingsMembersSubscriptionAccess extends _component.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "settings", _descriptor, this);
    }

    get options() {
      return [{
        name: 'Anyone can sign up',
        description: 'All visitors will be able to subscribe and sign in',
        value: 'all',
        icon: 'globe',
        icon_color: 'green'
      }, {
        name: 'Only people I invite',
        description: 'People can sign in from your site but won\'t be able to sign up',
        value: 'invite',
        icon: 'email-love-letter',
        icon_color: 'blue'
      }, {
        name: 'Nobody',
        description: 'No one will be able to subscribe or sign in',
        value: 'none',
        icon: 'no-members',
        icon_color: 'midlightgrey-d2'
      }];
    }

    get selectedOption() {
      return this.options.find(o => o.value === this.settings.get('membersSignupAccess'));
    }

    setSignupAccess(option) {
      this.settings.set('membersSignupAccess', option.value);
      this.args.onChange?.(option.value);

      if (option.value === 'none') {
        this.settings.set('defaultContentVisibility', 'public');
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "setSignupAccess", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "setSignupAccess"), _class.prototype)), _class));
  _exports.default = SettingsMembersSubscriptionAccess;

  Ember._setComponentTemplate(__COLOCATED_TEMPLATE__, SettingsMembersSubscriptionAccess);
});
;define("ghost-admin/components/sortable-objects", ["exports", "ember-drag-drop/components/sortable-objects"], function (_exports, _sortableObjects) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _sortableObjects.default;
  _exports.default = _default;
});
;define("ghost-admin/components/vertical-collection", ["exports", "@html-next/vertical-collection/components/vertical-collection/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _component.default;
    }
  });
});
;define("ghost-admin/components/x-file-input", ["exports", "emberx-file-input/components/x-file-input"], function (_exports, _xFileInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _xFileInput.default;
    }
  });
});
;define("ghost-admin/controllers/application", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    billing: Ember.inject.service(),
    customViews: Ember.inject.service(),
    config: Ember.inject.service(),
    dropdown: Ember.inject.service(),
    feature: Ember.inject.service(),
    router: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    ui: Ember.inject.service(),
    showBilling: Ember.computed.reads('config.hostSettings.billing.enabled'),
    showNavMenu: Ember.computed('router.currentRouteName', 'session.{isAuthenticated,user}', 'ui.isFullScreen', function () {
      let {
        router,
        session,
        ui
      } = this; // if we're in fullscreen mode don't show the nav menu

      if (ui.isFullScreen) {
        return false;
      } // we need to defer showing the navigation menu until the session.user
      // is populated so that gh-user-can-admin has the correct data


      if (!session.isAuthenticated || !session.user) {
        return false;
      }

      return (router.currentRouteName !== 'error404' || session.isAuthenticated) && !router.currentRouteName.match(/(signin|signup|setup|reset)/);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/billing", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    queryParams: ['action'],
    action: null,
    guid: Ember.computed.alias('model')
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/dashboard", ["exports", "ghost-admin/utils/currency"], function (_exports, _currency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let DashboardController = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._tracked, _dec10 = Ember._tracked, _dec11 = Ember._tracked, _dec12 = Ember._tracked, _dec13 = Ember._tracked, _dec14 = Ember._tracked, _dec15 = Ember._tracked, _dec16 = Ember._tracked, _dec17 = Ember._tracked, _dec18 = Ember._tracked, _dec19 = Ember._tracked, _dec20 = Ember._tracked, _dec21 = Ember._tracked, _dec22 = Ember._action, (_class = class DashboardController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "feature", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "membersStats", _descriptor3, this);

      _initializerDefineProperty(this, "store", _descriptor4, this);

      _initializerDefineProperty(this, "settings", _descriptor5, this);

      _initializerDefineProperty(this, "whatsNew", _descriptor6, this);

      _initializerDefineProperty(this, "mrrStatsData", _descriptor7, this);

      _initializerDefineProperty(this, "mrrStatsError", _descriptor8, this);

      _initializerDefineProperty(this, "mrrStatsLoading", _descriptor9, this);

      _initializerDefineProperty(this, "memberCountStatsData", _descriptor10, this);

      _initializerDefineProperty(this, "memberCountStatsError", _descriptor11, this);

      _initializerDefineProperty(this, "memberCountStatsLoading", _descriptor12, this);

      _initializerDefineProperty(this, "topMembersData", _descriptor13, this);

      _initializerDefineProperty(this, "topMembersError", _descriptor14, this);

      _initializerDefineProperty(this, "topMembersLoading", _descriptor15, this);

      _initializerDefineProperty(this, "newsletterOpenRatesData", _descriptor16, this);

      _initializerDefineProperty(this, "newsletterOpenRatesError", _descriptor17, this);

      _initializerDefineProperty(this, "newsletterOpenRatesLoading", _descriptor18, this);

      _initializerDefineProperty(this, "whatsNewEntries", _descriptor19, this);

      _initializerDefineProperty(this, "whatsNewEntriesLoading", _descriptor20, this);

      _initializerDefineProperty(this, "whatsNewEntriesError", _descriptor21, this);
    }

    get topMembersDataHasOpenRates() {
      return this.topMembersData && this.topMembersData.find(member => {
        return member.emailOpenRate !== null;
      });
    }

    get showMembersData() {
      return this.settings.get('membersSignupAccess') !== 'none';
    }

    initialise() {
      this.loadTopMembers();
      this.loadCharts();
      this.loadWhatsNew();
    }

    async loadMRRStats() {
      const products = await this.store.query('product', {
        filter: 'type:paid',
        include: 'monthly_price,yearly_price',
        limit: 'all'
      });
      const defaultProduct = products?.firstObject;
      this.mrrStatsLoading = true;
      this.membersStats.fetchMRR().then(stats => {
        this.mrrStatsLoading = false;
        const statsData = stats.data || [];
        const defaultCurrency = defaultProduct?.monthlyPrice?.currency || 'usd';
        let currencyStats = statsData.find(stat => {
          return stat.currency === defaultCurrency;
        });
        currencyStats = currencyStats || {
          data: [],
          currency: defaultCurrency
        };

        if (currencyStats) {
          const currencyStatsData = this.membersStats.fillDates(currencyStats.data) || {};
          const dateValues = Object.values(currencyStatsData).map(val => Math.round(val / 100));
          const currentMRR = dateValues.length ? dateValues[dateValues.length - 1] : 0;
          const rangeStartMRR = dateValues.length ? dateValues[0] : 0;
          const percentGrowth = rangeStartMRR !== 0 ? (currentMRR - rangeStartMRR) / rangeStartMRR * 100 : 0;
          this.mrrStatsData = {
            currentAmount: currentMRR,
            currency: (0, _currency.getSymbol)(currencyStats.currency),
            percentGrowth: percentGrowth.toFixed(1),
            percentClass: percentGrowth > 0 ? 'positive' : percentGrowth < 0 ? 'negative' : '',
            options: {
              rangeInDays: 30
            },
            data: {
              label: 'MRR',
              dateLabels: Object.keys(currencyStatsData),
              dateValues
            },
            title: 'MRR',
            stats: currencyStats
          };
        }
      }, error => {
        this.mrrStatsError = error;
        this.mrrStatsLoading = false;
      });
    }

    loadMemberCountStats() {
      this.memberCountStatsLoading = true;
      this.membersStats.fetchCounts().then(stats => {
        this.memberCountStatsLoading = false;

        if (stats) {
          const statsDateObj = this.membersStats.fillCountDates(stats.data) || {};
          const dateValues = Object.values(statsDateObj);
          const currentAllCount = dateValues.length ? dateValues[dateValues.length - 1].total : 0;
          const currentPaidCount = dateValues.length ? dateValues[dateValues.length - 1].paid : 0;
          const rangeStartAllCount = dateValues.length ? dateValues[0].total : 0;
          const rangeStartPaidCount = dateValues.length ? dateValues[0].paid : 0;
          const allCountPercentGrowth = rangeStartAllCount !== 0 ? (currentAllCount - rangeStartAllCount) / rangeStartAllCount * 100 : 0;
          const paidCountPercentGrowth = rangeStartPaidCount !== 0 ? (currentPaidCount - rangeStartPaidCount) / rangeStartPaidCount * 100 : 0;
          this.memberCountStatsData = {
            all: {
              percentGrowth: allCountPercentGrowth.toFixed(1),
              percentClass: allCountPercentGrowth > 0 ? 'positive' : allCountPercentGrowth < 0 ? 'negative' : '',
              total: dateValues.length ? dateValues[dateValues.length - 1].total : 0,
              options: {
                rangeInDays: 30
              },
              data: {
                label: 'Members',
                dateLabels: Object.keys(statsDateObj),
                dateValues: dateValues.map(d => d.total)
              },
              title: 'Total Members',
              stats: stats
            },
            paid: {
              percentGrowth: paidCountPercentGrowth.toFixed(1),
              percentClass: paidCountPercentGrowth > 0 ? 'positive' : paidCountPercentGrowth < 0 ? 'negative' : '',
              total: dateValues.length ? dateValues[dateValues.length - 1].paid : 0,
              options: {
                rangeInDays: 30
              },
              data: {
                label: 'Members',
                dateLabels: Object.keys(statsDateObj),
                dateValues: dateValues.map(d => d.paid)
              },
              title: 'Paid Members',
              stats: stats
            }
          };
        }
      }, error => {
        this.memberCountStatsError = error;
        this.memberCountStatsLoading = false;
      });
    }

    loadCharts() {
      this.loadMRRStats();
      this.loadMemberCountStats();
      this.loadNewsletterOpenRates();
    }

    loadNewsletterOpenRates() {
      this.newsletterOpenRatesLoading = true;
      this.membersStats.fetchNewsletterStats().then(results => {
        const rangeStartOpenRate = results.length > 1 ? results[results.length - 2].openRate : 0;
        const rangeEndOpenRate = results.length > 0 ? results[results.length - 1].openRate : 0;
        const percentGrowth = rangeStartOpenRate !== 0 ? (rangeEndOpenRate - rangeStartOpenRate) / rangeStartOpenRate * 100 : 0;
        this.newsletterOpenRatesData = {
          percentGrowth: percentGrowth.toFixed(1),
          percentClass: percentGrowth > 0 ? 'positive' : percentGrowth < 0 ? 'negative' : '',
          current: rangeEndOpenRate,
          options: {
            rangeInDays: 30
          },
          data: {
            label: 'Open rate',
            dateLabels: results.map(d => d.subject),
            dateValues: results.map(d => d.openRate)
          },
          title: 'Open rate',
          stats: results
        };
        this.newsletterOpenRatesLoading = false;
      }, error => {
        this.newsletterOpenRatesError = error;
        this.newsletterOpenRatesLoading = false;
      });
    }

    loadTopMembers() {
      if (this.feature.membersActivityFeed) {
        return;
      }

      this.topMembersLoading = true;
      let query = {
        filter: 'email_open_rate:-null',
        order: 'email_open_rate desc',
        limit: 5
      };
      this.store.query('member', query).then(result => {
        if (!result.length) {
          return this.store.query('member', {
            filter: 'status:paid',
            order: 'created_at asc',
            limit: 5
          });
        }

        return result;
      }).then(result => {
        this.topMembersData = result;
        this.topMembersLoading = false;
      }).catch(error => {
        this.topMembersError = error;
        this.topMembersLoading = false;
      });
    }

    loadWhatsNew() {
      this.whatsNewEntriesLoading = true;
      this.whatsNew.fetchLatest.perform().then(() => {
        this.whatsNewEntriesLoading = false;
        this.whatsNewEntries = this.whatsNew.entries.slice(0, 3);
      }, error => {
        this.whatsNewEntriesError = error;
        this.whatsNewEntriesLoading = false;
      });
    }

    dismissLaunchBanner() {
      this.settings.set('editorIsLaunchComplete', true);
      this.settings.save();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "membersStats", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "whatsNew", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "mrrStatsData", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "mrrStatsError", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "mrrStatsLoading", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "memberCountStatsData", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "memberCountStatsError", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "memberCountStatsLoading", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "topMembersData", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "topMembersError", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "topMembersLoading", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "newsletterOpenRatesData", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, "newsletterOpenRatesError", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, "newsletterOpenRatesLoading", [_dec18], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, "whatsNewEntries", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, "whatsNewEntriesLoading", [_dec20], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, "whatsNewEntriesError", [_dec21], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "dismissLaunchBanner", [_dec22], Object.getOwnPropertyDescriptor(_class.prototype, "dismissLaunchBanner"), _class.prototype)), _class));
  _exports.default = DashboardController;
});
;define("ghost-admin/controllers/designsandbox", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class DesignsandboxController extends Ember.Controller {}

  _exports.default = DesignsandboxController;

  window.__CLASSIC_OWN_CLASSES__.set(DesignsandboxController, true);
});
;define("ghost-admin/controllers/editor", ["exports", "ghost-admin/models/post", "ghost-admin/utils/bound-one-way", "ghost-admin/config/environment", "ghost-admin/utils/isNumber", "moment", "ghost-admin/services/ajax", "ember-ajax/errors", "ember-concurrency"], function (_exports, _post, _boundOneWay, _environment, _isNumber, _moment, _ajax, _errors, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const DEFAULT_TITLE = '(Untitled)'; // time in ms to save after last content edit

  const AUTOSAVE_TIMEOUT = 3000; // time in ms to force a save if the user is continuously typing

  const TIMEDSAVE_TIMEOUT = 60000; // this array will hold properties we need to watch for this.hasDirtyAttributes

  let watchedProps = ['post.scratch', 'post.titleScratch', 'post.hasDirtyAttributes', 'post.tags.[]', 'post.isError']; // add all post model attrs to the watchedProps array, easier to do it this way
  // than remember to update every time we add a new attr

  _post.default.eachAttribute(function (name) {
    watchedProps.push(`post.${name}`);
  });

  const messageMap = {
    errors: {
      post: {
        published: {
          published: 'Update failed',
          draft: 'Saving failed',
          scheduled: 'Scheduling failed'
        },
        draft: {
          published: 'Publish failed',
          draft: 'Saving failed',
          scheduled: 'Scheduling failed'
        },
        scheduled: {
          scheduled: 'Update failed',
          draft: 'Unscheduling failed',
          published: 'Publish failed'
        }
      }
    },
    success: {
      post: {
        published: {
          published: 'Updated',
          draft: 'Saved',
          scheduled: 'Scheduled',
          sent: 'Sent'
        },
        draft: {
          published: 'Published',
          draft: 'Saved',
          scheduled: 'Scheduled',
          sent: 'Sent'
        },
        scheduled: {
          scheduled: 'Updated',
          draft: 'Unscheduled',
          published: 'Published',
          sent: 'Sent'
        },
        sent: {
          sent: 'Updated'
        }
      }
    }
  };

  var _default = Ember.Controller.extend({
    application: Ember.inject.controller(),
    config: Ember.inject.service(),
    feature: Ember.inject.service(),
    membersCountCache: Ember.inject.service(),
    modals: Ember.inject.service(),
    notifications: Ember.inject.service(),
    router: Ember.inject.service(),
    slugGenerator: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    ui: Ember.inject.service(),

    /* public properties -----------------------------------------------------*/
    shouldFocusTitle: false,
    showReAuthenticateModal: false,
    showPostPreviewModal: false,
    showUpgradeModal: false,
    showDeleteSnippetModal: false,
    showSettingsMenu: false,
    hostLimitError: null,
    // koenig related properties
    wordcount: null,

    /* private properties ----------------------------------------------------*/
    _leaveConfirmed: false,
    _previousTagNames: null,
    // set by setPost and _postSaved, used in hasDirtyAttributes

    /* computed properties ---------------------------------------------------*/
    post: Ember.computed.alias('model'),
    // store the desired post status locally without updating the model,
    // the model will only be updated when a save occurs
    willPublish: (0, _boundOneWay.default)('post.isPublished'),
    willSchedule: (0, _boundOneWay.default)('post.isScheduled'),
    // updateSlugTask and saveTask should always be enqueued so that we don't run into
    // problems with concurrency, for example when Cmd-S is pressed whilst the
    // cursor is in the slug field - that would previously trigger a simultaneous
    // slug update and save resulting in ember data errors and inconsistent save
    // results
    saveTasks: (0, _emberConcurrency.taskGroup)().enqueue(),
    _tagNames: Ember.computed.mapBy('post.tags', 'name'),
    hasDirtyAttributes: Ember.computed(...watchedProps, {
      get() {
        return this._hasDirtyAttributes();
      },

      set(key, value) {
        return value;
      }

    }),
    _snippets: Ember.computed(function () {
      return this.store.peekAll('snippet');
    }),
    snippets: Ember.computed('_snippets.@each.{name,isNew}', function () {
      return this._snippets.reject(snippet => snippet.get('isNew')).sort((a, b) => a.name.localeCompare(b.name));
    }),
    canManageSnippets: Ember.computed('session.user.{isAdmin,isEditor}', function () {
      let {
        user
      } = this.session;

      if (user.get('isAdmin') || user.get('isEditor')) {
        return true;
      }

      return false;
    }),
    _autosaveRunning: Ember.computed('_autosaveTask.isRunning', '_timedSaveTask.isRunning', function () {
      let autosave = this.get('_autosaveTask.isRunning');
      let timedsave = this.get('_timedSaveTask.isRunning');
      return autosave || timedsave;
    }),
    _canAutosave: Ember.computed('post.isDraft', function () {
      return _environment.default.environment !== 'test' && this.get('post.isDraft');
    }),

    /* actions ---------------------------------------------------------------*/
    actions: {
      updateScratch(mobiledoc) {
        this.set('post.scratch', mobiledoc); // save 3 seconds after last edit

        this._autosaveTask.perform(); // force save at 60 seconds


        this._timedSaveTask.perform();
      },

      updateTitleScratch(title) {
        this.set('post.titleScratch', title);
      },

      // updates local willPublish/Schedule values, does not get applied to
      // the post's `status` value until a save is triggered
      setSaveType(newType) {
        if (newType === 'publish') {
          this.set('willPublish', true);
          this.set('willSchedule', false);
        } else if (newType === 'draft') {
          this.set('willPublish', false);
          this.set('willSchedule', false);
        } else if (newType === 'schedule') {
          this.set('willSchedule', true);
          this.set('willPublish', false);
        }
      },

      save(options) {
        return this.saveTask.perform(options);
      },

      // used to prevent unexpected background saves. Triggered when opening
      // publish menu, starting a manual save, and when leaving the editor
      cancelAutosave() {
        this._autosaveTask.cancelAll();

        this._timedSaveTask.cancelAll();
      },

      // called by the "are you sure?" modal
      leaveEditor() {
        let transition = this.leaveEditorTransition;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // perform cleanup and reset manually, ensures the transition will succeed


        this.reset();
        return transition.retry();
      },

      openDeletePostModal() {
        if (!this.get('post.isNew')) {
          this.modals.open('modals/delete-post', {
            post: this.post
          }, {
            className: 'fullscreen-modal fullscreen-modal-action fullscreen-modal-wide'
          });
        }
      },

      openPostPreview(keyboardEvent) {
        keyboardEvent?.preventDefault();

        if (this.post.isDraft) {
          this.send('openPostPreviewModal');
        } else {
          window.open(this.post.previewUrl, '_blank', 'noopener');
        }
      },

      openPostPreviewModal() {
        this.modals.open('modals/post-preview', {
          post: this.post,
          saveTask: this.saveTask,
          hasDirtyAttributes: this.hasDirtyAttributes,
          // TODO: update to call action method directly when switching to class syntax
          setEditorSaveType: this.actions.setSaveType.bind(this),
          memberCount: this.memberCount
        }, {
          className: 'fullscreen-modal fullscreen-modal-full-overlay fullscreen-modal-email-preview'
        });
      },

      toggleReAuthenticateModal() {
        if (this.showReAuthenticateModal) {
          // closing, re-attempt save if needed
          if (this._reauthSave) {
            this.saveTask.perform(this._reauthSaveOptions);
          }

          this._reauthSave = false;
          this._reauthSaveOptions = null;
        }

        this.toggleProperty('showReAuthenticateModal');
      },

      openUpgradeModal() {
        this.set('showUpgradeModal', true);
      },

      closeUpgradeModal() {
        this.set('showUpgradeModal', false);
      },

      setKoenigEditor(koenig) {
        this._koenig = koenig; // remove any empty cards when displaying a draft post
        // - empty cards may be left in draft posts due to autosave occuring
        //   whilst an empty card is present then the user closing the browser
        //   or refreshing the page

        if (this.post.isDraft) {
          this._koenig.cleanup();
        }
      },

      updateWordCount(counts) {
        this.set('wordCount', counts);
      },

      setFeatureImage(url) {
        this.post.set('featureImage', url);

        if (this.post.isDraft) {
          this.autosaveTask.perform();
        }
      },

      clearFeatureImage() {
        this.post.set('featureImage', null);
        this.post.set('featureImageAlt', null);
        this.post.set('featureImageCaption', null);

        if (this.post.isDraft) {
          this.autosaveTask.perform();
        }
      },

      setFeatureImageAlt(text) {
        this.post.set('featureImageAlt', text);

        if (this.post.isDraft) {
          this.autosaveTask.perform();
        }
      },

      setFeatureImageCaption(html) {
        this.post.set('featureImageCaption', html);

        if (this.post.isDraft) {
          this.autosaveTask.perform();
        }
      }

    },
    toggleSettingsMenu: Ember._action(function () {
      this.set('showSettingsMenu', !this.showSettingsMenu);
    }),
    closeSettingsMenu: Ember._action(function () {
      this.set('showSettingsMenu', false);
    }),
    saveSnippet: Ember._action(function (snippet) {
      let snippetRecord = this.store.createRecord('snippet', snippet);
      return snippetRecord.save().then(() => {
        this.notifications.closeAlerts('snippet.save');
        this.notifications.showNotification(`Snippet saved as "${snippet.name}"`, {
          type: 'success'
        });
        return snippetRecord;
      }).catch(error => {
        if (!snippetRecord.errors.isEmpty) {
          this.notifications.showAlert(`Snippet save failed: ${snippetRecord.errors.messages.join('. ')}`, {
            type: 'error',
            key: 'snippet.save'
          });
        }

        snippetRecord.rollbackAttributes();
        throw error;
      });
    }),
    toggleUpdateSnippetModal: Ember._action(function (snippetRecord) {
      let updatedProperties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (snippetRecord) {
        this.set('snippetToUpdate', {
          snippetRecord,
          updatedProperties
        });
      } else {
        this.set('snippetToUpdate', null);
      }
    }),
    updateSnippet: Ember._action(function () {
      if (!this.snippetToUpdate) {
        return Promise.reject();
      }

      const {
        snippetRecord,
        updatedProperties: {
          mobiledoc
        }
      } = this.snippetToUpdate;
      snippetRecord.set('mobiledoc', mobiledoc);
      return snippetRecord.save().then(() => {
        this.set('snippetToUpdate', null);
        this.notifications.closeAlerts('snippet.save');
        this.notifications.showNotification(`Snippet "${snippetRecord.name}" updated`, {
          type: 'success'
        });
        return snippetRecord;
      }).catch(error => {
        if (!snippetRecord.errors.isEmpty) {
          this.notifications.showAlert(`Snippet save failed: ${snippetRecord.errors.messages.join('. ')}`, {
            type: 'error',
            key: 'snippet.save'
          });
        }

        snippetRecord.rollbackAttributes();
        throw error;
      });
    }),
    toggleDeleteSnippetModal: Ember._action(function (snippet) {
      this.set('snippetToDelete', snippet);
    }),
    deleteSnippet: Ember._action(function (snippet) {
      return snippet.destroyRecord();
    }),

    /* Public tasks ----------------------------------------------------------*/
    // separate task for autosave so that it doesn't override a manual save
    autosaveTask: (0, _emberConcurrency.task)(function* () {
      if (!this.get('saveTask.isRunning')) {
        return yield this.saveTask.perform({
          silent: true,
          backgroundSave: true
        });
      }
    }).drop(),
    // save tasks cancels autosave before running, although this cancels the
    // _xSave tasks  that will also cancel the autosave task
    saveTask: (0, _emberConcurrency.task)(function* () {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let prevStatus = this.get('post.status');
      let isNew = this.get('post.isNew');
      let status;
      this.send('cancelAutosave');

      if (options.backgroundSave && !this.hasDirtyAttributes) {
        return;
      }

      if (options.backgroundSave) {
        // do not allow a post's status to be set to published by a background save
        status = 'draft';
      } else {
        if (this.get('post.pastScheduledTime')) {
          status = !this.willSchedule && !this.willPublish ? 'draft' : 'published';
        } else {
          if (this.willPublish && !this.get('post.isScheduled')) {
            status = 'published';
          } else if (this.willSchedule && !this.get('post.isPublished')) {
            status = 'scheduled';
          } else if (this.get('post.isSent')) {
            status = 'sent';
          } else {
            status = 'draft';
          }
        } // let the adapter know it should use the `?email_recipient_filter` QP when saving


        let isPublishing = status === 'published' && !this.post.isPublished;
        let isScheduling = status === 'scheduled' && !this.post.isScheduled;

        if (options.sendEmailWhenPublished && (isPublishing || isScheduling)) {
          options.adapterOptions = Object.assign({}, options.adapterOptions, {
            sendEmailWhenPublished: options.sendEmailWhenPublished
          });
        }
      } // ensure we remove any blank cards when performing a full save


      if (!options.backgroundSave) {
        if (this._koenig) {
          this._koenig.cleanup();

          this.set('hasDirtyAttributes', true);
        }
      } // Set the properties that are indirected
      // set mobiledoc equal to what's in the editor but create a copy so that
      // nested objects/arrays don't keep references which can mean that both
      // scratch and mobiledoc get updated simultaneously


      this.set('post.mobiledoc', JSON.parse(JSON.stringify(this.post.scratch || null)));
      this.set('post.status', status); // Set a default title

      if (!this.get('post.titleScratch').trim()) {
        this.set('post.titleScratch', DEFAULT_TITLE);
      }

      this.set('post.title', this.get('post.titleScratch'));
      this.set('post.customExcerpt', this.get('post.customExcerptScratch'));
      this.set('post.footerInjection', this.get('post.footerExcerptScratch'));
      this.set('post.headerInjection', this.get('post.headerExcerptScratch'));
      this.set('post.metaTitle', this.get('post.metaTitleScratch'));
      this.set('post.metaDescription', this.get('post.metaDescriptionScratch'));
      this.set('post.ogTitle', this.get('post.ogTitleScratch'));
      this.set('post.ogDescription', this.get('post.ogDescriptionScratch'));
      this.set('post.twitterTitle', this.get('post.twitterTitleScratch'));
      this.set('post.twitterDescription', this.get('post.twitterDescriptionScratch'));
      this.set('post.emailSubject', this.get('post.emailSubjectScratch'));

      if (!this.get('post.slug')) {
        this.saveTitleTask.cancelAll();
        yield this.generateSlugTask.perform();
      }

      try {
        let post = yield this._savePostTask.perform(options);
        post.set('statusScratch', null);

        if (!options.silent) {
          this.set('showPostPreviewModal', false);

          this._showSaveNotification(prevStatus, post.get('status'), isNew ? true : false);
        } // redirect to edit route if saving a new record


        if (isNew && post.get('id')) {
          if (!this.leaveEditorTransition) {
            this.replaceRoute('editor.edit', post);
          }

          return true;
        }

        return post;
      } catch (error) {
        if (this.showReAuthenticateModal) {
          this._reauthSave = true;
          this._reauthSaveOptions = options;
          return;
        }

        this.set('post.status', prevStatus);

        if (error === undefined && this.post.errors.length === 0) {
          // "handled" error from _saveTask
          return;
        } // trigger upgrade modal if forbidden(403) error


        if ((0, _ajax.isHostLimitError)(error)) {
          this.post.rollbackAttributes();
          this.set('hostLimitError', error.payload.errors[0]);
          this.set('showUpgradeModal', true);
          return;
        } // re-throw if we have a general server error


        if (error && !(0, _errors.isInvalidError)(error)) {
          this.send('error', error);
          return;
        }

        if (!options.silent) {
          let errorOrMessages = error || this.get('post.errors.messages');

          this._showErrorAlert(prevStatus, this.get('post.status'), errorOrMessages); // simulate a validation error for upstream tasks


          throw undefined;
        }

        return this.post;
      }
    }).group('saveTasks'),

    /*
     * triggered by a user manually changing slug
     */
    updateSlugTask: (0, _emberConcurrency.task)(function* (_newSlug) {
      let slug = this.get('post.slug');
      let newSlug, serverSlug;
      newSlug = _newSlug || slug;
      newSlug = newSlug && newSlug.trim(); // Ignore unchanged slugs or candidate slugs that are empty

      if (!newSlug || slug === newSlug) {
        // reset the input to its previous state
        this.set('slugValue', slug);
        return;
      }

      serverSlug = yield this.slugGenerator.generateSlug('post', newSlug); // If after getting the sanitized and unique slug back from the API
      // we end up with a slug that matches the existing slug, abort the change

      if (serverSlug === slug) {
        return;
      } // Because the server transforms the candidate slug by stripping
      // certain characters and appending a number onto the end of slugs
      // to enforce uniqueness, there are cases where we can get back a
      // candidate slug that is a duplicate of the original except for
      // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)
      // get the last token out of the slug candidate and see if it's a number


      let slugTokens = serverSlug.split('-');
      let check = Number(slugTokens.pop()); // if the candidate slug is the same as the existing slug except
      // for the incrementor then the existing slug should be used

      if ((0, _isNumber.default)(check) && check > 0) {
        if (slug === slugTokens.join('-') && serverSlug !== newSlug) {
          this.set('slugValue', slug);
          return;
        }
      }

      this.set('post.slug', serverSlug); // If this is a new post.  Don't save the post.  Defer the save
      // to the user pressing the save button

      if (this.get('post.isNew')) {
        return;
      }

      return yield this._savePostTask.perform();
    }).group('saveTasks'),
    // used in the PSM so that saves are sequential and don't trigger collision
    // detection errors
    savePostTask: (0, _emberConcurrency.task)(function* () {
      try {
        return yield this._savePostTask.perform();
      } catch (error) {
        if (error === undefined) {
          // validation error
          return;
        }

        if (error) {
          let status = this.get('post.status');

          this._showErrorAlert(status, status, error);
        }

        throw error;
      }
    }).group('saveTasks'),
    // convenience method for saving the post and performing post-save cleanup
    _savePostTask: (0, _emberConcurrency.task)(function* () {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let {
        post
      } = this;
      const previousEmailOnlyValue = this.post.emailOnly;

      if (Object.prototype.hasOwnProperty.call(options, 'emailOnly')) {
        this.post.set('emailOnly', options.emailOnly);
      }

      try {
        yield post.save(options);
      } catch (error) {
        this.post.set('emailOnly', previousEmailOnlyValue);

        if ((0, _ajax.isServerUnreachableError)(error)) {
          const [prevStatus, newStatus] = this.post.changedAttributes().status || [this.post.status, this.post.status];

          this._showErrorAlert(prevStatus, newStatus, error); // simulate a validation error so we don't end up on a 500 screen


          throw undefined;
        }

        throw error;
      }

      this.notifications.closeAlerts('post.save'); // remove any unsaved tags
      // NOTE: `updateTags` changes `hasDirtyAttributes => true`.
      // For a saved post it would otherwise be false.

      post.updateTags();
      this._previousTagNames = this._tagNames; // update the scratch property if it's `null` and we get a blank mobiledoc
      // back from the API - prevents "unsaved changes" modal on new+blank posts

      if (!post.scratch) {
        post.set('scratch', JSON.parse(JSON.stringify(post.get('mobiledoc'))));
      } // if the two "scratch" properties (title and content) match the post,
      // then it's ok to set hasDirtyAttributes to false
      // TODO: why is this necessary?


      let titlesMatch = post.get('titleScratch') === post.get('title');
      let bodiesMatch = JSON.stringify(post.get('scratch')) === JSON.stringify(post.get('mobiledoc'));

      if (titlesMatch && bodiesMatch) {
        this.set('hasDirtyAttributes', false);
      }

      return post;
    }),
    saveTitleTask: (0, _emberConcurrency.task)(function* () {
      let post = this.post;
      let currentTitle = post.get('title');
      let newTitle = post.get('titleScratch').trim();

      if (currentTitle && newTitle && newTitle === currentTitle || !currentTitle && !newTitle) {
        return;
      } // this is necessary to force a save when the title is blank


      this.set('hasDirtyAttributes', true); // generate a slug if a post is new and doesn't have a title yet or
      // if the title is still '(Untitled)'

      if (post.get('isNew') && !currentTitle || currentTitle === DEFAULT_TITLE) {
        yield this.generateSlugTask.perform();
      }

      if (this.get('post.isDraft')) {
        yield this.autosaveTask.perform();
      }

      this.ui.updateDocumentTitle();
    }),
    generateSlugTask: (0, _emberConcurrency.task)(function* () {
      let title = this.get('post.titleScratch'); // Only set an "untitled" slug once per post

      if (title === DEFAULT_TITLE && this.get('post.slug')) {
        return;
      }

      try {
        let slug = yield this.slugGenerator.generateSlug('post', title);

        if (!Ember.isBlank(slug)) {
          this.set('post.slug', slug);
        }
      } catch (error) {
        // Nothing to do (would be nice to log this somewhere though),
        // but a rejected promise needs to be handled here so that a resolved
        // promise is returned.
        if ((0, _ajax.isVersionMismatchError)(error)) {
          this.notifications.showAPIError(error);
        }
      }
    }).enqueue(),
    // load supplementel data such as the members count in the background
    backgroundLoaderTask: (0, _emberConcurrency.task)(function* () {
      try {
        let membersResponse = yield this.store.query('member', {
          limit: 1,
          filter: 'subscribed:true'
        });
        this.set('memberCount', Ember.get(membersResponse, 'meta.pagination.total'));
      } catch (error) {
        this.set('memberCount', 0);
      }

      yield this.store.query('snippet', {
        limit: 'all'
      });
    }).restartable(),

    /* Public methods --------------------------------------------------------*/
    // called by the new/edit routes to change the post model
    setPost(post) {
      // don't do anything else if we're setting the same post
      if (post === this.post) {
        this.set('shouldFocusTitle', post.get('isNew'));
        return;
      } // reset everything ready for a new post


      this.reset();
      this.set('post', post);
      this.backgroundLoaderTask.perform(); // autofocus the title if we have a new post

      this.set('shouldFocusTitle', post.get('isNew')); // need to set scratch values because they won't be present on first
      // edit of the post
      // TODO: can these be `boundOneWay` on the model as per the other attrs?

      post.set('titleScratch', post.get('title'));
      post.set('scratch', post.get('mobiledoc'));
      this._previousTagNames = this._tagNames; // triggered any time the admin tab is closed, we need to use a native
      // dialog here instead of our custom modal

      window.onbeforeunload = () => {
        if (this.hasDirtyAttributes) {
          return '==============================\n\n' + 'Hey there! It looks like you\'re in the middle of writing' + ' something and you haven\'t saved all of your content.' + '\n\nSave before you go!\n\n' + '==============================';
        }
      };
    },

    // called by editor route's willTransition hook, fires for editor.new->edit,
    // editor.edit->edit, or editor->any. Will either finish autosave then retry
    // transition or abort and show the "are you sure want to leave?" modal
    async willTransition(transition) {
      let post = this.post; // exit early and allow transition if we have no post, occurs if reset
      // has already been called

      if (!post) {
        return;
      } // clean up blank cards when leaving the editor if we have a draft post
      // - blank cards could be left around due to autosave triggering whilst
      //   a blank card is present then the user attempting to leave
      // - will mark the post as dirty so it gets saved when transitioning


      if (this._koenig && post.isDraft) {
        this._koenig.cleanup();
      }

      let hasDirtyAttributes = this.hasDirtyAttributes;
      let state = post.getProperties('isDeleted', 'isSaving', 'hasDirtyAttributes', 'isNew');
      let fromNewToEdit = this.router.currentRouteName === 'editor.new' && transition.targetName === 'editor.edit' && transition.intent.contexts && transition.intent.contexts[0] && transition.intent.contexts[0].id === post.id;
      let deletedWithoutChanges = state.isDeleted && (state.isSaving || !state.hasDirtyAttributes); // controller is dirty and we aren't in a new->edit or delete->index
      // transition so show our "are you sure you want to leave?" modal

      if (!this._leaveConfirmed && !fromNewToEdit && !deletedWithoutChanges && hasDirtyAttributes) {
        transition.abort(); // if a save is running, wait for it to finish then transition

        if (this.saveTasks.isRunning) {
          await this.saveTasks.last;
          return transition.retry();
        } // if an autosave is scheduled, cancel it, save then transition


        if (this._autosaveRunning) {
          this.send('cancelAutosave');
          this.autosaveTask.cancelAll();
          await this.autosaveTask.perform();
          return transition.retry();
        } // we genuinely have unsaved data, show the modal


        if (this.post) {
          Object.assign(this._leaveModalReason, {
            status: this.post.status
          });
        }

        console.log('showing leave editor modal', this._leaveModalReason); // eslint-disable-line

        const reallyLeave = await this.modals.open('modals/editor/confirm-leave');

        if (reallyLeave !== true) {
          return;
        } else {
          this._leaveConfirmed = true;
          transition.retry();
        }
      } // the transition is now certain to complete so cleanup and reset if
      // we're exiting the editor. new->edit keeps everything around and
      // edit->edit will call reset in the setPost method if necessary


      if (!fromNewToEdit && transition.targetName !== 'editor.edit') {
        this.reset();
      }
    },

    // called when the editor route is left or the post model is swapped
    reset() {
      let post = this.post; // make sure the save tasks aren't still running in the background
      // after leaving the edit route

      this.send('cancelAutosave');

      if (post) {
        // clear post of any unsaved, client-generated tags
        post.updateTags(); // remove new+unsaved records from the store and rollback any unsaved changes

        if (post.get('isNew')) {
          post.deleteRecord();
        } else {
          post.rollbackAttributes();
        }
      }

      this._previousTagNames = [];
      this._leaveConfirmed = false;
      this.set('post', null);
      this.set('hasDirtyAttributes', false);
      this.set('shouldFocusTitle', false);
      this.set('showPostPreviewModal', false);
      this.set('showSettingsMenu', false);
      this.set('wordCount', null); // remove the onbeforeunload handler as it's only relevant whilst on
      // the editor route

      window.onbeforeunload = null;
    },

    /* Private tasks ---------------------------------------------------------*/
    // save 3 seconds after the last edit
    _autosaveTask: (0, _emberConcurrency.task)(function* () {
      if (!this._canAutosave) {
        return;
      } // force an instant save on first body edit for new posts


      if (this.get('post.isNew')) {
        return this.autosaveTask.perform();
      }

      yield (0, _emberConcurrency.timeout)(AUTOSAVE_TIMEOUT);
      this.autosaveTask.perform();
    }).restartable(),
    // save at 60 seconds even if the user doesn't stop typing
    _timedSaveTask: (0, _emberConcurrency.task)(function* () {
      if (!this._canAutosave) {
        return;
      }

      while (_environment.default.environment !== 'test' && true) {
        yield (0, _emberConcurrency.timeout)(TIMEDSAVE_TIMEOUT);
        this.autosaveTask.perform();
      }
    }).drop(),

    /* Private methods -------------------------------------------------------*/
    _hasDirtyAttributes() {
      let post = this.post;

      if (!post) {
        return false;
      } // if the Adapter failed to save the post isError will be true
      // and we should consider the post still dirty.


      if (post.get('isError')) {
        this._leaveModalReason = {
          reason: 'isError',
          context: post.errors.messages
        };
        return true;
      } // post.tags is an array so hasDirtyAttributes doesn't pick up
      // changes unless the array ref is changed


      let currentTags = (this._tagNames || []).join(', ');
      let previousTags = (this._previousTagNames || []).join(', ');

      if (currentTags !== previousTags) {
        this._leaveModalReason = {
          reason: 'tags are different',
          context: {
            currentTags,
            previousTags
          }
        };
        return true;
      } // titleScratch isn't an attr so needs a manual dirty check


      if (this.titleScratch !== this.title) {
        this._leaveModalReason = {
          reason: 'title is different',
          context: {
            current: this.title,
            scratch: this.titleScratch
          }
        };
        return true;
      } // scratch isn't an attr so needs a manual dirty check


      let mobiledoc = post.get('mobiledoc');
      let scratch = post.get('scratch'); // additional guard in case we are trying to compare null with undefined

      if (scratch || mobiledoc) {
        let mobiledocJSON = JSON.stringify(mobiledoc);
        let scratchJSON = JSON.stringify(scratch);

        if (scratchJSON !== mobiledocJSON) {
          this._leaveModalReason = {
            reason: 'mobiledoc is different',
            context: {
              current: mobiledocJSON,
              scratch: scratchJSON
            }
          };
          return true;
        }
      } // new+unsaved posts always return `hasDirtyAttributes: true`
      // so we need a manual check to see if any


      if (post.get('isNew')) {
        let changedAttributes = Object.keys(post.changedAttributes());

        if (changedAttributes.length) {
          this._leaveModalReason = {
            reason: 'post.changedAttributes.length > 0',
            context: post.changedAttributes()
          };
        }

        return changedAttributes.length ? true : false;
      } // we've covered all the non-tracked cases we care about so fall
      // back on Ember Data's default dirty attribute checks


      let {
        hasDirtyAttributes
      } = post;

      if (hasDirtyAttributes) {
        this._leaveModalReason = {
          reason: 'post.hasDirtyAttributes === true',
          context: post.changedAttributes()
        };
      }

      return hasDirtyAttributes;
    },

    _showSaveNotification(prevStatus, status, delayed) {
      // scheduled messaging is completely custom
      if (status === 'scheduled') {
        return this._showScheduledNotification(delayed);
      }

      let notifications = this.notifications;
      let message = messageMap.success.post[prevStatus][status];
      let actions, type, path;

      if (status === 'published' || status === 'scheduled') {
        type = Ember.String.capitalize(this.get('post.displayName'));
        path = this.get('post.url');
        actions = `<a href="${path}" target="_blank">View ${type}</a>`;
      }

      notifications.showNotification(message, {
        type: 'success',
        actions: actions && Ember.String.htmlSafe(actions),
        delayed
      });
    },

    async _showScheduledNotification(delayed) {
      let {
        publishedAtUTC,
        emailRecipientFilter,
        previewUrl,
        emailOnly
      } = this.post;

      let publishedAtBlogTZ = _moment.default.tz(publishedAtUTC, this.settings.get('timezone'));

      let title = 'Scheduled';
      let description = emailOnly ? ['Will be sent'] : ['Will be published'];

      if (emailRecipientFilter && emailRecipientFilter !== 'none') {
        const recipientCount = await this.membersCountCache.countString(`subscribed:true+(${emailRecipientFilter})`);
        description.push(`${!emailOnly ? 'and delivered ' : ''}to <span><strong>${recipientCount}</strong></span>`);
      }

      description.push(`on <span><strong>${publishedAtBlogTZ.format('MMM Do')}</strong></span>`);
      description.push(`at <span><strong>${publishedAtBlogTZ.format('HH:mm')}</strong>`);

      if (publishedAtBlogTZ.utcOffset() === 0) {
        description.push('(UTC)</span>');
      } else {
        description.push(`(UTC${publishedAtBlogTZ.format('Z').replace(/([+-])0/, '$1').replace(/:00/, '')})</span>`);
      }

      description = Ember.String.htmlSafe(description.join(' '));
      let actions = Ember.String.htmlSafe(`<a href="${previewUrl}" target="_blank">View Preview</a>`);
      return this.notifications.showNotification(title, {
        description,
        actions,
        type: 'success',
        delayed
      });
    },

    _showErrorAlert(prevStatus, status, error, delay) {
      let message = messageMap.errors.post[prevStatus][status];
      let notifications = this.notifications;
      let errorMessage;

      function isString(str) {
        return toString.call(str) === '[object String]';
      }

      if ((0, _ajax.isServerUnreachableError)(error)) {
        errorMessage = 'Unable to connect, please check your connection and try again';
      } else if (error && isString(error)) {
        errorMessage = error;
      } else if (error && Ember.isArray(error)) {
        // This is here because validation errors are returned as an array
        // TODO: remove this once validations are fixed
        errorMessage = error[0];
      } else if (error && error.payload && error.payload.errors && error.payload.errors[0].message) {
        return this.notifications.showAPIError(error, {
          key: 'post.save'
        });
      } else {
        errorMessage = 'Unknown Error';
      }

      message += `: ${errorMessage}`;
      message = Ember.String.htmlSafe(message);
      notifications.showAlert(message, {
        type: 'error',
        delayed: delay,
        key: 'post.save'
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/editor/edit-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  var _default = Ember.Controller.extend({
    ui: Ember.inject.service()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/error", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    stack: false,
    error: Ember.computed.readOnly('model'),
    code: Ember.computed('error.status', function () {
      return this.get('error.status') > 200 ? this.get('error.status') : 500;
    }),
    message: Ember.computed('error.statusText', function () {
      if (this.code === 404) {
        return 'Page not found';
      }

      return this.get('error.statusText') !== 'error' ? this.get('error.statusText') : 'Internal Server Error';
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/launch", ["exports", "ghost-admin/config/environment"], function (_exports, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const DEFAULT_STEPS = {
    'customise-design': {
      title: 'Customise your site',
      position: 'Step 1',
      next: 'connect-stripe'
    },
    'connect-stripe': {
      title: 'Connect to Stripe',
      position: 'Step 2',
      next: 'set-pricing',
      back: 'customise-design',
      skip: 'finalise'
    },
    'set-pricing': {
      title: 'Set up subscriptions',
      position: 'Step 3',
      next: 'finalise',
      back: 'connect-stripe'
    },
    finalise: {
      title: 'Launch your site',
      position: 'Final step',
      back: 'set-pricing'
    }
  };
  let LaunchController = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._action, _dec9 = Ember._action, _dec10 = Ember._action, _dec11 = Ember._action, _dec12 = Ember._action, _dec13 = Ember._action, _dec14 = Ember._action, _dec15 = Ember._action, _dec16 = Ember._action, _dec17 = Ember._action, _dec18 = Ember._action, _dec19 = Ember._action, (_class = class LaunchController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);

      _initializerDefineProperty(this, "settings", _descriptor3, this);

      _defineProperty(this, "queryParams", ['step']);

      _initializerDefineProperty(this, "previewGuid", _descriptor4, this);

      _initializerDefineProperty(this, "previewSrc", _descriptor5, this);

      _initializerDefineProperty(this, "step", _descriptor6, this);

      _initializerDefineProperty(this, "data", _descriptor7, this);

      _defineProperty(this, "steps", DEFAULT_STEPS);

      _defineProperty(this, "skippedSteps", []);

      const siteUrl = this.config.get('blogUrl');

      if (_environment.default.environment !== 'development' && !/^https:/.test(siteUrl)) {
        this.steps = {
          'customise-design': {
            title: 'Customise your site',
            position: 'Step 1',
            next: 'set-pricing'
          },
          'set-pricing': {
            title: 'Set up subscriptions',
            position: 'Step 2',
            next: 'finalise',
            back: 'customise-design'
          },
          finalise: {
            title: 'Launch your site',
            position: 'Final step',
            back: 'set-pricing'
          }
        };
      } else {
        this.steps = DEFAULT_STEPS;
      }
    }

    get currentStep() {
      return this.steps[this.step];
    }

    storeData(data) {
      this.data = data;
    }

    getData() {
      return this.data;
    }

    goToStep(step) {
      if (step) {
        this.step = step;
      }
    }

    goNextStep() {
      this.step = this.currentStep.next;
    }

    goBackStep() {
      let step = this.currentStep.back;

      while (this.skippedSteps.includes(step)) {
        this.skippedSteps = this.skippedSteps.filter(s => s !== step);
        step = this.steps[step].back;
      }

      this.step = step;
    } // TODO: remember when a step is skipped so "back" works as expected


    skipStep() {
      let step = this.currentStep.next;
      let skipToStep = this.currentStep.skip;

      while (step !== skipToStep) {
        this.skippedSteps.push(step);
        step = this.steps[step].next;
      }

      this.step = step;
    }

    registerPreviewIframe(element) {
      this.previewIframe = element;
    }

    refreshPreview() {
      this.previewGuid = new Date().valueOf();
    }

    updatePreview(url) {
      this.previewSrc = url;
    }

    replacePreviewContents(html) {
      if (this.previewIframe) {
        this.previewIframe.contentWindow.document.open();
        this.previewIframe.contentWindow.document.write(html);
        this.previewIframe.contentWindow.document.close();
      }
    }

    close() {
      this.router.transitionTo('dashboard');
    }

    reset() {
      this.data = null;
      this.step = 'customise-design';
      this.skippedSteps = [];
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "previewGuid", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return new Date().valueOf();
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "previewSrc", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "step", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'customise-design';
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "data", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "storeData", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "storeData"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "getData", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "getData"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "goToStep", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "goToStep"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "goNextStep", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "goNextStep"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "goBackStep", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "goBackStep"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "skipStep", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, "skipStep"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "registerPreviewIframe", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "registerPreviewIframe"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "refreshPreview", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, "refreshPreview"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updatePreview", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, "updatePreview"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "replacePreviewContents", [_dec17], Object.getOwnPropertyDescriptor(_class.prototype, "replacePreviewContents"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "close", [_dec18], Object.getOwnPropertyDescriptor(_class.prototype, "close"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "reset", [_dec19], Object.getOwnPropertyDescriptor(_class.prototype, "reset"), _class.prototype)), _class));
  _exports.default = LaunchController;
});
;define("ghost-admin/controllers/member", ["exports", "ghost-admin/utils/bound-one-way", "moment", "ember-concurrency-decorators"], function (_exports, _boundOneWay, _moment, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const SCRATCH_PROPS = ['name', 'email', 'note'];
  let MemberController = (_dec = Ember.inject.controller, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, _dec7 = Ember.inject.service, _dec8 = Ember._tracked, _dec9 = Ember._tracked, _dec10 = Ember._tracked, _dec11 = Ember._tracked, _dec12 = Ember._tracked, _dec13 = Ember._tracked, _dec14 = Ember._action, _dec15 = Ember._action, _dec16 = Ember._action, _dec17 = Ember._action, _dec18 = Ember._action, _dec19 = Ember._action, _dec20 = Ember._action, _dec21 = Ember._action, _dec22 = Ember._action, _dec23 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class MemberController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "members", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "dropdown", _descriptor3, this);

      _initializerDefineProperty(this, "membersStats", _descriptor4, this);

      _initializerDefineProperty(this, "notifications", _descriptor5, this);

      _initializerDefineProperty(this, "router", _descriptor6, this);

      _initializerDefineProperty(this, "store", _descriptor7, this);

      _initializerDefineProperty(this, "isLoading", _descriptor8, this);

      _initializerDefineProperty(this, "showDeleteMemberModal", _descriptor9, this);

      _initializerDefineProperty(this, "showImpersonateMemberModal", _descriptor10, this);

      _initializerDefineProperty(this, "showUnsavedChangesModal", _descriptor11, this);

      _initializerDefineProperty(this, "modalLabel", _descriptor12, this);

      _initializerDefineProperty(this, "showLabelModal", _descriptor13, this);

      _defineProperty(this, "leaveScreenTransition", null);

      this._availableLabels = this.store.peekAll('label');
    } // Computed properties -----------------------------------------------------


    get member() {
      return this.model;
    }

    get labelModalData() {
      let label = this.modalLabel;
      let labels = this.availableLabels;
      return {
        label,
        labels
      };
    }

    get availableLabels() {
      let labels = this._availableLabels.filter(label => !label.isNew).filter(label => label.id !== null).sort((labelA, labelB) => labelA.name.localeCompare(labelB.name, undefined, {
        ignorePunctuation: true
      }));

      let options = labels.toArray();
      options.unshiftObject({
        name: 'All labels',
        slug: null
      });
      return options;
    }

    set member(member) {
      this.model = member;
    }

    get scratchMember() {
      let scratchMember = Ember.Object.create({
        member: this.member
      });
      SCRATCH_PROPS.forEach(prop => Ember.defineProperty(scratchMember, prop, (0, _boundOneWay.default)(`member.${prop}`)));
      return scratchMember;
    }

    get subscribedAt() {
      // member can be a proxy object in a sparse array so .get is required
      let memberSince = (0, _moment.default)(this.member.get('createdAtUTC')).from((0, _moment.default)());
      let createdDate = (0, _moment.default)(this.member.get('createdAtUTC')).format('D MMM YYYY');
      return `${createdDate} (${memberSince})`;
    } // Actions -----------------------------------------------------------------


    toggleLabelModal() {
      this.showLabelModal = !this.showLabelModal;
    }

    editLabel(label, e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }

      let modalLabel = this.availableLabels.findBy('slug', label);
      this.modalLabel = modalLabel;
      this.showLabelModal = !this.showLabelModal;
    }

    setProperty(propKey, value) {
      this._saveMemberProperty(propKey, value);
    }

    toggleDeleteMemberModal() {
      this.showDeleteMemberModal = !this.showDeleteMemberModal;
    }

    toggleImpersonateMemberModal() {
      this.showImpersonateMemberModal = !this.showImpersonateMemberModal;
    }

    save() {
      return this.saveTask.perform();
    }

    deleteMember() {
      let cancelSubscriptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      let options = {
        adapterOptions: {
          cancel: cancelSubscriptions
        }
      };
      return this.member.destroyRecord(options).then(() => {
        this.members.refreshData();
        this.transitionToRoute('members');
        return;
      }, error => {
        return this.notifications.showAPIError(error, {
          key: 'member.delete'
        });
      });
    }

    toggleUnsavedChangesModal(transition) {
      let leaveTransition = this.leaveScreenTransition;

      if (!transition && this.showUnsavedChangesModal) {
        this.leaveScreenTransition = null;
        this.showUnsavedChangesModal = false;
        return;
      }

      if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
        this.leaveScreenTransition = transition; // if a save is running, wait for it to finish then transition

        if (this.save.isRunning) {
          return this.save.last.then(() => {
            transition.retry();
          });
        } // we genuinely have unsaved data, show the modal


        this.showUnsavedChangesModal = true;
      }
    }

    leaveScreen() {
      this.member.rollbackAttributes();
      return this.leaveScreenTransition.retry();
    } // Tasks -------------------------------------------------------------------


    *saveTask() {
      let {
        member,
        scratchMember
      } = this; // if Cmd+S is pressed before the field loses focus make sure we're
      // saving the intended property values

      let scratchProps = scratchMember.getProperties(SCRATCH_PROPS);
      member.setProperties(scratchProps);

      try {
        yield member.save();
        member.updateLabels();
        this.members.refreshData(); // replace 'member.new' route with 'member' route

        this.replaceRoute('member', member);
        return member;
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'member.save'
          });
        }
      }
    }

    *fetchMemberTask(memberId) {
      this.isLoading = true;
      this.member = yield this.store.queryRecord('member', {
        id: memberId,
        include: 'email_recipients,products'
      });
      this.isLoading = false;
    } // Private -----------------------------------------------------------------


    _saveMemberProperty(propKey, newValue) {
      let currentValue = this.member.get(propKey);

      if (newValue && typeof newValue === 'string') {
        newValue = newValue.trim();
      } // avoid modifying empty values and triggering inadvertant unsaved changes modals


      if (newValue !== false && !newValue && !currentValue) {
        return;
      }

      this.member.set(propKey, newValue);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "members", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "dropdown", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "membersStats", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "isLoading", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "showDeleteMemberModal", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "showImpersonateMemberModal", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "showUnsavedChangesModal", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "modalLabel", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "showLabelModal", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "toggleLabelModal", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "toggleLabelModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "editLabel", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, "editLabel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setProperty", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, "setProperty"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleDeleteMemberModal", [_dec17], Object.getOwnPropertyDescriptor(_class.prototype, "toggleDeleteMemberModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleImpersonateMemberModal", [_dec18], Object.getOwnPropertyDescriptor(_class.prototype, "toggleImpersonateMemberModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "save", [_dec19], Object.getOwnPropertyDescriptor(_class.prototype, "save"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "deleteMember", [_dec20], Object.getOwnPropertyDescriptor(_class.prototype, "deleteMember"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleUnsavedChangesModal", [_dec21], Object.getOwnPropertyDescriptor(_class.prototype, "toggleUnsavedChangesModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "leaveScreen", [_dec22], Object.getOwnPropertyDescriptor(_class.prototype, "leaveScreen"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveTask", [_dec23], Object.getOwnPropertyDescriptor(_class.prototype, "saveTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchMemberTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "fetchMemberTask"), _class.prototype)), _class));
  _exports.default = MemberController;
});
;define("ghost-admin/controllers/members-activity", ["exports", "ghost-admin/helpers/members-event-filter"], function (_exports, _membersEventFilter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let MembersActivityController = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._action, _dec7 = Ember._action, (_class = class MembersActivityController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "router", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);

      _initializerDefineProperty(this, "store", _descriptor3, this);

      _defineProperty(this, "queryParams", ['excludedEvents', 'member']);

      _initializerDefineProperty(this, "excludedEvents", _descriptor4, this);

      _initializerDefineProperty(this, "member", _descriptor5, this);
    }

    // we don't want to show or allow filtering of certain events in some situations
    // - no member selected = don't show email events, they flood the list and the API can't paginate correctly
    // - newsletter is disabled = don't show email or newletter events
    get hiddenEvents() {
      const hiddenEvents = [];

      if (!this.member) {
        hiddenEvents.push(..._membersEventFilter.EMAIL_EVENTS);
      }

      if (this.settings.get('editorDefaultEmailRecipients') === 'disabled') {
        hiddenEvents.push(..._membersEventFilter.EMAIL_EVENTS, ..._membersEventFilter.NEWSLETTER_EVENTS);
      }

      return hiddenEvents;
    }

    get fullExcludedEvents() {
      return (this.excludedEvents || '').split(',').concat(this.hiddenEvents);
    }

    get memberRecord() {
      if (!this.member) {
        return null;
      } // TODO: {reload: true} here shouldn't be needed but without it
      // the template renders nothing if the record is already in the store


      return this.store.findRecord('member', this.member, {
        reload: true
      });
    }

    changeExcludedEvents(newList) {
      this.router.transitionTo({
        queryParams: {
          excludedEvents: newList
        }
      });
    }

    changeMember(member) {
      this.router.transitionTo({
        queryParams: {
          member: member?.id
        }
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "excludedEvents", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "member", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "changeExcludedEvents", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "changeExcludedEvents"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "changeMember", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "changeMember"), _class.prototype)), _class));
  _exports.default = MembersActivityController;
});
;define("ghost-admin/controllers/members", ["exports", "ghost-admin/config/environment", "fetch", "ghost-admin/utils/ghost-paths", "moment", "ghost-admin/helpers/gh-pluralize", "ghost-admin/helpers/reset-query-params", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _environment, _fetch, _ghostPaths, _moment, _ghPluralize, _resetQueryParams, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _dec50, _dec51, _dec52, _dec53, _dec54, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const PAID_PARAMS = [{
    name: 'All members',
    value: null
  }, {
    name: 'Free members',
    value: 'false'
  }, {
    name: 'Paid members',
    value: 'true'
  }];
  let MembersController = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, _dec7 = Ember.inject.service, _dec8 = Ember.inject.service, _dec9 = Ember.inject.service, _dec10 = Ember.inject.service, _dec11 = Ember._tracked, _dec12 = Ember._tracked, _dec13 = Ember._tracked, _dec14 = Ember._tracked, _dec15 = Ember._tracked, _dec16 = Ember._tracked, _dec17 = Ember._tracked, _dec18 = Ember._tracked, _dec19 = Ember._tracked, _dec20 = Ember._tracked, _dec21 = Ember._tracked, _dec22 = Ember._tracked, _dec23 = Ember._tracked, _dec24 = Ember._tracked, _dec25 = Ember._tracked, _dec26 = Ember._tracked, _dec27 = Ember._tracked, _dec28 = Ember._action, _dec29 = Ember._action, _dec30 = Ember._action, _dec31 = Ember._action, _dec32 = Ember._action, _dec33 = Ember._action, _dec34 = Ember._action, _dec35 = Ember._action, _dec36 = Ember._action, _dec37 = Ember._action, _dec38 = Ember._action, _dec39 = Ember._action, _dec40 = Ember._action, _dec41 = Ember._action, _dec42 = Ember._action, _dec43 = Ember._action, _dec44 = Ember._action, _dec45 = Ember._action, _dec46 = Ember._action, _dec47 = Ember._action, _dec48 = Ember._action, _dec49 = (0, _emberConcurrencyDecorators.task)({
    restartable: true
  }), _dec50 = (0, _emberConcurrencyDecorators.task)({
    restartable: true
  }), _dec51 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), _dec52 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), _dec53 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), _dec54 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class MembersController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ajax", _descriptor, this);

      _initializerDefineProperty(this, "config", _descriptor2, this);

      _initializerDefineProperty(this, "ellaSparse", _descriptor3, this);

      _initializerDefineProperty(this, "feature", _descriptor4, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor5, this);

      _initializerDefineProperty(this, "membersStats", _descriptor6, this);

      _initializerDefineProperty(this, "router", _descriptor7, this);

      _initializerDefineProperty(this, "store", _descriptor8, this);

      _initializerDefineProperty(this, "utils", _descriptor9, this);

      _initializerDefineProperty(this, "settings", _descriptor10, this);

      _defineProperty(this, "queryParams", ['label', {
        paidParam: 'paid'
      }, {
        searchParam: 'search'
      }, {
        orderParam: 'order'
      }, {
        filterParam: 'filter'
      }]);

      _initializerDefineProperty(this, "members", _descriptor11, this);

      _initializerDefineProperty(this, "searchText", _descriptor12, this);

      _initializerDefineProperty(this, "searchParam", _descriptor13, this);

      _initializerDefineProperty(this, "filterParam", _descriptor14, this);

      _initializerDefineProperty(this, "softFilterParam", _descriptor15, this);

      _initializerDefineProperty(this, "paidParam", _descriptor16, this);

      _initializerDefineProperty(this, "label", _descriptor17, this);

      _initializerDefineProperty(this, "orderParam", _descriptor18, this);

      _initializerDefineProperty(this, "modalLabel", _descriptor19, this);

      _initializerDefineProperty(this, "showLabelModal", _descriptor20, this);

      _initializerDefineProperty(this, "showDeleteMembersModal", _descriptor21, this);

      _initializerDefineProperty(this, "showUnsubscribeMembersModal", _descriptor22, this);

      _initializerDefineProperty(this, "showAddMembersLabelModal", _descriptor23, this);

      _initializerDefineProperty(this, "showRemoveMembersLabelModal", _descriptor24, this);

      _initializerDefineProperty(this, "filters", _descriptor25, this);

      _initializerDefineProperty(this, "softFilters", _descriptor26, this);

      _initializerDefineProperty(this, "_availableLabels", _descriptor27, this);

      _defineProperty(this, "paidParams", PAID_PARAMS);

      this._availableLabels = this.store.peekAll('label');

      if (this.isTesting === undefined) {
        this.isTesting = _environment.default.environment === 'test';
      }
    } // Computed properties -----------------------------------------------------


    get listHeader() {
      let {
        searchText,
        selectedLabel,
        members
      } = this;

      if (members.loading) {
        return 'Loading...';
      }

      if (searchText) {
        return 'Search result';
      }

      let count = (0, _ghPluralize.ghPluralize)(members.length, 'member');

      if (selectedLabel && selectedLabel.slug) {
        if (members.length > 1) {
          return `${count} match current filter`;
        } else {
          return `${count} matches current filter`;
        }
      }

      return count;
    }

    get showingAll() {
      return !this.searchParam && !this.paidParam && !this.label && !this.filterParam && !this.softFilterParam;
    }

    get availableOrders() {
      // don't return anything if email analytics is disabled because
      // we don't want to show an order dropdown with only a single option
      if (this.feature.get('emailAnalytics')) {
        return [{
          name: 'Newest',
          value: null
        }, {
          name: 'Open rate',
          value: 'email_open_rate'
        }];
      }

      return [];
    }

    get selectedOrder() {
      return this.availableOrders.find(order => order.value === this.orderParam);
    }

    get availableLabels() {
      let labels = this._availableLabels.filter(label => !label.isNew).filter(label => label.id !== null).sort((labelA, labelB) => labelA.name.localeCompare(labelB.name, undefined, {
        ignorePunctuation: true
      }));

      let options = labels.toArray();
      options.unshiftObject({
        name: 'All labels',
        slug: null
      });
      return options;
    }

    get selectedLabel() {
      let {
        label,
        availableLabels
      } = this;
      return availableLabels.findBy('slug', label);
    }

    get labelModalData() {
      let label = this.modalLabel;
      let labels = this.availableLabels;
      return {
        label,
        labels
      };
    }

    get selectedPaidParam() {
      return this.paidParams.findBy('value', this.paidParam) || {
        value: '!unknown'
      };
    }

    get isFiltered() {
      return !!(this.label || this.paidParam || this.searchParam || this.filterParam);
    }

    get filterColumns() {
      const defaultColumns = ['name', 'email'];
      const availableFilters = this.filters.length ? this.filters : this.softFilters;
      return availableFilters.map(filter => {
        return filter.type;
      }).filter((f, idx, arr) => {
        return arr.indexOf(f) === idx;
      }).filter(d => !defaultColumns.includes(d));
    }

    get filterColumnLabels() {
      const filterColumnLabelMap = {
        'subscriptions.plan_interval': 'Billing period',
        subscribed: 'Subscribed to email',
        'subscriptions.status': 'Subscription Status'
      };
      return this.filterColumns.map(d => {
        return filterColumnLabelMap[d] ? filterColumnLabelMap[d] : Ember.String.capitalize(d.replace(/_/g, ' '));
      });
    }

    getApiQueryObject() {
      let {
        params,
        extraFilters = []
      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let {
        label,
        paidParam,
        searchParam,
        filterParam
      } = params ? params : this;
      let filters = [];
      filters = filters.concat(extraFilters);

      if (label) {
        filters.push(`label:'${label}'`);
      }

      if (paidParam !== null) {
        if (paidParam === 'true') {
          filters.push('status:-free');
        } else {
          filters.push('status:free');
        }
      }

      if (filterParam) {
        filters.push(filterParam);
      }

      let searchQuery = searchParam ? {
        search: searchParam
      } : {};
      return Object.assign({}, {
        filter: filters.join('+')
      }, searchQuery);
    } // Actions -----------------------------------------------------------------


    refreshData() {
      this.fetchMembersTask.perform();
      this.fetchLabelsTask.perform();
      this.membersStats.invalidate();
      this.membersStats.fetchCounts();
    }

    changeOrder(order) {
      this.orderParam = order.value;
    }

    applyFilter(filterStr, filters) {
      this.softFilters = Ember.A([]);
      this.filterParam = filterStr || null;
      this.filters = filters;
    }

    applySoftFilter(filterStr, filters) {
      this.softFilters = filters;
      this.softFilterParam = filterStr || null;
      let {
        label,
        paidParam,
        searchParam,
        orderParam
      } = this;
      this.fetchMembersTask.perform({
        label,
        paidParam,
        searchParam,
        orderParam,
        filterParam: filterStr
      });
    }

    resetSoftFilter() {
      if (this.softFilters.length > 0 || !!this.softFilterParam) {
        this.softFilters = Ember.A([]);
        this.softFilterParam = null;
        this.fetchMembersTask.perform();
      }
    }

    resetFilter() {
      this.softFilters = Ember.A([]);
      this.softFilterParam = null;
      this.filters = Ember.A([]);
      this.filterParam = null;
      this.fetchMembersTask.perform();
    }

    search(e) {
      this.searchTask.perform(e.target.value);
    }

    exportData() {
      let exportUrl = (0, _ghostPaths.default)().url.api('members/upload');
      let downloadParams = new URLSearchParams(this.getApiQueryObject());
      downloadParams.set('limit', 'all');
      this.utils.downloadFile(`${exportUrl}?${downloadParams.toString()}`);
    }

    changeLabel(label, e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }

      this.label = label.slug;
    }

    addLabel(e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }

      const newLabel = this.store.createRecord('label');
      this.modalLabel = newLabel;
      this.showLabelModal = !this.showLabelModal;
    }

    editLabel(label, e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }

      let modalLabel = this.availableLabels.findBy('slug', label);
      this.modalLabel = modalLabel;
      this.showLabelModal = !this.showLabelModal;
    }

    toggleLabelModal() {
      this.showLabelModal = !this.showLabelModal;
    }

    changePaidParam(paid) {
      this.paidParam = paid.value;
    }

    toggleDeleteMembersModal() {
      this.showDeleteMembersModal = !this.showDeleteMembersModal;
    }

    toggleUnsubscribeMembersModal() {
      this.showUnsubscribeMembersModal = !this.showUnsubscribeMembersModal;
    }

    toggleAddMembersLabelModal() {
      this.showAddMembersLabelModal = !this.showAddMembersLabelModal;
    }

    toggleRemoveMembersLabelModal() {
      this.showRemoveMembersLabelModal = !this.showRemoveMembersLabelModal;
    }

    deleteMembers() {
      return this.deleteMembersTask.perform();
    }

    unsubscribeMembers() {
      return this.unsubscribeMembersTask.perform();
    }

    addLabelToMembers(selectedLabel) {
      return this.addLabelToMembersTask.perform(selectedLabel);
    }

    removeLabelFromMembers(selectedLabel) {
      return this.removeLabelFromMembersTask.perform(selectedLabel);
    } // Tasks -------------------------------------------------------------------


    *searchTask(query) {
      yield (0, _emberConcurrency.timeout)(250); // debounce

      this.searchParam = query;
    }

    *fetchLabelsTask() {
      yield this.store.query('label', {
        limit: 'all'
      });
    }

    *fetchMembersTask(params) {
      var _this = this;

      // params is undefined when called as a "refresh" of the model
      let {
        label,
        paidParam,
        searchParam,
        orderParam,
        filterParam
      } = typeof params === 'undefined' ? this : params;

      if (!searchParam) {
        this.resetSearch();
      } // use a fixed created_at date so that subsequent pages have a consistent index


      let startDate = new Date(); // bypass the stale data shortcut if params change

      let forceReload = !params || label !== this._lastLabel || paidParam !== this._lastPaidParam || searchParam !== this._lastSearchParam || orderParam !== this._lastOrderParam || filterParam !== this._lastFilterParam;
      this._lastLabel = label;
      this._lastPaidParam = paidParam;
      this._lastSearchParam = searchParam;
      this._lastOrderParam = orderParam;
      this._lastFilterParam = filterParam; // unless we have a forced reload, do not re-fetch the members list unless it's more than a minute old
      // keeps navigation between list->details->list snappy

      if (!forceReload && this._startDate && !(this._startDate - startDate > 1 * 60 * 1000)) {
        return this.members;
      }

      this._startDate = startDate;
      this.members = yield this.ellaSparse.array(function () {
        let range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        const searchQuery = _this.getApiQueryObject({
          params,
          extraFilters: [`created_at:<='${_moment.default.utc(_this._startDate).format('YYYY-MM-DD HH:mm:ss')}'`]
        });

        const order = orderParam ? `${orderParam} desc` : `created_at desc`;
        query = Object.assign({
          order,
          limit: range.length,
          page: range.page
        }, searchQuery, query);
        return _this.store.query('member', query).then(result => {
          return {
            data: result,
            total: result.meta.pagination.total
          };
        });
      }, {
        limit: 50
      });
    }

    *deleteMembersTask() {
      const query = new URLSearchParams(this.getApiQueryObject()); // Trigger download before deleting. Uses the CSV export endpoint but
      // needs to fetch the file and trigger a download directly rather than
      // via an iframe. The iframe approach can't tell us when a download has
      // started/finished meaning we could end up deleting the data before exporting it

      const exportParams = new URLSearchParams(this.getApiQueryObject());
      exportParams.set('limit', 'all');
      const exportUrl = `${(0, _ghostPaths.default)().url.api('members/upload')}?${exportParams.toString()}`;
      yield (0, _fetch.default)(exportUrl, {
        method: 'GET'
      }).then(res => res.blob()).then(blob => {
        const blobUrl = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = blobUrl;
        a.download = `members.${(0, _moment.default)().format('YYYY-MM-DD')}.csv`;
        document.body.appendChild(a);

        if (!this.isTesting) {
          a.click();
        }

        a.remove();
        URL.revokeObjectURL(blobUrl);
      }); // backup downloaded, continue with deletion

      const deleteUrl = `${this.ghostPaths.url.api('members')}?${query}`; // response contains details of which members failed to be deleted

      const response = yield this.ajax.del(deleteUrl); // reset and reload

      this.store.unloadAll('member');
      this.router.transitionTo('members.index', {
        queryParams: Object.assign((0, _resetQueryParams.resetQueryParams)('members.index'))
      });
      this.membersStats.invalidate();
      this.membersStats.fetchCounts();
      return response.meta;
    }

    *unsubscribeMembersTask() {
      const query = new URLSearchParams(this.getApiQueryObject());
      const unsubscribeUrl = `${this.ghostPaths.url.api('members/bulk')}?${query}`; // response contains details of which members failed to be unsubscribe

      const response = yield this.ajax.put(unsubscribeUrl, {
        data: {
          bulk: {
            action: 'unsubscribe',
            meta: {}
          }
        }
      }); // reset and reload

      this.store.unloadAll('member');
      this.reload();
      this.membersStats.invalidate();
      this.membersStats.fetchCounts();
      return response?.bulk?.meta;
    }

    *addLabelToMembersTask(selectedLabel) {
      const query = new URLSearchParams(this.getApiQueryObject());
      const addLabelUrl = `${this.ghostPaths.url.api('members/bulk')}?${query}`;
      const response = yield this.ajax.put(addLabelUrl, {
        data: {
          bulk: {
            action: 'addLabel',
            meta: {
              label: {
                id: selectedLabel
              }
            }
          }
        }
      }); // reset and reload

      this.store.unloadAll('member');
      this.reload();
      return response?.bulk?.meta;
    }

    *removeLabelFromMembersTask(selectedLabel) {
      const query = new URLSearchParams(this.getApiQueryObject());
      const removeLabelUrl = `${this.ghostPaths.url.api('members/bulk')}?${query}`;
      const response = yield this.ajax.put(removeLabelUrl, {
        data: {
          bulk: {
            action: 'removeLabel',
            meta: {
              label: {
                id: selectedLabel
              }
            }
          }
        }
      }); // reset and reload

      this.store.unloadAll('member');
      this.reload();
      return response?.bulk?.meta;
    } // Internal ----------------------------------------------------------------


    resetSearch() {
      this.searchText = '';
    }

    resetFilters(params) {
      if (!params?.filterParam) {
        this.filters = Ember.A([]);
        this.softFilterParam = null;
        this.softFilters = Ember.A([]);
      }
    }

    reload(params) {
      this.membersStats.invalidate();
      this.membersStats.fetchCounts();
      this.fetchMembersTask.perform(params);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "ellaSparse", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "membersStats", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "utils", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "members", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return Ember.A([]);
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "searchText", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "searchParam", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "filterParam", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "softFilterParam", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "paidParam", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, "label", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, "orderParam", [_dec18], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, "modalLabel", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, "showLabelModal", [_dec20], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, "showDeleteMembersModal", [_dec21], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor22 = _applyDecoratedDescriptor(_class.prototype, "showUnsubscribeMembersModal", [_dec22], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor23 = _applyDecoratedDescriptor(_class.prototype, "showAddMembersLabelModal", [_dec23], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor24 = _applyDecoratedDescriptor(_class.prototype, "showRemoveMembersLabelModal", [_dec24], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor25 = _applyDecoratedDescriptor(_class.prototype, "filters", [_dec25], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return Ember.A([]);
    }
  }), _descriptor26 = _applyDecoratedDescriptor(_class.prototype, "softFilters", [_dec26], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return Ember.A([]);
    }
  }), _descriptor27 = _applyDecoratedDescriptor(_class.prototype, "_availableLabels", [_dec27], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return Ember.A([]);
    }
  }), _applyDecoratedDescriptor(_class.prototype, "refreshData", [_dec28], Object.getOwnPropertyDescriptor(_class.prototype, "refreshData"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "changeOrder", [_dec29], Object.getOwnPropertyDescriptor(_class.prototype, "changeOrder"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "applyFilter", [_dec30], Object.getOwnPropertyDescriptor(_class.prototype, "applyFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "applySoftFilter", [_dec31], Object.getOwnPropertyDescriptor(_class.prototype, "applySoftFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "resetSoftFilter", [_dec32], Object.getOwnPropertyDescriptor(_class.prototype, "resetSoftFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "resetFilter", [_dec33], Object.getOwnPropertyDescriptor(_class.prototype, "resetFilter"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "search", [_dec34], Object.getOwnPropertyDescriptor(_class.prototype, "search"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "exportData", [_dec35], Object.getOwnPropertyDescriptor(_class.prototype, "exportData"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "changeLabel", [_dec36], Object.getOwnPropertyDescriptor(_class.prototype, "changeLabel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "addLabel", [_dec37], Object.getOwnPropertyDescriptor(_class.prototype, "addLabel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "editLabel", [_dec38], Object.getOwnPropertyDescriptor(_class.prototype, "editLabel"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleLabelModal", [_dec39], Object.getOwnPropertyDescriptor(_class.prototype, "toggleLabelModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "changePaidParam", [_dec40], Object.getOwnPropertyDescriptor(_class.prototype, "changePaidParam"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleDeleteMembersModal", [_dec41], Object.getOwnPropertyDescriptor(_class.prototype, "toggleDeleteMembersModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleUnsubscribeMembersModal", [_dec42], Object.getOwnPropertyDescriptor(_class.prototype, "toggleUnsubscribeMembersModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleAddMembersLabelModal", [_dec43], Object.getOwnPropertyDescriptor(_class.prototype, "toggleAddMembersLabelModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleRemoveMembersLabelModal", [_dec44], Object.getOwnPropertyDescriptor(_class.prototype, "toggleRemoveMembersLabelModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "deleteMembers", [_dec45], Object.getOwnPropertyDescriptor(_class.prototype, "deleteMembers"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "unsubscribeMembers", [_dec46], Object.getOwnPropertyDescriptor(_class.prototype, "unsubscribeMembers"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "addLabelToMembers", [_dec47], Object.getOwnPropertyDescriptor(_class.prototype, "addLabelToMembers"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "removeLabelFromMembers", [_dec48], Object.getOwnPropertyDescriptor(_class.prototype, "removeLabelFromMembers"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "searchTask", [_dec49], Object.getOwnPropertyDescriptor(_class.prototype, "searchTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchLabelsTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "fetchLabelsTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchMembersTask", [_dec50], Object.getOwnPropertyDescriptor(_class.prototype, "fetchMembersTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "deleteMembersTask", [_dec51], Object.getOwnPropertyDescriptor(_class.prototype, "deleteMembersTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "unsubscribeMembersTask", [_dec52], Object.getOwnPropertyDescriptor(_class.prototype, "unsubscribeMembersTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "addLabelToMembersTask", [_dec53], Object.getOwnPropertyDescriptor(_class.prototype, "addLabelToMembersTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "removeLabelFromMembersTask", [_dec54], Object.getOwnPropertyDescriptor(_class.prototype, "removeLabelFromMembersTask"), _class.prototype)), _class));
  _exports.default = MembersController;
});
;define("ghost-admin/controllers/members/import", ["exports", "ghost-admin/helpers/reset-query-params"], function (_exports, _resetQueryParams) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ImportController = (_dec = Ember.inject.service, _dec2 = Ember.inject.controller, _dec3 = Ember._action, _dec4 = Ember._action, (_class = class ImportController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "router", _descriptor, this);

      _initializerDefineProperty(this, "members", _descriptor2, this);
    }

    refreshMembers() {
      let {
        label
      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (label) {
        let queryParams = Object.assign((0, _resetQueryParams.resetQueryParams)('members.index'), {
          filter: `label:[${label.slug}]`
        });
        this.router.transitionTo({
          queryParams
        });
      }

      this.members.refreshData();
    }

    close() {
      this.router.transitionTo('members');
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "members", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "refreshMembers", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "refreshMembers"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "close", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "close"), _class.prototype)), _class));
  _exports.default = ImportController;
});
;define("ghost-admin/controllers/offer", ["exports", "ghost-admin/config/environment", "ghost-admin/utils/copy-text-to-clipboard", "ghost-admin/utils/currency", "ghost-admin/helpers/gh-price-amount", "@tryghost/string", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _environment, _copyTextToClipboard, _currency, _ghPriceAmount, _string, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let OffersController = (_dec = Ember.inject.controller, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, _dec7 = Ember.inject.service, _dec8 = Ember.inject.service, _dec9 = Ember._tracked, _dec10 = Ember._tracked, _dec11 = Ember._tracked, _dec12 = Ember._tracked, _dec13 = Ember._tracked, _dec14 = Ember._tracked, _dec15 = Ember._tracked, _dec16 = Ember._tracked, _dec17 = Ember._tracked, _dec18 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), _dec19 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), _dec20 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), _dec21 = Ember._action, _dec22 = Ember._action, _dec23 = Ember._action, _dec24 = Ember._action, _dec25 = Ember._action, _dec26 = Ember._action, _dec27 = Ember._action, _dec28 = Ember._action, _dec29 = Ember._action, _dec30 = Ember._action, _dec31 = Ember._action, _dec32 = Ember._action, _dec33 = Ember._action, _dec34 = Ember._action, _dec35 = Ember._action, _dec36 = Ember._action, _dec37 = Ember._action, _dec38 = Ember._action, _dec39 = Ember._action, _dec40 = Ember._action, (_class = class OffersController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "offers", _descriptor, this);

      _initializerDefineProperty(this, "config", _descriptor2, this);

      _initializerDefineProperty(this, "settings", _descriptor3, this);

      _initializerDefineProperty(this, "store", _descriptor4, this);

      _initializerDefineProperty(this, "modals", _descriptor5, this);

      _initializerDefineProperty(this, "feature", _descriptor6, this);

      _initializerDefineProperty(this, "membersUtils", _descriptor7, this);

      _initializerDefineProperty(this, "notifications", _descriptor8, this);

      _initializerDefineProperty(this, "cadences", _descriptor9, this);

      _initializerDefineProperty(this, "products", _descriptor10, this);

      _initializerDefineProperty(this, "portalPreviewUrl", _descriptor11, this);

      _initializerDefineProperty(this, "showUnsavedChangesModal", _descriptor12, this);

      _initializerDefineProperty(this, "defaultSiteUrl", _descriptor13, this);

      _initializerDefineProperty(this, "durations", _descriptor14, this);

      _initializerDefineProperty(this, "offertypes", _descriptor15, this);

      _initializerDefineProperty(this, "defaultProps", _descriptor16, this);

      _initializerDefineProperty(this, "isDisplayTitleEdited", _descriptor17, this);

      _defineProperty(this, "leaveScreenTransition", null);

      _defineProperty(this, "portalPreviewGuid", Date.now().valueOf());

      if (this.isTesting === undefined) {
        this.isTesting = _environment.default.environment === 'test';
      }
    }

    get offer() {
      return this.model;
    }

    set offer(offer) {
      this.model = offer;
    }

    get scratchOffer() {
      return { ...this.offer
      };
    }

    get cadence() {
      if (this.offer.tier && this.offer.cadence) {
        const product = this.products.findBy('id', this.offer.tier.id);
        return `${this.offer.tier.id}-${this.offer.cadence}-${product?.monthlyPrice?.currency}`;
      } else if (this.defaultProps) {
        const product = this.products.findBy('id', this.defaultProps.tier.id);
        return `${this.defaultProps.tier.id}-${this.defaultProps.cadence}-${product?.monthlyPrice?.currency}`;
      }

      return '';
    }

    get isDiscountSectionDisabled() {
      return !this.offer.isNew;
    } // Tasks -------------------------------------------------------------------


    *fetchProducts() {
      this.products = yield this.store.query('product', {
        filter: 'type:paid',
        include: 'monthly_price,yearly_price'
      });
      this.products = this.products.filter(d => {
        return d.monthlyPrice && d.yearlyPrice;
      });
      const cadences = [];
      this.products.forEach(product => {
        let monthlyLabel;
        let yearlyLabel;
        const productCurrency = product.monthlyPrice.currency;
        const productCurrencySymbol = productCurrency.toUpperCase();

        if (this.feature.get('multipleProducts')) {
          monthlyLabel = `${product.name} - Monthly (${(0, _ghPriceAmount.ghPriceAmount)(product.monthlyPrice.amount)} ${productCurrencySymbol})`;
          yearlyLabel = `${product.name} - Yearly (${(0, _ghPriceAmount.ghPriceAmount)(product.yearlyPrice.amount)} ${productCurrencySymbol})`;
        } else {
          monthlyLabel = `Monthly (${(0, _ghPriceAmount.ghPriceAmount)(product.monthlyPrice.amount)} ${productCurrencySymbol})`;
          yearlyLabel = `Yearly (${(0, _ghPriceAmount.ghPriceAmount)(product.yearlyPrice.amount)} ${productCurrencySymbol})`;
        }

        cadences.push({
          label: monthlyLabel,
          name: `${product.id}-month-${productCurrency}`
        });
        cadences.push({
          label: yearlyLabel,
          name: `${product.id}-year-${productCurrency}`
        });
      });
      this.cadences = cadences;
      const defaultCadence = this.cadences[0]?.name;
      const [, interval, defaultCurrency] = (defaultCadence || '').split('-');
      this.updateDurations(interval);

      if (this.offer && !this.offer.tier) {
        this.defaultProps = {};
        this.updateCadence(defaultCadence, this.defaultProps);
        this.updatePortalPreview({
          forceRefresh: false
        });
      } else if (defaultCadence) {
        this.offertypes = [{
          label: '%',
          offertype: 'percent'
        }, {
          label: defaultCurrency.toUpperCase(),
          offertype: 'fixed'
        }];
        this.updatePortalPreview({
          forceRefresh: false
        });
      }
    }

    *copyOfferUrl() {
      (0, _copyTextToClipboard.default)(this.offerUrl);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 500);
      return true;
    }

    *saveTask() {
      let {
        offer
      } = this;

      if (!offer.tier && this.defaultProps) {
        this.offer.tier = {
          id: this.defaultProps?.tier.id
        };
        this.offer.cadence = this.defaultProps.cadence;
        this.offer.currency = this.defaultProps.currency;
      }

      try {
        yield this.offer.validate();
        yield offer.save(); // replace 'offer.new' route with 'offer' route

        this.replaceRoute('offer', offer);
        return offer;
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'offer.save'
          });
        }
      }
    }

    *fetchOfferTask(offerId) {
      this.isLoading = true;
      this.offer = yield this.store.queryRecord('offer', {
        id: offerId
      });
      this.isLoading = false;
    }

    portalPreviewInserted(iframe) {
      this.portalPreviewIframe = iframe;

      if (!this.portalMessageListener) {
        this.portalMessageListener = event => {
          const resizeEvents = ['portal-ready', 'portal-preview-updated'];

          if (resizeEvents.includes(event.data.type) && event.data.payload?.height && this.portalPreviewIframe.parentNode) {
            this.portalPreviewIframe.parentNode.style.height = `${event.data.payload.height}px`;
          }
        };

        window.addEventListener('message', this.portalMessageListener, true);
      }
    }

    portalPreviewDestroyed() {
      this.portalPreviewIframe = null;

      if (this.portalMessageListener) {
        window.removeEventListener('message', this.portalMessageListener);
      }
    }

    updatePortalPreview() {
      let {
        forceRefresh
      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        forceRefresh: false
      };
      const newUrl = new URL(this.membersUtils.getOfferPortalPreviewUrl({
        name: this.offer.name || 'No Name',
        code: this.offer.code || 'no-code',
        displayTitle: this.offer.displayTitle,
        displayDescription: this.offer.displayDescription,
        type: this.offer.type,
        cadence: this.offer.cadence || this.defaultProps?.cadence,
        amount: this.offer.amount,
        duration: this.offer.duration,
        durationInMonths: this.offer.durationInMonths,
        currency: this.offer.currency || this.defaultProps?.currency,
        status: this.offer.currency,
        tierId: this.offer?.tier?.id || this.defaultProps?.tier?.id
      }));

      if (forceRefresh) {
        this.portalPreviewGuid = Date.now().valueOf();
      }

      newUrl.searchParams.set('v', `${this.portalPreviewGuid}`);
      this.portalPreviewUrl = newUrl;
    }

    save() {
      return this.saveTask.perform();
    }

    leaveScreen() {
      this.offer.rollbackAttributes();
      return this.leaveScreenTransition.retry();
    }

    toggleUnsavedChangesModal(transition) {
      let leaveTransition = this.leaveScreenTransition;

      if (!transition && this.showUnsavedChangesModal) {
        this.leaveScreenTransition = null;
        this.showUnsavedChangesModal = false;
        return;
      }

      if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
        this.leaveScreenTransition = transition; // if a save is running, wait for it to finish then transition

        if (this.save.isRunning) {
          return this.save.last.then(() => {
            transition.retry();
          });
        } // we genuinely have unsaved data, show the modal


        this.showUnsavedChangesModal = true;
      }
    }

    setup() {
      this.fetchProducts.perform();
    }

    setProperty(propKey, value) {
      this._saveOfferProperty(propKey, value);
    }

    setDiscountType(discountType) {
      if (!this.isDiscountSectionDisabled) {
        const amount = this.offer.amount || 0;

        this._saveOfferProperty('type', discountType);

        if (this.offer.type === 'fixed' && this.offer.amount !== '') {
          this.offer.amount = amount * 100;
        } else if (this.offer.amount !== '') {
          this.offer.amount = amount / 100;
        }

        this.updatePortalPreview({
          forceRefresh: false
        });
      }
    }

    setDiscountAmount(e) {
      let amount = e.target.value;

      if (this.offer.type === 'fixed' && amount !== '') {
        amount = parseFloat(amount) * 100;
      }

      this._saveOfferProperty('amount', amount);
    }

    setOfferName(e) {
      this._saveOfferProperty('name', e.target.value);

      if (!this.isDisplayTitleEdited && this.offer.isNew) {
        this._saveOfferProperty('displayTitle', e.target.value);
      }
    }

    setPortalTitle(e) {
      this.isDisplayTitleEdited = true;

      this._saveOfferProperty('displayTitle', e.target.value);
    }

    setPortalDescription(e) {
      this._saveOfferProperty('displayDescription', e.target.value);
    }

    setOfferCode(e) {
      this._saveOfferProperty('code', e.target.value);
    }

    setDurationInMonths(e) {
      this._saveOfferProperty('durationInMonths', e.target.value);
    }

    openConfirmArchiveModal() {
      if (!this.offer.isNew) {
        this.modals.open('modals/offers/archive', {
          offer: this.offer
        }, {
          className: 'fullscreen-modal fullscreen-modal-action fullscreen-modal-wide'
        });
      }
    }

    openConfirmUnarchiveModal() {
      if (!this.offer.isNew) {
        this.modals.open('modals/offers/unarchive', {
          offer: this.offer
        }, {
          className: 'fullscreen-modal fullscreen-modal-action fullscreen-modal-wide'
        });
      }
    }

    get offerUrl() {
      const code = this.offer?.code || '';

      if (code) {
        const siteUrl = this.config.get('blogUrl');
        return `${siteUrl}/${(0, _string.slugify)(code)}`;
      }

      return '';
    }

    get displayCurrency() {
      const tierId = this.offer?.tier?.id;

      if (!tierId) {
        return '$';
      }

      const product = this.products.findBy('id', tierId);
      const productCurrency = product?.monthlyPrice?.currency || 'usd';
      return (0, _currency.getSymbol)(productCurrency);
    }

    get currencyLength() {
      return this.displayCurrency.length;
    }

    updateDurations(cadence) {
      if (cadence) {
        if (cadence === 'month') {
          this.durations = [{
            label: 'First-payment',
            duration: 'once'
          }, {
            label: 'Multiple-months',
            duration: 'repeating'
          }, {
            label: 'Forever',
            duration: 'forever'
          }];
        } else {
          this.durations = [{
            label: 'First-payment',
            duration: 'once'
          }, {
            label: 'Forever',
            duration: 'forever'
          }];

          if (this.offer.duration === 'repeating') {
            this._saveOfferProperty('duration', 'once');
          }
        }
      }
    }

    updateCadence(cadence, offerObj) {
      offerObj = offerObj || this.offer;

      if (cadence) {
        const [tierId, tierCadence, currency] = cadence.split('-');
        offerObj.tier = {
          id: tierId
        };
        offerObj.cadence = tierCadence;
        offerObj.currency = currency;
        this.offertypes = [{
          label: '%',
          offertype: 'percent'
        }, {
          label: currency.toUpperCase(),
          offertype: 'fixed'
        }];
        this.updateDurations(tierCadence);
        this.updatePortalPreview({
          forceRefresh: false
        });
      }
    }

    updateDuration(duration) {
      this._saveOfferProperty('duration', duration);
    } // Private -----------------------------------------------------------------


    _saveOfferProperty(propKey, newValue) {
      let currentValue = this.offer[propKey]; // avoid modifying empty values and triggering inadvertant unsaved changes modals

      if (newValue !== false && !newValue && !currentValue) {
        return;
      }

      this.offer[propKey] = newValue;
      this.updatePortalPreview({
        forceRefresh: false
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "offers", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "modals", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "membersUtils", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "cadences", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "products", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "portalPreviewUrl", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "showUnsavedChangesModal", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "defaultSiteUrl", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return this.config.get('blogUrl');
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "durations", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [{
        label: 'Forever',
        duration: 'forever'
      }, {
        label: 'First-payment',
        duration: 'once'
      }, {
        label: 'Multiple-months',
        duration: 'repeating'
      }];
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "offertypes", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [{
        label: '%',
        offertype: 'percent'
      }, {
        label: 'USD',
        offertype: 'fixed'
      }];
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "defaultProps", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, "isDisplayTitleEdited", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "fetchProducts", [_dec18], Object.getOwnPropertyDescriptor(_class.prototype, "fetchProducts"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "copyOfferUrl", [_dec19], Object.getOwnPropertyDescriptor(_class.prototype, "copyOfferUrl"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveTask", [_dec20], Object.getOwnPropertyDescriptor(_class.prototype, "saveTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchOfferTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "fetchOfferTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "portalPreviewInserted", [_dec21], Object.getOwnPropertyDescriptor(_class.prototype, "portalPreviewInserted"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "portalPreviewDestroyed", [_dec22], Object.getOwnPropertyDescriptor(_class.prototype, "portalPreviewDestroyed"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updatePortalPreview", [_dec23], Object.getOwnPropertyDescriptor(_class.prototype, "updatePortalPreview"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "save", [_dec24], Object.getOwnPropertyDescriptor(_class.prototype, "save"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "leaveScreen", [_dec25], Object.getOwnPropertyDescriptor(_class.prototype, "leaveScreen"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleUnsavedChangesModal", [_dec26], Object.getOwnPropertyDescriptor(_class.prototype, "toggleUnsavedChangesModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setup", [_dec27], Object.getOwnPropertyDescriptor(_class.prototype, "setup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setProperty", [_dec28], Object.getOwnPropertyDescriptor(_class.prototype, "setProperty"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setDiscountType", [_dec29], Object.getOwnPropertyDescriptor(_class.prototype, "setDiscountType"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setDiscountAmount", [_dec30], Object.getOwnPropertyDescriptor(_class.prototype, "setDiscountAmount"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setOfferName", [_dec31], Object.getOwnPropertyDescriptor(_class.prototype, "setOfferName"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setPortalTitle", [_dec32], Object.getOwnPropertyDescriptor(_class.prototype, "setPortalTitle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setPortalDescription", [_dec33], Object.getOwnPropertyDescriptor(_class.prototype, "setPortalDescription"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setOfferCode", [_dec34], Object.getOwnPropertyDescriptor(_class.prototype, "setOfferCode"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setDurationInMonths", [_dec35], Object.getOwnPropertyDescriptor(_class.prototype, "setDurationInMonths"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openConfirmArchiveModal", [_dec36], Object.getOwnPropertyDescriptor(_class.prototype, "openConfirmArchiveModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openConfirmUnarchiveModal", [_dec37], Object.getOwnPropertyDescriptor(_class.prototype, "openConfirmUnarchiveModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateDurations", [_dec38], Object.getOwnPropertyDescriptor(_class.prototype, "updateDurations"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateCadence", [_dec39], Object.getOwnPropertyDescriptor(_class.prototype, "updateCadence"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateDuration", [_dec40], Object.getOwnPropertyDescriptor(_class.prototype, "updateDuration"), _class.prototype)), _class));
  _exports.default = OffersController;
});
;define("ghost-admin/controllers/offers", ["exports", "ember-concurrency-decorators"], function (_exports, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const TYPES = [{
    name: 'Active',
    value: 'active'
  }, {
    name: 'Archived',
    value: 'archived'
  }];
  let MembersController = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._tracked, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._action, _dec7 = Ember._action, _dec8 = (0, _emberConcurrencyDecorators.task)({
    restartable: true
  }), (_class = class MembersController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "modals", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);

      _initializerDefineProperty(this, "offers", _descriptor3, this);

      _initializerDefineProperty(this, "products", _descriptor4, this);

      _initializerDefineProperty(this, "type", _descriptor5, this);

      _defineProperty(this, "queryParams", ['type']);

      this.availableTypes = TYPES;
    }

    get filteredOffers() {
      return this.offers.filter(offer => {
        return offer.status === this.type;
      }).map(offer => {
        const product = this.products.find(p => {
          return p.id === offer.tier.id;
        });
        const price = offer.cadence === 'month' ? product.monthlyPrice : product.yearlyPrice;
        offer.finalCurrency = offer.currency || price.currency;
        offer.originalPrice = price.amount;
        offer.updatedPrice = offer.type === 'fixed' ? price.amount - offer.amount : price.amount - price.amount * offer.amount / 100;
        return offer;
      });
    }

    get offersExist() {
      return this.offers.length > 0;
    }

    get selectedType() {
      return this.type ? TYPES.find(d => {
        return this.type === d.value;
      }) : TYPES[0];
    }

    onTypeChange(type) {
      this.type = type.value;
    }

    openLinkDialog(offer) {
      this.advancedModal = this.modals.open('modals/offers/link', {
        offer: offer
      }, {
        className: 'fullscreen-modal-action fullscreen-modal-wide'
      });
    }

    *fetchOffersTask() {
      this.products = yield this.store.query('product', {
        filter: 'type:paid',
        include: 'monthly_price,yearly_price'
      });
      this.offers = yield this.store.query('offer', {
        limit: 'all'
      });
      return this.offers;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modals", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "offers", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "products", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "type", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'active';
    }
  }), _applyDecoratedDescriptor(_class.prototype, "onTypeChange", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "onTypeChange"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openLinkDialog", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "openLinkDialog"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchOffersTask", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "fetchOffersTask"), _class.prototype)), _class));
  _exports.default = MembersController;
});
;define("ghost-admin/controllers/pages-loading", ["exports", "ghost-admin/controllers/posts-loading"], function (_exports, _postsLoading) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  var _default = _postsLoading.default.extend({
    postsController: Ember.inject.controller('pages'),
    ui: Ember.inject.service()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/pages", ["exports", "ghost-admin/controllers/posts"], function (_exports, _posts) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const TYPES = [{
    name: 'All pages',
    value: null
  }, {
    name: 'Draft pages',
    value: 'draft'
  }, {
    name: 'Published pages',
    value: 'published'
  }, {
    name: 'Scheduled pages',
    value: 'scheduled'
  }, {
    name: 'Featured pages',
    value: 'featured'
  }];
  const ORDERS = [{
    name: 'Newest',
    value: null
  }, {
    name: 'Oldest',
    value: 'published_at asc'
  }, {
    name: 'Recently updated',
    value: 'updated_at desc'
  }];
  /* eslint-disable ghost/ember/alias-model-in-controller */

  var _default = _posts.default.extend({
    init() {
      this._super(...arguments);

      this.availableTypes = TYPES;
      this.availableOrders = ORDERS;
    },

    actions: {
      openEditor(page) {
        this.transitionToRoute('editor.edit', 'page', page.get('id'));
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/posts-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  var _default = Ember.Controller.extend({
    postsController: Ember.inject.controller('posts'),
    session: Ember.inject.service(),
    ui: Ember.inject.service(),
    availableTypes: Ember.computed.readOnly('postsController.availableTypes'),
    selectedType: Ember.computed.readOnly('postsController.selectedType'),
    selectedVisibility: Ember.computed.readOnly('postsController.selectedVisibility'),
    availableVisibilities: Ember.computed.readOnly('postsController.availableVisibilities'),
    availableTags: Ember.computed.readOnly('postsController.availableTags'),
    selectedTag: Ember.computed.readOnly('postsController.selectedTag'),
    availableAuthors: Ember.computed.readOnly('postsController.availableAuthors'),
    selectedAuthor: Ember.computed.readOnly('postsController.selectedAuthor'),
    availableOrders: Ember.computed.readOnly('postsController.availableOrders'),
    selectedOrder: Ember.computed.readOnly('postsController.selectedOrder')
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/posts", ["exports", "ghost-admin/helpers/reset-query-params"], function (_exports, _resetQueryParams) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const TYPES = [{
    name: 'Todo',
    value: null
  }, {
    name: 'Borradores',
    value: 'draft'
  }, {
    name: 'Contenido ya publicado',
    value: 'published'
  }, {
    name: 'Publicaciones Programadas',
    value: 'scheduled'
  }, {
    name: 'Publicaciones Especiales',
    value: 'featured'
  }];
  const VISIBILITIES = [{
    name: 'Acceso Total',
    value: null
  }, {
    name: 'Publico',
    value: 'public'
  }, {
    name: 'Solo Miembros',
    value: 'members'
  }, {
    name: 'Solo Miembros Premium',
    value: 'paid'
  }];
  const ORDERS = [{
    name: 'Los mas nuevos',
    value: null
  }, {
    name: 'Los mas viejos',
    value: 'published_at asc'
  }, {
    name: 'Actualizados recientemente',
    value: 'updated_at desc'
  }];

  var _default = Ember.Controller.extend({
    feature: Ember.inject.service(),
    session: Ember.inject.service(),
    store: Ember.inject.service(),
    settings: Ember.inject.service(),
    // default values for these are set in `init` and defined in `helpers/reset-query-params`
    queryParams: ['type', 'access', 'author', 'tag', 'order'],
    _hasLoadedTags: false,
    _hasLoadedAuthors: false,
    _hasLoadedSnippets: false,
    availableTypes: null,
    availableVisibilities: null,
    availableOrders: null,

    init() {
      this._super(...arguments);

      this.availableTypes = TYPES;
      this.availableOrders = ORDERS;
      this.availableVisibilities = VISIBILITIES;
      this.setProperties(_resetQueryParams.DEFAULT_QUERY_PARAMS.posts);

      if (this.feature.get('emailAnalytics') && !this.availableOrders.findBy('name', 'Indicador de Aperturas')) {
        this.availableOrders.push({
          name: 'Indicador de Aperturas',
          value: 'email.open_rate desc'
        });
      }
    },

    postsInfinityModel: Ember.computed.alias('model'),
    showingAll: Ember.computed('type', 'author', 'tag', function () {
      let {
        type,
        author,
        tag,
        visibility
      } = this;
      return !type && !visibility && !author && !tag;
    }),
    selectedType: Ember.computed('type', function () {
      let types = this.availableTypes;
      return types.findBy('value', this.type) || {
        value: '!unknown'
      };
    }),
    selectedVisibility: Ember.computed('visibility', function () {
      let visibilities = this.availableVisibilities;
      return visibilities.findBy('value', this.visibility) || {
        value: '!unknown'
      };
    }),
    selectedOrder: Ember.computed('order', function () {
      let orders = this.availableOrders;
      return orders.findBy('value', this.order) || {
        value: '!unknown'
      };
    }),
    _availableTags: Ember.computed(function () {
      return this.store.peekAll('tag');
    }),
    availableTags: Ember.computed('_availableTags.[]', function () {
      let tags = this._availableTags.filter(tag => tag.get('id') !== null).sort((tagA, tagB) => tagA.name.localeCompare(tagB.name, undefined, {
        ignorePunctuation: true
      }));

      let options = tags.toArray();
      options.unshiftObject({
        name: 'Todas las etiquetas',
        slug: null
      });
      return options;
    }),
    selectedTag: Ember.computed('tag', '_availableTags.[]', function () {
      let tag = this.tag;
      let tags = this.availableTags;
      return tags.findBy('slug', tag) || {
        slug: '!unknown'
      };
    }),
    _availableAuthors: Ember.computed(function () {
      return this.store.peekAll('user');
    }),
    availableAuthors: Ember.computed('_availableAuthors.[]', function () {
      let authors = this._availableAuthors;
      let options = authors.toArray();
      options.unshiftObject({
        name: 'Todos los Autores',
        slug: null
      });
      return options;
    }),
    selectedAuthor: Ember.computed('author', 'availableAuthors.[]', function () {
      let author = this.author;
      let authors = this.availableAuthors;
      return authors.findBy('slug', author) || {
        slug: '!unknown'
      };
    }),
    snippets: Ember.computed(function () {
      return this.store.peekAll('snippet');
    }),
    actions: {
      changeType(type) {
        this.set('type', Ember.get(type, 'value'));
      },

      changeVisibility(visibility) {
        this.set('visibility', Ember.get(visibility, 'value'));
      },

      changeAuthor(author) {
        this.set('author', Ember.get(author, 'slug'));
      },

      changeTag(tag) {
        this.set('tag', Ember.get(tag, 'slug'));
      },

      changeOrder(order) {
        this.set('order', Ember.get(order, 'value'));
      },

      openEditor(post) {
        this.transitionToRoute('editor.edit', 'post', post.get('id'));
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/reset", ["exports", "ghost-admin/mixins/validation-engine", "ember-concurrency"], function (_exports, _validationEngine, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend(_validationEngine.default, {
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    newPassword: '',
    ne2Password: '',
    token: '',
    flowErrors: '',
    validationType: 'reset',
    email: Ember.computed('token', function () {
      // The token base64 encodes the email (and some other stuff),
      // each section is divided by a '|'. Email comes second.
      return atob(this.token).split('|')[1];
    }),
    actions: {
      submit() {
        return this.resetPassword.perform();
      }

    },

    // Used to clear sensitive information
    clearData() {
      this.setProperties({
        newPassword: '',
        ne2Password: '',
        token: ''
      });
    },

    resetPassword: (0, _emberConcurrency.task)(function* () {
      let credentials = this.getProperties('newPassword', 'ne2Password', 'token');
      let authUrl = this.get('ghostPaths.url').api('authentication', 'passwordreset');
      this.set('flowErrors', '');
      this.hasValidated.addObjects(['newPassword', 'ne2Password']);

      try {
        yield this.validate();

        try {
          let resp = yield this.ajax.put(authUrl, {
            data: {
              passwordreset: [credentials]
            }
          });
          this.notifications.showAlert(resp.passwordreset[0].message, {
            type: 'warn',
            delayed: true,
            key: 'password.reset'
          });
          this.session.authenticate('authenticator:cookie', this.email, credentials.newPassword);
          return true;
        } catch (error) {
          this.notifications.showAPIError(error, {
            key: 'password.reset'
          });
        }
      } catch (error) {
        if (this.get('errors.newPassword')) {
          this.set('flowErrors', this.get('errors.newPassword')[0].message);
        }

        if (this.get('errors.ne2Password')) {
          this.set('flowErrors', this.get('errors.ne2Password')[0].message);
        }

        if (error && this.get('errors.length') === 0) {
          throw error;
        }
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    settings: Ember.inject.service(),
    session: Ember.inject.service(),
    showLeaveSettingsModal: false,
    actions: {
      openStripeSettings() {
        this.set('membersStripeOpen', true);
      },

      closeLeaveSettingsModal() {
        this.set('showLeaveSettingsModal', false);
      },

      async leavePortalSettings() {
        this.settings.rollbackAttributes();
        this.set('showLeaveSettingsModal', false);
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/code-injection", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    actions: {
      save() {
        this.saveTask.perform();
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.saveTask.isRunning) {
            return this.saveTask.last.then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let settings = this.settings;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on settings props


        settings.rollbackAttributes();
        return transition.retry();
      }

    },
    saveTask: (0, _emberConcurrency.task)(function* () {
      let notifications = this.notifications;

      try {
        return yield this.settings.save();
      } catch (error) {
        notifications.showAPIError(error, {
          key: 'code-injection.save'
        });
        throw error;
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/design", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class SettingsDesignController extends Ember.Controller {}

  _exports.default = SettingsDesignController;

  window.__CLASSIC_OWN_CLASSES__.set(SettingsDesignController, true);
});
;define("ghost-admin/controllers/settings/design/change-theme", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ChangeThemeController = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._tracked, _dec5 = Ember._action, _dec6 = Ember._action, (_class = class ChangeThemeController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "router", _descriptor, this);

      _initializerDefineProperty(this, "store", _descriptor2, this);

      _initializerDefineProperty(this, "themeManagement", _descriptor3, this);

      _initializerDefineProperty(this, "showAdvanced", _descriptor4, this);

      _defineProperty(this, "themes", this.store.peekAll('theme'));

      _defineProperty(this, "officialThemes", [{
        name: 'Casper',
        category: 'Blog',
        previewUrl: 'https://casper.ghost.io/',
        ref: 'default',
        image: 'assets/img/themes/Casper.jpg'
      }, {
        name: 'Journal',
        category: 'Newsletter',
        url: 'https://github.com/TryGhost/Journal',
        previewUrl: 'https://journal.ghost.io/',
        ref: 'TryGhost/Journal',
        image: 'assets/img/themes/Journal.png'
      }, {
        name: 'Edition',
        category: 'Newsletter',
        url: 'https://github.com/TryGhost/Edition',
        previewUrl: 'https://edition.ghost.io/',
        ref: 'TryGhost/Edition',
        image: 'assets/img/themes/Edition.png'
      }, {
        name: 'Digest',
        category: 'Newsletter',
        url: 'https://github.com/TryGhost/Digest',
        previewUrl: 'https://digest.ghost.io/',
        ref: 'TryGhost/Digest',
        image: 'assets/img/themes/Digest.png'
      }, {
        name: 'Bulletin',
        category: 'Newsletter',
        url: 'https://github.com/TryGhost/Bulletin',
        previewUrl: 'https://bulletin.ghost.io/',
        ref: 'TryGhost/Bulletin',
        image: 'assets/img/themes/Bulletin.png'
      }, {
        name: 'Dawn',
        category: 'Newsletter',
        url: 'https://github.com/TryGhost/Dawn',
        previewUrl: 'https://dawn.ghost.io/',
        ref: 'TryGhost/Dawn',
        image: 'assets/img/themes/Dawn.png'
      }, {
        name: 'Alto',
        category: 'Blog',
        url: 'https://github.com/TryGhost/Alto',
        previewUrl: 'https://alto.ghost.io',
        ref: 'TryGhost/Alto',
        image: 'assets/img/themes/Alto.png'
      }, {
        name: 'Edge',
        category: 'Photography',
        url: 'https://github.com/TryGhost/Edge',
        previewUrl: 'https://edge.ghost.io',
        ref: 'TryGhost/Edge',
        image: 'assets/img/themes/Edge.png'
      }, {
        name: 'Ease',
        category: 'Documentation',
        url: 'https://github.com/TryGhost/Ease',
        previewUrl: 'https://ease.ghost.io',
        ref: 'TryGhost/Ease',
        image: 'assets/img/themes/Ease.png'
      }, {
        name: 'Ruby',
        category: 'Magazine',
        url: 'https://github.com/TryGhost/Ruby',
        previewUrl: 'https://ruby.ghost.io',
        ref: 'TryGhost/Ruby',
        image: 'assets/img/themes/Ruby.png'
      }, {
        name: 'Dope',
        category: 'Magazine',
        url: 'https://github.com/TryGhost/Dope',
        previewUrl: 'https://dope.ghost.io',
        ref: 'TryGhost/Dope',
        image: 'assets/img/themes/Dope.png'
      }, {
        name: 'Wave',
        category: 'Podcast',
        url: 'https://github.com/TryGhost/Wave',
        previewUrl: 'https://wave.ghost.io',
        ref: 'TryGhost/Wave',
        image: 'assets/img/themes/Wave.png'
      }, {
        name: 'London',
        category: 'Photography',
        url: 'https://github.com/TryGhost/London',
        previewUrl: 'https://london.ghost.io',
        ref: 'TryGhost/London',
        image: 'assets/img/themes/London.jpg'
      }]);
    }

    get themesList() {
      const activeTheme = this.themes.findBy('active', true); // decorate themes based on current usage

      let themesList = this.officialThemes.map(theme => {
        const decoratedTheme = Object.assign({}, theme);

        if (theme.ref === 'default') {
          decoratedTheme.isDefault = true;
        }

        if (theme.name.toLowerCase() === activeTheme.name) {
          decoratedTheme.isActive = true;
        }

        return decoratedTheme;
      }); // move default themes to the beginning of the list

      themesList.sort((a, b) => {
        if (b.isDefault) {
          return 1;
        }

        return 0;
      }); // ensure active theme is always first

      const activeThemeInList = themesList.find(theme => theme.isActive);
      const activeThemeIndex = themesList.indexOf(activeThemeInList);

      if (activeThemeIndex > 0) {
        themesList.splice(activeThemeIndex, 1);
        themesList.unshift(activeThemeInList);
      }

      return themesList;
    }

    startThemeUpload(event) {
      event?.preventDefault();
      this.themeManagement.upload({
        onActivationSuccess: () => {
          this.router.transitionTo('settings.design');
        }
      });
    }

    toggleAdvanced(event) {
      this.showAdvanced = !this.showAdvanced;

      if (this.showAdvanced) {
        const mainContainer = event?.target.closest('.gh-main');

        if (mainContainer) {
          mainContainer.scrollTop = 0;
        }
      }
    }

    reset() {
      this.showAdvanced = false;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "themeManagement", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "showAdvanced", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "startThemeUpload", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "startThemeUpload"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleAdvanced", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "toggleAdvanced"), _class.prototype)), _class));
  _exports.default = ChangeThemeController;
});
;define("ghost-admin/controllers/settings/design/change-theme/install", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let InstallThemeController = (_dec = Ember._tracked, _dec2 = Ember._tracked, (_class = class InstallThemeController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _defineProperty(this, "queryParams", ['source', 'ref']);

      _initializerDefineProperty(this, "source", _descriptor, this);

      _initializerDefineProperty(this, "ref", _descriptor2, this);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "source", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ref", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  })), _class));
  _exports.default = InstallThemeController;
});
;define("ghost-admin/controllers/settings/design/index", ["exports", "ember-concurrency-decorators"], function (_exports, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let SettingsDesignIndexController = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember._tracked, _dec7 = Ember._action, _dec8 = Ember._action, (_class = class SettingsDesignIndexController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "customThemeSettings", _descriptor2, this);

      _initializerDefineProperty(this, "notifications", _descriptor3, this);

      _initializerDefineProperty(this, "settings", _descriptor4, this);

      _initializerDefineProperty(this, "themeManagement", _descriptor5, this);

      _initializerDefineProperty(this, "previewSize", _descriptor6, this);
    }

    get isDesktopPreview() {
      return this.previewSize === 'desktop';
    }

    get isMobilePreview() {
      return this.previewSize === 'mobile';
    }

    setPreviewSize(size) {
      this.previewSize = size;
    }

    saveFromKeyboard() {
      document.activeElement.blur?.();
      return this.saveTask.perform();
    }

    *saveTask() {
      try {
        if (this.settings.get('errors').length !== 0) {
          return;
        }

        yield Promise.all([this.settings.save(), this.customThemeSettings.save()]); // ensure task button switches to success state

        return true;
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error);
          throw error;
        }
      }
    }

    reset() {
      this.previewSize = 'desktop';
      this.themeManagement.setPreviewType('homepage');
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "customThemeSettings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "themeManagement", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "previewSize", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'desktop';
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setPreviewSize", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "setPreviewSize"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveFromKeyboard", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "saveFromKeyboard"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "saveTask"), _class.prototype)), _class));
  _exports.default = SettingsDesignIndexController;
});
;define("ghost-admin/controllers/settings/general", ["exports", "jquery", "ghost-admin/utils/password-generator", "validator", "ghost-admin/components/gh-image-uploader", "ember-concurrency"], function (_exports, _jquery, _passwordGenerator, _validator, _ghImageUploader, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  function randomPassword() {
    let word = (0, _passwordGenerator.default)(6);
    let randomN = Math.floor(Math.random() * 1000);
    return word + randomN;
  }

  var _default = Ember.Controller.extend({
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    frontend: Ember.inject.service(),
    ui: Ember.inject.service(),
    availableTimezones: null,
    imageExtensions: _ghImageUploader.IMAGE_EXTENSIONS,
    imageMimeTypes: _ghImageUploader.IMAGE_MIME_TYPES,
    _scratchFacebook: null,
    _scratchTwitter: null,
    privateRSSUrl: Ember.computed('config.blogUrl', 'settings.publicHash', function () {
      let blogUrl = this.get('config.blogUrl');
      let publicHash = this.get('settings.publicHash');
      return `${blogUrl}/${publicHash}/rss`;
    }),
    actions: {
      save() {
        this.save.perform();
      },

      setTimezone(timezone) {
        this.set('settings.timezone', timezone.name);
      },

      removeImage(image) {
        // setting `null` here will error as the server treats it as "null"
        this.settings.set(image, '');
      },

      /**
       * Opens a file selection dialog - Triggered by "Upload Image" buttons,
       * searches for the hidden file input within the .gh-setting element
       * containing the clicked button then simulates a click
       * @param  {MouseEvent} event - MouseEvent fired by the button click
       */
      triggerFileDialog(event) {
        // simulate click to open file dialog
        // using jQuery because IE11 doesn't support MouseEvent
        (0, _jquery.default)(event.target).closest('.gh-setting-action').find('input[type="file"]').click();
      },

      /**
       * Fired after an image upload completes
       * @param  {string} property - Property name to be set on `this.settings`
       * @param  {UploadResult[]} results - Array of UploadResult objects
       * @return {string} The URL that was set on `this.settings.property`
       */
      imageUploaded(property, results) {
        if (results[0]) {
          return this.settings.set(property, results[0].url);
        }
      },

      toggleIsPrivate(isPrivate) {
        let settings = this.settings;
        settings.set('isPrivate', isPrivate);
        settings.get('errors').remove('password');
        let changedAttrs = settings.changedAttributes(); // set a new random password when isPrivate is enabled

        if (isPrivate && changedAttrs.isPrivate) {
          settings.set('password', randomPassword()); // reset the password when isPrivate is disabled
        } else if (changedAttrs.password) {
          settings.set('password', changedAttrs.password[0]);
        }
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.save.isRunning) {
            return this.save.last.then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let settings = this.settings;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on settings props


        settings.rollbackAttributes();
        return transition.retry();
      },

      validateFacebookUrl() {
        let newUrl = this._scratchFacebook;
        let oldUrl = this.get('settings.facebook');
        let errMessage = ''; // reset errors and validation

        this.get('settings.errors').remove('facebook');
        this.get('settings.hasValidated').removeObject('facebook');

        if (newUrl === '') {
          // Clear out the Facebook url
          this.set('settings.facebook', '');
          return;
        } // _scratchFacebook will be null unless the user has input something


        if (!newUrl) {
          newUrl = oldUrl;
        }

        try {
          // strip any facebook URLs out
          newUrl = newUrl.replace(/(https?:\/\/)?(www\.)?facebook\.com/i, ''); // don't allow any non-facebook urls

          if (newUrl.match(/^(http|\/\/)/i)) {
            throw 'invalid url';
          } // strip leading / if we have one then concat to full facebook URL


          newUrl = newUrl.replace(/^\//, '');
          newUrl = `https://www.facebook.com/${newUrl}`; // don't allow URL if it's not valid

          if (!_validator.default.isURL(newUrl)) {
            throw 'invalid url';
          }

          this.settings.set('facebook', newUrl);
          this.settings.notifyPropertyChange('facebook');
        } catch (e) {
          if (e === 'invalid url') {
            errMessage = 'The URL must be in a format like ' + 'https://www.facebook.com/yourPage';
            this.get('settings.errors').add('facebook', errMessage);
            return;
          }

          throw e;
        } finally {
          this.get('settings.hasValidated').pushObject('facebook');
        }
      },

      validateTwitterUrl() {
        let newUrl = this._scratchTwitter;
        let oldUrl = this.get('settings.twitter');
        let errMessage = ''; // reset errors and validation

        this.get('settings.errors').remove('twitter');
        this.get('settings.hasValidated').removeObject('twitter');

        if (newUrl === '') {
          // Clear out the Twitter url
          this.set('settings.twitter', '');
          return;
        } // _scratchTwitter will be null unless the user has input something


        if (!newUrl) {
          newUrl = oldUrl;
        }

        if (newUrl.match(/(?:twitter\.com\/)(\S+)/) || newUrl.match(/([a-z\d.]+)/i)) {
          let username = [];

          if (newUrl.match(/(?:twitter\.com\/)(\S+)/)) {
            [, username] = newUrl.match(/(?:twitter\.com\/)(\S+)/);
          } else {
            [username] = newUrl.match(/([^/]+)\/?$/mi);
          } // check if username starts with http or www and show error if so


          if (username.match(/^(http|www)|(\/)/) || !username.match(/^[a-z\d._]{1,15}$/mi)) {
            errMessage = !username.match(/^[a-z\d._]{1,15}$/mi) ? 'Your Username is not a valid Twitter Username' : 'The URL must be in a format like https://twitter.com/yourUsername';
            this.get('settings.errors').add('twitter', errMessage);
            this.get('settings.hasValidated').pushObject('twitter');
            return;
          }

          newUrl = `https://twitter.com/${username}`;
          this.settings.get('hasValidated').pushObject('twitter');
          this.settings.set('twitter', newUrl);
          this.settings.notifyPropertyChange('twitter');
        } else {
          errMessage = 'The URL must be in a format like ' + 'https://twitter.com/yourUsername';
          this.get('settings.errors').add('twitter', errMessage);
          this.get('settings.hasValidated').pushObject('twitter');
          return;
        }
      }

    },

    _deleteTheme() {
      let theme = this.store.peekRecord('theme', this.themeToDelete.name);

      if (!theme) {
        return;
      }

      return theme.destroyRecord().catch(error => {
        this.notifications.showAPIError(error);
      });
    },

    save: (0, _emberConcurrency.task)(function* () {
      let notifications = this.notifications;
      let config = this.config;

      if (this.settings.get('twitter') !== this._scratchTwitter) {
        this.send('validateTwitterUrl');
      }

      if (this.settings.get('facebook') !== this._scratchFacebook) {
        this.send('validateFacebookUrl');
      }

      try {
        let changedAttrs = this.settings.changedAttributes();
        let settings = yield this.settings.save();
        config.set('blogTitle', settings.get('title'));

        if (changedAttrs.password) {
          this.frontend.loginIfNeeded();
        } // this forces the document title to recompute after a blog title change


        this.ui.updateDocumentTitle();
        return settings;
      } catch (error) {
        if (error) {
          notifications.showAPIError(error, {
            key: 'settings.save'
          });
        }

        throw error;
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integration", ["exports", "ghost-admin/config/environment", "ghost-admin/utils/copy-text-to-clipboard", "ghost-admin/components/gh-image-uploader", "ember-concurrency"], function (_exports, _environment, _copyTextToClipboard, _ghImageUploader, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    imageExtensions: _ghImageUploader.IMAGE_EXTENSIONS,
    imageMimeTypes: _ghImageUploader.IMAGE_MIME_TYPES,
    showRegenerateKeyModal: false,
    selectedApiKey: null,
    isApiKeyRegenerated: false,

    init() {
      this._super(...arguments);

      if (this.isTesting === undefined) {
        this.isTesting = _environment.default.environment === 'test';
      }
    },

    integration: Ember.computed.alias('model'),
    apiUrl: Ember.computed(function () {
      let origin = window.location.origin;
      let subdir = this.ghostPaths.subdir;
      let url = this.ghostPaths.url.join(origin, subdir);
      return url.replace(/\/$/, '');
    }),
    regeneratedKeyType: Ember.computed('isApiKeyRegenerated', 'selectedApiKey', function () {
      if (this.isApiKeyRegenerated) {
        return this.get('selectedApiKey.type');
      }

      return null;
    }),
    allWebhooks: Ember.computed(function () {
      return this.store.peekAll('webhook');
    }),
    filteredWebhooks: Ember.computed('integration.id', 'allWebhooks.@each.{isNew,isDeleted}', function () {
      return this.allWebhooks.filter(webhook => {
        let matchesIntegration = webhook.belongsTo('integration').id() === this.integration.id;
        return matchesIntegration && !webhook.isNew && !webhook.isDeleted;
      });
    }),
    iconImageStyle: Ember.computed('integration.iconImage', function () {
      let url = this.integration.iconImage;

      if (url) {
        let styles = [`background-image: url(${url})`, 'background-size: 50%', 'background-position: 50%', 'background-repeat: no-repeat'];
        return Ember.String.htmlSafe(styles.join('; '));
      }

      return Ember.String.htmlSafe('');
    }),
    actions: {
      triggerIconFileDialog() {
        let input = document.querySelector('input[type="file"][name="iconImage"]');
        input.click();
      },

      setIconImage(_ref) {
        let [image] = _ref;
        this.integration.set('iconImage', image.url);
      },

      save() {
        return this.save.perform();
      },

      toggleUnsavedChangesModal(transition) {
        let leaveTransition = this.leaveScreenTransition;

        if (!transition && this.showUnsavedChangesModal) {
          this.set('leaveScreenTransition', null);
          this.set('showUnsavedChangesModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveScreenTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.save.isRunning) {
            return this.save.last.then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showUnsavedChangesModal', true);
        }
      },

      leaveScreen() {
        let transition = this.leaveScreenTransition;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on model props


        this.integration.rollbackAttributes();
        return transition.retry();
      },

      deleteIntegration() {
        this.integration.destroyRecord();
      },

      confirmIntegrationDeletion() {
        this.set('showDeleteIntegrationModal', true);
      },

      cancelIntegrationDeletion() {
        this.set('showDeleteIntegrationModal', false);
      },

      confirmRegenerateKeyModal(apiKey) {
        this.set('showRegenerateKeyModal', true);
        this.set('isApiKeyRegenerated', false);
        this.set('selectedApiKey', apiKey);
      },

      cancelRegenerateKeyModal() {
        this.set('showRegenerateKeyModal', false);
      },

      regenerateKey() {
        this.set('isApiKeyRegenerated', true);
      },

      confirmWebhookDeletion(webhook) {
        this.set('webhookToDelete', webhook);
      },

      cancelWebhookDeletion() {
        this.set('webhookToDelete', null);
      },

      deleteWebhook() {
        return this.webhookToDelete.destroyRecord();
      }

    },
    save: (0, _emberConcurrency.task)(function* () {
      return yield this.integration.save();
    }),
    copyContentKey: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.integration.contentKey.secret);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 3000);
    }),
    copyAdminKey: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.integration.adminKey.secret);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 3000);
    }),
    copyApiUrl: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.apiUrl);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 3000);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integration/webhooks/edit", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    webhook: Ember.computed.alias('model'),
    actions: {
      save() {
        return this.webhook.save();
      },

      cancel() {
        // 'new' route's dectivate hook takes care of rollback
        return this.webhook.get('integration').then(integration => {
          this.transitionToRoute('settings.integration', integration);
        });
      }

    },

    reset() {
      this.webhook.rollbackAttributes();
      this.webhook.errors.clear();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integration/webhooks/new", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    webhook: Ember.computed.alias('model'),
    actions: {
      save() {
        return this.webhook.save();
      },

      cancel() {
        // 'new' route's dectivate hook takes care of rollback
        return this.webhook.get('integration').then(integration => {
          this.transitionToRoute('settings.integration', integration);
        });
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integrations", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    settings: Ember.inject.service(),
    store: Ember.inject.service(),
    config: Ember.inject.service(),
    _allIntegrations: null,

    init() {
      this._super(...arguments);

      this._allIntegrations = this.store.peekAll('integration');
    },

    zapierDisabled: Ember.computed('config.hostSettings.limits', function () {
      return this.config.get('hostSettings.limits.customIntegrations.disabled');
    }),
    // filter over the live query so that the list is automatically updated
    // as integrations are added/removed
    integrations: Ember.computed('_allIntegrations.@each.{isNew,type}', function () {
      return this._allIntegrations.reject(integration => {
        return integration.isNew || integration.type !== 'custom';
      });
    }),
    // use ember-concurrency so that we can use the derived state to show
    // a spinner only in the integrations list and avoid delaying the whole
    // screen display
    fetchIntegrations: (0, _emberConcurrency.task)(function* () {
      return yield this.store.findAll('integration');
    }),

    // used by individual integration routes' `model` hooks
    integrationModelHook(prop, value, route, transition) {
      let preloadedIntegration = this.store.peekAll('integration').findBy(prop, value);

      if (preloadedIntegration) {
        return preloadedIntegration;
      }

      return this.fetchIntegrations.perform().then(integrations => {
        let integration = integrations.findBy(prop, value);

        if (!integration) {
          let path = transition.intent.url.replace(/^\//, '');
          return route.replaceWith('error404', {
            path,
            status: 404
          });
        }

        return integration;
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integrations/amp", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    leaveSettingsTransition: null,
    actions: {
      update(value) {
        this.settings.set('amp', value);
      },

      save() {
        this.save.perform();
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.save.isRunning) {
            return this.save.last.then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let settings = this.settings;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on settings model


        settings.rollbackAttributes();
        return transition.retry();
      }

    },
    save: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.settings.validate();
        return yield this.settings.save();
      } catch (error) {
        this.notifications.showAPIError(error);
        throw error;
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integrations/firstpromoter", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    leaveSettingsTransition: null,
    actions: {
      update(value) {
        this.settings.set('firstpromoter', value);
      },

      save() {
        this.save.perform();
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.save.isRunning) {
            return this.save.last.then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let settings = this.settings;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on settings model


        settings.rollbackAttributes();
        return transition.retry();
      }

    },
    save: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.settings.validate();
        return yield this.settings.save();
      } catch (error) {
        this.notifications.showAPIError(error);
        throw error;
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integrations/slack", ["exports", "ghost-admin/utils/bound-one-way", "ember-ajax/errors", "ember-concurrency"], function (_exports, _boundOneWay, _errors, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    leaveSettingsTransition: null,
    slackArray: null,

    init() {
      this._super(...arguments);

      this.slackArray = [];
    },

    slackSettings: (0, _boundOneWay.default)('settings.slack.firstObject'),
    testNotificationDisabled: Ember.computed.empty('slackSettings.url'),
    actions: {
      save() {
        this.save.perform();
      },

      updateURL(value) {
        value = typeof value === 'string' ? value.trim() : value;
        this.set('slackSettings.url', value);
        this.get('slackSettings.errors').clear();
      },

      updateUsername(value) {
        value = typeof value === 'string' ? value.trimLeft() : value;
        this.set('slackSettings.username', value);
        this.get('slackSettings.errors').clear();
      },

      triggerDirtyState() {
        let slack = this.slackSettings;
        let slackArray = this.slackArray;
        let settings = this.settings; // Hack to trigger the `isDirty` state on the settings model by setting a new Array
        // for slack rather that replacing the existing one which would still point to the
        // same reference and therfore not setting the model into a dirty state

        slackArray.clear().pushObject(slack);
        settings.set('slack', slackArray);
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.save.isRunning) {
            return this.save.last.then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let settings = this.settings;
        let slackArray = this.slackArray;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on model props


        settings.rollbackAttributes();
        slackArray.clear();
        return transition.retry();
      }

    },
    save: (0, _emberConcurrency.task)(function* () {
      let slack = this.slackSettings;
      let settings = this.settings;
      let slackArray = this.slackArray;

      try {
        yield slack.validate(); // clear existing objects in slackArray to make sure we only push the validated one

        slackArray.clear().pushObject(slack);
        yield settings.set('slack', slackArray);
        return yield settings.save();
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error);
          throw error;
        }
      }
    }).drop(),
    sendTestNotification: (0, _emberConcurrency.task)(function* () {
      let notifications = this.notifications;
      let slackApi = this.get('ghostPaths.url').api('slack', 'test');

      try {
        yield this.save.perform();
        yield this.ajax.post(slackApi);
        notifications.showNotification('Test notification sent', {
          type: 'info',
          key: 'slack-test.send.success',
          description: 'Check your Slack channel for the test message'
        });
        return true;
      } catch (error) {
        notifications.showAPIError(error, {
          key: 'slack-test:send'
        });

        if (!(0, _errors.isInvalidError)(error)) {
          throw error;
        }
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integrations/unsplash", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    leaveSettingsTransition: null,
    actions: {
      update(value) {
        this.settings.set('unsplash', value);
      },

      save() {
        this.save.perform();
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.save.isRunning) {
            return this.save.last.then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let settings = this.settings;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on settings model


        settings.rollbackAttributes();
        return transition.retry();
      }

    },
    save: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.settings.validate();
        return yield this.settings.save();
      } catch (error) {
        this.notifications.showAPIError(error);
        throw error;
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integrations/zapier", ["exports", "ghost-admin/config/environment", "ghost-admin/utils/copy-text-to-clipboard", "ember-concurrency"], function (_exports, _environment, _copyTextToClipboard, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    ghostPaths: Ember.inject.service(),
    selectedApiKey: null,
    isApiKeyRegenerated: false,

    init() {
      this._super(...arguments);

      if (this.isTesting === undefined) {
        this.isTesting = _environment.default.environment === 'test';
      }
    },

    integration: Ember.computed.alias('model'),
    apiUrl: Ember.computed(function () {
      let origin = window.location.origin;
      let subdir = this.ghostPaths.subdir;
      let url = this.ghostPaths.url.join(origin, subdir);
      return url.replace(/\/$/, '');
    }),
    regeneratedKeyType: Ember.computed('isApiKeyRegenerated', 'selectedApiKey', function () {
      if (this.isApiKeyRegenerated) {
        return this.get('selectedApiKey.type');
      }

      return null;
    }),
    actions: {
      confirmRegenerateKeyModal(apiKey) {
        this.set('showRegenerateKeyModal', true);
        this.set('isApiKeyRegenerated', false);
        this.set('selectedApiKey', apiKey);
      },

      cancelRegenerateKeyModal() {
        this.set('showRegenerateKeyModal', false);
      },

      regenerateKey() {
        this.set('isApiKeyRegenerated', true);
      }

    },
    copyAdminKey: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.integration.adminKey.secret);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 3000);
    }),
    copyApiUrl: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.apiUrl);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 3000);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/labs", ["exports", "jquery", "ghost-admin/config/environment", "ghost-admin/services/ajax", "ember-concurrency"], function (_exports, _jquery, _environment, _ajax, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  const {
    Promise
  } = Ember.RSVP;
  const IMPORT_MIME_TYPES = ['application/json', 'application/zip', 'application/x-zip-compressed'];
  const JSON_EXTENSION = ['json'];
  const JSON_MIME_TYPE = ['application/json'];
  const YAML_EXTENSION = ['yaml'];
  const YAML_MIME_TYPE = ['text/vnd.yaml', 'application/vnd.yaml', 'text/x-yaml', 'application/x-yaml'];

  var _default = Ember.Controller.extend({
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    feature: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    utils: Ember.inject.service(),
    importErrors: null,
    importSuccessful: false,
    showDeleteAllModal: false,
    showEarlyAccessModal: false,
    showEnableTiersModal: false,
    submitting: false,
    uploadButtonText: 'Import',
    importMimeType: null,
    redirectsFileExtensions: null,
    redirectsFileMimeTypes: null,
    yamlExtension: null,
    yamlMimeType: null,
    yamlAccept: null,
    isOAuthConfigurationOpen: false,

    init() {
      this._super(...arguments);

      this.importMimeType = IMPORT_MIME_TYPES;
      this.redirectsFileExtensions = [...JSON_EXTENSION, ...YAML_EXTENSION]; // .yaml is added below for file dialogs to show .yaml by default.

      this.redirectsFileMimeTypes = [...JSON_MIME_TYPE, ...YAML_MIME_TYPE, '.yaml'];
      this.yamlExtension = YAML_EXTENSION;
      this.yamlMimeType = YAML_MIME_TYPE; // (macOS) Safari only allows files with the `yml` extension to be selected with the specified MIME types
      // so explicitly allow the `yaml` extension.

      this.yamlAccept = [...this.yamlMimeType, ...Array.from(this.yamlExtension, extension => '.' + extension)];
    },

    actions: {
      onUpload(file) {
        let formData = new FormData();
        let notifications = this.notifications;
        let currentUserId = this.get('session.user.id');
        let dbUrl = this.get('ghostPaths.url').api('db');
        this.set('uploadButtonText', 'Importing');
        this.set('importErrors', null);
        this.set('importSuccessful', false);
        return this._validate(file).then(() => {
          formData.append('importfile', file);
          return this.ajax.post(dbUrl, {
            data: formData,
            dataType: 'json',
            cache: false,
            contentType: false,
            processData: false
          });
        }).then(response => {
          let store = this.store;
          this.set('importSuccessful', true);

          if (response.problems) {
            this.set('importErrors', response.problems);
          } // Clear the store, so that all the new data gets fetched correctly.


          store.unloadAll(); // NOTE: workaround for behaviour change in Ember 2.13
          // store.unloadAll has some async tendencies so we need to schedule
          // the reload of the current user once the unload has finished
          // https://github.com/emberjs/data/issues/4963

          Ember.run.schedule('destroy', this, () => {
            // Reload currentUser and set session
            this.session.populateUser({
              id: currentUserId
            }); // TODO: keep as notification, add link to view content

            notifications.showNotification('Import successful', {
              key: 'import.upload.success'
            }); // reload settings

            return this.settings.reload().then(settings => {
              this.feature.fetch();
              this.config.set('blogTitle', settings.get('title'));
            });
          });
        }).catch(response => {
          if ((0, _ajax.isUnsupportedMediaTypeError)(response) || (0, _ajax.isRequestEntityTooLargeError)(response)) {
            this.set('importErrors', [response]);
          } else if (response && response.payload.errors && Ember.isArray(response.payload.errors)) {
            this.set('importErrors', response.payload.errors);
          } else {
            this.set('importErrors', [{
              message: 'Import failed due to an unknown error. Check the Web Inspector console and network tabs for errors.'
            }]);
          }

          throw response;
        }).finally(() => {
          this.set('uploadButtonText', 'Import');
        });
      },

      downloadFile(endpoint) {
        this.utils.downloadFile(this.ghostPaths.url.api(endpoint));
      },

      async saveOAuthSettings() {
        await this.settings.save();
      },

      toggleDeleteAllModal() {
        this.toggleProperty('showDeleteAllModal');
      },

      toggleEarlyAccessModal() {
        this.toggleProperty('showEarlyAccessModal');
      },

      toggleEnableTiersModal() {
        this.toggleProperty('showEnableTiersModal');
      },

      async toggleIsOAuthEnabled() {
        if (this.isOAuthEnabled) {
          this.settings.set('oauthClientId', '');
          this.settings.set('oauthClientSecret', '');
          Ember.set(this, 'isOAuthConfigurationOpen', false);
          await this.settings.save();
        } else {
          Ember.set(this, 'isOAuthConfigurationOpen', true);
        }
      },

      /**
       * Opens a file selection dialog - Triggered by "Upload x" buttons,
       * searches for the hidden file input within the .gh-setting element
       * containing the clicked button then simulates a click
       * @param  {MouseEvent} event - MouseEvent fired by the button click
       */
      triggerFileDialog(event) {
        // simulate click to open file dialog
        // using jQuery because IE11 doesn't support MouseEvent
        (0, _jquery.default)(event.target).closest('.gh-setting-action').find('input[type="file"]').click();
      }

    },

    // TODO: convert to ember-concurrency task
    _validate(file) {
      // Windows doesn't have mime-types for json files by default, so we
      // need to have some additional checking
      if (file.type === '') {
        // First check file extension so we can early return
        let [, extension] = /(?:\.([^.]+))?$/.exec(file.name);

        if (!extension || extension.toLowerCase() !== 'json') {
          return Ember.RSVP.reject(new _ajax.UnsupportedMediaTypeError());
        }

        return new Promise((resolve, reject) => {
          // Extension is correct, so check the contents of the file
          let reader = new FileReader();

          reader.onload = function () {
            let {
              result
            } = reader;

            try {
              JSON.parse(result);
              return resolve();
            } catch (e) {
              return reject(new _ajax.UnsupportedMediaTypeError());
            }
          };

          reader.readAsText(file);
        });
      }

      let accept = this.importMimeType;

      if (!Ember.isBlank(accept) && file && accept.indexOf(file.type) === -1) {
        return Ember.RSVP.reject(new _ajax.UnsupportedMediaTypeError());
      }

      return Ember.RSVP.resolve();
    },

    redirectUploadResult: (0, _emberConcurrency.task)(function* (success) {
      this.set('redirectSuccess', success);
      this.set('redirectFailure', !success);
      yield (0, _emberConcurrency.timeout)(_environment.default.environment === 'test' ? 100 : 5000);
      this.set('redirectSuccess', null);
      this.set('redirectFailure', null);
      return true;
    }).drop(),
    routesUploadResult: (0, _emberConcurrency.task)(function* (success) {
      this.set('routesSuccess', success);
      this.set('routesFailure', !success);
      yield (0, _emberConcurrency.timeout)(_environment.default.environment === 'test' ? 100 : 5000);
      this.set('routesSuccess', null);
      this.set('routesFailure', null);
      return true;
    }).drop(),

    reset() {
      this.set('importErrors', null);
      this.set('importSuccessful', false);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/members-email", ["exports", "ember-concurrency-decorators"], function (_exports, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let MembersEmailController = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._action, _dec9 = Ember._action, _dec10 = Ember._action, _dec11 = Ember._action, _dec12 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class MembersEmailController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "settings", _descriptor3, this);

      _defineProperty(this, "queryParams", ['showEmailDesignSettings']);

      _initializerDefineProperty(this, "fromAddress", _descriptor4, this);

      _initializerDefineProperty(this, "supportAddress", _descriptor5, this);

      _initializerDefineProperty(this, "showEmailDesignSettings", _descriptor6, this);

      _initializerDefineProperty(this, "showLeaveSettingsModal", _descriptor7, this);
    }

    setEmailAddress(property, email) {
      this[property] = email;
    }

    toggleEmailDesignSettings() {
      this.showEmailDesignSettings = !this.showEmailDesignSettings;
    }

    leaveRoute(transition) {
      if (this.settings.get('hasDirtyAttributes')) {
        transition.abort();
        this.leaveSettingsTransition = transition;
        this.showLeaveSettingsModal = true;
      }

      this.showEmailDesignSettings = false;
    }

    async confirmLeave() {
      this.settings.rollbackAttributes();
      this.showLeaveSettingsModal = false;
      this.leaveSettingsTransition.retry();
    }

    cancelLeave() {
      this.showLeaveSettingsModal = false;
      this.leaveSettingsTransition = null;
    }

    parseEmailAddress(address) {
      const emailAddress = address || 'noreply'; // Adds default domain as site domain

      if (emailAddress.indexOf('@') < 0 && this.config.emailDomain) {
        return `${emailAddress}@${this.config.emailDomain}`;
      }

      return emailAddress;
    }

    resetEmailAddresses() {
      this.fromAddress = this.parseEmailAddress(this.settings.get('membersFromAddress'));
      this.supportAddress = this.parseEmailAddress(this.settings.get('membersSupportAddress'));
    }

    *saveSettings() {
      const response = yield this.settings.save();
      this.resetEmailAddresses();
      return response;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "fromAddress", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "supportAddress", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "showEmailDesignSettings", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "showLeaveSettingsModal", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setEmailAddress", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "setEmailAddress"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleEmailDesignSettings", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "toggleEmailDesignSettings"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "confirmLeave", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "confirmLeave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "cancelLeave", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "cancelLeave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveSettings", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "saveSettings"), _class.prototype)), _class));
  _exports.default = MembersEmailController;
});
;define("ghost-admin/controllers/settings/membership", ["exports", "ghost-admin/config/environment", "ghost-admin/utils/currency", "ember-concurrency-decorators"], function (_exports, _environment, _currency, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const CURRENCIES = _currency.currencies.map(currency => {
    return {
      value: currency.isoCode.toLowerCase(),
      label: `${currency.isoCode} - ${currency.name}`,
      isoCode: currency.isoCode
    };
  });

  let MembersAccessController = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._tracked, _dec10 = Ember._tracked, _dec11 = Ember._tracked, _dec12 = Ember._tracked, _dec13 = Ember._tracked, _dec14 = Ember._tracked, _dec15 = Ember._tracked, _dec16 = Ember._tracked, _dec17 = Ember._tracked, _dec18 = Ember._tracked, _dec19 = Ember._tracked, _dec20 = Ember._tracked, _dec21 = Ember._tracked, _dec22 = Ember._action, _dec23 = Ember._action, _dec24 = Ember._action, _dec25 = Ember._action, _dec26 = Ember._action, _dec27 = Ember._action, _dec28 = Ember._action, _dec29 = Ember._action, _dec30 = Ember._action, _dec31 = Ember._action, _dec32 = Ember._action, _dec33 = Ember._action, _dec34 = Ember._action, _dec35 = Ember._action, _dec36 = Ember._action, _dec37 = Ember._action, _dec38 = Ember._action, _dec39 = Ember._action, _dec40 = Ember._action, _dec41 = Ember._action, _dec42 = Ember._action, _dec43 = Ember._action, _dec44 = Ember._action, _dec45 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), _dec46 = (0, _emberConcurrencyDecorators.task)({
    drop: true
  }), (_class = class MembersAccessController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "feature", _descriptor2, this);

      _initializerDefineProperty(this, "membersUtils", _descriptor3, this);

      _initializerDefineProperty(this, "settings", _descriptor4, this);

      _initializerDefineProperty(this, "store", _descriptor5, this);

      _initializerDefineProperty(this, "session", _descriptor6, this);

      _initializerDefineProperty(this, "showLeavePortalModal", _descriptor7, this);

      _initializerDefineProperty(this, "showLeaveRouteModal", _descriptor8, this);

      _initializerDefineProperty(this, "showPortalSettings", _descriptor9, this);

      _initializerDefineProperty(this, "showStripeConnect", _descriptor10, this);

      _initializerDefineProperty(this, "showProductModal", _descriptor11, this);

      _initializerDefineProperty(this, "product", _descriptor12, this);

      _initializerDefineProperty(this, "products", _descriptor13, this);

      _initializerDefineProperty(this, "productModel", _descriptor14, this);

      _initializerDefineProperty(this, "paidSignupRedirect", _descriptor15, this);

      _initializerDefineProperty(this, "freeSignupRedirect", _descriptor16, this);

      _initializerDefineProperty(this, "stripeMonthlyAmount", _descriptor17, this);

      _initializerDefineProperty(this, "stripeYearlyAmount", _descriptor18, this);

      _initializerDefineProperty(this, "currency", _descriptor19, this);

      _initializerDefineProperty(this, "stripePlanError", _descriptor20, this);

      _initializerDefineProperty(this, "portalPreviewUrl", _descriptor21, this);

      _defineProperty(this, "portalPreviewGuid", Date.now().valueOf());

      _defineProperty(this, "queryParams", ['showPortalSettings']);
    }

    get freeProduct() {
      return this.products?.find(product => product.type === 'free');
    }

    get paidProducts() {
      return this.products?.filter(product => product.type === 'paid');
    }

    get allCurrencies() {
      return (0, _currency.getCurrencyOptions)();
    }

    get siteUrl() {
      return this.config.get('blogUrl');
    }

    get selectedCurrency() {
      return CURRENCIES.findBy('value', this.currency);
    }

    get isConnectDisallowed() {
      const siteUrl = this.config.get('blogUrl');
      return _environment.default.environment !== 'development' && !/^https:/.test(siteUrl);
    }

    get hasChangedPrices() {
      if (this.product) {
        const monthlyPrice = this.product.get('monthlyPrice');
        const yearlyPrice = this.product.get('yearlyPrice');

        if (monthlyPrice?.amount && parseFloat(this.stripeMonthlyAmount) !== monthlyPrice.amount / 100) {
          return true;
        }

        if (yearlyPrice?.amount && parseFloat(this.stripeYearlyAmount) !== yearlyPrice.amount / 100) {
          return true;
        }
      }

      return false;
    }

    setup() {
      this.fetchProducts.perform();
      this.updatePortalPreview();
    }

    leaveRoute(transition) {
      if (this.settings.get('hasDirtyAttributes') || this.hasChangedPrices) {
        transition.abort();
        this.leaveSettingsTransition = transition;
        this.showLeaveRouteModal = true;
      }
    }

    async confirmLeave() {
      this.settings.rollbackAttributes();
      this.resetPrices();
      this.leaveSettingsTransition.retry();
    }

    cancelLeave() {
      this.showLeaveRouteModal = false;
      this.leaveSettingsTransition = null;
    }

    async membersSubscriptionAccessChanged() {
      const oldValue = this.settings.changedAttributes().membersSignupAccess?.[0];

      if (oldValue === 'none') {
        // when saved value is 'none' the server won't inject the portal script
        // to work around that and show the expected portal preview we save and
        // force a refresh
        await this.switchFromNoneTask.perform();
      } else {
        this.updatePortalPreview();
      }
    }

    setStripePlansCurrency(event) {
      const newCurrency = event.value;
      this.currency = newCurrency;
    }

    setPaidSignupRedirect(url) {
      this.paidSignupRedirect = url;
    }

    setFreeSignupRedirect(url) {
      this.freeSignupRedirect = url;
    }

    validatePaidSignupRedirect() {
      return this._validateSignupRedirect(this.paidSignupRedirect, 'membersPaidSignupRedirect');
    }

    validateFreeSignupRedirect() {
      return this._validateSignupRedirect(this.freeSignupRedirect, 'membersFreeSignupRedirect');
    }

    validateStripePlans() {
      let {
        updatePortalPreview = true
      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.stripePlanError = undefined;

      try {
        const yearlyAmount = this.stripeYearlyAmount;
        const monthlyAmount = this.stripeMonthlyAmount;
        const symbol = (0, _currency.getSymbol)(this.currency);

        if (!yearlyAmount || yearlyAmount < 1 || !monthlyAmount || monthlyAmount < 1) {
          throw new TypeError(`Subscription amount must be at least ${symbol}1.00`);
        }

        if (updatePortalPreview) {
          this.updatePortalPreview();
        }
      } catch (err) {
        this.stripePlanError = err.message;
      }
    }

    openStripeConnect() {
      this.stripeEnabledOnOpen = this.membersUtils.isStripeEnabled;
      this.showStripeConnect = true;
    }

    async closeStripeConnect() {
      if (this.stripeEnabledOnOpen !== this.membersUtils.isStripeEnabled) {
        await this.saveSettingsTask.perform({
          forceRefresh: true
        });
      }

      this.showStripeConnect = false;
    }

    async openEditProduct(product) {
      this.productModel = product;
      this.showProductModal = true;
    }

    async openNewProduct() {
      this.productModel = this.store.createRecord('product');
      this.showProductModal = true;
    }

    closeProductModal() {
      this.showProductModal = false;
    }

    openPortalSettings() {
      this.saveSettingsTask.perform();
      this.showPortalSettings = true;
    }

    closePortalSettings() {
      const changedAttributes = this.settings.changedAttributes();

      if (changedAttributes && Object.keys(changedAttributes).length > 0) {
        this.showLeavePortalModal = true;
      } else {
        this.showPortalSettings = false;
        this.updatePortalPreview();
      }
    }

    async confirmClosePortalSettings() {
      this.settings.rollbackAttributes();
      this.showPortalSettings = false;
      this.showLeavePortalModal = false;
      this.updatePortalPreview();
    }

    cancelClosePortalSettings() {
      this.showLeavePortalModal = false;
    }

    updatePortalPreview() {
      let {
        forceRefresh
      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        forceRefresh: false
      };
      // TODO: can these be worked out from settings in membersUtils?
      const monthlyPrice = this.stripeMonthlyAmount * 100;
      const yearlyPrice = this.stripeYearlyAmount * 100;
      let portalPlans = this.settings.get('portalPlans') || [];
      let isMonthlyChecked = portalPlans.includes('monthly');
      let isYearlyChecked = portalPlans.includes('yearly');
      const newUrl = new URL(this.membersUtils.getPortalPreviewUrl({
        button: false,
        monthlyPrice,
        yearlyPrice,
        currency: this.currency,
        isMonthlyChecked,
        isYearlyChecked,
        portalPlans: null
      }));

      if (forceRefresh) {
        this.portalPreviewGuid = Date.now().valueOf();
      }

      newUrl.searchParams.set('v', this.portalPreviewGuid);
      this.portalPreviewUrl = newUrl;
    }

    portalPreviewInserted(iframe) {
      this.portalPreviewIframe = iframe;

      if (!this.portalMessageListener) {
        this.portalMessageListener = event => {
          // don't resize membership portal preview when events fire in customize portal modal
          if (this.showPortalSettings) {
            return;
          }

          const resizeEvents = ['portal-ready', 'portal-preview-updated'];

          if (resizeEvents.includes(event.data.type) && event.data.payload?.height && this.portalPreviewIframe?.parentNode) {
            this.portalPreviewIframe.parentNode.style.height = `${event.data.payload.height}px`;
          }
        };

        window.addEventListener('message', this.portalMessageListener, true);
      }
    }

    portalPreviewDestroyed() {
      this.portalPreviewIframe = null;

      if (this.portalMessageListener) {
        window.removeEventListener('message', this.portalMessageListener);
      }
    }

    confirmProductSave() {
      this.updatePortalPreview({
        forceRefresh: true
      });
      return this.fetchProducts.perform();
    }

    *switchFromNoneTask() {
      return yield this.saveSettingsTask.perform({
        forceRefresh: true
      });
    }

    setupPortalProduct(product) {
      if (product) {
        const monthlyPrice = product.get('monthlyPrice');
        const yearlyPrice = product.get('yearlyPrice');

        if (monthlyPrice && monthlyPrice.amount) {
          this.stripeMonthlyAmount = monthlyPrice.amount / 100;
          this.currency = monthlyPrice.currency;
        }

        if (yearlyPrice && yearlyPrice.amount) {
          this.stripeYearlyAmount = yearlyPrice.amount / 100;
        }

        this.updatePortalPreview();
      }
    }

    *fetchProducts() {
      this.products = yield this.store.query('product', {
        include: 'monthly_price,yearly_price,benefits'
      });
      this.product = this.paidProducts.firstObject;
      this.setupPortalProduct(this.product);
    }

    *saveSettingsTask(options) {
      if (!this.feature.get('multipleProducts')) {
        yield this.validateStripePlans({
          updatePortalPreview: false
        });

        if (this.stripePlanError) {
          return;
        }

        if (this.settings.get('errors').length !== 0) {
          return;
        }

        yield this.saveProduct();
        const result = yield this.settings.save();
        this.updatePortalPreview(options);
        return result;
      } else {
        if (this.settings.get('errors').length !== 0) {
          return;
        } // When no filer is selected in `Specific tier(s)` option


        if (!this.settings.get('defaultContentVisibility')) {
          return;
        }

        const result = yield this.settings.save();
        this.updatePortalPreview(options);
        return result;
      }
    }

    async saveProduct() {
      const isStripeConnected = this.settings.get('stripeConnectAccountId');

      if (this.product && isStripeConnected) {
        const monthlyAmount = this.stripeMonthlyAmount * 100;
        const yearlyAmount = this.stripeYearlyAmount * 100;
        this.product.set('monthlyPrice', {
          nickname: 'Monthly',
          amount: monthlyAmount,
          active: true,
          currency: this.currency,
          interval: 'month',
          type: 'recurring'
        });
        this.product.set('yearlyPrice', {
          nickname: 'Yearly',
          amount: yearlyAmount,
          active: true,
          currency: this.currency,
          interval: 'year',
          type: 'recurring'
        });
        const savedProduct = await this.product.save();
        return savedProduct;
      }
    }

    resetPrices() {
      const monthlyPrice = this.product.get('monthlyPrice');
      const yearlyPrice = this.product.get('yearlyPrice');
      this.stripeMonthlyAmount = monthlyPrice ? monthlyPrice.amount / 100 : 5;
      this.stripeYearlyAmount = yearlyPrice ? yearlyPrice.amount / 100 : 50;
    }

    reset() {
      this.showLeaveRouteModal = false;
      this.showLeavePortalModal = false;
      this.showPortalSettings = false;
    }

    _validateSignupRedirect(url, type) {
      const siteUrl = this.config.get('blogUrl');
      let errMessage = `Please enter a valid URL`;
      this.settings.get('errors').remove(type);
      this.settings.get('hasValidated').removeObject(type);

      if (url === null) {
        this.settings.get('errors').add(type, errMessage);
        this.settings.get('hasValidated').pushObject(type);
        return false;
      }

      if (url === undefined) {
        // Not initialised
        return;
      }

      if (url.href.startsWith(siteUrl)) {
        const path = url.href.replace(siteUrl, '');
        this.settings.set(type, path);
      } else {
        this.settings.set(type, url.href);
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "membersUtils", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "showLeavePortalModal", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "showLeaveRouteModal", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "showPortalSettings", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "showStripeConnect", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "showProductModal", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, "product", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, "products", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, "productModel", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, "paidSignupRedirect", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, "freeSignupRedirect", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, "stripeMonthlyAmount", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 5;
    }
  }), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, "stripeYearlyAmount", [_dec18], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 50;
    }
  }), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, "currency", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'usd';
    }
  }), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, "stripePlanError", [_dec20], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, "portalPreviewUrl", [_dec21], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _applyDecoratedDescriptor(_class.prototype, "setup", [_dec22], Object.getOwnPropertyDescriptor(_class.prototype, "setup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "confirmLeave", [_dec23], Object.getOwnPropertyDescriptor(_class.prototype, "confirmLeave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "cancelLeave", [_dec24], Object.getOwnPropertyDescriptor(_class.prototype, "cancelLeave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "membersSubscriptionAccessChanged", [_dec25], Object.getOwnPropertyDescriptor(_class.prototype, "membersSubscriptionAccessChanged"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setStripePlansCurrency", [_dec26], Object.getOwnPropertyDescriptor(_class.prototype, "setStripePlansCurrency"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setPaidSignupRedirect", [_dec27], Object.getOwnPropertyDescriptor(_class.prototype, "setPaidSignupRedirect"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setFreeSignupRedirect", [_dec28], Object.getOwnPropertyDescriptor(_class.prototype, "setFreeSignupRedirect"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "validatePaidSignupRedirect", [_dec29], Object.getOwnPropertyDescriptor(_class.prototype, "validatePaidSignupRedirect"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "validateFreeSignupRedirect", [_dec30], Object.getOwnPropertyDescriptor(_class.prototype, "validateFreeSignupRedirect"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "validateStripePlans", [_dec31], Object.getOwnPropertyDescriptor(_class.prototype, "validateStripePlans"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openStripeConnect", [_dec32], Object.getOwnPropertyDescriptor(_class.prototype, "openStripeConnect"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "closeStripeConnect", [_dec33], Object.getOwnPropertyDescriptor(_class.prototype, "closeStripeConnect"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openEditProduct", [_dec34], Object.getOwnPropertyDescriptor(_class.prototype, "openEditProduct"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openNewProduct", [_dec35], Object.getOwnPropertyDescriptor(_class.prototype, "openNewProduct"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "closeProductModal", [_dec36], Object.getOwnPropertyDescriptor(_class.prototype, "closeProductModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openPortalSettings", [_dec37], Object.getOwnPropertyDescriptor(_class.prototype, "openPortalSettings"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "closePortalSettings", [_dec38], Object.getOwnPropertyDescriptor(_class.prototype, "closePortalSettings"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "confirmClosePortalSettings", [_dec39], Object.getOwnPropertyDescriptor(_class.prototype, "confirmClosePortalSettings"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "cancelClosePortalSettings", [_dec40], Object.getOwnPropertyDescriptor(_class.prototype, "cancelClosePortalSettings"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updatePortalPreview", [_dec41], Object.getOwnPropertyDescriptor(_class.prototype, "updatePortalPreview"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "portalPreviewInserted", [_dec42], Object.getOwnPropertyDescriptor(_class.prototype, "portalPreviewInserted"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "portalPreviewDestroyed", [_dec43], Object.getOwnPropertyDescriptor(_class.prototype, "portalPreviewDestroyed"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "confirmProductSave", [_dec44], Object.getOwnPropertyDescriptor(_class.prototype, "confirmProductSave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "switchFromNoneTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "switchFromNoneTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "fetchProducts", [_dec45], Object.getOwnPropertyDescriptor(_class.prototype, "fetchProducts"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveSettingsTask", [_dec46], Object.getOwnPropertyDescriptor(_class.prototype, "saveSettingsTask"), _class.prototype)), _class));
  _exports.default = MembersAccessController;
});
;define("ghost-admin/controllers/settings/navigation", ["exports", "jquery", "ghost-admin/models/navigation-item", "ember-concurrency"], function (_exports, _jquery, _navigationItem, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  var _default = Ember.Controller.extend({
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    dirtyAttributes: false,
    newNavItem: null,
    newSecondaryNavItem: null,

    init() {
      this._super(...arguments);

      this.set('newNavItem', _navigationItem.default.create({
        isNew: true
      }));
      this.set('newSecondaryNavItem', _navigationItem.default.create({
        isNew: true,
        isSecondary: true
      }));
    },

    blogUrl: Ember.computed('config.blogUrl', function () {
      let url = this.get('config.blogUrl');
      return url.slice(-1) !== '/' ? `${url}/` : url;
    }),
    actions: {
      save() {
        this.save.perform();
      },

      addNavItem(item) {
        // If the url sent through is blank (user never edited the url)
        if (item.get('url') === '') {
          item.set('url', '/');
        }

        return item.validate().then(() => {
          this.addNewNavItem(item);
        });
      },

      deleteNavItem(item) {
        if (!item) {
          return;
        }

        let navItems = item.isSecondary ? this.get('settings.secondaryNavigation') : this.get('settings.navigation');
        navItems.removeObject(item);
        this.set('dirtyAttributes', true);
      },

      updateLabel(label, navItem) {
        if (!navItem) {
          return;
        }

        if (navItem.get('label') !== label) {
          navItem.set('label', label);
          this.set('dirtyAttributes', true);
        }
      },

      updateUrl(url, navItem) {
        if (!navItem) {
          return;
        }

        if (navItem.get('url') !== url) {
          navItem.set('url', url);
          this.set('dirtyAttributes', true);
        }

        return url;
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.save.isRunning) {
            return this.save.last.then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let settings = this.settings;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on settings props


        settings.rollbackAttributes();
        this.set('dirtyAttributes', false);
        return transition.retry();
      },

      reset() {
        this.set('newNavItem', _navigationItem.default.create({
          isNew: true
        }));
        this.set('newSecondaryNavItem', _navigationItem.default.create({
          isNew: true,
          isSecondary: true
        }));
      }

    },
    save: (0, _emberConcurrency.task)(function* () {
      let navItems = this.get('settings.navigation');
      let secondaryNavItems = this.get('settings.secondaryNavigation');
      let notifications = this.notifications;
      let validationPromises = [];

      if (!this.newNavItem.get('isBlank')) {
        validationPromises.pushObject(this.send('addNavItem', this.newNavItem));
      }

      if (!this.newSecondaryNavItem.get('isBlank')) {
        validationPromises.pushObject(this.send('addNavItem', this.newSecondaryNavItem));
      }

      navItems.map(item => {
        validationPromises.pushObject(item.validate());
      });
      secondaryNavItems.map(item => {
        validationPromises.pushObject(item.validate());
      });

      try {
        yield Ember.RSVP.all(validationPromises);
        this.set('dirtyAttributes', false);
        return yield this.settings.save();
      } catch (error) {
        if (error) {
          notifications.showAPIError(error);
          throw error;
        }
      }
    }),

    addNewNavItem(item) {
      let navItems = item.isSecondary ? this.get('settings.secondaryNavigation') : this.get('settings.navigation');
      item.set('isNew', false);
      navItems.pushObject(item);
      this.set('dirtyAttributes', true);

      if (item.isSecondary) {
        this.set('newSecondaryNavItem', _navigationItem.default.create({
          isNew: true,
          isSecondary: true
        }));
        (0, _jquery.default)('.gh-blognav-container:last .gh-blognav-line:last input:first').focus();
      } else {
        this.set('newNavItem', _navigationItem.default.create({
          isNew: true
        }));
        (0, _jquery.default)('.gh-blognav-container:first .gh-blognav-line:last input:first').focus();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/product", ["exports", "ember-concurrency-decorators"], function (_exports, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ProductController = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._action, _dec10 = Ember._action, _dec11 = Ember._action, _dec12 = Ember._action, _dec13 = Ember._action, _dec14 = Ember._action, _dec15 = Ember._action, _dec16 = Ember._action, _dec17 = Ember._action, _dec18 = Ember._action, _dec19 = Ember._action, _dec20 = Ember._action, _dec21 = Ember._action, _dec22 = Ember._action, _dec23 = (0, _emberConcurrencyDecorators.task)({
    restartable: true
  }), (_class = class ProductController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "membersUtils", _descriptor2, this);

      _initializerDefineProperty(this, "settings", _descriptor3, this);

      _initializerDefineProperty(this, "showLeaveSettingsModal", _descriptor4, this);

      _initializerDefineProperty(this, "showPriceModal", _descriptor5, this);

      _initializerDefineProperty(this, "priceModel", _descriptor6, this);

      _initializerDefineProperty(this, "showUnsavedChangesModal", _descriptor7, this);

      _initializerDefineProperty(this, "paidSignupRedirect", _descriptor8, this);

      this.siteUrl = this.config.get('blogUrl');
    }

    get product() {
      return this.model;
    }

    get stripePrices() {
      const stripePrices = this.model.stripePrices || [];
      return stripePrices.map(d => {
        return { ...d,
          amount: d.amount / 100
        };
      }).sort((a, b) => {
        return a.amount - b.amount;
      }).sort((a, b) => {
        return a.currency.localeCompare(b.currency, undefined, {
          ignorePunctuation: true
        });
      }).sort((a, b) => {
        return a.active === b.active ? 0 : a.active ? -1 : 1;
      });
    }

    get noOfPrices() {
      return (this.product.stripePrices || []).length;
    }

    toggleUnsavedChangesModal(transition) {
      let leaveTransition = this.leaveScreenTransition;

      if (!transition && this.showUnsavedChangesModal) {
        this.leaveScreenTransition = null;
        this.showUnsavedChangesModal = false;
        return;
      }

      if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
        this.leaveScreenTransition = transition; // if a save is running, wait for it to finish then transition

        if (this.saveTask.isRunning) {
          return this.saveTask.last.then(() => {
            transition.retry();
          });
        } // we genuinely have unsaved data, show the modal


        this.showUnsavedChangesModal = true;
      }
    }

    leaveScreen() {
      this.product.rollbackAttributes();
      return this.leaveScreenTransition.retry();
    }

    async openEditPrice(price) {
      this.priceModel = price;
      this.showPriceModal = true;
    }

    async openNewPrice() {
      this.priceModel = null;
      this.showPriceModal = true;
    }

    async archivePrice(price) {
      price.active = false;
      price.amount = price.amount * 100;
      this.send('savePrice', price);
    }

    async activatePrice(price) {
      price.active = true;
      price.amount = price.amount * 100;
      this.send('savePrice', price);
    }

    openStripeConnect() {
      alert('Update to use stripe-connect modal (see memberships screen)');
    }

    async confirmLeave() {
      this.settings.rollbackAttributes();
      this.showLeaveSettingsModal = false;
      this.leaveSettingsTransition.retry();
    }

    cancelLeave() {
      this.showLeaveSettingsModal = false;
      this.leaveSettingsTransition = null;
    }

    save() {
      return this.saveTask.perform();
    }

    savePrice(price) {
      const stripePrices = this.product.stripePrices.map(d => {
        if (d.id === price.id) {
          return Ember.Object.create({ ...price,
            active: !!price.active
          });
        }

        return { ...d,
          active: !!d.active
        };
      });

      if (!price.id) {
        stripePrices.push(Ember.Object.create({ ...price,
          active: !!price.active
        }));
      }

      this.product.set('stripePrices', stripePrices);
      this.saveTask.perform();
    }

    closePriceModal() {
      this.showPriceModal = false;
    }

    setPaidSignupRedirect(url) {
      this.paidSignupRedirect = url;
    }

    validatePaidSignupRedirect() {
      return this._validateSignupRedirect(this.paidSignupRedirect, 'membersPaidSignupRedirect');
    }

    *saveTask() {
      this.send('validatePaidSignupRedirect');
      this.product.validate();

      if (this.product.get('errors').length !== 0) {
        return;
      }

      if (this.settings.get('errors').length !== 0) {
        return;
      }

      yield this.settings.save();
      const response = yield this.product.save();

      if (this.showPriceModal) {
        this.closePriceModal();
      }

      return response;
    }

    _validateSignupRedirect(url, type) {
      let errMessage = `Please enter a valid URL`;
      this.settings.get('errors').remove(type);
      this.settings.get('hasValidated').removeObject(type);

      if (url === null) {
        this.settings.get('errors').add(type, errMessage);
        this.settings.get('hasValidated').pushObject(type);
        return false;
      }

      if (url === undefined) {
        // Not initialised
        return;
      }

      if (url.href.startsWith(this.siteUrl)) {
        const path = url.href.replace(this.siteUrl, '');
        this.settings.set(type, path);
      } else {
        this.settings.set(type, url.href);
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "membersUtils", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "showLeaveSettingsModal", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "showPriceModal", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "priceModel", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "showUnsavedChangesModal", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "paidSignupRedirect", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "toggleUnsavedChangesModal", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "toggleUnsavedChangesModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "leaveScreen", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "leaveScreen"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openEditPrice", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "openEditPrice"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openNewPrice", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "openNewPrice"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "archivePrice", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, "archivePrice"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "activatePrice", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "activatePrice"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openStripeConnect", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, "openStripeConnect"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "confirmLeave", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, "confirmLeave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "cancelLeave", [_dec17], Object.getOwnPropertyDescriptor(_class.prototype, "cancelLeave"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "save", [_dec18], Object.getOwnPropertyDescriptor(_class.prototype, "save"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "savePrice", [_dec19], Object.getOwnPropertyDescriptor(_class.prototype, "savePrice"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "closePriceModal", [_dec20], Object.getOwnPropertyDescriptor(_class.prototype, "closePriceModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setPaidSignupRedirect", [_dec21], Object.getOwnPropertyDescriptor(_class.prototype, "setPaidSignupRedirect"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "validatePaidSignupRedirect", [_dec22], Object.getOwnPropertyDescriptor(_class.prototype, "validatePaidSignupRedirect"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveTask", [_dec23], Object.getOwnPropertyDescriptor(_class.prototype, "saveTask"), _class.prototype)), _class));
  _exports.default = ProductController;
});
;define("ghost-admin/controllers/settings/products", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ProductsController = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._tracked, _dec4 = Ember._tracked, _dec5 = Ember._action, (_class = class ProductsController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "settings", _descriptor, this);

      _initializerDefineProperty(this, "config", _descriptor2, this);

      _initializerDefineProperty(this, "iconStyle", _descriptor3, this);

      _initializerDefineProperty(this, "showFreeMembershipModal", _descriptor4, this);

      this.iconStyle = this.setIconStyle();
    }

    get products() {
      return this.model.sortBy('name');
    }

    setIconStyle() {
      let icon = this.config.get('icon');

      if (icon) {
        return Ember.String.htmlSafe(`background-image: url(${icon})`);
      }

      icon = 'https://static.ghost.org/v4.0.0/images/ghost-orb-2.png';
      return Ember.String.htmlSafe(`background-image: url(${icon})`);
    }

    closeFreeMembershipModal() {
      this.showFreeMembershipModal = false;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "iconStyle", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "showFreeMembershipModal", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "closeFreeMembershipModal", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "closeFreeMembershipModal"), _class.prototype)), _class));
  _exports.default = ProductsController;
});
;define("ghost-admin/controllers/settings/staff/index", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    session: Ember.inject.service(),
    store: Ember.inject.service(),
    showInviteUserModal: false,
    showResetAllPasswordsModal: false,
    inviteOrder: null,
    userOrder: null,

    init() {
      this._super(...arguments);

      this.inviteOrder = ['email'];
      this.userOrder = ['name', 'email'];
    },

    currentUser: Ember.computed.alias('model'),
    sortedInvites: Ember.computed.sort('filteredInvites', 'inviteOrder'),
    sortedActiveUsers: Ember.computed.sort('activeUsers', 'userOrder'),
    sortedSuspendedUsers: Ember.computed.sort('suspendedUsers', 'userOrder'),
    filteredInvites: Ember.computed.filterBy('invites', 'isNew', false),
    invites: Ember.computed(function () {
      return this.store.peekAll('invite');
    }),
    allUsers: Ember.computed(function () {
      return this.store.peekAll('user');
    }),
    activeUsers: Ember.computed('allUsers.@each.status', function () {
      return this.allUsers.filter(user => {
        return user.status !== 'inactive';
      });
    }),
    suspendedUsers: Ember.computed('allUsers.@each.status', function () {
      return this.allUsers.filter(user => {
        return user.status === 'inactive';
      });
    }),
    actions: {
      toggleInviteUserModal() {
        this.toggleProperty('showInviteUserModal');
      },

      toggleResetAllPasswordsModal() {
        this.toggleProperty('showResetAllPasswordsModal');
      }

    },
    backgroundUpdate: (0, _emberConcurrency.task)(function* () {
      let users = this.fetchUsers.perform();
      let invites = this.fetchInvites.perform();

      try {
        yield Ember.RSVP.all([users, invites]);
      } catch (error) {
        this.send('error', error);
      }
    }),
    fetchUsers: (0, _emberConcurrency.task)(function* () {
      yield this.store.query('user', {
        limit: 'all'
      });
    }),
    fetchInvites: (0, _emberConcurrency.task)(function* () {
      if (this.currentUser.isAuthorOrContributor) {
        return;
      } // ensure roles are loaded before invites. Invites do not have embedded
      // role records which means Ember Data will throw errors when trying to
      // read the invite.role data when the role has not yet been loaded


      yield this.store.query('role', {
        limit: 'all'
      });
      return yield this.store.query('invite', {
        limit: 'all'
      });
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/staff/user-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let StaffUserLoadingController = (_dec = Ember.inject.service, (_class = class StaffUserLoadingController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "session", _descriptor, this);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = StaffUserLoadingController;
});
;define("ghost-admin/controllers/settings/staff/user", ["exports", "ghost-admin/utils/bound-one-way", "ghost-admin/utils/copy-text-to-clipboard", "ghost-admin/utils/isNumber", "validator", "ghost-admin/utils/window-proxy", "ember-concurrency"], function (_exports, _boundOneWay, _copyTextToClipboard, _isNumber, _validator, _windowProxy, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    dropdown: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    limit: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    slugGenerator: Ember.inject.service(),
    utils: Ember.inject.service(),
    personalToken: null,
    limitErrorMessage: null,
    personalTokenRegenerated: false,
    leaveSettingsTransition: null,
    dirtyAttributes: false,
    showDeleteUserModal: false,
    showSuspendUserModal: false,
    showTransferOwnerModal: false,
    showUploadCoverModal: false,
    showUploadImageModal: false,
    showRegenerateTokenModal: false,
    showRoleSelectionModal: false,
    _scratchFacebook: null,
    _scratchTwitter: null,
    saveHandlers: (0, _emberConcurrency.taskGroup)().enqueue(),
    user: Ember.computed.alias('model'),
    currentUser: Ember.computed.alias('session.user'),
    email: Ember.computed.readOnly('user.email'),
    slugValue: (0, _boundOneWay.default)('user.slug'),
    canChangeEmail: Ember.computed.not('isAdminUserOnOwnerProfile'),
    canChangePassword: Ember.computed.not('isAdminUserOnOwnerProfile'),
    canMakeOwner: Ember.computed.and('currentUser.isOwnerOnly', 'isNotOwnProfile', 'user.isAdminOnly', 'isNotSuspended'),
    isAdminUserOnOwnerProfile: Ember.computed.and('currentUser.isAdminOnly', 'user.isOwnerOnly'),
    isNotOwnersProfile: Ember.computed.not('user.isOwnerOnly'),
    isNotSuspended: Ember.computed.not('user.isSuspended'),
    rolesDropdownIsVisible: Ember.computed.and('currentUser.isAdmin', 'isNotOwnProfile', 'isNotOwnersProfile'),
    userActionsAreVisible: Ember.computed.or('deleteUserActionIsVisible', 'canMakeOwner'),
    isNotOwnProfile: Ember.computed.not('isOwnProfile'),
    isOwnProfile: Ember.computed('user.id', 'currentUser.id', function () {
      return this.get('user.id') === this.get('currentUser.id');
    }),
    deleteUserActionIsVisible: Ember.computed('currentUser.{isAdmin,isEditor}', 'user.{isOwnerOnly,isAuthorOrContributor}', 'isOwnProfile', function () {
      // users can't delete themselves
      if (this.isOwnProfile) {
        return false;
      }

      if ( // owners/admins can delete any non-owner user
      this.currentUser.get('isAdmin') && !this.user.isOwnerOnly || // editors can delete any author or contributor
      this.currentUser.get('isEditor') && this.user.isAuthorOrContributor) {
        return true;
      }

      return false;
    }),
    coverTitle: Ember.computed('user.name', function () {
      return `${this.get('user.name')}'s Cover Image`;
    }),
    roles: Ember.computed(function () {
      return this.store.query('role', {
        permissions: 'assign'
      });
    }),
    actions: {
      toggleRoleSelectionModal(event) {
        event?.preventDefault?.();
        this.toggleProperty('showRoleSelectionModal');
      },

      changeRole(newRole) {
        this.user.set('role', newRole);
        this.set('dirtyAttributes', true);
      },

      toggleDeleteUserModal() {
        if (this.deleteUserActionIsVisible) {
          this.toggleProperty('showDeleteUserModal');
        }
      },

      suspendUser() {
        this.user.set('status', 'inactive');
        return this.save.perform();
      },

      toggleSuspendUserModal() {
        if (this.deleteUserActionIsVisible) {
          this.toggleProperty('showSuspendUserModal');
        }
      },

      unsuspendUser() {
        this.user.set('status', 'active');
        return this.save.perform();
      },

      toggleUnsuspendUserModal() {
        if (this.deleteUserActionIsVisible) {
          if (this.user.role.name !== 'Contributor' && this.limit.limiter && this.limit.limiter.isLimited('staff')) {
            this.limit.limiter.errorIfWouldGoOverLimit('staff').then(() => {
              this.toggleProperty('showUnsuspendUserModal');
            }).catch(error => {
              if (error.errorType === 'HostLimitError') {
                this.limitErrorMessage = error.message;
                this.toggleProperty('showUnsuspendUserModal');
              } else {
                this.notifications.showAPIError(error, {
                  key: 'staff.limit'
                });
              }
            });
          } else {
            this.toggleProperty('showUnsuspendUserModal');
          }
        }
      },

      validateFacebookUrl() {
        let newUrl = this._scratchFacebook;
        let oldUrl = this.get('user.facebook');
        let errMessage = ''; // reset errors and validation

        this.get('user.errors').remove('facebook');
        this.get('user.hasValidated').removeObject('facebook');

        if (newUrl === '') {
          // Clear out the Facebook url
          this.set('user.facebook', '');
          return;
        } // _scratchFacebook will be null unless the user has input something


        if (!newUrl) {
          newUrl = oldUrl;
        }

        try {
          // strip any facebook URLs out
          newUrl = newUrl.replace(/(https?:\/\/)?(www\.)?facebook\.com/i, ''); // don't allow any non-facebook urls

          if (newUrl.match(/^(http|\/\/)/i)) {
            throw 'invalid url';
          } // strip leading / if we have one then concat to full facebook URL


          newUrl = newUrl.replace(/^\//, '');
          newUrl = `https://www.facebook.com/${newUrl}`; // don't allow URL if it's not valid

          if (!_validator.default.isURL(newUrl)) {
            throw 'invalid url';
          }

          this.set('user.facebook', '');
          Ember.run.schedule('afterRender', this, function () {
            this.set('user.facebook', newUrl);
          });
        } catch (e) {
          if (e === 'invalid url') {
            errMessage = 'The URL must be in a format like ' + 'https://www.facebook.com/yourPage';
            this.get('user.errors').add('facebook', errMessage);
            return;
          }

          throw e;
        } finally {
          this.get('user.hasValidated').pushObject('facebook');
        }
      },

      validateTwitterUrl() {
        let newUrl = this._scratchTwitter;
        let oldUrl = this.get('user.twitter');
        let errMessage = ''; // reset errors and validation

        this.get('user.errors').remove('twitter');
        this.get('user.hasValidated').removeObject('twitter');

        if (newUrl === '') {
          // Clear out the Twitter url
          this.set('user.twitter', '');
          return;
        } // _scratchTwitter will be null unless the user has input something


        if (!newUrl) {
          newUrl = oldUrl;
        }

        if (newUrl.match(/(?:twitter\.com\/)(\S+)/) || newUrl.match(/([a-z\d.]+)/i)) {
          let username = [];

          if (newUrl.match(/(?:twitter\.com\/)(\S+)/)) {
            [, username] = newUrl.match(/(?:twitter\.com\/)(\S+)/);
          } else {
            [username] = newUrl.match(/([^/]+)\/?$/mi);
          } // check if username starts with http or www and show error if so


          if (username.match(/^(http|www)|(\/)/) || !username.match(/^[a-z\d._]{1,15}$/mi)) {
            errMessage = !username.match(/^[a-z\d._]{1,15}$/mi) ? 'Your Username is not a valid Twitter Username' : 'The URL must be in a format like https://twitter.com/yourUsername';
            this.get('user.errors').add('twitter', errMessage);
            this.get('user.hasValidated').pushObject('twitter');
            return;
          }

          newUrl = `https://twitter.com/${username}`;
          this.get('user.hasValidated').pushObject('twitter');
          this.set('user.twitter', '');
          Ember.run.schedule('afterRender', this, function () {
            this.set('user.twitter', newUrl);
          });
        } else {
          errMessage = 'The URL must be in a format like ' + 'https://twitter.com/yourUsername';
          this.get('user.errors').add('twitter', errMessage);
          this.get('user.hasValidated').pushObject('twitter');
          return;
        }
      },

      transferOwnership() {
        let user = this.user;
        let url = this.get('ghostPaths.url').api('users', 'owner');
        this.dropdown.closeDropdowns();
        return this.ajax.put(url, {
          data: {
            owner: [{
              id: user.get('id')
            }]
          }
        }).then(response => {
          // manually update the roles for the users that just changed roles
          // because store.pushPayload is not working with embedded relations
          if (response && Ember.isArray(response.users)) {
            response.users.forEach(userJSON => {
              let updatedUser = this.store.peekRecord('user', userJSON.id);
              let role = this.store.peekRecord('role', userJSON.roles[0].id);
              updatedUser.set('role', role);
            });
          }

          this.notifications.showAlert(`Ownership successfully transferred to ${user.get('name')}`, {
            type: 'success',
            key: 'owner.transfer.success'
          });
        }).catch(error => {
          this.notifications.showAPIError(error, {
            key: 'owner.transfer'
          });
        });
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.get('saveHandlers.isRunning')) {
            return this.get('saveHandlers.last').then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let user = this.user;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on user props


        user.rollbackAttributes(); // roll back the slugValue property

        if (this.dirtyAttributes) {
          this.set('slugValue', user.get('slug'));
          this.set('dirtyAttributes', false);
        }

        return transition.retry();
      },

      toggleTransferOwnerModal() {
        if (this.canMakeOwner) {
          this.toggleProperty('showTransferOwnerModal');
        }
      },

      toggleUploadCoverModal() {
        this.toggleProperty('showUploadCoverModal');
      },

      toggleUploadImageModal() {
        this.toggleProperty('showUploadImageModal');
      },

      // TODO: remove those mutation actions once we have better
      // inline validations that auto-clear errors on input
      updatePassword(password) {
        this.set('user.password', password);
        this.get('user.hasValidated').removeObject('password');
        this.get('user.errors').remove('password');
      },

      updateNewPassword(password) {
        this.set('user.newPassword', password);
        this.get('user.hasValidated').removeObject('newPassword');
        this.get('user.errors').remove('newPassword');
      },

      updateNe2Password(password) {
        this.set('user.ne2Password', password);
        this.get('user.hasValidated').removeObject('ne2Password');
        this.get('user.errors').remove('ne2Password');
      },

      confirmRegenerateTokenModal() {
        this.set('showRegenerateTokenModal', true);
      },

      cancelRegenerateTokenModal() {
        this.set('showRegenerateTokenModal', false);
      },

      regenerateToken() {
        let url = this.get('ghostPaths.url').api('users', 'me', 'token');
        return this.ajax.put(url, {
          data: {}
        }).then(_ref => {
          let {
            apiKey
          } = _ref;
          this.set('personalToken', apiKey.id + ':' + apiKey.secret);
          this.set('personalTokenRegenerated', true);
        }).catch(error => {
          this.notifications.showAPIError(error, {
            key: 'token.regenerate'
          });
        });
      }

    },

    _exportDb(filename) {
      this.utils.downloadFile(`${this.ghostPaths.url.api('db')}?filename=${filename}`);
    },

    deleteUser: (0, _emberConcurrency.task)(function* () {
      try {
        const result = yield this.user.destroyRecord();

        if (result._meta && result._meta.filename) {
          this._exportDb(result._meta.filename); // give the iframe some time to trigger the download before
          // it's removed from the dom when transitioning


          yield (0, _emberConcurrency.timeout)(300);
        }

        this.notifications.closeAlerts('user.delete');
        this.store.unloadAll('post');
        this.transitionToRoute('settings.staff');
      } catch (error) {
        this.notifications.showAlert('The user could not be deleted. Please try again.', {
          type: 'error',
          key: 'user.delete.failed'
        });
        throw error;
      }
    }),
    updateSlug: (0, _emberConcurrency.task)(function* (newSlug) {
      let slug = this.get('user.slug');
      newSlug = newSlug || slug;
      newSlug = newSlug.trim(); // Ignore unchanged slugs or candidate slugs that are empty

      if (!newSlug || slug === newSlug) {
        this.set('slugValue', slug);
        return true;
      }

      let serverSlug = yield this.slugGenerator.generateSlug('user', newSlug); // If after getting the sanitized and unique slug back from the API
      // we end up with a slug that matches the existing slug, abort the change

      if (serverSlug === slug) {
        return true;
      } // Because the server transforms the candidate slug by stripping
      // certain characters and appending a number onto the end of slugs
      // to enforce uniqueness, there are cases where we can get back a
      // candidate slug that is a duplicate of the original except for
      // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)
      // get the last token out of the slug candidate and see if it's a number


      let slugTokens = serverSlug.split('-');
      let check = Number(slugTokens.pop()); // if the candidate slug is the same as the existing slug except
      // for the incrementor then the existing slug should be used

      if ((0, _isNumber.default)(check) && check > 0) {
        if (slug === slugTokens.join('-') && serverSlug !== newSlug) {
          this.set('slugValue', slug);
          return true;
        }
      }

      this.set('slugValue', serverSlug);
      this.set('dirtyAttributes', true);
      return true;
    }).group('saveHandlers'),
    save: (0, _emberConcurrency.task)(function* () {
      let user = this.user;
      let slugValue = this.slugValue;
      let slugChanged;

      if (user.get('slug') !== slugValue) {
        slugChanged = true;
        user.set('slug', slugValue);
      }

      try {
        user = yield user.save({
          format: false
        }); // If the user's slug has changed, change the URL and replace
        // the history so refresh and back button still work

        if (slugChanged) {
          let currentPath = window.location.hash;
          let newPath = currentPath.split('/');
          newPath[newPath.length - 1] = user.get('slug');
          newPath = newPath.join('/');

          _windowProxy.default.replaceState({
            path: newPath
          }, '', newPath);
        }

        this.set('dirtyAttributes', false);
        this.notifications.closeAlerts('user.update');
        return user;
      } catch (error) {
        // validation engine returns undefined so we have to check
        // before treating the failure as an API error
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'user.update'
          });
        }
      }
    }).group('saveHandlers'),
    copyContentKey: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.personalToken);
      yield (0, _emberConcurrency.timeout)(this.isTesting ? 50 : 3000);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/setup", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    ghostPaths: Ember.inject.service(),
    router: Ember.inject.service(),
    showBackLink: Ember.computed.match('router.currentRouteName', /^setup\.(two|three)$/),
    backRoute: Ember.computed('router.currentRouteName', function () {
      let currentRoute = this.router.currentRouteName;
      return currentRoute === 'setup.two' ? 'setup.one' : 'setup.two';
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/setup/three", ["exports", "ember-data", "validator", "ember-ajax/errors", "ember-concurrency"], function (_exports, _emberData, _validator, _errors, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // TODO: remove usage of Ember Data's private `Errors` class when refactoring validations
  // eslint-disable-next-line
  const {
    Errors
  } = _emberData.default;

  var _default = Ember.Controller.extend({
    two: Ember.inject.controller('setup/two'),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    users: '',
    errors: Errors.create(),
    hasValidated: Ember.A(),
    ownerEmail: Ember.computed.alias('two.email'),
    usersArray: Ember.computed('users', function () {
      let errors = this.errors;
      let users = this.users.split('\n').filter(function (email) {
        return email.trim().length > 0;
      }); // remove "no users to invite" error if we have users

      if (users.uniq().length > 0 && errors.get('users.length') === 1) {
        if (errors.get('users.firstObject').message.match(/no users/i)) {
          errors.remove('users');
        }
      }

      return users.uniq();
    }),
    validUsersArray: Ember.computed('usersArray', 'ownerEmail', function () {
      let ownerEmail = this.ownerEmail;
      return this.usersArray.filter(function (user) {
        return _validator.default.isEmail(user || '') && user !== ownerEmail;
      });
    }),
    invalidUsersArray: Ember.computed('usersArray', 'ownerEmail', function () {
      let ownerEmail = this.ownerEmail;
      return this.usersArray.reject(user => _validator.default.isEmail(user || '') || user === ownerEmail);
    }),
    validationResult: Ember.computed('invalidUsersArray', function () {
      let errors = [];
      this.invalidUsersArray.forEach(user => {
        errors.push({
          user,
          error: 'email'
        });
      });

      if (errors.length === 0) {
        // ensure we aren't highlighting fields when everything is fine
        this.errors.clear();
        return true;
      } else {
        return errors;
      }
    }),
    buttonText: Ember.computed('errors.users', 'validUsersArray', 'invalidUsersArray', function () {
      let usersError = this.get('errors.users.firstObject.message');
      let validNum = this.validUsersArray.length;
      let invalidNum = this.invalidUsersArray.length;
      let userCount;

      if (usersError && usersError.match(/no users/i)) {
        return usersError;
      }

      if (invalidNum > 0) {
        userCount = invalidNum === 1 ? 'email address' : 'email addresses';
        return `${invalidNum} invalid ${userCount}`;
      }

      if (validNum > 0) {
        userCount = validNum === 1 ? 'user' : 'users';
        userCount = `${validNum} ${userCount}`;
      } else {
        userCount = 'some users';
      }

      return `Invite ${userCount}`;
    }),
    buttonClass: Ember.computed('validationResult', 'usersArray.length', function () {
      if (this.validationResult === true && this.get('usersArray.length') > 0) {
        return 'gh-btn-green';
      } else {
        return 'gh-btn-minor';
      }
    }),
    authorRole: Ember.computed(function () {
      return this.store.findAll('role', {
        reload: true
      }).then(roles => roles.findBy('name', 'Author'));
    }),
    actions: {
      validate() {
        this.validate();
      },

      invite() {
        this.invite.perform();
      },

      skipInvite() {
        this.session.loadServerNotifications();
        this.transitionToRoute('home');
      }

    },

    validate() {
      let errors = this.errors;
      let validationResult = this.validationResult;
      let property = 'users';
      errors.clear(); // If property isn't in the `hasValidated` array, add it to mark that this field can show a validation result

      this.hasValidated.addObject(property);

      if (validationResult === true) {
        return true;
      }

      validationResult.forEach(error => {
        // Only one error type here so far, but one day the errors might be more detailed
        switch (error.error) {
          case 'email':
            errors.add(property, `${error.user} is not a valid email.`);
        }
      });
      return false;
    },

    _transitionAfterSubmission() {
      if (!this._hasTransitioned) {
        this._hasTransitioned = true;
        this.transitionToRoute('home');
      }
    },

    invite: (0, _emberConcurrency.task)(function* () {
      let users = this.validUsersArray;

      if (this.validate() && users.length > 0) {
        this._hasTransitioned = false;

        this._slowSubmissionTimeout.perform();

        let authorRole = yield this.authorRole;
        let invites = yield this._saveInvites(authorRole);

        this._slowSubmissionTimeout.cancelAll();

        this._showNotifications(invites);

        Ember.run.schedule('actions', this, function () {
          this.session.loadServerNotifications();

          this._transitionAfterSubmission();
        });
      } else if (users.length === 0) {
        this.errors.add('users', 'No users to invite');
      }
    }).drop(),
    _slowSubmissionTimeout: (0, _emberConcurrency.task)(function* () {
      yield (0, _emberConcurrency.timeout)(4000);

      this._transitionAfterSubmission();
    }).drop(),

    _saveInvites(authorRole) {
      let users = this.validUsersArray;
      return Ember.RSVP.Promise.all(users.map(user => {
        let invite = this.store.createRecord('invite', {
          email: user,
          role: authorRole
        });
        return invite.save().then(() => ({
          email: user,
          success: invite.get('status') === 'sent'
        })).catch(error => ({
          error,
          email: user,
          success: false
        }));
      }));
    },

    _showNotifications(invites) {
      let notifications = this.notifications;
      let erroredEmails = [];
      let successCount = 0;
      let invitationsString, message;
      invites.forEach(invite => {
        if (invite.success) {
          successCount += 1;
        } else if ((0, _errors.isInvalidError)(invite.error)) {
          message = `${invite.email} was invalid: ${invite.error.payload.errors[0].message}`;
          notifications.showAlert(message, {
            type: 'error',
            delayed: true,
            key: `signup.send-invitations.${invite.email}`
          });
        } else {
          erroredEmails.push(invite.email);
        }
      });

      if (erroredEmails.length > 0) {
        invitationsString = erroredEmails.length > 1 ? ' invitations: ' : ' invitation: ';
        message = `Failed to send ${erroredEmails.length} ${invitationsString}`;
        message += Ember.Handlebars.Utils.escapeExpression(erroredEmails.join(', '));
        message += '. Please check your email configuration, see <a href=\'https://ghost.org/docs/config/#mail\' target=\'_blank\'>https://ghost.org/docs/config/#mail</a> for instructions';
        message = Ember.String.htmlSafe(message);
        notifications.showAlert(message, {
          type: 'error',
          delayed: successCount > 0,
          key: 'signup.send-invitations.failed'
        });
      }

      if (successCount > 0) {
        // pluralize
        invitationsString = successCount > 1 ? 'invitations' : 'invitation';
        notifications.showAlert(`${successCount} ${invitationsString} sent!`, {
          type: 'success',
          delayed: true,
          key: 'signup.send-invitations.success'
        });
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/setup/two", ["exports", "ghost-admin/mixins/validation-engine", "ember-ajax/errors", "ghost-admin/services/ajax", "ember-concurrency"], function (_exports, _validationEngine, _errors, _ajax, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend(_validationEngine.default, {
    application: Ember.inject.controller(),
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    // ValidationEngine settings
    validationType: 'setup',
    blogCreated: false,
    blogTitle: null,
    email: '',
    flowErrors: '',
    profileImage: null,
    name: null,
    password: null,
    actions: {
      setup() {
        this.setup.perform();
      },

      preValidate(model) {
        // Only triggers validation if a value has been entered, preventing empty errors on focusOut
        if (this.get(model)) {
          return this.validate({
            property: model
          });
        }
      },

      setImage(image) {
        this.set('profileImage', image);
      }

    },
    setup: (0, _emberConcurrency.task)(function* () {
      return yield this._passwordSetup();
    }),
    authenticate: (0, _emberConcurrency.task)(function* (authStrategy, authentication) {
      // we don't want to redirect after sign-in during setup
      this.session.skipAuthSuccessHandler = true;

      try {
        let authResult = yield this.session.authenticate(authStrategy, ...authentication);
        this.errors.remove('session');
        return authResult;
      } catch (error) {
        if (error && error.payload && error.payload.errors) {
          if ((0, _ajax.isVersionMismatchError)(error)) {
            return this.notifications.showAPIError(error);
          }

          error.payload.errors.forEach(err => {
            err.message = Ember.String.htmlSafe(err.message);
          });
          this.set('flowErrors', error.payload.errors[0].message.string);
        } else {
          // Connection errors don't return proper status message, only req.body
          this.notifications.showAlert('There was a problem on the server.', {
            type: 'error',
            key: 'session.authenticate.failed'
          });
        }
      }
    }),

    /**
     * Uploads the given data image, then sends the changed user image property to the server
     * @param  {Object} user User object, returned from the 'setup' api call
     * @return {RSVP.Promise} A promise that takes care of both calls
     */
    _sendImage(user) {
      let formData = new FormData();
      let imageFile = this.profileImage;
      let uploadUrl = this.get('ghostPaths.url').api('images', 'upload');
      formData.append('file', imageFile, imageFile.name);
      formData.append('purpose', 'profile_image');
      return this.ajax.post(uploadUrl, {
        data: formData,
        processData: false,
        contentType: false,
        dataType: 'text'
      }).then(response => {
        let [image] = Ember.get(JSON.parse(response), 'images');
        let imageUrl = image.url;
        let usersUrl = this.get('ghostPaths.url').api('users', user.id.toString());
        user.profile_image = imageUrl;
        return this.ajax.put(usersUrl, {
          data: {
            users: [user]
          }
        });
      });
    },

    _passwordSetup() {
      let setupProperties = ['blogTitle', 'name', 'email', 'password'];
      let data = this.getProperties(setupProperties);
      let config = this.config;
      let method = this.blogCreated ? 'put' : 'post';
      this.set('flowErrors', '');
      this.hasValidated.addObjects(setupProperties);
      return this.validate().then(() => {
        let authUrl = this.get('ghostPaths.url').api('authentication', 'setup');
        return this.ajax[method](authUrl, {
          data: {
            setup: [{
              name: data.name,
              email: data.email,
              password: data.password,
              blogTitle: data.blogTitle
            }]
          }
        }).then(result => {
          config.set('blogTitle', data.blogTitle); // don't try to login again if we are already logged in

          if (this.get('session.isAuthenticated')) {
            return this._afterAuthentication(result);
          } // Don't call the success handler, otherwise we will be redirected to admin


          this.session.skipAuthSuccessHandler = true;
          return this.session.authenticate('authenticator:cookie', data.email, data.password).then(() => {
            this.set('blogCreated', true);
            return this._afterAuthentication(result);
          }).catch(error => {
            this._handleAuthenticationError(error);
          });
        }).catch(error => {
          this._handleSaveError(error);
        });
      }).catch(() => {
        this.set('flowErrors', 'Please fill out the form to setup your blog.');
      });
    },

    _handleSaveError(resp) {
      if ((0, _errors.isInvalidError)(resp)) {
        let [error] = resp.payload.errors;
        this.set('flowErrors', [error.message, error.context].join(' '));
      } else {
        this.notifications.showAPIError(resp, {
          key: 'setup.blog-details'
        });
      }
    },

    _handleAuthenticationError(error) {
      if (error && error.payload && error.payload.errors) {
        let [apiError] = error.payload.errors;
        this.set('flowErrors', [apiError.message, apiError.context].join(' '));
      } else {
        // Connection errors don't return proper status message, only req.body
        this.notifications.showAlert('There was a problem on the server.', {
          type: 'error',
          key: 'setup.authenticate.failed'
        });
      }
    },

    _afterAuthentication(result) {
      if (this.profileImage) {
        return this._sendImage(result.users[0]).then(() => this.transitionToRoute('setup.three')).catch(resp => {
          this.notifications.showAPIError(resp, {
            key: 'setup.blog-details'
          });
        });
      } else {
        return this.transitionToRoute('setup.three');
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/signin", ["exports", "jquery", "ghost-admin/mixins/validation-engine", "ghost-admin/services/ajax", "ember-concurrency"], function (_exports, _jquery, _validationEngine, _ajax, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend(_validationEngine.default, {
    application: Ember.inject.controller(),
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    submitting: false,
    loggingIn: false,
    authProperties: null,
    flowErrors: '',
    passwordResetEmailSent: false,
    // ValidationEngine settings
    validationType: 'signin',

    init() {
      this._super(...arguments);

      this.authProperties = ['identification', 'password'];
    },

    signin: Ember.computed.alias('model'),
    accentColor: Ember.computed('config.accent_color', function () {
      let color = this.get('config.accent_color');
      return color;
    }),
    siteIconStyle: Ember.computed('config.icon', function () {
      let icon = this.get('config.icon');

      if (icon) {
        return Ember.String.htmlSafe(`background-image: url(${icon})`);
      }

      icon = 'https://static.ghost.org/v4.0.0/images/ghost-orb-2.png';
      return Ember.String.htmlSafe(`background-image: url(${icon})`);
    }),
    actions: {
      authenticate() {
        return this.validateAndAuthenticate.perform();
      }

    },
    authenticate: (0, _emberConcurrency.task)(function* (authStrategy, authentication) {
      try {
        return yield this.session.authenticate(authStrategy, ...authentication).then(() => true); // ensure task button transitions to "success" state
      } catch (error) {
        if ((0, _ajax.isVersionMismatchError)(error)) {
          return this.notifications.showAPIError(error);
        }

        if (error && error.payload && error.payload.errors) {
          let [mainError] = error.payload.errors;
          mainError.message = Ember.String.htmlSafe(mainError.message || '');
          mainError.context = Ember.String.htmlSafe(mainError.context || '');
          this.set('flowErrors', mainError.context.string || mainError.message.string);

          if (mainError.type === 'PasswordResetRequiredError') {
            this.set('passwordResetEmailSent', true);
          }

          if (mainError.context.string.match(/user with that email/i)) {
            this.get('signin.errors').add('identification', '');
          }

          if (mainError.context.string.match(/password is incorrect/i)) {
            this.get('signin.errors').add('password', '');
          }
        } else {
          console.error(error); // eslint-disable-line no-console
          // Connection errors don't return proper status message, only req.body

          this.notifications.showAlert('There was a problem on the server.', {
            type: 'error',
            key: 'session.authenticate.failed'
          });
        }

        return false;
      }
    }).drop(),
    validateAndAuthenticate: (0, _emberConcurrency.task)(function* () {
      let signin = this.signin;
      let authStrategy = 'authenticator:cookie';
      this.set('flowErrors', ''); // Manually trigger events for input fields, ensuring legacy compatibility with
      // browsers and password managers that don't send proper events on autofill

      (0, _jquery.default)('#login').find('input').trigger('change'); // This is a bit dirty, but there's no other way to ensure the properties are set as well as 'signin'

      this.hasValidated.addObjects(this.authProperties);

      try {
        yield this.validate({
          property: 'signin'
        });
        return yield this.authenticate.perform(authStrategy, [signin.get('identification'), signin.get('password')]);
      } catch (error) {
        this.set('flowErrors', 'Please fill out the form to sign in.');
      }
    }).drop(),
    forgotten: (0, _emberConcurrency.task)(function* () {
      let email = this.get('signin.identification');
      let forgottenUrl = this.get('ghostPaths.url').api('authentication', 'passwordreset');
      let notifications = this.notifications;
      this.set('flowErrors', ''); // This is a bit dirty, but there's no other way to ensure the properties are set as well as 'forgotPassword'

      this.hasValidated.addObject('identification');

      try {
        yield this.validate({
          property: 'forgotPassword'
        });
        yield this.ajax.post(forgottenUrl, {
          data: {
            passwordreset: [{
              email
            }]
          }
        });
        notifications.showAlert('Please check your email for instructions.', {
          type: 'info',
          key: 'forgot-password.send.success'
        });
        return true;
      } catch (error) {
        // ValidationEngine throws "undefined" for failed validation
        if (!error) {
          return this.set('flowErrors', 'We need your email address to reset your password!');
        }

        if ((0, _ajax.isVersionMismatchError)(error)) {
          return notifications.showAPIError(error);
        }

        if (error && error.payload && error.payload.errors && Ember.isArray(error.payload.errors)) {
          let [{
            message
          }] = error.payload.errors;
          this.set('flowErrors', message);

          if (message.match(/no user|not found/)) {
            this.get('signin.errors').add('identification', '');
          }
        } else {
          notifications.showAPIError(error, {
            defaultErrorText: 'There was a problem with the reset, please try again.',
            key: 'forgot-password.send'
          });
        }
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/signup", ["exports", "ghost-admin/services/ajax", "ember-concurrency"], function (_exports, _ajax, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    flowErrors: '',
    profileImage: null,
    signupDetails: Ember.computed.alias('model'),
    actions: {
      validate(property) {
        return this.signupDetails.validate({
          property
        });
      },

      setImage(image) {
        this.set('profileImage', image);
      },

      submit(event) {
        event.preventDefault();
        this.signup.perform();
      }

    },
    signup: (0, _emberConcurrency.task)(function* () {
      let setupProperties = ['name', 'email', 'password', 'token'];
      let notifications = this.notifications;
      this.set('flowErrors', '');
      this.get('signupDetails.hasValidated').addObjects(setupProperties);

      try {
        yield this.signupDetails.validate();
        yield this._completeInvitation();

        try {
          yield this._authenticateWithPassword();
          yield this._sendImage.perform();
        } catch (error) {
          notifications.showAPIError(error, {
            key: 'signup.complete'
          });
        }
      } catch (error) {
        // ValidationEngine throws undefined
        if (!error) {
          this.set('flowErrors', 'Please fill out the form to complete your sign-up');
          return false;
        }

        if (error && error.payload && error.payload.errors && Ember.isArray(error.payload.errors)) {
          if ((0, _ajax.isVersionMismatchError)(error)) {
            notifications.showAPIError(error);
          }

          this.set('flowErrors', error.payload.errors[0].message);
        } else {
          notifications.showAPIError(error, {
            key: 'signup.complete'
          });
        }
      }
    }).drop(),

    _completeInvitation() {
      let authUrl = this.get('ghostPaths.url').api('authentication', 'invitation');
      let signupDetails = this.signupDetails;
      return this.ajax.post(authUrl, {
        dataType: 'json',
        data: {
          invitation: [{
            name: signupDetails.get('name'),
            email: signupDetails.get('email'),
            password: signupDetails.get('password'),
            token: signupDetails.get('token')
          }]
        }
      });
    },

    _authenticateWithPassword() {
      let email = this.get('signupDetails.email');
      let password = this.get('signupDetails.password');
      return this.session.authenticate('authenticator:cookie', email, password);
    },

    _sendImage: (0, _emberConcurrency.task)(function* () {
      let formData = new FormData();
      let imageFile = this.profileImage;
      let uploadUrl = this.get('ghostPaths.url').api('images', 'upload');

      if (imageFile) {
        formData.append('file', imageFile, imageFile.name);
        formData.append('purpose', 'profile_image');
        let user = this.session.user;
        let response = yield this.ajax.post(uploadUrl, {
          data: formData,
          processData: false,
          contentType: false,
          dataType: 'text'
        });
        let [image] = Ember.get(JSON.parse(response), 'images');
        let imageUrl = image.url;
        user.set('profileImage', imageUrl);
        return yield user.save();
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/site", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    guid: Ember.computed.alias('model')
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/tag", ["exports", "ghost-admin/utils/bound-one-way", "@tryghost/string", "ember-concurrency"], function (_exports, _boundOneWay, _string, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const SCRATCH_PROPS = ['name', 'slug', 'description', 'metaTitle', 'metaDescription', 'ogTitle', 'ogDescription', 'twitterTitle', 'twitterDescription', 'codeinjectionHead', 'codeinjectionFoot'];

  var _default = Ember.Controller.extend({
    notifications: Ember.inject.service(),
    router: Ember.inject.service(),
    showDeleteTagModal: false,
    tag: Ember.computed.alias('model'),
    scratchTag: Ember.computed('tag', function () {
      let scratchTag = Ember.Object.create({
        tag: this.tag
      });
      SCRATCH_PROPS.forEach(prop => Ember.defineProperty(scratchTag, prop, (0, _boundOneWay.default)(`tag.${prop}`)));
      return scratchTag;
    }),
    actions: {
      setProperty(propKey, value) {
        this._saveTagProperty(propKey, value);
      },

      openDeleteTagModal() {
        this.set('showDeleteTagModal', true);
      },

      closeDeleteTagModal() {
        this.set('showDeleteTagModal', false);
      },

      deleteTag() {
        return this.tag.destroyRecord().then(() => {
          this.set('showDeleteTagModal', false);
          return this.transitionToRoute('tags');
        }, error => {
          return this.notifications.showAPIError(error, {
            key: 'tag.delete'
          });
        });
      },

      save() {
        return this.save.perform();
      },

      toggleUnsavedChangesModal(transition) {
        let leaveTransition = this.leaveScreenTransition;

        if (!transition && this.showUnsavedChangesModal) {
          this.set('leaveScreenTransition', null);
          this.set('showUnsavedChangesModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveScreenTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.save.isRunning) {
            return this.save.last.then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showUnsavedChangesModal', true);
        }
      },

      leaveScreen() {
        this.tag.rollbackAttributes();
        return this.leaveScreenTransition.retry();
      }

    },
    save: (0, _emberConcurrency.task)(function* () {
      let {
        tag,
        scratchTag
      } = this; // if Cmd+S is pressed before the field loses focus make sure we're
      // saving the intended property values

      let scratchProps = scratchTag.getProperties(SCRATCH_PROPS);
      tag.setProperties(scratchProps);

      try {
        if (tag.get('errors').length !== 0) {
          return;
        }

        yield tag.save(); // replace 'new' route with 'tag' route

        this.replaceRoute('tag', tag);
        return tag;
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'tag.save'
          });
        }
      }
    }).drop(),
    fetchTag: (0, _emberConcurrency.task)(function* (slug) {
      this.set('isLoading', true);
      yield this.store.queryRecord('tag', {
        slug
      }).then(tag => {
        this.set('tag', tag);
        this.set('isLoading', false);
        return tag;
      });
    }),

    _saveTagProperty(propKey, newValue) {
      let tag = this.tag;
      let currentValue = tag.get(propKey);

      if (newValue) {
        newValue = newValue.trim();
      } // avoid modifying empty values and triggering inadvertant unsaved changes modals


      if (newValue !== false && !newValue && !currentValue) {
        return;
      } // Quit if there was no change


      if (newValue === currentValue) {
        return;
      }

      tag.set(propKey, newValue); // Generate slug based on name for new tag when empty

      if (propKey === 'name' && !tag.slug && tag.isNew) {
        let slugValue = (0, _string.slugify)(newValue);

        if (/^#/.test(newValue)) {
          slugValue = 'hash-' + slugValue;
        }

        tag.set('slug', slugValue);
      } // TODO: This is required until .validate/.save mark fields as validated


      tag.get('hasValidated').addObject(propKey);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/tags", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    router: Ember.inject.service(),
    queryParams: ['type'],
    type: 'public',
    tags: Ember.computed.alias('model'),
    filteredTags: Ember.computed('tags.@each.isNew', 'type', function () {
      return this.tags.filter(tag => {
        return !tag.isNew && (!this.type || tag.visibility === this.type);
      });
    }),
    // tags are sorted by name
    sortedTags: Ember.computed.sort('filteredTags', function (tagA, tagB) {
      // ignorePunctuation means the # in internal tag names is ignored
      return tagA.name.localeCompare(tagB.name, undefined, {
        ignorePunctuation: true
      });
    }),
    actions: {
      changeType(type) {
        this.set('type', type);
      },

      newTag() {
        this.router.transitionTo('tag.new');
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/whatsnew", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let WhatsNewController = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, (_class = class WhatsNewController extends Ember.Controller {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "upgradeStatus", _descriptor2, this);

      _initializerDefineProperty(this, "whatsNew", _descriptor3, this);

      _defineProperty(this, "queryParams", ['entry']);
    }

    get copyrightYear() {
      const date = new Date();
      return date.getFullYear();
    }

    get showDatabaseWarning() {
      const isProduction = !!this.config.get('environment').match?.(/production/i);
      const isPro = !!this.config.get('hostSettings')?.siteId;
      const database = this.config.get('database'); // Don't show any warnings for Pro

      if (isPro) {
        return false;
      } // Show a warning if we're in production and not using MySQL 8


      if (isProduction && database !== 'mysql8') {
        return true;
      } // Show a warning if we're in development and using MySQL 5


      if (!isProduction && database === 'mysql5') {
        return true;
      }

      return false;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "upgradeStatus", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "whatsNew", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = WhatsNewController;
});
;define("ghost-admin/data-adapter", ["exports", "@ember-data/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _debug.default;
    }
  });
});
;define("ghost-admin/errors/email-failed-error", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class EmailFailedError extends Error {
    constructor(message) {
      super(message);
      this.name = 'EmailFailedError';
    }

  }

  _exports.default = EmailFailedError;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(EmailFailedError, true);

  window.__CLASSIC_OWN_CLASSES__.set(EmailFailedError, true);
});
;define("ghost-admin/errors/member-import-error", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class EmailFailedError extends Error {
    constructor(_ref) {
      let {
        message,
        context,
        type = 'error'
      } = _ref;
      super(message);
      this.name = 'MemberImportError';
      this.context = context;
      this.type = type;
    }

  }

  _exports.default = EmailFailedError;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(EmailFailedError, true);

  window.__CLASSIC_OWN_CLASSES__.set(EmailFailedError, true);
});
;define("ghost-admin/helpers/-element", ["exports", "ember-element-helper/helpers/-element"], function (_exports, _element) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _element.default;
    }
  });
});
;define("ghost-admin/helpers/and", ["exports", "ember-truth-helpers/helpers/and"], function (_exports, _and) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "and", {
    enumerable: true,
    get: function () {
      return _and.and;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _and.default;
    }
  });
});
;define("ghost-admin/helpers/app-version", ["exports", "ghost-admin/config/environment", "ember-cli-app-version/utils/regexp"], function (_exports, _environment, _regexp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.appVersion = appVersion;
  _exports.default = void 0;

  function appVersion(_) {
    let hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const version = _environment.default.APP.version; // e.g. 1.0.0-alpha.1+4jds75hf
    // Allow use of 'hideSha' and 'hideVersion' For backwards compatibility

    let versionOnly = hash.versionOnly || hash.hideSha;
    let shaOnly = hash.shaOnly || hash.hideVersion;
    let match = null;

    if (versionOnly) {
      if (hash.showExtended) {
        match = version.match(_regexp.versionExtendedRegExp); // 1.0.0-alpha.1
      } // Fallback to just version


      if (!match) {
        match = version.match(_regexp.versionRegExp); // 1.0.0
      }
    }

    if (shaOnly) {
      match = version.match(_regexp.shaRegExp); // 4jds75hf
    }

    return match ? match[0] : version;
  }

  var _default = Ember.Helper.helper(appVersion);

  _exports.default = _default;
});
;define("ghost-admin/helpers/assign", ["exports", "ember-assign-helper/helpers/assign"], function (_exports, _assign) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "assign", {
    enumerable: true,
    get: function () {
      return _assign.assign;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _assign.default;
    }
  });
});
;define("ghost-admin/helpers/author-names", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.authorNames = authorNames;
  _exports.default = void 0;

  function authorNames(_ref
  /*, hash*/
  ) {
    let [authors] = _ref;

    if (!authors || Ember.isEmpty(authors)) {
      return;
    }

    return authors.mapBy('name').join(', ');
  }

  var _default = Ember.Helper.helper(authorNames);

  _exports.default = _default;
});
;define("ghost-admin/helpers/background-image-style", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.backgroundImageStyle = backgroundImageStyle;
  _exports.default = void 0;

  function backgroundImageStyle(_ref
  /*, hash*/
  ) {
    let [url] = _ref;

    if (url) {
      let safeUrl = encodeURI(decodeURI(url));
      return Ember.String.htmlSafe(`background-image: url(${safeUrl});`);
    }

    return '';
  }

  var _default = Ember.Helper.helper(backgroundImageStyle);

  _exports.default = _default;
});
;define("ghost-admin/helpers/camelize", ["exports", "ember-cli-string-helpers/helpers/camelize"], function (_exports, _camelize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "camelize", {
    enumerable: true,
    get: function () {
      return _camelize.camelize;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _camelize.default;
    }
  });
});
;define("ghost-admin/helpers/cancel-all", ["exports", "ember-concurrency/helpers/cancel-all"], function (_exports, _cancelAll) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _cancelAll.default;
    }
  });
});
;define("ghost-admin/helpers/capitalize", ["exports", "ember-cli-string-helpers/helpers/capitalize"], function (_exports, _capitalize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "capitalize", {
    enumerable: true,
    get: function () {
      return _capitalize.capitalize;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _capitalize.default;
    }
  });
});
;define("ghost-admin/helpers/card-is-available", ["exports", "koenig-editor/helpers/card-is-available"], function (_exports, _cardIsAvailable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _cardIsAvailable.default;
    }
  });
});
;define("ghost-admin/helpers/classify", ["exports", "ember-cli-string-helpers/helpers/classify"], function (_exports, _classify) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "classify", {
    enumerable: true,
    get: function () {
      return _classify.classify;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _classify.default;
    }
  });
});
;define("ghost-admin/helpers/clean-basic-html", ["exports", "koenig-editor/helpers/clean-basic-html"], function (_exports, _cleanBasicHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _cleanBasicHtml.default;
    }
  });
});
;define("ghost-admin/helpers/currency-symbol", ["exports", "ghost-admin/utils/currency"], function (_exports, _currency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let CurrencySymbolHelper = (_dec = Ember.inject.service, (_class = class CurrencySymbolHelper extends Ember.Helper {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "feature", _descriptor, this);
    }

    compute(_ref) {
      let [currency] = _ref;

      if (currency) {
        return (0, _currency.getSymbol)(currency);
      }

      return '';
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = CurrencySymbolHelper;
});
;define("ghost-admin/helpers/dasherize", ["exports", "ember-cli-string-helpers/helpers/dasherize"], function (_exports, _dasherize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "dasherize", {
    enumerable: true,
    get: function () {
      return _dasherize.dasherize;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _dasherize.default;
    }
  });
});
;define("ghost-admin/helpers/element", ["exports", "ember-element-helper/helpers/element"], function (_exports, _element) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _element.default;
    }
  });
});
;define("ghost-admin/helpers/ember-power-calendar-day-classes", ["exports", "ember-power-calendar/helpers/ember-power-calendar-day-classes"], function (_exports, _emberPowerCalendarDayClasses) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberPowerCalendarDayClasses.default;
    }
  });
  Object.defineProperty(_exports, "emberPowerCalendarDayClasses", {
    enumerable: true,
    get: function () {
      return _emberPowerCalendarDayClasses.emberPowerCalendarDayClasses;
    }
  });
});
;define("ghost-admin/helpers/ember-power-select-is-group", ["exports", "ember-power-select/helpers/ember-power-select-is-group"], function (_exports, _emberPowerSelectIsGroup) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsGroup.default;
    }
  });
  Object.defineProperty(_exports, "emberPowerSelectIsGroup", {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsGroup.emberPowerSelectIsGroup;
    }
  });
});
;define("ghost-admin/helpers/ember-power-select-is-selected", ["exports", "ember-power-select/helpers/ember-power-select-is-selected"], function (_exports, _emberPowerSelectIsSelected) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsSelected.default;
    }
  });
  Object.defineProperty(_exports, "emberPowerSelectIsSelected", {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsSelected.emberPowerSelectIsSelected;
    }
  });
});
;define("ghost-admin/helpers/enable-developer-experiments", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let EnableDeveloperExperimentsHelper = (_dec = Ember.inject.service, (_class = class EnableDeveloperExperimentsHelper extends Ember.Helper {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);
    }

    compute() {
      return this.config.get('enableDeveloperExperiments');
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = EnableDeveloperExperimentsHelper;
});
;define("ghost-admin/helpers/ensure-safe-component", ["exports", "@embroider/util"], function (_exports, _util) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _util.EnsureSafeComponentHelper;
    }
  });
});
;define("ghost-admin/helpers/eq", ["exports", "ember-truth-helpers/helpers/equal"], function (_exports, _equal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _equal.default;
    }
  });
  Object.defineProperty(_exports, "equal", {
    enumerable: true,
    get: function () {
      return _equal.equal;
    }
  });
});
;define("ghost-admin/helpers/event-name", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.AVAILABLE_EVENTS = void 0;
  _exports.eventName = eventName;
  const AVAILABLE_EVENTS = [// GROUPNAME: Global
  {
    event: 'site.changed',
    name: 'Sitio recreado',
    group: 'Global'
  }, // GROUPNAME: Posts
  {
    event: 'post.added',
    name: 'Publicacion Creada',
    group: 'Posts'
  }, {
    event: 'post.deleted',
    name: 'Publicacion Eliminada',
    group: 'Posts'
  }, {
    event: 'post.edited',
    name: 'Publicacion Editada',
    group: 'Posts'
  }, {
    event: 'post.published',
    name: 'Publicacion Lanzada',
    group: 'Posts'
  }, {
    event: 'post.published.edited',
    name: 'Publicacion Lanzada Actualizada',
    group: 'Posts'
  }, {
    event: 'post.unpublished',
    name: 'Publicacion dada de baja',
    group: 'Posts'
  }, {
    event: 'post.tag.attached',
    name: 'Etiqueta agregada a una publicacion',
    group: 'Posts'
  }, {
    event: 'post.tag.detached',
    name: 'Etiquete eliminada de una publicacion',
    group: 'Posts'
  }, // GROUPNAME: Pages
  {
    event: 'page.added',
    name: 'Pagina Creada',
    group: 'Pages'
  }, {
    event: 'page.deleted',
    name: 'Pagina Eliminada',
    group: 'Pages'
  }, {
    event: 'page.edited',
    name: 'Pagina Actualizada',
    group: 'Pages'
  }, {
    event: 'page.published',
    name: 'Pagina Publicada',
    group: 'Pages'
  }, {
    event: 'page.published.edited',
    name: 'Pagina Publicada Actualizada',
    group: 'Pages'
  }, {
    event: 'page.unpublished',
    name: 'Pagina dada de baja',
    group: 'Pages'
  }, {
    event: 'page.tag.attached',
    name: 'Etiqueta agregada a una pagina',
    group: 'Pages'
  }, {
    event: 'page.tag.detached',
    name: 'Etiqueta eliminada de una pagina',
    group: 'Pages'
  }, // GROUPNAME: Tags
  {
    event: 'tag.added',
    name: 'Etiqueta Creada',
    group: 'Tags'
  }, {
    event: 'tag.edited',
    name: 'Etiqueta Editada',
    group: 'Tags'
  }, {
    event: 'tag.deleted',
    name: 'Etiqueta Eliminada',
    group: 'Tags'
  }, // GROUPNAME: Members
  {
    event: 'member.added',
    name: 'Miembro agregado',
    group: 'Members'
  }, {
    event: 'member.edited',
    name: 'Miembro actualizado',
    group: 'Members'
  }, {
    event: 'member.deleted',
    name: 'Miembro eliminado',
    group: 'Members'
  }];
  _exports.AVAILABLE_EVENTS = AVAILABLE_EVENTS;

  function eventName(_ref
  /*, hash*/
  ) {
    let [event] = _ref;
    let match = AVAILABLE_EVENTS.findBy('event', event);
    return match ? match.name : event;
  }

  var _default = Ember.Helper.helper(eventName);

  _exports.default = _default;
});
;define("ghost-admin/helpers/feature", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let EnableDeveloperExperimentsHelper = (_dec = Ember.inject.service, (_class = class EnableDeveloperExperimentsHelper extends Ember.Helper {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "feature", _descriptor, this);
    }

    compute(_ref) {
      let [featureFlag] = _ref;
      return this.feature.get(featureFlag);
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = EnableDeveloperExperimentsHelper;
});
;define("ghost-admin/helpers/format-number", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.formatNumber = formatNumber;

  function formatNumber(number) {
    return Number(number).toLocaleString();
  }

  var _default = Ember.Helper.helper(function (_ref
  /*, hash*/
  ) {
    let [number] = _ref;
    return formatNumber(number);
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/full-email-address", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let FullEmailAddressHelper = (_dec = Ember.inject.service, (_class = class FullEmailAddressHelper extends Ember.Helper {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);
    }

    compute(_ref) {
      let [email] = _ref;

      if (email.indexOf('@') > -1) {
        return email;
      }

      return `${email}@${this.config.emailDomain}`;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = FullEmailAddressHelper;
});
;define("ghost-admin/helpers/gh-count-characters", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.countCharacters = countCharacters;
  _exports.default = void 0;

  function countCharacters(params) {
    if (!params || !params.length) {
      return;
    }

    let el = document.createElement('span');
    let content = params[0] || ''; // convert to array so that we get accurate symbol counts for multibyte chars
    // this will still count emoji+modifer as two chars

    let {
      length
    } = Array.from(content);
    el.className = 'word-count';

    if (length > 180) {
      el.style.color = '#f05230';
    } else {
      el.style.color = '#45C32E';
    }

    el.innerHTML = 200 - length;
    return Ember.String.htmlSafe(el.outerHTML);
  }

  var _default = Ember.Helper.helper(function (params) {
    return countCharacters(params);
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/gh-count-down-characters", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.countDownCharacters = countDownCharacters;
  _exports.default = void 0;

  function countDownCharacters(params) {
    if (!params || params.length < 2) {
      return;
    }

    let el = document.createElement('span');
    let [content, maxCharacters] = params; // convert to array so that we get accurate symbol counts for multibyte chars
    // this will still count emoji+modifer as two chars

    let {
      length
    } = Array.from(content || '');
    el.className = 'word-count';

    if (length > maxCharacters) {
      el.style.color = '#E25440';
    } else {
      el.style.color = '#30CF43';
    }

    el.innerHTML = length;
    return Ember.String.htmlSafe(el.outerHTML);
  }

  var _default = Ember.Helper.helper(function (params) {
    return countDownCharacters(params);
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/gh-format-post-time", ["exports", "moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.formatPostTime = formatPostTime;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function formatPostTime(timeago, _ref) {
    let {
      timezone = 'ect/UTC',
      draft,
      scheduled,
      published
    } = _ref;

    if (draft) {
      // No special handling for drafts, just use moment.from
      return (0, _moment.default)(timeago).from(_moment.default.utc());
    }

    let time = _moment.default.tz(timeago, timezone);

    let now = _moment.default.tz(_moment.default.utc(), timezone);

    let utcOffset;

    if (time.utcOffset() === 0) {
      utcOffset = '(UTC)';
    } else {
      utcOffset = `(UTC${time.format('Z').replace(/([+-])0/, '$1').replace(/:00/, '')})`;
    } // If not a draft and post was published <= 12 hours ago
    // or scheduled to be published <= 12 hours from now, use moment.from


    if (Math.abs(now.diff(time, 'hours')) <= 12) {
      return time.from(now);
    } // If scheduled for or published on the same day, render the time + Today


    if (time.isSame(now, 'day')) {
      let formatted = time.format(`HH:mm [${utcOffset}] [Today]`);
      return scheduled ? `at ${formatted}` : formatted;
    } // if published yesterday, render time + yesterday
    // This check comes before scheduled, because there are likely to be more published
    // posts than scheduled posts.


    if (published && time.isSame(now.clone().subtract(1, 'days').startOf('day'), 'day')) {
      return time.format(`HH:mm [${utcOffset}] [Yesterday]`);
    } // if scheduled for tomorrow, render the time + tomorrow


    if (scheduled && time.isSame(now.clone().add(1, 'days').startOf('day'), 'day')) {
      return time.format(`[at] HH:mm [${utcOffset}] [tomorrow]`);
    } // Else, render just the date if published, or the time & date if scheduled


    let format = scheduled ? `[at] HH:mm [${utcOffset}] [on] DD MMM YYYY` : 'DD MMM YYYY';
    return time.format(format);
  }

  let GhFormatPostTimeHelper = (_dec = Ember.inject.service, (_class = class GhFormatPostTimeHelper extends Ember.Helper {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "settings", _descriptor, this);
    }

    compute(_ref2, options) {
      let [timeago] = _ref2;
      (true && !(timeago) && Ember.assert('You must pass a time to the gh-format-post-time helper', timeago));
      return formatPostTime(timeago, Object.assign({}, options, {
        timezone: this.settings.get('timezone')
      }));
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = GhFormatPostTimeHelper;
});
;define("ghost-admin/helpers/gh-pluralize", ["exports", "ghost-admin/helpers/format-number", "ember-inflector"], function (_exports, _formatNumber, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.ghPluralize = ghPluralize;

  function ghPluralize(number, word) {
    let {
      withoutCount
    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let output = [];

    if (!Ember.isBlank(number) && withoutCount !== true) {
      output.push((0, _formatNumber.formatNumber)(number));
    } // default {{pluralize}} allows for {{pluralize "word"}} with no number


    if (Ember.isBlank(number)) {
      output.push((0, _emberInflector.pluralize)(word));
    } else {
      output.push((0, _emberInflector.pluralize)(number, word, {
        withoutCount: true
      }));
    }

    return output.join(' ');
  } // like {{pluralize}} but formats the number according to current locale


  var _default = Ember.Helper.helper(function (_ref) {
    let [number, word] = _ref;
    let {
      'without-count': withoutCount
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return ghPluralize(number, word, {
      withoutCount
    });
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/gh-price-amount", ["exports", "ghost-admin/helpers/format-number"], function (_exports, _formatNumber) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.ghPriceAmount = ghPriceAmount;

  function ghPriceAmount(amount) {
    if (amount) {
      let price = amount / 100;

      if (price % 1 === 0) {
        return (0, _formatNumber.formatNumber)(price);
      } else {
        return (0, _formatNumber.formatNumber)(Math.round(price * 100) / 100);
      }
    }

    return 0;
  } // like {{pluralize}} but formats the number according to current locale


  var _default = Ember.Helper.helper(function (_ref) {
    let [amount] = _ref;
    return ghPriceAmount(amount);
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/gh-user-can-admin", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.ghUserCanAdmin = ghUserCanAdmin;

  // Handlebars Helper {{gh-user-can-admin}} group users by admin and owner using if, or group them author using unless
  // Usage: call helper as with aparameter of session.user
  // e.g - {{#if (gh-user-can-admin session.user)}} 'block content' {{/if}}
  // @param session.user
  function ghUserCanAdmin(params) {
    return !!params[0].get('isAdmin');
  }

  var _default = Ember.Helper.helper(function (params) {
    return ghUserCanAdmin(params);
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/gravatar", ["exports", "blueimp-md5"], function (_exports, _blueimpMd) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Helper.extend({
    config: Ember.inject.service(),

    compute(_ref, _ref2
    /*, hash*/
    ) {
      let [email] = _ref;
      let {
        size = 180,
        d = 'blank'
      } = _ref2;

      if (!this.get('config.useGravatar')) {
        return;
      }

      if (!email || Ember.isEmpty(email)) {
        return;
      }

      return `https://www.gravatar.com/avatar/${(0, _blueimpMd.default)(email)}?s=${size}&d=${d}`;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/gt", ["exports", "ember-truth-helpers/helpers/gt"], function (_exports, _gt) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _gt.default;
    }
  });
  Object.defineProperty(_exports, "gt", {
    enumerable: true,
    get: function () {
      return _gt.gt;
    }
  });
});
;define("ghost-admin/helpers/gte", ["exports", "ember-truth-helpers/helpers/gte"], function (_exports, _gte) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _gte.default;
    }
  });
  Object.defineProperty(_exports, "gte", {
    enumerable: true,
    get: function () {
      return _gte.gte;
    }
  });
});
;define("ghost-admin/helpers/hex-adjust", ["exports", "@tryghost/color-utils"], function (_exports, _colorUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Helper.helper(function hexAdjuster(_ref) {
    let [hex] = _ref;
    let {
      s: sDiff = 0,
      l: lDiff = 0
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const originalColor = (0, _colorUtils.Color)(hex);
    let newColor = originalColor;

    if (sDiff !== 0) {
      newColor = newColor.saturationl(newColor.saturationl() + sDiff);
    }

    if (lDiff !== 0) {
      newColor = newColor.lightness(newColor.lightness() + lDiff);
    }

    return newColor.hex();
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/hex-contrast", ["exports", "@tryghost/color-utils"], function (_exports, _colorUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Helper.helper(function hexContrast(_ref) {
    let [hex] = _ref;
    return (0, _colorUtils.textColorForBackgroundColor)((0, _colorUtils.Color)(hex)).hex();
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/highlighted-text", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.highlightedText = highlightedText;

  function highlightedText(_ref) {
    let [text, termToHighlight] = _ref;
    // replace any non-word character with an escaped character
    let sanitisedTerm = termToHighlight.replace(new RegExp(/\W/ig), '\\$&');
    return Ember.String.htmlSafe(text.replace(new RegExp(sanitisedTerm, 'ig'), '<span class="highlight">$&</span>'));
  }

  var _default = Ember.Helper.helper(highlightedText);

  _exports.default = _default;
});
;define("ghost-admin/helpers/html-safe", ["exports", "ember-cli-string-helpers/helpers/html-safe"], function (_exports, _htmlSafe) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _htmlSafe.default;
    }
  });
  Object.defineProperty(_exports, "htmlSafe", {
    enumerable: true,
    get: function () {
      return _htmlSafe.htmlSafe;
    }
  });
});
;define("ghost-admin/helpers/humanize-setting-key", ["exports", "ember-cli-string-helpers/helpers/humanize"], function (_exports, _humanize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.humanizeSettingKey = humanizeSettingKey;

  function humanizeSettingKey(_ref) {
    let [key] = _ref;
    let humanized = (0, _humanize.humanize)([key]);
    const allCaps = ['API', 'CTA', 'RSS'];
    allCaps.forEach(str => {
      const regex = new RegExp(`(^| )(${str})( |$)`, 'gi');
      humanized = humanized.replace(regex, `$1${str}$3`);
    });
    return humanized;
  }

  var _default = Ember.Helper.helper(humanizeSettingKey);

  _exports.default = _default;
});
;define("ghost-admin/helpers/humanize", ["exports", "ember-cli-string-helpers/helpers/humanize"], function (_exports, _humanize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _humanize.default;
    }
  });
  Object.defineProperty(_exports, "humanize", {
    enumerable: true,
    get: function () {
      return _humanize.humanize;
    }
  });
});
;define("ghost-admin/helpers/if-key", ["exports", "ember-keyboard/helpers/if-key"], function (_exports, _ifKey) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _ifKey.default;
    }
  });
});
;define("ghost-admin/helpers/integration-icon-style", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.integrationLogoStyle = integrationLogoStyle;

  function integrationLogoStyle(_ref
  /*, hash*/
  ) {
    let [integration] = _ref;

    if (integration.iconImage) {
      let style = `background-image:url(${integration.iconImage});background-size:36px;`;
      return Ember.String.htmlSafe(style);
    }
  }

  var _default = Ember.Helper.helper(integrationLogoStyle);

  _exports.default = _default;
});
;define("ghost-admin/helpers/is-after", ["exports", "ember-moment/helpers/is-after"], function (_exports, _isAfter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isAfter.default;
    }
  });
});
;define("ghost-admin/helpers/is-array", ["exports", "ember-truth-helpers/helpers/is-array"], function (_exports, _isArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isArray.default;
    }
  });
  Object.defineProperty(_exports, "isArray", {
    enumerable: true,
    get: function () {
      return _isArray.isArray;
    }
  });
});
;define("ghost-admin/helpers/is-before", ["exports", "ember-moment/helpers/is-before"], function (_exports, _isBefore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isBefore.default;
    }
  });
});
;define("ghost-admin/helpers/is-between", ["exports", "ember-moment/helpers/is-between"], function (_exports, _isBetween) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isBetween.default;
    }
  });
});
;define("ghost-admin/helpers/is-empty", ["exports", "ember-truth-helpers/helpers/is-empty"], function (_exports, _isEmpty) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isEmpty.default;
    }
  });
});
;define("ghost-admin/helpers/is-equal", ["exports", "ember-truth-helpers/helpers/is-equal"], function (_exports, _isEqual) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isEqual.default;
    }
  });
  Object.defineProperty(_exports, "isEqual", {
    enumerable: true,
    get: function () {
      return _isEqual.isEqual;
    }
  });
});
;define("ghost-admin/helpers/is-same-or-after", ["exports", "ember-moment/helpers/is-same-or-after"], function (_exports, _isSameOrAfter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isSameOrAfter.default;
    }
  });
});
;define("ghost-admin/helpers/is-same-or-before", ["exports", "ember-moment/helpers/is-same-or-before"], function (_exports, _isSameOrBefore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isSameOrBefore.default;
    }
  });
});
;define("ghost-admin/helpers/is-same", ["exports", "ember-moment/helpers/is-same"], function (_exports, _isSame) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isSame.default;
    }
  });
});
;define("ghost-admin/helpers/kg-style", ["exports", "koenig-editor/helpers/kg-style"], function (_exports, _kgStyle) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _kgStyle.default;
    }
  });
  Object.defineProperty(_exports, "kgStyle", {
    enumerable: true,
    get: function () {
      return _kgStyle.kgStyle;
    }
  });
});
;define("ghost-admin/helpers/lf-lock-model", ["exports", "liquid-fire/helpers/lf-lock-model"], function (_exports, _lfLockModel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _lfLockModel.default;
    }
  });
  Object.defineProperty(_exports, "lfLockModel", {
    enumerable: true,
    get: function () {
      return _lfLockModel.lfLockModel;
    }
  });
});
;define("ghost-admin/helpers/lf-or", ["exports", "liquid-fire/helpers/lf-or"], function (_exports, _lfOr) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _lfOr.default;
    }
  });
  Object.defineProperty(_exports, "lfOr", {
    enumerable: true,
    get: function () {
      return _lfOr.lfOr;
    }
  });
});
;define("ghost-admin/helpers/loc", ["exports", "@ember/string/helpers/loc"], function (_exports, _loc) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _loc.default;
    }
  });
  Object.defineProperty(_exports, "loc", {
    enumerable: true,
    get: function () {
      return _loc.loc;
    }
  });
});
;define("ghost-admin/helpers/lowercase", ["exports", "ember-cli-string-helpers/helpers/lowercase"], function (_exports, _lowercase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _lowercase.default;
    }
  });
  Object.defineProperty(_exports, "lowercase", {
    enumerable: true,
    get: function () {
      return _lowercase.lowercase;
    }
  });
});
;define("ghost-admin/helpers/lt", ["exports", "ember-truth-helpers/helpers/lt"], function (_exports, _lt) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _lt.default;
    }
  });
  Object.defineProperty(_exports, "lt", {
    enumerable: true,
    get: function () {
      return _lt.lt;
    }
  });
});
;define("ghost-admin/helpers/lte", ["exports", "ember-truth-helpers/helpers/lte"], function (_exports, _lte) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _lte.default;
    }
  });
  Object.defineProperty(_exports, "lte", {
    enumerable: true,
    get: function () {
      return _lte.lte;
    }
  });
});
;define("ghost-admin/helpers/members-event-fetcher", ["exports", "moment", "ember-could-get-used-to-this", "tracked-built-ins", "ember-concurrency-decorators"], function (_exports, _moment, _emberCouldGetUsedToThis, _trackedBuiltIns, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let MembersEventsFetcher = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._tracked, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._action, (_class = class MembersEventsFetcher extends _emberCouldGetUsedToThis.Resource {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ajax", _descriptor, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor2, this);

      _initializerDefineProperty(this, "data", _descriptor3, this);

      _initializerDefineProperty(this, "isLoading", _descriptor4, this);

      _initializerDefineProperty(this, "isError", _descriptor5, this);

      _initializerDefineProperty(this, "errorMessage", _descriptor6, this);

      _initializerDefineProperty(this, "hasReachedEnd", _descriptor7, this);

      _defineProperty(this, "cursor", null);
    }

    get value() {
      return {
        isLoading: this.isLoading,
        isError: this.isError,
        errorMessage: this.errorMessage,
        data: this.data,
        loadNextPage: this.loadNextPage,
        hasReachedEnd: this.hasReachedEnd
      };
    }

    async setup() {
      this.cursor = _moment.default.utc().format('YYYY-MM-DD HH:mm:ss');
      let filter = `data.created_at:<'${this.cursor}'`;

      if (this.args.named.filter) {
        filter += `+${this.args.named.filter}`;
      }

      return this.loadEventsTask.perform({
        filter
      });
    }

    loadNextPage() {
      // NOTE: assumes data is always ordered by created_at desc
      const lastEvent = this.data[this.data.length - 1];

      if (!lastEvent?.data?.created_at) {
        this.hasReachedEnd = true;
        return;
      }

      const cursor = _moment.default.utc(lastEvent.data.created_at).format('YYYY-MM-DD HH:mm:ss');

      if (cursor === this.cursor) {
        this.hasReachedEnd = true;
        return;
      }

      this.cursor = cursor;
      let filter = `data.created_at:<'${this.cursor}'`;

      if (this.args.named.filter) {
        filter += `+${this.args.named.filter}`;
      }

      this.loadEventsTask.perform({
        filter
      });
    }

    *loadEventsTask(queryParams) {
      try {
        this.isLoading = true;
        const url = this.ghostPaths.url.api('members/events');
        const data = Object.assign({}, queryParams, {
          limit: this.args.named.pageSize
        });
        const {
          events
        } = yield this.ajax.request(url, {
          data
        });

        if (events.length < data.limit) {
          this.hasReachedEnd = true;
        }

        this.data.push(...events);
      } catch (e) {
        this.isError = true;
        const errorMessage = e.payload?.errors?.[0]?.message;

        if (errorMessage) {
          this.errorMessage = errorMessage;
        } // TODO: log to Sentry


        console.error(e); // eslint-disable-line
      } finally {
        this.isLoading = false;
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "data", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return new _trackedBuiltIns.TrackedArray([]);
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "isLoading", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "isError", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "errorMessage", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "hasReachedEnd", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "loadNextPage", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "loadNextPage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "loadEventsTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "loadEventsTask"), _class.prototype)), _class));
  _exports.default = MembersEventsFetcher;
});
;define("ghost-admin/helpers/members-event-filter", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.NEWSLETTER_EVENTS = _exports.EMAIL_EVENTS = void 0;
  const EMAIL_EVENTS = ['email_delivered_event', 'email_opened_event', 'email_failed_event'];
  _exports.EMAIL_EVENTS = EMAIL_EVENTS;
  const NEWSLETTER_EVENTS = ['newsletter_event'];
  _exports.NEWSLETTER_EVENTS = NEWSLETTER_EVENTS;

  var _default = Ember.Helper.extend({
    settings: Ember.inject.service(),

    compute(positionalParams, _ref) {
      let {
        excludedEvents = [],
        member = '',
        excludeEmailEvents = false
      } = _ref;
      const excludedEventsSet = new Set();

      if (this.settings.get('editorDefaultEmailRecipients') === 'disabled') {
        [...EMAIL_EVENTS, ...NEWSLETTER_EVENTS].forEach(type => excludedEventsSet.add(type));
      }

      if (excludeEmailEvents) {
        EMAIL_EVENTS.forEach(type => excludedEventsSet.add(type));
      }

      if (excludedEvents.length) {
        excludedEvents.forEach(type => excludedEventsSet.add(type));
      }

      let filterParts = [];
      const excludedEventsArray = Array.from(excludedEventsSet).reject(Ember.isBlank);

      if (excludedEventsArray.length > 0) {
        filterParts.push(`type:-[${excludedEventsArray.join(',')}]`);
      }

      if (member) {
        filterParts.push(`data.member_id:${member}`);
      }

      return filterParts.join('+');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/moment-add", ["exports", "ember-moment/helpers/moment-add"], function (_exports, _momentAdd) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentAdd.default;
    }
  });
});
;define("ghost-admin/helpers/moment-calendar", ["exports", "ember-moment/helpers/moment-calendar"], function (_exports, _momentCalendar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentCalendar.default;
    }
  });
});
;define("ghost-admin/helpers/moment-diff", ["exports", "ember-moment/helpers/moment-diff"], function (_exports, _momentDiff) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentDiff.default;
    }
  });
});
;define("ghost-admin/helpers/moment-duration", ["exports", "ember-moment/helpers/moment-duration"], function (_exports, _momentDuration) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentDuration.default;
    }
  });
});
;define("ghost-admin/helpers/moment-format", ["exports", "ember-moment/helpers/moment-format"], function (_exports, _momentFormat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentFormat.default;
    }
  });
});
;define("ghost-admin/helpers/moment-from-now", ["exports", "ember-moment/helpers/moment-from-now"], function (_exports, _momentFromNow) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentFromNow.default;
    }
  });
});
;define("ghost-admin/helpers/moment-from", ["exports", "ember-moment/helpers/moment-from"], function (_exports, _momentFrom) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentFrom.default;
    }
  });
});
;define("ghost-admin/helpers/moment-subtract", ["exports", "ember-moment/helpers/moment-subtract"], function (_exports, _momentSubtract) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentSubtract.default;
    }
  });
});
;define("ghost-admin/helpers/moment-to-date", ["exports", "ember-moment/helpers/moment-to-date"], function (_exports, _momentToDate) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentToDate.default;
    }
  });
});
;define("ghost-admin/helpers/moment-to-now", ["exports", "ember-moment/helpers/moment-to-now"], function (_exports, _momentToNow) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentToNow.default;
    }
  });
});
;define("ghost-admin/helpers/moment-to", ["exports", "ember-moment/helpers/moment-to"], function (_exports, _momentTo) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentTo.default;
    }
  });
});
;define("ghost-admin/helpers/moment-unix", ["exports", "ember-moment/helpers/unix"], function (_exports, _unix) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _unix.default;
    }
  });
});
;define("ghost-admin/helpers/moment", ["exports", "ember-moment/helpers/moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _moment.default;
    }
  });
});
;define("ghost-admin/helpers/noop", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Helper.helper(function noop() {
    return () => {};
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/not-eq", ["exports", "ember-truth-helpers/helpers/not-equal"], function (_exports, _notEqual) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _notEqual.default;
    }
  });
  Object.defineProperty(_exports, "notEqualHelper", {
    enumerable: true,
    get: function () {
      return _notEqual.notEqualHelper;
    }
  });
});
;define("ghost-admin/helpers/not", ["exports", "ember-truth-helpers/helpers/not"], function (_exports, _not) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _not.default;
    }
  });
  Object.defineProperty(_exports, "not", {
    enumerable: true,
    get: function () {
      return _not.not;
    }
  });
});
;define("ghost-admin/helpers/now", ["exports", "ember-moment/helpers/now"], function (_exports, _now) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _now.default;
    }
  });
});
;define("ghost-admin/helpers/on-key", ["exports", "ember-keyboard/helpers/on-key"], function (_exports, _onKey) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _onKey.default;
    }
  });
});
;define("ghost-admin/helpers/one-way-select/contains", ["exports", "ember-one-way-select/helpers/one-way-select/contains"], function (_exports, _contains) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "contains", {
    enumerable: true,
    get: function () {
      return _contains.contains;
    }
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _contains.default;
    }
  });
});
;define("ghost-admin/helpers/optional", ["exports", "ember-composable-helpers/helpers/optional"], function (_exports, _optional) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _optional.default;
    }
  });
  Object.defineProperty(_exports, "optional", {
    enumerable: true,
    get: function () {
      return _optional.optional;
    }
  });
});
;define("ghost-admin/helpers/or", ["exports", "ember-truth-helpers/helpers/or"], function (_exports, _or) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _or.default;
    }
  });
  Object.defineProperty(_exports, "or", {
    enumerable: true,
    get: function () {
      return _or.or;
    }
  });
});
;define("ghost-admin/helpers/parse-member-event", ["exports", "moment", "ghost-admin/utils/currency"], function (_exports, _moment, _currency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = parseMemberEvent;

  function parseMemberEvent(event) {
    let subject = event.data.member.name || event.data.member.email;
    let icon = getIcon(event);
    let action = getAction(event);
    let object = getObject(event);
    let info = getInfo(event);
    let timestamp = (0, _moment.default)(event.data.created_at);
    return {
      memberId: event.data.member_id,
      member: event.data.member,
      emailId: event.data.email_id,
      email: event.data.email,
      icon,
      subject,
      action,
      object,
      info,
      timestamp
    };
  }
  /* internal helper functions */


  function getIcon(event) {
    let icon;

    if (event.type === 'signup_event') {
      icon = 'signed-up';
    }

    if (event.type === 'login_event') {
      icon = 'logged-in';
    }

    if (event.type === 'payment_event') {
      icon = 'made-a-payment';
    }

    if (event.type === 'newsletter_event') {
      if (event.data.subscribed) {
        icon = 'subscribed-to-email';
      } else {
        icon = 'unsubscribed-from-email';
      }
    }

    if (event.type === 'subscription_event') {
      if (event.data.from_plan === null) {
        icon = 'started-subscription';
      }

      if (event.data.to_plan === null) {
        icon = 'canceled-subscription';
      }

      icon = 'started-subscription';
    }

    if (event.type === 'email_opened_event') {
      icon = 'opened-email';
    }

    if (event.type === 'email_delivered_event') {
      icon = 'received-email';
    }

    if (event.type === 'email_failed_event') {
      icon = 'email-delivery-failed';
    }

    return 'event-' + icon;
  }

  function getAction(event) {
    if (event.type === 'signup_event') {
      return 'signed up';
    }

    if (event.type === 'login_event') {
      return 'logged in';
    }

    if (event.type === 'payment_event') {
      return 'made a payment';
    }

    if (event.type === 'newsletter_event') {
      if (event.data.subscribed) {
        return 'subscribed to';
      } else {
        return 'unsubscribed from';
      }
    }

    if (event.type === 'subscription_event') {
      if (event.data.from_plan === null) {
        return 'started';
      }

      if (event.data.to_plan === null) {
        return 'cancelled';
      }

      return 'changed';
    }

    if (event.type === 'email_opened_event') {
      return 'opened';
    }

    if (event.type === 'email_delivered_event') {
      return 'received';
    }

    if (event.type === 'email_failed_event') {
      return 'failed to receive';
    }
  }

  function getObject(event) {
    if (event.type === 'newsletter_event') {
      return 'emails';
    }

    if (event.type === 'subscription_event') {
      return 'their subscription';
    }

    if (event.type.match?.(/^email_/)) {
      return 'an email';
    }

    return '';
  }

  function getInfo(event) {
    if (event.type === 'subscription_event') {
      let mrrDelta = (0, _currency.getNonDecimal)(event.data.mrr_delta, event.data.currency);

      if (mrrDelta === 0) {
        return;
      }

      let sign = mrrDelta > 0 ? '+' : '-';
      let symbol = (0, _currency.getSymbol)(event.data.currency);
      return `(MRR ${sign}${symbol}${Math.abs(mrrDelta)})`;
    }

    return;
  }
});
;define("ghost-admin/helpers/perform", ["exports", "ember-concurrency/helpers/perform"], function (_exports, _perform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _perform.default;
    }
  });
});
;define("ghost-admin/helpers/pluralize", ["exports", "ember-inflector/lib/helpers/pluralize"], function (_exports, _pluralize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _pluralize.default;
  _exports.default = _default;
});
;define("ghost-admin/helpers/power-calendar-format-date", ["exports", "ember-power-calendar/helpers/power-calendar-format-date"], function (_exports, _powerCalendarFormatDate) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerCalendarFormatDate.default;
    }
  });
  Object.defineProperty(_exports, "powerCalendarFormatDate", {
    enumerable: true,
    get: function () {
      return _powerCalendarFormatDate.powerCalendarFormatDate;
    }
  });
});
;define("ghost-admin/helpers/reset-query-params", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.DEFAULT_QUERY_PARAMS = void 0;
  _exports.resetQueryParams = resetQueryParams;
  const DEFAULT_QUERY_PARAMS = {
    posts: {
      type: null,
      visibility: null,
      author: null,
      tag: null,
      order: null
    },
    pages: {
      type: null,
      visibility: null,
      author: null,
      tag: null,
      order: null
    },
    'members.index': {
      label: null,
      paid: null,
      search: null,
      filter: null,
      order: null
    },
    'members-activity': {
      excludedEvents: null,
      member: null
    }
  }; // in order to reset query params to their defaults when using <LinkTo> or
  // `transitionTo` it's necessary to explicitly set each param. This helper makes
  // it easier to provide a "resetting" link, especially when used with custom views

  _exports.DEFAULT_QUERY_PARAMS = DEFAULT_QUERY_PARAMS;

  function resetQueryParams(routeName, newParams) {
    return Object.assign({}, DEFAULT_QUERY_PARAMS[routeName], newParams);
  }

  var _default = Ember.Helper.helper(function (params
  /*, hash*/
  ) {
    return resetQueryParams(...params);
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/route-action", ["exports", "ember-route-action-helper/helpers/route-action"], function (_exports, _routeAction) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _routeAction.default;
    }
  });
});
;define("ghost-admin/helpers/sanitize-html", ["exports", "koenig-editor/helpers/sanitize-html"], function (_exports, _sanitizeHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _sanitizeHtml.default;
    }
  });
  Object.defineProperty(_exports, "sanitizeHtml", {
    enumerable: true,
    get: function () {
      return _sanitizeHtml.sanitizeHtml;
    }
  });
});
;define("ghost-admin/helpers/set-has", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Helper.helper(function (_ref) {
    let [set, key] = _ref;
    return set.has(key);
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/singularize", ["exports", "ember-inflector/lib/helpers/singularize"], function (_exports, _singularize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _singularize.default;
  _exports.default = _default;
});
;define("ghost-admin/helpers/svg-jar", ["exports", "ember-svg-jar/utils/make-helper", "ember-svg-jar/utils/make-svg"], function (_exports, _makeHelper, _makeSvg) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.svgJar = svgJar;

  function getInlineAsset(assetId) {
    try {
      /* eslint-disable global-require */
      return require(`ember-svg-jar/inlined/${assetId}`).default;
    } catch (err) {
      return null;
    }
  }

  function svgJar(assetId, svgAttrs) {
    return (0, _makeSvg.default)(assetId, svgAttrs, getInlineAsset);
  }

  var _default = (0, _makeHelper.default)(svgJar);

  _exports.default = _default;
});
;define("ghost-admin/helpers/task", ["exports", "ember-concurrency/helpers/task"], function (_exports, _task) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _task.default;
    }
  });
});
;define("ghost-admin/helpers/titleize", ["exports", "ember-cli-string-helpers/helpers/titleize"], function (_exports, _titleize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _titleize.default;
    }
  });
  Object.defineProperty(_exports, "titleize", {
    enumerable: true,
    get: function () {
      return _titleize.titleize;
    }
  });
});
;define("ghost-admin/helpers/toggle", ["exports", "ember-composable-helpers/helpers/toggle"], function (_exports, _toggle) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _toggle.default;
    }
  });
  Object.defineProperty(_exports, "toggle", {
    enumerable: true,
    get: function () {
      return _toggle.toggle;
    }
  });
});
;define("ghost-admin/helpers/trim", ["exports", "ember-cli-string-helpers/helpers/trim"], function (_exports, _trim) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _trim.default;
    }
  });
  Object.defineProperty(_exports, "trim", {
    enumerable: true,
    get: function () {
      return _trim.trim;
    }
  });
});
;define("ghost-admin/helpers/truncate", ["exports", "ember-cli-string-helpers/helpers/truncate"], function (_exports, _truncate) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _truncate.default;
    }
  });
  Object.defineProperty(_exports, "truncate", {
    enumerable: true,
    get: function () {
      return _truncate.truncate;
    }
  });
});
;define("ghost-admin/helpers/ui-btn-span", ["exports", "ghost-admin/helpers/ui-btn"], function (_exports, _uiBtn) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.uiBtnSpan = uiBtnSpan;

  function uiBtnSpan(_ref, hash) {
    let [style] = _ref;
    return (0, _uiBtn.btnStyles)(Object.assign({}, {
      style
    }, hash)).span;
  }

  var _default = Ember.Helper.helper(uiBtnSpan);

  _exports.default = _default;
});
;define("ghost-admin/helpers/ui-btn", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.btnStyles = btnStyles;
  _exports.default = void 0;
  _exports.uiBtn = uiBtn;

  function btnStyles() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let button = 'dib midgrey btn-base br3 ba b--lightgrey-l1 pointer glow';
    let span = 'f8 fw5 tracked-2 dib pt0 pb0 tc'; // Set style

    if (options.style) {
      switch (options.style) {
        case 'outline-white':
        case 'outline-white--s':
          button = 'bg-transparent dib white btn-base br3 ba b--white-60 pointer highlight-white';
          span = 'f8 fw5 tracked-2 dib pt0 pb0 tc';
          break;

        case 'outline-blue':
        case 'outline-blue--s':
          button = 'bg-transparent dib blue btn-base br3 ba b--lightgrey pointer glow';
          span = 'f8 fw5 tracked-2 dib pt0 pb0 tc';
          break;

        case 'blue':
        case 'blue--s':
          button = 'dib bw0 white br3 btn-base btn-blue pointer';
          span = 'f8 fw5 tracked-2 dib pt0 pb0 tc';
          break;

        case 'green':
        case 'green--s':
          button = 'dib bw0 white br3 btn-base btn-green pointer';
          span = 'f8 fw5 tracked-2 dib pt0 pb0 tc';
          break;

        case 'red':
        case 'red--s':
          button = 'dib bw0 white br3 btn-base btn-red pointer';
          span = 'f8 fw5 tracked-2 dib pt0 pb0 tc';
          break;
      } // Style ending with '--s' means small button


      if (options.style.substr(options.style.length - 3) === '--s') {
        button = `${button} btn-small`;
      }
    }

    if (options.class) {
      button = `${button} ${options.class}`;
    }

    button = `sans-serif ${button} flex-shrink-0`;
    span = `${span} inline-flex items-center`;
    return {
      button: button,
      span: span
    };
  }

  function uiBtn(_ref, hash) {
    let [style] = _ref;
    return btnStyles(Object.assign({}, {
      style
    }, hash)).button;
  }

  var _default = Ember.Helper.helper(uiBtn);

  _exports.default = _default;
});
;define("ghost-admin/helpers/ui-text", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.uiText = uiText;

  function uiText(_ref) {
    let [style] = _ref;
    let cssClass = '';

    switch (style) {
      case 'h1':
        cssClass = 'f-subheadline fw7 tracked-3 lh-heading ma0 pa0';
        break;

      case 'h2':
        cssClass = 'f2 fw6 tracked-2 tracked-3 lh-title ma0 pa0';
        break;

      case 'h3':
        cssClass = 'f5 fw6 tracked-2 lh-title ma0 pa0';
        break;

      case 'h4':
        cssClass = 'f7 fw6 tracked-2 lh-copy ma0 pa0';
        break;

      case 'h5':
        cssClass = 'f8 fw6 tracked-2 lh-copy ma0 pa0';
        break;

      case 'h6':
        cssClass = 'f-small ttu fw4 tracked-3 lh-copy ma0 pa0';
        break;

      case 'tl':
        cssClass = 'f6 fw3 lh-copy tracked-1 ma0 pa0';
        break;

      case 't':
        cssClass = 'f7 fw3 lh-copy tracked-1 ma0 pa0';
        break;

      case 'ts':
        cssClass = 'f8 fw3 lh-copy tracked-2 ma0 pa0';
        break;

      case 'txs':
        cssClass = 'f-small fw3 lh-copy tracked-3 ma0 pa0';
        break;
    }

    return cssClass;
  }

  var _default = Ember.Helper.helper(uiText);

  _exports.default = _default;
});
;define("ghost-admin/helpers/underscore", ["exports", "ember-cli-string-helpers/helpers/underscore"], function (_exports, _underscore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _underscore.default;
    }
  });
  Object.defineProperty(_exports, "underscore", {
    enumerable: true,
    get: function () {
      return _underscore.underscore;
    }
  });
});
;define("ghost-admin/helpers/unix", ["exports", "ember-moment/helpers/unix"], function (_exports, _unix) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _unix.default;
    }
  });
});
;define("ghost-admin/helpers/uppercase", ["exports", "ember-cli-string-helpers/helpers/uppercase"], function (_exports, _uppercase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _uppercase.default;
    }
  });
  Object.defineProperty(_exports, "uppercase", {
    enumerable: true,
    get: function () {
      return _uppercase.uppercase;
    }
  });
});
;define("ghost-admin/helpers/user-agent", ["exports", "ember-useragent/helpers/user-agent"], function (_exports, _userAgent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _userAgent.default;
    }
  });
});
;define("ghost-admin/helpers/utc", ["exports", "ember-moment/helpers/utc"], function (_exports, _utc) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _utc.default;
    }
  });
  Object.defineProperty(_exports, "utc", {
    enumerable: true,
    get: function () {
      return _utc.utc;
    }
  });
});
;define("ghost-admin/helpers/w", ["exports", "ember-cli-string-helpers/helpers/w"], function (_exports, _w) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _w.default;
    }
  });
  Object.defineProperty(_exports, "w", {
    enumerable: true,
    get: function () {
      return _w.w;
    }
  });
});
;define("ghost-admin/helpers/xor", ["exports", "ember-truth-helpers/helpers/xor"], function (_exports, _xor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _xor.default;
    }
  });
  Object.defineProperty(_exports, "xor", {
    enumerable: true,
    get: function () {
      return _xor.xor;
    }
  });
});
;define("ghost-admin/initializers/app-version", ["exports", "ember-cli-app-version/initializer-factory", "ghost-admin/config/environment"], function (_exports, _initializerFactory, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  let name, version;

  if (_environment.default.APP) {
    name = _environment.default.APP.name;
    version = _environment.default.APP.version;
  }

  var _default = {
    name: 'App Version',
    initialize: (0, _initializerFactory.default)(name, version)
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/container-debug-adapter", ["exports", "ember-resolver/resolvers/classic/container-debug-adapter"], function (_exports, _containerDebugAdapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    name: 'container-debug-adapter',

    initialize() {
      let app = arguments[1] || arguments[0];
      app.register('container-debug-adapter:main', _containerDebugAdapter.default);
    }

  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/coordinator-setup", ["exports", "ghost-admin/models/coordinator"], function (_exports, _coordinator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    name: "setup coordinator",
    initialize: function () {
      let app = arguments[1] || arguments[0];
      app.register("drag:coordinator", _coordinator.default);
      app.inject("component", "coordinator", "drag:coordinator");
    }
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/debug", ["exports", "@html-next/vertical-collection/-debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    name: 'vertical-collection-debug',

    initialize() {}

  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/ember-cli-mirage", ["exports", "ghost-admin/config/environment", "ember-cli-mirage/get-rfc232-test-context", "ember-cli-mirage/start-mirage", "ghost-admin/mirage/config"], function (_exports, _environment, _getRfc232TestContext, _startMirage, config) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.startMirage = startMirage;
  const {
    default: baseConfig,
    testConfig,
    makeServer
  } = config; //
  // This initializer does two things:
  //
  // 1. Pulls the mirage config objects from the application's config and
  //    registers them in the container so `ember-cli-mirage/start-mirage` can
  //    find them (since it doesn't have access to the app's namespace).
  // 2. Provides legacy support for auto-starting mirage in pre-rfc268 acceptance
  //    tests.
  //

  var _default = {
    name: 'ember-cli-mirage',

    initialize(application) {
      if (baseConfig) {
        application.register('mirage:base-config', baseConfig, {
          instantiate: false
        });
      }

      if (testConfig) {
        application.register('mirage:test-config', testConfig, {
          instantiate: false
        });
      }

      if (makeServer) {
        application.register('mirage:make-server', makeServer, {
          instantiate: false
        });
      }

      _environment.default['ember-cli-mirage'] = _environment.default['ember-cli-mirage'] || {};

      if (_shouldUseMirage(_environment.default.environment, _environment.default['ember-cli-mirage'])) {
        startMirage(_environment.default);
      }
    }

  };
  _exports.default = _default;

  function startMirage() {
    let env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _environment.default;
    return (0, _startMirage.default)(null, {
      env,
      baseConfig,
      testConfig,
      makeServer
    });
  }

  function _shouldUseMirage(env, addonConfig) {
    if (typeof FastBoot !== 'undefined') {
      return false;
    }

    if ((0, _getRfc232TestContext.default)()) {
      return false;
    }

    let userDeclaredEnabled = typeof addonConfig.enabled !== 'undefined';

    let defaultEnabled = _defaultEnabled(env, addonConfig);

    return userDeclaredEnabled ? addonConfig.enabled : defaultEnabled;
  }
  /*
    Returns a boolean specifying the default behavior for whether
    to initialize Mirage.
  */


  function _defaultEnabled(env, addonConfig) {
    let usingInDev = env === 'development' && !addonConfig.usingProxy;
    let usingInTest = env === 'test';
    return usingInDev || usingInTest;
  }
});
;define("ghost-admin/initializers/ember-concurrency", ["exports", "ember-concurrency/initializers/ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberConcurrency.default;
    }
  });
});
;define("ghost-admin/initializers/ember-data-data-adapter", ["exports", "@ember-data/debug/setup"], function (_exports, _setup) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _setup.default;
    }
  });
});
;define("ghost-admin/initializers/ember-data", ["exports", "ember-data", "ember-data/setup-container"], function (_exports, _emberData, _setupContainer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /*
    This code initializes EmberData in an Ember application.
  
    It ensures that the `store` service is automatically injected
    as the `store` property on all routes and controllers.
  */
  var _default = {
    name: 'ember-data',
    initialize: _setupContainer.default
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/ember-simple-auth", ["exports", "ember-simple-auth/configuration", "ghost-admin/config/environment", "ghost-admin/utils/ghost-paths", "ember-simple-auth/initializers/setup-session"], function (_exports, _configuration, _environment, _ghostPaths, _setupSession) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    name: 'ember-simple-auth',

    initialize(registry) {
      let config = _environment.default['ember-simple-auth'] || {};
      config.rootURL = (0, _ghostPaths.default)().adminRoot;

      _configuration.default.load(config);

      (0, _setupSession.default)(registry);
    }

  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/export-application-global", ["exports", "ghost-admin/config/environment"], function (_exports, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];

    if (_environment.default.exportApplicationGlobal !== false) {
      var theGlobal;

      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _environment.default.exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = Ember.String.classify(_environment.default.modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;
        application.reopen({
          willDestroy: function () {
            this._super.apply(this, arguments);

            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  var _default = {
    name: 'export-application-global',
    initialize: initialize
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/hide-loading-screen", ["exports", "ghost-admin/instance-initializers/hide-loading-screen"], function (_exports, _hideLoadingScreen) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.initialize = initialize;
  const EMBER_VERSION_REGEX = /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:(?:-(alpha|beta)\.([0-9]+)(?:\.([0-9]+))?)?)?(?:\+(canary))?(?:\.([0-9abcdef]+))?(?:-([A-Za-z0-9.-]+))?(?:\+([A-Za-z0-9.-]+))?$/;
  /**
   * VERSION_INFO[i] is as follows:
   *
   * 0  complete version string
   * 1  major version
   * 2  minor version
   * 3  trivial version
   * 4  pre-release type (optional: "alpha" or "beta" or undefined for stable releases)
   * 5  pre-release version (optional)
   * 6  pre-release sub-version (optional)
   * 7  canary (optional: "canary", or undefined for stable releases)
   * 8  SHA (optional)
   *
   * @private
   */

  const VERSION_INFO = EMBER_VERSION_REGEX.exec(Ember.VERSION);
  const isPre111 = parseInt(VERSION_INFO[1], 10) < 2 && parseInt(VERSION_INFO[2], 10) < 12;

  function initialize() {
    if (isPre111) {
      let [registry, application] = arguments;

      _hideLoadingScreen.default.initialize(registry, application);
    }
  }

  var _default = {
    name: 'hide-loading-screen',
    initialize
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/liquid-fire", ["exports", "liquid-fire/velocity-ext"], function (_exports, _velocityExt) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    name: 'liquid-fire',
    initialize: function () {}
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/trailing-hash", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  let trailingHash = Ember.HashLocation.extend({
    formatURL() {
      let url = this._super(...arguments);

      if (url.indexOf('?') > 0) {
        return url.replace(/([^/])\?/, '$1/?');
      } else {
        return url.replace(/\/?$/, '/');
      }
    }

  });
  var _default = {
    name: 'registerTrailingHashLocation',

    initialize(application) {
      application.register('location:trailing-hash', trailingHash);
    }

  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/upgrade-status", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.initialize = initialize;

  function initialize(application) {
    application.inject('route', 'upgradeStatus', 'service:upgrade-status');
  }

  var _default = {
    name: 'upgrade-status',
    initialize
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/usable-function-manager", ["exports", "ember-could-get-used-to-this/initializers/usable-function-manager"], function (_exports, _usableFunctionManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _usableFunctionManager.default;
    }
  });
  Object.defineProperty(_exports, "initialize", {
    enumerable: true,
    get: function () {
      return _usableFunctionManager.initialize;
    }
  });
});
;define("ghost-admin/initializers/viewport-config", ["exports", "ember-in-viewport/initializers/viewport-config"], function (_exports, _viewportConfig) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _viewportConfig.default;
    }
  });
  Object.defineProperty(_exports, "initialize", {
    enumerable: true,
    get: function () {
      return _viewportConfig.initialize;
    }
  });
});
;define("ghost-admin/instance-initializers/ella-sparse-array", ["exports", "ember-ella-sparse/instance-initializers/ella-sparse-array"], function (_exports, _ellaSparseArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _ellaSparseArray.default;
    }
  });
  Object.defineProperty(_exports, "initialize", {
    enumerable: true,
    get: function () {
      return _ellaSparseArray.initialize;
    }
  });
});
;define("ghost-admin/instance-initializers/ember-cli-mirage-autostart", ["exports", "ember-cli-mirage/instance-initializers/ember-cli-mirage-autostart"], function (_exports, _emberCliMirageAutostart) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberCliMirageAutostart.default;
    }
  });
});
;define("ghost-admin/instance-initializers/ember-data", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* exists only for things that historically used "after" or "before" */
  var _default = {
    name: 'ember-data',

    initialize() {}

  };
  _exports.default = _default;
});
;define("ghost-admin/instance-initializers/ember-simple-auth", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // This is only needed for backwards compatibility and will be removed in the
  // next major release of ember-simple-auth. Unfortunately, there is no way to
  // deprecate this without hooking into Ember's internals…
  var _default = {
    name: 'ember-simple-auth',

    initialize() {}

  };
  _exports.default = _default;
});
;define("ghost-admin/instance-initializers/hide-loading-screen", ["exports", "ghost-admin/config/environment"], function (_exports, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.initialize = initialize;
  const userConfig = _environment.default['ember-load'] || {};

  function initialize() {
    let instance = arguments[1] || arguments[0];
    let container = arguments[1] ? arguments[0] : instance.container;

    if (Ember.View) {
      let ApplicationView = container.lookupFactory ? container.lookupFactory('view:application') : instance.resolveRegistration('view:application');
      ApplicationView.reopen({
        didInsertElement() {
          this._super(...arguments);

          let loadingIndicatorClass = userConfig.loadingIndicatorClass || 'ember-load-indicator';
          document.querySelectorAll(`.${loadingIndicatorClass}`).forEach(e => e.remove());
        }

      });
    }
  }

  var _default = {
    name: 'hide-loading-screen-instance',
    initialize
  };
  _exports.default = _default;
});
;define("ghost-admin/instance-initializers/sentry-performance", ["exports", "@sentry/ember/instance-initializers/sentry-performance"], function (_exports, _sentryPerformance) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _sentryPerformance.default;
    }
  });
  Object.defineProperty(_exports, "initialize", {
    enumerable: true,
    get: function () {
      return _sentryPerformance.initialize;
    }
  });
});
;define("ghost-admin/instance-initializers/user-agent", ["exports", "ember-useragent/instance-initializers/user-agent"], function (_exports, _userAgent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _userAgent.default;
    }
  });
  Object.defineProperty(_exports, "initialize", {
    enumerable: true,
    get: function () {
      return _userAgent.initialize;
    }
  });
});
;define("ghost-admin/koenig-editor/tests/addon.lint-test", [], function () {
  "use strict";

  describe('ESLint | addon', function () {
    it('addon/components/kg-action-bar.js', function () {// test passed
    });
    it('addon/components/koenig-alt-input.js', function () {// test passed
    });
    it('addon/components/koenig-basic-html-input.js', function () {// test passed
    });
    it('addon/components/koenig-basic-html-textarea.js', function () {// test passed
    });
    it('addon/components/koenig-caption-input.js', function () {// test passed
    });
    it('addon/components/koenig-card-audio.js', function () {// test passed
    });
    it('addon/components/koenig-card-before-after.js', function () {// test passed
    });
    it('addon/components/koenig-card-bookmark.js', function () {// test passed
    });
    it('addon/components/koenig-card-button.js', function () {// test passed
    });
    it('addon/components/koenig-card-callout.js', function () {// test passed
    });
    it('addon/components/koenig-card-code.js', function () {// test passed
    });
    it('addon/components/koenig-card-email-cta.js', function () {// test passed
    });
    it('addon/components/koenig-card-email.js', function () {// test passed
    });
    it('addon/components/koenig-card-embed.js', function () {// test passed
    });
    it('addon/components/koenig-card-embed/nft.js', function () {// test passed
    });
    it('addon/components/koenig-card-file.js', function () {// test passed
    });
    it('addon/components/koenig-card-gallery.js', function () {// test passed
    });
    it('addon/components/koenig-card-header.js', function () {// test passed
    });
    it('addon/components/koenig-card-hr.js', function () {// test passed
    });
    it('addon/components/koenig-card-html.js', function () {// test passed
    });
    it('addon/components/koenig-card-image.js', function () {// test passed
    });
    it('addon/components/koenig-card-image/selector-tenor.js', function () {// test passed
    });
    it('addon/components/koenig-card-image/selector-tenor/gif.js', function () {// test passed
    });
    it('addon/components/koenig-card-markdown.js', function () {// test passed
    });
    it('addon/components/koenig-card-paywall.js', function () {// test passed
    });
    it('addon/components/koenig-card-product.js', function () {// test passed
    });
    it('addon/components/koenig-card-toggle.js', function () {// test passed
    });
    it('addon/components/koenig-card-video.js', function () {// test passed
    });
    it('addon/components/koenig-card.js', function () {// test passed
    });
    it('addon/components/koenig-editor.js', function () {// test passed
    });
    it('addon/components/koenig-link-input.js', function () {// test passed
    });
    it('addon/components/koenig-link-toolbar.js', function () {// test passed
    });
    it('addon/components/koenig-media-selector.js', function () {// test passed
    });
    it('addon/components/koenig-menu-content.js', function () {// test passed
    });
    it('addon/components/koenig-plus-menu.js', function () {// test passed
    });
    it('addon/components/koenig-settings-panel.js', function () {// test passed
    });
    it('addon/components/koenig-slash-menu.js', function () {// test passed
    });
    it('addon/components/koenig-snippet-input.js', function () {// test passed
    });
    it('addon/components/koenig-text-replacement-html-input.js', function () {// test passed
    });
    it('addon/components/koenig-toolbar.js', function () {// test passed
    });
    it('addon/helpers/card-is-available.js', function () {// test passed
    });
    it('addon/helpers/clean-basic-html.js', function () {// test passed
    });
    it('addon/helpers/kg-style.js', function () {// test passed
    });
    it('addon/helpers/sanitize-html.js', function () {// test passed
    });
    it('addon/lib/clean-text-replacement-html.js', function () {// test passed
    });
    it('addon/lib/dnd/constants.js', function () {// test passed
    });
    it('addon/lib/dnd/container.js', function () {// test passed
    });
    it('addon/lib/dnd/scroll-handler.js', function () {// test passed
    });
    it('addon/lib/dnd/utils.js', function () {// test passed
    });
    it('addon/lib/relative-to-absolute.js', function () {// test passed
    });
    it('addon/options/atoms.js', function () {// test passed
    });
    it('addon/options/basic-html-parser-plugins.js', function () {// test passed
    });
    it('addon/options/cards.js', function () {// test passed
    });
    it('addon/options/key-commands.js', function () {// test passed
    });
    it('addon/options/text-expansions.js', function () {// test passed
    });
    it('addon/services/koenig-drag-drop-handler.js', function () {// test passed
    });
    it('addon/services/koenig-ui.js', function () {// test passed
    });
    it('addon/utils/create-component-atom.js', function () {// test passed
    });
    it('addon/utils/create-component-card.js', function () {// test passed
    });
    it('addon/utils/extract-audio-metadata.js', function () {// test passed
    });
    it('addon/utils/extract-video-metadata.js', function () {// test passed
    });
    it('addon/utils/get-scroll-parent.js', function () {// test passed
    });
    it('addon/utils/insert-cards-from-files.js', function () {// test passed
    });
    it('addon/utils/localstorage.js', function () {// test passed
    });
    it('addon/utils/markup-utils.js', function () {// test passed
    });
    it('addon/utils/oembed.js', function () {// test passed
    });
    it('addon/utils/prettify-file-name.js', function () {// test passed
    });
    it('addon/utils/reading-time.js', function () {// test passed
    });
    it('addon/utils/snippet-icon.js', function () {// test passed
    });
  });
});
;define("ghost-admin/koenig-editor/tests/app.lint-test", [], function () {
  "use strict";

  describe('ESLint | app', function () {
    it('app/components/kg-action-bar.js', function () {// test passed
    });
    it('app/components/koenig-alt-input.js', function () {// test passed
    });
    it('app/components/koenig-basic-html-input.js', function () {// test passed
    });
    it('app/components/koenig-basic-html-textarea.js', function () {// test passed
    });
    it('app/components/koenig-caption-input.js', function () {// test passed
    });
    it('app/components/koenig-card-audio.js', function () {// test passed
    });
    it('app/components/koenig-card-before-after.js', function () {// test passed
    });
    it('app/components/koenig-card-bookmark.js', function () {// test passed
    });
    it('app/components/koenig-card-button.js', function () {// test passed
    });
    it('app/components/koenig-card-callout.js', function () {// test passed
    });
    it('app/components/koenig-card-code.js', function () {// test passed
    });
    it('app/components/koenig-card-email-cta.js', function () {// test passed
    });
    it('app/components/koenig-card-email.js', function () {// test passed
    });
    it('app/components/koenig-card-embed.js', function () {// test passed
    });
    it('app/components/koenig-card-embed/nft.js', function () {// test passed
    });
    it('app/components/koenig-card-file.js', function () {// test passed
    });
    it('app/components/koenig-card-gallery.js', function () {// test passed
    });
    it('app/components/koenig-card-header.js', function () {// test passed
    });
    it('app/components/koenig-card-hr.js', function () {// test passed
    });
    it('app/components/koenig-card-html.js', function () {// test passed
    });
    it('app/components/koenig-card-image.js', function () {// test passed
    });
    it('app/components/koenig-card-image/selector-tenor.js', function () {// test passed
    });
    it('app/components/koenig-card-image/selector-tenor/gif.js', function () {// test passed
    });
    it('app/components/koenig-card-markdown.js', function () {// test passed
    });
    it('app/components/koenig-card-paywall.js', function () {// test passed
    });
    it('app/components/koenig-card-product.js', function () {// test passed
    });
    it('app/components/koenig-card-toggle.js', function () {// test passed
    });
    it('app/components/koenig-card-video.js', function () {// test passed
    });
    it('app/components/koenig-card.js', function () {// test passed
    });
    it('app/components/koenig-editor.js', function () {// test passed
    });
    it('app/components/koenig-link-input.js', function () {// test passed
    });
    it('app/components/koenig-link-toolbar.js', function () {// test passed
    });
    it('app/components/koenig-media-selector.js', function () {// test passed
    });
    it('app/components/koenig-menu-content.js', function () {// test passed
    });
    it('app/components/koenig-plus-menu.js', function () {// test passed
    });
    it('app/components/koenig-settings-panel.js', function () {// test passed
    });
    it('app/components/koenig-slash-menu.js', function () {// test passed
    });
    it('app/components/koenig-snippet-input.js', function () {// test passed
    });
    it('app/components/koenig-text-replacement-html-input.js', function () {// test passed
    });
    it('app/components/koenig-toolbar.js', function () {// test passed
    });
    it('app/helpers/card-is-available.js', function () {// test passed
    });
    it('app/helpers/clean-basic-html.js', function () {// test passed
    });
    it('app/helpers/kg-style.js', function () {// test passed
    });
    it('app/helpers/sanitize-html.js', function () {// test passed
    });
    it('app/services/koenig-drag-drop-handler.js', function () {// test passed
    });
    it('app/services/koenig-ui.js', function () {// test passed
    });
  });
});
;define("ghost-admin/mirage/config", ["exports", "ghost-admin/utils/ghost-paths", "ghost-admin/mirage/config/api-keys", "ghost-admin/mirage/config/authentication", "ghost-admin/mirage/config/config", "ghost-admin/mirage/config/custom-theme-settings", "ghost-admin/mirage/config/emails", "ghost-admin/mirage/config/integrations", "ghost-admin/mirage/config/invites", "ghost-admin/mirage/config/labels", "ghost-admin/mirage/config/members", "ghost-admin/mirage/config/offers", "ghost-admin/mirage/config/pages", "ghost-admin/mirage/config/posts", "ghost-admin/mirage/config/products", "ghost-admin/mirage/config/roles", "ghost-admin/mirage/config/settings", "ghost-admin/mirage/config/site", "ghost-admin/mirage/config/slugs", "ghost-admin/mirage/config/snippets", "ghost-admin/mirage/config/tags", "ghost-admin/mirage/config/themes", "ghost-admin/mirage/config/uploads", "ghost-admin/mirage/config/users", "ghost-admin/mirage/config/webhooks"], function (_exports, _ghostPaths, _apiKeys, _authentication, _config, _customThemeSettings, _emails, _integrations, _invites, _labels, _members, _offers, _pages, _posts, _products, _roles, _settings, _site, _slugs, _snippets, _tags, _themes, _uploads, _users, _webhooks) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;
  _exports.testConfig = testConfig;

  // import {versionMismatchResponse} from 'utils';
  function _default() {
    // allow any local requests outside of the namespace (configured below) to hit the real server
    // _must_ be called before the namespace property is set
    this.passthrough('/ghost/assets/**');
    this.namespace = (0, _ghostPaths.default)().apiRoot;
    this.timing = 1000; // delay for each request, automatically set to 0 during testing

    this.logging = true; // Mock endpoints here to override real API requests during development, eg...
    // this.put('/posts/:id/', versionMismatchResponse);
    // mockTags(this);
    // this.loadFixtures('settings');

    (0, _snippets.default)(this); // keep this line, it allows all other API requests to hit the real server

    this.passthrough(); // add any external domains to make sure those get passed through too

    this.passthrough('http://www.gravatar.com/**');
    this.passthrough('https://cdn.jsdelivr.net/**');
    this.passthrough('https://api.unsplash.com/**');
    this.passthrough('https://ghost.org/**');
  } // Mock all endpoints here as there is no real API during testing


  function testConfig() {
    this.namespace = (0, _ghostPaths.default)().apiRoot; // this.timing = 400;      // delay for each request, automatically set to 0 during testing

    this.logging = false;
    (0, _apiKeys.default)(this);
    (0, _authentication.default)(this);
    (0, _config.default)(this);
    (0, _customThemeSettings.default)(this);
    (0, _emails.default)(this);
    (0, _integrations.default)(this);
    (0, _invites.default)(this);
    (0, _members.default)(this);
    (0, _labels.default)(this);
    (0, _pages.default)(this);
    (0, _posts.default)(this);
    (0, _roles.default)(this);
    (0, _settings.default)(this);
    (0, _site.default)(this);
    (0, _slugs.default)(this);
    (0, _tags.default)(this);
    (0, _themes.default)(this);
    (0, _uploads.default)(this);
    (0, _users.default)(this);
    (0, _webhooks.default)(this);
    (0, _products.default)(this);
    (0, _offers.default)(this);
    /* Notifications -------------------------------------------------------- */

    this.get('/notifications/');
    /* Integrations - Slack Test Notification ------------------------------- */

    this.post('/slack/test', function () {
      return {};
    });
    /* External sites ------------------------------------------------------- */

    this.head('http://www.gravatar.com/avatar/:md5', function () {
      return '';
    }, 200);
    this.get('http://www.gravatar.com/avatar/:md5', function () {
      return '';
    }, 200);
    this.get('https://ghost.org/changelog.json', function () {
      return {
        changelog: [{
          title: 'Custom image alt tags',
          custom_excerpt: null,
          html: '<p>We just shipped custom image alt tag support in the Ghost editor. This is one of our most requested features - and great news for accessibility and search engine optimisation for your Ghost publication.</p><p>Previously, you\'d need to use a Markdown card to add an image alt tag. Now you can create alt tags on the go directly from the editor, without the need to add any additional cards or custom tags.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://ghost.org/changelog/content/images/2019/08/image-alt-tag.gif" class="kg-image"></figure><!--kg-card-end: image--><p>To write your alt tag, hit the <code>alt</code> button on the right in the caption line, type your alt text and then hit the button again to return to the caption text. </p><p><em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><a href="https://ghost.org/pricing/">Ghost(Pro)</a></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> users already have access to custom image alt tags. Self hosted developers can use <a href="https://ghost.org/docs/ghost-cli/">Ghost-CLI</a> to install the latest release!</em></p>',
          slug: 'image-alt-text-support',
          published_at: '2019-08-05T07:46:16.000+00:00',
          url: 'https://ghost.org/changelog/image-alt-text-support/'
        }],
        changelogMajor: [],
        changelogUrl: 'https://ghost.org/changelog/'
      };
    });
  }
});
;define("ghost-admin/mirage/config/api-keys", ["exports", "ghost-admin/mirage/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockApiKeys;

  function mockApiKeys(server) {
    server.get('/api-keys/', (0, _utils.paginatedResponse)('api-keys'));
    server.post('/api-keys/');
    server.put('/api-keys/:id/');
    server.del('/api-keys/:id/');
  }
});
;define("ghost-admin/mirage/config/authentication", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockAuthentication;

  /* eslint-disable camelcase */
  function mockAuthentication(server) {
    server.post('/session', function () {
      // Password sign-in
      return new _emberCliMirage.Response(201);
    });
    server.post('/authentication/passwordreset', function (schema, request) {
      let {
        passwordreset
      } = JSON.parse(request.requestBody);
      let email = passwordreset[0].email;

      if (email === 'unknown@example.com') {
        return new _emberCliMirage.Response(404, {}, {
          errors: [{
            message: 'There is no user with that email address.',
            type: 'NotFoundError'
          }]
        });
      } else {
        return {
          passwordreset: [{
            message: 'Check your email for further instructions.'
          }]
        };
      }
    });
    server.get('/authentication/invitation/', function (schema, request) {
      let {
        email
      } = request.queryParams;
      let invite = schema.invites.findBy({
        email
      });
      let valid = !!invite;
      return {
        invitation: [{
          valid
        }]
      };
    });
    /* Setup ---------------------------------------------------------------- */

    server.post('/authentication/setup', function (_ref, request) {
      let {
        roles,
        users
      } = _ref;
      let attrs = JSON.parse(request.requestBody).setup;
      let role = roles.findBy({
        name: 'Owner'
      }); // create owner role unless already exists

      if (!role) {
        role = roles.create({
          name: 'Owner'
        });
      }

      attrs.roles = [role];

      if (!Ember.isBlank(attrs.email)) {
        attrs.slug = Ember.String.dasherize(attrs.email.split('@')[0]);
      } // NOTE: server does not use the user factory to fill in blank fields


      return users.create(attrs);
    });
    server.get('/authentication/setup/', function () {
      return {
        setup: [{
          status: true
        }]
      };
    });
  }
});
;define("ghost-admin/mirage/config/config", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockConfig;

  function mockConfig(server) {
    server.get('/config/', function (_ref) {
      let {
        db
      } = _ref;

      if (Ember.isEmpty(db.configs)) {
        server.loadFixtures('configs');
      }

      return {
        config: db.configs.find(1)
      };
    });
  }
});
;define("ghost-admin/mirage/config/custom-theme-settings", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockCustomThemeSettings;

  function mockCustomThemeSettings(server) {
    server.get('/custom_theme_settings');
  }
});
;define("ghost-admin/mirage/config/emails", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockEmails;

  function
    /* server */
  mockEmails() {// emails are currently only returned as an embedded record in post models
  }
});
;define("ghost-admin/mirage/config/integrations", ["exports", "moment", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _moment, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockIntegrations;

  function mockIntegrations(server) {
    server.get('/integrations/', (0, _utils.paginatedResponse)('integrations'));
    server.post('/integrations/', function (_ref, _ref2) {
      let {
        integrations
      } = _ref;
      let {
        requestBody
      } = _ref2;
      let body = JSON.parse(requestBody);
      let [params] = body.integrations; // all integrations created via the API have a type of 'custom'

      params.type = 'custom';

      if (!params.name) {
        return new _emberCliMirage.Response(422, {}, {
          errors: [{
            type: 'ValidationError',
            message: 'Name is required',
            property: 'name'
          }]
        });
      }

      if (integrations.findBy({
        name: params.name
      }) || params.name.match(/Duplicate/i)) {
        return new _emberCliMirage.Response(422, {}, {
          errors: [{
            type: 'ValidationError',
            message: 'Name has already been used',
            property: 'name'
          }]
        });
      } // allow factory to create defaults


      if (!params.slug) {
        delete params.slug;
      } // use factory creation to auto-create api keys


      return server.create('integration', params);
    });
    server.put('/integrations/:id/', function (schema, _ref3) {
      let {
        params
      } = _ref3;
      let {
        integrations,
        apiKeys,
        webhooks
      } = schema;
      let attrs = this.normalizedRequestAttrs();
      let integration = integrations.find(params.id);
      let _apiKeys = [];
      let _webhooks = []; // this is required to work around an issue with ember-cli-mirage and
      // embedded records. The `attrs` object will contain POJOs of the
      // embedded apiKeys and webhooks but mirage expects schema model
      // objects for relations so we need to fetch model records and replace
      // the relationship keys

      attrs.apiKeys.forEach(apiKey => {
        _apiKeys.push(apiKeys.find(apiKey.id));
      });
      attrs.webhooks.forEach(webhook => {
        _webhooks.push(webhooks.find(webhook.id));
      });
      attrs.apiKeys = _apiKeys;
      attrs.webhooks = _webhooks;
      attrs.updatedAt = _moment.default.utc().format();
      return integration.update(attrs);
    });
    server.del('/integrations/:id/');
  }
});
;define("ghost-admin/mirage/config/invites", ["exports", "moment", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _moment, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockInvites;

  function mockInvites(server) {
    server.get('/invites/', (0, _utils.paginatedResponse)('invites'));
    server.get('/invites/:id', function (schema, request) {
      let {
        id
      } = request.params;
      let invite = schema.invites.find(id);
      return invite || new _emberCliMirage.Response(404, {}, {
        errors: [{
          type: 'NotFoundError',
          message: 'Invite not found.'
        }]
      });
    });
    server.post('/invites/', function (_ref) {
      let {
        invites
      } = _ref;
      let attrs = this.normalizedRequestAttrs();
      let oldInvite = invites.findBy({
        email: attrs.email
      });

      if (oldInvite) {
        oldInvite.destroy();
      }
      /* eslint-disable camelcase */


      attrs.token = `${invites.all().models.length}-token`;
      attrs.expires = _moment.default.utc().add(1, 'day').valueOf();
      attrs.createdAt = _moment.default.utc().format();
      attrs.createdBy = 1;
      attrs.updatedAt = _moment.default.utc().format();
      attrs.updatedBy = 1;
      attrs.status = 'sent';
      /* eslint-enable camelcase */

      return invites.create(attrs);
    });
    server.del('/invites/:id/');
  }
});
;define("ghost-admin/mirage/config/labels", ["exports", "ghost-admin/mirage/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockLabels;

  function mockLabels(server) {
    server.post('/labels/', function (_ref) {
      let {
        labels
      } = _ref;
      let attrs = this.normalizedRequestAttrs();
      return labels.create(Object.assign({}, attrs, {
        id: 99
      }));
    });
    server.get('/labels/', (0, _utils.paginatedResponse)('labels'));
    server.get('/labels/:id/', function (_ref2, _ref3) {
      let {
        labels
      } = _ref2;
      let {
        params
      } = _ref3;
      let {
        id
      } = params;
      let label = labels.find(id);
      return label || new Response(404, {}, {
        errors: [{
          type: 'NotFoundError',
          message: 'Label not found.'
        }]
      });
    });
    server.put('/labels/:id/');
    server.del('/labels/:id/');
  }
});
;define("ghost-admin/mirage/config/members", ["exports", "faker", "moment", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _faker, _moment, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockMembers;
  _exports.mockMembersStats = mockMembersStats;

  function mockMembersStats(server) {
    server.get('/members/stats/count', function (db, _ref) {
      let {
        queryParams
      } = _ref;
      let {
        days
      } = queryParams;

      let firstSubscriberDays = _faker.default.datatype.number({
        min: 30,
        max: 600
      });

      if (days === 'all-time') {
        days = firstSubscriberDays;
      } else {
        days = Number(days);
      }

      let total = 0;

      if (firstSubscriberDays > days) {
        total += _faker.default.datatype.number({
          max: 1000
        });
      } // simulate sql GROUP BY where days with 0 subscribers are missing


      let dateCounts = {};
      let i = 0;

      while (i < days) {
        let date = (0, _moment.default)().subtract(i, 'days').format('YYYY-MM-DD');

        let count = _faker.default.datatype.number({
          min: 0,
          max: 30
        });

        if (count !== 0) {
          dateCounts[date] = count;
        }

        i += 1;
      } // similar to what we'll need to do on the server


      let totalOnDate = {};
      let j = days - 1;

      while (j >= 0) {
        let date = (0, _moment.default)().subtract(j, 'days').format('YYYY-MM-DD');
        totalOnDate[date] = total + (dateCounts[date] || 0);
        total += dateCounts[date] || 0;
        j -= 1;
      }

      return {
        total,
        resource: 'members',
        data: Object.keys(totalOnDate).map((key, idx, arr) => {
          return {
            date: key,
            free: arr[key],
            paid: 0,
            comped: 0
          };
        })
      };
    });
  }

  function mockMembers(server) {
    server.post('/members/', function (_ref2) {
      let {
        members
      } = _ref2;
      let attrs = this.normalizedRequestAttrs();
      return members.create(Object.assign({}, attrs, {
        id: 99
      }));
    });
    server.get('/members/', function (_ref3, _ref4) {
      let {
        members
      } = _ref3;
      let {
        queryParams
      } = _ref4;
      let {
        filter,
        page,
        limit
      } = queryParams;
      page = +page || 1;
      limit = +limit || 15;
      let labelFilter = (0, _utils.extractFilterParam)('label', filter);
      let collection = members.all().filter(member => {
        let matchesLabel = true;

        if (!Ember.isEmpty(labelFilter)) {
          matchesLabel = false;
          labelFilter.forEach(slug => {
            if (member.labels.models.find(l => l.slug === slug)) {
              matchesLabel = true;
            }
          });
        }

        return matchesLabel;
      });
      return (0, _utils.paginateModelCollection)('members', collection, page, limit);
    });
    server.del('/members/', function (_ref5, _ref6) {
      let {
        members
      } = _ref5;
      let {
        queryParams
      } = _ref6;

      if (!queryParams.filter && !queryParams.search && queryParams.all !== 'true') {
        return new _emberCliMirage.Response(422, {}, {
          errors: [{
            type: 'IncorrectUsageError',
            message: 'DELETE /members/ must be used with a filter, search, or all=true query parameter'
          }]
        });
      }

      let membersToDelete = members.all();

      if (queryParams.filter) {
        let labelFilter = (0, _utils.extractFilterParam)('label', queryParams.filter);
        membersToDelete = membersToDelete.filter(member => {
          let matches = false;
          labelFilter.forEach(slug => {
            if (member.labels.models.find(l => l.slug === slug)) {
              matches = true;
            }
          });
          return matches;
        });
      }

      let count = membersToDelete.length;
      membersToDelete.destroy();
      return {
        meta: {
          stats: {
            successful: count
          }
        }
      };
    });
    server.get('/members/:id/', function (_ref7, _ref8) {
      let {
        members
      } = _ref7;
      let {
        params
      } = _ref8;
      let {
        id
      } = params;
      let member = members.find(id);
      return member || new _emberCliMirage.Response(404, {}, {
        errors: [{
          type: 'NotFoundError',
          message: 'Member not found.'
        }]
      });
    });
    server.put('/members/:id/');
    server.del('/members/:id/');
    server.get('/members/upload/', function () {
      return new _emberCliMirage.Response(200, {
        'Content-Disposition': 'attachment',
        filename: `members.${(0, _moment.default)().format('YYYY-MM-DD')}.csv`,
        'Content-Type': 'text/csv'
      }, '');
    });
    server.get('/members/events/', function (_ref9, _ref10) {
      let {
        memberActivityEvents
      } = _ref9;
      let {
        queryParams
      } = _ref10;
      let {
        limit
      } = queryParams;
      limit = +limit || 15;
      let collection = memberActivityEvents.all().sort((a, b) => {
        return new Date(a.createdAt) - new Date(b.createdAt);
      }).slice(0, limit);
      return collection;
    });
    mockMembersStats(server);
  }
});
;define("ghost-admin/mirage/config/offers", ["exports", "ghost-admin/mirage/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockOffers;

  function mockOffers(server) {
    server.post('/offers/', function (_ref) {
      let {
        offers
      } = _ref;
      let attrs = this.normalizedRequestAttrs();
      return offers.create(Object.assign({}, attrs, {
        id: 99
      }));
    });
    server.get('/offers/', (0, _utils.paginatedResponse)('offers'));
    server.get('/offers/:id/', function (_ref2, _ref3) {
      let {
        offers
      } = _ref2;
      let {
        params
      } = _ref3;
      let {
        id
      } = params;
      let product = offers.find(id);
      return product || new Response(404, {}, {
        errors: [{
          type: 'NotFoundError',
          message: 'Offer not found.'
        }]
      });
    });
    server.put('/offers/:id/');
  }
});
;define("ghost-admin/mirage/config/pages", ["exports", "moment", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _moment, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockPages;

  function normalizeBooleanParams(arr) {
    if (!Ember.isArray(arr)) {
      return arr;
    }

    return arr.map(i => {
      if (i === 'true') {
        return true;
      } else if (i === 'false') {
        return false;
      } else {
        return i;
      }
    });
  } // TODO: use GQL to parse filter string?


  function extractFilterParam(param, filter) {
    let filterRegex = new RegExp(`${param}:(.*?)(?:\\+|$)`);
    let match;
    let [, result] = filter.match(filterRegex) || [];

    if (result && result.startsWith('[')) {
      match = result.replace(/^\[|\]$/g, '').split(',');
    } else if (result) {
      match = [result];
    }

    return normalizeBooleanParams(match);
  } // NOTE: mirage requires Model objects when saving relationships, however the
  // `attrs` on POST/PUT requests will contain POJOs for authors and tags so we
  // need to replace them


  function extractAuthors(pageAttrs, users) {
    return pageAttrs.authors.map(author => users.find(author.id));
  }

  function extractTags(pageAttrs, tags) {
    return pageAttrs.tags.map(requestTag => {
      let tag = tags.find(requestTag.id);

      if (!tag) {
        tag = tag.create(requestTag);
      }

      return tag;
    });
  }

  function mockPages(server) {
    server.post('/pages', function (_ref) {
      let {
        pages,
        users,
        tags
      } = _ref;
      let attrs = this.normalizedRequestAttrs();
      attrs.authors = extractAuthors(attrs, users);
      attrs.tags = extractTags(attrs, tags);

      if (Ember.isBlank(attrs.slug) && !Ember.isBlank(attrs.title)) {
        attrs.slug = Ember.String.dasherize(attrs.title);
      }

      return pages.create(attrs);
    }); // TODO: handle authors filter

    server.get('/pages/', function (_ref2, _ref3) {
      let {
        pages
      } = _ref2;
      let {
        queryParams
      } = _ref3;
      let {
        filter,
        page,
        limit
      } = queryParams;
      page = +page || 1;
      limit = +limit || 15;
      let statusFilter = extractFilterParam('status', filter);
      let collection = pages.all().filter(pageModel => {
        let matchesStatus = true;

        if (!Ember.isEmpty(statusFilter)) {
          matchesStatus = statusFilter.includes(pageModel.status);
        }

        return matchesStatus;
      });
      return (0, _utils.paginateModelCollection)('pages', collection, page, limit);
    });
    server.get('/pages/:id/', function (_ref4, _ref5) {
      let {
        pages
      } = _ref4;
      let {
        params
      } = _ref5;
      let {
        id
      } = params;
      let page = pages.find(id);
      return page || new _emberCliMirage.Response(404, {}, {
        errors: [{
          type: 'NotFoundError',
          message: 'Page not found.'
        }]
      });
    });
    server.put('/pages/:id/', function (_ref6, _ref7) {
      let {
        pages,
        users,
        tags
      } = _ref6;
      let {
        params
      } = _ref7;
      let attrs = this.normalizedRequestAttrs();
      let page = pages.find(params.id);
      attrs.authors = extractAuthors(attrs, users);
      attrs.tags = extractTags(attrs, tags);
      attrs.updatedAt = _moment.default.utc().toDate();
      return page.update(attrs);
    });
    server.del('/pages/:id/');
  }
});
;define("ghost-admin/mirage/config/posts", ["exports", "moment", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _moment, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockPosts;

  // NOTE: mirage requires Model objects when saving relationships, however the
  // `attrs` on POST/PUT requests will contain POJOs for authors and tags so we
  // need to replace them
  function extractAuthors(postAttrs, users) {
    return postAttrs.authors.map(author => users.find(author.id));
  }

  function extractTags(postAttrs, tags) {
    return postAttrs.tags.map(requestTag => {
      let tag = tags.find(requestTag.id);

      if (!tag) {
        tag = tag.create(requestTag);
      }

      return tag;
    });
  }

  function mockPosts(server) {
    server.post('/posts', function (_ref) {
      let {
        posts,
        users,
        tags
      } = _ref;
      let attrs = this.normalizedRequestAttrs();
      attrs.authors = extractAuthors(attrs, users);
      attrs.tags = extractTags(attrs, tags);

      if (Ember.isBlank(attrs.slug) && !Ember.isBlank(attrs.title)) {
        attrs.slug = Ember.String.dasherize(attrs.title);
      }

      return posts.create(attrs);
    }); // TODO: handle authors filter

    server.get('/posts/', function (_ref2, _ref3) {
      let {
        posts
      } = _ref2;
      let {
        queryParams
      } = _ref3;
      let {
        filter,
        page,
        limit
      } = queryParams;
      page = +page || 1;
      limit = +limit || 15;
      let statusFilter = (0, _utils.extractFilterParam)('status', filter);
      let collection = posts.all().filter(post => {
        let matchesStatus = true;

        if (!Ember.isEmpty(statusFilter)) {
          matchesStatus = statusFilter.includes(post.status);
        }

        return matchesStatus;
      });
      return (0, _utils.paginateModelCollection)('posts', collection, page, limit);
    });
    server.get('/posts/:id/', function (_ref4, _ref5) {
      let {
        posts
      } = _ref4;
      let {
        params
      } = _ref5;
      let {
        id
      } = params;
      let post = posts.find(id);
      return post || new _emberCliMirage.Response(404, {}, {
        errors: [{
          type: 'NotFoundError',
          message: 'Post not found.'
        }]
      });
    });
    server.put('/posts/:id/', function (_ref6, _ref7) {
      let {
        posts,
        users,
        tags
      } = _ref6;
      let {
        params
      } = _ref7;
      let attrs = this.normalizedRequestAttrs();
      let post = posts.find(params.id);
      attrs.authors = extractAuthors(attrs, users);
      attrs.tags = extractTags(attrs, tags);
      attrs.updatedAt = _moment.default.utc().toDate();
      return post.update(attrs);
    });
    server.del('/posts/:id/');
  }
});
;define("ghost-admin/mirage/config/products", ["exports", "ghost-admin/mirage/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockProducts;

  function mockProducts(server) {
    server.post('/products/', function (_ref) {
      let {
        products
      } = _ref;
      let attrs = this.normalizedRequestAttrs();
      return products.create(Object.assign({}, attrs, {
        id: 99
      }));
    });
    server.get('/products/', (0, _utils.paginatedResponse)('products'));
    server.get('/products/:id/', function (_ref2, _ref3) {
      let {
        products
      } = _ref2;
      let {
        params
      } = _ref3;
      let {
        id
      } = params;
      let product = products.find(id);
      return product || new Response(404, {}, {
        errors: [{
          type: 'NotFoundError',
          message: 'Product not found.'
        }]
      });
    });
    server.put('/products/:id/');
    server.del('/products/:id/');
  }
});
;define("ghost-admin/mirage/config/roles", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockRoles;

  function mockRoles(server) {
    server.get('/roles/', function (_ref, _ref2) {
      let {
        roles
      } = _ref;
      let {
        queryParams
      } = _ref2;

      if (queryParams.permissions === 'assign') {
        return roles.find([1, 2, 3, 5]);
      }

      return roles.all();
    });
  }
});
;define("ghost-admin/mirage/config/settings", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockSettings;

  function mockSettings(server) {
    server.get('/settings/', function (_ref, _ref2) {
      let {
        db
      } = _ref;
      let {
        queryParams
      } = _ref2;
      let {
        group
      } = queryParams;
      let filters = group.split(',');
      let settings = [];

      if (!db.settings.length) {
        server.loadFixtures('settings');
      }

      filters.forEach(groupFilter => {
        settings.pushObjects(db.settings.where({
          group: groupFilter
        }));
      });
      return {
        settings,
        meta: {
          filters: {
            group
          }
        }
      };
    });
    server.put('/settings/', function (_ref3, _ref4) {
      let {
        db
      } = _ref3;
      let {
        requestBody
      } = _ref4;
      let newSettings = JSON.parse(requestBody).settings;
      newSettings.forEach(newSetting => {
        let {
          key
        } = newSetting;

        if (db.settings.where({
          key
        }).length > 0) {
          db.settings.update({
            key
          }, newSetting);
        } else {
          newSetting.group = newSetting.group || 'site';
          db.settings.insert(newSetting);
        }
      });
      return {
        meta: {},
        settings: db.settings
      };
    });
  }
});
;define("ghost-admin/mirage/config/site", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockSite;

  function mockSite(server) {
    server.get('/site/', function (_ref) {
      let {
        db
      } = _ref;

      if (Ember.isEmpty(db.sites)) {
        server.loadFixtures('sites');
      }

      return {
        site: db.sites.find(1)
      };
    });
  }
});
;define("ghost-admin/mirage/config/slugs", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockSlugs;

  function mockSlugs(server) {
    server.get('/slugs/post/:slug/', function (schema, request) {
      return {
        slugs: [{
          slug: Ember.String.dasherize(decodeURIComponent(request.params.slug))
        }]
      };
    });
    server.get('/slugs/user/:slug/', function (schema, request) {
      return {
        slugs: [{
          slug: Ember.String.dasherize(decodeURIComponent(request.params.slug))
        }]
      };
    });
  }
});
;define("ghost-admin/mirage/config/snippets", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockSnippets;

  function mockSnippets(server) {
    server.get('/snippets/');
    server.post('/snippets/');
    server.put('/snippets/:id/');
    server.del('/snippets/:id/');
  }
});
;define("ghost-admin/mirage/config/tags", ["exports", "ghost-admin/mirage/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockTags;

  function mockTags(server) {
    server.post('/tags/', function (_ref) {
      let {
        tags
      } = _ref;
      let attrs = this.normalizedRequestAttrs();

      if (Ember.isBlank(attrs.slug) && !Ember.isBlank(attrs.name)) {
        attrs.slug = Ember.String.dasherize(attrs.name);
      } // NOTE: this does not use the tag factory to fill in blank fields


      return tags.create(attrs);
    });
    server.get('/tags/', (0, _utils.paginatedResponse)('tags'));
    server.get('/tags/slug/:slug/', function (_ref2, _ref3) {
      let {
        tags
      } = _ref2;
      let {
        params: {
          slug
        }
      } = _ref3;
      // TODO: remove post_count unless requested?
      return tags.findBy({
        slug
      });
    });
    server.put('/tags/:id/');
    server.del('/tags/:id/');
  }
});
;define("ghost-admin/mirage/config/themes", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockThemes;
  let themeCount = 1;

  function mockThemes(server) {
    server.get('/themes');
    server.post('/themes/upload/', function (_ref) {
      let {
        themes
      } = _ref;
      // pretender/mirage doesn't currently process FormData so we can't use
      // any info passed in through the request
      let theme = {
        name: `test-${themeCount}`,
        package: {
          name: `Test ${themeCount}`,
          version: '0.1'
        }
      };
      themeCount += 1;
      theme = themes.create(theme);
      return {
        themes: [theme]
      };
    });
    server.del('/themes/:theme/', function (_ref2, _ref3) {
      let {
        themes
      } = _ref2;
      let {
        params
      } = _ref3;
      themes.findBy({
        name: params.theme
      }).destroy();
      return new _emberCliMirage.Response(204);
    });
    server.put('/themes/:theme/activate/', function (_ref4, _ref5) {
      let {
        themes
      } = _ref4;
      let {
        params
      } = _ref5;
      themes.all().update('active', false);
      let theme = themes.findBy({
        name: params.theme
      }).update({
        active: true
      });
      return {
        themes: [theme]
      };
    });
    server.post('/themes/install/', function (_ref6, _ref7) {
      let {
        themes
      } = _ref6;
      let {
        queryParams
      } = _ref7;
      themes.all().update('active', false);
      const themeName = queryParams.ref.replace('TryGhost/', '');
      let theme = themes.findBy({
        name: themeName
      });

      if (theme) {
        theme.update({
          active: true
        });
      } else {
        theme = themes.create({
          name: themeName,
          package: {
            name: themeName,
            version: '0.1'
          }
        });
      }

      return {
        themes: [theme]
      };
    });
  }
});
;define("ghost-admin/mirage/config/uploads", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockUploads;

  const fileUploadResponse = function (db, _ref) {
    let {
      requestBody
    } = _ref;
    // let [ref] = requestBody.getAll('ref');
    let [purpose] = requestBody.getAll('purpose');
    let [file] = requestBody.getAll('file');
    let now = new Date();
    let year = now.getFullYear();
    let month = `${now.getMonth()}`;

    if (month.length === 1) {
      month = `0${month}`;
    }

    if (['image', 'profile_image', 'icon'].includes(purpose)) {
      return {
        images: [{
          url: `/content/images/${year}/${month}/${file.name}`
        }]
      };
    }
  };

  function mockUploads(server) {
    server.post('/images/upload/', fileUploadResponse, 200, {
      timing: 100
    });
  }
});
;define("ghost-admin/mirage/config/users", ["exports", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockUsers;

  function mockUsers(server) {
    // /users/me = Always return the user with ID=1
    server.get('/users/me/', function (_ref) {
      let {
        users
      } = _ref;
      let user = users.find(1);

      if (user) {
        return user;
      } else {
        return new _emberCliMirage.Response(404, {}, {
          errors: [{
            message: 'Not found',
            type: 'NotFoundError'
          }]
        });
      }
    });
    server.get('/users/', function (_ref2, _ref3) {
      let {
        users
      } = _ref2;
      let {
        queryParams
      } = _ref3;
      let page = +queryParams.page || 1; // NOTE: this is naive and only set up to work with queries that are
      // actually used - if you use a different filter in the app, add it here!

      let collection = users.where(function (user) {
        let statusMatch = true;

        if (queryParams.filter === 'status:-inactive') {
          statusMatch = user.status !== 'inactive';
        } else if (queryParams.filter === 'status:inactive') {
          statusMatch = user.status === 'inactive';
        } else if (queryParams.status && queryParams.status !== 'all') {
          statusMatch = user.status === queryParams.status;
        }

        return statusMatch;
      });
      return (0, _utils.paginateModelCollection)('users', collection, page, queryParams.limit);
    });
    server.get('/users/slug/:slug/', function (_ref4, _ref5) {
      let {
        users
      } = _ref4;
      let {
        params,
        queryParams
      } = _ref5;
      let user = users.findBy({
        slug: params.slug
      });
      user.postCount = queryParams.include.match(/count\.posts/);
      return user;
    });
    server.get('/users/:id', function (_ref6, _ref7) {
      let {
        users
      } = _ref6;
      let {
        params,
        queryParams
      } = _ref7;
      let user = users.find(params.id);
      user.postCount = queryParams.include.match(/count\.posts/);
      return user;
    });
    server.put('/users/:id/', function (_ref8, _ref9) {
      let {
        users
      } = _ref8;
      let {
        params
      } = _ref9;
      let {
        id
      } = params;

      if (id === 'password') {
        return {
          password: [{
            message: 'Password changed successfully.'
          }]
        };
      } else {
        let attrs = this.normalizedRequestAttrs(); // TODO: why is our custom serializer causing .update to throw
        // children.update is not a function?
        // https://github.com/samselikoff/ember-cli-mirage/issues/964

        delete attrs.roles;
        return users.find(id).update(attrs);
      }
    });
    server.del('/users/:id/'); // Dummy Personal Token to pass tests

    server.get('/users/me/token', () => ({
      apiKey: {
        id: '1',
        secret: '2'
      }
    }));
  }
});
;define("ghost-admin/mirage/config/webhooks", ["exports", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockWebhooks;

  function mockWebhooks(server) {
    server.get('/webhooks/', (0, _utils.paginatedResponse)('webhooks'));
    server.post('/webhooks/', function (_ref) {
      let {
        webhooks
      } = _ref;
      let attrs = this.normalizedRequestAttrs();
      let errors = [];

      if (!attrs.name) {
        errors.push({
          type: 'ValidationError',
          message: 'Name is required',
          property: 'name'
        });
      }

      if (!attrs.event) {
        errors.push({
          type: 'ValidationError',
          message: 'Event is required',
          property: 'event'
        });
      }

      if (!attrs.targetUrl) {
        errors.push({
          type: 'ValidationError',
          message: 'Target URL is required',
          property: 'target_url'
        });
      }

      if (attrs.name && (webhooks.findBy({
        name: attrs.name,
        integrationId: attrs.integrationId
      }) || attrs.name.match(/Duplicate/i))) {
        errors.push({
          type: 'ValidationError',
          message: 'Name has already been used',
          property: 'name'
        });
      } // TODO: check server-side validation


      if (webhooks.findBy({
        targetUrl: attrs.targetUrl,
        event: attrs.event
      })) {
        errors.push({
          type: 'ValidationError',
          message: 'Target URL has already been used for this event',
          property: 'target_url'
        });
      }

      if (!Ember.isEmpty(errors)) {
        return new _emberCliMirage.Response(422, {}, {
          errors
        });
      }

      return webhooks.create(attrs);
    });
    server.put('/webhooks/:id/');
    server.del('/webhooks/:id/');
  }
});
;define("ghost-admin/mirage/factories/api-key", ["exports", "moment", "ember-cli-mirage"], function (_exports, _moment, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    type: 'content',

    secret() {
      if (this.integration) {
        return `${this.integration.slug}_${this.type}_key-12345`;
      }

      return `${this.type}_key-12345`;
    },

    lastSeenAt() {
      return _moment.default.utc().format();
    },

    createdAt() {
      return _moment.default.utc().format();
    },

    createdBy: 1,

    updatedAt() {
      return _moment.default.utc().format();
    },

    updatedBy: 1
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/email", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    emailCount: 0,
    error: null,
    html: null,
    plaintext: null,
    stats: null,
    status: 'sending',
    subject: null,
    submittedAtUTC: '2019-11-06T12:44:30.000Z',

    uuid(i) {
      return `email-${i}`;
    },

    createdAtUTC: '2019-11-06T12:44:30.000Z',
    createdBy: 1,
    updatedAtUTC: '2019-11-06T12:44:30.000Z',
    updatedBy: 1,
    sent: (0, _emberCliMirage.trait)({
      status: 'sent',
      stats: JSON.stringify({
        delivered: 0,
        failed: 0,
        opened: 0,
        clicked: 0,
        unsubscribed: 0,
        complaints: 0
      })
    }),
    failed: (0, _emberCliMirage.trait)({
      status: 'failed',
      error: 'Narp! This was an expected test failure',
      stats: null
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/integration", ["exports", "moment", "ember-cli-mirage"], function (_exports, _moment, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    name(i) {
      return `Integration ${i + 1}`;
    },

    slug() {
      return this.name.toLowerCase().replace(' ', '-');
    },

    description: null,
    iconImage: null,
    type: 'custom',

    createdAt() {
      return _moment.default.utc().format();
    },

    createdBy: 1,

    updatedAt() {
      return _moment.default.utc().format();
    },

    updatedBy: 1,

    afterCreate(integration, server) {
      let contentKey = server.create('api-key', {
        type: 'content',
        integration
      });
      let adminKey = server.create('api-key', {
        type: 'admin',
        integration
      });
      integration.apiKeyIds = [contentKey.id, adminKey.id];
      integration.save();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/invite", ["exports", "moment", "ember-cli-mirage"], function (_exports, _moment, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    token(i) {
      return `${i}-token`;
    },

    email(i) {
      return `invited-user-${i}@example.com`;
    },

    expires() {
      return _moment.default.utc().add(1, 'day').valueOf();
    },

    createdAt() {
      return _moment.default.utc().format();
    },

    createdBy() {
      return 1;
    },

    updatedAt() {
      return _moment.default.utc().format();
    },

    updatedBy() {
      return 1;
    },

    status() {
      return 'sent';
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/label", ["exports", "moment", "ember-cli-mirage"], function (_exports, _moment, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    createdAt() {
      return (0, _moment.default)().toISOString();
    },

    createdBy: 1,

    name(i) {
      return `Label ${i}`;
    },

    slug(i) {
      return `label-${i}`;
    },

    updatedAt() {
      return (0, _moment.default)().toISOString();
    },

    updatedBy: 1,

    count() {
      // this gets updated automatically by the label serializer
      return {
        members: 0
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/member-activity-event", ["exports", "faker", "moment", "ember-cli-mirage"], function (_exports, _faker, _moment, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const EVENT_TYPES = ['newsletter_event', 'login_event', 'subscription_event', 'payment_event', 'login_event', 'signup_event', 'email_delivered_event', 'email_opened_event', 'email_failed_event'];
  /* eslint-disable camelcase */

  var _default = _emberCliMirage.Factory.extend({
    type() {
      return _faker.default.random.arrayElement([EVENT_TYPES]);
    },

    createdAt() {
      return _moment.default.utc().format();
    },

    afterCreate(event, server) {
      if (!event.member) {
        event.update({
          member: server.create('member')
        });
      }

      if (event.type === 'newsletter_event') {
        event.update({
          data: {
            source: 'member',
            subscribed: event.subscribed !== undefined ? event.subscribed : _faker.default.datatype.boolean()
          }
        });
      }

      if (event.type === 'subscription_event') {
        event.update({
          data: {
            source: 'stripe' // TODO: add from_plan, to_plan, currency, mrr_delta

          }
        });
      }

      if (event.type === 'payment_event') {// TODO: add data attributes
      }

      if (event.type === 'signup_event') {// TODO: add data attributes
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/member", ["exports", "faker", "moment", "ember-cli-mirage"], function (_exports, _faker, _moment, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  let randomDate = function randomDate() {
    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _moment.default)().subtract(30, 'days').toDate();
    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();
    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
  };

  var _default = _emberCliMirage.Factory.extend({
    name() {
      return `${_faker.default.name.firstName()} ${_faker.default.name.lastName()}`;
    },

    email: _faker.default.internet.email,
    status: 'free',
    subscribed: true,

    createdAt() {
      return randomDate();
    },

    free: (0, _emberCliMirage.trait)({
      status: 'free'
    }),
    paid: (0, _emberCliMirage.trait)({
      status: 'paid'
    }),
    comped: (0, _emberCliMirage.trait)({
      status: 'comped'
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/notification", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    dismissible: true,
    message: 'This is an alert',
    status: 'alert',
    type: 'error'
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/offer", ["exports", "faker", "moment", "ember-cli-mirage"], function (_exports, _faker, _moment, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  let randomDate = function randomDate() {
    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _moment.default)().subtract(30, 'days').toDate();
    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();
    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
  };

  var _default = _emberCliMirage.Factory.extend({
    name() {
      return `${_faker.default.name.firstName()} ${_faker.default.name.lastName()}`;
    },

    amount() {
      return _faker.default.datatype.number({
        min: 1,
        max: 10
      });
    },

    displayTitle() {
      return _faker.default.lorem.word();
    },

    code() {
      return _faker.default.lorem.slug();
    },

    createdAt() {
      return randomDate();
    },

    tier() {
      return {
        id: '1'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/post", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    codeinjectionFoot: null,
    codeinjectionHead: null,
    createdAt: '2015-09-11T09:44:29.871Z',
    createdBy: 1,
    customExcerpt: null,
    customTemplate: null,

    description(i) {
      return `Title for post ${i}.`;
    },

    featured: false,

    featureImage(i) {
      return `/content/images/2015/10/post-${i}.jpg`;
    },

    html(i) {
      return `<p>HTML for post ${i}.</p>`;
    },

    visibility: 'public',

    metaDescription(i) {
      return `Meta description for post ${i}.`;
    },

    metaTitle(i) {
      return `Meta Title for post ${i}`;
    },

    ogDescription: null,
    ogImage: null,
    ogTitle: null,

    excerpt(i) {
      return `Excerpt for post ${i}.`;
    },

    plaintext(i) {
      return `Plaintext for post ${i}.`;
    },

    publishedAt: '2015-12-19T16:25:07.000Z',
    publishedBy: 1,

    status(i) {
      let statuses = ['draft', 'published', 'scheduled', 'sent'];
      return statuses[i % statuses.length];
    },

    title(i) {
      return `Post ${i}`;
    },

    twitterDescription: null,
    twitterImage: null,
    twitterTitle: null,
    emailSubject: null,
    updatedAt: '2015-10-19T16:25:07.756Z',
    updatedBy: 1,

    uuid(i) {
      return `post-${i}`;
    },

    authors() {
      return [];
    },

    tags() {
      return [];
    },

    afterCreate(post, server) {
      if (Ember.isEmpty(post.authors)) {
        let user = server.schema.users.find(1);

        if (!user) {
          let role = server.schema.roles.find({
            name: 'Administrator'
          }) || server.create('role', {
            name: 'Administrator'
          });
          user = server.create('user', {
            roles: [role]
          });
        }

        post.authors = [user];
        post.save();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/role", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    createdAt: '2013-11-25T14:48:11.000Z',
    createdBy: 1,

    description(i) {
      return `Role ${i}`;
    },

    name: '',
    updatedAt: '2013-11-25T14:48:11.000Z',
    updatedBy: 1
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/tag", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    createdAt: '2015-09-11T09:44:29.871Z',
    createdBy: 1,

    description(i) {
      return `Description for tag ${i}.`;
    },

    visibility: 'public',

    featureImage(i) {
      return `/content/images/2015/10/tag-${i}.jpg`;
    },

    metaDescription(i) {
      return `Meta description for tag ${i}.`;
    },

    metaTitle(i) {
      return `Meta Title for tag ${i}`;
    },

    name(i) {
      return `Tag ${i}`;
    },

    parent: null,

    slug(i) {
      return `tag-${i}`;
    },

    updatedAt: '2015-10-19T16:25:07.756Z',
    updatedBy: 1,

    count() {
      // this gets updated automatically by the tag serializer
      return {
        posts: 0
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/user", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    accessibility: null,
    bio: null,
    coverImage: null,
    createdAt: '2015-09-02T13:41:50.000Z',
    createdBy: null,

    email(i) {
      return `user-${i}@example.com`;
    },

    profileImage: '//www.gravatar.com/avatar/3ae045bc198a157401827c8455cd7c99?s=250&d=mm&r=x',
    lastLogin: '2015-11-02T16:12:05.000Z',
    location: null,
    metaDescription: null,
    metaTitle: null,

    name(i) {
      return `User ${i}`;
    },

    slug(i) {
      return `user-${i}`;
    },

    status: 'active',
    tour: null,
    updatedAt: '2015-11-02T16:12:05.000Z',
    updatedBy: '1',
    website: 'http://example.com',

    posts() {
      return [];
    },

    roles() {
      return [];
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/webhook", ["exports", "moment", "ghost-admin/helpers/event-name", "ember-cli-mirage"], function (_exports, _moment, _eventName, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    name(i) {
      return `Integration ${i + 1}`;
    },

    event(i) {
      let event = _eventName.AVAILABLE_EVENTS[i % 3];
      return event.event;
    },

    target(i) {
      return `https://example.com/${i + 1}`;
    },

    lastTriggeredAt: null,

    createdAt() {
      return _moment.default.utc().format();
    },

    createdBy: 1,

    updatedAt() {
      return _moment.default.utc().format();
    },

    updatedBy: 1
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/configs", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = [{
    clientExtensions: {},
    database: 'mysql',
    enableDeveloperExperiments: false,
    environment: 'development',
    labs: {},
    mail: 'SMTP',
    version: '2.15.0',
    useGravatar: 'true'
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/products", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = [{
    id: 1,
    name: 'Test Product',
    slug: 'test-product',
    monthly_price: {
      interval: 'month',
      nickname: 'Monthly',
      currency: 'usd',
      amount: 500
    },
    yearly_price: {
      interval: 'year',
      nickname: 'Yearly',
      currency: 'usd',
      amount: 5000
    },
    created_at: '2015-11-13T16:01:29.131Z',
    created_by: 1,
    updated_at: '2015-11-13T16:01:29.131Z',
    updated_by: 1
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/roles", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = [{
    id: 1,
    name: 'Administrator',
    description: 'Administrators',
    created_at: '2015-11-13T16:01:29.131Z',
    created_by: 1,
    updated_at: '2015-11-13T16:01:29.131Z',
    updated_by: 1
  }, {
    id: 2,
    name: 'Editor',
    description: 'Editors',
    created_at: '2015-11-13T16:01:29.131Z',
    created_by: 1,
    updated_at: '2015-11-13T16:01:29.131Z',
    updated_by: 1
  }, {
    id: 3,
    name: 'Author',
    description: 'Authors',
    created_at: '2015-11-13T16:01:29.131Z',
    created_by: 1,
    updated_at: '2015-11-13T16:01:29.131Z',
    updated_by: 1
  }, {
    id: 4,
    name: 'Owner',
    description: 'Blog Owner',
    created_at: '2015-11-13T16:01:29.132Z',
    created_by: 1,
    updated_at: '2015-11-13T16:01:29.132Z',
    updated_by: 1
  }, {
    id: 5,
    name: 'Contributor',
    description: 'Contributors',
    created_at: '2015-11-13T16:01:29.132Z',
    created_by: 1,
    updated_at: '2015-11-13T16:01:29.132Z',
    updated_by: 1
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/settings", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = [{
    id: 1,
    created_at: '2015-09-11T09:44:30.805Z',
    created_by: 1,
    key: 'title',
    group: 'site',
    updated_at: '2015-10-04T16:26:05.195Z',
    updated_by: 1,
    value: 'Test Blog'
  }, {
    id: 2,
    created_at: '2015-09-11T09:44:30.806Z',
    created_by: 1,
    key: 'description',
    group: 'site',
    updated_at: '2015-10-04T16:26:05.198Z',
    updated_by: 1,
    value: 'Thoughts, stories and ideas.'
  }, {
    id: 3,
    key: 'logo',
    value: '/content/images/2013/Nov/logo.png',
    group: 'site',
    created_at: '2013-11-25T14:48:11.000Z',
    created_by: 1,
    updated_at: '2015-10-27T17:39:58.273Z',
    updated_by: 1
  }, {
    id: 4,
    key: 'cover_image',
    value: '/content/images/2014/Feb/cover.jpg',
    group: 'site',
    created_at: '2013-11-25T14:48:11.000Z',
    created_by: 1,
    updated_at: '2015-10-27T17:39:58.276Z',
    updated_by: 1
  }, {
    id: 5,
    key: 'lang',
    value: 'en',
    group: 'site',
    created_at: '2013-11-25T14:48:11.000Z',
    created_by: 1,
    updated_at: '2015-10-27T17:39:58.278Z',
    updated_by: 1
  }, {
    id: 10,
    created_at: '2015-09-11T09:44:30.809Z',
    created_by: 1,
    key: 'codeinjection_head',
    group: 'site',
    updated_at: '2015-09-23T13:32:49.858Z',
    updated_by: 1,
    value: ''
  }, {
    id: 11,
    created_at: '2015-09-11T09:44:30.809Z',
    created_by: 1,
    key: 'codeinjection_foot',
    group: 'site',
    updated_at: '2015-09-23T13:32:49.858Z',
    updated_by: 1,
    value: ''
  }, {
    id: 12,
    key: 'labs',
    value: '{}',
    group: 'labs',
    created_at: '2015-01-12T18:29:01.000Z',
    created_by: 1,
    updated_at: '2015-10-27T17:39:58.288Z',
    updated_by: 1
  }, {
    id: 13,
    created_at: '2015-09-11T09:44:30.810Z',
    created_by: 1,
    key: 'navigation',
    group: 'site',
    updated_at: '2015-09-23T13:32:49.868Z',
    updated_by: 1,
    value: JSON.stringify([{
      label: 'Home',
      url: '/'
    }, {
      label: 'About',
      url: '/about'
    }])
  }, {
    id: 14,
    created_at: '2015-09-11T09:44:30.810Z',
    created_by: 1,
    key: 'is_private',
    group: 'private',
    updated_at: '2015-09-23T13:32:49.868Z',
    updated_by: 1,
    value: false
  }, {
    id: 15,
    created_at: '2015-09-11T09:44:30.810Z',
    created_by: 1,
    key: 'password',
    group: 'private',
    updated_at: '2015-09-23T13:32:49.868Z',
    updated_by: 1,
    value: ''
  }, {
    id: 16,
    created_at: '2016-05-05T15:04:03.115Z',
    created_by: 1,
    key: 'slack',
    group: 'slack',
    updated_at: '2016-05-05T18:33:09.168Z',
    updated_by: 1,
    value: '[{"url":"", "username":"Ghost"}]'
  }, {
    id: 17,
    created_at: '2016-05-05T15:40:12.133Z',
    created_by: 1,
    key: 'facebook',
    group: 'site',
    updated_at: '2016-05-08T15:20:25.953Z',
    updated_by: 1,
    value: 'test'
  }, {
    id: 18,
    created_at: '2016-05-05T15:40:12.134Z',
    created_by: 1,
    key: 'twitter',
    group: 'site',
    updated_at: '2016-05-08T15:20:25.954Z',
    updated_by: 1,
    value: '@test'
  }, {
    id: 19,
    created_at: '2015-09-11T09:44:30.810Z',
    created_by: 1,
    key: 'timezone',
    group: 'site',
    updated_at: '2015-09-23T13:32:49.868Z',
    updated_by: 1,
    value: 'Etc/UTC'
  }, {
    id: 21,
    created_at: '2017-01-09T08:40:59.000Z',
    created_by: 1,
    key: 'amp',
    group: 'amp',
    updated_at: '2017-01-09T08:49:42.991Z',
    updated_by: 1,
    value: 'true'
  }, {
    id: 22,
    key: 'icon',
    value: '/content/images/2014/Feb/favicon.ico',
    group: 'site',
    created_at: '2013-11-25T14:48:11.000Z',
    created_by: 1,
    updated_at: '2015-10-27T17:39:58.276Z',
    updated_by: 1
  }, {
    id: 23,
    group: 'members',
    key: 'members_subscription_settings',
    value: '{"allowSelfSignup":true,"fromAddress":"noreply","paymentProcessors":[{"adapter":"stripe","config":{"secret_token":"","public_token":"","product":{"name":"Ghost Subscription"},"plans":[{"name":"Monthly","currency":"usd","interval":"month","amount":""},{"name":"Yearly","currency":"usd","interval":"year","amount":""}]}}]}',
    created_at: '2019-10-09T09:49:00.000Z',
    created_by: 1,
    updated_at: '2019-10-09T09:49:00.000Z',
    updated_by: 1
  }, {
    id: 24,
    group: 'email',
    key: 'bulk_email_settings',
    value: '{"provider":"mailgun","apiKey":"","domain":"","baseUrl":""}',
    created_at: '2019-10-09T09:49:00.000Z',
    created_by: 1,
    updated_at: '2019-10-09T09:49:00.000Z',
    updated_by: 1
  }, {
    id: 25,
    key: 'secondary_navigation',
    group: 'site',
    created_at: '2019-11-20T09:44:30.810Z',
    created_by: 1,
    updated_at: '2019-11-20T13:32:49.868Z',
    updated_by: 1,
    value: JSON.stringify([])
  }, {
    id: 26,
    created_at: '2020-01-09T08:40:59.000Z',
    created_by: 1,
    key: 'unsplash',
    group: 'unsplash',
    updated_at: '2020-01-09T08:49:42.991Z',
    updated_by: 1,
    value: 'true'
  }, {
    id: 27,
    created_at: '2021-11-01T15:44:43.494Z',
    created_by: 1,
    key: 'active_theme',
    group: 'theme',
    updated_at: '2021-11-01T15:44:43.494Z',
    updated_by: 1,
    value: 'casper'
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/sites", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = [{
    title: 'Test Blog',
    url: `${window.location.origin}/`
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/themes", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = [{
    name: 'casper',
    package: {
      name: 'casper',
      version: '1.0'
    },
    active: true
  }, {
    name: 'foo',
    package: {
      name: 'Foo',
      version: '0.1'
    }
  }, {
    name: 'bar'
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/timezones", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = [{
    name: 'Pacific/Pago_Pago',
    label: '(GMT -11:00) Midway Island, Samoa'
  }, {
    name: 'Pacific/Honolulu',
    label: '(GMT -10:00) Hawaii'
  }, {
    name: 'America/Anchorage',
    label: '(GMT -9:00) Alaska'
  }, {
    name: 'America/Tijuana',
    label: '(GMT -8:00) Chihuahua, La Paz, Mazatlan'
  }, {
    name: 'America/Los_Angeles',
    label: '(GMT -8:00) Pacific Time (US & Canada); Tijuana'
  }, {
    name: 'America/Phoenix',
    label: '(GMT -7:00) Arizona'
  }, {
    name: 'America/Denver',
    label: '(GMT -7:00) Mountain Time (US & Canada)'
  }, {
    name: 'America/Costa_Rica',
    label: '(GMT -6:00) Central America'
  }, {
    name: 'America/Chicago',
    label: '(GMT -6:00) Central Time (US & Canada)'
  }, {
    name: 'America/Mexico_City',
    label: '(GMT -6:00) Guadalajara, Mexico City, Monterrey'
  }, {
    name: 'America/Regina',
    label: '(GMT -6:00) Saskatchewan'
  }, {
    name: 'America/Bogota',
    label: '(GMT -5:00) Bogota, Lima, Quito'
  }, {
    name: 'America/New_York',
    label: '(GMT -5:00) Eastern Time (US & Canada)'
  }, {
    name: 'America/Fort_Wayne',
    label: '(GMT -5:00) Indiana (East)'
  }, {
    name: 'America/Caracas',
    label: '(GMT -4:00) Caracas, La Paz'
  }, {
    name: 'America/Halifax',
    label: '(GMT -4:00) Atlantic Time (Canada); Brasilia, Greenland'
  }, {
    name: 'America/Santiago',
    label: '(GMT -4:00) Santiago'
  }, {
    name: 'America/St_Johns',
    label: '(GMT -3:30) Newfoundland'
  }, {
    name: 'America/Argentina/Buenos_Aires',
    label: '(GMT -3:00) Buenos Aires, Georgetown'
  }, {
    name: 'America/Noronha',
    label: '(GMT -2:00) Fernando de Noronha'
  }, {
    name: 'Atlantic/Azores',
    label: '(GMT -1:00) Azores'
  }, {
    name: 'Atlantic/Cape_Verde',
    label: '(GMT -1:00) Cape Verde Is.'
  }, {
    name: 'Etc/UTC',
    label: '(GMT) UTC'
  }, {
    name: 'Africa/Casablanca',
    label: '(GMT +0:00) Casablanca, Monrovia'
  }, {
    name: 'Europe/Dublin',
    label: '(GMT +0:00) Dublin, Edinburgh, London'
  }, {
    name: 'Europe/Amsterdam',
    label: '(GMT +1:00) Amsterdam, Berlin, Rome, Stockholm, Vienna'
  }, {
    name: 'Europe/Prague',
    label: '(GMT +1:00) Belgrade, Bratislava, Budapest, Prague'
  }, {
    name: 'Europe/Paris',
    label: '(GMT +1:00) Brussels, Copenhagen, Madrid, Paris'
  }, {
    name: 'Europe/Warsaw',
    label: '(GMT +1:00) Sarajevo, Skopje, Warsaw, Zagreb'
  }, {
    name: 'Africa/Lagos',
    label: '(GMT +1:00) West Central Africa'
  }, {
    name: 'Europe/Istanbul',
    label: '(GMT +2:00) Athens, Beirut, Bucharest, Istanbul'
  }, {
    name: 'Africa/Cairo',
    label: '(GMT +2:00) Cairo, Egypt'
  }, {
    name: 'Africa/Maputo',
    label: '(GMT +2:00) Harare'
  }, {
    name: 'Europe/Kiev',
    label: '(GMT +2:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius'
  }, {
    name: 'Asia/Jerusalem',
    label: '(GMT +2:00) Jerusalem'
  }, {
    name: 'Africa/Johannesburg',
    label: '(GMT +2:00) Pretoria'
  }, {
    name: 'Asia/Baghdad',
    label: '(GMT +3:00) Baghdad'
  }, {
    name: 'Asia/Riyadh',
    label: '(GMT +3:00) Kuwait, Nairobi, Riyadh'
  }, {
    name: 'Europe/Moscow',
    label: '(GMT +3:00) Moscow, St. Petersburg, Volgograd'
  }, {
    name: 'Asia/Tehran',
    label: '(GMT +3:30) Tehran'
  }, {
    name: 'Asia/Dubai',
    label: '(GMT +4:00) Abu Dhabi, Muscat'
  }, {
    name: 'Asia/Baku',
    label: '(GMT +4:00) Baku, Tbilisi, Yerevan'
  }, {
    name: 'Asia/Kabul',
    label: '(GMT +4:30) Kabul'
  }, {
    name: 'Asia/Karachi',
    label: '(GMT +5:00) Islamabad, Karachi, Tashkent'
  }, {
    name: 'Asia/Yekaterinburg',
    label: '(GMT +5:00) Yekaterinburg'
  }, {
    name: 'Asia/Kolkata',
    label: '(GMT +5:30) Chennai, Calcutta, Mumbai, New Delhi'
  }, {
    name: 'Asia/Kathmandu',
    label: '(GMT +5:45) Katmandu'
  }, {
    name: 'Asia/Almaty',
    label: '(GMT +6:00) Almaty, Novosibirsk'
  }, {
    name: 'Asia/Dhaka',
    label: '(GMT +6:00) Astana, Dhaka, Sri Jayawardenepura'
  }, {
    name: 'Asia/Rangoon',
    label: '(GMT +6:30) Rangoon'
  }, {
    name: 'Asia/Bangkok',
    label: '(GMT +7:00) Bangkok, Hanoi, Jakarta'
  }, {
    name: 'Asia/Krasnoyarsk',
    label: '(GMT +7:00) Krasnoyarsk'
  }, {
    name: 'Asia/Hong_Kong',
    label: '(GMT +8:00) Beijing, Chongqing, Hong Kong, Urumqi'
  }, {
    name: 'Asia/Irkutsk',
    label: '(GMT +8:00) Irkutsk, Ulaan Bataar'
  }, {
    name: 'Asia/Singapore',
    label: '(GMT +8:00) Kuala Lumpur, Perth, Singapore, Taipei'
  }, {
    name: 'Asia/Tokyo',
    label: '(GMT +9:00) Osaka, Sapporo, Tokyo'
  }, {
    name: 'Asia/Seoul',
    label: '(GMT +9:00) Seoul'
  }, {
    name: 'Asia/Yakutsk',
    label: '(GMT +9:00) Yakutsk'
  }, {
    name: 'Australia/Adelaide',
    label: '(GMT +9:30) Adelaide'
  }, {
    name: 'Australia/Darwin',
    label: '(GMT +9:30) Darwin'
  }, {
    name: 'Australia/Brisbane',
    label: '(GMT +10:00) Brisbane, Guam, Port Moresby'
  }, {
    name: 'Australia/Sydney',
    label: '(GMT +10:00) Canberra, Hobart, Melbourne, Sydney, Vladivostok'
  }, {
    name: 'Asia/Magadan',
    label: '(GMT +11:00) Magadan, Soloman Is., New Caledonia'
  }, {
    name: 'Pacific/Auckland',
    label: '(GMT +12:00) Auckland, Wellington'
  }, {
    name: 'Pacific/Fiji',
    label: '(GMT +12:00) Fiji, Kamchatka, Marshall Is.'
  }, {
    name: 'Pacific/Kwajalein',
    label: '(GMT +12:00) International Date Line West'
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/models/api-key", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    integration: (0, _emberCliMirage.belongsTo)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/config", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/custom-theme-setting", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/email", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    post: (0, _emberCliMirage.belongsTo)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/integration", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    apiKeys: (0, _emberCliMirage.hasMany)(),
    webhooks: (0, _emberCliMirage.hasMany)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/invite", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    role: (0, _emberCliMirage.belongsTo)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/label", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    members: (0, _emberCliMirage.hasMany)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/member-activity-event", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    email: (0, _emberCliMirage.belongsTo)(),
    member: (0, _emberCliMirage.belongsTo)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/member", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    labels: (0, _emberCliMirage.hasMany)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/notification", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/page", ["exports", "ghost-admin/mirage/models/post"], function (_exports, _post) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _post.default.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/post", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    tags: (0, _emberCliMirage.hasMany)(),
    authors: (0, _emberCliMirage.hasMany)('user'),
    email: (0, _emberCliMirage.belongsTo)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/product", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/role", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/site", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/snippet", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/subscriber", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/tag", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    posts: (0, _emberCliMirage.hasMany)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/theme", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/user", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    // used by the serializer to determine whether
    // or not to include the post count
    postCount: false,
    roles: (0, _emberCliMirage.hasMany)(),
    posts: (0, _emberCliMirage.hasMany)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/webhook", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    integration: (0, _emberCliMirage.belongsTo)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/scenarios/default", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  function _default(server) {
    // Seed your development database using your factories. This
    // data will not be loaded in your tests.
    // server.createList('contact', 10);
    server.createList('tag', 100);
    server.create('integration', {
      name: 'Demo'
    });
    server.createList('member', 125);
  }
});
;define("ghost-admin/mirage/serializers/application", ["exports", "ember-cli-mirage", "ember-cli-mirage/utils/inflector"], function (_exports, _emberCliMirage, _inflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.RestSerializer.extend({
    keyForCollection(collection) {
      return Ember.String.underscore((0, _inflector.pluralize)(collection));
    },

    keyForAttribute(attr) {
      return Ember.String.underscore(attr);
    },

    keyForRelationship(relationship) {
      return Ember.String.underscore(relationship);
    },

    keyForEmbeddedRelationship(relationship) {
      return Ember.String.underscore(relationship);
    },

    keyForForeignKey(relationshipName) {
      return `${Ember.String.underscore(relationshipName)}_id`;
    },

    serialize(object, request) {
      // Ember expects pluralized responses for the post, user, and invite models,
      // and this shortcut will ensure that those models are pluralized
      if (this.isModel(object) && ['post', 'user', 'invite'].includes(object.modelName)) {
        object = new _emberCliMirage.Collection(object.modelName, [object]);
      }

      let json = _emberCliMirage.RestSerializer.prototype.serialize.call(this, object, request);

      if (this.isCollection(object) && object.meta) {
        json.meta = object.meta;
      }

      return json;
    },

    // POST and PUT request send data in pluralized attributes for all models,
    // so we extract it here - this allows #normalizedRequestAttrs to work
    // in route functions
    normalize(body, modelName) {
      // sometimes mirage doesn't include a modelName, so we extrapolate it from
      // the first element of Object.keys
      modelName = (0, _inflector.pluralize)(modelName) || Object.keys(body)[0];
      let [attributes] = body[modelName] || [{}];
      return {
        data: {
          attributes
        }
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/serializers/integration", ["exports", "ghost-admin/mirage/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    embed: true,

    include(request) {
      if (!request.queryParams.include) {
        return;
      }

      return request.queryParams.include.split(',').map(Ember.String.camelize);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/serializers/label", ["exports", "ghost-admin/mirage/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    // make the label.count.members value dynamic
    serialize(labelModelOrCollection, request) {
      let updateMemberCount = label => {
        label.update('count', {
          members: label.memberIds.length
        });
      };

      if (this.isModel(labelModelOrCollection)) {
        updateMemberCount(labelModelOrCollection);
      } else {
        labelModelOrCollection.models.forEach(updateMemberCount);
      }

      return _application.default.prototype.serialize.call(this, labelModelOrCollection, request);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/serializers/member-activity-event", ["exports", "ghost-admin/mirage/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    embed: true,

    keyForCollection() {
      return 'events';
    },

    include() {
      // these are always embedded but will be moved onto the `data` object in the serializer
      return ['member', 'email'];
    },

    serialize() {
      const serialized = _application.default.prototype.serialize.call(this, ...arguments);

      const events = serialized.events.map(serializedEvent => {
        const data = Object.assign({}, serializedEvent.data, {
          id: serializedEvent.id,
          created_at: serializedEvent.created_at
        });

        if (serializedEvent.member) {
          data.member = serializedEvent.member;
          data.member_id = serializedEvent.member_id;
        }

        if (serializedEvent.email) {
          data.email = serializedEvent.email;
          data.email_id = serializedEvent.email_id;
        }

        return {
          type: serializedEvent.type,
          data
        };
      });
      return {
        events
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/serializers/page", ["exports", "ghost-admin/mirage/serializers/post"], function (_exports, _post) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _post.default.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/serializers/post", ["exports", "ghost-admin/mirage/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    embed: true,

    include() {
      let includes = [];
      includes.push('tags');
      includes.push('authors');
      return includes;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/serializers/tag", ["exports", "ghost-admin/mirage/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    // make the tag.count.posts value dynamic
    serialize(tagModelOrCollection, request) {
      let updatePostCount = tag => {
        tag.update('count', {
          posts: tag.postIds.length
        });
      };

      if (this.isModel(tagModelOrCollection)) {
        updatePostCount(tagModelOrCollection);
      } else {
        tagModelOrCollection.models.forEach(updatePostCount);
      }

      return _application.default.prototype.serialize.call(this, tagModelOrCollection, request);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/serializers/user", ["exports", "ghost-admin/mirage/serializers/application", "ember-cli-mirage"], function (_exports, _application, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    embed: true,

    include(request) {
      if (request.queryParams.include && request.queryParams.include.indexOf('roles') >= 0) {
        return ['roles'];
      }

      return [];
    },

    serialize(object, request) {
      if (this.isCollection(object)) {
        return _application.default.prototype.serialize.call(this, object, request);
      }

      let {
        user
      } = _emberCliMirage.RestSerializer.prototype.serialize.call(this, object, request);

      if (object.postCount) {
        let posts = object.posts.models.length;
        user.count = {
          posts
        };
      }

      return {
        users: [user]
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/utils", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.extractFilterParam = extractFilterParam;
  _exports.maintenanceResponse = maintenanceResponse;
  _exports.paginateModelCollection = paginateModelCollection;
  _exports.paginatedResponse = paginatedResponse;
  _exports.versionMismatchResponse = versionMismatchResponse;

  /* eslint-disable max-statements-per-line */
  function paginatedResponse(modelName) {
    return function (schema, request) {
      let page = +request.queryParams.page || 1;
      let limit = request.queryParams.limit;
      let collection = schema[modelName].all();

      if (limit !== 'all') {
        limit = +request.queryParams.limit || 15;
      }

      return paginateModelCollection(modelName, collection, page, limit);
    };
  }

  function paginateModelCollection(modelName, collection, page, limit) {
    let pages, next, prev, models;

    if (limit === 'all') {
      pages = 1;
    } else {
      limit = +limit;
      let start = (page - 1) * limit;
      let end = start + limit;
      pages = Math.ceil(collection.models.length / limit);
      models = collection.models.slice(start, end);

      if (start > 0) {
        prev = page - 1;
      }

      if (end < collection.models.length) {
        next = page + 1;
      }
    }

    collection.meta = {
      pagination: {
        page,
        limit,
        pages,
        total: collection.models.length,
        next: next || null,
        prev: prev || null
      }
    };

    if (models) {
      collection.models = models;
    }

    return collection;
  }

  function maintenanceResponse() {
    return new _emberCliMirage.Response(503, {}, {
      errors: [{
        type: 'Maintenance'
      }]
    });
  }

  function versionMismatchResponse() {
    return new _emberCliMirage.Response(400, {}, {
      errors: [{
        type: 'VersionMismatchError'
      }]
    });
  }

  function normalizeBooleanParams(arr) {
    if (!Ember.isArray(arr)) {
      return arr;
    }

    return arr.map(i => {
      if (i === 'true') {
        return true;
      } else if (i === 'false') {
        return false;
      } else {
        return i;
      }
    });
  }

  function normalizeStringParams(arr) {
    if (!Ember.isArray(arr)) {
      return arr;
    }

    return arr.map(i => {
      if (!i.replace) {
        return i;
      }

      return i.replace(/^['"]|['"]$/g, '');
    });
  } // TODO: use GQL to parse filter string?


  function extractFilterParam(param) {
    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let filterRegex = new RegExp(`${param}:(.*?)(?:\\+|$)`);
    let match;
    let [, result] = filter.match(filterRegex) || [];

    if (!result) {
      return;
    }

    if (result.startsWith('[')) {
      match = result.replace(/^\[|\]$/g, '').split(',');
    } else {
      match = [result];
    }

    return normalizeBooleanParams(normalizeStringParams(match));
  }
});
;define("ghost-admin/mixins/body-event-listener", ["exports", "jquery"], function (_exports, _jquery) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function K() {
    return this;
  } // Code modified from Addepar/ember-widgets
  // https://github.com/Addepar/ember-widgets/blob/master/src/mixins.coffee#L39


  var _default = Ember.Mixin.create({
    bodyElementSelector: 'html',
    bodyClick: K,

    init() {
      this._super(...arguments);

      return Ember.run.next(this, this._setupDocumentHandlers);
    },

    willDestroy() {
      this._super(...arguments);

      return this._removeDocumentHandlers();
    },

    _setupDocumentHandlers() {
      if (this._clickHandler) {
        return;
      }

      this._clickHandler = event => this.bodyClick(event);

      return (0, _jquery.default)(this.bodyElementSelector).on('click', this._clickHandler);
    },

    _removeDocumentHandlers() {
      (0, _jquery.default)(this.bodyElementSelector).off('click', this._clickHandler);
      this._clickHandler = null;
    },

    // http://stackoverflow.com/questions/152975/how-to-detect-a-click-outside-an-element
    click(event) {
      return event.stopPropagation();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/dropdown-mixin", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /*
    Dropdowns and their buttons are evented and do not propagate clicks.
  */
  var _default = Ember.Mixin.create(Ember.Evented, {
    classNameBindings: ['isOpen:open:closed'],
    isOpen: false,

    click(event) {
      this._super(event);

      return event.stopPropagation();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/shortcuts-route", ["exports", "ghost-admin/mixins/shortcuts"], function (_exports, _shortcuts) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /**
   * Only routes can implement shortcuts.
   * If you need to trigger actions on the controller,
   * simply call them with `this.get('controller').send('action')`.
   *
   * To implement shortcuts, add this mixin to your `extend()`,
   * and implement a `shortcuts` hash.
   * In this hash, keys are shortcut combinations and values are route action names.
   *  (see [keymaster docs](https://github.com/madrobby/keymaster/blob/master/README.markdown)),
   *
   * ```javascript
   * shortcuts: {
   *     'ctrl+s, command+s': 'save'
   * }
   * ```
   * For more complex actions, shortcuts can instead have their value
   * be an object like {action, options}
   * ```javascript
   * shortcuts: {
   *      'ctrl+k': {action: 'markdownShortcut', options: 'createLink'}
   * }
   * ```
   * You can set the scope of your shortcut by passing a scope property.
   * ```javascript
   * shortcuts : {
   *   'enter': {action : 'confirmModal', scope: 'modal'}
   * }
   * ```
   * If you don't specify a scope, we use a default scope called "default".
   * To have all your shortcut work in all scopes, give it the scope "all".
   * Find out more at the keymaster docs
   */
  var _default = Ember.Mixin.create(_shortcuts.default, {
    activate() {
      this._super(...arguments);

      this.registerShortcuts();
    },

    deactivate() {
      this._super(...arguments);

      this.removeShortcuts();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/shortcuts", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // Configure KeyMaster to respond to all shortcuts,
  // even inside of
  // input, textarea, and select.
  key.filter = function () {
    return true;
  };

  key.setScope('default');
  /**
   * Only routes can implement shortcuts.
   * If you need to trigger actions on the controller,
   * simply call them with `this.get('controller').send('action')`.
   *
   * To implement shortcuts, add this mixin to your `extend()`,
   * and implement a `shortcuts` hash.
   * In this hash, keys are shortcut combinations and values are route action names.
   *  (see [keymaster docs](https://github.com/madrobby/keymaster/blob/master/README.markdown)),
   *
   * ```javascript
   * shortcuts: {
   *     'ctrl+s, command+s': 'save'
   * }
   * ```
   * For more complex actions, shortcuts can instead have their value
   * be an object like {action, options}
   * ```javascript
   * shortcuts: {
   *      'ctrl+k': {action: 'markdownShortcut', options: 'createLink'}
   * }
   * ```
   * You can set the scope of your shortcut by passing a scope property.
   * ```javascript
   * shortcuts : {
   *   'enter': {action : 'confirmModal', scope: 'modal'}
   * }
   * ```
   * If you don't specify a scope, we use a default scope called "default".
   * To have all your shortcut work in all scopes, give it the scope "all".
   * Find out more at the keymaster docs
   */

  var _default = Ember.Mixin.create({
    registerShortcuts() {
      let shortcuts = this.shortcuts;
      Object.keys(shortcuts).forEach(shortcut => {
        let scope = shortcuts[shortcut].scope || 'default';
        let action = shortcuts[shortcut];
        let options;

        if (Ember.typeOf(action) !== 'string') {
          options = action.options;
          action = action.action;
        }

        key(shortcut, scope, event => {
          // stop things like ctrl+s from actually opening a save dialog
          event.preventDefault();
          Ember.run(this, function () {
            this.send(action, options);
          });
        });
      });
    },

    removeShortcuts() {
      let shortcuts = this.shortcuts;
      Object.keys(shortcuts).forEach(shortcut => {
        let scope = shortcuts[shortcut].scope || 'default';
        key.unbind(shortcut, scope);
      });
    },

    willDestroy() {
      this._super(...arguments);

      this.removeShortcuts();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/slug-url", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Mixin.create({
    buildURL(_modelName, _id, _snapshot, _requestType, query) {
      let url = this._super(...arguments);

      if (query && !Ember.isBlank(query.slug)) {
        url += `slug/${query.slug}/`;
        delete query.slug;
      }

      return url;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/text-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const keyCodes = {
    13: 'Enter',
    9: 'Tab'
  };

  var _default = Ember.Mixin.create({
    userAgent: Ember.inject.service(),
    attributeBindings: ['autofocus'],
    selectOnClick: false,
    shouldFocus: false,
    stopEnterKeyDownPropagation: false,
    autofocus: Ember.computed(function () {
      if (this.shouldFocus) {
        return this.userAgent.os.isIOS ? false : 'autofocus';
      }

      return false;
    }),

    didInsertElement() {
      this._super(...arguments);

      this._focus();
    },

    click(event) {
      if (this.selectOnClick) {
        event.currentTarget.select();
      }
    },

    keyDown(event) {
      // stop event propagation when pressing "enter"
      // most useful in the case when undesired (global) keyboard shortcuts
      // are getting triggered while interacting with this particular input element.
      if (event.keyCode === 13 && this.stopEnterKeyDownPropagation) {
        event.stopPropagation();
        return true;
      } // prevent default TAB behaviour if we have a keyEvent for it


      if (event.keyCode === 9 && typeof this.get('keyEvents.Tab') === 'function') {
        event.preventDefault();
      }

      this._super(...arguments);
    },

    keyPress(event) {
      // prevent default ENTER behaviour if we have a keyEvent for it
      if (event.keyCode === 13 && typeof this.get('keyEvents.Enter') === 'function') {
        event.preventDefault();
      }

      this._super(...arguments);
    },

    keyUp(event) {
      if (event.keyCode) {
        let methodName = this._getMethodFromKeyCode(event.keyCode);

        let method = this.get(`keyEvents.${methodName}`);

        if (method) {
          method(event.target.value);
        }
      }
    },

    _focus() {
      // Until mobile safari has better support
      // for focusing, we just ignore it
      if (this.shouldFocus && !this.userAgent.os.isIOS) {
        this.element.focus();
      }
    },

    _getMethodFromKeyCode(keyCode) {
      let methodName = keyCodes[keyCode.toString()];
      return methodName;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/validation-engine", ["exports", "ghost-admin/validators/custom-view", "ember-data", "ghost-admin/validators/integration", "ghost-admin/validators/invite-user", "ghost-admin/validators/label", "ghost-admin/validators/member", "@ember-data/model", "ghost-admin/validators/nav-item", "ghost-admin/validators/offer", "ghost-admin/validators/post", "ghost-admin/validators/product-benefit-item", "ghost-admin/validators/product", "ghost-admin/validators/reset", "ghost-admin/validators/setting", "ghost-admin/validators/setup", "ghost-admin/validators/signin", "ghost-admin/validators/signup", "ghost-admin/validators/slack-integration", "ghost-admin/validators/snippet", "ghost-admin/validators/tag-settings", "ghost-admin/validators/user", "ghost-admin/validators/webhook"], function (_exports, _customView, _emberData, _integration, _inviteUser, _label, _member, _model, _navItem, _offer, _post, _productBenefitItem, _product, _reset, _setting, _setup, _signin, _signup, _slackIntegration, _snippet, _tagSettings, _user, _webhook) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // TODO: remove usage of Ember Data's private `Errors` class when refactoring validations
  // eslint-disable-next-line
  // eslint-disable-line
  const {
    Errors
  } = _emberData.default;
  /**
  * The class that gets this mixin will receive these properties and functions.
  * It will be able to validate any properties on itself (or the model it passes to validate())
  * with the use of a declared validator.
  */

  var _default = Ember.Mixin.create({
    // these validators can be passed a model to validate when the class that
    // mixes in the ValidationEngine declares a validationType equal to a key on this object.
    // the model is either passed in via `this.validate({ model: object })`
    // or by calling `this.validate()` without the model property.
    // in that case the model will be the class that the ValidationEngine
    // was mixed into, i.e. the controller or Ember Data model.
    validators: null,
    // This adds the Errors object to the validation engine, and shouldn't affect
    // ember-data models because they essentially use the same thing
    errors: null,
    // Store whether a property has been validated yet, so that we know whether or not
    // to show error / success validation for a field
    hasValidated: null,

    init() {
      this._super(...arguments);

      this.set('errors', Errors.create());
      this.set('hasValidated', Ember.A());
      this.validators = {
        customView: _customView.default,
        inviteUser: _inviteUser.default,
        navItem: _navItem.default,
        productBenefitItem: _productBenefitItem.default,
        post: _post.default,
        reset: _reset.default,
        setting: _setting.default,
        setup: _setup.default,
        signin: _signin.default,
        signup: _signup.default,
        slackIntegration: _slackIntegration.default,
        tag: _tagSettings.default,
        user: _user.default,
        member: _member.default,
        integration: _integration.default,
        webhook: _webhook.default,
        label: _label.default,
        snippet: _snippet.default,
        product: _product.default,
        offer: _offer.default
      };
    },

    /**
    * Passes the model to the validator specified by validationType.
    * Returns a promise that will resolve if validation succeeds, and reject if not.
    * Some options can be specified:
    *
    * `model: Object` - you can specify the model to be validated, rather than pass the default value of `this`,
    *                   the class that mixes in this mixin.
    *
    * `property: String` - you can specify a specific property to validate. If
    * 					   no property is specified, the entire model will be
    * 					   validated
    */
    validate(opts) {
      let model = this;
      let hasValidated, type, validator;
      opts = opts || {};

      if (opts.model) {
        model = opts.model;
      } else if (this instanceof _model.default) {
        model = this;
      } else if (this.model) {
        model = this.model;
      }

      type = this.validationType || model.get('validationType');
      validator = this.get(`validators.${type}`) || model.get(`validators.${type}`);
      hasValidated = this.hasValidated;
      opts.validationType = type;
      return new Ember.RSVP.Promise((resolve, reject) => {
        let passed;

        if (!type || !validator) {
          return reject([`The validator specified, "${type}", did not exist!`]);
        }

        if (opts.property) {
          // If property isn't in `hasValidated`, add it to mark that this field can show a validation result
          hasValidated.addObject(opts.property);
          model.get('errors').remove(opts.property);
        } else {
          model.get('errors').clear();
        }

        passed = validator.check(model, opts.property);
        return passed ? resolve() : reject();
      });
    },

    /**
    * The primary goal of this method is to override the `save` method on Ember Data models.
    * This allows us to run validation before actually trying to save the model to the server.
    * You can supply options to be passed into the `validate` method, since the ED `save` method takes no options.
    */
    save(options) {
      let {
        _super
      } = this;
      options = options || {};
      options.wasSave = true; // model.destroyRecord() calls model.save() behind the scenes.
      // in that case, we don't need validation checks or error propagation,
      // because the model itself is being destroyed.

      if (this.isDeleted) {
        return this._super(...arguments);
      } // If validation fails, reject with validation errors.
      // If save to the server fails, reject with server response.


      return this.validate(options).then(() => {
        if (typeof this.beforeSave === 'function') {
          this.beforeSave();
        }

        return _super.call(this, options);
      }).catch(result => {
        // server save failed or validator type doesn't exist
        if (result && !Ember.isArray(result)) {
          throw result;
        }

        return Ember.RSVP.reject(result);
      });
    },

    actions: {
      validate(property) {
        this.validate({
          property
        });
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/validation-state", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Mixin.create({
    errors: null,
    property: '',
    hasValidated: Ember.A(),
    hasError: false,

    setHasError() {
      let property = this.property;
      let errors = this.errors;
      let hasValidated = this.hasValidated; // if we aren't looking at a specific property we always want an error class

      if (!property && errors && !errors.get('isEmpty')) {
        this.set('hasError', true);
        return;
      } // If we haven't yet validated this field, there is no validation class needed


      if (!hasValidated || !hasValidated.includes(property)) {
        this.set('hasError', false);
        return;
      }

      if (errors && !Ember.isEmpty(errors.errorsFor(property))) {
        this.set('hasError', true);
        return;
      }

      this.set('hasError', false);
    },

    // eslint-disable-next-line ghost/ember/no-observers
    hasErrorObserver: Ember.on('init', Ember.observer('errors.[]', 'property', 'hasValidated.[]', function () {
      Ember.run.once(this, 'setHasError');
    }))
  });

  _exports.default = _default;
});
;define("ghost-admin/models/action", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    resourceId: (0, _model.attr)('string'),
    resourceType: (0, _model.attr)('string'),
    actorId: (0, _model.attr)('string'),
    actorType: (0, _model.attr)('string'),
    event: (0, _model.attr)('string'),
    context: (0, _model.attr)('json-string'),
    createdAtUTC: (0, _model.attr)('moment-utc')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/api-key", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    type: (0, _model.attr)('string'),
    secret: (0, _model.attr)('string'),
    lastSeenAtUTC: (0, _model.attr)('moment-utc'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('number'),
    integration: (0, _model.belongsTo)('integration')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/base", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    // this is a hack that gives us access to meta data in single resource responses
    // allows similar response.get('_meta') as with multi-resource responses but can
    // suffer from race conditions
    // TODO: review once the record links and meta RFC lands
    // https://github.com/emberjs/rfcs/blob/master/text/0332-ember-data-record-links-and-meta.md
    get _meta() {
      return this._internalModel.type.___meta;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/models/coordinator", ["exports", "ghost-admin/models/obj-hash"], function (_exports, _objHash) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend(Ember.Evented, {
    objectMap: Ember.computed(function () {
      return _objHash.default.create();
    }),
    getObject: function (id, ops) {
      ops = ops || {};
      var payload = this.get('objectMap').getObj(id);

      if (payload.ops.source) {
        payload.ops.source.sendAction('action', payload.obj);
      }

      if (payload.ops.target) {
        payload.ops.target.sendAction('action', payload.obj);
      }

      this.trigger("objectMoved", {
        obj: payload.obj,
        source: payload.ops.source,
        target: ops.target
      });
      return payload.obj;
    },
    setObject: function (obj, ops) {
      ops = ops || {};
      return this.get('objectMap').add({
        obj: obj,
        ops: ops
      });
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/models/custom-theme-setting-list", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    customThemeSettings: (0, _model.hasMany)('custom-theme-setting')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/custom-theme-setting", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    key: (0, _model.attr)('string'),
    type: (0, _model.attr)('string'),
    options: (0, _model.attr)(),
    default: (0, _model.attr)('string'),
    value: (0, _model.attr)(),
    group: (0, _model.attr)('string')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/email-recipient", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    processedAtUTC: (0, _model.attr)('moment-utc'),
    deliveredAtUTC: (0, _model.attr)('moment-utc'),
    openedAtUTC: (0, _model.attr)('moment-utc'),
    failedAtUTC: (0, _model.attr)('moment-utc'),
    memberEmail: (0, _model.attr)('string'),
    memberName: (0, _model.attr)('string'),
    email: (0, _model.belongsTo)('email', {
      embedded: 'always',
      async: false
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/models/email", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    error: (0, _model.attr)('string'),
    html: (0, _model.attr)('string'),
    plaintext: (0, _model.attr)('string'),
    stats: (0, _model.attr)('json-string'),
    status: (0, _model.attr)('string'),
    subject: (0, _model.attr)('string'),
    submittedAtUTC: (0, _model.attr)('moment-utc'),
    uuid: (0, _model.attr)('string'),
    recipientFilter: (0, _model.attr)('string'),
    emailCount: (0, _model.attr)('number', {
      defaultValue: 0
    }),
    deliveredCount: (0, _model.attr)('number', {
      defaultValue: 0
    }),
    openedCount: (0, _model.attr)('number', {
      defaultValue: 0
    }),
    failedCount: (0, _model.attr)('number', {
      defaultValue: 0
    }),
    trackOpens: (0, _model.attr)('boolean'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('string'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('string'),
    post: (0, _model.belongsTo)('post'),
    isSuccess: Ember.computed.equal('status', 'submitted'),
    isFailure: Ember.computed.equal('status', 'failed'),
    openRate: Ember.computed('emailCount', 'openedCount', function () {
      let {
        emailCount,
        openedCount
      } = this;

      if (emailCount === 0) {
        return 0;
      }

      return Math.round(openedCount / emailCount * 100);
    }),

    retry() {
      return this.store.adapterFor('email').retry(this);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/models/integration", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'integration',
    name: (0, _model.attr)('string'),
    slug: (0, _model.attr)('string'),
    type: (0, _model.attr)('string'),
    iconImage: (0, _model.attr)('string'),
    description: (0, _model.attr)('string'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('number'),
    apiKeys: (0, _model.hasMany)('api-key', {
      embedded: 'always',
      async: false
    }),
    webhooks: (0, _model.hasMany)('webhook', {
      embedded: 'always',
      async: false
    }),
    adminKey: Ember.computed('apiKeys.[]', function () {
      return this.apiKeys.findBy('type', 'admin');
    }),
    contentKey: Ember.computed('apiKeys.[]', function () {
      return this.apiKeys.findBy('type', 'content');
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/models/invite", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    token: (0, _model.attr)('string'),
    email: (0, _model.attr)('string'),
    expires: (0, _model.attr)('number'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('number'),
    status: (0, _model.attr)('string'),
    role: (0, _model.belongsTo)('role', {
      async: false
    }),
    ajax: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),

    resend() {
      let inviteData = {
        email: this.email,
        role_id: this.role.id
      };
      let inviteUrl = this.get('ghostPaths.url').api('invites');
      return this.ajax.del(`${inviteUrl}${this.id}`).then(() => {
        return this.ajax.post(inviteUrl, {
          data: JSON.stringify({
            invites: [inviteData]
          }),
          contentType: 'application/json'
        });
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/models/label", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'label',
    name: (0, _model.attr)('string'),
    slug: (0, _model.attr)('string'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedBy: (0, _model.attr)('number'),
    count: (0, _model.attr)('raw'),
    feature: Ember.inject.service()
  });

  _exports.default = _default;
});
;define("ghost-admin/models/member-product", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend({
    name: 'Name of the product',
    slug: 'Slug for the product'
  });

  _exports.default = _default;
});
;define("ghost-admin/models/member-subscription", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend({
    customer: 'customer_id',
    subscription: 'subscription_id',
    plan: 'plan_id',
    status: 'subscription status',
    name: 'plan nickname e.g. "Monthly"',
    interval: 'how often plan charges e.g "month", "year"',
    amount: 'amount in smallest denomination e.g. cents, so value for 5 dollars would be 500',
    currency: 'e.g. usd',
    last4: 'last four digits of card OR null',
    validUntil: 'epoch timestamp of when current interval ends IN SECONDS'
  });

  _exports.default = _default;
});
;define("ghost-admin/models/member", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine", "ember-concurrency"], function (_exports, _model, _validationEngine, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'member',
    name: (0, _model.attr)('string'),
    email: (0, _model.attr)('string'),
    note: (0, _model.attr)('string'),
    status: (0, _model.attr)('string'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    subscriptions: (0, _model.attr)('member-subscription'),
    subscribed: (0, _model.attr)('boolean', {
      defaultValue: true
    }),
    comped: (0, _model.attr)('boolean', {
      defaultValue: false
    }),
    geolocation: (0, _model.attr)('json-string'),
    emailCount: (0, _model.attr)('number', {
      defaultValue: 0
    }),
    emailOpenedCount: (0, _model.attr)('number', {
      defaultValue: 0
    }),
    emailOpenRate: (0, _model.attr)('number'),
    products: (0, _model.attr)('member-product'),
    labels: (0, _model.hasMany)('label', {
      embedded: 'always',
      async: false
    }),
    emailRecipients: (0, _model.hasMany)('emailRecipient', {
      embedded: 'always',
      async: false
    }),
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),

    // remove client-generated labels, which have `id: null`.
    // Ember Data won't recognize/update them automatically
    // when returned from the server with ids.
    // https://github.com/emberjs/data/issues/1829
    updateLabels() {
      let labels = this.labels;
      let oldLabels = labels.filterBy('id', null);
      labels.removeObjects(oldLabels);
      oldLabels.invoke('deleteRecord');
    },

    fetchSigninUrl: (0, _emberConcurrency.task)(function* () {
      let url = this.get('ghostPaths.url').api('members', this.id, 'signin_urls');
      let response = yield this.ajax.request(url);
      return response.member_signin_urls[0];
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/models/navigation-item", ["exports", "ghost-admin/mixins/validation-engine"], function (_exports, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend(_validationEngine.default, {
    label: '',
    url: '',
    isNew: false,
    isSecondary: false,
    validationType: 'navItem',
    isComplete: Ember.computed('label', 'url', function () {
      let {
        label,
        url
      } = this;
      return !Ember.isBlank(label) && !Ember.isBlank(url);
    }),
    isBlank: Ember.computed('label', 'url', function () {
      let {
        label,
        url
      } = this;
      return Ember.isBlank(label) && Ember.isBlank(url);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/models/notification", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    custom: (0, _model.attr)('boolean'),
    dismissible: (0, _model.attr)('boolean'),
    key: (0, _model.attr)('string'),
    message: (0, _model.attr)('string'),
    status: (0, _model.attr)('string'),
    type: (0, _model.attr)('string')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/obj-hash", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend({
    contentLength: 0,
    length: Ember.computed.alias('contentLength'),
    init: function () {
      this._super();

      this.content = {};
    },
    add: function (obj) {
      var id = this.generateId();
      this.get('content')[id] = obj;
      this.incrementProperty("contentLength");
      return id;
    },
    getObj: function (key) {
      var res = this.get('content')[key];

      if (!res) {
        throw "no obj for key " + key;
      }

      return res;
    },
    generateId: function () {
      var num = Math.random() * 1000000000000.0;
      num = parseInt(num);
      num = "" + num;
      return num;
    },
    keys: function () {
      var res = [];

      for (var key in this.get('content')) {
        res.push(key);
      }

      return Ember.A(res);
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/models/offer", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'offer',
    name: (0, _model.attr)('string'),
    code: (0, _model.attr)('string'),
    cadence: (0, _model.attr)('string'),
    status: (0, _model.attr)('string', {
      defaultValue: 'active'
    }),
    tier: (0, _model.attr)(),
    stripeCouponId: (0, _model.attr)('string'),
    redemptionCount: (0, _model.attr)('number'),
    currency: (0, _model.attr)('string'),
    type: (0, _model.attr)('string', {
      defaultValue: 'percent'
    }),
    amount: (0, _model.attr)('number'),
    duration: (0, _model.attr)('string', {
      defaultValue: 'once'
    }),
    durationInMonths: (0, _model.attr)('number'),
    displayTitle: (0, _model.attr)('string'),
    displayDescription: (0, _model.attr)('string'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    updatedAtUTC: (0, _model.attr)('moment-utc')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/page", ["exports", "ghost-admin/models/post"], function (_exports, _post) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _post.default.extend({
    displayName: 'page'
  });

  _exports.default = _default;
});
;define("ghost-admin/models/post", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine", "ghost-admin/utils/bound-one-way", "moment", "koenig-editor/components/koenig-editor"], function (_exports, _model, _validationEngine, _boundOneWay, _moment, _koenigEditor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // eslint-disable-next-line ghost/ember/no-observers
  // ember-cli-shims doesn't export these so we must get them manually
  const {
    Comparable
  } = Ember;

  function statusCompare(postA, postB) {
    let status1 = postA.get('status');
    let status2 = postB.get('status'); // if any of those is empty

    if (!status1 && !status2) {
      return 0;
    }

    if (!status1 && status2) {
      return -1;
    }

    if (!status2 && status1) {
      return 1;
    } // We have to make sure, that scheduled posts will be listed first
    // after that, draft and published will be sorted alphabetically and don't need
    // any manual comparison.


    if (status1 === 'scheduled' && (status2 === 'draft' || status2 === 'published')) {
      return -1;
    }

    if (status2 === 'scheduled' && (status1 === 'draft' || status1 === 'published')) {
      return 1;
    }

    return Ember.compare(status1.valueOf(), status2.valueOf());
  }

  function publishedAtCompare(postA, postB) {
    let published1 = postA.get('publishedAtUTC');
    let published2 = postB.get('publishedAtUTC');

    if (!published1 && !published2) {
      return 0;
    }

    if (!published1 && published2) {
      return -1;
    }

    if (!published2 && published1) {
      return 1;
    }

    return Ember.compare(published1.valueOf(), published2.valueOf());
  }

  var _default = _model.default.extend(Comparable, _validationEngine.default, {
    config: Ember.inject.service(),
    feature: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    clock: Ember.inject.service(),
    settings: Ember.inject.service(),
    displayName: 'post',
    validationType: 'post',
    createdAtUTC: (0, _model.attr)('moment-utc'),
    excerpt: (0, _model.attr)('string'),
    customExcerpt: (0, _model.attr)('string'),
    featured: (0, _model.attr)('boolean', {
      defaultValue: false
    }),
    canonicalUrl: (0, _model.attr)('string'),
    codeinjectionFoot: (0, _model.attr)('string', {
      defaultValue: ''
    }),
    codeinjectionHead: (0, _model.attr)('string', {
      defaultValue: ''
    }),
    customTemplate: (0, _model.attr)('string'),
    ogImage: (0, _model.attr)('string'),
    ogTitle: (0, _model.attr)('string'),
    ogDescription: (0, _model.attr)('string'),
    twitterImage: (0, _model.attr)('string'),
    twitterTitle: (0, _model.attr)('string'),
    twitterDescription: (0, _model.attr)('string'),
    emailSubject: (0, _model.attr)('string'),
    html: (0, _model.attr)('string'),
    visibility: (0, _model.attr)('string'),
    visibilityFilter: (0, _model.attr)('string'),
    metaDescription: (0, _model.attr)('string'),
    metaTitle: (0, _model.attr)('string'),
    mobiledoc: (0, _model.attr)('json-string', {
      defaultValue: () => JSON.parse(JSON.stringify(_koenigEditor.BLANK_DOC))
    }),
    plaintext: (0, _model.attr)('string'),
    publishedAtUTC: (0, _model.attr)('moment-utc'),
    slug: (0, _model.attr)('string'),
    status: (0, _model.attr)('string', {
      defaultValue: 'draft'
    }),
    title: (0, _model.attr)('string', {
      defaultValue: ''
    }),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('number'),
    url: (0, _model.attr)('string'),
    uuid: (0, _model.attr)('string'),
    emailRecipientFilter: (0, _model.attr)('members-segment-string', {
      defaultValue: null
    }),
    emailOnly: (0, _model.attr)('boolean', {
      defaultValue: false
    }),
    featureImage: (0, _model.attr)('string'),
    featureImageAlt: (0, _model.attr)('string'),
    featureImageCaption: (0, _model.attr)('string'),
    authors: (0, _model.hasMany)('user', {
      embedded: 'always',
      async: false
    }),
    createdBy: (0, _model.belongsTo)('user', {
      async: true
    }),
    email: (0, _model.belongsTo)('email', {
      async: false
    }),
    publishedBy: (0, _model.belongsTo)('user', {
      async: true
    }),
    tags: (0, _model.hasMany)('tag', {
      embedded: 'always',
      async: false
    }),
    primaryAuthor: Ember.computed.reads('authors.firstObject'),
    primaryTag: Ember.computed.reads('tags.firstObject'),
    scratch: null,
    titleScratch: null,
    // HACK: used for validation so that date/time can be validated based on
    // eventual status rather than current status
    statusScratch: null,
    // For use by date/time pickers - will be validated then converted to UTC
    // on save. Updated by an observer whenever publishedAtUTC changes.
    // Everything that revolves around publishedAtUTC only cares about the saved
    // value so this should be almost entirely internal
    publishedAtBlogDate: '',
    publishedAtBlogTime: '',
    canonicalUrlScratch: (0, _boundOneWay.default)('canonicalUrl'),
    customExcerptScratch: (0, _boundOneWay.default)('customExcerpt'),
    codeinjectionFootScratch: (0, _boundOneWay.default)('codeinjectionFoot'),
    codeinjectionHeadScratch: (0, _boundOneWay.default)('codeinjectionHead'),
    metaDescriptionScratch: (0, _boundOneWay.default)('metaDescription'),
    metaTitleScratch: (0, _boundOneWay.default)('metaTitle'),
    ogDescriptionScratch: (0, _boundOneWay.default)('ogDescription'),
    ogTitleScratch: (0, _boundOneWay.default)('ogTitle'),
    twitterDescriptionScratch: (0, _boundOneWay.default)('twitterDescription'),
    twitterTitleScratch: (0, _boundOneWay.default)('twitterTitle'),
    emailSubjectScratch: (0, _boundOneWay.default)('emailSubject'),
    isPublished: Ember.computed.equal('status', 'published'),
    isDraft: Ember.computed.equal('status', 'draft'),
    internalTags: Ember.computed.filterBy('tags', 'isInternal', true),
    isScheduled: Ember.computed.equal('status', 'scheduled'),
    isSent: Ember.computed.equal('status', 'sent'),
    isPost: Ember.computed.equal('displayName', 'post'),
    isPage: Ember.computed.equal('displayName', 'page'),
    hasEmail: Ember.computed('email', 'emailOnly', function () {
      return this.email !== null || this.emailOnly;
    }),
    willEmail: Ember.computed('emailRecipientFilter', function () {
      return this.emailRecipientFilter !== null;
    }),
    previewUrl: Ember.computed('uuid', 'ghostPaths.url', 'config.blogUrl', function () {
      let blogUrl = this.get('config.blogUrl');
      let uuid = this.uuid; // routeKeywords.preview: 'p'

      let previewKeyword = 'p'; // New posts don't have a preview

      if (!uuid) {
        return '';
      }

      return this.get('ghostPaths.url').join(blogUrl, previewKeyword, uuid);
    }),
    isPublic: Ember.computed('visibility', function () {
      return this.visibility === 'public' ? true : false;
    }),
    visibilitySegment: Ember.computed('visibility', 'visibilityFilter', 'isPublic', function () {
      if (this.isPublic) {
        return this.settings.get('defaultContentVisibility') === 'paid' ? 'status:-free' : 'status:free,status:-free';
      } else {
        if (this.visibility === 'members') {
          return 'status:free,status:-free';
        }

        if (this.visibility === 'paid') {
          return 'status:-free';
        }

        if (this.visibility === 'filter') {
          return this.visibilityFilter;
        }

        return this.visibility;
      }
    }),
    // check every second to see if we're past the scheduled time
    // will only re-compute if this property is being observed elsewhere
    pastScheduledTime: Ember.computed('isScheduled', 'publishedAtUTC', 'clock.second', function () {
      if (this.isScheduled) {
        let now = _moment.default.utc();

        let publishedAtUTC = this.publishedAtUTC || now;
        let pastScheduledTime = publishedAtUTC.diff(now, 'hours', true) < 0; // force a recompute

        this.get('clock.second');
        return pastScheduledTime;
      } else {
        return false;
      }
    }),
    publishedAtBlogTZ: Ember.computed('publishedAtBlogDate', 'publishedAtBlogTime', 'settings.timezone', {
      get() {
        return this._getPublishedAtBlogTZ();
      },

      set(key, value) {
        let momentValue = value ? (0, _moment.default)(value) : null;

        this._setPublishedAtBlogStrings(momentValue);

        return this._getPublishedAtBlogTZ();
      }

    }),

    _getPublishedAtBlogTZ() {
      let publishedAtUTC = this.publishedAtUTC;
      let publishedAtBlogDate = this.publishedAtBlogDate;
      let publishedAtBlogTime = this.publishedAtBlogTime;
      let blogTimezone = this.get('settings.timezone');

      if (!publishedAtUTC && Ember.isBlank(publishedAtBlogDate) && Ember.isBlank(publishedAtBlogTime)) {
        return null;
      }

      if (publishedAtBlogDate && publishedAtBlogTime) {
        let publishedAtBlog = _moment.default.tz(`${publishedAtBlogDate} ${publishedAtBlogTime}`, blogTimezone);
        /**
         * Note:
         * If you create a post and publish it, we send seconds to the database.
         * If you edit the post afterwards, ember would send the date without seconds, because
         * the `publishedAtUTC` is based on `publishedAtBlogTime`, which is only in seconds.
         * The date time picker doesn't use seconds.
         *
         * This condition prevents the case:
         *   - you edit a post, but you don't change the published_at time
         *   - we keep the original date with seconds
         *
         * See https://github.com/TryGhost/Ghost/issues/8603#issuecomment-309538395.
         */


        if (publishedAtUTC && publishedAtBlog.diff(publishedAtUTC.clone().startOf('minutes')) === 0) {
          return publishedAtUTC;
        }

        return publishedAtBlog;
      } else {
        return _moment.default.tz(this.publishedAtUTC, blogTimezone);
      }
    },

    // TODO: is there a better way to handle this?
    // eslint-disable-next-line ghost/ember/no-observers
    _setPublishedAtBlogTZ: Ember.on('init', Ember.observer('publishedAtUTC', 'settings.timezone', function () {
      let publishedAtUTC = this.publishedAtUTC;

      this._setPublishedAtBlogStrings(publishedAtUTC);
    })),

    _setPublishedAtBlogStrings(momentDate) {
      if (momentDate) {
        let blogTimezone = this.get('settings.timezone');

        let publishedAtBlog = _moment.default.tz(momentDate, blogTimezone);

        this.set('publishedAtBlogDate', publishedAtBlog.format('YYYY-MM-DD'));
        this.set('publishedAtBlogTime', publishedAtBlog.format('HH:mm'));
      } else {
        this.set('publishedAtBlogDate', '');
        this.set('publishedAtBlogTime', '');
      }
    },

    // remove client-generated tags, which have `id: null`.
    // Ember Data won't recognize/update them automatically
    // when returned from the server with ids.
    // https://github.com/emberjs/data/issues/1829
    updateTags() {
      let tags = this.tags;
      let oldTags = tags.filterBy('id', null);
      tags.removeObjects(oldTags);
      oldTags.invoke('deleteRecord');
    },

    isAuthoredByUser(user) {
      return this.authors.includes(user);
    },

    // a custom sort function is needed in order to sort the posts list the same way the server would:
    //     status: scheduled, draft, published
    //     publishedAt: DESC
    //     updatedAt: DESC
    //     id: DESC
    compare(postA, postB) {
      let updated1 = postA.get('updatedAtUTC');
      let updated2 = postB.get('updatedAtUTC');
      let idResult, publishedAtResult, statusResult, updatedAtResult; // when `updatedAt` is undefined, the model is still
      // being written to with the results from the server

      if (postA.get('isNew') || !updated1) {
        return -1;
      }

      if (postB.get('isNew') || !updated2) {
        return 1;
      } // TODO: revisit the ID sorting because we no longer have auto-incrementing IDs


      idResult = Ember.compare(postA.get('id'), postB.get('id'));
      statusResult = statusCompare(postA, postB);
      updatedAtResult = Ember.compare(updated1.valueOf(), updated2.valueOf());
      publishedAtResult = publishedAtCompare(postA, postB);

      if (statusResult === 0) {
        if (publishedAtResult === 0) {
          if (updatedAtResult === 0) {
            // This should be DESC
            return idResult * -1;
          } // This should be DESC


          return updatedAtResult * -1;
        } // This should be DESC


        return publishedAtResult * -1;
      }

      return statusResult;
    },

    // this is a hook added by the ValidationEngine mixin and is called after
    // successful validation and before this.save()
    //
    // the publishedAtBlog{Date/Time} strings are set separately so they can be
    // validated, grab that time if it exists and set the publishedAtUTC
    beforeSave() {
      let publishedAtBlogTZ = this.publishedAtBlogTZ;
      let publishedAtUTC = publishedAtBlogTZ ? publishedAtBlogTZ.utc() : null;
      this.set('publishedAtUTC', publishedAtUTC);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/models/product-benefit-item", ["exports", "ghost-admin/mixins/validation-engine"], function (_exports, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend(_validationEngine.default, {
    name: '',
    isNew: false,
    validationType: 'productBenefitItem',
    isComplete: Ember.computed('name', function () {
      let {
        name
      } = this;
      return !Ember.isBlank(name);
    }),
    isBlank: Ember.computed('name', function () {
      let {
        name
      } = this;
      return Ember.isBlank(name);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/models/product", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'product',
    name: (0, _model.attr)('string'),
    description: (0, _model.attr)('string'),
    active: (0, _model.attr)('boolean'),
    slug: (0, _model.attr)('string'),
    type: (0, _model.attr)('string', {
      defaultValue: 'paid'
    }),
    monthlyPrice: (0, _model.attr)('stripe-price'),
    yearlyPrice: (0, _model.attr)('stripe-price'),
    benefits: (0, _model.attr)('product-benefits')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/role", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _model.default.extend({
    name: (0, _model.attr)('string'),
    description: (0, _model.attr)('string'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedBy: (0, _model.attr)('number'),
    lowerCaseName: Ember.computed('name', function () {
      return (this.name || '').toLocaleLowerCase();
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/models/setting", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'setting',
    title: (0, _model.attr)('string'),
    description: (0, _model.attr)('string'),
    logo: (0, _model.attr)('string'),
    coverImage: (0, _model.attr)('string'),
    icon: (0, _model.attr)('string'),
    accentColor: (0, _model.attr)('string'),
    lang: (0, _model.attr)('string'),
    timezone: (0, _model.attr)('string', {
      defaultValue: 'Etc/UTC'
    }),
    codeinjectionHead: (0, _model.attr)('string'),
    codeinjectionFoot: (0, _model.attr)('string'),
    facebook: (0, _model.attr)('facebook-url-user'),
    twitter: (0, _model.attr)('twitter-url-user'),
    labs: (0, _model.attr)('string'),
    navigation: (0, _model.attr)('navigation-settings'),
    secondaryNavigation: (0, _model.attr)('navigation-settings', {
      isSecondary: true
    }),
    isPrivate: (0, _model.attr)('boolean'),
    publicHash: (0, _model.attr)('string'),
    password: (0, _model.attr)('string'),
    slack: (0, _model.attr)('slack-settings'),
    amp: (0, _model.attr)('boolean'),
    ampGtagId: (0, _model.attr)('string'),
    firstpromoter: (0, _model.attr)('boolean'),
    firstpromoterId: (0, _model.attr)('string'),
    unsplash: (0, _model.attr)('boolean'),
    metaTitle: (0, _model.attr)('string'),
    metaDescription: (0, _model.attr)('string'),
    twitterTitle: (0, _model.attr)('string'),
    twitterDescription: (0, _model.attr)('string'),
    twitterImage: (0, _model.attr)('string'),
    ogTitle: (0, _model.attr)('string'),
    ogDescription: (0, _model.attr)('string'),
    ogImage: (0, _model.attr)('string'),
    mailgunApiKey: (0, _model.attr)('string'),
    mailgunDomain: (0, _model.attr)('string'),
    mailgunBaseUrl: (0, _model.attr)('string'),
    emailTrackOpens: (0, _model.attr)('boolean'),
    portalButton: (0, _model.attr)('boolean'),
    portalName: (0, _model.attr)('boolean'),
    portalPlans: (0, _model.attr)('json-string'),
    portalProducts: (0, _model.attr)('json-string'),
    portalButtonStyle: (0, _model.attr)('string'),
    portalButtonIcon: (0, _model.attr)('string'),
    portalButtonSignupText: (0, _model.attr)('string'),
    sharedViews: (0, _model.attr)('string'),

    /**
     * Members settings
     */
    membersSignupAccess: (0, _model.attr)('string'),
    defaultContentVisibility: (0, _model.attr)('string'),
    membersFromAddress: (0, _model.attr)('string'),
    membersSupportAddress: (0, _model.attr)('string'),
    membersReplyAddress: (0, _model.attr)('string'),
    membersPaidSignupRedirect: (0, _model.attr)('string'),
    membersFreeSignupRedirect: (0, _model.attr)('string'),
    membersFreePriceName: (0, _model.attr)('string'),
    membersFreePriceDescription: (0, _model.attr)('string'),
    membersMonthlyPriceId: (0, _model.attr)('string'),
    membersYearlyPriceId: (0, _model.attr)('string'),
    stripeProductName: (0, _model.attr)('string'),
    stripeSecretKey: (0, _model.attr)('string'),
    stripePublishableKey: (0, _model.attr)('string'),
    stripePlans: (0, _model.attr)('json-string'),
    stripeConnectIntegrationToken: (0, _model.attr)('string'),
    stripeConnectPublishableKey: (0, _model.attr)('string'),
    stripeConnectSecretKey: (0, _model.attr)('string'),
    stripeConnectLivemode: (0, _model.attr)('boolean'),
    stripeConnectDisplayName: (0, _model.attr)('string'),
    stripeConnectAccountId: (0, _model.attr)('string'),

    /**
    * Newsletter settings
    */
    newsletterHeaderImage: (0, _model.attr)('string'),
    newsletterShowHeaderIcon: (0, _model.attr)('boolean'),
    newsletterShowHeaderTitle: (0, _model.attr)('boolean'),
    newsletterTitleFontCategory: (0, _model.attr)('string'),
    newsletterTitleAlignment: (0, _model.attr)('string'),
    newsletterShowFeatureImage: (0, _model.attr)('boolean'),
    newsletterBodyFontCategory: (0, _model.attr)('string'),
    newsletterFooterContent: (0, _model.attr)('string'),
    newsletterShowBadge: (0, _model.attr)('boolean'),

    /**
     * OAuth settings
     */
    oauthClientId: (0, _model.attr)('string'),
    oauthClientSecret: (0, _model.attr)('string'),

    /**
     * Editor settings
     */
    editorIsLaunchComplete: (0, _model.attr)('boolean'),
    editorDefaultEmailRecipients: (0, _model.attr)('string'),
    editorDefaultEmailRecipientsFilter: (0, _model.attr)('members-segment-string'),
    emailVerificationRequired: (0, _model.attr)('boolean'),
    mailgunIsConfigured: Ember.computed.and('mailgunApiKey', 'mailgunDomain', 'mailgunBaseUrl')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/slack-integration", ["exports", "ghost-admin/mixins/validation-engine"], function (_exports, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend(_validationEngine.default, {
    // values entered here will act as defaults
    url: '',
    username: '',
    validationType: 'slackIntegration',
    isActive: Ember.computed('url', function () {
      let url = this.url;
      return !Ember.isBlank(url);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/models/snippet", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'snippet',
    name: (0, _model.attr)('string'),
    mobiledoc: (0, _model.attr)('json-string'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    updatedAtUTC: (0, _model.attr)('moment-utc')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/stripe-price", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend({
    id: 'ID in Ghost',
    stripe_price_id: 'ID of the Stripe Price',
    stripe_product_id: 'ID of the Stripe Product the Stripe Price is associated with',
    nickname: 'price nickname e.g. "Monthly"',
    description: 'price description e.g. "Full access"',
    amount: 'amount in smallest denomination e.g. cents, so value for 5 dollars would be 500',
    currency: 'e.g. usd',
    type: 'either one_time or recurring',
    interval: 'will be `null` if type is one_time, otherwise how often price charges e.g "month", "year"'
  });

  _exports.default = _default;
});
;define("ghost-admin/models/tag", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'tag',
    name: (0, _model.attr)('string'),
    slug: (0, _model.attr)('string'),
    description: (0, _model.attr)('string'),
    parent: (0, _model.attr)('string'),
    // unused
    metaTitle: (0, _model.attr)('string'),
    metaDescription: (0, _model.attr)('string'),
    twitterImage: (0, _model.attr)('string'),
    twitterTitle: (0, _model.attr)('string'),
    twitterDescription: (0, _model.attr)('string'),
    ogImage: (0, _model.attr)('string'),
    ogTitle: (0, _model.attr)('string'),
    ogDescription: (0, _model.attr)('string'),
    codeinjectionHead: (0, _model.attr)('string'),
    codeinjectionFoot: (0, _model.attr)('string'),
    canonicalUrl: (0, _model.attr)('string'),
    accentColor: (0, _model.attr)('string'),
    featureImage: (0, _model.attr)('string'),
    visibility: (0, _model.attr)('string', {
      defaultValue: 'public'
    }),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedBy: (0, _model.attr)('number'),
    count: (0, _model.attr)('raw'),
    isInternal: Ember.computed.equal('visibility', 'internal'),
    isPublic: Ember.computed.equal('visibility', 'public'),
    feature: Ember.inject.service(),

    updateVisibility() {
      let internalRegex = /^#.?/;
      this.set('visibility', internalRegex.test(this.name) ? 'internal' : 'public');
    },

    save() {
      if (this.get('changedAttributes.name') && !this.isDeleted) {
        this.updateVisibility();
      }

      return this._super(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/models/theme", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    active: (0, _model.attr)('boolean'),
    errors: (0, _model.attr)('raw'),
    name: (0, _model.attr)('string'),
    package: (0, _model.attr)('raw'),
    templates: (0, _model.attr)('raw', {
      defaultValue: () => []
    }),
    warnings: (0, _model.attr)('raw'),
    customTemplates: Ember.computed('templates.[]', function () {
      let templates = this.templates || [];
      return templates.filter(function (template) {
        return Ember.isBlank(template.slug);
      });
    }),
    slugTemplates: Ember.computed('templates.[]', function () {
      let templates = this.templates || [];
      return templates.filter(function (template) {
        return !Ember.isBlank(template.slug);
      });
    }),

    activate() {
      let adapter = this.store.adapterFor(this.constructor.modelName);
      return adapter.activate(this).then(() => {
        // the server only gives us the newly active theme back so we need
        // to manually mark other themes as inactive in the store
        let activeThemes = this.store.peekAll('theme').filterBy('active', true);
        activeThemes.forEach(theme => {
          if (theme !== this) {
            // store.push is necessary to avoid dirty records that cause
            // problems when we get new data back in subsequent requests
            this.store.push({
              data: {
                id: theme.id,
                type: 'theme',
                attributes: {
                  active: false
                }
              }
            });
          }
        });
        return this;
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/models/user", ["exports", "ghost-admin/models/base", "ghost-admin/mixins/validation-engine", "@ember-data/model", "ember-concurrency"], function (_exports, _base, _validationEngine, _model, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _base.default.extend(_validationEngine.default, {
    validationType: 'user',
    name: (0, _model.attr)('string'),
    slug: (0, _model.attr)('string'),
    email: (0, _model.attr)('string'),
    profileImage: (0, _model.attr)('string'),
    coverImage: (0, _model.attr)('string'),
    bio: (0, _model.attr)('string'),
    website: (0, _model.attr)('string'),
    location: (0, _model.attr)('string'),
    accessibility: (0, _model.attr)('string'),
    status: (0, _model.attr)('string'),
    metaTitle: (0, _model.attr)('string'),
    metaDescription: (0, _model.attr)('string'),
    lastLoginUTC: (0, _model.attr)('moment-utc'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('number'),
    roles: (0, _model.hasMany)('role', {
      embedded: 'always',
      async: false
    }),
    count: (0, _model.attr)('raw'),
    facebook: (0, _model.attr)('facebook-url-user'),
    twitter: (0, _model.attr)('twitter-url-user'),
    tour: (0, _model.attr)('json-string'),
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),
    session: Ember.inject.service(),
    notifications: Ember.inject.service(),
    config: Ember.inject.service(),
    // TODO: Once client-side permissions are in place,
    // remove the hard role check.
    isContributor: Ember.computed.equal('role.name', 'Contributor'),
    isAuthor: Ember.computed.equal('role.name', 'Author'),
    isEditor: Ember.computed.equal('role.name', 'Editor'),
    isAdminOnly: Ember.computed.equal('role.name', 'Administrator'),
    isOwnerOnly: Ember.computed.equal('role.name', 'Owner'),
    // These are used in enough places that it's useful to throw them here
    isAdmin: Ember.computed.or('isOwnerOnly', 'isAdminOnly'),
    isAuthorOrContributor: Ember.computed.or('isAuthor', 'isContributor'),
    isLoggedIn: Ember.computed('id', 'session.user.id', function () {
      return this.id === this.get('session.user.id');
    }),
    isActive: Ember.computed('status', function () {
      // TODO: review "locked" as an "active" status
      return ['active', 'warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].indexOf(this.status) > -1;
    }),
    isSuspended: Ember.computed.equal('status', 'inactive'),
    isLocked: Ember.computed.equal('status', 'locked'),
    role: Ember.computed('roles', {
      get() {
        return this.get('roles.firstObject');
      },

      set(key, value) {
        // Only one role per user, so remove any old data.
        this.roles.clear();
        this.roles.pushObject(value);
        return value;
      }

    }),
    profileImageUrl: Ember.computed('ghostPaths.assetRoot', 'profileImage', function () {
      // keep path separate so asset rewriting correctly picks it up
      let defaultImage = '/img/user-image.png';
      let defaultPath = this.ghostPaths.assetRoot.replace(/\/$/, '') + defaultImage;
      return this.profileImage || defaultPath;
    }),
    coverImageUrl: Ember.computed('ghostPaths.assetRoot', 'coverImage', function () {
      // keep path separate so asset rewriting correctly picks it up
      let defaultImage = '/img/user-cover.png';
      let defaultPath = this.ghostPaths.assetRoot.replace(/\/$/, '') + defaultImage;
      return this.coverImage || defaultPath;
    }),
    saveNewPassword: (0, _emberConcurrency.task)(function* () {
      let validation = this.isLoggedIn ? 'ownPasswordChange' : 'passwordChange';

      try {
        yield this.validate({
          property: validation
        });
      } catch (e) {
        // validation error, don't do anything
        return;
      }

      try {
        let url = this.get('ghostPaths.url').api('users', 'password');
        yield this.ajax.put(url, {
          data: {
            password: [{
              user_id: this.id,
              oldPassword: this.password,
              newPassword: this.newPassword,
              ne2Password: this.ne2Password
            }]
          }
        });
        this.setProperties({
          password: '',
          newPassword: '',
          ne2Password: ''
        });
        this.notifications.showNotification('Password updated', {
          type: 'success',
          key: 'user.change-password.success'
        }); // clear errors manually for ne2password because validation
        // engine only clears the "validated proeprty"
        // TODO: clean up once we have a better validations library

        this.errors.remove('ne2Password');
        return true;
      } catch (error) {
        this.notifications.showAPIError(error, {
          key: 'user.change-password'
        });
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/models/webhook", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'webhook',
    name: (0, _model.attr)('string'),
    event: (0, _model.attr)('string'),
    targetUrl: (0, _model.attr)('string'),
    secret: (0, _model.attr)('string'),
    lastTriggeredAtUTC: (0, _model.attr)('moment-utc'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('number'),
    integration: (0, _model.belongsTo)('integration')
  });

  _exports.default = _default;
});
;define("ghost-admin/modifiers/autofocus", ["exports", "ember-modifier"], function (_exports, _emberModifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberModifier.modifier)(element => element.focus());

  _exports.default = _default;
});
;define("ghost-admin/modifiers/css-transition", ["exports", "ember-css-transitions/modifiers/css-transition"], function (_exports, _cssTransition) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _cssTransition.default;
    }
  });
});
;define("ghost-admin/modifiers/did-insert", ["exports", "@ember/render-modifiers/modifiers/did-insert"], function (_exports, _didInsert) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _didInsert.default;
    }
  });
});
;define("ghost-admin/modifiers/did-update", ["exports", "@ember/render-modifiers/modifiers/did-update"], function (_exports, _didUpdate) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _didUpdate.default;
    }
  });
});
;define("ghost-admin/modifiers/in-viewport", ["exports", "ember-in-viewport/modifiers/in-viewport"], function (_exports, _inViewport) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _inViewport.default;
    }
  });
});
;define("ghost-admin/modifiers/movable", ["exports", "ember-modifier"], function (_exports, _emberModifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let MovableModifier = (_dec = Ember.inject.service, _dec2 = Ember._action, _dec3 = Ember._action, _dec4 = Ember._action, _dec5 = Ember._action, (_class = class MovableModifier extends _emberModifier.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "dropdown", _descriptor, this);

      _defineProperty(this, "moveThreshold", 3);

      _defineProperty(this, "active", false);

      _defineProperty(this, "currentX", undefined);

      _defineProperty(this, "currentY", undefined);

      _defineProperty(this, "initialX", undefined);

      _defineProperty(this, "initialY", undefined);

      _defineProperty(this, "xOffset", 0);

      _defineProperty(this, "yOffset", 0);
    }

    // Lifecycle hooks ---------------------------------------------------------
    didInstall() {
      this.addStartEventListeners();

      if (this.args.named.adjustOnResize) {
        this._resizeObserver = new ResizeObserver(() => {
          if (this.currentX === undefined || this.currentY === undefined) {
            return;
          }

          const {
            x,
            y
          } = this.args.named.adjustOnResize(this.element, {
            x: this.currentX,
            y: this.currentY
          });

          if (x === this.currentX && y === this.currentY) {
            return;
          }

          this.currentX = x;
          this.initialX = x;
          this.xOffset = x;
          this.currentY = y;
          this.initialY = y;
          this.yOffset = y;
          this.setTranslate(x, y);
        });

        this._resizeObserver.observe(this.element);
      }
    }

    willDestroy() {
      this.removeEventListeners();
      this.removeResizeObserver();
      this.enableSelection();
    } // Custom methods -----------------------------------------------------------


    addStartEventListeners() {
      this.element.addEventListener('touchstart', this.dragStart, false);
      this.element.addEventListener('mousedown', this.dragStart, false);
    }

    removeStartEventListeners() {
      this.element.removeEventListener('touchstart', this.dragStart, false);
      this.element.removeEventListener('mousedown', this.dragStart, false);
    }

    addActiveEventListeners() {
      window.addEventListener('touchend', this.dragEnd, {
        capture: true,
        passive: false
      });
      window.addEventListener('touchmove', this.drag, {
        capture: true,
        passive: false
      });
      window.addEventListener('mouseup', this.dragEnd, {
        capture: true,
        passive: false
      });
      window.addEventListener('mousemove', this.drag, {
        capture: true,
        passive: false
      });
    }

    removeActiveEventListeners() {
      window.removeEventListener('touchend', this.dragEnd, {
        capture: true,
        passive: false
      });
      window.removeEventListener('touchmove', this.drag, {
        capture: true,
        passive: false
      });
      window.removeEventListener('mouseup', this.dragEnd, {
        capture: true,
        passive: false
      });
      window.removeEventListener('mousemove', this.drag, {
        capture: true,
        passive: false
      }); // Removing this immediately results in the click event behind re-enabled in the same
      // event loop meaning that it doesn't have the desired effect when dragging out of the canvas.
      // Putting in the next tick stops the immediate click event firing when finishing drag

      setTimeout(() => {
        window.removeEventListener('click', this.cancelClick, {
          capture: true,
          passive: false
        });
      }, 1);
    }

    removeEventListeners() {
      this.removeStartEventListeners();
      this.removeActiveEventListeners();
    }

    removeResizeObserver() {
      this._resizeObserver?.disconnect();
    }

    dragStart(e) {
      if (e.type === 'touchstart' || e.button === 0) {
        if (e.type === 'touchstart') {
          this.initialX = e.touches[0].clientX - this.xOffset;
          this.initialY = e.touches[0].clientY - this.yOffset;
        } else {
          this.initialX = e.clientX - this.xOffset;
          this.initialY = e.clientY - this.yOffset;
        }

        for (const elem of e.path || e.composedPath()) {
          if (elem.matches('input, .ember-basic-dropdown-trigger')) {
            break;
          }

          if (elem === this.element) {
            this.addActiveEventListeners();
            break;
          }
        }
      }
    }

    drag(e) {
      e.preventDefault();
      let eventX, eventY;

      if (e.type === 'touchmove') {
        eventX = e.touches[0].clientX;
        eventY = e.touches[0].clientY;
      } else {
        eventX = e.clientX;
        eventY = e.clientY;
      }

      if (!this.active) {
        if (Math.abs(Math.abs(this.initialX - eventX) - Math.abs(this.xOffset)) > this.moveThreshold || Math.abs(Math.abs(this.initialY - eventY) - Math.abs(this.yOffset)) > this.moveThreshold) {
          this.dropdown.closeDropdowns();
          this.disableScroll();
          this.disableSelection();
          this.disablePointerEvents();
          this.active = true;
        }
      }

      if (this.active) {
        this.currentX = eventX - this.initialX;
        this.currentY = eventY - this.initialY;
        this.xOffset = this.currentX;
        this.yOffset = this.currentY;
        this.setTranslate(this.currentX, this.currentY);
      }
    }

    dragEnd(e) {
      e.preventDefault();
      e.stopPropagation();
      this.active = false;
      this.initialX = this.currentX;
      this.initialY = this.currentY;
      this.removeActiveEventListeners();
      this.enableScroll();
      this.enableSelection(); // timeout required so immediate events blocked until the dragEnd has fully realised

      setTimeout(() => {
        this.enablePointerEvents();
      }, 5);
    }

    cancelClick(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    setTranslate(xPos, yPos) {
      this.element.style.transform = `translate3d(${xPos}px, ${yPos}px, 0)`;
    }

    disableScroll() {
      this.originalOverflow = this.element.style.overflow;
      this.element.style.overflow = 'hidden';
    }

    enableScroll() {
      this.element.style.overflow = this.originalOverflow;
    }

    disableSelection() {
      window.getSelection().removeAllRanges();
      const stylesheet = document.createElement('style');
      stylesheet.id = `stylesheet-${Ember.guidFor(this)}`;
      document.head.appendChild(stylesheet);
      stylesheet.sheet.insertRule('* { user-select: none !important; }', 0);
    }

    enableSelection() {
      const stylesheet = document.getElementById(`stylesheet-${Ember.guidFor(this)}`);
      stylesheet?.remove();
    } // disabling pointer events prevents inputs being activated when drag finishes,
    // preventing clicks stops any event handlers that may otherwise result in the
    // movable element being closed when the drag finishes


    disablePointerEvents() {
      this.element.style.pointerEvents = 'none';
      window.addEventListener('click', this.cancelClick, {
        capture: true,
        passive: false
      });
    }

    enablePointerEvents() {
      this.element.style.pointerEvents = '';
      window.removeEventListener('click', this.cancelClick, {
        capture: true,
        passive: false
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "dropdown", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "dragStart", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "dragStart"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "drag", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "drag"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "dragEnd", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "dragEnd"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "cancelClick", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, "cancelClick"), _class.prototype)), _class));
  _exports.default = MovableModifier;
});
;define("ghost-admin/modifiers/on-key", ["exports", "ember-keyboard/modifiers/on-key"], function (_exports, _onKey) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _onKey.default;
    }
  });
});
;define("ghost-admin/modifiers/scroll-into-view", ["exports", "ghost-admin/utils/get-scroll-parent", "ember-modifier"], function (_exports, _getScrollParent, _emberModifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberModifier.modifier)((element, _ref, _ref2) => {
    let [shouldScroll = true] = _ref;
    let {
      offset = 0,
      useViewport = true
    } = _ref2;

    if (shouldScroll) {
      const scrollParent = (0, _getScrollParent.default)(element); // scrolls so the element is visible on-screen

      if (useViewport) {
        const elementRect = element.getBoundingClientRect();
        const scrollParentRect = scrollParent.getBoundingClientRect(); // TODO: ensure scroll parent is visible?

        const isOffTop = elementRect.top < 0;
        const isOffBottom = elementRect.bottom > scrollParentRect.bottom;

        if (isOffTop) {// TODO: implement me
        }

        if (isOffBottom) {
          let adjustment = Math.abs(scrollParentRect.bottom - elementRect.bottom); // keep top on screen

          if (elementRect.top - adjustment < offset) {
            const readjustment = Math.abs(elementRect.top - adjustment - offset * 2);
            adjustment -= readjustment;
          }

          const top = scrollParent.scrollTop + adjustment + offset;
          scrollParent.scrollTo({
            top,
            behavior: 'smooth'
          });
        }
      } // scrolls so the element is visible inside of the scroll parent's viewport,
      // may not result in element being visible on-screen if scroll parent is cut off


      if (!useViewport) {
        const isOffTop = element.offsetTop < scrollParent.scrollTop;
        const isOffBottom = scrollParent.scrollTop + scrollParent.offsetHeight < element.offsetTop + element.offsetHeight;

        if (isOffTop) {
          const top = element.offsetTop - offset;
          scrollParent.scrollTo({
            top,
            behavior: 'smooth'
          });
        }

        if (isOffBottom) {
          const top = element.offsetTop - scrollParent.offsetHeight + element.offsetHeight + offset;
          scrollParent.scrollTo({
            top,
            behavior: 'smooth'
          });
        }
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/modifiers/scroll-to", ["exports", "ghost-admin/utils/get-scroll-parent", "ember-modifier"], function (_exports, _getScrollParent, _emberModifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberModifier.modifier)((element, positional, _ref) => {
    let {
      shouldScroll = true
    } = _ref;

    if (shouldScroll) {
      // setTimeout needed to ensure layout has finished and we have accurate
      setTimeout(() => {
        const scrollParent = (0, _getScrollParent.default)(element);
        const y = element.offsetTop;
        scrollParent.scrollTo({
          top: y,
          behavior: 'smooth'
        });
      }, 200);
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/modifiers/scroll-top", ["exports", "ghost-admin/utils/get-scroll-parent", "ember-modifier"], function (_exports, _getScrollParent, _emberModifier) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberModifier.modifier)(element => {
    (0, _getScrollParent.default)(element).scrollTop = 0;
  });

  _exports.default = _default;
});
;define("ghost-admin/modifiers/style", ["exports", "ember-style-modifier/modifiers/style"], function (_exports, _style) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _style.default;
    }
  });
});
;define("ghost-admin/modifiers/will-destroy", ["exports", "@ember/render-modifiers/modifiers/will-destroy"], function (_exports, _willDestroy) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _willDestroy.default;
    }
  });
});
;define("ghost-admin/router", ["exports", "ghost-admin/config/environment", "ghost-admin/utils/ghost-paths"], function (_exports, _environment, _ghostPaths) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const Router = Ember.Router.extend({
    location: _environment.default.locationType,
    // use HTML5 History API instead of hash-tag based URLs
    rootURL: (0, _ghostPaths.default)().adminRoot // admin interface lives under sub-directory /ghost

  });
  Router.map(function () {
    this.route('home', {
      path: '/'
    });
    this.route('setup', function () {
      this.route('one');
      this.route('two');
      this.route('three');
    });
    this.route('signin');
    this.route('signout');
    this.route('signup', {
      path: '/signup/:token'
    });
    this.route('reset', {
      path: '/reset/:token'
    });
    this.route('whatsnew');
    this.route('site');
    this.route('dashboard');
    this.route('launch');
    this.route('pro', function () {
      this.route('pro-sub', {
        path: '/*sub'
      });
    });
    this.route('posts');
    this.route('pages');
    this.route('editor', function () {
      this.route('new', {
        path: ':type'
      });
      this.route('edit', {
        path: ':type/:post_id'
      });
    });
    this.route('tags');
    this.route('tag.new', {
      path: '/tags/new'
    });
    this.route('tag', {
      path: '/tags/:tag_slug'
    });
    this.route('settings');
    this.route('settings.general', {
      path: '/settings/general'
    });
    this.route('settings.membership', {
      path: '/settings/members'
    });
    this.route('settings.members-email', {
      path: '/settings/members-email'
    });
    this.route('settings.code-injection', {
      path: '/settings/code-injection'
    });
    this.route('settings.design', {
      path: '/settings/design'
    }, function () {
      this.route('change-theme', function () {
        this.route('view', {
          path: ':theme_name'
        });
        this.route('install');
      });
    }); // redirect for old install route used by ghost.org/marketplace

    this.route('settings.theme-install', {
      path: '/settings/theme/install'
    });
    this.route('settings.staff', {
      path: '/settings/staff'
    }, function () {
      this.route('user', {
        path: ':user_slug'
      });
    });
    this.route('settings.integrations', {
      path: '/settings/integrations'
    }, function () {
      this.route('new');
    });
    this.route('settings.integration', {
      path: '/settings/integrations/:integration_id'
    }, function () {
      this.route('webhooks.new', {
        path: 'webhooks/new'
      });
      this.route('webhooks.edit', {
        path: 'webhooks/:webhook_id'
      });
    });
    this.route('settings.integrations.slack', {
      path: '/settings/integrations/slack'
    });
    this.route('settings.integrations.amp', {
      path: '/settings/integrations/amp'
    });
    this.route('settings.integrations.firstpromoter', {
      path: '/settings/integrations/firstpromoter'
    });
    this.route('settings.integrations.unsplash', {
      path: '/settings/integrations/unsplash'
    });
    this.route('settings.integrations.zapier', {
      path: '/settings/integrations/zapier'
    });
    this.route('settings.navigation', {
      path: '/settings/navigation'
    });
    this.route('settings.labs', {
      path: '/settings/labs'
    });
    this.route('members', function () {
      this.route('import');
    });
    this.route('member.new', {
      path: '/members/new'
    });
    this.route('member', {
      path: '/members/:member_id'
    });
    this.route('members-activity');
    this.route('offers');
    this.route('offer.new', {
      path: '/offers/new'
    });
    this.route('offer', {
      path: '/offers/:offer_id'
    });
    this.route('error404', {
      path: '/*path'
    });
    this.route('designsandbox');
  });
  var _default = Router;
  _exports.default = _default;
});
;define("ghost-admin/routes/admin", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let AdminRoute = (_dec = Ember.inject.service, (_class = class AdminRoute extends _authenticated.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "session", _descriptor, this);
    }

    beforeModel() {
      super.beforeModel(...arguments);

      if (!this.session.user.isAdmin) {
        return this.transitionTo('home');
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = AdminRoute;
});
;define("ghost-admin/routes/application", ["exports", "ember-simple-auth/configuration", "ghost-admin/mixins/shortcuts-route", "ghost-admin/utils/ctrl-or-cmd", "ghost-admin/utils/window-proxy", "@sentry/ember", "ember-ajax/errors", "ghost-admin/services/ajax"], function (_exports, _configuration, _shortcutsRoute, _ctrlOrCmd, _windowProxy, _ember, _errors, _ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function K() {
    return this;
  }

  let shortcuts = {};
  shortcuts.esc = {
    action: 'closeMenus',
    scope: 'default'
  };
  shortcuts[`${_ctrlOrCmd.default}+s`] = {
    action: 'save',
    scope: 'all'
  };

  var _default = Ember.Route.extend(_shortcutsRoute.default, {
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    feature: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    router: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    ui: Ember.inject.service(),
    whatsNew: Ember.inject.service(),
    billing: Ember.inject.service(),
    shortcuts,
    routeAfterAuthentication: 'home',

    init() {
      this._super(...arguments);

      this.router.on('routeDidChange', () => {
        this.notifications.displayDelayed();
      });
      this.ui.initBodyDragHandlers();
    },

    async beforeModel() {
      await this.session.setup();
      return this.prepareApp();
    },

    async afterModel(model, transition) {
      this._super(...arguments);

      if (this.get('session.isAuthenticated')) {
        this.session.appLoadTransition = transition;
      }

      this._appLoaded = true;
    },

    actions: {
      closeMenus() {
        this.ui.closeMenus();
      },

      didTransition() {
        this.session.appLoadTransition = null;
        this.send('closeMenus');
      },

      authorizationFailed() {
        _windowProxy.default.replaceLocation(_configuration.default.rootURL);
      },

      // noop default for unhandled save (used from shortcuts)
      save: K,

      error(error, transition) {
        // unauthoirized errors are already handled in the ajax service
        if ((0, _errors.isUnauthorizedError)(error)) {
          return false;
        }

        if ((0, _errors.isNotFoundError)(error)) {
          if (transition) {
            transition.abort();
          }

          let routeInfo = transition.to;
          let router = this.router;
          let params = [];

          for (let key of Object.keys(routeInfo.params)) {
            params.push(routeInfo.params[key]);
          }

          let url = router.urlFor(routeInfo.name, ...params).replace(/^#\//, '').replace(/^\//, '').replace(/^ghost\//, '');
          return this.replaceWith('error404', url);
        }

        if ((0, _ajax.isVersionMismatchError)(error)) {
          if (transition) {
            transition.abort();
          }

          this.upgradeStatus.requireUpgrade();

          if (this._appLoaded) {
            return false;
          }
        }

        if ((0, _ajax.isMaintenanceError)(error)) {
          if (transition) {
            transition.abort();
          }

          this.upgradeStatus.maintenanceAlert();

          if (this._appLoaded) {
            return false;
          }
        }

        if ((0, _errors.isAjaxError)(error) || error && error.payload && Ember.isArray(error.payload.errors)) {
          this.notifications.showAPIError(error); // don't show the 500 page if we weren't navigating

          if (!transition) {
            return false;
          }
        } // fallback to 500 error page


        return true;
      }

    },

    willDestroy() {
      this.ui.cleanupBodyDragHandlers();
    },

    async prepareApp() {
      await this.config.fetchUnauthenticated(); // init Sentry here rather than app.js so that we can use API-supplied
      // sentry_dsn and sentry_env rather than building it into release assets

      if (this.config.get('sentry_dsn')) {
        (0, _ember.InitSentryForEmber)({
          dsn: this.config.get('sentry_dsn'),
          environment: this.config.get('sentry_env'),
          release: `ghost@${this.config.get('version')}`,

          beforeSend(event) {
            event.tags = event.tags || {};
            event.tags.shown_to_user = event.tags.shown_to_user || false;
            event.tags.grammarly = !!document.querySelector('[data-gr-ext-installed]');
            return event;
          }

        });
      }

      if (this.session.isAuthenticated) {
        try {
          await this.session.populateUser();
        } catch (e) {
          await this.session.invalidate();
        }

        await this.session.postAuthPreparation();
      }

      if (this.config.get('hostSettings.forceUpgrade')) {
        // enforce opening the BMA in a force upgrade state
        this.billing.openBillingWindow(this.router.currentURL, '/pro');
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/authenticated", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let AuthenticatedRoute = (_dec = Ember.inject.service, (_class = class AuthenticatedRoute extends Ember.Route {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "session", _descriptor, this);
    }

    beforeModel(transition) {
      this.session.requireAuthentication(transition, 'signin');
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = AuthenticatedRoute;
});
;define("ghost-admin/routes/dashboard", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let DashboardRoute = (_dec = Ember.inject.service, (_class = class DashboardRoute extends _authenticated.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "feature", _descriptor, this);
    }

    beforeModel() {
      super.beforeModel(...arguments);

      if (!this.session.user.isAdmin) {
        return this.transitionTo('site');
      }
    }

    buildRouteInfoMetadata() {
      return {
        mainClasses: ['gh-main-wide']
      };
    }

    setupController() {
      this.controller.initialise();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = DashboardRoute;
});
;define("ghost-admin/routes/designsandbox", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let DesignsandboxRoute = (_dec = Ember.inject.service, (_class = class DesignsandboxRoute extends Ember.Route {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);
    }

    beforeModel() {
      super.beforeModel(...arguments);

      if (!this.config.get('enableDeveloperExperiments')) {
        return this.transitionTo('home');
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = DesignsandboxRoute;
});
;define("ghost-admin/routes/editor", ["exports", "jquery", "ghost-admin/routes/authenticated"], function (_exports, _jquery, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend({
    feature: Ember.inject.service(),
    notifications: Ember.inject.service(),
    userAgent: Ember.inject.service(),
    ui: Ember.inject.service(),
    classNames: ['editor'],

    activate() {
      this._super(...arguments);

      this.ui.set('isFullScreen', true);
    },

    setupController() {
      this._super(...arguments); // edge has known issues


      if (this.userAgent.browser.isEdge && this.userAgent.parser.getEngine().name === 'EdgeHTML') {
        this.notifications.showAlert(Ember.String.htmlSafe('Microsoft Edge is not currently supported. Please use a recent version of Chrome/Firefox/Safari.'), {
          type: 'info',
          key: 'koenig.browserSupport'
        });
      }
    },

    deactivate() {
      this._super(...arguments);

      this.ui.set('isFullScreen', false);
    },

    actions: {
      save() {
        this._blurAndScheduleAction(function () {
          this.controller.send('save');
        });
      },

      authorizationFailed() {
        this.controller.send('toggleReAuthenticateModal');
      },

      willTransition(transition) {
        // exit early if an upgrade is required because our extended route
        // class will abort the transition and show an error
        if (this.get('upgradeStatus.isRequired')) {
          return this._super(...arguments);
        }

        this.controller.willTransition(transition);
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: () => {
          return this.get('controller.post.title') || 'Editor';
        },
        bodyClasses: ['gh-body-fullscreen'],
        mainClasses: ['gh-main-white']
      };
    },

    _blurAndScheduleAction(func) {
      let selectedElement = (0, _jquery.default)(document.activeElement); // TODO: we should trigger a blur for textareas as well as text inputs

      if (selectedElement.is('input[type="text"]')) {
        selectedElement.trigger('focusout');
      } // wait for actions triggered by the focusout to finish before saving


      Ember.run.scheduleOnce('actions', this, func);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/editor/edit", ["exports", "ghost-admin/routes/authenticated", "ember-inflector"], function (_exports, _authenticated, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class EditRoute extends _authenticated.default {
    beforeModel(transition) {
      super.beforeModel(...arguments); // if the transition is not new->edit, reset the post on the controller
      // so that the editor view is cleared before showing the loading state

      if (transition.urlMethod !== 'replace') {
        let editor = this.controllerFor('editor');
        editor.set('post', null);
        editor.reset();
      }
    }

    model(params, transition) {
      // eslint-disable-next-line camelcase
      let {
        type: modelName,
        post_id
      } = params;

      if (!['post', 'page'].includes(modelName)) {
        let path = transition.intent.url.replace(/^\//, '');
        return this.replaceWith('error404', {
          path,
          status: 404
        });
      }

      let query = {
        id: post_id
      };
      return this.store.query(modelName, query).then(records => records.get('firstObject'));
    } // the API will return a post even if the logged in user doesn't have
    // permission to edit it (all posts are public) so we need to do our
    // own permissions check and redirect if necessary


    afterModel(post) {
      super.afterModel(...arguments);
      const user = this.session.user;
      const returnRoute = (0, _emberInflector.pluralize)(post.constructor.modelName);

      if (user.isAuthorOrContributor && !post.isAuthoredByUser(user)) {
        return this.replaceWith(returnRoute);
      } // If the post is not a draft and user is contributor, redirect to index


      if (user.isContributor && !post.isDraft) {
        return this.replaceWith(returnRoute);
      }
    }

    serialize(model) {
      return {
        type: model.constructor.modelName,
        post_id: model.id
      };
    } // there's no specific controller for this route, instead all editor
    // handling is done on the editor route/controler


    setupController(controller, post) {
      let editor = this.controllerFor('editor');
      editor.setPost(post);
    }

  }

  _exports.default = EditRoute;

  window.__CLASSIC_OWN_CLASSES__.set(EditRoute, true);
});
;define("ghost-admin/routes/editor/index", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class IndexRoute extends _authenticated.default {
    beforeModel() {
      super.beforeModel(...arguments);
      this.replaceWith('editor.new', 'post');
    }

  }

  _exports.default = IndexRoute;

  window.__CLASSIC_OWN_CLASSES__.set(IndexRoute, true);
});
;define("ghost-admin/routes/editor/new", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class NewRoute extends _authenticated.default {
    model(params, transition) {
      let {
        type: modelName
      } = params;

      if (!['post', 'page'].includes(modelName)) {
        let path = transition.intent.url.replace(/^\//, '');
        return this.replaceWith('error404', {
          path,
          status: 404
        });
      }

      return this.store.createRecord(modelName, {
        authors: [this.session.user]
      });
    } // there's no specific controller for this route, instead all editor
    // handling is done on the editor route/controler


    setupController(controller, newPost) {
      let editor = this.controllerFor('editor');
      editor.setPost(newPost);
    }

    buildRouteInfoMetadata() {
      return {
        mainClasses: ['editor-new']
      };
    }

  }

  _exports.default = NewRoute;

  window.__CLASSIC_OWN_CLASSES__.set(NewRoute, true);
});
;define("ghost-admin/routes/error404", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  class Error404Route extends Ember.Route {
    constructor() {
      super(...arguments);

      _defineProperty(this, "controllerName", 'error');

      _defineProperty(this, "templateName", 'error');
    }

    model() {
      return {
        status: 404
      };
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Error',
        mainClasses: ['gh-main-white']
      };
    }

  }

  _exports.default = Error404Route;

  window.__CLASSIC_OWN_CLASSES__.set(Error404Route, true);
});
;define("ghost-admin/routes/home", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class HomeRoute extends Ember.Route {
    beforeModel() {
      this.transitionTo('dashboard');
    }

  }

  _exports.default = HomeRoute;

  window.__CLASSIC_OWN_CLASSES__.set(HomeRoute, true);
});
;define("ghost-admin/routes/launch", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let LaunchRoute = (_dec = Ember.inject.service, (_class = class LaunchRoute extends _authenticated.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "session", _descriptor, this);
    }

    beforeModel() {
      super.beforeModel(...arguments);

      if (!this.session.user.isOwnerOnly) {
        return this.transitionTo('home');
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = LaunchRoute;
});
;define("ghost-admin/routes/member", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let MembersRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._action, (_class = class MembersRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "feature", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);

      _defineProperty(this, "_requiresBackgroundRefresh", true);

      this.router.on('routeWillChange', transition => {
        this.showUnsavedChangesModal(transition);
      });
    }

    model(params) {
      this._requiresBackgroundRefresh = false;

      if (params.member_id) {
        if (this.feature.membersActivityFeed) {
          return this.store.queryRecord('member', {
            id: params.member_id,
            include: 'products'
          });
        } else {
          return this.store.queryRecord('member', {
            id: params.member_id,
            include: 'email_recipients,products'
          });
        }
      } else {
        return this.store.createRecord('member');
      }
    }

    setupController(controller, member) {
      super.setupController(...arguments);

      if (this._requiresBackgroundRefresh) {
        // `member` is passed directly in `<LinkTo>` so it can be a proxy
        // object used by the sparse list requiring the use of .get()
        controller.fetchMemberTask.perform(member.get('id'));
      }
    }

    deactivate() {
      super.deactivate(...arguments); // clean up newly created records and revert unsaved changes to existing

      this.controller.member.rollbackAttributes();
      this._requiresBackgroundRefresh = true;
    }

    save() {
      this.controller.save();
    }

    titleToken() {
      return this.controller.member.name;
    }

    showUnsavedChangesModal(transition) {
      if (transition.from && transition.from.name === this.routeName && transition.targetName) {
        let {
          controller
        } = this; // member.changedAttributes is always true for new members but number of changed attrs is reliable

        let isChanged = Object.keys(controller.member.changedAttributes()).length > 0;

        if (!controller.member.isDeleted && isChanged) {
          transition.abort();
          controller.toggleUnsavedChangesModal(transition);
          return;
        }
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "save", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "save"), _class.prototype)), _class));
  _exports.default = MembersRoute;
});
;define("ghost-admin/routes/member/new", ["exports", "ghost-admin/routes/member"], function (_exports, _member) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  class NewMemberRoute extends _member.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "controllerName", 'member');

      _defineProperty(this, "templateName", 'member');
    }

  }

  _exports.default = NewMemberRoute;

  window.__CLASSIC_OWN_CLASSES__.set(NewMemberRoute, true);
});
;define("ghost-admin/routes/members-activity", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let MembersActivityRoute = (_dec = Ember.inject.service, (_class = class MembersActivityRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "feature", _descriptor, this);
    }

    beforeModel() {
      super.beforeModel(...arguments);

      if (!this.feature.membersActivityFeed) {
        return this.transitionTo('home');
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = MembersActivityRoute;
});
;define("ghost-admin/routes/members", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let MembersRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, (_class = class MembersRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "store", _descriptor, this);

      _initializerDefineProperty(this, "feature", _descriptor2, this);

      _defineProperty(this, "queryParams", {
        label: {
          refreshModel: true
        },
        searchParam: {
          refreshModel: true,
          replace: true
        },
        paidParam: {
          refreshModel: true
        },
        orderParam: {
          refreshModel: true
        },
        filterParam: {
          refreshModel: true
        }
      });
    }

    beforeModel() {
      super.beforeModel(...arguments); // - TODO: redirect if members is disabled?
    }

    model(params) {
      this.controllerFor('members').resetFilters(params);
      return this.controllerFor('members').fetchMembersTask.perform(params);
    } // trigger a background load of members plus labels for filter dropdown


    setupController(controller) {
      super.setupController(...arguments);
      controller.fetchLabelsTask.perform();
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Members',
        mainClasses: ['gh-main-fullwidth']
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = MembersRoute;
});
;define("ghost-admin/routes/members/import", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class MembersImportRoute extends _admin.default {}

  _exports.default = MembersImportRoute;

  window.__CLASSIC_OWN_CLASSES__.set(MembersImportRoute, true);
});
;define("ghost-admin/routes/offer", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let OffersRoute = (_dec = Ember.inject.service, _dec2 = Ember._action, (_class = class OffersRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "router", _descriptor, this);

      _defineProperty(this, "_requiresBackgroundRefresh", true);

      this.router.on('routeWillChange', transition => {
        this.showUnsavedChangesModal(transition);
      });
    }

    model(params) {
      this._requiresBackgroundRefresh = false;

      if (params.offer_id) {
        return this.store.queryRecord('offer', {
          id: params.offer_id
        });
      } else {
        return this.store.createRecord('offer');
      }
    }

    setupController(controller, offer) {
      super.setupController(...arguments);

      if (this._requiresBackgroundRefresh) {
        // `offer` is passed directly in `<LinkTo>` so it can be a proxy
        // object used by the sparse list requiring the use of .get()
        controller.fetchOfferTask.perform(offer.get('id'));
      }
    }

    deactivate() {
      super.deactivate(...arguments); // clean up newly created records and revert unsaved changes to existing

      this.controller.offer.rollbackAttributes();
      this._requiresBackgroundRefresh = true;
    }

    save() {
      this.controller.save();
    }

    titleToken() {
      return this.controller.offer.name;
    }

    showUnsavedChangesModal(transition) {
      if (transition.from && transition.from.name === this.routeName && transition.targetName) {
        let {
          controller
        } = this; // offer.changedAttributes is always true for new offers but number of changed attrs is reliable

        let isChanged = Object.keys(controller.offer.changedAttributes()).length > 0;

        if (!controller.offer.isDeleted && isChanged) {
          transition.abort();
          controller.toggleUnsavedChangesModal(transition);
          return;
        }
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "save", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "save"), _class.prototype)), _class));
  _exports.default = OffersRoute;
});
;define("ghost-admin/routes/offer/new", ["exports", "ghost-admin/routes/offer"], function (_exports, _offer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  class NewOfferRoute extends _offer.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "controllerName", 'offer');

      _defineProperty(this, "templateName", 'offer');
    }

  }

  _exports.default = NewOfferRoute;

  window.__CLASSIC_OWN_CLASSES__.set(NewOfferRoute, true);
});
;define("ghost-admin/routes/offers", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let offersRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, (_class = class offersRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "store", _descriptor, this);

      _initializerDefineProperty(this, "feature", _descriptor2, this);

      _defineProperty(this, "queryParams", {
        type: {
          refreshModel: true
        }
      });
    }

    beforeModel() {
      super.beforeModel(...arguments); // TODO: redirect if members is disabled?
    }

    model(params) {
      return this.controllerFor('offers').fetchOffersTask.perform(params);
    } // trigger a background load of members plus labels for filter dropdown


    setupController() {
      super.setupController(...arguments);
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Offers'
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = offersRoute;
});
;define("ghost-admin/routes/pages", ["exports", "ghost-admin/routes/posts"], function (_exports, _posts) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  class PagesRoute extends _posts.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "modelName", 'page');
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Pages'
      };
    }

  }

  _exports.default = PagesRoute;

  window.__CLASSIC_OWN_CLASSES__.set(PagesRoute, true);
});
;define("ghost-admin/routes/posts", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let PostsRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._action, (_class = class PostsRoute extends _authenticated.default {
    constructor() {
      super(...arguments); // if we're already on this route and we're transiting _to_ this route
      // then the filters are being changed and we shouldn't create a new
      // browser history entry
      // see https://github.com/TryGhost/Ghost/issues/11057

      _initializerDefineProperty(this, "infinity", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);

      _defineProperty(this, "queryParams", {
        type: {
          refreshModel: true
        },
        visibility: {
          refreshModel: true
        },
        access: {
          refreshModel: true
        },
        author: {
          refreshModel: true
        },
        tag: {
          refreshModel: true
        },
        order: {
          refreshModel: true
        }
      });

      _defineProperty(this, "modelName", 'post');

      _defineProperty(this, "perPage", 30);

      this.router.on('routeWillChange', transition => {
        if (transition.to && (this.routeName === 'posts' || this.routeName === 'pages')) {
          let toThisRoute = transition.to.find(route => route.name === this.routeName);

          if (transition.from && transition.from.name === this.routeName && toThisRoute) {
            transition.method('replace');
          }
        }
      });
    }

    model(params) {
      const user = this.session.user;
      let queryParams = {};
      let filterParams = {
        tag: params.tag,
        visibility: params.visibility
      };
      let paginationParams = {
        perPageParam: 'limit',
        totalPagesParam: 'meta.pagination.pages'
      };
      Ember.assign(filterParams, this._getTypeFilters(params.type));

      if (params.type === 'featured') {
        filterParams.featured = true;
      }

      if (user.isAuthor) {
        // authors can only view their own posts
        filterParams.authors = user.slug;
      } else if (user.isContributor) {
        // Contributors can only view their own draft posts
        filterParams.authors = user.slug;
        filterParams.status = 'draft';
      } else if (params.author) {
        filterParams.authors = params.author;
      }

      let filter = this._filterString(filterParams);

      if (!Ember.isBlank(filter)) {
        queryParams.filter = filter;
      }

      if (!Ember.isBlank(params.order)) {
        queryParams.order = params.order;
      }

      let perPage = this.perPage;
      let paginationSettings = Ember.assign({
        perPage,
        startingPage: 1
      }, paginationParams, queryParams);
      return this.infinity.model(this.modelName, paginationSettings);
    } // trigger a background load of all tags, authors, and snipps for use in filter dropdowns and card menu


    setupController(controller) {
      super.setupController(...arguments);

      if (!controller._hasLoadedTags) {
        this.store.query('tag', {
          limit: 'all'
        }).then(() => {
          controller._hasLoadedTags = true;
        });
      }

      if (!this.session.user.isAuthorOrContributor && !controller._hasLoadedAuthors) {
        this.store.query('user', {
          limit: 'all'
        }).then(() => {
          controller._hasLoadedAuthors = true;
        });
      }

      if (!controller._hasLoadedSnippets) {
        this.store.query('snippet', {
          limit: 'all'
        }).then(() => {
          controller._hasLoadedSnippets = true;
        });
      }
    }

    queryParamsDidChange() {
      // scroll back to the top
      let contentList = document.querySelector('.content-list');

      if (contentList) {
        contentList.scrollTop = 0;
      }

      super.actions.queryParamsDidChange.call(this, ...arguments);
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Posts'
      };
    }

    _getTypeFilters(type) {
      let status = '[draft,scheduled,published,sent]';

      switch (type) {
        case 'draft':
          status = 'draft';
          break;

        case 'published':
          status = 'published';
          break;

        case 'scheduled':
          status = 'scheduled';
          break;

        case 'sent':
          status = 'sent';
          break;
      }

      return {
        status
      };
    }

    _filterString(filter) {
      return Object.keys(filter).map(key => {
        let value = filter[key];

        if (!Ember.isBlank(value)) {
          return `${key}:${filter[key]}`;
        }
      }).compact().join('+');
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "infinity", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "queryParamsDidChange", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "queryParamsDidChange"), _class.prototype)), _class));
  _exports.default = PostsRoute;
});
;define("ghost-admin/routes/pro", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ProRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._action, (_class = class ProRoute extends _authenticated.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "billing", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "config", _descriptor3, this);

      _defineProperty(this, "queryParams", {
        action: {
          refreshModel: true
        }
      });
    }

    beforeModel(transition) {
      super.beforeModel(...arguments); // allow non-owner users to access the BMA when we're in a force upgrade state

      if (!this.session.user.isOwnerOnly && !this.config.get('hostSettings.forceUpgrade')) {
        return this.transitionTo('home');
      }

      this.billing.set('previousTransition', transition);
    }

    model(params) {
      if (params.action) {
        this.billing.set('action', params.action);
      }

      this.billing.toggleProWindow(true);
    }

    willTransition(transition) {
      let isBillingTransition = false;

      if (transition) {
        let destinationUrl = typeof transition.to === 'string' ? transition.to : transition.intent ? transition.intent.url : '';

        if (destinationUrl?.includes('/pro')) {
          isBillingTransition = true;
        }
      }

      this.billing.toggleProWindow(isBillingTransition);
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Ghost(Pro)'
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "billing", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "willTransition", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "willTransition"), _class.prototype)), _class));
  _exports.default = ProRoute;
});
;define("ghost-admin/routes/reset", ["exports", "ghost-admin/routes/unauthenticated"], function (_exports, _unauthenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ResetRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, (_class = class ResetRoute extends _unauthenticated.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "notifications", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);
    }

    beforeModel() {
      if (this.session.isAuthenticated) {
        this.notifications.showAlert('You can\'t reset your password while you\'re signed in.', {
          type: 'warn',
          delayed: true,
          key: 'password.reset.signed-in'
        });
      }

      super.beforeModel(...arguments);
    }

    setupController(controller, params) {
      controller.token = params.token;
    } // Clear out any sensitive information


    deactivate() {
      super.deactivate(...arguments);
      this.controller.clearData();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = ResetRoute;
});
;define("ghost-admin/routes/settings", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let SettingsRoute = (_dec = Ember.inject.service, (_class = class SettingsRoute extends _authenticated.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "session", _descriptor, this);
    }

    beforeModel() {
      super.beforeModel(...arguments);
      const user = this.session.user;

      if (!user.isAdmin) {
        return this.transitionTo('settings.staff.user', user);
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = SettingsRoute;
});
;define("ghost-admin/routes/settings/code-injection", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _admin.default.extend({
    settings: Ember.inject.service(),

    model() {
      return this.settings.reload();
    },

    deactivate() {
      this._super(...arguments);

      this.controller.set('leaveSettingsTransition', null);
      this.controller.set('showLeaveSettingsModal', false);
    },

    actions: {
      save() {
        this.controller.send('save');
      },

      willTransition(transition) {
        let controller = this.controller;
        let settings = this.settings;
        let modelIsDirty = settings.get('hasDirtyAttributes');

        if (modelIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Code injection'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/design", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let SettingsDesignRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, (_class = class SettingsDesignRoute extends _authenticated.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "customThemeSettings", _descriptor, this);

      _initializerDefineProperty(this, "feature", _descriptor2, this);

      _initializerDefineProperty(this, "modals", _descriptor3, this);

      _initializerDefineProperty(this, "settings", _descriptor4, this);

      _initializerDefineProperty(this, "themeManagement", _descriptor5, this);

      _initializerDefineProperty(this, "ui", _descriptor6, this);
    }

    model() {
      // background refresh of preview
      // not doing it on the 'index' route so that we don't reload going to/from the index,
      // any actions performed on child routes that need a refresh should trigger it explicitly
      this.themeManagement.updatePreviewHtmlTask.perform(); // wait for settings to be loaded - we need the data to be present before display

      return Promise.all([this.settings.reload(), this.customThemeSettings.load()]);
    }

    activate() {
      this.ui.contextualNavMenu = 'design';
    }

    deactivate() {
      this.ui.contextualNavMenu = null;
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Design',
        mainClasses: ['gh-main-fullwidth']
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "customThemeSettings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "modals", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "themeManagement", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "ui", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = SettingsDesignRoute;
});
;define("ghost-admin/routes/settings/design/change-theme", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ChangeThemeRoute = (_dec = Ember.inject.service, _dec2 = Ember._action, (_class = class ChangeThemeRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "store", _descriptor, this);
    }

    model() {
      return this.store.findAll('theme');
    }

    willTransition() {
      this.controllerFor('settings.design.change-theme').reset();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "willTransition", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "willTransition"), _class.prototype)), _class));
  _exports.default = ChangeThemeRoute;
});
;define("ghost-admin/routes/settings/design/change-theme/install", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let InstallThemeRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._action, (_class = class InstallThemeRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "modals", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);
    }

    redirect(model, transition) {
      const {
        source,
        ref
      } = transition.to.queryParams || {};

      if (!source || !ref) {
        this.transitionTo('settings.design.change-theme');
      }
    } // use `didTransition` rather than `activate` so that controller setup has completed


    didTransition() {
      const installController = this.controllerFor('settings.design.change-theme.install');
      const themesController = this.controllerFor('settings.design.change-theme');
      const theme = themesController.officialThemes.findBy('ref', installController.ref);
      this.installModal = this.modals.open('modals/design/install-theme', {
        theme,
        ref: installController.ref,
        onSuccess: () => {
          this.showingSuccessModal = true;
          this.router.transitionTo('settings.design');
        }
      }, {
        beforeClose: Ember.run.bind(this, this.beforeModalClose)
      });
    }

    deactivate() {
      // leave install modal visible if it's in the success state because
      // we're switching over to the design customisation screen in the bg
      // and don't want to auto-close when this modal closes
      if (this.installModal && !this.showingSuccessModal) {
        this.installModal.close();
      }
    }

    beforeModalClose() {
      if (!this.showingSuccessModal) {
        this.transitionTo('settings.design.change-theme');
      }

      this.showingSuccessModal = false;
      this.installModal = null;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modals", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "didTransition", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "didTransition"), _class.prototype)), _class));
  _exports.default = InstallThemeRoute;
});
;define("ghost-admin/routes/settings/design/change-theme/view", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ViewThemeRoute = (_dec = Ember.inject.service, (_class = class ViewThemeRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "modals", _descriptor, this);

      _defineProperty(this, "themeModal", null);
    }

    model(params, transition) {
      const changeThemeController = this.controllerFor('settings.design.change-theme');
      const knownThemes = changeThemeController.officialThemes;
      const foundTheme = knownThemes.find(theme => theme.name === params.theme_name);

      if (foundTheme) {
        return foundTheme;
      }

      const path = transition.intent.url.replace(/^\//, '');
      return this.replaceWith('error404', {
        path,
        status: 404
      });
    }

    setupController(controller, model) {
      this.themeModal?.close();
      this.themeModal = this.modals.open('modals/design/view-theme', {
        theme: model
      });
    }

    deactivate() {
      this.themeModal?.close();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "modals", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = ViewThemeRoute;
});
;define("ghost-admin/routes/settings/design/index", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let SettingsDesignIndexRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._action, (_class = class SettingsDesignIndexRoute extends _authenticated.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "customThemeSettings", _descriptor, this);

      _initializerDefineProperty(this, "modals", _descriptor2, this);

      _initializerDefineProperty(this, "settings", _descriptor3, this);

      _defineProperty(this, "confirmModal", null);

      _defineProperty(this, "hasConfirmed", false);
    }

    willTransition(transition) {
      if (this.hasConfirmed) {
        return true;
      } // always abort when not confirmed because Ember's router doesn't automatically wait on promises


      transition.abort();
      this.confirmUnsavedChanges().then(shouldLeave => {
        if (shouldLeave) {
          this.hasConfirmed = true;
          return transition.retry();
        }
      });
    }

    deactivate() {
      this.confirmModal = null;
      this.hasConfirmed = false;
      this.controllerFor('settings.design.index').reset();
    }

    confirmUnsavedChanges() {
      if (!this.settings.get('hasDirtyAttributes') && !this.customThemeSettings.isDirty) {
        return Promise.resolve(true);
      }

      if (!this.confirmModal) {
        this.confirmModal = this.modals.open('modals/confirm-unsaved-changes').then(discardChanges => {
          if (discardChanges === true) {
            this.settings.rollbackAttributes();
            this.customThemeSettings.rollback();
          }

          return discardChanges;
        }).finally(() => {
          this.confirmModal = null;
        });
      }

      return this.confirmModal;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "customThemeSettings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "modals", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "willTransition", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "willTransition"), _class.prototype)), _class));
  _exports.default = SettingsDesignIndexRoute;
});
;define("ghost-admin/routes/settings/general", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _admin.default.extend({
    config: Ember.inject.service(),
    settings: Ember.inject.service(),

    model() {
      return Ember.RSVP.hash({
        settings: this.settings.reload(),
        availableTimezones: this.get('config.availableTimezones')
      });
    },

    setupController(controller, models) {
      // reset the leave setting transition
      controller.set('showLeaveSettingsModal', false);
      controller.set('leaveSettingsTransition', null);
      controller.set('availableTimezones', models.availableTimezones);
    },

    actions: {
      save() {
        return this.controller.send('save');
      },

      reloadSettings() {
        return this.settings.reload();
      },

      willTransition(transition) {
        let controller = this.controller;
        let settings = this.settings;
        let settingsIsDirty = settings.get('hasDirtyAttributes');

        if (settingsIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - General'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integration", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _admin.default.extend({
    router: Ember.inject.service(),

    init() {
      this._super(...arguments);

      this.router.on('routeWillChange', transition => {
        this.showUnsavedChangesModal(transition);

        if (this.controller) {
          this.controller.set('selectedApiKey', null);
          this.controller.set('isApiKeyRegenerated', false);
        }
      });
    },

    model(params, transition) {
      // use the integrations controller to fetch all integrations and pick
      // out the one we want. Allows navigation back to integrations screen
      // without a loading state
      return this.controllerFor('settings.integrations').integrationModelHook('id', params.integration_id, this, transition);
    },

    deactivate() {
      this._super(...arguments);

      this.controller.set('leaveScreenTransition', null);
      this.controller.set('showUnsavedChangesModal', false);
    },

    actions: {
      save() {
        this.controller.send('save');
      }

    },

    showUnsavedChangesModal(transition) {
      if (transition.from && transition.from.name.match(/^settings\.integration\./) && transition.targetName) {
        let {
          controller
        } = this; // check to see if we're navigating away from the custom integration
        // route - we want to allow editing webhooks without showing the
        // "unsaved changes" confirmation modal

        let isExternalRoute = // allow sub-routes of integration
        !(transition.targetName || '').match(/^integration\./) // do not allow changes in integration
        // .to will be the index, so use .to.parent to get the route with the params
        || transition.to.parent.params.integration_id !== controller.integration.id;

        if (isExternalRoute && !controller.integration.isDeleted && controller.integration.hasDirtyAttributes) {
          transition.abort();
          controller.send('toggleUnsavedChangesModal', transition);
          return;
        }
      }
    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Integrations'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integration/webhooks/edit", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class EditRoute extends _admin.default {
    model(params) {
      let integration = this.modelFor('settings.integration');
      let webhook = integration.webhooks.findBy('id', params.webhook_id);
      return webhook;
    }

    deactivate() {
      super.deactivate(...arguments);
      this.controller.reset();
    }

  }

  _exports.default = EditRoute;

  window.__CLASSIC_OWN_CLASSES__.set(EditRoute, true);
});
;define("ghost-admin/routes/settings/integration/webhooks/new", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class NewRoute extends _admin.default {
    model() {
      let integration = this.modelFor('settings.integration');
      return this.store.createRecord('webhook', {
        integration
      });
    }

    deactivate() {
      super.deactivate(...arguments);
      this.controller.webhook.rollbackAttributes();
    }

  }

  _exports.default = NewRoute;

  window.__CLASSIC_OWN_CLASSES__.set(NewRoute, true);
});
;define("ghost-admin/routes/settings/integrations", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let IntegrationsRoute = (_dec = Ember.inject.service, (_class = class IntegrationsRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "settings", _descriptor, this);
    }

    setupController(controller) {
      // kick off the background fetch of integrations so that we can
      // show the screen immediately
      controller.fetchIntegrations.perform();
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Integrations'
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = IntegrationsRoute;
});
;define("ghost-admin/routes/settings/integrations/amp", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _admin.default.extend({
    settings: Ember.inject.service(),

    beforeModel() {
      this._super(...arguments);

      return this.settings.reload();
    },

    actions: {
      save() {
        this.controller.send('save');
      },

      willTransition(transition) {
        let controller = this.controller;
        let modelIsDirty = this.settings.get('hasDirtyAttributes');

        if (modelIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'AMP'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integrations/firstpromoter", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _admin.default.extend({
    settings: Ember.inject.service(),

    beforeModel() {
      this._super(...arguments);

      return this.settings.reload();
    },

    actions: {
      save() {
        this.controller.send('save');
      },

      willTransition(transition) {
        let controller = this.controller;
        let modelIsDirty = this.settings.get('hasDirtyAttributes');

        if (modelIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'FirstPromoter'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integrations/new", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let NewIntegrationRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._action, (_class = class NewIntegrationRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "limit", _descriptor, this);

      _initializerDefineProperty(this, "modals", _descriptor2, this);

      _defineProperty(this, "modal", null);
    }

    async model() {
      if (this.limit.limiter?.isLimited('customIntegrations')) {
        try {
          await this.limit.limiter.errorIfWouldGoOverLimit('customIntegrations');
        } catch (error) {
          this.modal = this.modals.open('modals/limits/custom-integration', {
            message: error.message
          }, {
            beforeClose: this.beforeModalClose
          });
          return;
        }
      }

      this.modal = this.modals.open('modals/new-custom-integration', {}, {
        beforeClose: this.beforeModalClose
      });
    }

    deactivate() {
      // ensure we don't try to redirect on modal close if we're already transitioning away
      this.isLeaving = true;
      this.modal?.close();
      this.modal = null;
      this.isLeaving = false;
    }

    beforeModalClose() {
      if (!this.isLeaving) {
        this.transitionTo('settings.integrations');
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "limit", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "modals", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "beforeModalClose", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "beforeModalClose"), _class.prototype)), _class));
  _exports.default = NewIntegrationRoute;
});
;define("ghost-admin/routes/settings/integrations/slack", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _admin.default.extend({
    settings: Ember.inject.service(),

    beforeModel() {
      this._super(...arguments);

      return this.settings.reload();
    },

    actions: {
      save() {
        this.controller.send('save');
      },

      willTransition(transition) {
        let controller = this.controller;
        let settings = this.settings;
        let modelIsDirty = settings.get('hasDirtyAttributes');

        if (modelIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Slack'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integrations/unsplash", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _admin.default.extend({
    settings: Ember.inject.service(),

    beforeModel() {
      this._super(...arguments);

      return this.settings.reload();
    },

    actions: {
      save() {
        this.controller.send('save');
      },

      willTransition(transition) {
        let controller = this.controller;
        let modelIsDirty = this.settings.get('hasDirtyAttributes');

        if (modelIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Unsplash'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integrations/zapier", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ZapierRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, (_class = class ZapierRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "router", _descriptor, this);

      _initializerDefineProperty(this, "config", _descriptor2, this);

      this.router.on('routeWillChange', () => {
        if (this.controller) {
          this.controller.set('selectedApiKey', null);
          this.controller.set('isApiKeyRegenerated', false);
        }
      });
    }

    beforeModel() {
      super.beforeModel(...arguments);

      if (this.config.get('hostSettings.limits.customIntegrations.disabled')) {
        return this.transitionTo('settings.integrations');
      }
    }

    model(params, transition) {
      // use the integrations controller to fetch all integrations and pick
      // out the one we want. Allows navigation back to integrations screen
      // without a loading state
      return this.controllerFor('settings.integrations').integrationModelHook('slug', 'zapier', this, transition);
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Zapier'
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = ZapierRoute;
});
;define("ghost-admin/routes/settings/labs", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let LabsRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, (_class = class LabsRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "settings", _descriptor, this);

      _initializerDefineProperty(this, "notifications", _descriptor2, this);
    }

    model() {
      return this.settings.reload();
    }

    resetController(controller, isExiting) {
      if (isExiting) {
        controller.reset();
      }
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Labs'
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = LabsRoute;
});
;define("ghost-admin/routes/settings/members-email", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let MembersEmailRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._action, (_class = class MembersEmailRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "notifications", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);
    }

    beforeModel(transition) {
      super.beforeModel(...arguments);

      if (transition.to.queryParams?.fromAddressUpdate === 'success') {
        this.notifications.showAlert(`Newsletter email address has been updated`, {
          type: 'success',
          key: 'members.settings.from-address.updated'
        });
      }
    }

    model() {
      return this.settings.reload();
    }

    setupController(controller) {
      controller.resetEmailAddresses();
    }

    willTransition(transition) {
      return this.controller.leaveRoute(transition);
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Members'
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "willTransition", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "willTransition"), _class.prototype)), _class));
  _exports.default = MembersEmailRoute;
});
;define("ghost-admin/routes/settings/membership", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let MembershipSettingsRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, (_class = class MembershipSettingsRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "notifications", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);

      _defineProperty(this, "actions", {
        willTransition(transition) {
          return this.controller.leaveRoute(transition);
        }

      });
    }

    beforeModel(transition) {
      super.beforeModel(...arguments);

      if (transition.to.queryParams?.supportAddressUpdate === 'success') {
        this.notifications.showAlert(`Support email address has been updated`, {
          type: 'success',
          key: 'members.settings.support-address.updated'
        });
      }
    }

    model() {
      this.settings.reload();
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Membership'
      };
    }

    resetController(controller, isExiting) {
      if (isExiting) {
        controller.reset();
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = MembershipSettingsRoute;
});
;define("ghost-admin/routes/settings/navigation", ["exports", "jquery", "ghost-admin/routes/admin"], function (_exports, _jquery, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _admin.default.extend({
    settings: Ember.inject.service(),

    model() {
      return Ember.RSVP.hash({
        settings: this.settings.reload()
      });
    },

    setupController() {
      this.controller.send('reset');
    },

    deactivate() {
      this._super(...arguments);

      this.controller.set('leaveSettingsTransition', null);
      this.controller.set('showLeaveSettingsModal', false);
    },

    actions: {
      save() {
        // since shortcuts are run on the route, we have to signal to the components
        // on the page that we're about to save.
        (0, _jquery.default)('.page-actions .gh-btn-blue').focus();
        this.controller.send('save');
      },

      willTransition(transition) {
        let controller = this.controller;
        let modelIsDirty = controller.dirtyAttributes;

        if (modelIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Navigation'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/product", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ProductRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._action, (_class = class ProductRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "store", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);

      _defineProperty(this, "_requiresBackgroundRefresh", true);

      this.router.on('routeWillChange', transition => {
        this.showUnsavedChangesModal(transition);
      });
    }

    model(params) {
      if (params.product_id) {
        return this.store.queryRecord('product', {
          id: params.product_id,
          include: 'stripe_prices'
        });
      } else {
        return this.store.createRecord('product');
      }
    }

    setupController(controller, product) {
      super.setupController(...arguments);

      if (this._requiresBackgroundRefresh) {
        if (product.get('id')) {
          return this.store.queryRecord('product', {
            id: product.get('id'),
            include: 'stripe_prices'
          });
        }
      }
    }

    deactivate() {
      super.deactivate(...arguments); // clean up newly created records and revert unsaved changes to existing

      this.controller.product.rollbackAttributes();
      this._requiresBackgroundRefresh = true;
    }

    save() {
      this.controller.save();
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Products'
      };
    }

    showUnsavedChangesModal(transition) {
      if (transition.from && transition.from.name === this.routeName && transition.targetName) {
        let {
          controller
        } = this; // product.changedAttributes is always true for new products but number of changed attrs is reliable

        let isChanged = Object.keys(controller.product.changedAttributes()).length > 0;

        if (!controller.product.isDeleted && isChanged) {
          transition.abort();
          controller.toggleUnsavedChangesModal(transition);
          return;
        }
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "save", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "save"), _class.prototype)), _class));
  _exports.default = ProductRoute;
});
;define("ghost-admin/routes/settings/product/new", ["exports", "ghost-admin/routes/settings/product"], function (_exports, _product) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  class NewProductRoute extends _product.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "controllerName", 'settings.product');

      _defineProperty(this, "templateName", 'settings.product');
    }

  }

  _exports.default = NewProductRoute;

  window.__CLASSIC_OWN_CLASSES__.set(NewProductRoute, true);
});
;define("ghost-admin/routes/settings/products", ["exports", "ghost-admin/routes/admin"], function (_exports, _admin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ProductsRoute = (_dec = Ember.inject.service, (_class = class ProductsRoute extends _admin.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "store", _descriptor, this);
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Products'
      };
    }

    model() {
      return this.store.findAll('product', {
        include: 'stripe_prices'
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = ProductsRoute;
});
;define("ghost-admin/routes/settings/staff/index", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let IndexRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember._action, (_class = class IndexRoute extends _authenticated.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "infinity", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);
    }

    beforeModel() {
      super.beforeModel(...arguments);
      const user = this.session.user;

      if (user.isAuthorOrContributor) {
        return this.transitionTo('settings.staff.user', user);
      }
    }

    model() {
      return this.session.user;
    }

    setupController(controller) {
      super.setupController(...arguments);
      controller.backgroundUpdate.perform();
    }

    reload() {
      this.controller.backgroundUpdate.perform();
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Staff'
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "infinity", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "reload", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "reload"), _class.prototype)), _class));
  _exports.default = IndexRoute;
});
;define("ghost-admin/routes/settings/staff/user", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class;

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  let UserRoute = (_dec = Ember._action, _dec2 = Ember._action, _dec3 = Ember._action, (_class = class UserRoute extends _authenticated.default {
    model(params) {
      return this.store.queryRecord('user', {
        slug: params.user_slug,
        include: 'count.posts'
      });
    }

    afterModel(user) {
      super.afterModel(...arguments);
      const currentUser = this.session.user;
      let isOwnProfile = user.get('id') === currentUser.get('id');
      let isAuthorOrContributor = currentUser.get('isAuthorOrContributor');
      let isEditor = currentUser.get('isEditor');

      if (isAuthorOrContributor && !isOwnProfile) {
        this.transitionTo('settings.staff.user', currentUser);
      } else if (isEditor && !isOwnProfile && !user.get('isAuthorOrContributor')) {
        this.transitionTo('settings.staff');
      }

      if (isOwnProfile) {
        this.store.queryRecord('api-key', {
          id: 'me'
        }).then(apiKey => {
          this.controller.set('personalToken', apiKey.id + ':' + apiKey.secret);
          this.controller.set('personalTokenRegenerated', false);
        });
      }
    }

    serialize(model) {
      return {
        user_slug: model.get('slug')
      };
    }

    didTransition() {
      this.modelFor('settings.staff.user').get('errors').clear();
    }

    save() {
      this.controller.save.perform();
    }

    willTransition(transition) {
      let controller = this.controller;
      let user = controller.user;
      let dirtyAttributes = controller.dirtyAttributes;
      let modelIsDirty = user.get('hasDirtyAttributes'); // always reset the password properties on the user model when leaving

      if (user) {
        user.set('password', '');
        user.set('newPassword', '');
        user.set('ne2Password', '');
      }

      if (modelIsDirty || dirtyAttributes) {
        transition.abort();
        controller.send('toggleLeaveSettingsModal', transition);
        return;
      }
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Staff - User'
      };
    }

  }, (_applyDecoratedDescriptor(_class.prototype, "didTransition", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "didTransition"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "save", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "save"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "willTransition", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "willTransition"), _class.prototype)), _class));
  _exports.default = UserRoute;
});
;define("ghost-admin/routes/settings/theme-install", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class InstallThemeRoute extends Ember.Route {
    redirect(model, transition) {
      this.transitionTo('settings.design.change-theme.install', {
        queryParams: transition.to.queryParams
      });
    }

  }

  _exports.default = InstallThemeRoute;

  window.__CLASSIC_OWN_CLASSES__.set(InstallThemeRoute, true);
});
;define("ghost-admin/routes/setup", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let SetupRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, (_class = class SetupRoute extends Ember.Route {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ghostPaths", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "ajax", _descriptor3, this);

      _initializerDefineProperty(this, "config", _descriptor4, this);
    }

    // use the beforeModel hook to check to see whether or not setup has been
    // previously completed.  If it has, stop the transition into the setup page.
    beforeModel() {
      super.beforeModel(...arguments);

      if (this.session.isAuthenticated) {
        return this.transitionTo('home');
      }

      let authUrl = this.ghostPaths.url.api('authentication', 'setup'); // check the state of the setup process via the API

      return this.ajax.request(authUrl).then(result => {
        let [setup] = result.setup;

        if (setup.status) {
          return this.transitionTo('signin');
        } else {
          let controller = this.controllerFor('setup/two');

          if (setup.title) {
            controller.set('blogTitle', setup.title.replace(/&apos;/gim, '\''));
          }

          if (setup.name) {
            controller.set('name', setup.name.replace(/&apos;/gim, '\''));
          }

          if (setup.email) {
            controller.set('email', setup.email);
          }
        }
      });
    }

    deactivate() {
      super.deactivate(...arguments);
      this.controllerFor('setup/two').set('password', '');
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Setup',
        bodyClasses: ['unauthenticated-route'],
        mainClasses: ['gh-main-white']
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = SetupRoute;
});
;define("ghost-admin/routes/setup/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class IndexRoute extends Ember.Route {
    beforeModel() {
      super.beforeModel(...arguments);
      this.transitionTo('setup.one');
    }

  }

  _exports.default = IndexRoute;

  window.__CLASSIC_OWN_CLASSES__.set(IndexRoute, true);
});
;define("ghost-admin/routes/setup/three", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class ThreeRoute extends Ember.Route {
    beforeModel() {
      super.beforeModel(...arguments);

      if (!this.controllerFor('setup.two').get('blogCreated')) {
        this.transitionTo('setup.two');
      }
    }

  }

  _exports.default = ThreeRoute;

  window.__CLASSIC_OWN_CLASSES__.set(ThreeRoute, true);
});
;define("ghost-admin/routes/signin", ["exports", "ember-data", "ghost-admin/routes/unauthenticated"], function (_exports, _emberData, _unauthenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // TODO: remove usage of Ember Data's private `Errors` class when refactoring validations
  // eslint-disable-next-line
  const {
    Errors
  } = _emberData.default;

  const defaultModel = function defaultModel() {
    return Ember.Object.create({
      identification: '',
      password: '',
      errors: Errors.create()
    });
  };

  class SigninRoute extends _unauthenticated.default {
    model() {
      return defaultModel();
    } // the deactivate hook is called after a route has been exited.


    deactivate() {
      let controller = this.controllerFor('signin');
      super.deactivate(...arguments); // clear the properties that hold the credentials when we're no longer on the signin screen

      controller.set('signin', defaultModel());
    }

    buildRouteInfoMetadata() {
      return Object.assign(super.buildRouteInfoMetadata(), {
        titleToken: 'Sign In'
      });
    }

  }

  _exports.default = SigninRoute;

  window.__CLASSIC_OWN_CLASSES__.set(SigninRoute, true);
});
;define("ghost-admin/routes/signout", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let SignoutRoute = (_dec = Ember.inject.service, (_class = class SignoutRoute extends _authenticated.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "notifications", _descriptor, this);
    }

    afterModel
    /*model, transition*/
    () {
      this.notifications.clearAll();
      this.session.invalidate();
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Sign Out'
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = SignoutRoute;
});
;define("ghost-admin/routes/signup", ["exports", "ember-data", "ghost-admin/routes/unauthenticated", "ghost-admin/mixins/validation-engine"], function (_exports, _emberData, _unauthenticated, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const classic = __EMBER_CLASSIC_DECORATOR;
  const {
    Promise
  } = Ember.RSVP;
  const {
    Errors
  } = _emberData.default;
  let SignupRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, (_class = class SignupRoute extends _unauthenticated.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ghostPaths", _descriptor, this);

      _initializerDefineProperty(this, "notifications", _descriptor2, this);

      _initializerDefineProperty(this, "session", _descriptor3, this);

      _initializerDefineProperty(this, "ajax", _descriptor4, this);

      _initializerDefineProperty(this, "config", _descriptor5, this);
    }

    beforeModel() {
      if (this.session.isAuthenticated) {
        this.notifications.showAlert('You need to sign out to register as a new user.', {
          type: 'warn',
          delayed: true,
          key: 'signup.create.already-authenticated'
        });
      }

      super.beforeModel(...arguments);
    }

    model(params) {
      var _class2;

      let SignupDetails = classic(_class2 = class SignupDetails extends Ember.Object.extend(_validationEngine.default) {
        constructor() {
          super(...arguments);

          _defineProperty(this, "validationType", 'signup');
        }

      }) || _class2;

      window.__CLASSIC_OWN_CLASSES__.set(SignupDetails, true);

      let signupDetails = SignupDetails.create();
      let re = /^(?:[A-Za-z0-9_-]{4})*(?:[A-Za-z0-9_-]{2}|[A-Za-z0-9_-]{3})?$/;
      let email, tokenText;
      return new Promise(resolve => {
        if (!re.test(params.token)) {
          this.notifications.showAlert('Invalid token.', {
            type: 'error',
            delayed: true,
            key: 'signup.create.invalid-token'
          });
          return resolve(this.transitionTo('signin'));
        }

        tokenText = atob(params.token);
        email = tokenText.split('|')[1]; // leave e-mail blank even though we get it from the token because
        // we need the user to type it in for Chrome to remember the
        // email/password combo properly

        signupDetails.set('email', '');
        signupDetails.set('token', params.token);
        signupDetails.set('errors', Errors.create());
        let authUrl = this.get('ghostPaths.url').api('authentication', 'invitation');
        return this.ajax.request(authUrl, {
          dataType: 'json',
          data: {
            email
          }
        }).then(response => {
          if (response && response.invitation && response.invitation[0].valid === false) {
            this.notifications.showAlert('The invitation does not exist or is no longer valid.', {
              type: 'warn',
              delayed: true,
              key: 'signup.create.invalid-invitation'
            });
            return resolve(this.transitionTo('signin'));
          } // set blogTitle, so password validation has access to it


          signupDetails.set('blogTitle', this.get('config.blogTitle'));
          resolve(signupDetails);
        }).catch(() => {
          resolve(signupDetails);
        });
      });
    }

    deactivate() {
      super.deactivate(...arguments); // clear the properties that hold the sensitive data from the controller

      this.controllerFor('signup').get('signupDetails').setProperties({
        email: '',
        password: '',
        token: ''
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = SignupRoute;
});
;define("ghost-admin/routes/site", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let SiteRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, (_class = class SiteRoute extends _authenticated.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);

      _initializerDefineProperty(this, "ui", _descriptor3, this);

      _defineProperty(this, "_hasLoggedIn", false);
    }

    model() {
      return new Date().valueOf();
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Site'
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "ui", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = SiteRoute;
});
;define("ghost-admin/routes/tag", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _authenticated.default.extend({
    router: Ember.inject.service(),
    session: Ember.inject.service(),
    _requiresBackgroundRefresh: true,

    init() {
      this._super(...arguments);

      this.router.on('routeWillChange', transition => {
        this.showUnsavedChangesModal(transition);
      });
    },

    beforeModel() {
      this._super(...arguments);

      if (this.session.user.isAuthorOrContributor) {
        return this.transitionTo('home');
      }
    },

    model(params) {
      this._requiresBackgroundRefresh = false;

      if (params.tag_slug) {
        return this.store.queryRecord('tag', {
          slug: params.tag_slug
        });
      } else {
        return this.store.createRecord('tag');
      }
    },

    serialize(tag) {
      return {
        tag_slug: tag.get('slug')
      };
    },

    setupController(controller, tag) {
      this._super(...arguments);

      if (this._requiresBackgroundRefresh) {
        controller.fetchTag.perform(tag.get('slug'));
      }
    },

    deactivate() {
      this._super(...arguments); // clean up newly created records and revert unsaved changes to existing


      this.controller.tag.rollbackAttributes();
      this._requiresBackgroundRefresh = true;
    },

    actions: {
      save() {
        this.controller.send('save');
      }

    },

    showUnsavedChangesModal(transition) {
      if (transition.from && transition.from.name === this.routeName && transition.targetName) {
        let {
          controller
        } = this; // tag.changedAttributes is always true for new tags but number of changed attrs is reliable

        let isChanged = Object.keys(controller.tag.changedAttributes()).length > 0;

        if (!controller.tag.isDeleted && isChanged) {
          transition.abort();
          controller.send('toggleUnsavedChangesModal', transition);
          return;
        }
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/tag/new", ["exports", "ghost-admin/routes/tag"], function (_exports, _tag) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  class NewRoute extends _tag.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "controllerName", 'tag');

      _defineProperty(this, "templateName", 'tag');
    }

  }

  _exports.default = NewRoute;

  window.__CLASSIC_OWN_CLASSES__.set(NewRoute, true);
});
;define("ghost-admin/routes/tags", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  class TagsRoute extends _authenticated.default {
    constructor() {
      super(...arguments);

      _defineProperty(this, "queryParams", {
        type: {
          refreshModel: true,
          replace: true
        }
      });
    }

    // authors aren't allowed to manage tags
    beforeModel() {
      super.beforeModel(...arguments);

      if (this.session.user.isAuthorOrContributor) {
        return this.transitionTo('home');
      }
    } // set model to a live array so all tags are shown and created/deleted tags
    // are automatically added/removed. Also load all tags in the background,
    // pausing to show the loading spinner if no tags have been loaded yet


    model() {
      let promise = this.store.query('tag', {
        limit: 'all',
        include: 'count.posts'
      });
      let tags = this.store.peekAll('tag');

      if (this.store.peekAll('tag').get('length') === 0) {
        return promise.then(() => tags);
      } else {
        return tags;
      }
    }

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Tags'
      };
    }

  }

  _exports.default = TagsRoute;

  window.__CLASSIC_OWN_CLASSES__.set(TagsRoute, true);
});
;define("ghost-admin/routes/unauthenticated", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let UnauthenticatedRoute = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, (_class = class UnauthenticatedRoute extends Ember.Route {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ajax", _descriptor, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor2, this);

      _initializerDefineProperty(this, "session", _descriptor3, this);
    }

    beforeModel() {
      let authUrl = this.ghostPaths.url.api('authentication', 'setup'); // check the state of the setup process via the API

      return this.ajax.request(authUrl).then(result => {
        let [setup] = result.setup;

        if (setup.status !== true) {
          this.transitionTo('setup');
        } else {
          return this.session.prohibitAuthentication('home');
        }
      });
    }

    buildRouteInfoMetadata() {
      return {
        bodyClasses: ['unauthenticated-route']
      };
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = UnauthenticatedRoute;
});
;define("ghost-admin/routes/whatsnew", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class WhatsnewRoute extends _authenticated.default {
    buildRouteInfoMetadata() {
      return {
        titleToken: `What's new?`
      };
    }

  }

  _exports.default = WhatsnewRoute;

  window.__CLASSIC_OWN_CLASSES__.set(WhatsnewRoute, true);
});
;define("ghost-admin/serializers/-default", ["exports", "@ember-data/serializer/json"], function (_exports, _json) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _json.default;
    }
  });
});
;define("ghost-admin/serializers/-json-api", ["exports", "@ember-data/serializer/json-api"], function (_exports, _jsonApi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _jsonApi.default;
    }
  });
});
;define("ghost-admin/serializers/-rest", ["exports", "@ember-data/serializer/rest"], function (_exports, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _rest.default;
    }
  });
});
;define("ghost-admin/serializers/action", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend({
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/api-key", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    attrs: {
      lastSeenAtUTC: {
        key: 'last_seen_at'
      },
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/application", ["exports", "@ember-data/serializer/rest", "ember-inflector"], function (_exports, _rest, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _rest.default.extend({
    // hacky method for getting access to meta data for single-resource responses
    // https://github.com/emberjs/data/pull/4077#issuecomment-200780097
    // TODO: review once the record links and meta RFC lands
    // https://github.com/emberjs/rfcs/blob/master/text/0332-ember-data-record-links-and-meta.md
    extractMeta(store, typeClass) {
      let meta = this._super(...arguments);

      typeClass.___meta = meta;
      return meta;
    },

    serialize() {
      let json = this._super(...arguments); // don't send attributes that are updated automatically on the server


      delete json.created_by;
      delete json.updated_by;
      return json;
    },

    serializeIntoHash(hash, type, record, options) {
      // Our API expects an id on the posted object
      options = options || {};
      options.includeId = true; // We have a plural root in the API

      let root = (0, _emberInflector.pluralize)(type.modelName);
      let data = this.serialize(record, options);
      hash[root] = [data];
    },

    keyForAttribute(attr) {
      return Ember.String.decamelize(attr);
    },

    keyForRelationship(key, typeClass, method) {
      let transform = method === 'serialize' ? Ember.String.underscore : Ember.String.camelize;

      if (typeClass === 'belongsTo' && !key.match(/(Id|By)$/)) {
        let transformed = `${transform(key)}_id`;
        return transformed;
      }

      return transform(key);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/custom-theme-setting-list", ["exports", "ghost-admin/serializers/application", "@ember-data/serializer/rest"], function (_exports, _application, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  class CustomThemeSettingList extends _application.default.extend(_rest.EmbeddedRecordsMixin) {
    constructor() {
      super(...arguments);

      _defineProperty(this, "attrs", {
        customThemeSettings: {
          embedded: 'always'
        }
      });
    }

    serializeIntoHash(hash, type, record, options) {
      // replace the whole request hash with the embedded custom_theme_settings array
      const settings = this.serialize(record, options);
      Object.assign(hash, settings);
    }

    normalizeSingleResponse(store, primaryModelClass, _payload, id, requestType) {
      // response will come back as a custom theme settings array, not a "customThemeSettingList" array/object
      // make it look like the list model so Ember Data does it's thing and doesn't complain
      const payload = {
        customThemeSettingLists: [Object.assign({
          id: 0
        }, _payload)]
      };
      return super.normalizeSingleResponse(store, primaryModelClass, payload, id, requestType);
    }

  }

  _exports.default = CustomThemeSettingList;

  window.__CLASSIC_OWN_CLASSES__.set(CustomThemeSettingList, true);
});
;define("ghost-admin/serializers/email-recipient", ["exports", "ghost-admin/serializers/application", "@ember-data/serializer/rest"], function (_exports, _application, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend(_rest.EmbeddedRecordsMixin, {
    attrs: {
      processedAtUTC: {
        key: 'processed_at'
      },
      deliveredAtUTC: {
        key: 'delivered_at'
      },
      openedAtUTC: {
        key: 'opened_at'
      },
      failedAtUTC: {
        key: 'failed_at'
      },
      email: {
        embedded: 'always'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/email", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend({
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      },
      submittedAtUTC: {
        key: 'submitted_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/integration", ["exports", "ghost-admin/serializers/application", "@ember-data/serializer/rest"], function (_exports, _application, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend(_rest.EmbeddedRecordsMixin, {
    attrs: {
      apiKeys: {
        embedded: 'always'
      },
      webhooks: {
        embedded: 'always'
      },
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/invite", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/label", ["exports", "ghost-admin/serializers/application", "ember-inflector"], function (_exports, _application, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend({
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    },

    serialize() {
      let json = this._super(...arguments); // Properties that exist on the model but we don't want sent in the payload


      delete json.count;
      return json;
    },

    // if we use `queryRecord` ensure we grab the first record to avoid
    // DS.SERIALIZER.REST.QUERYRECORD-ARRAY-RESPONSE deprecations
    normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      if (requestType === 'queryRecord') {
        let singular = primaryModelClass.modelName;
        let plural = (0, _emberInflector.pluralize)(singular);

        if (payload[plural]) {
          payload[singular] = payload[plural][0];
          delete payload[plural];
        }
      }

      return this._super(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/member", ["exports", "ghost-admin/serializers/application", "@ember-data/serializer/rest"], function (_exports, _application, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend(_rest.EmbeddedRecordsMixin, {
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      },
      labels: {
        embedded: 'always'
      },
      emailRecipients: {
        embedded: 'always'
      }
    },

    serialize() {
      let json = this._super(...arguments); // Properties that exist on the model but we don't want sent in the payload


      delete json.stripe;
      delete json.geolocation;
      delete json.email_recipients;
      delete json.status; // Normalize properties

      json.name = json.name || '';
      json.note = json.note || '';
      return json;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/notification", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    attrs: {
      key: {
        key: 'location'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/page", ["exports", "ghost-admin/serializers/post"], function (_exports, _post) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _post.default.extend({
    serialize() {
      let json = this._super(...arguments); // Properties that exist on the model but we don't want sent in the payload


      delete json.email_subject;
      delete json.send_email_when_published;
      delete json.email_recipient_filter;
      delete json.email_only;
      delete json.email_id;
      delete json.email;
      return json;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/post", ["exports", "ghost-admin/serializers/application", "@ember-data/serializer/rest", "ember-inflector"], function (_exports, _application, _rest, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend(_rest.EmbeddedRecordsMixin, {
    // settings for the EmbeddedRecordsMixin.
    attrs: {
      authors: {
        embedded: 'always'
      },
      tags: {
        embedded: 'always'
      },
      publishedAtUTC: {
        key: 'published_at'
      },
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      },
      email: {
        embedded: 'always'
      }
    },

    normalizeSingleResponse(store, primaryModelClass, payload) {
      let root = this.keyForAttribute(primaryModelClass.modelName);
      let pluralizedRoot = (0, _emberInflector.pluralize)(primaryModelClass.modelName);

      if (payload[pluralizedRoot]) {
        payload[root] = payload[pluralizedRoot][0];
        delete payload[pluralizedRoot];
      }

      return this._super(...arguments);
    },

    normalizeArrayResponse() {
      return this._super(...arguments);
    },

    serialize() {
      let json = this._super(...arguments); // Inserted locally as a convenience.


      delete json.author_id; // Read-only virtual properties

      delete json.uuid;
      delete json.url;
      delete json.send_email_when_published;
      delete json.email_recipient_filter; // Deprecated property (replaced with data.authors)

      delete json.author;

      if (json.visibility === null) {
        delete json.visibility;
        delete json.visibility_filter;
      }

      if (json.visibility === 'filter' && json.visibility_filter === null) {
        delete json.visibility;
        delete json.visibility_filter;
      }

      return json;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/role", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/setting", ["exports", "ghost-admin/serializers/application", "ember-inflector"], function (_exports, _application, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    serializeIntoHash(hash, type, record, options) {
      // Settings API does not want ids
      options = options || {};
      options.includeId = false;
      let root = (0, _emberInflector.pluralize)(type.modelName);
      let data = this.serialize(record, options);
      let payload = [];
      delete data.id;
      Object.keys(data).forEach(k => {
        payload.push({
          key: k,
          value: data[k]
        });
      });
      hash[root] = payload;
    },

    normalizeArrayResponse(store, primaryModelClass, _payload, id, requestType) {
      let payload = {
        settings: [this._extractObjectFromArrayPayload(_payload)]
      };
      return this._super(store, primaryModelClass, payload, id, requestType);
    },

    normalizeSingleResponse(store, primaryModelClass, _payload, id, requestType) {
      let payload = {
        setting: this._extractObjectFromArrayPayload(_payload)
      };
      return this._super(store, primaryModelClass, payload, id, requestType);
    },

    _extractObjectFromArrayPayload(_payload) {
      let payload = {
        id: '0'
      };

      _payload.settings.forEach(setting => {
        payload[setting.key] = setting.value;
      });

      return payload;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/tag", ["exports", "ghost-admin/serializers/application", "ember-inflector"], function (_exports, _application, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend({
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    },

    serialize() {
      let json = this._super(...arguments); // Properties that exist on the model but we don't want sent in the payload


      delete json.count;
      return json;
    },

    // if we use `queryRecord` ensure we grab the first record to avoid
    // DS.SERIALIZER.REST.QUERYRECORD-ARRAY-RESPONSE deprecations
    normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      if (requestType === 'queryRecord') {
        let singular = primaryModelClass.modelName;
        let plural = (0, _emberInflector.pluralize)(singular);

        if (payload[plural]) {
          payload[singular] = payload[plural][0];
          delete payload[plural];
        }
      }

      return this._super(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/theme", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    primaryKey: 'name'
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/user", ["exports", "ghost-admin/serializers/application", "@ember-data/serializer/rest", "ember-inflector"], function (_exports, _application, _rest, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend(_rest.EmbeddedRecordsMixin, {
    attrs: {
      roles: {
        embedded: 'always'
      },
      lastLoginUTC: {
        key: 'last_seen'
      },
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    },

    extractSingle(store, primaryType, payload) {
      let root = this.keyForAttribute(primaryType.modelName);
      let pluralizedRoot = (0, _emberInflector.pluralize)(primaryType.modelName);
      payload[root] = payload[pluralizedRoot][0];
      delete payload[pluralizedRoot];
      return this._super(...arguments);
    },

    normalizeSingleResponse(store, primaryModelClass, payload) {
      let root = this.keyForAttribute(primaryModelClass.modelName);
      let pluralizedRoot = (0, _emberInflector.pluralize)(primaryModelClass.modelName);

      if (payload[pluralizedRoot]) {
        payload[root] = payload[pluralizedRoot][0];
        delete payload[pluralizedRoot];
      }

      return this._super(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/webhook", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    attrs: {
      lastTriggeredAtUTC: {
        key: 'last_triggered_at'
      },
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/services/-ensure-registered", ["exports", "@embroider/util/services/ensure-registered"], function (_exports, _ensureRegistered) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _ensureRegistered.default;
    }
  });
});
;define("ghost-admin/services/ajax", ["exports", "ember-ajax/services/ajax", "ghost-admin/config/environment", "moment", "ember-ajax/errors", "@sentry/browser", "ember-concurrency"], function (_exports, _ajax, _environment, _moment, _errors, _browser, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.VersionMismatchError = _exports.UnsupportedMediaTypeError = _exports.ThemeValidationError = _exports.ServerUnreachableError = _exports.RequestEntityTooLargeError = _exports.MaintenanceError = _exports.HostLimitError = _exports.EmailError = _exports.AcceptedResponse = void 0;
  _exports.isAcceptedResponse = isAcceptedResponse;
  _exports.isEmailError = isEmailError;
  _exports.isHostLimitError = isHostLimitError;
  _exports.isMaintenanceError = isMaintenanceError;
  _exports.isRequestEntityTooLargeError = isRequestEntityTooLargeError;
  _exports.isServerUnreachableError = isServerUnreachableError;
  _exports.isThemeValidationError = isThemeValidationError;
  _exports.isUnsupportedMediaTypeError = isUnsupportedMediaTypeError;
  _exports.isVersionMismatchError = isVersionMismatchError;
  const JSON_CONTENT_TYPE = 'application/json';
  const GHOST_REQUEST = /\/ghost\/api\//;

  function isJSONContentType(header) {
    if (!header || Ember.isNone(header)) {
      return false;
    }

    return header.indexOf(JSON_CONTENT_TYPE) === 0;
  }
  /* Version mismatch error */


  class VersionMismatchError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'API server is running a newer version of Ghost, please upgrade.');
    }

  }

  _exports.VersionMismatchError = VersionMismatchError;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(VersionMismatchError, true);

  window.__CLASSIC_OWN_CLASSES__.set(VersionMismatchError, true);

  function isVersionMismatchError(errorOrStatus, payload) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof VersionMismatchError;
    } else {
      return Ember.get(payload || {}, 'errors.firstObject.type') === 'VersionMismatchError';
    }
  }
  /* Server unreachable error */


  class ServerUnreachableError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'Server was unreachable');
    }

  }

  _exports.ServerUnreachableError = ServerUnreachableError;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(ServerUnreachableError, true);

  window.__CLASSIC_OWN_CLASSES__.set(ServerUnreachableError, true);

  function isServerUnreachableError(error) {
    if ((0, _errors.isAjaxError)(error)) {
      return error instanceof ServerUnreachableError;
    } else {
      return error === 0 || error === '0';
    }
  }
  /* Request entity too large error */


  class RequestEntityTooLargeError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'Request is larger than the maximum file size the server allows');
    }

  }

  _exports.RequestEntityTooLargeError = RequestEntityTooLargeError;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(RequestEntityTooLargeError, true);

  window.__CLASSIC_OWN_CLASSES__.set(RequestEntityTooLargeError, true);

  function isRequestEntityTooLargeError(errorOrStatus) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof RequestEntityTooLargeError;
    } else {
      return errorOrStatus === 413;
    }
  }
  /* Unsupported media type error */


  class UnsupportedMediaTypeError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'Request contains an unknown or unsupported file type.');
    }

  }

  _exports.UnsupportedMediaTypeError = UnsupportedMediaTypeError;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(UnsupportedMediaTypeError, true);

  window.__CLASSIC_OWN_CLASSES__.set(UnsupportedMediaTypeError, true);

  function isUnsupportedMediaTypeError(errorOrStatus) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof UnsupportedMediaTypeError;
    } else {
      return errorOrStatus === 415;
    }
  }
  /* Maintenance error */


  class MaintenanceError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'Ghost is currently undergoing maintenance, please wait a moment then retry.');
    }

  }

  _exports.MaintenanceError = MaintenanceError;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(MaintenanceError, true);

  window.__CLASSIC_OWN_CLASSES__.set(MaintenanceError, true);

  function isMaintenanceError(errorOrStatus) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof MaintenanceError;
    } else {
      return errorOrStatus === 503;
    }
  }
  /* Theme validation error */


  class ThemeValidationError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'Theme is not compatible or contains errors.');
    }

  }

  _exports.ThemeValidationError = ThemeValidationError;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(ThemeValidationError, true);

  window.__CLASSIC_OWN_CLASSES__.set(ThemeValidationError, true);

  function isThemeValidationError(errorOrStatus, payload) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof ThemeValidationError;
    } else {
      return Ember.get(payload || {}, 'errors.firstObject.type') === 'ThemeValidationError';
    }
  }
  /* Host limit reached/exceeded error */


  class HostLimitError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'A hosting plan limit was reached or exceeded.');
    }

  }

  _exports.HostLimitError = HostLimitError;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(HostLimitError, true);

  window.__CLASSIC_OWN_CLASSES__.set(HostLimitError, true);

  function isHostLimitError(errorOrStatus, payload) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof HostLimitError;
    } else {
      return Ember.get(payload || {}, 'errors.firstObject.type') === 'HostLimitError';
    }
  }

  class EmailError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'Please verify your email settings');
    }

  }

  _exports.EmailError = EmailError;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(EmailError, true);

  window.__CLASSIC_OWN_CLASSES__.set(EmailError, true);

  function isEmailError(errorOrStatus, payload) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof EmailError;
    } else {
      return Ember.get(payload || {}, 'errors.firstObject.type') === 'EmailError';
    }
  }
  /* end: custom error types */


  class AcceptedResponse {
    constructor(data) {
      this.data = data;
    }

  }

  _exports.AcceptedResponse = AcceptedResponse;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(AcceptedResponse, true);

  window.__CLASSIC_OWN_CLASSES__.set(AcceptedResponse, true);

  function isAcceptedResponse(errorOrStatus) {
    if (errorOrStatus === 202) {
      return true;
    }

    return false;
  }

  let ajaxService = _ajax.default.extend({
    config: Ember.inject.service(),
    session: Ember.inject.service(),
    // flag to tell our ESA authenticator not to try an invalidate DELETE request
    // because it's been triggered by this service's 401 handling which means the
    // DELETE would fail and get stuck in an infinite loop
    // TODO: find a more elegant way to handle this
    skipSessionDeletion: false,

    get headers() {
      return {
        'X-Ghost-Version': _environment.default.APP.version,
        'App-Pragma': 'no-cache'
      };
    },

    init() {
      this._super(...arguments);

      if (this.isTesting === undefined) {
        this.isTesting = _environment.default.environment === 'test';
      }
    },

    async _makeRequest(hash) {
      // ember-ajax recognises `application/vnd.api+json` as a JSON-API request
      // and formats appropriately, we want to handle `application/json` the same
      if (isJSONContentType(hash.contentType) && hash.type !== 'GET') {
        if (typeof hash.data === 'object') {
          hash.data = JSON.stringify(hash.data);
        }
      }

      hash.withCredentials = true; // attempt retries for 15 seconds in two situations:
      // 1. Server Unreachable error from the browser (code 0), typically from short internet blips
      // 2. Maintenance error from Ghost, upgrade in progress so API is temporarily unavailable

      let success = false;
      let errorName = null;
      let attempts = 0;
      let startTime = new Date();
      let retryingMs = 0;
      const maxRetryingMs = 15_000;
      const retryPeriods = [500, 1000];
      const retryErrorChecks = [this.isServerUnreachableError, this.isMaintenanceError];

      const getErrorData = () => {
        const data = {
          errorName,
          attempts,
          totalSeconds: (0, _moment.default)().diff((0, _moment.default)(startTime), 'seconds')
        };

        if (this._responseServer) {
          data.server = this._responseServer;
        }

        return data;
      };

      const makeRequest = this._super.bind(this);

      while (retryingMs <= maxRetryingMs && !success) {
        try {
          const result = await makeRequest(hash);
          success = true;

          if (attempts !== 0 && this.config.get('sentry_dsn')) {
            (0, _browser.captureMessage)('Request took multiple attempts', {
              extra: getErrorData()
            });
          }

          return result;
        } catch (error) {
          errorName = error.response?.constructor?.name;
          retryingMs = new Date() - startTime; // avoid retries in tests because it slows things down and is not expected in mocks
          // isTesting can be overridden in individual tests if required

          if (this.isTesting) {
            throw error;
          }

          if (retryErrorChecks.some(check => check(error.response)) && retryingMs <= maxRetryingMs) {
            await (0, _emberConcurrency.timeout)(retryPeriods[attempts] || retryPeriods[retryPeriods.length - 1]);
            attempts += 1;
          } else if (attempts > 0 && this.config.get('sentry_dsn')) {
            (0, _browser.captureMessage)('Request failed after multiple attempts', {
              extra: getErrorData()
            });
            throw error;
          } else {
            throw error;
          }
        }
      }
    },

    handleResponse(status, headers, payload, request) {
      if (this.isVersionMismatchError(status, headers, payload)) {
        return new VersionMismatchError(payload);
      } else if (this.isServerUnreachableError(status, headers, payload)) {
        return new ServerUnreachableError(payload);
      } else if (this.isRequestEntityTooLargeError(status, headers, payload)) {
        return new RequestEntityTooLargeError(payload);
      } else if (this.isUnsupportedMediaTypeError(status, headers, payload)) {
        return new UnsupportedMediaTypeError(payload);
      } else if (this.isMaintenanceError(status, headers, payload)) {
        return new MaintenanceError(payload);
      } else if (this.isThemeValidationError(status, headers, payload)) {
        return new ThemeValidationError(payload);
      } else if (this.isHostLimitError(status, headers, payload)) {
        return new HostLimitError(payload);
      } else if (this.isEmailError(status, headers, payload)) {
        return new EmailError(payload);
      } else if (this.isAcceptedResponse(status)) {
        return new AcceptedResponse(payload);
      }

      let isGhostRequest = GHOST_REQUEST.test(request.url);
      let isAuthenticated = this.get('session.isAuthenticated');
      let isUnauthorized = this.isUnauthorizedError(status, headers, payload);
      let isForbidden = (0, _errors.isForbiddenError)(status, headers, payload); // used when reporting connection errors, helps distinguish CDN

      if (isGhostRequest) {
        this._responseServer = headers.server;
      }

      if (isAuthenticated && isGhostRequest && (isUnauthorized || isForbidden && payload.errors?.[0].message === 'Authorization failed')) {
        this.skipSessionDeletion = true;
        this.session.invalidate();
      }

      return this._super(...arguments);
    },

    normalizeErrorResponse(status, headers, payload) {
      if (payload && typeof payload === 'object') {
        let errors = payload.error || payload.errors || payload.message || undefined;

        if (errors) {
          if (!Ember.isArray(errors)) {
            errors = [errors];
          }

          payload.errors = errors.map(function (error) {
            if (typeof error === 'string') {
              return {
                message: error
              };
            } else {
              return error;
            }
          });
        }
      }

      return this._super(status, headers, payload);
    },

    isVersionMismatchError(status, headers, payload) {
      return isVersionMismatchError(status, payload);
    },

    isServerUnreachableError(status) {
      return isServerUnreachableError(status);
    },

    isRequestEntityTooLargeError(status) {
      return isRequestEntityTooLargeError(status);
    },

    isUnsupportedMediaTypeError(status) {
      return isUnsupportedMediaTypeError(status);
    },

    isMaintenanceError(status, headers, payload) {
      return isMaintenanceError(status, payload);
    },

    isThemeValidationError(status, headers, payload) {
      return isThemeValidationError(status, payload);
    },

    isHostLimitError(status, headers, payload) {
      return isHostLimitError(status, payload);
    },

    isEmailError(status, headers, payload) {
      return isEmailError(status, payload);
    },

    isAcceptedResponse(status) {
      return isAcceptedResponse(status);
    }

  }); // we need to reopen so that internal methods use the correct contentType


  ajaxService.reopen({
    contentType: 'application/json; charset=UTF-8'
  });
  var _default = ajaxService;
  _exports.default = _default;
});
;define("ghost-admin/services/billing", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend({
    router: Ember.inject.service(),
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    store: Ember.inject.service(),
    billingRouteRoot: '#/pro',
    billingWindowOpen: false,
    subscription: null,
    previousRoute: null,
    action: null,
    ownerUser: null,

    init() {
      this._super(...arguments);

      if (this.config.get('hostSettings.billing.url')) {
        window.addEventListener('message', event => {
          if (event && event.data && event.data.route) {
            this.handleRouteChangeInIframe(event.data.route);
          }
        });
      }
    },

    handleRouteChangeInIframe(destinationRoute) {
      if (this.billingWindowOpen) {
        let billingRoute = this.billingRouteRoot;

        if (destinationRoute !== '/') {
          billingRoute += destinationRoute;
        }

        if (window.location.hash !== billingRoute) {
          window.history.replaceState(window.history.state, '', billingRoute);
        }
      }
    },

    getIframeURL() {
      // initiate getting owner user in the background
      this.getOwnerUser();
      let url = this.config.get('hostSettings.billing.url');

      if (window.location.hash && window.location.hash.includes(this.billingRouteRoot)) {
        let destinationRoute = window.location.hash.replace(this.billingRouteRoot, '');

        if (destinationRoute) {
          url += destinationRoute;
        }
      }

      return url;
    },

    async getOwnerUser() {
      if (!this.ownerUser) {
        // Try to receive the owner user from the store
        let user = this.store.peekAll('user').findBy('isOwnerOnly', true);

        if (!user) {
          // load it when it's not there yet
          await this.store.findAll('user', {
            reload: true
          });
          user = this.store.peekAll('user').findBy('isOwnerOnly', true);
        }

        this.set('ownerUser', user);
      }

      return this.ownerUser;
    },

    // Sends a route update to a child route in the BMA, because we can't control
    // navigating to it otherwise
    sendRouteUpdate() {
      const action = this.action;

      if (action) {
        if (action === 'checkout') {
          this.getBillingIframe().contentWindow.postMessage({
            query: 'routeUpdate',
            response: this.checkoutRoute
          }, '*');
        }

        this.set('action', null);
      }
    },

    // Controls billing window modal visibility and sync of the URL visible in browser
    // and the URL opened on the iframe. It is responsible to non user triggered iframe opening,
    // for example: by entering "/pro" route in the URL or using history navigation (back and forward)
    toggleProWindow(value) {
      if (this.billingWindowOpen && value && !this.action) {
        // don't attempt to open again
        return;
      }

      this.sendRouteUpdate();
      this.set('billingWindowOpen', value);
    },

    // Controls navigation to billing window modal which is triggered from the application UI.
    // For example: pressing "View Billing" link in navigation menu. It's main side effect is
    // remembering the route from which the action has been triggered - "previousRoute" so it
    // could be reused when closing billing window
    openBillingWindow(currentRoute, childRoute) {
      // initiate getting owner user in the background
      this.getOwnerUser();

      if (this.billingWindowOpen) {
        // don't attempt to open again
        return;
      }

      this.set('previousRoute', currentRoute); // Ensures correct "getIframeURL" calculation when syncing iframe location
      // in toggleProWindow

      window.location.hash = childRoute || '/pro';
      this.sendRouteUpdate();
      this.router.transitionTo(childRoute || '/pro');
    },

    getBillingIframe() {
      return document.getElementById('billing-frame');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/clock", ["exports", "ghost-admin/config/environment", "moment"], function (_exports, _environment, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ONE_SECOND = 1000; // Creates a clock service to run intervals.

  var _default = Ember.Service.extend({
    second: null,
    minute: null,
    hour: null,

    init() {
      this._super(...arguments);

      this.tick();
    },

    tick() {
      let now = (0, _moment.default)().utc();
      this.setProperties({
        second: now.seconds(),
        minute: now.minutes(),
        hour: now.hours()
      });

      if (_environment.default.environment !== 'test') {
        Ember.run.later(() => {
          this.tick();
        }, ONE_SECOND);
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/config", ["exports", "@tryghost/timezone-data"], function (_exports, _timezoneData) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // ember-cli-shims doesn't export _ProxyMixin
  const {
    _ProxyMixin
  } = Ember;

  var _default = Ember.Service.extend(_ProxyMixin, {
    ajax: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    session: Ember.inject.service(),
    content: null,

    init() {
      this._super(...arguments);

      this.content = {};
    },

    fetch() {
      let promises = [];
      promises.push(this.fetchUnauthenticated());

      if (this.session.isAuthenticated) {
        promises.push(this.fetchAuthenticated());
      }

      return Ember.RSVP.all(promises);
    },

    fetchUnauthenticated() {
      let siteUrl = this.ghostPaths.url.api('site');
      return this.ajax.request(siteUrl).then(_ref => {
        let {
          site
        } = _ref;
        // normalize url to non-trailing-slash
        site.blogUrl = site.url.replace(/\/$/, '');
        site.blogTitle = site.title;
        delete site.url;
        delete site.title;
        Object.assign(this.content, site);
      }).then(() => {
        this.notifyPropertyChange('content');
      });
    },

    fetchAuthenticated() {
      let configUrl = this.ghostPaths.url.api('config');
      return this.ajax.request(configUrl).then(_ref2 => {
        let {
          config
        } = _ref2;
        Object.assign(this.content, config);
      }).then(() => {
        this.notifyPropertyChange('content');
      });
    },

    availableTimezones: Ember.computed(function () {
      return Ember.RSVP.resolve(_timezoneData.default);
    }),
    blogDomain: Ember.computed('blogUrl', function () {
      let blogUrl = this.get('blogUrl');
      let blogDomain = blogUrl.replace(/^https?:\/\//, '').replace(/\/?$/, '');
      return blogDomain;
    }),
    emailDomain: Ember.computed('blogDomain', function () {
      let blogDomain = this.blogDomain || '';
      const domainExp = blogDomain.match(new RegExp('^([^/:?#]+)(?:[/:?#]|$)', 'i'));
      const domain = domainExp && domainExp[1] || '';

      if (domain.startsWith('www.')) {
        return domain.replace(/^(www)\.(?=[^/]*\..{2,5})/, '');
      }

      return domain;
    }),

    getSiteUrl(path) {
      const siteUrl = new URL(this.get('blogUrl'));
      const subdir = siteUrl.pathname.endsWith('/') ? siteUrl.pathname : `${siteUrl.pathname}/`;
      const fullPath = `${subdir}${path.replace(/^\//, '')}`;
      return `${siteUrl.origin}${fullPath}`;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/cookies", ["exports", "ember-cookies/services/cookies"], function (_exports, _cookies) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _cookies.default;
  _exports.default = _default;
});
;define("ghost-admin/services/custom-theme-settings", ["exports", "ember-concurrency-decorators"], function (_exports, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let CustomThemeSettingsServices = (_dec = Ember.inject.service, _dec2 = Ember._tracked, _dec3 = Ember._tracked, (_class = class CustomThemeSettingsServices extends Ember.Service {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "store", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);

      _initializerDefineProperty(this, "settingGroups", _descriptor3, this);

      _defineProperty(this, "_hasLoaded", false);

      _defineProperty(this, "KNOWN_GROUPS", [{
        key: 'homepage',
        name: 'Homepage',
        icon: 'house',
        previewType: 'homepage'
      }, {
        key: 'post',
        name: 'Post',
        icon: 'post',
        previewType: 'post'
      }]);
    }

    get isDirty() {
      const dirtySetting = this.settings.find(setting => setting.hasDirtyAttributes);
      return !!dirtySetting;
    }

    get keyValueObject() {
      const keyValue = {};
      this.settings.forEach(setting => {
        keyValue[setting.key] = setting.value;
      });
      return keyValue;
    }

    load() {
      return this.loadTask.perform();
    }

    reload() {
      this._hasLoaded = false;
      return this.loadTask.perform();
    }

    *loadTask() {
      if (this.hasLoaded) {
        return this.settings;
      } // unload stored settings and re-load from API so they always match active theme
      // run is required here, see https://github.com/emberjs/data/issues/5447#issuecomment-845672812


      Ember.run(() => this.store.unloadAll('custom-theme-setting'));
      const settings = yield this.store.findAll('custom-theme-setting');
      this.settings = settings;
      this.settingGroups = this._buildSettingGroups(settings);
      this._hasLoaded = true;
      return this.settings;
    }

    save() {
      return this.saveTask.perform();
    }

    *saveTask() {
      if (Ember.isEmpty(this.settings)) {
        return this.settings;
      } // save all records in a single request to `/custom_theme_settings`


      const listRecord = this.store.createRecord('custom-theme-setting-list', {
        customThemeSettings: this.settings
      });
      yield listRecord.save(); // don't keep references to lists and their children around

      this.store.unloadRecord(listRecord);
      return this.settings;
    }

    rollback() {
      this.settings.forEach(setting => setting.rollbackAttributes());
    }

    _buildSettingGroups(settings) {
      if (!settings || !settings.length) {
        return [];
      }

      const groupKeys = this.KNOWN_GROUPS.map(g => g.key);
      const groups = [];
      const siteWideSettings = settings.filter(setting => !groupKeys.includes(setting.group));

      if (siteWideSettings.length) {
        groups.push({
          key: 'site-wide',
          name: 'Site-wide',
          icon: 'view-site',
          settings: siteWideSettings
        });
      }

      this.KNOWN_GROUPS.forEach(knownGroup => {
        const groupSettings = settings.filter(setting => setting.group === knownGroup.key);

        if (groupSettings.length) {
          groups.push(Object.assign({}, knownGroup, {
            settings: groupSettings
          }));
        }
      });
      return groups;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "store", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "settingGroups", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _applyDecoratedDescriptor(_class.prototype, "loadTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "loadTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "saveTask"), _class.prototype)), _class));
  _exports.default = CustomThemeSettingsServices;
});
;define("ghost-admin/services/custom-views", ["exports", "ghost-admin/mixins/validation-engine", "@ember-decorators/object", "ember-concurrency-decorators"], function (_exports, _validationEngine, _object, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const VIEW_COLORS = ['midgrey', 'blue', 'green', 'red', 'teal', 'purple', 'yellow', 'orange', 'pink'];
  const CustomView = Ember.Object.extend(_validationEngine.default, {
    validationType: 'customView',
    name: '',
    route: '',
    color: '',
    filter: null,
    isNew: false,
    isDefault: false,

    init() {
      this._super(...arguments);

      if (!this.filter) {
        this.filter = {};
      }

      if (!this.color) {
        this.color = VIEW_COLORS[Math.floor(Math.random() * VIEW_COLORS.length)];
      }
    },

    // convert to POJO so we don't store any client-specific objects in any
    // stringified JSON settings fields
    toJSON() {
      return {
        name: this.name,
        route: this.route,
        color: this.color,
        filter: this.filter
      };
    }

  });
  const DEFAULT_VIEWS = [{
    route: 'posts',
    name: 'Borradores',
    color: 'midgrey',
    icon: 'pencil',
    filter: {
      type: 'draft'
    }
  }, {
    route: 'posts',
    name: 'Programados',
    color: 'midgrey',
    icon: 'clockface',
    filter: {
      type: 'scheduled'
    }
  }, {
    route: 'posts',
    name: 'Publicados',
    color: 'midgray',
    icon: 'published-post',
    filter: {
      type: 'published'
    }
  }].map(view => {
    return CustomView.create(Object.assign({}, view, {
      isDefault: true
    }));
  });

  let isFilterEqual = function (filterA, filterB) {
    let aProps = Object.getOwnPropertyNames(filterA);
    let bProps = Object.getOwnPropertyNames(filterB);

    if (aProps.length !== bProps.length) {
      return false;
    }

    for (let i = 0; i < aProps.length; i++) {
      let key = aProps[i];

      if (filterA[key] !== filterB[key]) {
        return false;
      }
    }

    return true;
  };

  let isViewEqual = function (viewA, viewB) {
    return viewA.route === viewB.route && isFilterEqual(viewA.filter, viewB.filter);
  };

  let CustomViewsService = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = (0, _object.observes)('settings.sharedViews', 'session.{isAuthenticated,user}'), _dec7 = Ember._action, (_class = class CustomViewsService extends Ember.Service {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "router", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "settings", _descriptor3, this);

      _initializerDefineProperty(this, "viewList", _descriptor4, this);

      _initializerDefineProperty(this, "showFormModal", _descriptor5, this);

      this.updateViewList();
    } // eslint-disable-next-line ghost/ember/no-observers


    async updateViewList() {
      let {
        settings,
        session
      } = this; // avoid fetching user before authenticated otherwise the 403 can fire
      // during authentication and cause errors during setup/signin

      if (!session.isAuthenticated || !session.user) {
        return;
      }

      let views = JSON.parse(settings.get('sharedViews') || '[]');
      views = Ember.isArray(views) ? views : [];
      let viewList = []; // contributors can only see their own draft posts so it doesn't make
      // sense to show them default views which change the status/type filter

      let user = await session.user;

      if (!user.isContributor) {
        viewList.push(...DEFAULT_VIEWS);
      }

      viewList.push(...views.map(view => {
        return CustomView.create(view);
      }));
      this.viewList = viewList;
    }

    toggleFormModal() {
      this.showFormModal = !this.showFormModal;
    }

    *saveViewTask(view) {
      yield view.validate(); // perform some ad-hoc validation of duplicate names because ValidationEngine doesn't support it

      let duplicateView = this.viewList.find(existingView => {
        return existingView.route === view.route && existingView.name.trim().toLowerCase() === view.name.trim().toLowerCase() && !isFilterEqual(existingView.filter, view.filter);
      });

      if (duplicateView) {
        view.errors.add('name', 'Has already been used');
        view.hasValidated.pushObject('name');
        view.invalidate();
        return false;
      } // remove an older version of the view from our views list
      // - we don't allow editing the filter and route+filter combos are unique
      // - we create a new instance of a view from an existing one when editing to act as a "scratch" view


      let matchingView = this.viewList.find(existingView => isViewEqual(existingView, view));

      if (matchingView) {
        this.viewList.replace(this.viewList.indexOf(matchingView), 1, [view]);
      } else {
        this.viewList.push(view);
      } // rebuild the "views" array in our user settings json string


      yield this._saveViewSettings();
      view.set('isNew', false);
      return view;
    }

    *deleteViewTask(view) {
      let matchingView = this.viewList.find(existingView => isViewEqual(existingView, view));

      if (matchingView && !matchingView.isDefault) {
        this.viewList.removeObject(matchingView);
        yield this._saveViewSettings();
        return true;
      }
    }

    get availableColors() {
      return VIEW_COLORS;
    }

    get forPosts() {
      return this.viewList.filter(view => view.route === 'posts');
    }

    get forPages() {
      return this.viewList.filter(view => view.route === 'pages');
    }

    get activeView() {
      if (!this.router.currentRoute) {
        return undefined;
      }

      return this.findView(this.router.currentRouteName, this.router.currentRoute.queryParams);
    }

    findView(routeName, queryParams) {
      let _routeName = routeName.replace(/_loading$/, '');

      return this.viewList.find(view => {
        return view.route === _routeName && isFilterEqual(view.filter, queryParams);
      });
    }

    newView() {
      return CustomView.create({
        isNew: true,
        route: this.router.currentRouteName,
        filter: this.router.currentRoute.queryParams
      });
    }

    editView() {
      return CustomView.create(this.activeView || this.newView());
    }

    async _saveViewSettings() {
      let sharedViews = this.viewList.reject(view => view.isDefault).map(view => view.toJSON());
      this.settings.set('sharedViews', JSON.stringify(sharedViews));
      return this.settings.save();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "viewList", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "showFormModal", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "updateViewList", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, "updateViewList"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleFormModal", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, "toggleFormModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveViewTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "saveViewTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "deleteViewTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "deleteViewTask"), _class.prototype)), _class));
  _exports.default = CustomViewsService;
});
;define("ghost-admin/services/data-cache", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  const ONE_MINUTE = 1 * 60 * 1000;

  class DataCacheService extends Ember.Service {
    constructor() {
      super(...arguments);

      _defineProperty(this, "cache", {});

      _defineProperty(this, "timeouts", {});
    }

    get(key) {
      return this.cache[key];
    }

    set(key, data) {
      let lifetime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ONE_MINUTE;
      this.cache[key] = data;
      this.timeouts[key] = window.setTimeout(() => {
        delete this.cache[key];
        delete this.timeouts[key];
      }, lifetime);
      return this.cache[key];
    }

    clear() {
      this._clearAllTimeouts();

      this.cache = {};
      this.timeouts = {};
    }

    willDestroy() {
      this._clearAllTimeouts();
    }

    _clearAllTimeouts() {
      Object.keys(this.timeouts).forEach(key => window.clearTimeout(this.timeouts[key]));
    }

  }

  _exports.default = DataCacheService;

  window.__CLASSIC_OWN_CLASSES__.set(DataCacheService, true);
});
;define("ghost-admin/services/drag-coordinator", ["exports", "ember-drag-drop/services/drag-coordinator"], function (_exports, _dragCoordinator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _dragCoordinator.default;
  _exports.default = _default;
});
;define("ghost-admin/services/dropdown", ["exports", "jquery", "ghost-admin/mixins/body-event-listener"], function (_exports, _jquery, _bodyEventListener) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // This is used by the dropdown initializer to manage closing & toggling
  var _default = Ember.Service.extend(Ember.Evented, _bodyEventListener.default, {
    bodyClick(event) {
      let dropdownSelector = '.ember-basic-dropdown-trigger, .ember-basic-dropdown-content';

      if ((0, _jquery.default)(event.target).closest(dropdownSelector).length <= 0) {
        this.closeDropdowns();
      }
    },

    closeDropdowns() {
      this.trigger('close');
    },

    toggleDropdown(dropdownName, dropdownButton) {
      this.trigger('toggle', {
        target: dropdownName,
        button: dropdownButton
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/ella-sparse", ["exports", "ember-ella-sparse/services/ella-sparse"], function (_exports, _ellaSparse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _ellaSparse.default;
    }
  });
});
;define("ghost-admin/services/ember-load-config", ["exports", "ember-load/services/ember-load-config", "ghost-admin/config/environment"], function (_exports, _emberLoadConfig, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const userConfig = _environment.default['ember-load'] || {};

  var _default = _emberLoadConfig.default.extend({
    loadingIndicatorClass: userConfig.loadingIndicatorClass
  });

  _exports.default = _default;
});
;define("ghost-admin/services/event-bus", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend(Ember.Evented, {
    publish() {
      return this.trigger(...arguments);
    },

    subscribe() {
      return this.on(...arguments);
    },

    unsubscribe() {
      return this.off(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/feature", ["exports", "jquery"], function (_exports, _jquery) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _exports.feature = feature;

  function feature(name) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let {
      user,
      onChange
    } = options;
    let watchedProps = user ? [`accessibility.${name}`] : [`config.${name}`, `labs.${name}`];
    return Ember.computed.apply(Ember, watchedProps.concat({
      get() {
        let enabled = false;

        if (user) {
          enabled = this.get(`accessibility.${name}`);
        } else if (this.get(`config.${name}`)) {
          enabled = this.get(`config.${name}`);
        } else {
          enabled = this.get(`labs.${name}`) || false;
        }

        return enabled;
      },

      set(key, value) {
        this.update(key, value, options);

        if (onChange) {
          // value must be passed here because the value isn't set until
          // the setter function returns
          this.get(onChange).bind(this)(value);
        }

        return value;
      }

    }));
  }

  var _default = Ember.Service.extend({
    store: Ember.inject.service(),
    config: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    notifications: Ember.inject.service(),
    lazyLoader: Ember.inject.service(),
    emailAnalytics: feature('emailAnalytics'),
    nightShift: feature('nightShift', {
      user: true,
      onChange: '_setAdminTheme'
    }),
    multipleProducts: feature('multipleProducts'),
    oauthLogin: feature('oauthLogin'),
    membersActivity: feature('membersActivity'),
    cardSettingsPanel: feature('cardSettingsPanel'),
    urlCache: feature('urlCache'),
    beforeAfterCard: feature('beforeAfterCard'),
    tweetGridCard: feature('tweetGridCard'),
    membersActivityFeed: feature('membersActivityFeed'),
    _user: null,
    labs: Ember.computed('settings.labs', function () {
      let labs = this.get('settings.labs');

      try {
        return JSON.parse(labs) || {};
      } catch (e) {
        return {};
      }
    }),
    accessibility: Ember.computed('_user.accessibility', function () {
      let accessibility = this.get('_user.accessibility');

      try {
        return JSON.parse(accessibility) || {};
      } catch (e) {
        return {};
      }
    }),

    fetch() {
      return this.settings.fetch().then(() => {
        this.set('_user', this.session.user);
        return this._setAdminTheme().then(() => true);
      });
    },

    update(key, value) {
      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      let serviceProperty = options.user ? 'accessibility' : 'labs';
      let model = this.get(options.user ? '_user' : 'settings');
      let featureObject = this.get(serviceProperty); // set the new key value for either the labs property or the accessibility property

      Ember.set(featureObject, key, value);

      if (options.requires && value === true) {
        options.requires.forEach(flag => {
          Ember.set(featureObject, flag, true);
        });
      } // update the 'labs' or 'accessibility' key of the model


      model.set(serviceProperty, JSON.stringify(featureObject));
      return model.save().then(() => {
        // return the labs key value that we get from the server
        this.notifyPropertyChange(serviceProperty);
        return this.get(`${serviceProperty}.${key}`);
      }).catch(error => {
        model.rollbackAttributes();
        this.notifyPropertyChange(serviceProperty); // we'll always have an errors object unless we hit a
        // validation error

        if (!error) {
          throw new Ember.Error(`Validation of the feature service ${options.user ? 'user' : 'settings'} model failed when updating ${serviceProperty}.`);
        }

        this.notifications.showAPIError(error);
        return this.get(`${serviceProperty}.${key}`);
      });
    },

    _setAdminTheme(enabled) {
      let nightShift = enabled;

      if (typeof nightShift === 'undefined') {
        nightShift = enabled || this.nightShift;
      }

      return this.lazyLoader.loadStyle('dark', 'assets/ghost-dark.css', true).then(() => {
        (0, _jquery.default)('link[title=dark]').prop('disabled', !nightShift);
      }).catch(() => {
        //TODO: Also disable toggle from settings and Labs hover
        (0, _jquery.default)('link[title=dark]').prop('disabled', true);
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/frontend", ["exports", "fetch", "validator"], function (_exports, _fetch, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let FrontendService = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, (_class = class FrontendService extends Ember.Service {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "settings", _descriptor, this);

      _initializerDefineProperty(this, "config", _descriptor2, this);

      _initializerDefineProperty(this, "ajax", _descriptor3, this);

      _defineProperty(this, "_hasLoggedIn", false);

      _defineProperty(this, "_lastPassword", null);
    }

    get hasPasswordChanged() {
      return this._lastPassword !== this.settings.get('password');
    }

    getUrl(path) {
      const siteUrl = new URL(this.config.get('blogUrl'));
      const subdir = siteUrl.pathname.endsWith('/') ? siteUrl.pathname : `${siteUrl.pathname}/`;
      const fullPath = `${subdir}${path.replace(/^\//, '')}`;
      return `${siteUrl.origin}${fullPath}`;
    }

    async loginIfNeeded() {
      if (this.settings.get('isPrivate') && (this.hasPasswordChanged || !this._hasLoggedIn)) {
        const privateLoginUrl = this.getUrl('/private/?r=%2F');
        this._lastPassword = this.settings.get('password');
        return (0, _fetch.default)(privateLoginUrl, {
          method: 'POST',
          mode: 'cors',
          redirect: 'manual',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          },
          body: `password=${this._lastPassword}`
        }).then(() => {
          this._hasLoggedIn = true;
        }).catch(e => {
          // Safari will error when x-site tracking is prevented and frontend/admin are separate
          // we don't want to break anything else in that case so make it look like it succeeded
          console.error(e); // eslint-disable-line

          return true;
        });
      }
    }

    async fetch(urlOrPath, options) {
      await this.loginIfNeeded();
      let frontendUrl = urlOrPath;

      if (!_validator.default.isURL(urlOrPath)) {
        frontendUrl = this.getUrl(urlOrPath);
      }

      return (0, _fetch.default)(frontendUrl, {
        mode: 'cors',
        credentials: 'include',
        ...options
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = FrontendService;
});
;define("ghost-admin/services/ghost-paths", ["exports", "ghost-admin/utils/ghost-paths"], function (_exports, _ghostPaths) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend((0, _ghostPaths.default)());

  _exports.default = _default;
});
;define("ghost-admin/services/in-viewport", ["exports", "ember-in-viewport/services/in-viewport"], function (_exports, _inViewport) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _inViewport.default;
    }
  });
});
;define("ghost-admin/services/infinity", ["exports", "ember-infinity/services/infinity"], function (_exports, _infinity) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _infinity.default;
    }
  });
});
;define("ghost-admin/services/keyboard", ["exports", "ember-keyboard/services/keyboard"], function (_exports, _keyboard) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _keyboard.default;
    }
  });
});
;define("ghost-admin/services/koenig-drag-drop-handler", ["exports", "koenig-editor/services/koenig-drag-drop-handler"], function (_exports, _koenigDragDropHandler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigDragDropHandler.default;
    }
  });
});
;define("ghost-admin/services/koenig-ui", ["exports", "koenig-editor/services/koenig-ui"], function (_exports, _koenigUi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigUi.default;
    }
  });
});
;define("ghost-admin/services/lazy-loader", ["exports", "ghost-admin/config/environment"], function (_exports, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend({
    ajax: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    // This is needed so we can disable it in unit tests
    testing: undefined,
    scriptPromises: null,

    init() {
      this._super(...arguments);

      this.scriptPromises = {};

      if (this.testing === undefined) {
        this.testing = _environment.default.environment === 'test';
      }
    },

    loadScript(key, url) {
      if (this.testing) {
        return Ember.RSVP.resolve();
      }

      if (this.scriptPromises[key]) {
        return this.scriptPromises[key];
      }

      let scriptPromise = new Ember.RSVP.Promise((resolve, reject) => {
        let {
          adminRoot
        } = this.ghostPaths;
        let script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.src = `${adminRoot}${url}`;
        let el = document.getElementsByTagName('script')[0];
        el.parentNode.insertBefore(script, el);
        script.addEventListener('load', () => {
          resolve();
        });
        script.addEventListener('error', () => {
          reject(new Error(`${url} failed to load`));
        });
      });
      this.scriptPromises[key] = scriptPromise;
      return scriptPromise;
    },

    loadStyle(key, url) {
      let alternate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (this.testing || document.querySelector(`#${key}-styles`)) {
        return Ember.RSVP.resolve();
      }

      return new Ember.RSVP.Promise((resolve, reject) => {
        let link = document.createElement('link');
        link.id = `${key}-styles`;
        link.rel = alternate ? 'alternate stylesheet' : 'stylesheet';
        link.href = `${this.ghostPaths.adminRoot}${url}`;

        link.onload = () => {
          link.onload = null;

          if (alternate) {
            // If stylesheet is alternate and we disable the stylesheet before injecting into the DOM,
            // the onload handler never gets called. Thus, we should disable the link after it has finished loading
            link.disabled = true;
          }

          resolve();
        };

        link.onerror = reject;

        if (alternate) {
          link.title = key;
        }

        document.querySelector('head').appendChild(link);
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/limit", ["exports", "@tryghost/limit-service"], function (_exports, _limitService) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  class LimitError {
    constructor(_ref) {
      let {
        errorType,
        errorDetails,
        message
      } = _ref;
      this.errorType = errorType;
      this.errorDetails = errorDetails;
      this.message = message;
    }

  }

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(LimitError, true);

  window.__CLASSIC_OWN_CLASSES__.set(LimitError, true);

  class IncorrectUsageError extends LimitError {
    constructor(options) {
      super(Object.assign({
        errorType: 'IncorrectUsageError'
      }, options));
    }

  }

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(IncorrectUsageError, true);

  window.__CLASSIC_OWN_CLASSES__.set(IncorrectUsageError, true);

  class HostLimitError extends LimitError {
    constructor(options) {
      super(Object.assign({
        errorType: 'HostLimitError'
      }, options));
    }

  }

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(HostLimitError, true);

  window.__CLASSIC_OWN_CLASSES__.set(HostLimitError, true);

  let LimitsService = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, (_class = class LimitsService extends Ember.Service {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "store", _descriptor2, this);

      _initializerDefineProperty(this, "membersStats", _descriptor3, this);

      let limits = this.config.get('hostSettings.limits');
      this.limiter = new _limitService.default();

      if (!limits) {
        return;
      }

      let helpLink;

      if (this.config.get('hostSettings.billing.enabled') && this.config.get('hostSettings.billing.enabled') === true && this.config.get('hostSettings.billing.url')) {
        helpLink = this.config.get('hostSettings.billing.url');
      } else {
        helpLink = 'https://ghost.org/help/';
      }

      return this.limiter.loadLimits({
        limits: this.decorateWithCountQueries(limits),
        helpLink,
        errors: {
          HostLimitError,
          IncorrectUsageError
        }
      });
    }

    async checkWouldGoOverLimit(limitName) {
      let metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.limiter.checkWouldGoOverLimit(limitName, metadata);
    }

    decorateWithCountQueries(limits) {
      if (limits.staff) {
        limits.staff.currentCountQuery = Ember.run.bind(this, this.getStaffUsersCount);
      }

      if (limits.members) {
        limits.members.currentCountQuery = Ember.run.bind(this, this.getMembersCount);
      }

      return limits;
    }

    async getStaffUsersCount() {
      return Ember.RSVP.hash({
        users: this.store.findAll('user', {
          reload: true
        }),
        invites: this.store.findAll('invite', {
          reload: true
        }),
        roles: this.store.findAll('role', {
          reload: true
        }) // NOTE: roles have to be fetched as they are not always loaded with invites

      }).then(data => {
        const staffUsers = data.users.filter(u => u.get('status') !== 'inactive' && u.role.get('name') !== 'Contributor');
        const staffInvites = data.invites.filter(i => i.role.get('name') !== 'Contributor');
        return staffUsers.length + staffInvites.length;
      });
    }

    async getMembersCount() {
      const counts = await this.membersStats.fetchCounts();
      return counts.total;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "membersStats", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = LimitsService;
});
;define("ghost-admin/services/liquid-fire-transitions", ["exports", "liquid-wormhole/services/liquid-fire-transitions"], function (_exports, _liquidFireTransitions) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidFireTransitions.default;
    }
  });
});
;define("ghost-admin/services/liquid-wormhole", ["exports", "liquid-wormhole/services/liquid-wormhole"], function (_exports, _liquidWormhole) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidWormhole.default;
    }
  });
});
;define("ghost-admin/services/media-queries", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const MEDIA_QUERIES = {
    maxWidth600: '(max-width: 600px)',
    isMobile: '(max-width: 800px)',
    maxWidth900: '(max-width: 900px)',
    maxWidth1000: '(max-width: 1000px)'
  };

  var _default = Ember.Service.extend(Ember.Evented, {
    init() {
      this._super(...arguments);

      this._handlers = [];
      this.loadQueries(MEDIA_QUERIES);
    },

    loadQueries(queries) {
      Object.keys(queries).forEach(key => {
        this.loadQuery(key, queries[key]);
      });
    },

    loadQuery(key, queryString) {
      let query = window.matchMedia(queryString);
      this.set(key, query.matches);
      let handler = Ember.run.bind(this, () => {
        let lastValue = this.get(key);
        let newValue = query.matches;

        if (lastValue !== newValue) {
          this.set(key, newValue);
          this.trigger('change', key, newValue);
        }
      });
      query.addListener(handler);

      this._handlers.push([query, handler]);
    },

    willDestroy() {
      this._handlers.forEach(_ref => {
        let [query, handler] = _ref;
        query.removeListener(handler);
      });

      this._super(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/media", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // dummy service to account for not having the ember-responsive dependency
  // available for ember-light-table (we don't use it so no need for the dep)
  // see https://github.com/offirgolan/ember-light-table/issues/576
  var _default = Ember.Service.extend({});

  _exports.default = _default;
});
;define("ghost-admin/services/member-import-validator", ["exports", "validator"], function (_exports, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend({
    ajax: Ember.inject.service(),
    membersUtils: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),

    check(data) {
      let sampledData = this._sampleData(data);

      let mapping = this._detectDataTypes(sampledData);

      return mapping;
    },

    /**
     * Method implements foollowing sampling logic:
     * Locate 10 non-empty cells from the start/middle(ish)/end of each column (30 non-empty values in total).
     * If the data contains 30 rows or fewer, all rows should be validated.
     *
     * @param {Array} data JSON objects mapped from CSV file
     */
    _sampleData(data) {
      let validationSampleSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;
      let validatedSet = [{}];

      if (data && data.length > validationSampleSize) {
        let sampleKeys = Object.keys(data[0]);
        sampleKeys.forEach(function (key) {
          const nonEmptyKeyEntries = data.filter(entry => !Ember.isEmpty(entry[key]));
          let sampledEntries = [];

          if (nonEmptyKeyEntries.length <= validationSampleSize) {
            sampledEntries = nonEmptyKeyEntries;
          } else {
            // take 3 equal parts from head, tail and middle of the data set
            const partitionSize = validationSampleSize / 3;
            const head = data.slice(0, partitionSize);
            const tail = data.slice(data.length - partitionSize, data.length);
            const middleIndex = Math.floor(data.length / 2);
            const middleStartIndex = middleIndex - 2;
            const middleEndIndex = middleIndex + 3;
            const middle = data.slice(middleStartIndex, middleEndIndex);
            validatedSet.push(...head);
            validatedSet.push(...middle);
            validatedSet.push(...tail);
          }

          sampledEntries.forEach((entry, index) => {
            if (!validatedSet[index]) {
              validatedSet[index] = {};
            }

            validatedSet[index][key] = entry[key];
          });
        });
      } else {
        validatedSet = data;
      }

      return validatedSet;
    },

    /**
     * Detects supported data types and auto-detects following two needed for validation:
     *  1. email
     *  2. stripe_customer_id
     *
     * Returned "mapping" object contains mappings that could be accepted by the API
     * to map validated types.
     * @param {Array} data sampled data containing non empty values
     */
    _detectDataTypes(data) {
      const supportedTypes = ['email', 'name', 'note', 'subscribed_to_emails', 'labels', 'created_at'];
      const autoDetectedTypes = ['email'];
      let mapping = {};
      let i = 0; // loopping through all sampled data until needed data types are detected

      while (i <= data.length - 1) {
        if (mapping.email && mapping.stripe_customer_id) {
          break;
        }

        let entry = data[i];

        for (const [key, value] of Object.entries(entry)) {
          if (!mapping.email && _validator.default.isEmail(value)) {
            mapping.email = key;
            continue;
          }

          if (!mapping.name && /name/.test(key)) {
            mapping.name = key;
            continue;
          }

          if (!mapping[key] && supportedTypes.includes(key) && !autoDetectedTypes.includes(key)) {
            mapping[key] = key;
          }
        }

        i += 1;
      }

      return mapping;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/members-count-cache", ["exports", "moment", "ghost-admin/helpers/gh-pluralize", "ember-concurrency-decorators"], function (_exports, _moment, _ghPluralize, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let MembersCountCacheService = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, (_class = class MembersCountCacheService extends Ember.Service {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "session", _descriptor, this);

      _initializerDefineProperty(this, "store", _descriptor2, this);

      _defineProperty(this, "cache", {});
    }

    async count(filter) {
      const cachedValue = this.cache[filter];

      if (cachedValue && (0, _moment.default)().diff(cachedValue.time, 'seconds') > 60) {
        return cachedValue.count;
      }

      const count = this._countMembersTask.perform(filter);

      this.cache[filter] = {
        count,
        time: (0, _moment.default)()
      };
      return count;
    }

    async countString() {
      let filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      let {
        knownCount
      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      const user = this.session.user;
      const basicFilter = filter.replace(/^subscribed:true\+\((.*)\)$/, '$1');
      const filterParts = basicFilter.split(',');
      const isFree = filterParts.length === 1 && filterParts[0] === 'status:free';
      const isPaid = filterParts.length === 1 && filterParts[0] === 'status:-free';
      const isAll = !filter || filterParts.includes('status:free') && filterParts.includes('status:-free'); // editors don't have permission to browse members so can't retrieve a count
      // TODO: remove when editors have relevant permissions or we have a different way of fetching counts

      if (user.isEditor && knownCount === undefined) {
        if (isFree) {
          return 'all free members';
        }

        if (isPaid) {
          return 'all paid members';
        }

        if (isAll) {
          return 'all members';
        }

        return 'a custom members segment';
      }

      const recipientCount = knownCount !== undefined ? knownCount : await this.count(filter);

      if (isFree) {
        return (0, _ghPluralize.ghPluralize)(recipientCount, 'free member');
      }

      if (isPaid) {
        return (0, _ghPluralize.ghPluralize)(recipientCount, 'paid member');
      }

      return (0, _ghPluralize.ghPluralize)(recipientCount, 'member');
    }

    *_countMembersTask(filter) {
      if (!filter) {
        return 0;
      }

      try {
        const result = yield this.store.query('member', {
          filter,
          limit: 1,
          page: 1
        });
        return result.meta.pagination.total;
      } catch (e) {
        console.error(e); // eslint-disable-line

        return 0;
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "_countMembersTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "_countMembersTask"), _class.prototype)), _class));
  _exports.default = MembersCountCacheService;
});
;define("ghost-admin/services/members-stats", ["exports", "moment", "ember-concurrency-decorators"], function (_exports, _moment, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const ONE_MINUTE = 1 * 60 * 1000;
  let MembersStatsService = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._tracked, (_class = class MembersStatsService extends Ember.Service {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ajax", _descriptor, this);

      _initializerDefineProperty(this, "ghostPaths", _descriptor2, this);

      _initializerDefineProperty(this, "store", _descriptor3, this);

      _initializerDefineProperty(this, "days", _descriptor4, this);

      _initializerDefineProperty(this, "stats", _descriptor5, this);

      _initializerDefineProperty(this, "events", _descriptor6, this);

      _initializerDefineProperty(this, "countStats", _descriptor7, this);

      _initializerDefineProperty(this, "mrrStats", _descriptor8, this);

      _initializerDefineProperty(this, "newsletterStats", _descriptor9, this);
    }

    fetch() {
      let daysChanged = this._lastFetchedDays !== this.days;
      let staleData = this._lastFetched && new Date() - this._lastFetched > ONE_MINUTE; // return an already in-progress promise unless params have changed

      if (this._fetchTask.isRunning && !this._forceRefresh && !daysChanged) {
        return this._fetchTask.last;
      } // return existing stats unless data is > 1 min old


      if (this.stats && !this._forceRefresh && !daysChanged && !staleData) {
        return Promise.resolve(this.stats);
      }

      return this._fetchTask.perform();
    }

    fetchCounts() {
      let staleData = this._lastFetchedCounts && new Date() - this._lastFetchedCounts > ONE_MINUTE; // return an already in-progress promise unless params have changed

      if (this._fetchCountsTask.isRunning) {
        return this._fetchCountsTask.last;
      } // return existing stats unless data is > 1 min old


      if (this.countStats && !this._forceRefresh && !staleData) {
        return Promise.resolve(this.countStats);
      }

      return this._fetchCountsTask.perform();
    }

    fetchNewsletterStats() {
      let staleData = this._lastFetchedNewsletterStats && new Date() - this._lastFetchedNewsletterStats > ONE_MINUTE; // return an already in-progress promise unless params have changed

      if (this._fetchNewsletterStatsTask.isRunning) {
        return this._fetchNewsletterStatsTask.last;
      } // return existing stats unless data is > 1 min old


      if (this.newsletterStats && !this._forceRefresh && !staleData) {
        return Promise.resolve(this.newsletterStats);
      }

      return this._fetchNewsletterStatsTask.perform();
    }

    fillDates() {
      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      let currentRangeDate = (0, _moment.default)().subtract(30, 'days');
      let endDate = (0, _moment.default)().add(1, 'hour');
      const output = {};
      const firstDateInRangeIndex = data.findIndex(val => {
        return (0, _moment.default)(val.date).isAfter(currentRangeDate);
      });
      let initialDateInRangeVal = firstDateInRangeIndex > 0 ? data[firstDateInRangeIndex - 1] : null;

      if (firstDateInRangeIndex === 0 && !initialDateInRangeVal) {
        initialDateInRangeVal = data[firstDateInRangeIndex];
      }

      if (data.length > 0 && !initialDateInRangeVal && firstDateInRangeIndex !== 0) {
        initialDateInRangeVal = data[data.length - 1];
      }

      let lastVal = initialDateInRangeVal ? initialDateInRangeVal.value : 0;

      while (currentRangeDate.isBefore(endDate)) {
        let dateStr = currentRangeDate.format('YYYY-MM-DD');
        const dataOnDate = data.find(d => d.date === dateStr);
        output[dateStr] = dataOnDate ? dataOnDate.value : lastVal;
        lastVal = output[dateStr];
        currentRangeDate = currentRangeDate.add(1, 'day');
      }

      return output;
    }

    fillCountDates() {
      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let currentRangeDate = (0, _moment.default)().subtract(30, 'days');
      let endDate = (0, _moment.default)().add(1, 'hour');
      const output = {};
      const firstDateInRangeIndex = data.findIndex(val => {
        return (0, _moment.default)(val.date).isAfter(currentRangeDate);
      });
      let initialDateInRangeVal = firstDateInRangeIndex > 0 ? data[firstDateInRangeIndex - 1] : null;

      if (firstDateInRangeIndex === 0 && !initialDateInRangeVal) {
        initialDateInRangeVal = data[firstDateInRangeIndex];
      }

      if (data.length > 0 && !initialDateInRangeVal && firstDateInRangeIndex !== 0) {
        initialDateInRangeVal = data[data.length - 1];
      }

      let lastVal = {
        paid: initialDateInRangeVal ? initialDateInRangeVal.paid : 0,
        free: initialDateInRangeVal ? initialDateInRangeVal.free : 0,
        comped: initialDateInRangeVal ? initialDateInRangeVal.comped : 0,
        total: initialDateInRangeVal ? initialDateInRangeVal.paid + initialDateInRangeVal.free + initialDateInRangeVal.comped : 0
      };

      while (currentRangeDate.isBefore(endDate)) {
        let dateStr = currentRangeDate.format('YYYY-MM-DD');
        const dataOnDate = data.find(d => d.date === dateStr);
        output[dateStr] = dataOnDate ? {
          paid: dataOnDate.paid,
          free: dataOnDate.free,
          comped: dataOnDate.comped,
          total: dataOnDate.paid + dataOnDate.free + dataOnDate.comped
        } : lastVal;
        lastVal = output[dateStr];
        currentRangeDate = currentRangeDate.add(1, 'day');
      }

      return output;
    }

    fetchMRR() {
      let staleData = this._lastFetchedMRR && new Date() - this._lastFetchedMRR > ONE_MINUTE; // return an already in-progress promise unless params have changed

      if (this._fetchMRRTask.isRunning) {
        return this._fetchMRRTask.last;
      } // return existing stats unless data is > 1 min old


      if (this.mrrStats && !this._forceRefresh && !staleData) {
        return Promise.resolve(this.mrrStats);
      }

      return this._fetchMRRTask.perform();
    }

    invalidate() {
      this._forceRefresh = true;
    }

    *_fetchNewsletterStatsTask() {
      const limit = 5;
      let query = {
        filter: 'email_count:-0',
        order: 'submitted_at desc',
        limit: limit
      };
      const results = yield this.store.query('email', query);
      const data = results.toArray();
      let stats = data.map(d => {
        return {
          subject: d.subject,
          submittedAt: (0, _moment.default)(d.submittedAtUTC).format('YYYY-MM-DD'),
          openRate: d.openRate
        };
      });
      const paddedResults = [];

      if (data.length < limit) {
        const pad = limit - data.length;
        const lastSubmittedAt = data.length > 0 ? data[results.length - 1].submittedAtUTC : (0, _moment.default)();

        for (let i = 0; i < pad; i++) {
          paddedResults.push({
            subject: '',
            submittedAt: (0, _moment.default)(lastSubmittedAt).subtract(i + 1, 'days').format('YYYY-MM-DD'),
            openRate: 0
          });
        }
      }

      stats = stats.concat(paddedResults);
      stats.reverse();
      this.newsletterStats = stats;
      return stats;
    }

    *_fetchCountsTask() {
      this._lastFetchedCounts = new Date();
      let statsUrl = this.ghostPaths.url.api('members/stats/count');
      let stats = yield this.ajax.request(statsUrl);
      this.countStats = stats;
      return stats;
    }

    *_fetchMRRTask() {
      this._lastFetchedMRR = new Date();
      let statsUrl = this.ghostPaths.url.api('members/stats/mrr');
      let stats = yield this.ajax.request(statsUrl);
      this.mrrStats = stats;
      return stats;
    }

    *_fetchTask() {
      let {
        days
      } = this;
      this._lastFetchedDays = days;
      this._lastFetched = new Date();
      this._forceRefresh = false;
      let statsUrl = this.ghostPaths.url.api('members/stats');
      let stats = yield this.ajax.request(statsUrl, {
        data: {
          days
        }
      });
      this.stats = stats;
      return stats;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "ghostPaths", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "days", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '30';
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "stats", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "events", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "countStats", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "mrrStats", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "newsletterStats", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "_fetchNewsletterStatsTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "_fetchNewsletterStatsTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_fetchCountsTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "_fetchCountsTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_fetchMRRTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "_fetchMRRTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_fetchTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "_fetchTask"), _class.prototype)), _class));
  _exports.default = MembersStatsService;
});
;define("ghost-admin/services/members-utils", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let MembersUtilsService = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, (_class = class MembersUtilsService extends Ember.Service {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);

      _initializerDefineProperty(this, "feature", _descriptor3, this);
    }

    get isMembersEnabled() {
      return this.settings.get('membersSignupAccess') !== 'none';
    }

    get isStripeEnabled() {
      const stripeDirect = this.config.get('stripeDirect');
      const hasDirectKeys = !!this.settings.get('stripeSecretKey') && !!this.settings.get('stripePublishableKey');
      const hasConnectKeys = !!this.settings.get('stripeConnectSecretKey') && !!this.settings.get('stripeConnectPublishableKey');

      if (stripeDirect) {
        return hasDirectKeys;
      }

      return hasConnectKeys || hasDirectKeys;
    } // Button / Icon helpers ---------------------------------------------------


    get defaultButtonIcons() {
      return [{
        icon: 'portal-icon-1',
        value: 'icon-1'
      }, {
        icon: 'portal-icon-2',
        value: 'icon-2'
      }, {
        icon: 'portal-icon-3',
        value: 'icon-3'
      }, {
        icon: 'portal-icon-4',
        value: 'icon-4'
      }, {
        icon: 'portal-icon-5',
        value: 'icon-5'
      }];
    }

    get defaultIconKeys() {
      return this.defaultButtonIcons.map(buttonIcon => buttonIcon.value);
    }

    get buttonIcon() {
      return this.settings.get('portalButtonIcon') || this.defaultIconKeys[0];
    } // Plan helpers ------------------------------------------------------------


    get isFreeChecked() {
      const allowedPlans = this.settings.get('portalPlans') || [];
      return !!(this.settings.get('membersSignupAccess') === 'all' && allowedPlans.includes('free'));
    }

    get isMonthlyChecked() {
      const allowedPlans = this.settings.get('portalPlans') || [];
      return !!(this.isStripeConfigured && allowedPlans.includes('monthly'));
    }

    get isYearlyChecked() {
      const allowedPlans = this.settings.get('portalPlans') || [];
      return !!(this.isStripeConfigured && allowedPlans.includes('yearly'));
    } // Portal preview ----------------------------------------------------------


    getPortalPreviewUrl(overrides) {
      const {
        disableBackground = false,
        page = 'signup',
        button = this.settings.get('portalButton'),
        buttonIcon = this.buttonIcon,
        isFreeChecked = this.isFreeChecked,
        isMonthlyChecked = this.isMonthlyChecked,
        isYearlyChecked = this.isYearlyChecked,
        monthlyPrice,
        yearlyPrice,
        portalPlans = this.settings.get('portalPlans'),
        portalProducts = this.settings.get('portalProducts'),
        currency,
        membersSignupAccess = this.settings.get('membersSignupAccess')
      } = overrides;
      const baseUrl = this.config.get('blogUrl');
      const portalBase = '/#/portal/preview';
      const settingsParam = new URLSearchParams();
      const signupButtonText = this.settings.get('portalButtonSignupText') || '';
      const allowSelfSignup = membersSignupAccess === 'all' && (!this.isStripeEnabled || isFreeChecked);
      settingsParam.append('button', button);
      settingsParam.append('name', this.settings.get('portalName'));
      settingsParam.append('isFree', isFreeChecked);
      settingsParam.append('isMonthly', isMonthlyChecked);
      settingsParam.append('isYearly', isYearlyChecked);
      settingsParam.append('page', page);
      settingsParam.append('buttonIcon', encodeURIComponent(buttonIcon));
      settingsParam.append('signupButtonText', encodeURIComponent(signupButtonText));
      settingsParam.append('membersSignupAccess', membersSignupAccess);
      settingsParam.append('allowSelfSignup', allowSelfSignup);

      if (portalPlans) {
        settingsParam.append('portalPrices', encodeURIComponent(portalPlans));
      }

      if (portalProducts && this.feature.get('multipleProducts')) {
        settingsParam.append('portalProducts', encodeURIComponent(portalProducts));
      }

      if (this.settings.get('accentColor') === '' || this.settings.get('accentColor')) {
        settingsParam.append('accentColor', encodeURIComponent(`${this.settings.get('accentColor')}`));
      }

      if (this.settings.get('portalButtonStyle')) {
        settingsParam.append('buttonStyle', encodeURIComponent(this.settings.get('portalButtonStyle')));
      }

      if (monthlyPrice) {
        settingsParam.append('monthlyPrice', monthlyPrice);
      }

      if (yearlyPrice) {
        settingsParam.append('yearlyPrice', yearlyPrice);
      }

      if (currency) {
        settingsParam.append('currency', currency);
      }

      if (disableBackground) {
        settingsParam.append('disableBackground', true);
      }

      return `${baseUrl}${portalBase}?${settingsParam.toString()}`;
    }

    getOfferPortalPreviewUrl(overrides) {
      const {
        disableBackground = false,
        name,
        code,
        displayTitle = 'Display title',
        displayDescription = '',
        type,
        cadence,
        amount = 0,
        duration,
        durationInMonths,
        currency = 'usd',
        status,
        tierId
      } = overrides;
      const baseUrl = this.config.get('blogUrl');
      const portalBase = '/#/portal/preview/offer';
      const settingsParam = new URLSearchParams();
      settingsParam.append('name', encodeURIComponent(name));
      settingsParam.append('code', encodeURIComponent(code));
      settingsParam.append('display_title', encodeURIComponent(displayTitle));
      settingsParam.append('display_description', encodeURIComponent(displayDescription));
      settingsParam.append('type', encodeURIComponent(type));
      settingsParam.append('cadence', encodeURIComponent(cadence));
      settingsParam.append('amount', encodeURIComponent(amount));
      settingsParam.append('duration', encodeURIComponent(duration));
      settingsParam.append('duration_in_months', encodeURIComponent(durationInMonths));
      settingsParam.append('currency', encodeURIComponent(currency));
      settingsParam.append('status', encodeURIComponent(status));
      settingsParam.append('tier_id', encodeURIComponent(tierId));

      if (disableBackground) {
        settingsParam.append('disableBackground', 'true');
      }

      return `${baseUrl}${portalBase}?${settingsParam.toString()}`;
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = MembersUtilsService;
});
;define("ghost-admin/services/modals", ["exports", "ember-promise-modals/services/modals"], function (_exports, _modals) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ModalsService = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, (_class = class ModalsService extends _modals.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "dropdown", _descriptor, this);

      _initializerDefineProperty(this, "themeManagement", _descriptor2, this);

      _defineProperty(this, "DEFAULT_OPTIONS", {
        className: 'fullscreen-modal-action fullscreen-modal-wide'
      });

      _defineProperty(this, "MODAL_OPTIONS", {
        'modals/email-preview': {
          className: 'fullscreen-modal-full-overlay fullscreen-modal-email-preview'
        },
        'modals/design/upload-theme': {
          beforeClose: () => {
            if (this.themeManagement.isUploading) {
              return false;
            }
          }
        },
        'modals/design/view-theme': {
          className: 'fullscreen-modal-total-overlay',
          omitBackdrop: true
        }
      });

      _defineProperty(this, "allowOutsideClick", true);

      _defineProperty(this, "clickOutsideDeactivates", false);

      _defineProperty(this, "escapeDeactivates", false);
    }

    open(modal, data, options) {
      const mergedOptions = Object.assign({}, this.DEFAULT_OPTIONS, this.MODAL_OPTIONS[modal], options);
      return super.open(modal, data, mergedOptions);
    }

    _onFirstModalAdded() {
      super._onFirstModalAdded(...arguments);

      this.addEventHandlers();
      this.dropdown.closeDropdowns();
    }

    _onLastModalRemoved() {
      super._onLastModalRemoved(...arguments);

      this.removeEventHandlers();
    }

    addEventHandlers() {
      if (!this.backdropClickHandler) {
        this.backdropClickHandler = Ember.run.bind(this, this.handleBackdropClick);
        document.body.addEventListener('click', this.backdropClickHandler, {
          capture: true,
          passive: false
        });
      }

      if (!this.escapeKeyHandler) {
        this.escapeKeyHandler = Ember.run.bind(this, this.handleEscapeKey);
        document.addEventListener('keydown', this.escapeKeyHandler, {
          capture: true,
          passive: false
        });
      }
    }

    removeEventHandlers() {
      document.body.removeEventListener('click', this.backdropClickHandler, {
        capture: true,
        passive: false
      });
      this.backdropClickHandler = null;
      document.removeEventListener('keydown', this.escapeKeyHandler, {
        capture: true,
        passive: false
      });
      this.escapeKeyHandler = null;
    }

    handleBackdropClick(event) {
      let shouldClose = true;

      for (const elem of event.path || event.composedPath()) {
        if (elem.matches?.('.modal-content, .fullscreen-modal-total-overlay, .ember-basic-dropdown-content')) {
          shouldClose = false;
          break;
        }
      }

      if (shouldClose) {
        this.top.close();
      }
    }

    handleEscapeKey(event) {
      if (event.key === 'Escape') {
        this.top.close();
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "dropdown", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "themeManagement", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));
  _exports.default = ModalsService;
});
;define("ghost-admin/services/moment", ["exports", "ember-moment/services/moment", "ghost-admin/config/environment"], function (_exports, _moment, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    get
  } = Ember;

  var _default = _moment.default.extend({
    defaultFormat: get(_environment.default, 'moment.outputFormat')
  });

  _exports.default = _default;
});
;define("ghost-admin/services/navigation", ["exports", "@ember-decorators/object"], function (_exports, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const DEFAULT_SETTINGS = {
    expanded: {
      posts: true
    }
  };
  let NavigationService = (_dec = Ember.inject.service, _dec2 = Ember._tracked, _dec3 = (0, _object.observes)('session.{isAuthenticated,user}', 'session.user.accessibility'), _dec4 = Ember._action, (_class = class NavigationService extends Ember.Service {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "session", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);

      this.settings = Object.assign({}, DEFAULT_SETTINGS);
      this.updateSettings();
    } // eslint-disable-next-line ghost/ember/no-observers


    async updateSettings() {
      // avoid fetching user before authenticated otherwise the 403 can fire
      // during authentication and cause errors during setup/signin
      if (!this.session.isAuthenticated || !this.session.user) {
        return;
      }

      let userSettings = JSON.parse(this.session.user.accessibility || '{}') || {};
      this.settings = userSettings.navigation || Object.assign({}, DEFAULT_SETTINGS);
    }

    async toggleExpansion(key) {
      if (!this.settings.expanded) {
        this.settings.expanded = {};
      } // set is still needed here because we're not tracking deep keys
      // and Ember picks up that our templates are dependent on them and
      // complains. TODO: can we avoid set?


      Ember.set(this.settings.expanded, key, !this.settings.expanded[key]);
      return await this._saveNavigationSettings();
    }

    async _saveNavigationSettings() {
      let user = this.session.user;
      let userSettings = JSON.parse(user.get('accessibility')) || {};
      userSettings.navigation = this.settings;
      user.set('accessibility', JSON.stringify(userSettings));
      return user.save();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "updateSettings", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "updateSettings"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleExpansion", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, "toggleExpansion"), _class.prototype)), _class));
  _exports.default = NavigationService;
});
;define("ghost-admin/services/notifications", ["exports", "@sentry/browser", "ghost-admin/services/ajax"], function (_exports, Sentry, _ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // Notification keys take the form of "noun.verb.message", eg:
  //
  // "invite.resend.api-error"
  // "user.invite.already-invited"
  //
  // The "noun.verb" part will be used as the "key base" in duplicate checks
  // to avoid stacking of multiple error messages whilst leaving enough
  // specificity to re-use keys for i18n lookups
  var _default = Ember.Service.extend({
    delayedNotifications: null,
    content: null,

    init() {
      this._super(...arguments);

      this.delayedNotifications = Ember.A();
      this.content = Ember.A();
    },

    config: Ember.inject.service(),
    upgradeStatus: Ember.inject.service(),
    alerts: Ember.computed.filter('content', function (notification) {
      let status = Ember.get(notification, 'status');
      return status === 'alert';
    }),
    notifications: Ember.computed.filter('content', function (notification) {
      let status = Ember.get(notification, 'status');
      return status === 'notification';
    }),

    handleNotification(message, delayed) {
      // If this is an alert message from the server, treat it as html safe
      if (message.constructor.modelName === 'notification' && message.get('status') === 'alert') {
        message.set('message', Ember.String.htmlSafe(message.get('message')));
      }

      if (!Ember.get(message, 'status')) {
        Ember.set(message, 'status', 'notification');
      } // close existing duplicate alerts/notifications to avoid stacking


      if (Ember.get(message, 'key')) {
        this._removeItems(Ember.get(message, 'status'), Ember.get(message, 'key'));
      } // close existing alerts/notifications which have the same text to avoid stacking


      let newText = Ember.get(message, 'message').string || Ember.get(message, 'message');
      this.set('content', this.content.reject(notification => {
        let existingText = Ember.get(notification, 'message').string || Ember.get(notification, 'message');
        return existingText === newText;
      }));

      if (!delayed) {
        this.content.pushObject(message);
      } else {
        this.delayedNotifications.pushObject(message);
      }
    },

    showAlert(message, options) {
      options = options || {};

      if (!options.isApiError) {
        if (this.config.get('sentry_dsn')) {
          // message could be a htmlSafe object rather than a string
          const displayedMessage = Ember.get(message, 'string') || message;
          const contexts = {
            ghost: {
              displayed_message: displayedMessage,
              ghost_error_code: Ember.get(options, 'ghostErrorCode'),
              full_error: message,
              source: 'showAlert'
            }
          };
          Sentry.captureException(displayedMessage, {
            contexts,
            tags: {
              shown_to_user: true
            }
          });
        }
      }

      this.handleNotification({
        message,
        status: 'alert',
        description: options.description,
        icon: options.icon,
        type: options.type,
        key: options.key,
        actions: options.actions
      }, options.delayed);
    },

    showNotification(message, options) {
      options = options || {};
      this.handleNotification({
        message,
        status: 'notification',
        description: options.description,
        icon: options.icon,
        type: options.type,
        key: options.key,
        actions: options.actions
      }, options.delayed);
    },

    showAPIError(resp, options) {
      // handle "global" errors
      if ((0, _ajax.isVersionMismatchError)(resp)) {
        return this.upgradeStatus.requireUpgrade();
      } else if ((0, _ajax.isMaintenanceError)(resp)) {
        return this.upgradeStatus.maintenanceAlert();
      } // loop over ember-ajax errors object


      if (resp && resp.payload && Ember.isArray(resp.payload.errors)) {
        return resp.payload.errors.forEach(error => {
          this._showAPIError(error, options);
        });
      }

      this._showAPIError(resp, options);
    },

    _showAPIError(resp, options) {
      options = options || {};
      options.type = options.type || 'error'; // if possible use the title to get a unique key
      // - we only show one alert for each key so if we get multiple errors
      //   only the last one will be shown

      if (!options.key && !Ember.isBlank(Ember.get(resp, 'title'))) {
        options.key = Ember.String.dasherize(Ember.get(resp, 'title'));
      }

      options.key = ['api-error', options.key].compact().join('.');
      let msg = options.defaultErrorText || 'There was a problem on the server, please try again.';

      if (resp instanceof String) {
        msg = resp;
      } else if (!Ember.isBlank(Ember.get(resp, 'detail'))) {
        msg = resp.detail;
      } else if (!Ember.isBlank(Ember.get(resp, 'message'))) {
        msg = resp.message;
      }

      if (!Ember.isBlank(Ember.get(resp, 'context'))) {
        msg = `${msg} ${Ember.get(resp, 'context')}`;
      }

      if (this.config.get('sentry_dsn')) {
        const reportedError = resp instanceof Error ? resp : msg;
        Sentry.captureException(reportedError, {
          contexts: {
            ghost: {
              ghost_error_code: Ember.get(resp, 'ghostErrorCode'),
              displayed_message: msg,
              full_error: resp,
              source: 'showAPIError'
            }
          },
          tags: {
            shown_to_user: true
          }
        });
      }

      options.isApiError = true;
      this.showAlert(msg, options);
    },

    displayDelayed() {
      this.delayedNotifications.forEach(message => {
        this.content.pushObject(message);
      });
      this.set('delayedNotifications', []);
    },

    closeNotification(notification) {
      let content = this.content;

      if (notification.constructor.modelName === 'notification') {
        notification.deleteRecord();
        notification.save().finally(() => {
          content.removeObject(notification);
        });
      } else {
        content.removeObject(notification);
      }
    },

    closeNotifications(key) {
      this._removeItems('notification', key);
    },

    closeAlerts(key) {
      this._removeItems('alert', key);
    },

    clearAll() {
      this.content.clear();
    },

    _removeItems(status, key) {
      if (key) {
        let keyBase = this._getKeyBase(key); // TODO: keys should only have . special char but we should
        // probably use a better regexp escaping function/polyfill


        let escapedKeyBase = keyBase.replace('.', '\\.');
        let keyRegex = new RegExp(`^${escapedKeyBase}`);
        this.set('content', this.content.reject(item => {
          let itemKey = Ember.get(item, 'key');
          let itemStatus = Ember.get(item, 'status');
          return itemStatus === status && itemKey && itemKey.match(keyRegex);
        }));
      } else {
        this.set('content', this.content.rejectBy('status', status));
      }
    },

    // take a key and return the first two elements, eg:
    // "invite.revoke.failed" => "invite.revoke"
    _getKeyBase(key) {
      return key.split('.').slice(0, 2).join('.');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/power-calendar", ["exports", "ember-power-calendar/services/power-calendar"], function (_exports, _powerCalendar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerCalendar.default;
    }
  });
});
;define("ghost-admin/services/resize-detector", ["exports", "element-resize-detector"], function (_exports, _elementResizeDetector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend({
    init() {
      this._super(...arguments);

      this.detector = (0, _elementResizeDetector.default)({
        strategy: 'scroll'
      });
    },

    setup(selector, callback) {
      let element = document.querySelector(selector);

      if (!element) {
        // eslint-disable-next-line
        console.error(`service:resize-detector - could not find element matching ${selector}`);
      }

      this.detector.listenTo(element, callback);
    },

    teardown(selector, callback) {
      let element = document.querySelector(selector);

      if (element) {
        this.detector.removeListener(element, callback);
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/session", ["exports", "ember-simple-auth/services/session", "@sentry/browser"], function (_exports, _session, _browser) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let SessionService = (_dec = Ember.inject.service, _dec2 = Ember.inject.service('store'), _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, _dec7 = Ember.inject.service, _dec8 = Ember.inject.service, _dec9 = Ember.inject.service, _dec10 = Ember.inject.service, _dec11 = Ember._tracked, (_class = class SessionService extends _session.default {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "dataStore", _descriptor2, this);

      _initializerDefineProperty(this, "feature", _descriptor3, this);

      _initializerDefineProperty(this, "notifications", _descriptor4, this);

      _initializerDefineProperty(this, "router", _descriptor5, this);

      _initializerDefineProperty(this, "frontend", _descriptor6, this);

      _initializerDefineProperty(this, "settings", _descriptor7, this);

      _initializerDefineProperty(this, "ui", _descriptor8, this);

      _initializerDefineProperty(this, "upgradeStatus", _descriptor9, this);

      _initializerDefineProperty(this, "whatsNew", _descriptor10, this);

      _initializerDefineProperty(this, "user", _descriptor11, this);

      _defineProperty(this, "skipAuthSuccessHandler", false);
    }

    async populateUser() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this.user) {
        return;
      }

      const id = options.id || 'me';
      const user = await this.dataStore.queryRecord('user', {
        id
      });
      this.user = user;
    }

    async postAuthPreparation() {
      await Ember.RSVP.all([this.config.fetchAuthenticated(), this.feature.fetch(), this.settings.fetch()]);
      await this.frontend.loginIfNeeded(); // update Sentry with the full Ghost version which we only get after authentication

      if (this.config.get('sentry_dsn')) {
        (0, _browser.configureScope)(scope => {
          scope.addEventProcessor(event => {
            return new Promise(resolve => {
              resolve({ ...event,
                release: `ghost@${this.config.get('version')}`
              });
            });
          });
        });
      }

      this.loadServerNotifications();
      this.whatsNew.fetchLatest.perform();
    }

    async handleAuthentication() {
      if (!this.user) {
        try {
          await this.populateUser();
        } catch (err) {
          await this.invalidate();
        }

        await this.postAuthPreparation();
      }

      if (this.skipAuthSuccessHandler) {
        this.skipAuthSuccessHandler = false;
        return;
      }

      super.handleAuthentication('home');
    }

    handleInvalidation() {
      let transition = this.appLoadTransition;

      if (transition) {
        transition.send('authorizationFailed');
      } else {
        Ember.run.scheduleOnce('routerTransitions', this, 'triggerAuthorizationFailed');
      }
    } // TODO: this feels hacky, find a better way than using .send


    triggerAuthorizationFailed() {
      Ember.getOwner(this).lookup(`route:${this.router.currentRouteName}`).send('authorizationFailed');
    }

    loadServerNotifications() {
      if (this.isAuthenticated) {
        if (!this.user.isAuthorOrContributor) {
          this.dataStore.findAll('notification', {
            reload: true
          }).then(serverNotifications => {
            serverNotifications.forEach(notification => {
              if (notification.top || notification.custom) {
                this.notifications.handleNotification(notification);
              } else {
                this.upgradeStatus.handleUpgradeNotification(notification);
              }
            });
          });
        }
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "dataStore", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "notifications", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "frontend", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "ui", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "upgradeStatus", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "whatsNew", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "user", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  })), _class));
  _exports.default = SessionService;
});
;define("ghost-admin/services/settings", ["exports", "ghost-admin/mixins/validation-engine"], function (_exports, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // ember-cli-shims doesn't export _ProxyMixin
  const {
    _ProxyMixin
  } = Ember;

  var _default = Ember.Service.extend(_ProxyMixin, _validationEngine.default, {
    store: Ember.inject.service(),
    // will be set to the single Settings model, it's a reference so any later
    // changes to the settings object in the store will be reflected
    content: null,
    validationType: 'setting',
    _loadingPromise: null,
    // this is an odd case where we only want to react to changes that we get
    // back from the API rather than local updates
    settledIcon: '',

    // the settings API endpoint is a little weird as it's singular and we have
    // to pass in all types - if we ever fetch settings without all types then
    // save we have problems with the missing settings being removed or reset
    _loadSettings() {
      if (!this._loadingPromise) {
        this._loadingPromise = this.store.queryRecord('setting', {
          group: 'site,theme,private,members,portal,newsletter,email,amp,labs,slack,unsplash,views,firstpromoter,oauth,editor'
        }).then(settings => {
          this._loadingPromise = null;
          return settings;
        });
      }

      return this._loadingPromise;
    },

    fetch() {
      if (!this.content) {
        return this.reload();
      } else {
        return Ember.RSVP.resolve(this);
      }
    },

    reload() {
      return this._loadSettings().then(settings => {
        this.set('content', settings);
        this.set('settledIcon', Ember.get(settings, 'icon'));
        return this;
      });
    },

    async save() {
      let settings = this.content;

      if (!settings) {
        return false;
      }

      await settings.save();
      this.set('settledIcon', settings.icon);
      return settings;
    },

    rollbackAttributes() {
      return this.content?.rollbackAttributes();
    },

    changedAttributes() {
      return this.content?.changedAttributes();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/slug-generator", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    resolve
  } = Ember.RSVP;

  var _default = Ember.Service.extend({
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),

    generateSlug(slugType, textToSlugify) {
      let url;

      if (!textToSlugify) {
        return resolve('');
      }

      url = this.get('ghostPaths.url').api('slugs', slugType, encodeURIComponent(textToSlugify));
      return this.ajax.request(url).then(response => {
        let [firstSlug] = response.slugs;
        let {
          slug
        } = firstSlug;
        return slug;
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/store", ["exports", "ember-data/store"], function (_exports, _store) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _store.default;
    }
  });
});
;define("ghost-admin/services/tenor", ["exports", "fetch", "tracked-built-ins", "ember-concurrency-decorators", "ember-concurrency"], function (_exports, _fetch, _trackedBuiltIns, _emberConcurrencyDecorators, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const API_URL = 'https://g1.tenor.com';
  const API_VERSION = 'v1';
  const DEBOUNCE_MS = 600;
  let TenorService = (_dec = Ember.inject.service, _dec2 = Ember._tracked, _dec3 = Ember._tracked, _dec4 = Ember._tracked, _dec5 = Ember._tracked, _dec6 = Ember._tracked, _dec7 = Ember._tracked, _dec8 = Ember._action, _dec9 = Ember._action, _dec10 = Ember._action, _dec11 = (0, _emberConcurrencyDecorators.task)({
    restartable: true
  }), _dec12 = (0, _emberConcurrencyDecorators.task)({
    group: 'loadingTasks'
  }), _dec13 = (0, _emberConcurrencyDecorators.task)({
    group: 'loadingTasks'
  }), _dec14 = (0, _emberConcurrencyDecorators.task)({
    group: 'loadingTasks'
  }), (_class = class TenorService extends Ember.Service {
    get apiKey() {
      return this.config.get('tenor.publicReadOnlyApiKey');
    }

    get contentfilter() {
      return this.config.get('tenor.contentFilter') || 'off';
    }

    get isLoading() {
      return this.searchTask.isRunning || this.loadingTasks.isRunning;
    }

    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "columnCount", _descriptor2, this);

      _initializerDefineProperty(this, "columns", _descriptor3, this);

      _initializerDefineProperty(this, "error", _descriptor4, this);

      _initializerDefineProperty(this, "gifs", _descriptor5, this);

      _initializerDefineProperty(this, "searchTerm", _descriptor6, this);

      _initializerDefineProperty(this, "loadedType", _descriptor7, this);

      _defineProperty(this, "_columnHeights", []);

      _defineProperty(this, "_nextPos", null);

      _initializerDefineProperty(this, "loadingTasks", _descriptor8, this);

      this._resetColumns();
    }

    updateSearch(term) {
      if (term === this.searchTerm) {
        return;
      }

      this.searchTerm = term;
      this.reset();

      if (term) {
        return this.searchTask.perform(term);
      } else {
        return this.loadTrendingTask.perform();
      }
    }

    loadNextPage() {
      // protect against scroll trigger firing when the gifs are reset
      if (this.searchTask.isRunning) {
        return;
      }

      if (Ember.isEmpty(this.gifs)) {
        return this.loadTrendingTask.perform();
      }

      if (this._nextPos !== null) {
        this.loadNextPageTask.perform();
      }
    }

    changeColumnCount(columnCount) {
      this.columnCount = columnCount;

      this._resetColumns();
    }

    *searchTask(term) {
      yield (0, _emberConcurrency.timeout)(DEBOUNCE_MS);
      this.loadedType = 'search';
      yield this._makeRequest(this.loadedType, {
        params: {
          q: term,
          media_filter: 'minimal'
        }
      });
    }

    *loadTrendingTask() {
      this.loadedType = 'trending';
      yield this._makeRequest(this.loadedType, {
        params: {
          media_filter: 'minimal'
        }
      });
    }

    *loadNextPageTask() {
      const params = {
        pos: this._nextPos,
        media_filter: 'minimal'
      };

      if (this.loadedType === 'search') {
        params.q = this.searchTerm;
      }

      yield this._makeRequest(this.loadedType, {
        params
      });
    }

    *retryLastRequestTask() {
      if (this._lastRequestArgs) {
        yield this._makeRequest(...this._lastRequestArgs);
      }
    }

    reset() {
      this.gifs = new _trackedBuiltIns.TrackedArray([]);
      this._nextPos = null;

      this._resetColumns();
    }

    async _makeRequest(path, options) {
      const versionedPath = `${API_VERSION}/${path}`.replace(/\/+/, '/');
      const url = new URL(versionedPath, API_URL);
      const params = new URLSearchParams(options.params);
      params.set('key', this.apiKey);
      params.set('contentfilter', this.contentfilter);
      url.search = params.toString(); // store the url so it can be retried if needed

      this._lastRequestArgs = arguments;
      this.error = '';
      return (0, _fetch.default)(url).then(response => this._checkStatus(response)).then(response => response.json()).then(response => this._extractPagination(response)).then(response => this._addGifsFromResponse(response)).catch(e => {
        // if the error text isn't already set then we've get a connection error from `fetch`
        if (!options.ignoreErrors && !this.error) {
          this.error = 'Uh-oh! Trouble reaching the Tenor API, please check your connection';
        }

        console.error(e); // eslint-disable-line
      });
    }

    async _checkStatus(response) {
      // successful request
      if (response.status >= 200 && response.status < 300) {
        return response;
      }

      let responseText;

      if (response.headers.map['content-type'] === 'application/json') {
        responseText = await response.json().then(json => json.errors[0]);
      } else if (response.headers.map['content-type'] === 'text/xml') {
        responseText = await response.text();
      }

      this.error = responseText;
      const error = new Error(responseText);
      error.response = response;
      throw error;
    }

    async _extractPagination(response) {
      this._nextPos = response.next;
      return response;
    }

    async _addGifsFromResponse(response) {
      const gifs = response.results;
      gifs.forEach(gif => this._addGif(gif));
      return response;
    }

    _addGif(gif) {
      // re-calculate ratio for later use
      const [width, height] = gif.media[0].tinygif.dims;
      gif.ratio = height / width; // add to general gifs list

      this.gifs.push(gif); // store index for use in templates and keyboard nav

      gif.index = this.gifs.indexOf(gif); // add to least populated column

      this._addGifToColumns(gif);
    }

    _addGifToColumns(gif) {
      const min = Math.min(...this._columnHeights);

      const columnIndex = this._columnHeights.indexOf(min); // use a fixed width when calculating height to compensate for different overall sizes


      this._columnHeights[columnIndex] += 300 * gif.ratio;
      this.columns[columnIndex].push(gif); // store the column indexes on the gif for use in keyboard nav

      gif.columnIndex = columnIndex;
      gif.columnRowIndex = this.columns[columnIndex].length - 1;
    }

    _resetColumns() {
      let columns = new _trackedBuiltIns.TrackedArray([]);
      let _columnHeights = []; // pre-fill column arrays based on columnCount

      for (let i = 0; i < this.columnCount; i += 1) {
        columns[i] = new _trackedBuiltIns.TrackedArray([]);
        _columnHeights[i] = 0;
      }

      this.columns = columns;
      this._columnHeights = _columnHeights;

      if (!Ember.isEmpty(this.gifs)) {
        this.gifs.forEach(gif => {
          this._addGifToColumns(gif);
        });
      }
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "columnCount", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 4;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "columns", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "error", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "gifs", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return new _trackedBuiltIns.TrackedArray([]);
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "searchTerm", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "loadedType", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'trending';
    }
  }), _applyDecoratedDescriptor(_class.prototype, "updateSearch", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, "updateSearch"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "loadNextPage", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, "loadNextPage"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "changeColumnCount", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, "changeColumnCount"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "searchTask", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "searchTask"), _class.prototype), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "loadingTasks", [_emberConcurrencyDecorators.taskGroup], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "loadTrendingTask", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "loadTrendingTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "loadNextPageTask", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, "loadNextPageTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "retryLastRequestTask", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "retryLastRequestTask"), _class.prototype)), _class));
  _exports.default = TenorService;
});
;define("ghost-admin/services/text-measurer", ["exports", "ember-text-measurer/services/text-measurer"], function (_exports, _textMeasurer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _textMeasurer.default;
    }
  });
});
;define("ghost-admin/services/theme-management", ["exports", "ghost-admin/config/environment", "ghost-admin/services/ajax", "ember-concurrency-decorators"], function (_exports, _environment, _ajax, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let ThemeManagementService = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, _dec7 = Ember.inject.service, _dec8 = Ember.inject.service, _dec9 = Ember._tracked, _dec10 = Ember._tracked, _dec11 = Ember._tracked, _dec12 = Ember._action, _dec13 = Ember._action, (_class = class ThemeManagementService extends Ember.Service {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "ajax", _descriptor, this);

      _initializerDefineProperty(this, "config", _descriptor2, this);

      _initializerDefineProperty(this, "customThemeSettings", _descriptor3, this);

      _initializerDefineProperty(this, "limit", _descriptor4, this);

      _initializerDefineProperty(this, "modals", _descriptor5, this);

      _initializerDefineProperty(this, "settings", _descriptor6, this);

      _initializerDefineProperty(this, "store", _descriptor7, this);

      _initializerDefineProperty(this, "frontend", _descriptor8, this);

      _initializerDefineProperty(this, "isUploading", _descriptor9, this);

      _initializerDefineProperty(this, "previewType", _descriptor10, this);

      _initializerDefineProperty(this, "previewHtml", _descriptor11, this);

      _defineProperty(this, "allPosts", this.store.peekAll('post'));

      _defineProperty(this, "availablePreviewTypes", [{
        name: 'homepage',
        label: 'Homepage'
      }, {
        name: 'post',
        label: 'Post'
      }]);
    }

    get latestPublishedPost() {
      return this.allPosts.toArray().filterBy('status', 'published').sort((a, b) => {
        return b.publishedAtUTC.valueOf() - a.publishedAtUTC.valueOf();
      }).lastObject;
    }

    setPreviewType(type) {
      if (type !== this.previewType) {
        this.previewType = type;
        this.updatePreviewHtmlTask.perform();
      }
    }

    async upload() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      try {
        // Sending a bad string to make sure it fails (empty string isn't valid)
        await this.limit.limiter.errorIfWouldGoOverLimit('customThemes', {
          value: '.'
        });
      } catch (error) {
        if (error.errorType === 'HostLimitError') {
          return this.modals.open('modals/limits/custom-theme', {
            message: error.message
          });
        }

        throw error;
      }

      return this.modals.open('modals/design/upload-theme', options);
    }

    *activateTask(theme) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      let resultModal = null;

      try {
        const isOverLimit = yield this.limit.checkWouldGoOverLimit('customThemes', {
          value: theme.name
        });

        if (isOverLimit) {
          try {
            yield this.limit.limiter.errorIfWouldGoOverLimit('customThemes', {
              value: theme.name
            });
          } catch (error) {
            if (error.errorType !== 'HostLimitError') {
              throw error;
            }

            resultModal = this.modals.open('modals/limits/custom-theme', {
              message: error.message
            });
            yield resultModal;
            return;
          }
        }

        try {
          const activatedTheme = yield theme.activate();
          yield this.customThemeSettings.reload(); // must come after settings reload has finished otherwise we'll preview previous theme settings

          this.updatePreviewHtmlTask.perform();

          if (!options.skipErrors) {
            const {
              warnings,
              errors
            } = activatedTheme;

            if (!Ember.isEmpty(warnings) || !Ember.isEmpty(errors)) {
              resultModal = this.modals.open('modals/design/theme-errors', {
                title: 'Activation successful',
                canActivate: true,
                warnings,
                errors
              });
              yield resultModal;
            }
          }
        } catch (error) {
          if (!options.skipErrors) {
            if ((0, _ajax.isThemeValidationError)(error)) {
              let errors = error.payload.errors[0].details.errors;
              let fatalErrors = [];
              let normalErrors = []; // to have a proper grouping of fatal errors and none fatal, we need to check
              // our errors for the fatal property

              if (errors.length > 0) {
                for (let i = 0; i < errors.length; i += 1) {
                  if (errors[i].fatal) {
                    fatalErrors.push(errors[i]);
                  } else {
                    normalErrors.push(errors[i]);
                  }
                }
              }

              resultModal = this.modals.open('modals/design/theme-errors', {
                title: 'Activation failed',
                canActivate: false,
                errors: normalErrors,
                fatalErrors
              });
              yield resultModal;
            }
          }

          throw error;
        }
      } finally {
        // finally is always called even if the task is cancelled which gives
        // consumers the ability to cancel the task to clear any opened modals
        resultModal?.close();
      }
    }

    *updatePreviewHtmlTask() {
      // skip during testing because we don't have mocks for the front-end
      if (_environment.default.environment === 'test') {
        return;
      }

      let frontendUrl = '/';

      if (this.previewType === 'post') {
        // in case we haven't loaded any posts so far
        if (!this.latestPublishedPost) {
          yield this.store.query('post', {
            filter: 'status:published',
            order: 'published_at DESC',
            limit: 1
          });
        }

        frontendUrl = this.latestPublishedPost.url;
      }

      const previewResponse = yield this.frontend.fetch(frontendUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'text/html;charset=utf-8',
          'x-ghost-preview': this.previewData,
          Accept: 'text/plain'
        }
      });
      const previewContents = yield previewResponse.text(); // inject extra CSS to disable navigation and prevent clicks

      const injectedCss = `html { pointer-events: none; }`;
      const domParser = new DOMParser();
      const htmlDoc = domParser.parseFromString(previewContents, 'text/html');
      const stylesheet = htmlDoc.querySelector('style');
      const originalCSS = stylesheet.innerHTML;
      stylesheet.innerHTML = `${originalCSS}\n\n${injectedCss}`; // replace the iframe contents with the doctored preview html

      const doctype = new XMLSerializer().serializeToString(htmlDoc.doctype);
      this.previewHtml = doctype + htmlDoc.documentElement.outerHTML;
    }

    get previewData() {
      const params = new URLSearchParams();
      params.append('c', this.settings.get('accentColor') || '#ffffff');
      params.append('d', this.settings.get('description'));
      params.append('icon', this.settings.get('icon'));
      params.append('logo', this.settings.get('logo'));
      params.append('cover', this.settings.get('coverImage'));
      params.append('custom', JSON.stringify(this.customThemeSettings.keyValueObject));
      return params.toString();
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "ajax", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "config", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "customThemeSettings", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "limit", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "modals", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "store", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "frontend", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "isUploading", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "previewType", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return 'homepage';
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, "previewHtml", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "setPreviewType", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "setPreviewType"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "upload", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, "upload"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "activateTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "activateTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updatePreviewHtmlTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "updatePreviewHtmlTask"), _class.prototype)), _class));
  _exports.default = ThemeManagementService;
});
;define("ghost-admin/services/ui", ["exports", "@tryghost/color-utils"], function (_exports, _colorUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function collectMetadataClasses(transition, prop) {
    let oldClasses = [];
    let newClasses = [];
    let {
      from,
      to
    } = transition;

    while (from) {
      oldClasses = oldClasses.concat(Ember.get(from, `metadata.${prop}`) || []);
      from = from.parent;
    }

    while (to) {
      newClasses = newClasses.concat(Ember.get(to, `metadata.${prop}`) || []);
      to = to.parent;
    }

    return {
      oldClasses,
      newClasses
    };
  }

  function updateBodyClasses(transition) {
    let {
      body
    } = document;
    let {
      oldClasses,
      newClasses
    } = collectMetadataClasses(transition, 'bodyClasses');
    oldClasses.forEach(oldClass => {
      body.classList.remove(oldClass);
    });
    newClasses.forEach(newClass => {
      body.classList.add(newClass);
    });
  }

  let UiService = (_dec = Ember.inject.service, _dec2 = Ember.inject.service, _dec3 = Ember.inject.service, _dec4 = Ember.inject.service, _dec5 = Ember.inject.service, _dec6 = Ember.inject.service, _dec7 = Ember._tracked, _dec8 = Ember._tracked, _dec9 = Ember._tracked, _dec10 = Ember._tracked, _dec11 = Ember._action, _dec12 = Ember._action, _dec13 = Ember._action, _dec14 = Ember._action, _dec15 = Ember._action, _dec16 = Ember._action, _dec17 = Ember._action, (_class = class UiService extends Ember.Service {
    get isMobile() {
      return this.mediaQueries.isMobile;
    }

    get isSideNavHidden() {
      return this.isFullScreen || this.isMobile;
    }

    get hasSideNav() {
      return !this.isSideNavHidden;
    }

    get backgroundColor() {
      // hardcoded background colors because
      // grabbing color from .gh-main with getComputedStyle always returns #ffffff
      return this.feature.nightShift ? '#151719' : '#ffffff';
    }

    get adjustedAccentColor() {
      const accentColor = (0, _colorUtils.Color)(this.settings.get('accentColor'));
      const backgroundColor = (0, _colorUtils.Color)(this.backgroundColor); // WCAG contrast. 1 = lowest contrast, 21 = highest contrast

      const accentContrast = accentColor.contrast(backgroundColor);

      if (accentContrast > 2) {
        return accentColor.hex();
      }

      let adjustedAccentColor = accentColor;

      if (this.feature.nightShift) {
        adjustedAccentColor = (0, _colorUtils.lightenToContrastThreshold)(accentColor, backgroundColor, 2);
      } else {
        adjustedAccentColor = (0, _colorUtils.darkenToContrastThreshold)(accentColor, backgroundColor, 2);
      }

      return adjustedAccentColor.hex();
    }

    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "config", _descriptor, this);

      _initializerDefineProperty(this, "dropdown", _descriptor2, this);

      _initializerDefineProperty(this, "feature", _descriptor3, this);

      _initializerDefineProperty(this, "mediaQueries", _descriptor4, this);

      _initializerDefineProperty(this, "router", _descriptor5, this);

      _initializerDefineProperty(this, "settings", _descriptor6, this);

      _initializerDefineProperty(this, "contextualNavMenu", _descriptor7, this);

      _initializerDefineProperty(this, "isFullScreen", _descriptor8, this);

      _initializerDefineProperty(this, "mainClass", _descriptor9, this);

      _initializerDefineProperty(this, "showMobileMenu", _descriptor10, this);

      this.router.on('routeDidChange', transition => {
        updateBodyClasses(transition);
        this.updateDocumentTitle();
        let {
          newClasses: mainClasses
        } = collectMetadataClasses(transition, 'mainClasses');
        this.mainClass = mainClasses.join(' ');
      });
    }

    closeMenus() {
      this.dropdown.closeDropdowns();
      this.showMobileMenu = false;
    }

    closeMobileMenu() {
      this.showMobileMenu = false;
    }

    openMobileMenu() {
      this.showMobileMenu = true;
    }

    setMainClass(mainClass) {
      this.mainClass = mainClass;
    }

    updateDocumentTitle() {
      let {
        currentRoute
      } = this.router;
      let tokens = [];

      while (currentRoute) {
        let titleToken = Ember.get(currentRoute, 'metadata.titleToken');

        if (typeof titleToken === 'function') {
          titleToken = titleToken();
        }

        if (titleToken) {
          tokens.unshift(titleToken);
        }

        currentRoute = currentRoute.parent;
      }

      let blogTitle = this.config.get('blogTitle');

      if (!Ember.isEmpty(tokens)) {
        window.document.title = `${tokens.join(' - ')} - ${blogTitle}`;
      } else {
        window.document.title = blogTitle;
      }
    }

    initBodyDragHandlers() {
      // when any drag event is occurring we add `data-user-is-dragging` to the
      // body element so that we can have dropzones start listening to pointer
      // events allowing us to have interactive elements "underneath" drop zones
      this.bodyDragEnterHandler = event => {
        if (!event.dataTransfer) {
          return;
        }

        document.body.dataset.userIsDragging = true;
        window.clearTimeout(this.dragTimer);
      };

      this.bodyDragLeaveHandler = event => {
        // only remove document-level "user is dragging" indicator when leaving the document
        if (event.screenX !== 0 || event.screenY !== 0) {
          return;
        }

        window.clearTimeout(this.dragTimer);
        this.dragTimer = window.setTimeout(() => {
          delete document.body.dataset.userIsDragging;
        }, 50);
      };

      this.cancelDrag = () => {
        delete document.body.dataset.userIsDragging;
      };

      document.body.addEventListener('dragenter', this.bodyDragEnterHandler, {
        capture: true
      });
      document.body.addEventListener('dragleave', this.bodyDragLeaveHandler, {
        capture: true
      });
      document.body.addEventListener('dragend', this.cancelDrag, {
        capture: true
      });
      document.body.addEventListener('drop', this.cancelDrag, {
        capture: true
      });
    }

    cleanupBodyDragHandlers() {
      document.body.removeEventListener('dragenter', this.bodyDragEnterHandler, {
        capture: true
      });
      document.body.removeEventListener('dragleave', this.bodyDragLeaveHandler, {
        capture: true
      });
      document.body.removeEventListener('dragend', this.cancelDrag, {
        capture: true
      });
      document.body.removeEventListener('drop', this.cancelDrag, {
        capture: true
      });
    }

  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "config", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "dropdown", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "feature", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "mediaQueries", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "router", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "settings", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "contextualNavMenu", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "isFullScreen", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, "mainClass", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return '';
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, "showMobileMenu", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "closeMenus", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, "closeMenus"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "closeMobileMenu", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, "closeMobileMenu"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "openMobileMenu", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, "openMobileMenu"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setMainClass", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, "setMainClass"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "updateDocumentTitle", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, "updateDocumentTitle"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "initBodyDragHandlers", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, "initBodyDragHandlers"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "cleanupBodyDragHandlers", [_dec17], Object.getOwnPropertyDescriptor(_class.prototype, "cleanupBodyDragHandlers"), _class.prototype)), _class));
  _exports.default = UiService;
});
;define("ghost-admin/services/unsplash", ["exports", "fetch", "ember-concurrency"], function (_exports, _fetch, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const API_URL = 'https://api.unsplash.com';
  const API_VERSION = 'v1';
  const DEBOUNCE_MS = 600;

  var _default = Ember.Service.extend({
    config: Ember.inject.service(),
    settings: Ember.inject.service(),
    columnCount: 3,
    columns: null,
    error: '',
    photos: null,
    searchTerm: '',
    _columnHeights: null,
    _pagination: null,
    applicationId: '8672af113b0a8573edae3aa3713886265d9bb741d707f6c01a486cde8c278980',
    isLoading: Ember.computed.or('_search.isRunning', '_loadingTasks.isRunning'),

    init() {
      this._super(...arguments);

      this._reset();

      this.loadNew();
    },

    loadNew() {
      this._reset();

      return this._loadNew.perform();
    },

    loadNextPage() {
      // protect against scroll trigger firing when the photos are reset
      if (this.get('_search.isRunning')) {
        return;
      }

      if (Ember.isEmpty(this.photos)) {
        return this._loadNew.perform();
      }

      if (this._pagination.next) {
        return this._loadNextPage.perform();
      } // TODO: return error?


      return Ember.RSVP.reject();
    },

    updateSearch(term) {
      if (term === this.searchTerm) {
        return;
      }

      this.set('searchTerm', term);

      this._reset();

      if (term) {
        return this._search.perform(term);
      } else {
        return this._loadNew.perform();
      }
    },

    retryLastRequest() {
      return this._retryLastRequest.perform();
    },

    changeColumnCount(newColumnCount) {
      if (newColumnCount !== this.columnCount) {
        this.set('columnCount', newColumnCount);

        this._resetColumns();
      }
    },

    // let Unsplash know that the photo was inserted
    // https://medium.com/unsplash/unsplash-api-guidelines-triggering-a-download-c39b24e99e02
    triggerDownload(photo) {
      if (photo.links.download_location) {
        this._makeRequest(photo.links.download_location, {
          ignoreErrors: true
        });
      }
    },

    actions: {
      updateSearch(term) {
        return this.updateSearch(term);
      }

    },
    _loadingTasks: (0, _emberConcurrency.taskGroup)().drop(),
    _loadNew: (0, _emberConcurrency.task)(function* () {
      let url = `${API_URL}/photos?per_page=30`;
      yield this._makeRequest(url);
    }).group('_loadingTasks'),
    _loadNextPage: (0, _emberConcurrency.task)(function* () {
      yield this._makeRequest(this._pagination.next);
    }).group('_loadingTasks'),
    _retryLastRequest: (0, _emberConcurrency.task)(function* () {
      yield this._makeRequest(this._lastRequestUrl);
    }).group('_loadingTasks'),
    _search: (0, _emberConcurrency.task)(function* (term) {
      yield (0, _emberConcurrency.timeout)(DEBOUNCE_MS);
      let url = `${API_URL}/search/photos?query=${term}&per_page=30`;
      yield this._makeRequest(url);
    }).restartable(),

    _addPhotosFromResponse(response) {
      let photos = response.results || response;
      photos.forEach(photo => this._addPhoto(photo));
    },

    _addPhoto(photo) {
      // pre-calculate ratio for later use
      photo.ratio = photo.height / photo.width; // add to general photo list

      this.photos.pushObject(photo); // add to least populated column

      this._addPhotoToColumns(photo);
    },

    _addPhotoToColumns(photo) {
      let min = Math.min(...this._columnHeights);

      let columnIndex = this._columnHeights.indexOf(min); // use a fixed width when calculating height to compensate for different
      // overall image sizes


      this._columnHeights[columnIndex] += 300 * photo.ratio;
      this.columns[columnIndex].pushObject(photo);
    },

    _reset() {
      this.set('photos', []);
      this._pagination = {};

      this._resetColumns();
    },

    _resetColumns() {
      let columns = [];
      let columnHeights = []; // pre-fill column arrays based on columnCount

      for (let i = 0; i < this.columnCount; i += 1) {
        columns[i] = [];
        columnHeights[i] = 0;
      }

      this.set('columns', columns);
      this._columnHeights = columnHeights;

      if (!Ember.isEmpty(this.photos)) {
        this.photos.forEach(photo => {
          this._addPhotoToColumns(photo);
        });
      }
    },

    _makeRequest(url) {
      let _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      let defaultOptions = {
        ignoreErrors: false
      };
      let headers = {};
      let options = {};
      Ember.assign(options, defaultOptions, _options); // clear any previous error

      this.set('error', ''); // store the url so it can be retried if needed

      this._lastRequestUrl = url;
      headers.Authorization = `Client-ID ${this.applicationId}`;
      headers['Accept-Version'] = API_VERSION;
      headers['App-Pragma'] = 'no-cache';
      headers['X-Unsplash-Cache'] = true;
      return (0, _fetch.default)(url, {
        headers
      }).then(response => this._checkStatus(response)).then(response => this._extractPagination(response)).then(response => response.json()).then(response => this._addPhotosFromResponse(response)).catch(() => {
        // if the error text isn't already set then we've get a connection error from `fetch`
        if (!options.ignoreErrors && !this.error) {
          this.set('error', 'Uh-oh! Trouble reaching the Unsplash API, please check your connection');
        }
      });
    },

    _checkStatus(response) {
      // successful request
      if (response.status >= 200 && response.status < 300) {
        return Ember.RSVP.resolve(response);
      }

      let errorText = '';
      let responseTextPromise = Ember.RSVP.resolve();

      if (response.headers.map['content-type'] === 'application/json') {
        responseTextPromise = response.json().then(json => json.errors[0]);
      } else if (response.headers.map['content-type'] === 'text/xml') {
        responseTextPromise = response.text();
      }

      return responseTextPromise.then(responseText => {
        if (response.status === 403 && response.headers.map['x-ratelimit-remaining'] === '0') {
          // we've hit the ratelimit on the API
          errorText = 'Unsplash API rate limit reached, please try again later.';
        }

        errorText = errorText || responseText || `Error ${response.status}: Uh-oh! Trouble reaching the Unsplash API`; // set error text for display in UI

        this.set('error', errorText); // throw error to prevent further processing

        let error = new Error(errorText);
        error.response = response;
        throw error;
      });
    },

    _extractPagination(response) {
      let pagination = {};
      let linkRegex = new RegExp('<(.*)>; rel="(.*)"');
      let {
        link: links
      } = response.headers.map;

      if (links) {
        links.split(',').forEach(link => {
          let [, url, rel] = linkRegex.exec(link);
          pagination[rel] = url;
        });
      }

      this._pagination = pagination;
      return response;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/upgrade-status", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend({
    notifications: Ember.inject.service(),
    isRequired: false,
    message: '',

    // called when notifications are fetched during app boot for notifications
    // where the `location` is not 'top' and `custom` is false
    handleUpgradeNotification(notification) {
      let message = Ember.get(notification, 'message');
      Ember.set(this, 'message', Ember.String.htmlSafe(message));
    },

    // called when a MaintenanceError is encountered
    maintenanceAlert() {
      this.notifications.showAlert('Sorry, Ghost is currently undergoing maintenance, please wait a moment then try again.', {
        type: 'error',
        key: 'api-error.under-maintenance'
      });
    },

    // called when a VersionMismatchError is encountered
    requireUpgrade() {
      Ember.set(this, 'isRequired', true);
      this.notifications.showAlert('Ghost has been upgraded, please copy any unsaved data and refresh the page to continue.', {
        type: 'error',
        key: 'api-error.upgrade-required'
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/user-agent", ["exports", "ember-useragent/services/user-agent"], function (_exports, _userAgent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _userAgent.default;
    }
  });
});
;define("ghost-admin/services/utils", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class UtilsService extends Ember.Service {
    downloadFile(url) {
      let iframe = document.getElementById('iframeDownload');

      if (!iframe) {
        iframe = document.createElement('iframe');
        iframe.id = 'iframeDownload';
        iframe.style.display = 'none';
        document.body.append(iframe);
      }

      iframe.setAttribute('src', url);
    }

  }

  _exports.default = UtilsService;

  window.__CLASSIC_OWN_CLASSES__.set(UtilsService, true);
});
;define("ghost-admin/services/whats-new", ["exports", "fetch", "moment", "ember-concurrency"], function (_exports, _fetch, _moment, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend({
    session: Ember.inject.service(),
    entries: null,
    changelogUrl: 'https://ghost.org/blog/',
    isShowingModal: false,
    _user: null,

    init() {
      this._super(...arguments);

      this.entries = [];
    },

    whatsNewSettings: Ember.computed('_user.accessibility', function () {
      let settingsJson = this.get('_user.accessibility') || '{}';
      let settings = JSON.parse(settingsJson);
      return settings.whatsNew;
    }),
    hasNew: Ember.computed('whatsNewSettings.lastSeenDate', 'entries.[]', function () {
      if (Ember.isEmpty(this.entries)) {
        return false;
      }

      let [latestEntry] = this.entries;
      let lastSeenDate = this.get('whatsNewSettings.lastSeenDate') || '2019-01-01 00:00:00';
      let lastSeenMoment = (0, _moment.default)(lastSeenDate);
      let latestDate = latestEntry.published_at;
      let latestMoment = (0, _moment.default)(latestDate || lastSeenDate);
      return latestMoment.isAfter(lastSeenMoment);
    }),
    showModal: Ember._action(function () {
      this.set('isShowingModal', true);
    }),
    closeModal: Ember._action(function () {
      this.set('isShowingModal', false);
      this.updateLastSeen.perform();
    }),
    fetchLatest: (0, _emberConcurrency.task)(function* () {
      try {
        // we should already be logged in at this point so lets grab the user
        // record and store it locally so that we don't have to deal with
        // session.user being a promise and causing issues with CPs
        let user = yield this.session.user;
        this.set('_user', user);
        let response = yield (0, _fetch.default)('https://ghost.org/changelog.json');

        if (!response.ok) {
          // eslint-disable-next-line
          return console.error('Failed to fetch changelog', {
            response
          });
        }

        let result = yield response.json();
        this.set('entries', result.posts || []);
        this.set('changelogUrl', result.changelogUrl);
      } catch (e) {
        console.error(e); // eslint-disable-line
      }
    }),
    updateLastSeen: (0, _emberConcurrency.task)(function* () {
      let settingsJson = this._user.accessibility || '{}';
      let settings = JSON.parse(settingsJson);
      let [latestEntry] = this.entries;

      if (!latestEntry) {
        return;
      }

      if (!settings.whatsNew) {
        settings.whatsNew = {};
      }

      settings.whatsNew.lastSeenDate = latestEntry.published_at;

      this._user.set('accessibility', JSON.stringify(settings));

      yield this._user.save();
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/session-stores/application", ["exports", "ember-simple-auth/session-stores/ephemeral"], function (_exports, _ephemeral) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // Ghost already uses a cookie to store it's session so we don't need to keep
  // track of any other peristent login state separately in Ember Simple Auth
  var _default = _ephemeral.default.extend({
    session: Ember.inject.service(),

    // when loading the app we want ESA to try fetching the currently logged
    // in user. This will succeed/fail depending on whether we have a valid
    // session cookie or not so we can use that as an indication of the session
    // being authenticated
    restore() {
      return this.session.populateUser().then(() => {
        // provide the necessary data for internal-session to mark the
        // session as authenticated
        let data = {
          authenticated: {
            authenticator: 'authenticator:cookie'
          }
        };
        this.persist(data);
        return data;
      }).catch(() => {
        return Ember.RSVP.reject();
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/templates/-contributors", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "4hzreQ8R",
    "block": "{\"symbols\":[],\"statements\":[[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/JohnONolan\"],[14,\"title\",\"JohnONolan\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/JohnONolan.jpeg\"],[14,\"alt\",\"JohnONolan\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/ErisDS\"],[14,\"title\",\"ErisDS\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/ErisDS.jpeg\"],[14,\"alt\",\"ErisDS\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/sebgie\"],[14,\"title\",\"sebgie\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/sebgie.png\"],[14,\"alt\",\"sebgie\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/frantzypants\"],[14,\"title\",\"frantzypants\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/frantzypants.jpeg\"],[14,\"alt\",\"frantzypants\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/cobbspur\"],[14,\"title\",\"cobbspur\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/cobbspur.jpeg\"],[14,\"alt\",\"cobbspur\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/kevinansfield\"],[14,\"title\",\"kevinansfield\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/kevinansfield.jpeg\"],[14,\"alt\",\"kevinansfield\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/GeorginaLusby\"],[14,\"title\",\"GeorginaLusby\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/GeorginaLusby.jpeg\"],[14,\"alt\",\"GeorginaLusby\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/AileenCGN\"],[14,\"title\",\"AileenCGN\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/AileenCGN.jpeg\"],[14,\"alt\",\"AileenCGN\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/kirrg001\"],[14,\"title\",\"kirrg001\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/kirrg001.jpeg\"],[14,\"alt\",\"kirrg001\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/disordinary\"],[14,\"title\",\"disordinary\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/disordinary.jpeg\"],[14,\"alt\",\"disordinary\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/acburdine\"],[14,\"title\",\"acburdine\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/acburdine.jpeg\"],[14,\"alt\",\"acburdine\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/dbalders\"],[14,\"title\",\"dbalders\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/dbalders.jpeg\"],[14,\"alt\",\"dbalders\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/felixrieseberg\"],[14,\"title\",\"felixrieseberg\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/felixrieseberg.jpeg\"],[14,\"alt\",\"felixrieseberg\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/jaswilli\"],[14,\"title\",\"jaswilli\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/jaswilli.jpeg\"],[14,\"alt\",\"jaswilli\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/halfdan\"],[14,\"title\",\"halfdan\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/halfdan.jpeg\"],[14,\"alt\",\"halfdan\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/kevinkucharczyk\"],[14,\"title\",\"kevinkucharczyk\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/kevinkucharczyk.jpeg\"],[14,\"alt\",\"kevinkucharczyk\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/mixonic\"],[14,\"title\",\"mixonic\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/mixonic.png\"],[14,\"alt\",\"mixonic\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/rwjblue\"],[14,\"title\",\"rwjblue\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/rwjblue.jpeg\"],[14,\"alt\",\"rwjblue\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/tgriesser\"],[14,\"title\",\"tgriesser\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/tgriesser.png\"],[14,\"alt\",\"tgriesser\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[10,\"article\"],[12],[2,\"\\n    \"],[10,\"a\"],[14,6,\"https://github.com/bnookala\"],[14,\"title\",\"bnookala\"],[12],[2,\"\\n        \"],[10,\"img\"],[14,\"src\",\"assets/img/contributors/bnookala.jpeg\"],[14,\"alt\",\"bnookala\"],[12],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/templates/-contributors.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/application-error", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "BCoM6owz",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"gh-view\"],[12],[2,\"\\n    \"],[10,\"section\"],[14,0,\"error-content error-404 js-error-container\"],[12],[2,\"\\n        \"],[10,\"section\"],[14,0,\"error-details\"],[12],[2,\"\\n            \"],[10,\"img\"],[14,0,\"error-ghost\"],[14,\"src\",\"assets/img/404-ghost@2x.png\"],[14,\"srcset\",\"assets/img/404-ghost.png 1x, assets/img/404-ghost@2x.png 2x\"],[12],[13],[2,\"\\n            \"],[10,\"section\"],[14,0,\"error-message\"],[12],[2,\"\\n                \"],[10,\"h1\"],[14,0,\"error-code\"],[12],[1,[32,0,[\"model\",\"code\"]]],[13],[2,\"\\n                \"],[10,\"h2\"],[14,0,\"error-description\"],[12],[2,\"\\n                    \"],[1,[30,[36,0],[[32,0,[\"model\",\"payload\",\"errors\",\"firstObject\",\"message\"]],[32,0,[\"model\",\"message\"]]],null]],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[8,\"ember-load-remover\",[],[[],[]],null],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"or\"]}",
    "moduleName": "ghost-admin/templates/application-error.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/application", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Vggla/na",
    "block": "{\"symbols\":[],\"statements\":[[8,\"gh-app\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[8,\"gh-skip-link\",[],[[\"@anchor\"],[\".gh-main\"]],[[\"default\"],[{\"statements\":[[2,\"Skip to main content\"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[8,\"gh-alerts\",[],[[],[]],null],[2,\"\\n\\n    \"],[10,\"div\"],[15,0,[31,[\"gh-viewport \",[30,[36,1],[[32,0,[\"ui\",\"showMobileMenu\"]],\"mobile-menu-expanded\"],null]]]],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"showNavMenu\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[8,\"gh-nav-menu\",[],[[],[]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n        \"],[10,\"main\"],[15,0,[31,[\"gh-main \",[32,0,[\"ui\",\"mainClass\"]]]]],[14,\"role\",\"main\"],[12],[2,\"\\n            \"],[1,[30,[36,3],[[30,[36,2],null,null]],null]],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"showBilling\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"gh-billing-modal\",[],[[\"@billingWindowOpen\"],[[32,0,[\"billing\",\"billingWindowOpen\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[8,\"gh-notifications\",[],[[],[]],null],[2,\"\\n\\n        \"],[8,\"gh-content-cover\",[],[[],[]],null],[2,\"\\n\\n        \"],[8,\"gh-mobile-nav-bar\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"customViews\",\"showFormModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"custom-view-form\",[32,0,[\"customViews\",\"toggleFormModal\"]],\"action narrow\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[32,0,[\"settings\",\"accentColor\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"style\"],[12],[2,\"\\n            :root {\\n                --accent-color: \"],[1,[32,0,[\"settings\",\"accentColor\"]]],[2,\";\\n                --adjusted-accent-color: \"],[1,[32,0,[\"ui\",\"adjustedAccentColor\"]]],[2,\";\\n            }\\n            .koenig-editor__editor a:not([class]) {\\n                color: var(--adjusted-accent-color);\\n            }\\n            .koenig-editor__editor blockquote {\\n                border-left: 0.25rem solid var(--adjusted-accent-color);\\n            }\\n\\n            .gh-btn-accent {\\n                background-color: var(--adjusted-accent-color);\\n                color: #fff;\\n            }\\n\\n            .gh-btn-accent:hover {\\n                background-color: \"],[1,[30,[36,0],[[32,0,[\"ui\",\"adjustedAccentColor\"]]],[[\"l\"],[-15]]]],[2,\";\\n                color: #fff;\\n            }\\n\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[8,\"epm-modal-container\",[],[[],[]],null],[2,\"\\n\"],[8,\"ember-load-remover\",[],[[],[]],null]],\"hasEval\":false,\"upvars\":[\"hex-adjust\",\"if\",\"-outlet\",\"component\"]}",
    "moduleName": "ghost-admin/templates/application.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/basic-dropdown-content", ["exports", "ember-basic-dropdown/templates/components/basic-dropdown-content"], function (_exports, _basicDropdownContent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _basicDropdownContent.default;
    }
  });
});
;define("ghost-admin/templates/components/basic-dropdown-trigger", ["exports", "ember-basic-dropdown/templates/components/basic-dropdown-trigger"], function (_exports, _basicDropdownTrigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _basicDropdownTrigger.default;
    }
  });
});
;define("ghost-admin/templates/components/basic-dropdown", ["exports", "ember-basic-dropdown/templates/components/basic-dropdown"], function (_exports, _basicDropdown) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _basicDropdown.default;
    }
  });
});
;define("ghost-admin/templates/components/draggable-object-target", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "ds+gecsL",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"  \"],[11,\"a\"],[24,6,\"#\"],[4,[38,0],[[32,0],\"acceptForDrop\"],null],[12],[2,\"\\n    \"],[18,1,null],[2,\"\\n  \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"  \"],[18,1,null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"enableClicking\",\"if\"]}",
    "moduleName": "ghost-admin/templates/components/draggable-object-target.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/draggable-object", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "dnghnOtX",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[6,[37,2],[[35,1]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"  \"],[11,\"a\"],[24,6,\"#\"],[4,[38,0],[[32,0],\"selectForDrag\"],null],[12],[2,\"\\n    \"],[18,1,null],[2,\"\\n  \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"  \"],[18,1,null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"enableClicking\",\"if\"]}",
    "moduleName": "ghost-admin/templates/components/draggable-object.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/object-bin", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "fMRICE3+",
    "block": "{\"symbols\":[\"obj\",\"&default\"],\"statements\":[[6,[37,5],null,[[\"action\"],[\"handleObjectDropped\"]],[[\"default\"],[{\"statements\":[[2,\"  \"],[10,\"div\"],[14,0,\"object-bin-title\"],[12],[1,[34,1]],[13],[2,\"\\n  \"],[10,\"br\"],[12],[13],[2,\"\\n\"],[6,[37,4],[[30,[36,3],[[30,[36,3],[[35,2]],null]],null]],null,[[\"default\"],[{\"statements\":[[6,[37,0],null,[[\"action\",\"content\"],[\"handleObjectDragged\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"      \"],[18,2,[[32,1]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[1]}]]]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"draggable-object\",\"name\",\"model\",\"-track-array\",\"each\",\"draggable-object-target\"]}",
    "moduleName": "ghost-admin/templates/components/object-bin.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/sortable-objects", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "c7MHeoWa",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[18,1,null]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/templates/components/sortable-objects.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/dashboard", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "8J0Enim3",
    "block": "{\"symbols\":[],\"statements\":[[11,\"section\"],[24,0,\"gh-canvas\"],[4,[38,0],null,null],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            Dashboard\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"view-container gh-dashboard\"],[12],[2,\"\\n        \"],[10,\"p\"],[12],[2,\"Bienvenido al administrador de contenido de la CVV. Utilice el menu de la izquierda para poder acceder a los distintos contenidos habilitados.\"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"scroll-top\"]}",
    "moduleName": "ghost-admin/templates/dashboard.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/designsandbox", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "EqueX37N",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            Components\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container gh-ds\"],[12],[2,\"\\n        \"],[10,\"h2\"],[14,0,\"\"],[12],[2,\"Buttons\"],[13],[2,\"\\n        \"],[10,\"ul\"],[14,0,\"nostyle\"],[12],[2,\"\\n            \"],[10,\"li\"],[12],[10,\"button\"],[14,0,\"gh-btn gh-btn-primary\"],[12],[10,\"span\"],[12],[2,\"Primary button\"],[13],[13],[13],[2,\"\\n            \"],[10,\"li\"],[12],[10,\"button\"],[14,0,\"gh-btn\"],[12],[10,\"span\"],[12],[2,\"Regular button\"],[13],[13],[13],[2,\"\\n            \"],[10,\"li\"],[12],[10,\"button\"],[14,0,\"gh-btn gh-btn-blue\"],[12],[10,\"span\"],[12],[2,\"Blue button\"],[13],[13],[13],[2,\"\\n            \"],[10,\"li\"],[12],[10,\"button\"],[14,0,\"gh-btn gh-btn-green\"],[12],[10,\"span\"],[12],[2,\"Green button\"],[13],[13],[13],[2,\"\\n            \"],[10,\"li\"],[12],[10,\"button\"],[14,0,\"gh-btn gh-btn-red\"],[12],[10,\"span\"],[12],[2,\"Red button\"],[13],[13],[13],[2,\"\\n            \"],[10,\"li\"],[12],[10,\"button\"],[14,0,\"gh-btn gh-btn-outline\"],[12],[10,\"span\"],[12],[2,\"Outline button\"],[13],[13],[13],[2,\"\\n            \"],[10,\"li\"],[12],[10,\"button\"],[14,0,\"gh-btn gh-btn-primary gh-btn-large\"],[12],[10,\"span\"],[12],[2,\"Large button\"],[13],[13],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"h2\"],[14,0,\"\"],[12],[2,\"Lists\"],[13],[2,\"\\n        \\n        \"],[10,\"div\"],[14,0,\"gh-list\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-list-row header\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-list-header\"],[12],[2,\"Column 1\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-list-header\"],[12],[2,\"Column 2\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-list-header\"],[12],[2,\"Column 3\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-list-row\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n                    \"],[10,\"h3\"],[12],[2,\"Data\"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Data\"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Data\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-list-row\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n                    \"],[10,\"h3\"],[12],[2,\"Data\"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Data\"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Data\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-list-row\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n                    \"],[10,\"h3\"],[12],[2,\"Data\"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Data\"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Data\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"h2\"],[14,0,\"mt8\"],[12],[2,\"Sections\"],[13],[2,\"\\n\\n        \"],[10,\"section\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Single column\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-content\"],[12],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"Column 1\"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"section\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Section heading\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-content columns-2\"],[12],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"Column 1\"],[13],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"Column 2\"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"section\"],[14,0,\"gh-main-section columns-2\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Block 1\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-content grey\"],[12],[2,\"Contents\"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Block 2\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-content grey\"],[12],[2,\"Contents\"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"h2\"],[14,0,\"mt8\"],[12],[2,\"Setting area\"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Section heading\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Title\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Description\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"[ACTION]\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"[CONTENT - OPTIONAL / HIDDEN FOR EXPANDABLE]\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Title\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Description\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"[ACTION]\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Title\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Description\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"[ACTION]\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/templates/designsandbox.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/editor", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "kT3iLqit",
    "block": "{\"symbols\":[\"editor\"],\"statements\":[[6,[37,5],[[32,0,[\"post\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[11,\"div\"],[24,0,\"flex flex-row\"],[4,[38,9],[\"cmd+p\",[30,[36,2],[[32,0],\"openPostPreview\"],null]],null],[12],[2,\"\\n        \"],[8,\"gh-editor\",[],[[\"@tagName\",\"@class\"],[\"section\",\"gh-editor gh-view relative\"]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"header\"],[14,0,\"gh-editor-header br2 pe-none\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"flex items-center pe-auto\"],[12],[2,\"\\n\"],[6,[37,5],[[32,0,[\"ui\",\"isFullScreen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"ml3 mobile flex items-center\"],[12],[2,\"\\n                            \"],[8,\"link-to\",[[16,\"data-test-link\",[30,[36,7],[[32,0,[\"post\",\"displayName\"]]],null]]],[[\"@route\",\"@classNames\"],[[30,[36,7],[[32,0,[\"post\",\"displayName\"]]],null],\"gh-editor-back-button\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"span\"],[12],[2,\"\\n                                    \"],[1,[30,[36,3],[\"arrow-left\"],null]],[2,\"\\n                                    \"],[1,[30,[36,8],[[30,[36,7],[[32,0,[\"post\",\"displayName\"]]],null]],null]],[2,\"\\n                                \"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[10,\"div\"],[14,0,\"gh-editor-post-status\"],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"\\n                            \"],[8,\"gh-editor-post-status\",[],[[\"@post\",\"@hasDirtyAttributes\",\"@isSaving\"],[[32,0,[\"post\"]],[32,0,[\"hasDirtyAttributes\"]],[30,[36,10],[[32,0,[\"autosaveTask\",\"isRunning\"]],[32,0,[\"saveTasks\",\"isRunning\"]]],null]]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\\n                \"],[10,\"section\"],[14,0,\"flex\"],[14,5,\"pointer-events: auto\"],[12],[2,\"\\n\"],[6,[37,6],[[32,0,[\"post\",\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,5],[[32,0,[\"post\",\"isDraft\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[12],[2,\"\\n                                \"],[11,\"button\"],[24,0,\"gh-btn gh-editor-preview-trigger\"],[24,4,\"button\"],[4,[38,4],[\"click\",[30,[36,2],[[32,0],\"openPostPreviewModal\"],null]],null],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"Preview\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,5],[[32,0,[\"session\",\"user\",\"isContributor\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[8,\"gh-task-button\",[[24,\"data-test-contributor-save\",\"true\"]],[[\"@buttonText\",\"@task\",\"@runningText\",\"@class\"],[\"Save\",[32,0,[\"save\"]],\"Saving\",\"gh-btn gh-btn-blue gh-btn-icon contributor-save-button\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                            \"],[8,\"gh-publishmenu\",[],[[\"@post\",\"@postStatus\",\"@saveTask\",\"@setSaveType\",\"@onOpen\"],[[32,0,[\"post\"]],[32,0,[\"post\",\"status\"]],[32,0,[\"saveTask\"]],[30,[36,2],[[32,0],\"setSaveType\"],null],[30,[36,2],[[32,0],\"cancelAutosave\"],null]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,6],[[32,0,[\"showSettingsMenu\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"settings-menu-toggle-spacer\"],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n\"],[2,\"            \"],[8,\"gh-koenig-editor\",[],[[\"@title\",\"@titleAutofocus\",\"@titlePlaceholder\",\"@onTitleChange\",\"@onTitleBlur\",\"@body\",\"@bodyPlaceholder\",\"@onBodyChange\",\"@headerOffset\",\"@scrollContainerSelector\",\"@scrollOffsetBottomSelector\",\"@onEditorCreated\",\"@onWordCountChange\",\"@snippets\",\"@saveSnippet\",\"@updateSnippet\",\"@deleteSnippet\",\"@featureImage\",\"@featureImageAlt\",\"@featureImageCaption\",\"@setFeatureImage\",\"@setFeatureImageAlt\",\"@setFeatureImageCaption\",\"@clearFeatureImage\",\"@cardOptions\",\"@postType\"],[[30,[36,11],[[32,0,[\"post\",\"titleScratch\"]]],null],[32,0,[\"shouldFocusTitle\"]],[30,[36,12],[[30,[36,8],[[32,0,[\"post\",\"displayName\"]]],null],\" title\"],null],[30,[36,2],[[32,0],\"updateTitleScratch\"],null],[30,[36,2],[[32,0],[30,[36,13],[[32,0,[\"saveTitleTask\"]]],null]],null],[30,[36,11],[[32,0,[\"post\",\"scratch\"]]],null],[30,[36,12],[\"Comienza a escribir el contenido \",[32,0,[\"post\",\"displayName\"]],\"...\"],null],[30,[36,2],[[32,0],\"updateScratch\"],null],[32,1,[\"headerHeight\"]],\".gh-koenig-editor\",\".gh-mobile-nav-bar\",[30,[36,2],[[32,0],\"setKoenigEditor\"],null],[30,[36,2],[[32,0],\"updateWordCount\"],null],[32,0,[\"snippets\"]],[30,[36,5],[[32,0,[\"canManageSnippets\"]],[32,0,[\"saveSnippet\"]]],null],[30,[36,5],[[32,0,[\"canManageSnippets\"]],[32,0,[\"toggleUpdateSnippetModal\"]]],null],[30,[36,5],[[32,0,[\"canManageSnippets\"]],[32,0,[\"toggleDeleteSnippetModal\"]]],null],[32,0,[\"post\",\"featureImage\"]],[32,0,[\"post\",\"featureImageAlt\"]],[32,0,[\"post\",\"featureImageCaption\"]],[30,[36,2],[[32,0],\"setFeatureImage\"],null],[30,[36,2],[[32,0],\"setFeatureImageAlt\"],null],[30,[36,2],[[32,0],\"setFeatureImageCaption\"],null],[30,[36,2],[[32,0],\"clearFeatureImage\"],null],[30,[36,1],null,[[\"post\"],[[32,0,[\"post\"]]]]],[32,0,[\"post\",\"displayName\"]]]],null],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-editor-wordcount-container\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-editor-wordcount\"],[12],[2,\"\\n                    \"],[1,[30,[36,14],[[32,0,[\"wordCount\",\"wordCount\"]],\"word\"],null]],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"a\"],[14,6,\"https://ghost.org/help/using-the-editor/\"],[14,0,\"flex\"],[14,\"target\",\"_blank\"],[12],[1,[30,[36,3],[\"help\"],null]],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n        \"]],\"parameters\":[1]}]]],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"showSettingsMenu\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[8,\"gh-post-settings-menu\",[],[[\"@post\",\"@deletePost\",\"@updateSlugTask\",\"@savePostTask\"],[[32,0,[\"post\"]],[30,[36,2],[[32,0],\"openDeletePostModal\"],null],[32,0,[\"updateSlugTask\"]],[32,0,[\"savePostTask\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\\n    \"],[11,\"button\"],[24,0,\"settings-menu-toggle gh-btn gh-btn-editor gh-btn-icon icon-only gh-btn-action-icon\"],[24,\"title\",\"Settings\"],[24,\"data-test-psm-trigger\",\"\"],[24,4,\"button\"],[4,[38,4],[\"click\",[32,0,[\"toggleSettingsMenu\"]]],null],[12],[2,\"\\n\"],[6,[37,5],[[32,0,[\"showSettingsMenu\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[14,0,\"settings-menu-open\"],[12],[1,[30,[36,3],[\"sidemenu-open\"],null]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"span\"],[12],[1,[30,[36,3],[\"sidemenu\"],null]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"showReAuthenticateModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"re-authenticate\",[30,[36,2],[[32,0],\"toggleReAuthenticateModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,5],[[32,0,[\"showUpgradeModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"upgrade-host-limit\",[30,[36,1],null,[[\"message\",\"details\"],[[35,0,[\"context\"]],[35,0,[\"details\"]]]]],[30,[36,2],[[32,0],\"closeUpgradeModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,5],[[32,0,[\"snippetToUpdate\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"update-snippet\",[32,0,[\"snippetToUpdate\"]],[32,0,[\"updateSnippet\"]],[32,0,[\"toggleUpdateSnippetModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,5],[[32,0,[\"snippetToDelete\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"delete-snippet\",[32,0,[\"snippetToDelete\"]],[32,0,[\"deleteSnippet\"]],[32,0,[\"toggleDeleteSnippetModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[1,[30,[36,16],[[30,[36,15],null,null]],null]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"hostLimitError\",\"hash\",\"action\",\"svg-jar\",\"on\",\"if\",\"unless\",\"pluralize\",\"capitalize\",\"on-key\",\"or\",\"readonly\",\"concat\",\"perform\",\"gh-pluralize\",\"-outlet\",\"component\"]}",
    "moduleName": "ghost-admin/templates/editor.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/editor/edit-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "8Jm7N1C9",
    "block": "{\"symbols\":[],\"statements\":[[11,\"div\"],[24,0,\"gh-view\"],[4,[38,1],[[30,[36,0],[[32,0],\"setMainClass\",\"gh-main-white\"],[[\"target\"],[[32,0,[\"ui\"]]]]]],null],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-content\"],[12],[2,\"\\n        \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"did-insert\"]}",
    "moduleName": "ghost-admin/templates/editor/edit-loading.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/error", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "5C/w8dFA",
    "block": "{\"symbols\":[\"item\"],\"statements\":[[10,\"div\"],[14,0,\"gh-view\"],[12],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"flex flex-column items-center flex-grow justify-center h-100 nt10\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"absolute error-background nudge-right--5\"],[12],[2,\"\\n            \"],[1,[30,[36,3],[\"desert\"],[[\"class\"],[\"error-background absolute\"]]]],[2,\"\\n            \"],[10,\"div\"],[14,0,\"traveler-1\"],[12],[1,[30,[36,3],[\"tumbleweed\"],[[\"class\"],[\"w6 h6 absolute bouncer-1\"]]]],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"traveler-2\"],[12],[1,[30,[36,3],[\"tumbleweed\"],[[\"class\"],[\"w11 h11 absolute bouncer-2\"]]]],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"mt5 tc\"],[12],[2,\"\\n            \"],[10,\"h1\"],[14,0,\"midlightgrey error-code-size fw6\"],[12],[1,[32,0,[\"code\"]]],[13],[2,\"\\n            \"],[10,\"h2\"],[14,0,\"midlightgrey f4 fw3\"],[12],[1,[32,0,[\"message\"]]],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,0],[[32,0,[\"stack\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"section\"],[14,0,\"error-stack\"],[12],[2,\"\\n            \"],[10,\"h3\"],[12],[2,\"Stack Trace\"],[13],[2,\"\\n            \"],[10,\"p\"],[12],[10,\"strong\"],[12],[1,[32,0,[\"message\"]]],[13],[13],[2,\"\\n            \"],[10,\"ul\"],[14,0,\"error-stack-list\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,1],[[30,[36,1],[[32,0,[\"stack\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"li\"],[12],[2,\"\\n                        at\\n                        \"],[6,[37,0],[[32,1,[\"function\"]]],null,[[\"default\"],[{\"statements\":[[10,\"em\"],[14,0,\"error-stack-function\"],[12],[1,[32,1,[\"function\"]]],[13]],\"parameters\":[]}]]],[2,\"\\n                        \"],[10,\"span\"],[14,0,\"error-stack-file\"],[12],[2,\"(\"],[1,[32,1,[\"at\"]]],[2,\")\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"if\",\"-track-array\",\"each\",\"svg-jar\"]}",
    "moduleName": "ghost-admin/templates/error.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/launch", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "/3GV4OH4",
    "block": "{\"symbols\":[],\"statements\":[[11,\"div\"],[24,0,\"fullscreen-wizard-container\"],[4,[38,0],[[32,0,[\"reset\"]]],null],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"pt7 pb5 pl12 pr12 flex justify-between items-center\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"flex flex-column\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"ttu gh-launch-wizard-step-indicator\"],[12],[1,[32,0,[\"currentStep\",\"position\"]]],[13],[2,\"\\n            \"],[10,\"h2\"],[12],[1,[32,0,[\"currentStep\",\"title\"]]],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[11,\"button\"],[24,0,\"close gh-btn gh-btn-outline\"],[24,\"data-test-button\",\"close-wizard\"],[24,4,\"button\"],[4,[38,1],[\"click\",[32,0,[\"close\"]]],null],[12],[2,\"\\n            \"],[10,\"span\"],[12],[2,\"Cancel\"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-launch-wizard-content\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-launch-wizard-content-left\"],[12],[2,\"\\n            \"],[1,[30,[36,3],[[30,[36,2],[\"gh-launch-wizard/\",[32,0,[\"step\"]]],null]],[[\"nextStep\",\"backStep\",\"skipStep\",\"refreshPreview\",\"updatePreview\",\"replacePreviewContents\",\"storeData\",\"getData\"],[[32,0,[\"goNextStep\"]],[32,0,[\"goBackStep\"]],[32,0,[\"skipStep\"]],[32,0,[\"refreshPreview\"]],[32,0,[\"updatePreview\"]],[32,0,[\"replacePreviewContents\"]],[32,0,[\"storeData\"]],[32,0,[\"getData\"]]]]]],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-launch-wizard-content-right\"],[12],[2,\"\\n            \"],[8,\"gh-browser-preview\",[[24,0,\"gh-launch-wizard-preview-container\"]],[[\"@icon\",\"@title\"],[[32,0,[\"settings\",\"icon\"]],[32,0,[\"config\",\"blogTitle\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[8,\"gh-site-iframe\",[[24,0,\"gh-launch-wizard-preview\"],[4,[38,4],[[32,0,[\"registerPreviewIframe\"]]],null]],[[\"@src\",\"@guid\"],[[32,0,[\"previewSrc\"]],[32,0,[\"previewGuid\"]]]],[[\"default\"],[{\"statements\":[],\"parameters\":[]}]]],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"will-destroy\",\"on\",\"concat\",\"component\",\"did-insert\"]}",
    "moduleName": "ghost-admin/templates/launch.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/member", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "kbDkbl7+",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[[24,\"data-test-link\",\"members-back\"]],[[\"@route\"],[\"members\"]],[[\"default\"],[{\"statements\":[[2,\"Members\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,3],[\"arrow-right\"],null]],[13],[2,\"\\n\"],[6,[37,4],[[32,0,[\"member\",\"isNew\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                New member\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[1,[30,[36,2],[[32,0,[\"member\",\"name\"]],[32,0,[\"member\",\"email\"]]],null]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"session\",\"user\",\"isAdmin\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[32,0,[\"member\",\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-white gh-btn-icon mr2\"],[4,[38,0],[\"click\",[32,0,[\"toggleImpersonateMemberModal\"]]],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Impersonate\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n            \"],[8,\"gh-task-button\",[],[[\"@class\",\"@type\",\"@task\",\"@data-test-button\"],[\"gh-btn gh-btn-primary gh-btn-icon\",\"button\",[32,0,[\"saveTask\"]],\"save\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[12],[2,\"\\n        \"],[10,\"form\"],[14,0,\"member-basic-info-form\"],[12],[2,\"\\n            \"],[8,\"gh-member-settings-form\",[],[[\"@member\",\"@scratchMember\",\"@setProperty\",\"@onLabelEdit\",\"@saveMember\",\"@isSaveRunning\",\"@isLoading\"],[[32,0,[\"member\"]],[32,0,[\"scratchMember\"]],[32,0,[\"setProperty\"]],[32,0,[\"editLabel\"]],[32,0,[\"save\"]],[32,0,[\"saveTask\",\"isRunning\"]],[32,0,[\"isLoading\"]]]],null],[2,\"\\n        \"],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"member\",\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-red gh-btn-icon\"],[24,\"data-test-button\",\"delete-member\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"toggleDeleteMemberModal\"]]],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Delete member\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,4],[[32,0,[\"showUnsavedChangesModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[32,0,[\"leaveScreen\"]],[32,0,[\"toggleUnsavedChangesModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,4],[[32,0,[\"showDeleteMemberModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"delete-member\",[32,0,[\"member\"]],[32,0,[\"deleteMember\"]],[32,0,[\"toggleDeleteMemberModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,4],[[32,0,[\"showImpersonateMemberModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"impersonate-member\",[32,0,[\"member\"]],[32,0,[\"toggleImpersonateMemberModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,4],[[32,0,[\"showLabelModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"members-label-form\",[32,0,[\"labelModalData\"]],[32,0,[\"toggleLabelModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"on\",\"unless\",\"or\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/templates/member.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/members-activity", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "hQnXYqym",
    "block": "{\"symbols\":[\"eventsFetcher\"],\"statements\":[[10,\"section\"],[15,0,[31,[\"gh-canvas gh-members-activity \",[30,[36,1],[[32,0,[\"memberRecord\"]],\"gh-members-activity-single\"],null]]]],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header break tablet members-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[[24,\"data-test-link\",\"members-activity-back\"]],[[\"@route\",\"@query\"],[\"members-activity\",[30,[36,4],[\"members-activity\"],null]]],[[\"default\"],[{\"statements\":[[2,\"Activity\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[32,0,[\"memberRecord\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"span\"],[12],[1,[30,[36,3],[\"arrow-right\"],null]],[13],[2,\"\\n                \"],[10,\"span\"],[14,0,\"truncate\"],[12],[1,[32,0,[\"memberRecord\",\"name\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"view-actions-top-row\"],[12],[2,\"\\n                \"],[8,\"members-activity/event-type-filter\",[],[[\"@excludedEvents\",\"@hiddenEvents\",\"@onChange\"],[[32,0,[\"excludedEvents\"]],[32,0,[\"hiddenEvents\"]],[32,0,[\"changeExcludedEvents\"]]]],null],[2,\"\\n\\n                \"],[8,\"members-activity/member-filter\",[],[[\"@selected\",\"@onChange\"],[[32,0,[\"memberRecord\"]],[32,0,[\"changeMember\"]]]],null],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"view-container\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-list-scrolling\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"memberRecord\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"link-to\",[],[[\"@route\",\"@model\"],[\"member\",[32,0,[\"memberRecord\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[8,\"gh-member-details\",[],[[\"@member\"],[[32,0,[\"memberRecord\"]]]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,7],[[30,[36,6],null,[[\"filter\",\"pageSize\"],[[30,[36,5],null,[[\"excludedEvents\",\"member\"],[[32,0,[\"fullExcludedEvents\"]],[32,0,[\"member\"]]]]],50]]]],null,[[\"default\"],[{\"statements\":[[6,[37,1],[[32,1,[\"data\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[8,\"members-activity/table\",[],[[\"@hideMemberColumn\",\"@events\"],[[30,[36,1],[[32,0,[\"member\"]],true],null],[32,1,[\"data\"]]]],null],[2,\"\\n\\n\"],[6,[37,0],[[30,[36,2],[[32,1,[\"isLoading\"]],[32,1,[\"hasReachedEnd\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[8,\"gh-scroll-trigger\",[],[[\"@enter\",\"@triggerOffset\"],[[32,1,[\"loadNextPage\"]],250]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[6,[37,0],[[32,1,[\"isLoading\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[8,\"members-activity/no-events\",[],[[\"@filter\"],[[32,0,[\"filter\"]]]],null],[2,\"\\n                \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,1],[[32,1,[\"isLoading\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"relative h30\"],[12],[8,\"gh-loading-spinner\",[],[[],[]],null],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[1]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[1,[30,[36,9],[[30,[36,8],null,null]],null]]],\"hasEval\":false,\"upvars\":[\"unless\",\"if\",\"or\",\"svg-jar\",\"reset-query-params\",\"members-event-filter\",\"members-event-fetcher\",\"let\",\"-outlet\",\"component\"]}",
    "moduleName": "ghost-admin/templates/members-activity.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/members", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "iADOVvIF",
    "block": "{\"symbols\":[\"member\",\"filterColumn\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header break tablet members-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"Members\"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"view-actions-bottom-row\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"relative gh-members-header-search\"],[12],[2,\"\\n                    \"],[1,[30,[36,1],[\"search\"],[[\"class\"],[\"gh-input-search-icon\"]]]],[2,\"\\n                    \"],[8,\"gh-text-input\",[[24,\"placeholder\",\"Search members...\"],[16,0,[31,[\"gh-members-list-searchfield \",[30,[36,2],[[32,0,[\"searchText\"]],\"active\"],null]]]]],[[\"@value\",\"@input\"],[[32,0,[\"searchText\"]],[32,0,[\"search\"]]]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"view-actions-top-row\"],[12],[2,\"\\n                \"],[8,\"gh-members-filter-labs\",[],[[\"@isFiltered\",\"@onApplyFilter\",\"@defaultFilterParam\",\"@onApplySoftFilter\",\"@onResetSoftFilter\",\"@onResetFilter\",\"@onLabelEdit\"],[[32,0,[\"isFiltered\"]],[32,0,[\"applyFilter\"]],[32,0,[\"filterParam\"]],[32,0,[\"applySoftFilter\"]],[32,0,[\"resetSoftFilter\"]],[32,0,[\"resetFilter\"]],[32,0,[\"editLabel\"]]]],null],[2,\"\\n                \"],[10,\"span\"],[14,0,\"dropdown\"],[12],[2,\"\\n                    \"],[8,\"gh-dropdown-button\",[[24,\"data-test-button\",\"members-actions\"]],[[\"@dropdownName\",\"@classNames\",\"@title\"],[\"members-actions-menu\",\"gh-btn gh-btn-icon icon-only gh-btn-action-icon\",\"Members Actions\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"\\n                            \"],[1,[30,[36,1],[\"settings\"],null]],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Actions\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[8,\"gh-dropdown\",[],[[\"@name\",\"@tagName\",\"@classNames\"],[\"members-actions-menu\",\"ul\",\"gh-member-actions-menu dropdown-menu dropdown-triangle-top-right\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"li\"],[12],[2,\"\\n                            \"],[8,\"link-to\",[[24,0,\"mr2\"],[24,\"data-test-link\",\"import-csv\"]],[[\"@route\"],[\"members.import\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"span\"],[12],[2,\"Import members\"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"li\"],[15,0,[31,[[30,[36,2],[[32,0,[\"members\",\"length\"]],\"\",\"disabled\"],null]]]],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"members\",\"length\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[11,\"button\"],[24,0,\"mr2\"],[4,[38,6],[\"click\",[32,0,[\"exportData\"]]],null],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"showingAll\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                        \"],[10,\"span\"],[12],[2,\"Export all members\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[10,\"span\"],[12],[2,\"Export selected members (\"],[1,[32,0,[\"members\",\"length\"]]],[2,\")\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"button\"],[14,0,\"mr2\"],[14,\"disabled\",\"true\"],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"Export selected members (0)\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n\"],[6,[37,2],[[30,[36,7],[[32,0,[\"members\",\"length\"]],[32,0,[\"isFiltered\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"li\"],[14,0,\"divider\"],[12],[13],[2,\"\\n                            \"],[10,\"li\"],[12],[2,\"\\n                                \"],[11,\"button\"],[24,0,\"mr2\"],[24,\"data-test-button\",\"add-label-selected\"],[4,[38,6],[\"click\",[32,0,[\"toggleAddMembersLabelModal\"]]],null],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"Add label for selected members (\"],[1,[32,0,[\"members\",\"length\"]]],[2,\")\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"li\"],[12],[2,\"\\n                                \"],[11,\"button\"],[24,0,\"mr2\"],[24,\"data-test-button\",\"remove-label-selected\"],[4,[38,6],[\"click\",[32,0,[\"toggleRemoveMembersLabelModal\"]]],null],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"Remove label from selected members (\"],[1,[32,0,[\"members\",\"length\"]]],[2,\")\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"li\"],[12],[2,\"\\n                                \"],[11,\"button\"],[24,0,\"mr2\"],[24,\"data-test-button\",\"remove-label-selected\"],[4,[38,6],[\"click\",[32,0,[\"toggleUnsubscribeMembersModal\"]]],null],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"Unsubscribe selected members (\"],[1,[32,0,[\"members\",\"length\"]]],[2,\")\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"li\"],[14,0,\"divider\"],[12],[13],[2,\"\\n                            \"],[10,\"li\"],[12],[2,\"\\n                                \"],[11,\"button\"],[24,0,\"mr2\"],[24,\"data-test-button\",\"delete-selected\"],[4,[38,6],[\"click\",[32,0,[\"toggleDeleteMembersModal\"]]],null],[12],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"red\"],[12],[2,\"Delete selected members (\"],[1,[32,0,[\"members\",\"length\"]]],[2,\")\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n                \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-primary\"],[24,\"data-test-new-member-button\",\"true\"]],[[\"@route\"],[\"member.new\"]],[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[2,\"New member\"],[13]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,8],[[32,0,[\"members\",\"loading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"        \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"members\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-list-scrolling\"],[12],[2,\"\\n                \"],[10,\"table\"],[14,0,\"gh-list\"],[12],[2,\"\\n                    \"],[10,\"thead\"],[12],[2,\"\\n                        \"],[10,\"tr\"],[12],[2,\"\\n                            \"],[10,\"th\"],[12],[1,[32,0,[\"listHeader\"]]],[13],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"settings\",\"editorDefaultEmailRecipients\"]],\"disabled\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"th\"],[12],[2,\"Open rate\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[10,\"th\"],[12],[2,\"Location\"],[13],[2,\"\\n                            \"],[10,\"th\"],[12],[2,\"Created\"],[13],[2,\"\\n\"],[6,[37,5],[[30,[36,4],[[30,[36,4],[[32,0,[\"filterColumnLabels\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"th\"],[12],[1,[32,2]],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[8,\"vertical-collection\",[],[[\"@tagName\",\"@items\",\"@key\",\"@containerSelector\",\"@estimateHeight\",\"@staticHeight\",\"@bufferSize\"],[\"tbody\",[32,0,[\"members\"]],\"id\",\".gh-list-scrolling\",69,true,20]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[8,\"gh-members-list-item\",[[16,\"data-test-member\",[32,1,[\"id\"]]]],[[\"@newsletterEnabled\",\"@member\",\"@filterColumns\"],[[30,[36,3],[[32,0,[\"settings\",\"editorDefaultEmailRecipients\"]],\"disabled\"],null],[32,1],[32,0,[\"filterColumns\"]]]],null],[2,\"\\n                    \"]],\"parameters\":[1]}]]],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"no-posts-box\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"no-posts\"],[12],[2,\"\\n                \"],[1,[30,[36,1],[\"members-placeholder\"],[[\"class\"],[\"gh-members-placeholder\"]]]],[2,\"\\n\"],[6,[37,2],[[32,0,[\"showingAll\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[10,\"h3\"],[12],[2,\"No members yet\"],[13],[2,\"\\n                    \"],[8,\"gh-members-no-members\",[],[[\"@afterCreate\"],[[32,0,[\"refreshData\"]]]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[10,\"h3\"],[12],[2,\"No members match the current filter\"],[13],[2,\"\\n                    \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-lg\"]],[[\"@route\",\"@query\"],[\"members\",[30,[36,0],null,[[\"filter\"],[null]]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Show all members\"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"gh-content\"],[12],[2,\"\\n            \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\\n\"],[1,[30,[36,10],[[30,[36,9],null,null]],null]],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"showAddMembersLabelModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"add-label-members\",[30,[36,0],null,[[\"memberCount\"],[[32,0,[\"members\",\"length\"]]]]],[32,0,[\"addLabelToMembers\"]],[32,0,[\"toggleAddMembersLabelModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,0,[\"showRemoveMembersLabelModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"remove-label-members\",[30,[36,0],null,[[\"memberCount\"],[[32,0,[\"members\",\"length\"]]]]],[32,0,[\"removeLabelFromMembers\"]],[32,0,[\"toggleRemoveMembersLabelModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,0,[\"showUnsubscribeMembersModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"unsubscribe-members\",[30,[36,0],null,[[\"memberCount\"],[[32,0,[\"members\",\"length\"]]]]],[32,0,[\"unsubscribeMembers\"]],[32,0,[\"toggleUnsubscribeMembersModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,0,[\"showDeleteMembersModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"delete-members\",[30,[36,0],null,[[\"memberCount\"],[[32,0,[\"members\",\"length\"]]]]],[32,0,[\"deleteMembers\"]],[32,0,[\"toggleDeleteMembersModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[32,0,[\"showLabelModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"members-label-form\",[32,0,[\"labelModalData\"]],[32,0,[\"toggleLabelModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"hash\",\"svg-jar\",\"if\",\"not-eq\",\"-track-array\",\"each\",\"on\",\"and\",\"unless\",\"-outlet\",\"component\"]}",
    "moduleName": "ghost-admin/templates/members.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/members/import", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "oWi45bKX",
    "block": "{\"symbols\":[],\"statements\":[[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"import-members\",[32,0,[\"refreshMembers\"]],[32,0,[\"close\"]],\"action import-members\"]],null],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/templates/members/import.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/offer", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "jETczO2o",
    "block": "{\"symbols\":[],\"statements\":[[11,\"section\"],[24,0,\"gh-canvas gh-offer circle-bg\"],[4,[38,6],[[32,0,[\"setup\"]]],null],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[[24,\"data-test-link\",\"offers-back\"]],[[\"@route\"],[\"offers\"]],[[\"default\"],[{\"statements\":[[2,\"Offers\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,7],[\"arrow-right\"],null]],[13],[2,\"\\n\"],[6,[37,2],[[32,0,[\"offer\",\"isNew\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                New Offer\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[1,[32,0,[\"offer\",\"name\"]]],[2,\"\\n\"],[6,[37,2],[[30,[36,5],[[32,0,[\"offer\",\"status\"]],\"archived\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"span\"],[14,0,\"gh-badge gh-badge-title\"],[12],[2,\"Archived\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[],[[\"@class\",\"@type\",\"@task\",\"@data-test-button\"],[\"gh-btn gh-btn-primary gh-btn-icon\",\"button\",[32,0,[\"saveTask\"]],\"save\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-layout content-preview\"],[12],[2,\"\\n            \"],[10,\"form\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-main-section gh-offer-form\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-main-section-block no-margin\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Basic\"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-main-section-content grey\"],[12],[2,\"\\n                            \"],[8,\"gh-form-group\",[[24,0,\"no-margin\"]],[[\"@errors\",\"@property\",\"@hasValidated\"],[[32,0,[\"offer\",\"errors\"]],\"name\",[32,0,[\"offer\",\"hasValidated\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"name\"],[14,0,\"fw6\"],[12],[2,\"Name\"],[13],[2,\"\\n                                \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"offer-name\"]],[[\"@name\",\"@placeholder\",\"@id\",\"@value\",\"@input\",\"@class\"],[\"name\",\"Black Friday\",\"name\",[32,0,[\"offer\",\"name\"]],[32,0,[\"setOfferName\"]],\"gh-input\"]],null],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"error\"],[12],[2,\"\\n                                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"offer\",\"errors\"]],\"name\"]],null],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"p\"],[12],[2,\"Visible to members on Stripe Checkout page.\"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n\\n                        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"\\n                            Discount information \"],[10,\"span\"],[14,0,\"midgrey\"],[12],[2,\" – Once saved, this cannot be changed.\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-main-section-content grey\"],[12],[2,\"\\n                            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"product-cadence\"]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,2],[[30,[36,8],[\"multipleProducts\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"label\"],[14,\"for\",\"product-cadence\"],[14,0,\"fw6\"],[12],[2,\"Tier – cadence\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"label\"],[14,\"for\",\"product-cadence\"],[14,0,\"fw6\"],[12],[2,\"Cadence\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n                                    \"],[8,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@disabled\",\"@update\"],[[32,0,[\"cadence\"]],[32,0,[\"cadences\"]],\"name\",\"label\",\"name\",[32,0,[\"isDiscountSectionDisabled\"]],[32,0,[\"updateCadence\"]]]],null],[2,\"\\n                                    \"],[1,[30,[36,7],[\"arrow-down-small\"],null]],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"product-cadence\"]],null],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-offer-discount\"],[12],[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"amount\"],[14,0,\"fw6 mb1\"],[12],[2,\"Amount off\"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"flex items-start\"],[12],[2,\"\\n                                    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@property\",\"@hasValidated\"],[[32,0,[\"offer\",\"errors\"]],\"amount\",[32,0,[\"offer\",\"hasValidated\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-offer-value percentage\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,5],[[32,0,[\"offer\",\"type\"]],\"fixed\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                \"],[8,\"gh-text-input\",[],[[\"@name\",\"@type\",\"@placeholder\",\"@disabled\",\"@value\",\"@input\",\"@id\",\"@class\"],[\"amount\",\"number\",\"\",[32,0,[\"isDiscountSectionDisabled\"]],[30,[36,3],[[30,[36,4],[[32,0,[\"offer\",\"amount\"]]],null]],null],[32,0,[\"setDiscountAmount\"]],\"amount\",\"gh-input\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                                \"],[8,\"gh-text-input\",[],[[\"@name\",\"@type\",\"@placeholder\",\"@disabled\",\"@value\",\"@input\",\"@id\",\"@class\"],[\"amount\",\"number\",\"\",[32,0,[\"isDiscountSectionDisabled\"]],[30,[36,3],[[32,0,[\"offer\",\"amount\"]]],null],[32,0,[\"setDiscountAmount\"]],\"amount\",\"gh-input\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                        \"],[13],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"error\"],[12],[2,\"\\n                                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"offer\",\"errors\"]],\"amount\"]],null],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"]],\"parameters\":[]}]]],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-offer-type\"],[12],[2,\"\\n                                        \"],[8,\"gh-form-group\",[[24,0,\"no-margin\"]],[[\"@errors\",\"@property\",\"@hasValidated\"],[[32,0,[\"offer\",\"errors\"]],\"type\",[32,0,[\"offer\",\"hasValidated\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n                                                \"],[8,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@disabled\",\"@optionLabelPath\",\"@optionTargetPath\",\"@update\"],[[32,0,[\"offer\",\"type\"]],[32,0,[\"offertypes\"]],\"offertype\",[32,0,[\"isDiscountSectionDisabled\"]],\"label\",\"offertype\",[32,0,[\"setDiscountType\"]]]],null],[2,\"\\n                                                \"],[1,[30,[36,7],[\"arrow-down-small\"],null]],[2,\"\\n                                            \"],[13],[2,\"\\n                                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"offer\",\"errors\"]],\"type\"]],null],[2,\"\\n                                        \"]],\"parameters\":[]}]]],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-offer-duration\"],[12],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"duration\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"product-cadence\"],[14,0,\"fw6\"],[12],[2,\"Duration\"],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"gh-select\"],[12],[2,\"\\n                                        \"],[8,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@disabled\",\"@optionLabelPath\",\"@optionTargetPath\",\"@update\"],[[32,0,[\"offer\",\"duration\"]],[32,0,[\"durations\"]],\"duration\",[32,0,[\"isDiscountSectionDisabled\"]],\"label\",\"duration\",[32,0,[\"updateDuration\"]]]],null],[2,\"\\n                                        \"],[1,[30,[36,7],[\"arrow-down-small\"],null]],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"error\"],[12],[2,\"\\n                                        \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"duration\"]],null],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,2],[[30,[36,5],[[32,0,[\"offer\",\"duration\"]],\"repeating\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@property\"],[[32,0,[\"offer\",\"errors\"]],\"durationInMonths\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"duration-months\"],[14,0,\"fw6\"],[12],[2,\"Number of months\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"duration-months\"],[12],[2,\"\\n                                        \"],[8,\"gh-text-input\",[],[[\"@name\",\"@value\",\"@input\",\"@disabled\",\"@id\",\"@class\"],[\"duration-months\",[30,[36,3],[[32,0,[\"offer\",\"durationInMonths\"]]],null],[32,0,[\"setDurationInMonths\"]],[32,0,[\"isDiscountSectionDisabled\"]],\"duration-months\",\"gh-input\"]],null],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"error\"],[12],[2,\"\\n                                        \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"offer\",\"errors\"]],\"durationInMonths\"]],null],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\\n                        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Portal settings\"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-main-section-content grey\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"form-col2\"],[12],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@property\",\"@hasValidated\"],[[32,0,[\"offer\",\"errors\"]],\"displayTitle\",[32,0,[\"offer\",\"hasValidated\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"display-title\"],[14,0,\"fw6\"],[12],[2,\"Display title\"],[13],[2,\"\\n                                    \"],[8,\"gh-text-input\",[],[[\"@name\",\"@value\",\"@input\",\"@placeholder\",\"@id\",\"@class\"],[\"display-title\",[30,[36,3],[[32,0,[\"offer\",\"displayTitle\"]]],null],[32,0,[\"setPortalTitle\"]],\"Black Friday Special\",\"display-title\",\"gh-input\"]],null],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"error\"],[12],[2,\"\\n                                        \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"offer\",\"errors\"]],\"displayTitle\"]],null],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@property\",\"@hasValidated\"],[[32,0,[\"offer\",\"errors\"]],\"code\",[32,0,[\"offer\",\"hasValidated\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"code\"],[14,0,\"fw6\"],[12],[2,\"Offer code\"],[13],[2,\"\\n                                    \"],[8,\"gh-text-input\",[],[[\"@name\",\"@placeholder\",\"@value\",\"@input\",\"@id\",\"@class\"],[\"code\",\"black-friday\",[30,[36,3],[[32,0,[\"offer\",\"code\"]]],null],[32,0,[\"setOfferCode\"]],\"code\",\"gh-input\"]],null],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"error\"],[12],[2,\"\\n                                        \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"offer\",\"errors\"]],\"code\"]],null],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@property\"],[[32,0,[\"offer\",\"errors\"]],\"displayDescription\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"description\"],[14,0,\"fw6\"],[12],[2,\"Display description\"],[13],[2,\"\\n                                \"],[8,\"gh-textarea\",[],[[\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@input\",\"@stopEnterKeyDownPropagation\"],[\"description\",\"description\",\"Take advantage of this limited-time offer.\",[30,[36,3],[[32,0,[\"offer\",\"displayDescription\"]]],null],[32,0,[\"setPortalDescription\"]],\"true\"]],null],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"error\"],[12],[2,\"\\n                                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"offer\",\"errors\"]],\"displayDescription\"]],null],[2,\"\\n                                \"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[8,\"gh-form-group\",[[24,0,\"no-margin\"]],[[\"@errors\",\"@property\",\"@class\"],[[32,0,[\"errors\"]],\"url\",\"gh-offer-url\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"url\"],[14,0,\"fw6\"],[12],[2,\"URL\"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-input-group\"],[12],[2,\"\\n                                    \"],[8,\"gh-text-input\",[],[[\"@name\",\"@value\",\"@id\",\"@disabled\",\"@placeholder\",\"@class\"],[\"url\",[30,[36,3],[[32,0,[\"offerUrl\"]]],null],\"url\",\"disabled\",[32,0,[\"defaultSiteUrl\"]],\"gh-input\"]],null],[2,\"\\n\\n                                    \"],[8,\"gh-task-button\",[],[[\"@type\",\"@buttonText\",\"@task\",\"@successText\",\"@disabled\",\"@class\"],[\"button\",\"Copy link\",[32,0,[\"copyOfferUrl\"]],\"Link copied\",[30,[36,9],[[32,0,[\"offerUrl\"]],\"disabled\"],null],\"gh-btn gh-btn-icon\"]],null],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"url\"]],null],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-offer-portal-preview\"],[12],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Preview\"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-setting-members-portalpreview\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-members-portal-mock\"],[12],[2,\"\\n                            \"],[8,\"gh-site-iframe\",[[24,\"scrolling\",\"no\"]],[[\"@src\",\"@invisibleUntilLoaded\",\"@onInserted\",\"@onDestroyed\"],[[32,0,[\"portalPreviewUrl\"]],\"portal-ready\",[32,0,[\"portalPreviewInserted\"]],[32,0,[\"portalPreviewDestroyed\"]]]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-block gh-offer-archive-container\"],[12],[2,\"\\n\"],[6,[37,2],[[30,[36,5],[[32,0,[\"offer\",\"status\"]],\"active\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,2],[[30,[36,1],[[32,0,[\"offer\",\"isNew\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black gh-btn-icon\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"openConfirmArchiveModal\"]]],null],[12],[2,\"\\n                            \"],[10,\"span\"],[12],[2,\"Archive offer\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"\\n                            \"],[10,\"span\"],[12],[2,\"Archiving an offer ensures it is no longer available for use. Don’t worry, existing members remain unchanged and the offer can be reactivated anytime.\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-black gh-btn-icon\"],[24,4,\"button\"],[4,[38,0],[\"click\",[32,0,[\"openConfirmUnarchiveModal\"]]],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Reactivate offer\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"showUnsavedChangesModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[32,0,[\"leaveScreen\"]],[32,0,[\"toggleUnsavedChangesModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"on\",\"not\",\"if\",\"readonly\",\"gh-price-amount\",\"eq\",\"did-insert\",\"svg-jar\",\"feature\",\"unless\"]}",
    "moduleName": "ghost-admin/templates/offer.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/offers", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "HYVjddos",
    "block": "{\"symbols\":[\"offer\",\"type\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas gh-offers\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"Offers\"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-offers-actions view-actions\"],[12],[2,\"\\n            \"],[10,\"div\"],[12],[2,\"\\n                \"],[10,\"div\"],[15,0,[31,[\"gh-contentfilter-menu gh-contentfilter-type \",[30,[36,3],[[30,[36,12],[[30,[36,2],[[32,0,[\"selectedType\",\"value\"]],\"active\"],null]],null],\"gh-contentfilter-selected\"],null]]]],[14,\"data-test-type-select\",\"true\"],[12],[2,\"\\n                    \"],[8,\"power-select\",[],[[\"@selected\",\"@options\",\"@searchEnabled\",\"@onChange\",\"@triggerComponent\",\"@triggerClass\",\"@dropdownClass\",\"@matchTriggerWidth\"],[[32,0,[\"selectedType\"]],[32,0,[\"availableTypes\"]],false,[32,0,[\"onTypeChange\"]],\"gh-power-select/trigger\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[6,[37,3],[[32,2,[\"name\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,[32,2,[\"name\"]]],[2,\" offers\"]],\"parameters\":[]},{\"statements\":[[10,\"span\"],[14,0,\"red\"],[12],[2,\"Unknown type\"],[13]],\"parameters\":[]}]]],[2,\"\\n                    \"]],\"parameters\":[2]}]]],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-primary\"]],[[\"@route\"],[\"offer.new\"]],[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[2,\"New offer\"],[13]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n\\n\"],[6,[37,3],[[30,[36,13],[[32,0,[\"offersExist\"]],[32,0,[\"filteredOffers\",\"length\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"table\"],[14,0,\"gh-list gh-offers-list\"],[12],[2,\"\\n                \"],[10,\"tr\"],[14,0,\"gh-list-row header\"],[12],[2,\"\\n                    \"],[10,\"th\"],[14,0,\"gh-list-header\"],[12],[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[32,0,[\"selectedType\",\"value\"]],\"active\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[1,[30,[36,9],[[32,0,[\"filteredOffers\",\"length\"]],\"active offer\"],null]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                            \"],[1,[30,[36,9],[[32,0,[\"filteredOffers\",\"length\"]],\"archived offer\"],null]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                    \"],[10,\"th\"],[14,0,\"gh-list-header\"],[12],[2,\"Tier\"],[13],[2,\"\\n                    \"],[10,\"th\"],[14,0,\"gh-list-header\"],[12],[2,\"Terms\"],[13],[2,\"\\n                    \"],[10,\"th\"],[14,0,\"gh-list-header\"],[12],[2,\"Price\"],[13],[2,\"\\n                    \"],[10,\"th\"],[14,0,\"gh-list-header\"],[12],[2,\"Redemptions\"],[13],[2,\"\\n                    \"],[10,\"th\"],[14,0,\"gh-list-header gh-list-cellwidth-10\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n\"],[6,[37,11],[[30,[36,10],[[30,[36,10],[[32,0,[\"filteredOffers\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"tr\"],[14,0,\"gh-list-row\"],[14,\"data-test-list\",\"offers-list-item\"],[12],[2,\"\\n                        \"],[8,\"link-to\",[[24,0,\"gh-list-data\"],[24,\"data-test-list\",\"offer-name\"]],[[\"@route\",\"@model\"],[\"offer\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"h3\"],[12],[1,[32,1,[\"name\"]]],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[8,\"link-to\",[[24,0,\"gh-list-data\"]],[[\"@route\",\"@model\"],[\"offer\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,3],[[30,[36,5],[\"multipleProducts\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[12],[1,[32,1,[\"tier\",\"name\"]]],[13],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"midgrey\"],[12],[2,\"-\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[10,\"span\"],[14,0,\"midgrey\"],[12],[1,[30,[36,3],[[30,[36,2],[[32,1,[\"cadence\"]],\"month\"],null],\"Monthly\",\"Yearly\"],null]],[2,\" \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[8,\"link-to\",[[24,0,\"gh-list-data\"]],[[\"@route\",\"@model\"],[\"offer\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"span\"],[14,0,\"offer-value\"],[12],[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[32,1,[\"type\"]],\"percent\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[1,[30,[36,1],[\"offer\"],null]],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"green fw6\"],[12],[1,[32,1,[\"amount\"]]],[2,\"% OFF\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,3],[[30,[36,2],[[32,1,[\"type\"]],\"fixed\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,0,\"blue\"],[12],[1,[30,[36,1],[\"offer\"],null]],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"blue fw6\"],[12],[1,[30,[36,4],[[32,1,[\"amount\"]]],null]],[2,\" \"],[10,\"span\"],[14,0,\"ttu\"],[12],[1,[32,1,[\"currency\"]]],[13],[2,\" OFF\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[10,\"span\"],[14,0,\"dib ml1 midgrey ttc\"],[12],[2,\" – \\n                                    \"],[1,[30,[36,3],[[30,[36,2],[[32,1,[\"duration\"]],\"once\"],null],\"First-payment\",\"Repeating\"],null]],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[8,\"link-to\",[[24,0,\"gh-list-data\"]],[[\"@route\",\"@model\"],[\"offer\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"span\"],[12],[1,[30,[36,6],[[32,1,[\"finalCurrency\"]]],null]],[1,[30,[36,4],[[32,1,[\"updatedPrice\"]]],null]],[13],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"midgrey strike ml2\"],[12],[1,[30,[36,6],[[32,1,[\"finalCurrency\"]]],null]],[1,[30,[36,4],[[32,1,[\"originalPrice\"]]],null]],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[8,\"link-to\",[[24,0,\"gh-list-data\"]],[[\"@route\",\"@model\"],[\"offer\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"span\"],[14,0,\"midgrey\"],[12],[1,[32,1,[\"redemptionCount\"]]],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-list-data gh-list-cellwidth-10 gh-list-chevron\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex items-center justify-end w-100 h-100\"],[12],[2,\"\\n                                \"],[11,\"div\"],[24,0,\"gh-btn gh-btn-icon gh-btn-text gh-offer-link-button\"],[24,\"data-tooltip\",\"Get shareable link\"],[4,[38,8],[\"click\",[30,[36,7],[[32,0,[\"openLinkDialog\"]],[32,1]],null]],null],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[1,[30,[36,1],[\"link\"],null]],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[8,\"link-to\",[],[[\"@route\",\"@model\"],[\"offer\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"nr2 lh-1\"],[12],[1,[30,[36,1],[\"arrow-right\"],[[\"class\"],[\"w6 h6 fill-midgrey pa1\"]]]],[13],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,3],[[30,[36,2],[[32,0,[\"selectedType\",\"value\"]],\"active\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-offers-list-cta\"],[12],[2,\"\\n                    \"],[1,[30,[36,1],[\"discount-bubble\"],[[\"class\"],[\"discount-bubble\"]]]],[2,\"\\n                    \"],[10,\"h4\"],[12],[2,\"Provide special offers to new signups\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"\\n                        Boost your subscriptions by creating targeted discounts to potential members.\\n                    \"],[13],[2,\"\\n                    \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-green gh-btn-icon\"]],[[\"@route\"],[\"offer.new\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"span\"],[12],[1,[30,[36,1],[\"add\"],null]],[2,\" Add offer\"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"no-posts-box\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"no-posts\"],[12],[2,\"\\n                        \"],[10,\"h3\"],[12],[2,\"You have no archived offers.\"],[13],[2,\"\\n                        \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-lg\"]],[[\"@route\",\"@query\"],[\"offers\",[30,[36,0],null,[[\"type\",\"author\",\"tag\"],[null,null,null]]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"span\"],[12],[2,\"Show active offers\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,3],[[30,[36,2],[[32,0,[\"selectedType\",\"value\"]],\"active\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-main-section gh-offers-help\"],[12],[2,\"\\n                \"],[10,\"h2\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Get the most out of offers\"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-main-section-content grey\"],[12],[2,\"\\n                        \"],[10,\"a\"],[14,6,\"https://ghost.org/help/offers\"],[14,\"target\",\"_blank\"],[14,0,\"gh-offers-help-card\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-offers-help-content\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"thumbnail\"],[14,5,\"background-image: url(assets/img/marketing/offers-1.jpg);\"],[12],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"text\"],[12],[2,\"\\n                                    \"],[10,\"h3\"],[12],[2,\"How to create offers in Ghost\"],[13],[2,\"\\n                                    \"],[10,\"p\"],[12],[2,\"Find out how to create and promote offers to increase your subscriptions.\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-btn\"],[12],[10,\"span\"],[12],[2,\"Read more\"],[13],[13],[2,\"\\n                        \"],[13],[2,\"\\n\\n                        \"],[10,\"a\"],[14,6,\"https://ghost.org/resources/proven-discount-strategies\"],[14,\"target\",\"_blank\"],[14,0,\"gh-offers-help-card\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-offers-help-content\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"thumbnail\"],[14,5,\"background-image: url(assets/img/marketing/offers-3.jpg);\"],[12],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"text\"],[12],[2,\"\\n                                    \"],[10,\"h3\"],[12],[2,\"Proven discount strategies for publishers\"],[13],[2,\"\\n                                    \"],[10,\"p\"],[12],[2,\"Setting up the right timing for your offers is as critical as finding the right amount.\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-btn\"],[12],[10,\"span\"],[12],[2,\"Read more\"],[13],[13],[2,\"\\n                        \"],[13],[2,\"\\n\\n                        \"],[10,\"a\"],[14,6,\"https://ghost.org/resources/conversion-vs-retention-offers\"],[14,\"target\",\"_blank\"],[14,0,\"gh-offers-help-card\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-offers-help-content\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"thumbnail\"],[14,5,\"background-image: url(assets/img/marketing/offers-2.jpg)\"],[12],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"text\"],[12],[2,\"\\n                                    \"],[10,\"h3\"],[12],[2,\"Offer pricing: Conversion vs retention\"],[13],[2,\"\\n                                    \"],[10,\"p\"],[12],[2,\"As your business evolves, your discount strategy should too.\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-btn\"],[12],[10,\"span\"],[12],[2,\"Read more\"],[13],[13],[2,\"\\n                        \"],[13],[2,\"\\n\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"hash\",\"svg-jar\",\"eq\",\"if\",\"gh-price-amount\",\"feature\",\"currency-symbol\",\"fn\",\"on\",\"gh-pluralize\",\"-track-array\",\"each\",\"not\",\"and\"]}",
    "moduleName": "ghost-admin/templates/offers.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/pages-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "jMuDT/qM",
    "block": "{\"symbols\":[],\"statements\":[[11,\"section\"],[24,0,\"gh-canvas\"],[4,[38,1],[[30,[36,0],[[32,0],\"setMainClass\",\"gh-main-primarybg\"],[[\"target\"],[[32,0,[\"ui\"]]]]]],null],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header break tablet post-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[8,\"gh-custom-view-title\",[],[[\"@title\",\"@query\"],[\"Pages\",[30,[36,2],[\"posts\"],null]]],null],[2,\"\\n\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-contentfilter\",[],[[\"@currentUser\",\"@selectedType\",\"@availableTypes\",\"@onTypeChange\",\"@selectedVisibility\",\"@availableVisibilities\",\"@onVisibilityChange\",\"@selectedAuthor\",\"@availableAuthors\",\"@onAuthorChange\",\"@selectedTag\",\"@availableTags\",\"@onTagChange\",\"@selectedOrder\",\"@availableOrders\",\"@onOrderChange\"],[[32,0,[\"session\",\"user\"]],[32,0,[\"selectedType\"]],[32,0,[\"availableTypes\"]],[30,[36,0],[[32,0],[30,[36,4],[[35,3]],null]],null],[32,0,[\"selectedVisibility\"]],[32,0,[\"availableVisibilities\"]],[30,[36,0],[[32,0],[30,[36,4],[[35,3]],null]],null],[32,0,[\"selectedAuthor\"]],[32,0,[\"availableAuthors\"]],[30,[36,0],[[32,0],[30,[36,4],[[35,3]],null]],null],[32,0,[\"selectedTag\"]],[32,0,[\"availableTags\"]],[30,[36,0],[[32,0],[30,[36,4],[[35,3]],null]],null],[32,0,[\"selectedOrder\"]],[32,0,[\"availableOrders\"]],[30,[36,0],[[32,0],[30,[36,4],[[35,3]],null]],null]]],null],[2,\"\\n\\n            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-primary view-actions-top-row\"],[16,\"data-test-new-page-button\",true]],[[\"@route\",\"@model\"],[\"editor.new\",\"page\"]],[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[2,\"New page\"],[13]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-content\"],[12],[2,\"\\n        \"],[8,\"gh-loading-list\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"did-insert\",\"reset-query-params\",\"k\",\"mut\"]}",
    "moduleName": "ghost-admin/templates/pages-loading.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/pages", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Ba1Mc+ky",
    "block": "{\"symbols\":[\"page\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header break tablet post-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[8,\"gh-custom-view-title\",[],[[\"@title\",\"@query\"],[\"Pages\",[30,[36,3],[\"posts\"],null]]],null],[2,\"\\n\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-contentfilter\",[],[[\"@currentUser\",\"@selectedType\",\"@availableTypes\",\"@onTypeChange\",\"@selectedVisibility\",\"@availableVisibilities\",\"@onVisibilityChange\",\"@selectedAuthor\",\"@availableAuthors\",\"@onAuthorChange\",\"@selectedTag\",\"@availableTags\",\"@onTagChange\",\"@selectedOrder\",\"@availableOrders\",\"@onOrderChange\"],[[32,0,[\"session\",\"user\"]],[32,0,[\"selectedType\"]],[32,0,[\"availableTypes\"]],[30,[36,4],[[32,0],\"changeType\"],null],[32,0,[\"selectedVisibility\"]],[32,0,[\"availableVisibilities\"]],[30,[36,4],[[32,0],\"changeVisibility\"],null],[32,0,[\"selectedAuthor\"]],[32,0,[\"availableAuthors\"]],[30,[36,4],[[32,0],\"changeAuthor\"],null],[32,0,[\"selectedTag\"]],[32,0,[\"availableTags\"]],[30,[36,4],[[32,0],\"changeTag\"],null],[32,0,[\"selectedOrder\"]],[32,0,[\"availableOrders\"]],[30,[36,4],[[32,0],\"changeOrder\"],null]]],null],[2,\"\\n\\n            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-primary view-actions-top-row\"],[16,\"data-test-new-page-button\",true]],[[\"@route\",\"@model\"],[\"editor.new\",\"page\"]],[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[2,\"New page\"],[13]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container content-list\"],[12],[2,\"\\n        \"],[10,\"ol\"],[15,0,[31,[\"gh-list \",[30,[36,5],[[32,0,[\"postsInfinityModel\"]],\"no-posts\"],null]]]],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"postsInfinityModel\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"li\"],[14,0,\"gh-list-row header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-list-header gh-posts-title-header\"],[12],[2,\"Title\"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-list-header gh-posts-status-header\"],[12],[2,\"Status\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,7],[[30,[36,6],[[30,[36,6],[[32,0,[\"postsInfinityModel\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[8,\"gh-posts-list-item\",[[16,\"data-test-page-id\",[32,1,[\"id\"]]]],[[\"@post\"],[[32,1]]],null],[2,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[2,\"                \"],[10,\"li\"],[14,0,\"no-posts-box\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"no-posts\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"showingAll\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[1,[30,[36,1],[\"pages-placeholder\"],[[\"class\"],[\"gh-pages-placeholder\"]]]],[2,\"\\n                            \"],[10,\"h3\"],[12],[2,\"You haven't created any pages yet!\"],[13],[2,\"\\n                            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-primary gh-btn-lg\"]],[[\"@route\",\"@model\"],[\"editor.new\",\"page\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"span\"],[12],[2,\"Create a new page\"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                            \"],[10,\"h3\"],[12],[2,\"No pages match the current filter\"],[13],[2,\"\\n                            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-lg\"]],[[\"@route\",\"@query\"],[\"pages\",[30,[36,0],null,[[\"type\",\"author\",\"tag\"],[null,null,null]]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"span\"],[12],[2,\"Show all pages\"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\\n        \"],[8,\"gh-infinity-loader\",[],[[\"@infinityModel\",\"@scrollable\",\"@triggerOffset\"],[[32,0,[\"postsInfinityModel\"]],\".gh-main\",1000]],null],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[1,[30,[36,9],[[30,[36,8],null,null]],null]],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"hash\",\"svg-jar\",\"if\",\"reset-query-params\",\"action\",\"unless\",\"-track-array\",\"each\",\"-outlet\",\"component\"]}",
    "moduleName": "ghost-admin/templates/pages.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/posts-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "4maFo9h9",
    "block": "{\"symbols\":[],\"statements\":[[11,\"section\"],[24,0,\"gh-canvas\"],[4,[38,1],[[30,[36,0],[[32,0],\"setMainClass\",\"gh-main-primarybg\"],[[\"target\"],[[32,0,[\"ui\"]]]]]],null],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header break tablet post-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[8,\"gh-custom-view-title\",[],[[\"@title\",\"@query\"],[\"Posts\",[30,[36,2],[\"posts\"],null]]],null],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-contentfilter\",[],[[\"@currentUser\",\"@selectedType\",\"@availableTypes\",\"@onTypeChange\",\"@selectedVisibility\",\"@availableVisibilities\",\"@onVisibilityChange\",\"@selectedAuthor\",\"@availableAuthors\",\"@onAuthorChange\",\"@selectedTag\",\"@availableTags\",\"@onTagChange\",\"@selectedOrder\",\"@availableOrders\",\"@onOrderChange\"],[[32,0,[\"session\",\"user\"]],[32,0,[\"selectedType\"]],[32,0,[\"availableTypes\"]],[30,[36,0],[[32,0],[30,[36,4],[[35,3]],null]],null],[32,0,[\"selectedVisibility\"]],[32,0,[\"availableVisibilities\"]],[30,[36,0],[[32,0],[30,[36,4],[[35,3]],null]],null],[32,0,[\"selectedAuthor\"]],[32,0,[\"availableAuthors\"]],[30,[36,0],[[32,0],[30,[36,4],[[35,3]],null]],null],[32,0,[\"selectedTag\"]],[32,0,[\"availableTags\"]],[30,[36,0],[[32,0],[30,[36,4],[[35,3]],null]],null],[32,0,[\"selectedOrder\"]],[32,0,[\"availableOrders\"]],[30,[36,0],[[32,0],[30,[36,4],[[35,3]],null]],null]]],null],[2,\"\\n\\n            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-primary view-actions-top-row\"],[16,\"data-test-new-post-button\",true]],[[\"@route\",\"@model\"],[\"editor.new\",\"post\"]],[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[2,\"New post\"],[13]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-content\"],[12],[2,\"\\n        \"],[8,\"gh-loading-list\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"did-insert\",\"reset-query-params\",\"k\",\"mut\"]}",
    "moduleName": "ghost-admin/templates/posts-loading.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/posts", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "2uUluW7b",
    "block": "{\"symbols\":[\"post\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header break tablet post-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[8,\"gh-custom-view-title\",[],[[\"@title\",\"@query\"],[\"Publicaciones\",[30,[36,4],[\"posts\"],null]]],null],[2,\"\\n\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-contentfilter\",[],[[\"@currentUser\",\"@selectedType\",\"@availableTypes\",\"@onTypeChange\",\"@selectedVisibility\",\"@availableVisibilities\",\"@onVisibilityChange\",\"@selectedAuthor\",\"@availableAuthors\",\"@onAuthorChange\",\"@selectedTag\",\"@availableTags\",\"@onTagChange\",\"@selectedOrder\",\"@availableOrders\",\"@onOrderChange\"],[[32,0,[\"session\",\"user\"]],[32,0,[\"selectedType\"]],[32,0,[\"availableTypes\"]],[30,[36,5],[[32,0],\"changeType\"],null],[32,0,[\"selectedVisibility\"]],[32,0,[\"availableVisibilities\"]],[30,[36,5],[[32,0],\"changeVisibility\"],null],[32,0,[\"selectedAuthor\"]],[32,0,[\"availableAuthors\"]],[30,[36,5],[[32,0],\"changeAuthor\"],null],[32,0,[\"selectedTag\"]],[32,0,[\"availableTags\"]],[30,[36,5],[[32,0],\"changeTag\"],null],[32,0,[\"selectedOrder\"]],[32,0,[\"availableOrders\"]],[30,[36,5],[[32,0],\"changeOrder\"],null]]],null],[2,\"\\n\\n            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-primary view-actions-top-row\"],[16,\"data-test-new-post-button\",true]],[[\"@route\",\"@model\"],[\"editor.new\",\"post\"]],[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[2,\"Nueva Publicacion\"],[13]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container content-list\"],[12],[2,\"\\n        \"],[10,\"ol\"],[15,0,[31,[\"posts-list gh-list \",[30,[36,6],[[32,0,[\"postsInfinityModel\"]],\"no-posts\"],null]]]],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"postsInfinityModel\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"li\"],[14,0,\"gh-list-row header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-list-header gh-posts-title-header\"],[12],[2,\"Titulo\"],[13],[2,\"\\n\"],[6,[37,2],[[30,[36,3],[[32,0,[\"settings\",\"editorDefaultEmailRecipients\"]],\"disabled\"],null]],null,[[\"default\"],[{\"statements\":[[6,[37,2],[[32,0,[\"feature\",\"emailAnalytics\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"gh-list-header gh-posts-sends-header\"],[12],[2,\"Enviados\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-list-header gh-posts-opens-header\"],[12],[2,\"Abiertos\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                    \"],[10,\"div\"],[14,0,\"gh-list-header gh-posts-status-header\"],[12],[2,\"Estado\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,8],[[30,[36,7],[[30,[36,7],[[32,0,[\"postsInfinityModel\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[8,\"gh-posts-list-item\",[[16,\"data-test-post-id\",[32,1,[\"id\"]]]],[[\"@post\"],[[32,1]]],null],[2,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[2,\"            \"],[10,\"li\"],[14,0,\"no-posts-box\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"no-posts\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"showingAll\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[1,[30,[36,1],[\"posts-placeholder\"],[[\"class\"],[\"gh-posts-placeholder\"]]]],[2,\"\\n                        \"],[10,\"h3\"],[12],[2,\"Todavia no has agregado ningun contenido\"],[13],[2,\"\\n                        \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-green gh-btn-lg\"]],[[\"@route\",\"@model\"],[\"editor.new\",\"post\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"span\"],[12],[2,\"Escribir una nueva publicacion\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"h3\"],[12],[2,\"Ninguna publicacion fue encontrada\"],[13],[2,\"\\n                        \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-lg\"]],[[\"@route\",\"@query\"],[\"posts\",[30,[36,0],null,[[\"type\",\"author\",\"tag\"],[null,null,null]]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"span\"],[12],[2,\"Motrar todas las publicaciones\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\\n        \"],[8,\"gh-infinity-loader\",[],[[\"@infinityModel\",\"@scrollable\",\"@triggerOffset\"],[[32,0,[\"postsInfinityModel\"]],\".gh-main\",1000]],null],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[1,[30,[36,10],[[30,[36,9],null,null]],null]],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"hash\",\"svg-jar\",\"if\",\"not-eq\",\"reset-query-params\",\"action\",\"unless\",\"-track-array\",\"each\",\"-outlet\",\"component\"]}",
    "moduleName": "ghost-admin/templates/posts.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/reset", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "3jNYWSUf",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"gh-flow\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-flow-content-wrap\"],[12],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-flow-content fade-in\"],[12],[2,\"\\n            \"],[11,\"form\"],[24,1,\"reset\"],[24,0,\"gh-signin\"],[24,\"method\",\"post\"],[24,\"novalidate\",\"novalidate\"],[4,[38,0],[[32,0],\"submit\"],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"errors\"]],[32,0,[\"hasValidated\"]],\"newPassword\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-input-icon gh-icon-lock\"],[12],[2,\"\\n                        \"],[8,\"gh-text-input\",[],[[\"@type\",\"@name\",\"@placeholder\",\"@class\",\"@autocorrect\",\"@shouldFocus\",\"@value\",\"@input\"],[\"password\",\"newpassword\",\"New password\",\"password\",\"off\",true,[30,[36,1],[[32,0,[\"newPassword\"]]],null],[30,[36,0],[[32,0],[30,[36,2],[[32,0,[\"newPassword\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"errors\"]],[32,0,[\"hasValidated\"]],\"ne2Password\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-input-icon gh-icon-lock\"],[12],[2,\"\\n                        \"],[8,\"gh-text-input\",[],[[\"@type\",\"@name\",\"@placeholder\",\"@class\",\"@autocorrect\",\"@value\",\"@input\"],[\"password\",\"ne2password\",\"Confirm new password\",\"password\",\"off\",[30,[36,1],[[32,0,[\"ne2Password\"]]],null],[30,[36,0],[[32,0],[30,[36,2],[[32,0,[\"ne2Password\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@class\",\"@type\",\"@autoWidth\"],[\"Save new password\",[32,0,[\"resetPassword\"]],\"gh-btn gh-btn-blue gh-btn-reset gh-btn-block gh-btn-icon\",\"submit\",\"false\"]],null],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"p\"],[14,0,\"main-error\"],[12],[1,[32,0,[\"flowErrors\"]]],[2,\" \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"readonly\",\"mut\"]}",
    "moduleName": "ghost-admin/templates/reset.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Ta/hNm7v",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            Settings\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-setting-header gh-first-header\"],[12],[2,\"Website\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-settings-main-grid\"],[12],[2,\"\\n            \"],[8,\"link-to\",[[24,0,\"gh-setting-group\"],[24,\"data-test-nav\",\"general\"]],[[\"@route\"],[\"settings.general\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"span\"],[14,0,\"yellow\"],[12],[1,[30,[36,1],[\"settings\"],null]],[13],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h4\"],[12],[2,\"General\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Basic publication details and site metadata\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[8,\"link-to\",[[24,0,\"gh-setting-group\"],[24,\"data-test-nav\",\"design\"]],[[\"@route\"],[\"settings.design\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"span\"],[14,0,\"blue\"],[12],[1,[30,[36,1],[\"paint-palette\"],null]],[13],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h4\"],[12],[2,\"Design\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Customize your site and manage themes\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[8,\"link-to\",[[24,0,\"gh-setting-group\"],[24,\"data-test-nav\",\"navigation\"]],[[\"@route\"],[\"settings.navigation\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"span\"],[14,0,\"pink\"],[12],[1,[30,[36,1],[\"compass-2\"],null]],[13],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h4\"],[12],[2,\"Navigation\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Set up primary and secondary menus\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n\\n            \"],[8,\"link-to\",[[24,0,\"gh-setting-group\"],[24,\"data-test-nav\",\"navigation\"]],[[\"@route\"],[\"settings.staff\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"span\"],[14,0,\"green\"],[12],[1,[30,[36,1],[\"staff\"],null]],[13],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h4\"],[12],[2,\"Staff\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Manage authors, editor and collaborators\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-setting-header\"],[12],[2,\"Members\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-settings-main-grid\"],[12],[2,\"\\n            \"],[8,\"link-to\",[[24,0,\"gh-setting-group\"],[24,\"data-test-nav\",\"members-membership\"]],[[\"@route\"],[\"settings.membership\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"span\"],[14,0,\"blue\"],[12],[1,[30,[36,1],[\"members\"],null]],[13],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h4\"],[12],[2,\"Membership\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Access, subscription, and pricing options\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[8,\"link-to\",[[24,0,\"gh-setting-group\"],[24,\"data-test-nav\",\"members-email\"]],[[\"@route\"],[\"settings.members-email\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"span\"],[14,0,\"yellow\"],[12],[1,[30,[36,1],[\"email-stroke\"],null]],[13],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h4\"],[12],[2,\"Email newsletter\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Customize emails and set email addresses\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-setting-header\"],[12],[2,\"Advanced\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-settings-main-grid\"],[12],[2,\"\\n            \"],[8,\"link-to\",[[24,0,\"gh-setting-group\"],[24,\"data-test-nav\",\"navigation\"]],[[\"@route\"],[\"settings.integrations\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"span\"],[14,0,\"yellow\"],[12],[1,[30,[36,1],[\"module\"],null]],[13],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h4\"],[12],[2,\"Integrations\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Make Ghost work with apps and tools\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n\\n            \"],[8,\"link-to\",[[24,0,\"gh-setting-group\"],[24,\"data-test-nav\",\"code-injection\"]],[[\"@route\"],[\"settings.code-injection\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"span\"],[14,0,\"green\"],[12],[1,[30,[36,1],[\"brackets\"],null]],[13],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h4\"],[12],[2,\"Code injection\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Add code to your publication\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n\\n            \"],[8,\"link-to\",[[24,0,\"gh-setting-group\"],[24,\"data-test-nav\",\"labs\"]],[[\"@route\"],[\"settings.labs\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"span\"],[14,0,\"pink\"],[12],[1,[30,[36,1],[\"labs\"],null]],[13],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"h4\"],[12],[2,\"Labs\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Testing ground for new features\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"showLeaveSettingsModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[30,[36,0],[[32,0],\"leavePortalSettings\"],null],[30,[36,0],[[32,0],\"closeLeaveSettingsModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/templates/settings.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/code-injection-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "HWb/KzQd",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            Code injection\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[16,\"data-test-save-button\",true]],[[\"@task\",\"@class\"],[[32,0,[\"saveTask\"]],\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"gh-content\"],[12],[2,\"\\n        \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\"]}",
    "moduleName": "ghost-admin/templates/settings/code-injection-loading.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/code-injection", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "0x84qbl+",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,1],[\"arrow-right\"],null]],[13],[2,\"\\n            Code injection\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[16,\"data-test-save-button\",true]],[[\"@task\",\"@class\"],[[32,0,[\"saveTask\"]],\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"showLeaveSettingsModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[30,[36,0],[[32,0],\"leaveSettings\"],null],[30,[36,0],[[32,0],\"toggleLeaveSettingsModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n        \"],[10,\"form\"],[14,1,\"settings-code\"],[14,\"novalidate\",\"novalidate\"],[12],[2,\"\\n            \"],[10,\"fieldset\"],[12],[2,\"\\n                \"],[10,\"p\"],[14,0,\"gh-box gh-box-tip\"],[12],[2,\"\\n                    \"],[1,[30,[36,1],[\"idea\"],null]],[2,\"\\n                    Ghost allows you to inject code into the top and bottom of your theme files without editing them. This allows for quick modifications to insert useful things like tracking codes and meta tags.\\n                \"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"ghost-head\"],[14,0,\"gh-main-section-header bn\"],[12],[2,\"Site Header\"],[13],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"gh-main-section-description bn\"],[12],[2,\"Code here will be injected into the \"],[10,\"code\"],[12],[2,\"{{ghost_head}}\"],[13],[2,\" tag on every page of the site\"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"form-group settings-code\"],[12],[2,\"\\n                        \"],[8,\"gh-cm-editor\",[],[[\"@value\",\"@id\",\"@class\",\"@name\",\"@type\",\"@update\"],[[32,0,[\"settings\",\"codeinjectionHead\"]],\"ghost-head\",\"gh-input settings-code-editor\",\"codeInjection[ghost_head]\",\"text\",[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"settings\",\"codeinjectionHead\"]]],null]],null]]],null],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"ghost-foot\"],[14,0,\"gh-main-section-header bn\"],[12],[2,\"Site Footer\"],[13],[2,\"\\n                    \"],[10,\"p\"],[14,0,\"gh-main-section-description bn\"],[12],[2,\"Code here will be injected into the \"],[10,\"code\"],[12],[2,\"{{ghost_foot}}\"],[13],[2,\" tag on every page of the site\"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"form-group settings-code\"],[12],[2,\"\\n                        \"],[8,\"gh-cm-editor\",[],[[\"@value\",\"@id\",\"@class\",\"@name\",\"@type\",\"@update\"],[[32,0,[\"settings\",\"codeinjectionFoot\"]],\"ghost-foot\",\"gh-input settings-code-editor\",\"codeInjection[ghost_foot]\",\"text\",[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"settings\",\"codeinjectionFoot\"]]],null]],null]]],null],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"if\",\"mut\"]}",
    "moduleName": "ghost-admin/templates/settings/code-injection.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/design/change-theme", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "gZKauGNE",
    "block": "{\"symbols\":[\"theme\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"Themes\"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[11,\"button\"],[24,0,\"mr4 gh-btn gh-advanced \"],[24,\"data-test-button\",\"toggle-advanced\"],[24,4,\"button\"],[4,[38,1],[\"click\",[32,0,[\"toggleAdvanced\"]]],null],[12],[10,\"span\"],[12],[1,[30,[36,2],[[30,[36,0],[[32,0,[\"showAdvanced\"]],\"arrow-up-small\",\"arrow-down-small\"],null]],null]],[2,\"Advanced\"],[13],[13],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-primary\"],[24,\"data-test-button\",\"upload-theme\"],[24,4,\"button\"],[4,[38,1],[\"click\",[32,0,[\"startThemeUpload\"]]],null],[12],[10,\"span\"],[12],[2,\"Upload theme\"],[13],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n\"],[6,[37,3],[[32,0,[\"showAdvanced\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-themes-container\"],[12],[2,\"\\n                \"],[8,\"gh-theme-table\",[],[[\"@themes\"],[[32,0,[\"themes\"]]]],null],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-theme-directory-container\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"theme-directory\"],[12],[2,\"\\n\"],[6,[37,5],[[30,[36,4],[[30,[36,4],[[32,0,[\"themesList\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[8,\"link-to\",[[24,0,\"td-item td-item-labs\"],[16,\"data-test-theme-link\",[32,1,[\"name\"]]]],[[\"@route\",\"@model\"],[\"settings.design.change-theme.view\",[32,1,[\"name\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-theme-browser\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"gh-theme-browser-button\"],[12],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"td-item-screenshot-labs relative\"],[12],[2,\"\\n                            \"],[10,\"img\"],[14,5,\"object-fit:contain;\"],[15,\"src\",[32,1,[\"image\"]]],[15,\"alt\",[31,[[32,1,[\"name\"]],\" Theme\"]]],[12],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"td-item-desc\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"td-item-name\"],[12],[1,[32,1,[\"name\"]]],[2,\"\\n\"],[6,[37,0],[[32,1,[\"isDefault\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                    (Default)\\n\"]],\"parameters\":[]}]]],[6,[37,0],[[32,1,[\"isActive\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[10,\"span\"],[14,0,\"gh-badge\"],[12],[2,\"Active\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"td-item-category\"],[12],[1,[32,1,[\"category\"]]],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"section\"],[14,0,\"gh-theme-directory-footer\"],[14,5,\"background-image:url(assets/img/footer-marketplace-bg.png);\"],[12],[2,\"\\n    Find and buy third-party, premium themes from independent developers in the \"],[10,\"a\"],[14,6,\"https://ghost.org/themes/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[14,0,\"link\"],[12],[2,\"Ghost Marketplace →\"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"if\",\"on\",\"svg-jar\",\"liquid-if\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/templates/settings/design/change-theme.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/design/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "rq3MzZRg",
    "block": "{\"symbols\":[],\"statements\":[[11,\"section\"],[24,0,\"gh-canvas gh-design\"],[4,[38,2],[\"cmd+s\",[32,0,[\"saveFromKeyboard\"]]],null],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[12],[2,\"Site design\"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-select gh-design-page-preview-mode\"],[12],[2,\"\\n                \"],[8,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@update\"],[[32,0,[\"themeManagement\",\"previewType\"]],[32,0,[\"themeManagement\",\"availablePreviewTypes\"]],\"name\",\"label\",\"name\",[32,0,[\"themeManagement\",\"setPreviewType\"]]]],null],[2,\"\\n                \"],[1,[30,[36,0],[\"arrow-down-small\"],null]],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-contentfilter gh-btn-group\"],[12],[2,\"\\n                \"],[11,\"button\"],[16,0,[31,[\"gh-btn gh-design-preview-mode \",[30,[36,1],[[32,0,[\"isDesktopPreview\"]],\"gh-btn-group-selected\"],null]]]],[24,\"data-test-button\",\"desktop-preview\"],[24,4,\"button\"],[4,[38,4],[\"click\",[30,[36,3],[[32,0,[\"setPreviewSize\"]],\"desktop\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,0],[\"desktop\"],null]],[13],[13],[2,\"\\n                \"],[11,\"button\"],[16,0,[31,[\"gh-btn gh-design-preview-mode \",[30,[36,1],[[32,0,[\"isMobilePreview\"]],\"gh-btn-group-selected\"],null]]]],[24,\"data-test-button\",\"mobile-preview\"],[24,4,\"button\"],[4,[38,4],[\"click\",[30,[36,3],[[32,0,[\"setPreviewSize\"]],\"mobile\"],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,0],[\"mobile-phone\"],null]],[13],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-settings\"]],[[\"@buttonText\",\"@task\",\"@successText\",\"@runningText\",\"@class\"],[\"Save changes\",[32,0,[\"saveTask\"]],\"Saved\",\"Saving\",\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"view-container\"],[12],[2,\"\\n\"],[2,\"        \"],[10,\"div\"],[15,0,[31,[[30,[36,1],[[32,0,[\"isMobilePreview\"]],\"gh-pe-mobile-container flex justify-center\",\"gh-browserpreview-previewcontainer\"],null]]]],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"isDesktopPreview\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-browserpreview-browser\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"tabs\"],[12],[2,\"\\n                        \"],[10,\"ul\"],[12],[10,\"li\"],[12],[13],[10,\"li\"],[12],[13],[10,\"li\"],[12],[13],[13],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"settings\",\"icon\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"favicon\"],[12],[10,\"img\"],[15,\"src\",[32,0,[\"settings\",\"icon\"]]],[14,\"alt\",\"icon\"],[12],[13],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"favicon default\"],[12],[1,[30,[36,0],[\"default-favicon\"],null]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[10,\"span\"],[14,0,\"site-title\"],[12],[1,[32,0,[\"settings\",\"title\"]]],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[10,\"div\"],[15,0,[31,[[30,[36,1],[[32,0,[\"isMobilePreview\"]],\"gh-pe-mobile-bezel\",\"gh-browserpreview-iframecontainer\"],null]]]],[12],[2,\"\\n                \"],[10,\"div\"],[15,0,[31,[[30,[36,1],[[32,0,[\"isMobilePreview\"]],\"gh-pe-mobile-screen\"],null]]]],[12],[2,\"\\n                    \"],[8,\"gh-html-iframe\",[[16,0,[30,[36,1],[[32,0,[\"isMobilePreview\"]],\"gh-post-preview-iframe\",\"site-frame\"],null]]],[[\"@html\",\"@pageId\"],[[32,0,[\"themeManagement\",\"previewHtml\"]],[32,0,[\"themeManagement\",\"previewType\"]]]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"on-key\",\"fn\",\"on\"]}",
    "moduleName": "ghost-admin/templates/settings/design/index.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/general-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "dFF0Uhfc",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            General\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save\"]],[[\"@buttonText\",\"@task\",\"@class\"],[\"Save settings\",[32,0,[\"save\"]],\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"gh-content\"],[12],[2,\"\\n        \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\"]}",
    "moduleName": "ghost-admin/templates/settings/general-loading.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/general", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "/c/LbwF7",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,5],[\"arrow-right\"],null]],[13],[2,\"\\n            General\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save\"]],[[\"@buttonText\",\"@task\",\"@class\"],[\"Save settings\",[32,0,[\"save\"]],\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,7],[[32,0,[\"showLeaveSettingsModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[30,[36,1],[[32,0],\"leaveSettings\"],null],[30,[36,1],[[32,0],\"toggleLeaveSettingsModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Publication info\"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Title & description\"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"The details used to identify your publication around the web\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-toggle-pub-info\",\"\"],[24,4,\"button\"],[4,[38,1],[[32,0],[30,[36,9],[\"pubInfoOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,7],[[32,0,[\"pubInfoOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,10],[[32,0,[\"pubInfoOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"title\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[8,\"gh-text-input\",[[16,\"data-test-title-input\",true]],[[\"@value\",\"@input\",\"@focus-out\"],[[30,[36,0],[[32,0,[\"settings\",\"title\"]]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"title\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,1],[[32,0],\"validate\",\"title\"],[[\"target\"],[[32,0,[\"settings\"]]]]]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"title\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"The name of your site\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@class\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"description\",\"description-container\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[8,\"gh-text-input\",[[16,\"data-test-description-input\",true]],[[\"@value\",\"@input\",\"@focus-out\"],[[30,[36,0],[[32,0,[\"settings\",\"description\"]]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"description\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,1],[[32,0],\"validate\",\"description\"],[[\"target\"],[[32,0,[\"settings\"]]]]]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"description\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Used in your theme, meta data and search results\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Site timezone\"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Set the time and date of your publication, used for all published posts\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-toggle-timezone\",\"\"],[24,4,\"button\"],[4,[38,1],[[32,0],[30,[36,9],[\"timezoneOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,7],[[32,0,[\"timezoneOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,10],[[32,0,[\"timezoneOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                        \"],[8,\"gh-timezone-select\",[],[[\"@timezone\",\"@availableTimezones\",\"@update\"],[[32,0,[\"settings\",\"timezone\"]],[32,0,[\"availableTimezones\"]],[30,[36,1],[[32,0],\"setTimezone\"],null]]],null],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Publication Language\"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Set the language/locale which is used on your site\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-toggle-lang\",\"\"],[24,4,\"button\"],[4,[38,1],[[32,0],[30,[36,9],[\"langOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,7],[[32,0,[\"langOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,10],[[32,0,[\"langOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"lang\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"lang\"]],[[\"@value\",\"@input\",\"@focus-out\"],[[30,[36,0],[[32,0,[\"settings\",\"lang\"]]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"lang\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,1],[[32,0],\"validate\",\"lang\"],[[\"target\"],[[32,0,[\"settings\"]]]]]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"lang\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Default: English (\"],[10,\"strong\"],[12],[2,\"en\"],[13],[2,\"); you can add translation files to your theme for \"],[10,\"a\"],[14,6,\"https://ghost.org/docs/themes/helpers/translate/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[12],[2,\"any language\"],[13],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Site meta settings\"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Meta data\"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Extra content for search engines\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-toggle-meta\",\"\"],[24,4,\"button\"],[4,[38,1],[[32,0],[30,[36,9],[\"metaDataOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,7],[[32,0,[\"metaDataOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,10],[[32,0,[\"metaDataOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-seo-settings\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-seo-settings-left flex-basis-1-2-m flex-basis-2-3-l\"],[12],[2,\"\\n                                    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"metaTitle\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[10,\"label\"],[14,\"for\",\"metaTitle\"],[12],[2,\"Meta title\"],[13],[2,\"\\n                                        \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"metaTitle\"]],[[\"@id\",\"@type\",\"@placeholder\",\"@value\",\"@input\"],[\"metaTitle\",\"text\",[30,[36,4],[[32,0,[\"settings\",\"title\"]],70],null],[30,[36,0],[[32,0,[\"settings\",\"metaTitle\"]]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"metaTitle\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                                        \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"metaTitle\"]],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"metaTitle\"]],null],[2,\"\\n                                        \"],[10,\"p\"],[12],[2,\"Recommended: \"],[10,\"b\"],[12],[2,\"70\"],[13],[2,\" characters. You’ve used \"],[10,\"b\"],[12],[1,[30,[36,8],[[32,0,[\"settings\",\"metaTitle\"]],70],null]],[13],[13],[2,\"\\n                                    \"]],\"parameters\":[]}]]],[2,\"\\n                                    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"metaDescription\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[10,\"label\"],[14,\"for\",\"metaDescription\"],[12],[2,\"Meta description\"],[13],[2,\"\\n                                        \"],[8,\"gh-textarea\",[[24,\"data-test-input\",\"metaDescription\"]],[[\"@id\",\"@type\",\"@placeholder\",\"@value\",\"@input\"],[\"metaDescription\",\"text\",[30,[36,4],[[32,0,[\"settings\",\"description\"]],300],null],[30,[36,0],[[32,0,[\"settings\",\"metaDescription\"]]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"metaDescription\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                                        \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"metaDescription\"]],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"metaDescription\"]],null],[2,\"\\n                                        \"],[10,\"p\"],[12],[2,\"Recommended: \"],[10,\"b\"],[12],[2,\"156\"],[13],[2,\" characters. You’ve used \"],[10,\"b\"],[12],[1,[30,[36,8],[[32,0,[\"settings\",\"metaDescription\"]],156],null]],[13],[13],[2,\"\\n                                    \"]],\"parameters\":[]}]]],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"flex-basis-1-2-m flex-basis-1-3-l\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[12],[2,\"Search engine result preview\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-seo-container\"],[12],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-seo-preview\"],[12],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"flex mb6\"],[12],[2,\"\\n                                                \"],[1,[30,[36,5],[\"google\"],null]],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"gh-seo-search-bar\"],[12],[1,[30,[36,5],[\"google-search\"],null]],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-seo-preview-link\"],[12],[1,[32,0,[\"config\",\"blogDomain\"]]],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-seo-preview-title\"],[12],[1,[30,[36,6],[[32,0,[\"settings\",\"metaTitle\"]],[32,0,[\"settings\",\"title\"]]],null]],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-seo-preview-desc\"],[12],[2,\"\\n                                                \"],[1,[30,[36,4],[[30,[36,6],[[32,0,[\"settings\",\"metaDescription\"]],[32,0,[\"settings\",\"description\"]]],null],159],null]],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Twitter card\"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Customize structured data of your site for Twitter\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-toggle-twitter\",\"\"],[24,4,\"button\"],[4,[38,1],[[32,0],[30,[36,9],[\"twitterCardOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,7],[[32,0,[\"twitterCardOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,10],[[32,0,[\"twitterCardOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-twitter-settings\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-twitter-settings-left flex-basis-1-2-m flex-basis-2-3-l\"],[12],[2,\"\\n                                \"],[10,\"label\"],[12],[2,\"Twitter image\"],[13],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[8,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[32,0,[\"settings\",\"twitterImage\"]],\"Add Twitter image\",true,[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"twitterImage\"]]],null]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"twitterImage\"]]],null],\"\"],null]]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"twitterTitle\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"twitterTitle\"],[12],[2,\"Twitter title\"],[13],[2,\"\\n                                    \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"twitterTitle\"]],[[\"@id\",\"@type\",\"@placeholder\",\"@value\",\"@input\"],[\"twitterTitle\",\"text\",[30,[36,4],[[32,0,[\"settings\",\"title\"]],70],null],[30,[36,0],[[32,0,[\"settings\",\"twitterTitle\"]]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"twitterTitle\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                                    \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"twitterTitle\"]],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"twitterTitle\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"twitterDescription\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"twitterDescription\"],[12],[2,\"Twitter description\"],[13],[2,\"\\n                                    \"],[8,\"gh-textarea\",[[24,\"data-test-input\",\"twitterDescription\"]],[[\"@id\",\"@placeholder\",\"@value\",\"@input\"],[\"twitterDescription\",[30,[36,4],[[32,0,[\"settings\",\"description\"]],300],null],[30,[36,0],[[32,0,[\"settings\",\"twitterDescription\"]]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"twitterDescription\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                                    \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"twitterDescription\"]],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"twitterDescription\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex-basis-1-2-m flex-basis-1-3-l\"],[12],[2,\"\\n                                \"],[10,\"label\"],[12],[2,\"Twitter preview\"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-twitter-container\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex ma4\"],[12],[2,\"\\n                                        \"],[10,\"span\"],[12],[1,[30,[36,5],[\"social-twitter\"],[[\"class\"],[\"social-icon\"]]]],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"w-100\"],[12],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-social-og-title\"],[12],[1,[30,[36,6],[[32,0,[\"settings\",\"metaTitle\"]],[32,0,[\"settings\",\"title\"]]],null]],[13],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-social-og-time\"],[12],[2,\"12 hrs\"],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"flex flex-column mt2 mb3\"],[12],[2,\"\\n                                                \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-100 mb2\"],[12],[13],[2,\"\\n                                                \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-60\"],[12],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-social-twitter-post-preview\"],[12],[2,\"\\n\"],[6,[37,7],[[32,0,[\"settings\",\"twitterImage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                                    \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-image\"],[15,5,[30,[36,3],[[32,0,[\"settings\",\"twitterImage\"]]],null]],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                                \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-content\"],[12],[2,\"\\n                                                    \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-title\"],[12],[1,[30,[36,6],[[32,0,[\"settings\",\"twitterTitle\"]],[32,0,[\"settings\",\"title\"]]],null]],[13],[2,\"\\n                                                    \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-desc\"],[12],[1,[30,[36,4],[[30,[36,6],[[32,0,[\"settings\",\"twitterDescription\"]],[32,0,[\"settings\",\"description\"]]],null]],null]],[13],[2,\"\\n                                                    \"],[10,\"div\"],[14,0,\"gh-social-twitter-preview-meta\"],[12],[2,\"\\n                                                        \"],[1,[30,[36,5],[\"twitter-link\"],null]],[2,\"\\n                                                        \"],[1,[32,0,[\"config\",\"blogDomain\"]]],[2,\"\\n                                                    \"],[13],[2,\"\\n                                                \"],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-social-twitter-reactions\"],[12],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[1,[30,[36,5],[\"twitter-comment\"],null]],[2,\"2\"],[13],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[1,[30,[36,5],[\"twitter-retweet\"],null]],[2,\"11\"],[13],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[1,[30,[36,5],[\"twitter-like\"],null]],[2,\"32\"],[13],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[1,[30,[36,5],[\"twitter-share\"],null]],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Facebook card\"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Customize structured data of your site\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-toggle-facebook\",\"\"],[24,4,\"button\"],[4,[38,1],[[32,0],[30,[36,9],[\"facebookCardOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,7],[[32,0,[\"facebookCardOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,10],[[32,0,[\"facebookCardOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-og-settings\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-og-settings-left flex-basis-1-2-m flex-basis-2-3-l\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[12],[2,\"Facebook image\"],[13],[2,\"\\n                                    \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[8,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[32,0,[\"settings\",\"ogImage\"]],\"Add Facebook image\",true,[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"ogImage\"]]],null]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"ogImage\"]]],null],\"\"],null]]],null],[2,\"\\n                                    \"]],\"parameters\":[]}]]],[2,\"\\n                                    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"ogTitle\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[10,\"label\"],[14,\"for\",\"ogTitle\"],[12],[2,\"Facebook title\"],[13],[2,\"\\n                                        \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"ogTitle\"]],[[\"@id\",\"@type\",\"@placeholder\",\"@value\",\"@input\"],[\"ogTitle\",\"text\",[30,[36,4],[[32,0,[\"settings\",\"title\"]],70],null],[30,[36,0],[[32,0,[\"settings\",\"ogTitle\"]]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"ogTitle\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                                        \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"ogTitle\"]],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"ogTitle\"]],null],[2,\"\\n                                    \"]],\"parameters\":[]}]]],[2,\"\\n                                    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"ogDescription\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[10,\"label\"],[14,\"for\",\"ogDescription\"],[12],[2,\"Facebook description\"],[13],[2,\"\\n                                        \"],[8,\"gh-textarea\",[[24,\"data-test-input\",\"ogDescription\"]],[[\"@id\",\"@placeholder\",\"@value\",\"@input\"],[\"ogDescription\",[30,[36,4],[[32,0,[\"settings\",\"description\"]],300],null],[30,[36,0],[[32,0,[\"settings\",\"ogDescription\"]]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"ogDescription\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                                        \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"ogDescription\"]],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"ogDescription\"]],null],[2,\"\\n                                    \"]],\"parameters\":[]}]]],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"flex-basis-1-2-m flex-basis-1-3-l\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[12],[2,\"Facebook preview\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-og-container\"],[12],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"flex ma3 mb2\"],[12],[2,\"\\n                                            \"],[10,\"span\"],[12],[1,[30,[36,5],[\"social-facebook\"],[[\"class\"],[\"social-icon\"]]]],[13],[2,\"\\n                                            \"],[10,\"div\"],[12],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"gh-social-og-title\"],[12],[1,[30,[36,6],[[32,0,[\"settings\",\"metaTitle\"]],[32,0,[\"settings\",\"title\"]]],null]],[13],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"gh-social-og-time\"],[12],[2,\"12 hrs\"],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"flex flex-column ma3 mt2\"],[12],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-100 mb2\"],[12],[13],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-social-og-desc w-60\"],[12],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-social-og-preview\"],[12],[2,\"\\n\"],[6,[37,7],[[32,0,[\"settings\",\"ogImage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                                \"],[10,\"div\"],[14,0,\"gh-social-og-preview-image\"],[15,5,[30,[36,3],[[32,0,[\"settings\",\"ogImage\"]]],null]],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                            \"],[10,\"div\"],[14,0,\"gh-social-og-preview-bookmark\"],[12],[2,\"\\n\"],[2,\"                                                \"],[10,\"div\"],[14,0,\"gh-social-og-preview-content\"],[12],[2,\"\\n                                                    \"],[10,\"div\"],[14,0,\"gh-social-og-preview-meta\"],[12],[2,\"\\n                                                        \"],[1,[32,0,[\"config\",\"blogDomain\"]]],[2,\"\\n                                                    \"],[13],[2,\"\\n                                                    \"],[10,\"div\"],[14,0,\"gh-social-og-preview-title\"],[12],[1,[30,[36,4],[[30,[36,6],[[32,0,[\"settings\",\"ogTitle\"]],[32,0,[\"settings\",\"title\"]]],null]],null]],[13],[2,\"\\n                                                    \"],[10,\"div\"],[14,0,\"gh-social-og-preview-desc\"],[12],[1,[30,[36,4],[[30,[36,6],[[32,0,[\"settings\",\"ogDescription\"]],[32,0,[\"settings\",\"description\"]]],null]],null]],[13],[2,\"\\n                                                \"],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-social-og-reactions\"],[12],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-social-og-likes\"],[12],[1,[30,[36,5],[\"facebook-like\"],[[\"class\"],[\"z-999\"]]]],[1,[30,[36,5],[\"facebook-heart\"],[[\"class\"],[\"nl1\"]]]],[2,\"182\"],[13],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-social-og-comments\"],[12],[2,\"7 comments\"],[13],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"gh-social-og-comments ml2\"],[12],[2,\"2 shares\"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Social accounts\"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Link your social accounts for full structured data and rich card support\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-toggle-social\",\"\"],[24,4,\"button\"],[4,[38,1],[[32,0],[30,[36,9],[\"socialOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,7],[[32,0,[\"socialOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,10],[[32,0,[\"socialOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"facebook\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[8,\"gh-text-input\",[[16,\"data-test-facebook-input\",true]],[[\"@type\",\"@placeholder\",\"@autocorrect\",\"@value\",\"@input\",\"@focus-out\"],[\"url\",\"https://www.facebook.com/ghost\",\"off\",[30,[36,0],[[32,0,[\"settings\",\"facebook\"]]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"_scratchFacebook\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,1],[[32,0],\"validateFacebookUrl\"],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[[24,\"data-test-facebook-error\",\"true\"]],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"facebook\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"URL of your publication's Facebook Page\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"twitter\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[8,\"gh-text-input\",[[16,\"data-test-twitter-input\",true]],[[\"@type\",\"@placeholder\",\"@autocorrect\",\"@value\",\"@input\",\"@focus-out\"],[\"url\",\"https://twitter.com/ghost\",\"off\",[30,[36,0],[[32,0,[\"settings\",\"twitter\"]]],null],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"_scratchTwitter\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,1],[[32,0],\"validateTwitterUrl\"],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[[24,\"data-test-twitter-error\",\"true\"]],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"twitter\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"URL of your publication's Twitter profile\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Advanced settings\"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Make this site private\"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"\\n                            Enable protection with a simple shared password. All search engine optimization and social features will be disabled.\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"for-switch\"],[12],[2,\"\\n                        \"],[10,\"label\"],[14,0,\"switch\"],[14,\"for\",\"settings-private\"],[12],[2,\"\\n                            \"],[10,\"input\"],[15,\"checked\",[32,0,[\"settings\",\"isPrivate\"]]],[14,1,\"settings-private\"],[15,\"onclick\",[30,[36,1],[[32,0],\"toggleIsPrivate\"],[[\"value\"],[\"target.checked\"]]]],[14,\"data-test-private-checkbox\",\"\"],[14,4,\"checkbox\"],[12],[13],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,7],[[32,0,[\"settings\",\"isPrivate\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-setting-content-extended pt4 pb4\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"avoid-break-out\"],[12],[2,\"\\n                                A private RSS feed is available at\\n                                \"],[10,\"a\"],[15,6,[31,[[32,0,[\"privateRSSUrl\"]]]]],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[12],[1,[32,0,[\"privateRSSUrl\"]]],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[8,\"gh-form-group\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"no-margin pt2\",[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"password\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[8,\"gh-text-input\",[[16,\"data-test-password-input\",true]],[[\"@value\",\"@name\",\"@focus-out\",\"@input\"],[[30,[36,0],[[32,0,[\"settings\",\"password\"]]],null],\"general[password]\",[30,[36,1],[[32,0],\"validate\",\"password\"],[[\"target\"],[[32,0,[\"settings\"]]]]],[30,[36,1],[[32,0],[30,[36,2],[[32,0,[\"settings\",\"password\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                                \"],[8,\"gh-error-message\",[[24,\"data-test-password-error\",\"true\"]],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"password\"]],null],[2,\"\\n                                \"],[10,\"p\"],[12],[2,\"Set the password for this site\"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"],[1,[30,[36,12],[[30,[36,11],null,null]],null]]],\"hasEval\":false,\"upvars\":[\"readonly\",\"action\",\"mut\",\"background-image-style\",\"truncate\",\"svg-jar\",\"or\",\"if\",\"gh-count-down-characters\",\"toggle\",\"liquid-if\",\"-outlet\",\"component\"]}",
    "moduleName": "ghost-admin/templates/settings/general.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integration", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "eh120/uA",
    "block": "{\"symbols\":[\"webhook\",\"uploader\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[11,\"form\"],[4,[38,0],[[32,0],[30,[36,6],[\"save\"],null]],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n        \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n                \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[10,\"span\"],[12],[1,[30,[36,2],[\"arrow-right\"],null]],[13],[2,\"\\n                \"],[8,\"link-to\",[[24,\"data-test-link\",\"integrations-back\"]],[[\"@route\"],[\"settings.integrations\"]],[[\"default\"],[{\"statements\":[[2,\"Integrations\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[10,\"span\"],[12],[1,[30,[36,2],[\"arrow-right\"],null]],[13],[2,\"\\n                \"],[1,[32,0,[\"integration\",\"name\"]]],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n                \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save\"]],[[\"@task\",\"@class\"],[[32,0,[\"save\"]],\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n            \"],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n\\n        \"],[11,\"div\"],[24,0,\"gh-main-section\"],[4,[38,7],null,null],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Configuration\"],[13],[2,\"\\n            \"],[10,\"section\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-main-section-content padding-top-s grey\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"flex\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"flex flex-column items-start app-custom-icon-container\"],[12],[2,\"\\n                            \"],[10,\"label\"],[14,0,\"mb1\"],[12],[2,\"Icon\"],[13],[2,\"\\n                            \"],[10,\"figure\"],[14,0,\"app-custom-icon hide-child\"],[15,5,[32,0,[\"iconImageStyle\"]]],[12],[2,\"\\n                                \"],[8,\"aspect-ratio-box\",[],[[\"@class\",\"@ratio\",\"@base\"],[\"flex items-center h-100 justify-center\",\"1/1\",\"height\"]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,8],[[32,0,[\"integration\",\"iconImage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                        \"],[1,[30,[36,2],[\"integration\"],[[\"class\"],[\"w11 h11\"]]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                                \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@onComplete\"],[[32,0,[\"imageExtensions\"]],[30,[36,0],[[32,0],\"setIconImage\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,9],[[32,2,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                        \"],[10,\"div\"],[14,0,\"absolute top-0 left-0 w-100 h-100 br4 bg-black-70 flex items-center\"],[12],[2,\"\\n                                            \"],[1,[32,2,[\"progressBar\"]]],[2,\"\\n                                            \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                        \"],[11,\"button\"],[24,0,\"child app-custom-icon-uploadlabel\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"triggerIconFileDialog\"],null],[12],[2,\"\\n                                            Upload\\n                                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                    \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                                        \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"icon\"]],[[\"@name\",\"@multiple\",\"@action\",\"@accept\"],[\"iconImage\",false,[32,2,[\"setFiles\"]],[32,0,[\"imageMimeTypes\"]]]],null],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"]],\"parameters\":[2]}]]],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"flex-auto\"],[12],[2,\"\\n                            \"],[8,\"gh-validation-status-container\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"flex flex-column w-100 mr3\",[32,0,[\"integration\",\"errors\"]],[32,0,[\"integration\",\"hasValidated\"]],\"name\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"integration_name\"],[12],[2,\"Name\"],[13],[2,\"\\n                                \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"name\"]],[[\"@id\",\"@class\",\"@type\",\"@value\",\"@input\",\"@focus-out\"],[\"integration_name\",\"gh-input mt1 mb1\",\"text\",[30,[36,10],[[32,0,[\"integration\",\"name\"]]],null],[30,[36,0],[[32,0],[30,[36,11],[[32,0,[\"integration\",\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"validate\",\"name\"],[[\"target\"],[[32,0,[\"integration\"]]]]]]],null],[2,\"\\n                                \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"name\"],[24,0,\"ma0\"]],[[\"@errors\",\"@property\"],[[32,0,[\"integration\",\"errors\"]],\"name\"]],null],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n\\n                            \"],[8,\"gh-validation-status-container\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"flex flex-column w-100 mr3\",[32,0,[\"integration\",\"errors\"]],[32,0,[\"integration\",\"hasValidated\"]],\"decription\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"integration_description\"],[14,0,\"mt3\"],[12],[2,\"Description\"],[13],[2,\"\\n                                \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"description\"]],[[\"@id\",\"@class\",\"@type\",\"@value\",\"@input\",\"@focus-out\"],[\"integration_description\",\"gh-input mt1\",\"text\",[30,[36,10],[[32,0,[\"integration\",\"description\"]]],null],[30,[36,0],[[32,0],[30,[36,11],[[32,0,[\"integration\",\"description\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"validate\",\"description\"],[[\"target\"],[[32,0,[\"integration\"]]]]]]],null],[2,\"\\n                                \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"description\"],[24,0,\"ma0\"]],[[\"@errors\",\"@property\"],[[32,0,[\"integration\",\"errors\"]],\"description\"]],null],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n\\n                            \"],[10,\"table\"],[14,0,\"app-custom-api-table list\"],[14,5,\"table-layout: fixed\"],[12],[2,\"\\n                                \"],[10,\"tbody\"],[12],[2,\"\\n                                    \"],[10,\"tr\"],[12],[2,\"\\n                                        \"],[10,\"td\"],[14,0,\"data-label\"],[12],[2,\"Content API key\"],[13],[2,\"\\n                                        \"],[10,\"td\"],[14,0,\"data highlight-hover\"],[12],[2,\"\\n                                            \"],[10,\"div\"],[15,0,[31,[\"relative flex items-center \",[30,[36,8],[[32,0,[\"copyContentKey\",\"isRunning\"]],\"hide-child-instant\"],null]]]],[12],[2,\"\\n                                                \"],[10,\"span\"],[14,0,\"truncate\"],[14,\"data-test-text\",\"content-key\"],[12],[2,\"\\n                                                    \"],[1,[32,0,[\"integration\",\"contentKey\",\"secret\"]]],[2,\"\\n                                                \"],[13],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"app-api-buttons child\"],[12],[2,\"\\n                                                    \"],[11,\"button\"],[24,0,\"app-button-regenerate\"],[24,\"data-tooltip\",\"Regenerate\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"confirmRegenerateKeyModal\",[32,0,[\"integration\",\"contentKey\"]]],null],[12],[2,\"\\n                                                        \"],[1,[30,[36,2],[\"reload\"],[[\"class\"],[\"w4 h4 stroke-midgrey\"]]]],[2,\"\\n                                                    \"],[13],[2,\"\\n                                                    \"],[11,\"button\"],[24,0,\"app-button-copy\"],[24,4,\"button\"],[4,[38,0],[[32,0],[30,[36,6],[[32,0,[\"copyContentKey\"]]],null]],null],[12],[2,\"\\n\"],[6,[37,9],[[32,0,[\"copyContentKey\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                        \"],[1,[30,[36,2],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-white\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                                        Copy\\n\"]],\"parameters\":[]}]]],[2,\"                                                    \"],[13],[2,\"\\n                                                \"],[13],[2,\"\\n                                            \"],[13],[2,\"\\n\"],[6,[37,9],[[30,[36,12],[[32,0,[\"regeneratedKeyType\"]],[32,0,[\"integration\",\"contentKey\",\"type\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                                \"],[10,\"div\"],[14,0,\"green nt3 mb2\"],[12],[2,\" Content API Key was successfully regenerated \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"tr\"],[12],[2,\"\\n                                        \"],[10,\"td\"],[14,0,\"data-label\"],[12],[2,\"Admin API key\"],[13],[2,\"\\n                                        \"],[10,\"td\"],[14,0,\"data highlight-hover\"],[12],[2,\"\\n                                            \"],[10,\"div\"],[15,0,[31,[\"relative flex items-center \",[30,[36,8],[[32,0,[\"copyAdminKey\",\"isRunning\"]],\"hide-child-instant\"],null]]]],[12],[2,\"\\n                                                \"],[10,\"span\"],[14,0,\"truncate\"],[14,\"data-test-text\",\"admin-key\"],[12],[2,\"\\n                                                    \"],[1,[32,0,[\"integration\",\"adminKey\",\"secret\"]]],[2,\"\\n                                                \"],[13],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"app-api-buttons child\"],[12],[2,\"\\n                                                    \"],[11,\"button\"],[24,0,\"app-button-regenerate\"],[24,\"data-tooltip\",\"Regenerate\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"confirmRegenerateKeyModal\",[32,0,[\"integration\",\"adminKey\"]]],null],[12],[2,\"\\n                                                        \"],[1,[30,[36,2],[\"reload\"],[[\"class\"],[\"w4 h4 stroke-midgrey\"]]]],[2,\"\\n                                                    \"],[13],[2,\"\\n                                                    \"],[11,\"button\"],[24,0,\"app-button-copy\"],[24,4,\"button\"],[4,[38,0],[[32,0],[30,[36,6],[[32,0,[\"copyAdminKey\"]]],null]],null],[12],[2,\"\\n\"],[6,[37,9],[[32,0,[\"copyAdminKey\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                        \"],[1,[30,[36,2],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-white\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                                        Copy\\n\"]],\"parameters\":[]}]]],[2,\"                                                    \"],[13],[2,\"\\n                                                \"],[13],[2,\"\\n                                            \"],[13],[2,\"\\n\"],[6,[37,9],[[30,[36,12],[[32,0,[\"regeneratedKeyType\"]],[32,0,[\"integration\",\"adminKey\",\"type\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                                \"],[10,\"div\"],[14,0,\"green\"],[12],[2,\" Admin API key was successfully regenerated \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"tr\"],[12],[2,\"\\n                                        \"],[10,\"td\"],[14,0,\"data-label\"],[12],[2,\"API URL\"],[13],[2,\"\\n                                        \"],[10,\"td\"],[14,0,\"data highlight-hover truncate\"],[12],[2,\"\\n                                            \"],[10,\"div\"],[15,0,[31,[\"relative flex items-center \",[30,[36,8],[[32,0,[\"copyApiUrl\",\"isRunning\"]],\"hide-child-instant\"],null]]]],[12],[2,\"\\n                                                \"],[10,\"span\"],[14,\"data-test-text\",\"api-url\"],[12],[2,\"\\n                                                    \"],[1,[32,0,[\"apiUrl\"]]],[2,\"\\n                                                \"],[13],[2,\"\\n                                                \"],[10,\"div\"],[14,0,\"app-api-buttons child\"],[12],[2,\"\\n                                                    \"],[11,\"button\"],[24,0,\"app-button-copy\"],[24,4,\"button\"],[4,[38,0],[[32,0],[30,[36,6],[[32,0,[\"copyApiUrl\"]]],null]],null],[12],[2,\"\\n\"],[6,[37,9],[[32,0,[\"copyApiUrl\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                        \"],[1,[30,[36,2],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-white\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                                        Copy\\n\"]],\"parameters\":[]}]]],[2,\"                                                    \"],[13],[2,\"\\n                                                \"],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small\"],[12],[2,\"Webhooks\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-block p0\"],[12],[2,\"\\n            \"],[10,\"table\"],[14,0,\"gh-list small\"],[12],[2,\"\\n                \"],[10,\"thead\"],[12],[2,\"\\n                    \"],[10,\"tr\"],[14,0,\"gh-list-row header\"],[12],[2,\"\\n                        \"],[10,\"th\"],[14,0,\"gh-list-header\"],[12],[2,\"Name\"],[13],[2,\"\\n                        \"],[10,\"th\"],[14,0,\"gh-list-header\"],[12],[2,\"Event\"],[13],[2,\"\\n                        \"],[10,\"th\"],[14,0,\"gh-list-header\"],[12],[2,\"URL\"],[13],[2,\"\\n                        \"],[10,\"th\"],[14,0,\"gh-list-header\"],[12],[2,\"Last triggered\"],[13],[2,\"\\n                        \"],[10,\"th\"],[14,0,\"gh-list-header\"],[12],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"tbody\"],[12],[2,\"\\n\"],[6,[37,14],[[30,[36,13],[[30,[36,13],[[32,0,[\"filteredWebhooks\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"tr\"],[14,0,\"gh-list-row hide-child\"],[15,\"data-test-webhook-row\",[31,[[32,1,[\"id\"]]]]],[12],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"gh-list-data\"],[14,\"data-test-text\",\"name\"],[12],[1,[32,1,[\"name\"]]],[13],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"gh-list-data\"],[14,\"data-test-text\",\"event\"],[12],[1,[30,[36,3],[[32,1,[\"event\"]]],null]],[13],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"gh-list-data\"],[14,\"data-test-text\",\"targetUrl\"],[12],[1,[32,1,[\"targetUrl\"]]],[13],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"gh-list-data\"],[14,\"data-test-text\",\"last-triggered\"],[12],[1,[30,[36,4],[[32,1,[\"lastTriggeredAtUTC\"]],\"Not triggered\"],null]],[13],[2,\"\\n                            \"],[10,\"td\"],[14,0,\"w1 gh-list-data nowrap\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"child flex items-center\"],[12],[2,\"\\n                                    \"],[8,\"link-to\",[[24,\"data-test-link\",\"edit-webhook\"]],[[\"@route\",\"@models\"],[\"settings.integration.webhooks.edit\",[30,[36,5],[[32,0,[\"integration\"]],[32,1]],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[1,[30,[36,2],[\"pen\"],[[\"class\"],[\"w6 h6 fill-midgrey pa1 mr1\"]]]],[2,\"\\n                                    \"]],\"parameters\":[]}]]],[2,\"\\n                                    \"],[11,\"button\"],[24,\"data-test-button\",\"delete-webhook\"],[4,[38,0],[[32,0],\"confirmWebhookDeletion\",[32,1]],null],[12],[2,\"\\n                                        \"],[1,[30,[36,2],[\"trash\"],[[\"class\"],[\"w6 fill-red pa1\"]]]],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[2,\"                    \"],[10,\"tr\"],[14,0,\"bt b--whitegrey\"],[14,\"data-test-webhooks-blank-slate\",\"\"],[12],[2,\"\\n                        \"],[10,\"td\"],[14,\"colspan\",\"5\"],[14,0,\"pa5 pt15 pb15 tc midgrey f7\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"flex flex-column items-center\"],[12],[2,\"\\n                                \"],[10,\"p\"],[14,0,\"ma0 pa0 tc midgrey lh-title mt2\"],[12],[2,\"\\n                                    No webhooks configured\\n                                \"],[13],[2,\"\\n                                \"],[8,\"link-to\",[[24,\"data-test-link\",\"add-webhook\"]],[[\"@route\",\"@model\",\"@classNames\"],[\"settings.integration.webhooks.new\",[32,0,[\"integration\"]],\"flex items-center\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"div\"],[14,0,\"flex items-center pa2 pt1\"],[12],[2,\"\\n                                    \"],[1,[30,[36,2],[\"add\"],[[\"class\"],[\"w3 h3 fill-green-d1\"]]]],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"ml1 green\"],[12],[2,\"Add webhook\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n\"],[6,[37,9],[[32,0,[\"filteredWebhooks\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"tfoot\"],[12],[2,\"\\n                    \"],[10,\"tr\"],[14,0,\"gh-list-row new-webhook-cell\"],[12],[2,\"\\n                        \"],[10,\"td\"],[14,\"colspan\",\"5\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n                            \"],[8,\"link-to\",[[24,\"data-test-link\",\"add-webhook\"]],[[\"@route\",\"@model\",\"@classNames\"],[\"settings.integration.webhooks.new\",[32,0,[\"integration\"]],\"flex items-center\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"div\"],[14,0,\"pt1 pb1 f7\"],[12],[2,\"\\n                                \"],[1,[30,[36,2],[\"add\"],[[\"class\"],[\"w3 h3 fill-green-d1\"]]]],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"ml1 green\"],[12],[2,\"Add webhook\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-red gh-btn-icon\"],[4,[38,0],[[32,0],\"confirmIntegrationDeletion\"],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\" Delete integration \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,9],[[32,0,[\"showUnsavedChangesModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[30,[36,0],[[32,0],\"leaveScreen\"],null],[30,[36,0],[[32,0],\"toggleUnsavedChangesModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,9],[[32,0,[\"showRegenerateKeyModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"regenerate-key\",[30,[36,1],null,[[\"apiKey\",\"integration\"],[[32,0,[\"selectedApiKey\"]],[32,0,[\"integration\"]]]]],[30,[36,0],[[32,0],\"regenerateKey\"],null],[30,[36,0],[[32,0],\"cancelRegenerateKeyModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,9],[[32,0,[\"showDeleteIntegrationModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"delete-integration\",[30,[36,0],[[32,0],\"deleteIntegration\"],null],[30,[36,0],[[32,0],\"cancelIntegrationDeletion\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,9],[[32,0,[\"webhookToDelete\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"delete-webhook\",[30,[36,0],[[32,0],\"deleteWebhook\"],null],[30,[36,0],[[32,0],\"cancelWebhookDeletion\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[1,[30,[36,16],[[30,[36,15],null,null]],null]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"hash\",\"svg-jar\",\"event-name\",\"or\",\"array\",\"perform\",\"scroll-top\",\"unless\",\"if\",\"readonly\",\"mut\",\"eq\",\"-track-array\",\"each\",\"-outlet\",\"component\"]}",
    "moduleName": "ghost-admin/templates/settings/integration.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integration/webhooks/edit", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "VSOfjYwH",
    "block": "{\"symbols\":[],\"statements\":[[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"webhook-form\",[32,0,[\"webhook\"]],[30,[36,0],[[32,0],\"save\"],null],[30,[36,0],[[32,0],\"cancel\"],null],\"action wide\"]],null]],\"hasEval\":false,\"upvars\":[\"action\"]}",
    "moduleName": "ghost-admin/templates/settings/integration/webhooks/edit.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integration/webhooks/new", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "3YJav0GY",
    "block": "{\"symbols\":[],\"statements\":[[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"webhook-form\",[32,0,[\"webhook\"]],[30,[36,0],[[32,0],\"save\"],null],[30,[36,0],[[32,0],\"cancel\"],null],\"action wide\"]],null]],\"hasEval\":false,\"upvars\":[\"action\"]}",
    "moduleName": "ghost-admin/templates/settings/integration/webhooks/new.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "muFSTiua",
    "block": "{\"symbols\":[\"integration\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            Integrations\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[11,\"div\"],[24,0,\"gh-main-section\"],[4,[38,4],null,null],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"integrations-directory\"],[12],[2,\"\\n            \"],[10,\"a\"],[14,0,\"id-item\"],[14,6,\"https://ghost.org/integrations/disqus/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"id-item-logo id-disqus\"],[12],[2,\"\\n                    \"],[10,\"img\"],[14,0,\"w-100 h-100\"],[14,5,\"object-fit:contain;\"],[14,\"src\",\"assets/img/disqus.svg\"],[14,\"alt\",\"Disqus Icon\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"f8 mt1\"],[12],[2,\"Disqus\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"a\"],[14,0,\"id-item\"],[14,6,\"https://ghost.org/integrations/google/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"id-item-logo id-analytics\"],[12],[2,\"\\n                    \"],[10,\"img\"],[14,0,\"w-100 h-100\"],[14,5,\"object-fit:contain;padding:1px 0;\"],[14,\"src\",\"assets/img/google-analytics.png\"],[14,\"alt\",\"Google Analytics Icon\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"f8 mt1\"],[12],[2,\"Analytics\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"a\"],[14,0,\"id-item\"],[14,6,\"https://ghost.org/integrations/ulysses/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"id-item-logo id-ulysses\"],[12],[2,\"\\n                    \"],[10,\"img\"],[14,0,\"w-100 h-100\"],[14,5,\"object-fit:contain;\"],[14,\"src\",\"assets/img/ulysses.png\"],[14,\"alt\",\"Ulysses Icon\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"f8 mt1\"],[12],[2,\"Ulysses\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"a\"],[14,0,\"id-item\"],[14,6,\"https://ghost.org/integrations/typeform/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"id-item-logo id-typeform\"],[12],[2,\"\\n                    \"],[10,\"img\"],[14,0,\"w-100 h-100\"],[14,5,\"object-fit:contain;\"],[14,\"src\",\"assets/img/typeform.svg\"],[14,\"alt\",\"Typeform Icon\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"f8 mt1\"],[12],[2,\"Typeform\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"a\"],[14,0,\"id-item\"],[14,6,\"https://ghost.org/integrations/buffer/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"id-item-logo id-buffer\"],[12],[2,\"\\n                    \"],[10,\"img\"],[14,0,\"w-100 h-100\"],[14,5,\"object-fit:contain;padding:1px 0;\"],[14,\"src\",\"assets/img/buffer.png\"],[14,\"alt\",\"Buffer Icon\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"f8 mt1\"],[12],[2,\"Buffer\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"a\"],[14,0,\"id-item\"],[14,6,\"https://ghost.org/integrations/plausible/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"id-item-logo id-plausible\"],[12],[2,\"\\n                    \"],[10,\"img\"],[14,0,\"w-100 h-100\"],[14,5,\"object-fit:contain;padding:1px 0;\"],[14,\"src\",\"assets/img/plausible.png\"],[14,\"alt\",\"Plausible Icon\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"f8 mt1\"],[12],[2,\"Plausible\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"a\"],[14,0,\"id-item\"],[14,6,\"https://ghost.org/integrations/github/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"id-item-logo id-github\"],[12],[2,\"\\n                    \"],[10,\"img\"],[14,0,\"w-100 h-100\"],[14,5,\"object-fit:contain;\"],[14,\"src\",\"assets/img/github.svg\"],[14,\"alt\",\"GitHub Icon\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"f8 mt1\"],[12],[2,\"GitHub\"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"a\"],[14,0,\"id-item\"],[14,6,\"https://ghost.org/integrations/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"id-item-logo id-more\"],[12],[2,\"\\n\"],[2,\"                    \"],[1,[30,[36,0],[\"circle-ellipsis\"],[[\"class\"],[\"w5\"]]]],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"f8 mt1\"],[12],[2,\"More\"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small\"],[12],[2,\"Built-in integrations\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"apps-grid\"],[12],[2,\"\\n\"],[6,[37,3],[[32,0,[\"zapierDisabled\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[14,\"data-test-app\",\"zapier\"],[12],[2,\"\\n                \"],[8,\"link-to\",[[24,\"data-test-link\",\"zapier\"]],[[\"@route\"],[\"settings.integrations.zapier\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon\"],[14,5,\"background-image:url(assets/img/zapier.svg);background-size:36px;\"],[12],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                            \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"Zapier\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"apps-card-app-desc\"],[12],[2,\"Automation for your favorite apps\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-configured\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,\"data-test-app-status\",\"\"],[12],[2,\"Configure\"],[13],[2,\"\\n                            \"],[1,[30,[36,0],[\"arrow-right\"],null]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[14,\"data-test-app\",\"slack\"],[12],[2,\"\\n                \"],[8,\"link-to\",[[24,\"data-test-link\",\"slack\"]],[[\"@route\"],[\"settings.integrations.slack\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon\"],[14,5,\"background-image:url(assets/img/slackicon.png); background-size: 36px;\"],[12],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                            \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"Slack\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"apps-card-app-desc\"],[12],[2,\"A messaging app for teams\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-configured\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"settings\",\"slack\",\"isActive\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"gh-badge\"],[14,\"data-test-app-status\",\"\"],[12],[2,\"Active\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,\"data-test-app-status\",\"\"],[12],[2,\"Configure\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[1,[30,[36,0],[\"arrow-right\"],null]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[14,\"data-test-app\",\"amp\"],[12],[2,\"\\n                \"],[8,\"link-to\",[[24,\"data-test-link\",\"amp\"]],[[\"@route\"],[\"settings.integrations.amp\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon\"],[14,5,\"background-image:url(assets/img/amp.svg); background-size: 36px;\"],[12],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                            \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"AMP\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"apps-card-app-desc\"],[12],[2,\"Google Accelerated Mobile Pages\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-configured\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"settings\",\"amp\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"gh-badge\"],[14,\"data-test-app-status\",\"\"],[12],[2,\"Active\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,\"data-test-app-status\",\"\"],[12],[2,\"Configure\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[1,[30,[36,0],[\"arrow-right\"],null]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[14,\"data-test-app\",\"unsplash\"],[12],[2,\"\\n                \"],[8,\"link-to\",[[24,\"data-test-link\",\"unsplash\"]],[[\"@route\"],[\"settings.integrations.unsplash\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon id-unsplash\"],[14,5,\"background-image:url(assets/icons/unsplash.svg); background-size:30px;\"],[12],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                            \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"Unsplash\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"apps-card-app-desc\"],[12],[2,\"Beautiful, free photos\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-configured\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"settings\",\"unsplash\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"gh-badge\"],[14,\"data-test-app-status\",\"\"],[12],[2,\"Active\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,\"data-test-app-status\",\"\"],[12],[2,\"Configure\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[1,[30,[36,0],[\"arrow-right\"],null]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[14,\"data-test-app\",\"firstpromoter\"],[12],[2,\"\\n                \"],[8,\"link-to\",[[24,\"data-test-link\",\"firstpromoter\"]],[[\"@route\"],[\"settings.integrations.firstpromoter\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon id-unsplash\"],[14,5,\"background-image:url(assets/icons/firstpromoter.png); background-size:30px;\"],[12],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                            \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"FirstPromoter\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"apps-card-app-desc\"],[12],[2,\"Launch your member referral program\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-configured\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"settings\",\"firstpromoter\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,0,\"gh-badge\"],[14,\"data-test-app-status\",\"\"],[12],[2,\"Active\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[14,\"data-test-app-status\",\"\"],[12],[2,\"Configure\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[1,[30,[36,0],[\"arrow-right\"],null]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small\"],[12],[2,\"Custom integrations\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"apps-grid\"],[12],[2,\"\\n\"],[6,[37,6],[[30,[36,5],[[30,[36,5],[[32,0,[\"integrations\"]]],null]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[14,\"data-test-custom-integration\",\"\"],[12],[2,\"\\n                    \"],[8,\"link-to\",[[16,\"data-test-integration\",[32,1,[\"id\"]]]],[[\"@route\",\"@model\"],[\"settings.integration\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                                \"],[10,\"figure\"],[14,0,\"apps-card-app-icon flex items-center\"],[15,5,[30,[36,2],[[32,1]],null]],[12],[2,\"\\n\"],[6,[37,3],[[32,1,[\"iconImage\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                        \"],[1,[30,[36,0],[\"integration\"],[[\"class\"],[\"nudge-left--6 w9 stroke-darkgrey\"]]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                                    \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[14,\"data-test-text\",\"name\"],[12],[2,\"\\n                                        \"],[1,[32,1,[\"name\"]]],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"p\"],[14,0,\"apps-card-app-desc\"],[14,\"data-test-text\",\"description\"],[12],[2,\"\\n                                        \"],[1,[32,1,[\"description\"]]],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-configured\"],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"Configure\"],[13],[2,\"\\n                                    \"],[1,[30,[36,0],[\"arrow-right\"],null]],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"flex flex-column justify-center items-center mih30 miw-100 bb b--whitegrey\"],[14,\"data-test-blank\",\"custom-integrations\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"fetchIntegrations\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-loading-spinner\"],[12],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"flex flex-column items-center pa5 pt15 pb15\"],[12],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"ma0 pa0 tc midgrey lh-title mt2 mb4\"],[12],[2,\"\\n                                Create your own custom Ghost integrations with dedicated API keys & webhooks\\n                            \"],[13],[2,\"\\n                            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-green gh-btn-icon\"],[24,\"data-test-button\",\"new-integration\"]],[[\"@route\"],[\"settings.integrations.new\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"span\"],[12],[1,[30,[36,0],[\"add\"],[[\"class\"],[\"w3 h3\"]]]],[2,\" Add custom integration\"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"integrations\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[14,0,\"mt5\"],[12],[2,\"\\n            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-green gh-btn-icon\"],[24,\"data-test-button\",\"new-integration\"]],[[\"@route\"],[\"settings.integrations.new\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                \"],[10,\"span\"],[12],[1,[30,[36,0],[\"add\"],[[\"class\"],[\"w3 h3\"]]]],[2,\" Add custom integration\"],[13],[2,\"\\n            \"]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\\n\"],[13],[2,\"\\n\\n\"],[1,[30,[36,8],[[30,[36,7],null,null]],null]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"integration-icon-style\",\"unless\",\"scroll-top\",\"-track-array\",\"each\",\"-outlet\",\"component\"]}",
    "moduleName": "ghost-admin/templates/settings/integrations.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/amp-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "u68/iHSf",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings.integrations\"]],[[\"default\"],[{\"statements\":[[2,\"Integrations\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            AMP\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-content\"],[12],[2,\"\\n        \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\"]}",
    "moduleName": "ghost-admin/templates/settings/integrations/amp-loading.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/amp", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "g7hVFm+L",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,2],[\"arrow-right\"],null]],[13],[2,\"\\n            \"],[8,\"link-to\",[[24,\"data-test-link\",\"integrations-back\"]],[[\"@route\"],[\"settings.integrations\"]],[[\"default\"],[{\"statements\":[[2,\"Integrations\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,2],[\"arrow-right\"],null]],[13],[2,\"\\n            AMP\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[16,\"data-test-save-button\",true]],[[\"@task\",\"@class\"],[[32,0,[\"save\"]],\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"showLeaveSettingsModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[30,[36,0],[[32,0],\"leaveSettings\"],null],[30,[36,0],[[32,0],\"toggleLeaveSettingsModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-main-section bt app-grid\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-block app-detail-heading app-grid\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"app-cell\"],[12],[2,\"\\n                    \"],[10,\"img\"],[14,0,\"app-icon\"],[14,\"src\",\"assets/img/amp.svg\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"app-cell\"],[12],[2,\"\\n                    \"],[10,\"h3\"],[12],[2,\"AMP\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Accelerated Mobile Pages\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"AMP configuration\"],[13],[2,\"\\n            \"],[10,\"section\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-main-section-content grey\"],[12],[2,\"\\n                    \"],[10,\"div\"],[12],[2,\"\\n                        \"],[10,\"div\"],[15,0,[31,[\"gh-setting-first \",[30,[36,4],[[32,0,[\"settings\",\"amp\"]],\"gh-setting-last\"],null]]]],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-content\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Enable AMP\"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-setting-desc mb0\"],[12],[2,\"Enable \"],[10,\"a\"],[14,6,\"https://ampproject.org\"],[14,\"target\",\"_blank\"],[12],[2,\"Google Accelerated Mobile Pages\"],[13],[2,\" for your posts\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-action\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"for-checkbox\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"amp\"],[14,0,\"checkbox\"],[12],[2,\"\\n                                        \"],[10,\"input\"],[15,\"checked\",[32,0,[\"settings\",\"amp\"]]],[14,1,\"amp\"],[14,3,\"amp\"],[15,\"onclick\",[30,[36,0],[[32,0],\"update\"],[[\"value\"],[\"target.checked\"]]]],[14,\"data-test-amp-checkbox\",\"\"],[14,4,\"checkbox\"],[12],[13],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"],[6,[37,5],[[32,0,[\"settings\",\"amp\"]]],[[\"class\"],[\"\"]],[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-setting-last gh-setting-amp-liquid\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-content gh-setting-content--no-action\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Google Analytics Tracking ID\"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-setting-desc\"],[12],[2,\"Tracks AMP traffic in Google Analytics, find your ID \"],[10,\"a\"],[14,6,\"https://ghost.org/help/how-to-find-your-google-analytics-tracking-id/\"],[12],[2,\"here\"],[13],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                                    \"],[8,\"gh-form-group\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"no-margin\",[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"ampGtagId\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[8,\"gh-text-input\",[],[[\"@placeholder\",\"@name\",\"@value\",\"@keyEvents\"],[\"UA-XXXXXXX-X\",\"amp_gtag_id\",[32,0,[\"settings\",\"ampGtagId\"]],[30,[36,1],null,[[\"Enter\"],[[30,[36,0],[[32,0],\"save\"],null]]]]]],null],[2,\"\\n                                        \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"ampGtagId\"]],null],[2,\"\\n                                    \"]],\"parameters\":[]}]]],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"hash\",\"svg-jar\",\"if\",\"unless\",\"liquid-if\"]}",
    "moduleName": "ghost-admin/templates/settings/integrations/amp.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/firstpromoter", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Xfo1QbDS",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,2],[\"arrow-right\"],null]],[13],[2,\"\\n            \"],[8,\"link-to\",[[24,\"data-test-link\",\"integrations-back\"]],[[\"@route\"],[\"settings.integrations\"]],[[\"default\"],[{\"statements\":[[2,\"Integrations\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,2],[\"arrow-right\"],null]],[13],[2,\"\\n            FirstPromoter\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[16,\"data-test-save-button\",true]],[[\"@task\",\"@class\"],[[32,0,[\"save\"]],\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"showLeaveSettingsModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[30,[36,0],[[32,0],\"leaveSettings\"],null],[30,[36,0],[[32,0],\"toggleLeaveSettingsModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-main-section bt app-grid\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-block app-detail-heading app-grid\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"app-cell\"],[12],[2,\"\\n                    \"],[10,\"img\"],[14,0,\"app-icon\"],[14,\"src\",\"assets/img/firstpromoter.png\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"app-cell\"],[12],[2,\"\\n                    \"],[10,\"h3\"],[12],[2,\"FirstPromoter\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Launch your own member referral program\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"FirstPromoter configuration\"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-content grey\"],[12],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"div\"],[15,0,[31,[\"gh-setting-first \",[30,[36,4],[[32,0,[\"settings\",\"firstpromoter\"]],\"gh-setting-last\"],null]]]],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-content\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Enable FirstPromoter\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-desc mb0\"],[12],[2,\"Enable \"],[10,\"a\"],[14,6,\"https://firstpromoter.com/?fpr=ghost&fp_sid=admin\"],[14,\"target\",\"_blank\"],[12],[2,\"FirstPromoter\"],[13],[2,\" for tracking referrals\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-action\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"for-checkbox\"],[12],[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"firstpromoter\"],[14,0,\"checkbox\"],[12],[2,\"\\n                                    \"],[10,\"input\"],[15,\"checked\",[32,0,[\"settings\",\"firstpromoter\"]]],[14,1,\"firstpromoter\"],[14,3,\"firstpromoter\"],[15,\"onclick\",[30,[36,0],[[32,0],\"update\"],[[\"value\"],[\"target.checked\"]]]],[14,\"data-test-firstpromoter-checkbox\",\"\"],[14,4,\"checkbox\"],[12],[13],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"],[6,[37,5],[[32,0,[\"settings\",\"firstpromoter\"]]],[[\"class\"],[\"\"]],[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-setting-last gh-setting-firstpromoter-liquid\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-content gh-setting-content--no-action\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"FirstPromoter Account ID\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-desc\"],[12],[2,\" Affiliate and referral tracking, find your ID \"],[10,\"a\"],[14,6,\"https://ghost.org/help/firstpromoter-id/\"],[12],[2,\"here\"],[13],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"no-margin\",[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"firstpromoterId\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[8,\"gh-text-input\",[],[[\"@placeholder\",\"@name\",\"@value\",\"@keyEvents\"],[\"XXXXXXXX\",\"firstpromoter_id\",[32,0,[\"settings\",\"firstpromoterId\"]],[30,[36,1],null,[[\"Enter\"],[[30,[36,0],[[32,0],\"save\"],null]]]]]],null],[2,\"\\n                                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],\"firstpromoterId\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"hash\",\"svg-jar\",\"if\",\"unless\",\"liquid-if\"]}",
    "moduleName": "ghost-admin/templates/settings/integrations/firstpromoter.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/slack-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "UAQhgJj9",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings.integrations\"]],[[\"default\"],[{\"statements\":[[2,\"Integrations\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            Slack\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-content\"],[12],[2,\"\\n        \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\"]}",
    "moduleName": "ghost-admin/templates/settings/integrations/slack-loading.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/slack", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "MD6qLbDz",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,1],[\"arrow-right\"],null]],[13],[2,\"\\n            \"],[8,\"link-to\",[[24,\"data-test-link\",\"integrations-back\"]],[[\"@route\"],[\"settings.integrations\"]],[[\"default\"],[{\"statements\":[[2,\"Integrations\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,1],[\"arrow-right\"],null]],[13],[2,\"\\n            Slack\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[16,\"data-test-save-button\",true]],[[\"@task\",\"@class\"],[[32,0,[\"save\"]],\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"showLeaveSettingsModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[30,[36,0],[[32,0],\"leaveSettings\"],null],[30,[36,0],[[32,0],\"toggleLeaveSettingsModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-main-section bt app-grid\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-block app-detail-heading app-grid\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"app-cell\"],[12],[2,\"\\n                    \"],[10,\"img\"],[14,0,\"app-icon\"],[14,\"src\",\"assets/img/slackicon.png\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"app-cell\"],[12],[2,\"\\n                    \"],[10,\"h3\"],[12],[2,\"Slack\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"A messaging app for teams\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"section\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Slack configuration\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-main-section-content grey\"],[12],[2,\"\\n                    \"],[11,\"form\"],[24,0,\"app-config-form\"],[24,1,\"slack-settings\"],[24,\"novalidate\",\"novalidate\"],[4,[38,0],[[32,0],\"save\"],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n\\n                        \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-first\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-setting-content gh-setting-content--no-action\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Webhook URL\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-setting-desc\"],[12],[2,\"Automatically send newly published posts to a channel in Slack or any Slack-compatible service like Discord or Mattermost.\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"slackSettings\",\"errors\"]],[32,0,[\"slackSettings\",\"hasValidated\"]],\"url\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                            \"],[8,\"gh-text-input\",[[16,\"data-test-slack-url-input\",true]],[[\"@placeholder\",\"@name\",\"@value\",\"@input\",\"@keyEvents\",\"@focus-out\"],[\"https://hooks.slack.com/services/...\",\"slack[url]\",[30,[36,3],[[32,0,[\"slackSettings\",\"url\"]]],null],[30,[36,0],[[32,0],\"updateURL\"],[[\"value\"],[\"target.value\"]]],[30,[36,4],null,[[\"Enter\"],[[30,[36,0],[[32,0],\"save\"],null]]]],[30,[36,0],[[32,0],\"triggerDirtyState\"],null]]],null],[2,\"\\n\"],[6,[37,5],[[32,0,[\"slackSettings\",\"errors\",\"url\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                \"],[10,\"p\"],[12],[2,\"Set up a new incoming webhook \"],[10,\"a\"],[14,6,\"https://my.slack.com/apps/new/A0F7XDUAZ-incoming-webhooks\"],[14,\"target\",\"_blank\"],[12],[2,\"here\"],[13],[2,\", and grab the URL.\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                                \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"slack-url\"]],[[\"@errors\",\"@property\"],[[32,0,[\"slackSettings\",\"errors\"]],\"url\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                        \"]],\"parameters\":[]}]]],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-last\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-setting-content gh-setting-content--no-action\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Username\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-setting-desc\"],[12],[2,\"The username to display messages from\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"slackSettings\",\"errors\"]],[32,0,[\"slackSettings\",\"hasValidated\"]],\"username\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                            \"],[8,\"gh-text-input\",[[16,\"data-test-slack-username-input\",true]],[[\"@placeholder\",\"@name\",\"@value\",\"@input\",\"@keyEvents\",\"@focus-out\"],[\"Ghost\",\"slack[username]\",[30,[36,3],[[32,0,[\"slackSettings\",\"username\"]]],null],[30,[36,0],[[32,0],\"updateUsername\"],[[\"value\"],[\"target.value\"]]],[30,[36,4],null,[[\"Enter\"],[[30,[36,0],[[32,0],\"save\"],null]]]],[30,[36,0],[[32,0],\"triggerDirtyState\"],null]]],null],[2,\"\\n\"],[6,[37,2],[[32,0,[\"slackSettings\",\"errors\",\"username\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                                \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"slackSettings\",\"errors\"]],\"username\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                        \"]],\"parameters\":[]}]]],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[8,\"gh-task-button\",[[24,\"data-test-send-notification-button\",\"true\"]],[[\"@buttonText\",\"@task\",\"@successText\",\"@class\",\"@disabled\"],[\"Send test notification\",[32,0,[\"sendTestNotification\"]],\"Sent\",\"gh-btn gh-btn-icon\",[32,0,[\"testNotificationDisabled\"]]]],null],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"if\",\"readonly\",\"hash\",\"unless\"]}",
    "moduleName": "ghost-admin/templates/settings/integrations/slack.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/unsplash-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Xdrshv/q",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings.integrations\"]],[[\"default\"],[{\"statements\":[[2,\"Integrations\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            Unsplash\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-content\"],[12],[2,\"\\n        \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13]],\"hasEval\":false,\"upvars\":[\"svg-jar\"]}",
    "moduleName": "ghost-admin/templates/settings/integrations/unsplash-loading.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/unsplash", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "QBLbZ2Tk",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,1],[\"arrow-right\"],null]],[13],[2,\"\\n            \"],[8,\"link-to\",[[24,\"data-test-link\",\"integrations-back\"]],[[\"@route\"],[\"settings.integrations\"]],[[\"default\"],[{\"statements\":[[2,\"Integrations\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,1],[\"arrow-right\"],null]],[13],[2,\"\\n            Unsplash\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[16,\"data-test-save-button\",true]],[[\"@task\",\"@class\"],[[32,0,[\"save\"]],\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"showLeaveSettingsModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[30,[36,0],[[32,0],\"leaveSettings\"],null],[30,[36,0],[[32,0],\"toggleLeaveSettingsModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-main-section bt app-grid\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-block app-detail-heading app-grid\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"app-cell\"],[12],[2,\"\\n                    \"],[10,\"img\"],[14,0,\"app-icon pa2 id-unsplash\"],[14,\"src\",\"assets/icons/unsplash.svg\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"app-cell\"],[12],[2,\"\\n                    \"],[10,\"h3\"],[12],[2,\"Unsplash\"],[13],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Beautiful, free photos\"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"section\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Unsplash configuration\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-main-section-content grey\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-setting-first gh-setting-last\"],[14,1,\"unsplash-toggle\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-content\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-title\"],[12],[2,\"Enable Unsplash\"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-setting-desc mb0\"],[12],[2,\"Enable \"],[10,\"a\"],[14,6,\"https://unsplash.com\"],[14,\"target\",\"_blank\"],[12],[2,\"Unsplash\"],[13],[2,\" image integration for your posts\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-action\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"form-group right gh-setting-unsplash-checkbox\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"for-checkbox\"],[12],[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"unsplash\"],[14,0,\"checkbox\"],[12],[2,\"\\n                                            \"],[10,\"input\"],[15,\"checked\",[32,0,[\"settings\",\"unsplash\"]]],[14,1,\"unsplash\"],[14,3,\"unsplash\"],[15,\"onclick\",[30,[36,0],[[32,0],\"update\"],[[\"value\"],[\"target.checked\"]]]],[14,\"data-test-unsplash-checkbox\",\"\"],[14,4,\"checkbox\"],[12],[13],[2,\"\\n                                            \"],[10,\"span\"],[14,0,\"input-toggle-component\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/templates/settings/integrations/unsplash.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/zapier", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "EUSkxsWz",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,2],[\"arrow-right\"],null]],[13],[2,\"\\n            \"],[8,\"link-to\",[[24,\"data-test-link\",\"integrations-back\"]],[[\"@route\"],[\"settings.integrations\"]],[[\"default\"],[{\"statements\":[[2,\"Integrations\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,2],[\"arrow-right\"],null]],[13],[2,\"\\n            Zapier\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n\\n        \"],[10,\"section\"],[14,0,\"gh-main-section no-heading\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-block overflow-hidden\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-main-section-content app-detail-heading app-grid\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"app-cell\"],[12],[2,\"\\n                        \"],[10,\"img\"],[14,0,\"app-icon\"],[14,\"src\",\"assets/img/zapier.svg\"],[12],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"app-cell overflow-hidden\"],[12],[2,\"\\n                        \"],[10,\"h3\"],[12],[2,\"Zapier\"],[13],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"Automation for your favorite apps\"],[13],[2,\"\\n\\n                        \"],[10,\"div\"],[14,0,\"gh-zapier-data-container\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-zapier-data\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"data-label\"],[12],[2,\"Admin API key\"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"data highlight-hover\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[15,0,[31,[\"relative flex items-center \",[30,[36,3],[[32,0,[\"copyAdminKey\",\"isRunning\"]],\"hide-child-instant\"],null]]]],[12],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"admin-key\"],[14,\"data-test-text\",\"admin-key\"],[12],[2,\"\\n                                            \"],[1,[32,0,[\"integration\",\"adminKey\",\"secret\"]]],[2,\"\\n                                        \"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"app-api-buttons child\"],[12],[2,\"\\n                                            \"],[11,\"button\"],[24,0,\"app-button-regenerate\"],[24,4,\"button\"],[4,[38,1],[[32,0],\"confirmRegenerateKeyModal\",[32,0,[\"integration\",\"adminKey\"]]],null],[12],[2,\"\\n                                                \"],[1,[30,[36,2],[\"reload\"],[[\"class\"],[\"w4 h4 stroke-midgrey\"]]]],[2,\"\\n                                            \"],[13],[2,\"\\n                                            \"],[11,\"button\"],[24,0,\"app-button-copy\"],[24,4,\"button\"],[4,[38,1],[[32,0],[30,[36,4],[[32,0,[\"copyAdminKey\"]]],null]],null],[12],[2,\"\\n\"],[6,[37,5],[[32,0,[\"copyAdminKey\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                \"],[1,[30,[36,2],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-white\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                                Copy\\n\"]],\"parameters\":[]}]]],[2,\"                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n\"],[6,[37,5],[[30,[36,6],[[32,0,[\"regeneratedKeyType\"]],[32,0,[\"integration\",\"adminKey\",\"type\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                        \"],[10,\"div\"],[14,0,\"green\"],[12],[2,\" Admin API Key was successfully regenerated \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-zapier-data\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"data-label\"],[12],[2,\"API URL\"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"data highlight-hover\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[15,0,[31,[\"relative flex items-center \",[30,[36,3],[[32,0,[\"copyApiUrl\",\"isRunning\"]],\"hide-child-instant\"],null]]]],[12],[2,\"\\n                                        \"],[10,\"span\"],[14,0,\"api-url\"],[14,\"data-test-text\",\"api-url\"],[12],[2,\"\\n                                            \"],[1,[32,0,[\"apiUrl\"]]],[2,\"\\n                                        \"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"app-api-buttons child\"],[12],[2,\"\\n                                            \"],[11,\"button\"],[24,0,\"app-button-copy\"],[24,4,\"button\"],[4,[38,1],[[32,0],[30,[36,4],[[32,0,[\"copyApiUrl\"]]],null]],null],[12],[2,\"\\n\"],[6,[37,5],[[32,0,[\"copyApiUrl\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                    \"],[1,[30,[36,2],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                                    Copy\\n\"]],\"parameters\":[]}]]],[2,\"                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"section\"],[14,1,\"zapier-toggle\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header large bn\"],[12],[2,\"Zapier templates\"],[13],[2,\"\\n            \"],[10,\"p\"],[14,0,\"gh-main-section-description\"],[12],[2,\"Explore pre-built templates for common automation tasks\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-content gh-setting-content--no-action\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"apps-grid gh-settings-zapier-templates\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[12],[2,\"\\n                            \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-orb\"],[14,5,\"background-image:url(assets/img/logos/orb-black-1.png);background-size:32px;\"],[12],[13],[2,\"\\n                                        \"],[1,[30,[36,2],[\"arrow-right\"],[[\"class\"],[\"fill-midgrey w4 ml2\"]]]],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon\"],[14,5,\"background-image:url(assets/img/twitter.svg);background-size:32px;\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                                        \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"Share new posts to Twitter\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                                    \"],[10,\"a\"],[14,6,\"https://zapier.com/webintent/create-zap?template=50909\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[14,0,\"gh-btn gh-btn-outline zapier-template-link\"],[12],[10,\"span\"],[12],[2,\"Use this Zap\"],[13],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[12],[2,\"\\n                            \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-orb\"],[14,5,\"background-image:url(assets/img/logos/orb-black-2.png);background-size:32px;\"],[12],[13],[2,\"\\n                                        \"],[1,[30,[36,2],[\"arrow-right\"],[[\"class\"],[\"fill-midgrey w4 ml2\"]]]],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon\"],[14,5,\"background-image:url(assets/img/slackicon.png);background-size:30px;\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                                        \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"Share scheduled posts with your team in Slack\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                                    \"],[10,\"a\"],[14,6,\"https://zapier.com/webintent/create-zap?template=359499\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[14,0,\"gh-btn gh-btn-outline zapier-template-link\"],[12],[10,\"span\"],[12],[2,\"Use this Zap\"],[13],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[12],[2,\"\\n                            \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-orb\"],[14,5,\"background-image:url(assets/img/logos/orb-black-3.png);background-size:32px;\"],[12],[13],[2,\"\\n                                        \"],[1,[30,[36,2],[\"arrow-right\"],[[\"class\"],[\"fill-midgrey w4 ml2\"]]]],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon\"],[14,5,\"background-image:url(assets/img/patreon.svg);background-size:28px;\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                                        \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"Connect Patreon to your Ghost membership site\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                                    \"],[10,\"a\"],[14,6,\"https://zapier.com/webintent/create-zap?template=75801\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[14,0,\"gh-btn gh-btn-outline zapier-template-link\"],[12],[10,\"span\"],[12],[2,\"Use this Zap\"],[13],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[12],[2,\"\\n                            \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-orb\"],[14,5,\"background-image:url(assets/img/logos/orb-black-4.png);background-size:32px;\"],[12],[13],[2,\"\\n                                        \"],[1,[30,[36,2],[\"arrow-right\"],[[\"class\"],[\"fill-midgrey w4 ml2\"]]]],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon\"],[14,5,\"background-image:url(assets/img/zero-bounce.png);background-size:30px;\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                                        \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"Protect email delivery with email verification\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                                    \"],[10,\"a\"],[14,6,\"https://zapier.com/webintent/create-zap?template=359415\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[14,0,\"gh-btn gh-btn-outline zapier-template-link\"],[12],[10,\"span\"],[12],[2,\"Use this Zap\"],[13],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[12],[2,\"\\n                            \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-orb\"],[14,5,\"background-image:url(assets/img/logos/orb-black-5.png);background-size:32px;\"],[12],[13],[2,\"\\n                                        \"],[1,[30,[36,2],[\"arrow-right\"],[[\"class\"],[\"fill-midgrey w4 ml2\"]]]],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon\"],[14,5,\"background-image:url(assets/img/paypal.svg);background-size:26px;\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                                        \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"Add members for successful sales in PayPal\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                                    \"],[10,\"a\"],[14,6,\"https://zapier.com/webintent/create-zap?template=184423\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[14,0,\"gh-btn gh-btn-outline zapier-template-link\"],[12],[10,\"span\"],[12],[2,\"Use this Zap\"],[13],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[12],[2,\"\\n                            \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-orb rot-1\"],[14,5,\"background-image:url(assets/img/logos/orb-black-3.png);background-size:32px;\"],[12],[13],[2,\"\\n                                        \"],[1,[30,[36,2],[\"arrow-right\"],[[\"class\"],[\"fill-midgrey w4 ml2\"]]]],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon\"],[14,5,\"background-image:url(assets/img/paypal.svg);background-size:26px;\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                                        \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"Unsubscribe members who cancel a subscription in PayPal\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                                    \"],[10,\"a\"],[14,6,\"https://zapier.com/webintent/create-zap?template=359348\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[14,0,\"gh-btn gh-btn-outline zapier-template-link\"],[12],[10,\"span\"],[12],[2,\"Use this Zap\"],[13],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[12],[2,\"\\n                            \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-orb rot-2\"],[14,5,\"background-image:url(assets/img/logos/orb-black-1.png);background-size:32px;\"],[12],[13],[2,\"\\n                                        \"],[1,[30,[36,2],[\"arrow-right\"],[[\"class\"],[\"fill-midgrey w4 ml2\"]]]],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon\"],[14,5,\"background-image:url(assets/img/google-docs.svg);background-size:22px;\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                                        \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"Send new post drafts from Google Docs to Ghost\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                                    \"],[10,\"a\"],[14,6,\"https://zapier.com/webintent/create-zap?template=50924\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[14,0,\"gh-btn gh-btn-outline zapier-template-link\"],[12],[10,\"span\"],[12],[2,\"Use this Zap\"],[13],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[12],[2,\"\\n                            \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-orb rot-3\"],[14,5,\"background-image:url(assets/img/logos/orb-black-4.png);background-size:32px;\"],[12],[13],[2,\"\\n                                        \"],[1,[30,[36,2],[\"arrow-right\"],[[\"class\"],[\"fill-midgrey w4 ml2\"]]]],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon id-typeform\"],[14,5,\"background-image:url(assets/img/typeform.svg);background-size:32px;\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                                        \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"Survey new members using Typeform\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                                    \"],[10,\"a\"],[14,6,\"https://zapier.com/webintent/create-zap?template=359407\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[14,0,\"gh-btn gh-btn-outline zapier-template-link\"],[12],[10,\"span\"],[12],[2,\"Use this Zap\"],[13],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[12],[2,\"\\n                            \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"flex items-center\"],[12],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-orb rot-3\"],[14,5,\"background-image:url(assets/img/logos/orb-black-1.png);background-size:32px;\"],[12],[13],[2,\"\\n                                        \"],[1,[30,[36,2],[\"arrow-right\"],[[\"class\"],[\"fill-midgrey w4 ml2\"]]]],[2,\"\\n                                        \"],[10,\"figure\"],[14,0,\"apps-card-app-icon\"],[14,5,\"background-image:url(assets/img/mailchimp.svg);background-size:32px;\"],[12],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                                        \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[12],[2,\"Sync email subscribers in Ghost + Mailchimp\"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"gh-card-right\"],[12],[2,\"\\n                                    \"],[10,\"a\"],[14,6,\"https://zapier.com/webintent/create-zap?template=359342\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[14,0,\"gh-btn gh-btn-outline zapier-template-link\"],[12],[10,\"span\"],[12],[2,\"Use this Zap\"],[13],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\\n                    \"],[10,\"div\"],[14,0,\"zapier-footer\"],[12],[2,\"\\n                        \"],[10,\"a\"],[14,6,\"https://zapier.com/apps/ghost/integrations?utm_medium=partner_api&utm_source=widget&utm_campaign=Widget\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[12],[10,\"span\"],[12],[2,\"See more Ghost integrations powered by\"],[13],[2,\" \"],[10,\"figure\"],[14,5,\"background-image:url(assets/img/zapier-logo.svg); background-size: 42px;\"],[12],[13],[13],[2,\"\\n                    \"],[13],[2,\"\\n\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"showRegenerateKeyModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"regenerate-key\",[30,[36,0],null,[[\"apiKey\",\"integration\",\"internalIntegration\"],[[32,0,[\"selectedApiKey\"]],[32,0,[\"integration\"]],\"zapier\"]]],[30,[36,1],[[32,0],\"regenerateKey\"],null],[30,[36,1],[[32,0],\"cancelRegenerateKeyModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"hash\",\"action\",\"svg-jar\",\"unless\",\"perform\",\"if\",\"eq\"]}",
    "moduleName": "ghost-admin/templates/settings/integrations/zapier.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/labs-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "m17KP1+n",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"gh-canvas-header\"],[12],[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            Labs\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-content\"],[12],[2,\"\\n        \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\"]}",
    "moduleName": "ghost-admin/templates/settings/labs-loading.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/labs", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "i+Bw/GYr",
    "block": "{\"symbols\":[\"uploader\",\"error\",\"uploader\",\"error\",\"error\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,1],[\"arrow-right\"],null]],[13],[2,\"\\n            Labs\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container settings-debug\"],[12],[2,\"\\n        \"],[10,\"p\"],[14,0,\"gh-box gh-box-tip\"],[12],[1,[30,[36,1],[\"idea\"],null]],[2,\"This is a testing ground for new or experimental features. They may change, break or inexplicably disappear at any time.\"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Migration options\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Import content\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Import posts from another Ghost installation\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"form\"],[14,1,\"settings-import\"],[14,\"enctype\",\"multipart/form-data\"],[12],[2,\"\\n                            \"],[8,\"gh-file-upload\",[[24,\"data-test-file-input\",\"import\"]],[[\"@id\",\"@classNames\",\"@uploadButtonText\",\"@onUpload\",\"@acceptEncoding\"],[\"importfile\",\"flex\",[32,0,[\"uploadButtonText\"]],[30,[36,0],[[32,0],\"onUpload\"],null],[32,0,[\"importMimeType\"]]]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"],[6,[37,4],[[32,0,[\"importErrors\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[15,0,[31,[\"gh-import-errors \",[30,[36,4],[[32,0,[\"importSuccessful\"]],\"gh-import-errors-alert\"],null]]]],[14,\"data-test-import-errors\",\"\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-import-errors-title\"],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"importSuccessful\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    Import successful with warnings\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    Import failed\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n\\n\"],[6,[37,7],[[30,[36,6],[[30,[36,6],[[32,0,[\"importErrors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"div\"],[14,0,\"gh-import-error\"],[14,\"data-test-import-error\",\"\"],[12],[2,\"\\n                                    \"],[10,\"p\"],[14,0,\"gh-import-error-message\"],[14,\"data-test-import-error-message\",\"\"],[12],[2,\"\\n                                        \"],[6,[37,4],[[32,5,[\"help\"]]],null,[[\"default\"],[{\"statements\":[[1,[32,5,[\"help\"]]],[2,\": \"]],\"parameters\":[]}]]],[1,[32,5,[\"message\"]]],[2,\"\\n                                    \"],[13],[2,\"\\n\\n\"],[6,[37,4],[[32,5,[\"context\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                        \"],[10,\"div\"],[14,0,\"gh-import-error-entry\"],[14,\"data-test-import-error-context\",\"\"],[12],[2,\"\\n                                            \"],[10,\"pre\"],[12],[1,[32,5,[\"context\"]]],[13],[2,\"\\n                                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[13],[2,\"\\n\"]],\"parameters\":[5]}]]],[2,\"                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Export your content\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Download all of your posts and settings in a single, glorious JSON file\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"downloadFile\",\"db\"],null],[12],[10,\"span\"],[12],[2,\"Export\"],[13],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Delete all content\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Permanently delete all posts and tags from the database, a hard reset\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-red js-delete\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"toggleDeleteAllModal\"],null],[12],[10,\"span\"],[12],[2,\"Delete\"],[13],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Beta features\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Tiers\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"\\n                                Add additional tiers to your paid memberships (e.g. Bronze, Silver, Gold). \"],[10,\"a\"],[14,6,\"http://ghost.org/help/tiers\"],[14,\"target\",\"_blank\"],[12],[2,\"Learn more here\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"],[6,[37,4],[[30,[36,8],[\"multipleProducts\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[10,\"span\"],[14,0,\"gh-badge\"],[12],[2,\"Enabled\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                            \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"toggleEnableTiersModal\"],null],[12],[10,\"span\"],[12],[2,\"Enable\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@uploadUrl\",\"@paramName\",\"@onUploadSuccess\",\"@onUploadFailure\"],[[32,0,[\"redirectsFileExtensions\"]],\"/redirects/upload/\",\"redirects\",[30,[36,9],[[32,0,[\"redirectUploadResult\"]],true],null],[30,[36,9],[[32,0,[\"redirectUploadResult\"]],false],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Redirects\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Configure redirects for old or moved content, more info in \"],[10,\"a\"],[14,6,\"https://ghost.org/docs/tutorials/implementing-redirects/\"],[14,\"target\",\"_blank\"],[12],[2,\"the docs\"],[13],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-action flex flex-column items-end\"],[12],[2,\"\\n\"],[6,[37,4],[[32,3,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[1,[32,3,[\"progressBar\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"button\"],[15,0,[31,[\"gh-btn gh-btn-icon \",[30,[36,4],[[32,0,[\"redirectSuccess\"]],\"gh-btn-green\"],null],\" \",[30,[36,4],[[32,0,[\"redirectFailure\"]],\"gh-btn-red\"],null]]]],[15,\"onclick\",[30,[36,0],[[32,0],\"triggerFileDialog\"],null]],[14,\"data-test-button\",\"upload-redirects\"],[14,4,\"button\"],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"redirectSuccess\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                            \"],[1,[30,[36,1],[\"check-circle\"],null]],[2,\" Uploaded\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,4],[[32,0,[\"redirectFailure\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                            \"],[1,[30,[36,1],[\"retry\"],null]],[2,\" Upload Failed\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                            Upload redirects YAML/JSON\\n                                        \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[12],[11,\"a\"],[24,6,\"#\"],[24,\"data-test-link\",\"download-redirects\"],[4,[38,0],[[32,0],\"downloadFile\",\"redirects/download\"],null],[12],[2,\"Download current redirects\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,7],[[30,[36,6],[[30,[36,6],[[32,3,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"div\"],[14,0,\"gh-setting-error\"],[14,\"data-test-error\",\"redirects\"],[12],[1,[30,[36,5],[[32,4,[\"context\"]],[32,4,[\"message\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[4]}]]],[2,\"\\n                            \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                                \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"redirects\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[32,3,[\"setFiles\"]],[32,0,[\"redirectsFileMimeTypes\"]]]],null],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"]],\"parameters\":[3]}]]],[2,\"\\n                \"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[8,\"gh-uploader\",[],[[\"@extensions\",\"@uploadUrl\",\"@paramName\",\"@onUploadSuccess\",\"@onUploadFailure\"],[[32,0,[\"yamlExtension\"]],\"/settings/routes/yaml/\",\"routes\",[30,[36,9],[[32,0,[\"routesUploadResult\"]],true],null],[30,[36,9],[[32,0,[\"routesUploadResult\"]],false],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Routes\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Configure dynamic routing by modifying the routes.yaml file\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-action flex flex-column items-end\"],[12],[2,\"\\n\"],[6,[37,4],[[32,1,[\"isUploading\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[1,[32,1,[\"progressBar\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"button\"],[15,0,[31,[\"gh-btn gh-btn-icon \",[30,[36,4],[[32,0,[\"routesSuccess\"]],\"gh-btn-green\"],null],\" \",[30,[36,4],[[32,0,[\"routesFailure\"]],\"gh-btn-red\"],null]]]],[15,\"onclick\",[30,[36,0],[[32,0],\"triggerFileDialog\"],null]],[14,\"data-test-button\",\"upload-routes\"],[14,4,\"button\"],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"routesSuccess\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                            \"],[1,[30,[36,1],[\"check-circle\"],null]],[2,\" Uploaded\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,4],[[32,0,[\"routesFailure\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                            \"],[1,[30,[36,1],[\"retry\"],null]],[2,\" Upload Failed\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                            Upload routes YAML\\n                                        \"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[12],[11,\"a\"],[24,6,\"#\"],[24,\"data-test-link\",\"download-routes\"],[4,[38,0],[[32,0],\"downloadFile\",\"settings/routes/yaml\"],null],[12],[2,\"Download current routes.yaml\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,7],[[30,[36,6],[[30,[36,6],[[32,1,[\"errors\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"div\"],[14,0,\"gh-setting-error\"],[14,\"data-test-error\",\"routes\"],[12],[1,[30,[36,5],[[32,2,[\"context\"]],[32,2,[\"message\"]]],null]],[13],[2,\"\\n\"]],\"parameters\":[2]}]]],[2,\"\\n                            \"],[10,\"div\"],[14,5,\"display:none\"],[12],[2,\"\\n                                \"],[8,\"gh-file-input\",[[24,\"data-test-file-input\",\"routes\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[32,1,[\"setFiles\"]],[32,0,[\"yamlAccept\"]]]],null],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"]],\"parameters\":[1]}]]],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n\\n\"],[6,[37,4],[[30,[36,10],null,null]],null,[[\"default\"],[{\"statements\":[[2,\"         \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Alpha Features\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Google OAuth for staff users\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"\\n                                Allow people to sign into Ghost Admin using Google SSO,\\n                                \"],[10,\"a\"],[14,6,\"https://ghost.org/docs/tutorials/setting-up-oauth/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[12],[2,\"docs here\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"for-switch\"],[12],[2,\"\\n                            \"],[8,\"gh-feature-flag\",[],[[\"@flag\"],[\"oauthLogin\"]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"feature\",\"oauthLogin\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"gh-setting-content-extended gh-labs-sso-settings pt2 pb4\"],[12],[2,\"\\n                                \"],[10,\"a\"],[14,6,\"https://console.developers.google.com/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener\"],[14,0,\"gh-btn gh-btn-white mb4\"],[12],[10,\"span\"],[12],[1,[30,[36,1],[\"google-favicon\"],null]],[2,\"Configure Google OAuth\"],[13],[13],[2,\"\\n                                \"],[8,\"gh-form-group\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"no-margin pt2\",[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"password\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                                        \"],[10,\"label\"],[14,\"for\",\"aouth-client-id\"],[12],[2,\"Google OAuth Client ID\"],[13],[2,\"\\n                                        \"],[8,\"gh-text-input\",[[24,1,\"oauth-client-id\"]],[[\"@value\",\"@name\",\"@focus-out\",\"@input\"],[[30,[36,2],[[32,0,[\"settings\",\"oauthClientId\"]]],null],\"oauth-client-id\",[30,[36,0],[[32,0],\"saveOAuthSettings\"],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"settings\",\"oauthClientId\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                                    \"],[13],[2,\"\\n\\n                                    \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                                        \"],[10,\"label\"],[14,\"for\",\"oauth-client-secret\"],[12],[2,\"Google OAuth Client Secret\"],[13],[2,\"\\n                                        \"],[8,\"gh-text-input\",[[24,1,\"oauth-client-secret\"]],[[\"@value\",\"@name\",\"@focus-out\",\"@input\"],[[30,[36,2],[[32,0,[\"settings\",\"oauthClientSecret\"]]],null],\"oauth-client-secret\",[30,[36,0],[[32,0],\"saveOAuthSettings\"],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"settings\",\"oauthClientSecret\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Members Activity\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"\\n                               Enable recording of member activity for analytics\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"for-switch\"],[12],[2,\"\\n                           \"],[8,\"gh-feature-flag\",[],[[\"@flag\"],[\"membersActivity\"]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Editor - Card settings panel\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"\\n                               New UI pattern for cards that have settings separate to their content.\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"for-switch\"],[12],[2,\"\\n                           \"],[8,\"gh-feature-flag\",[],[[\"@flag\"],[\"cardSettingsPanel\"]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"URL Cache\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"\\n                               Enable URL Caching\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"for-switch\"],[12],[2,\"\\n                           \"],[8,\"gh-feature-flag\",[],[[\"@flag\"],[\"urlCache\"]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Cardmageddon - Callout\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"\\n                               Card for info boxes that stand out\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"for-switch\"],[12],[2,\"\\n                           \"],[8,\"gh-feature-flag\",[],[[\"@flag\"],[\"calloutCard\"]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Cardmageddon - Before/After\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"\\n                                Card for comparing two images\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"for-switch\"],[12],[2,\"\\n                           \"],[8,\"gh-feature-flag\",[],[[\"@flag\"],[\"beforeAfterCard\"]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Cardmageddon - Tweet grid\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"\\n                               Card for displaying a group of related tweets\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"for-switch\"],[12],[2,\"\\n                           \"],[8,\"gh-feature-flag\",[],[[\"@flag\"],[\"tweetGridCard\"]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Members activity feed\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"\\n                               Separate activity feed screen showing all member activity.\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"for-switch\"],[12],[2,\"\\n                           \"],[8,\"gh-feature-flag\",[],[[\"@flag\"],[\"membersActivityFeed\"]],null],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,4],[[32,0,[\"showDeleteAllModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"delete-all\",[30,[36,0],[[32,0],\"toggleDeleteAllModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,4],[[32,0,[\"showEnableTiersModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"enable-tiers\",[30,[36,0],[[32,0],\"toggleEnableTiersModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"readonly\",\"mut\",\"if\",\"or\",\"-track-array\",\"each\",\"feature\",\"perform\",\"enable-developer-experiments\"]}",
    "moduleName": "ghost-admin/templates/settings/labs.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/members-email", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "i9ro5HtK",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas gh-setting-email\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            Email newsletter\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-members-settings\"]],[[\"@buttonText\",\"@task\",\"@successText\",\"@runningText\",\"@class\"],[\"Save settings\",[32,0,[\"saveSettings\"]],\"Saved\",\"Saving\",\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container settings-debug\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-setting-liquid-section\"],[12],[2,\"\\n            \"],[8,\"settings/members-email\",[],[[\"@fromAddress\",\"@supportAddress\",\"@setEmailAddress\",\"@toggleEmailDesignSettings\"],[[32,0,[\"fromAddress\"]],[32,0,[\"supportAddress\"]],[32,0,[\"setEmailAddress\"]],[32,0,[\"toggleEmailDesignSettings\"]]]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"showLeaveSettingsModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[32,0,[\"confirmLeave\"]],[32,0,[\"cancelLeave\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\\n\"],[6,[37,1],[[32,0,[\"showEmailDesignSettings\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modifier\"],[\"full-overlay portal-settings\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[8,\"modal-email-design-settings\",[],[[\"@closeModal\"],[[32,0,[\"toggleEmailDesignSettings\"]]]],null],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/templates/settings/members-email.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/membership", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "8kwCVb21",
    "block": "{\"symbols\":[],\"statements\":[[11,\"section\"],[24,0,\"gh-canvas circle-bg\"],[4,[38,12],[[32,0,[\"setup\"]]],null],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header gh-setting-members-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,1],[\"arrow-right\"],null]],[13],[2,\"\\n            Membership\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-settings\"]],[[\"@buttonText\",\"@task\",\"@successText\",\"@runningText\",\"@class\"],[\"Save\",[32,0,[\"saveSettingsTask\"]],\"Saved\",\"Saving\",\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container settings-debug\"],[12],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-main-layout content-preview\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-members-basicsform\"],[12],[2,\"\\n                \"],[10,\"p\"],[14,0,\"intro\"],[12],[2,\"Fund your work with subscription revenue. Connect your Stripe account and offer premium content to your audience. Our creators are already making over $12 million per year, while \"],[10,\"strong\"],[12],[2,\"Ghost takes 0% payment fees\"],[13],[2,\".\"],[13],[2,\"\\n                \"],[10,\"hr\"],[12],[13],[2,\"\\n                \"],[10,\"div\"],[12],[2,\"\\n                    \"],[10,\"section\"],[14,0,\"gh-expandable gh-setting-members-portalcta\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                                \"],[10,\"div\"],[12],[2,\"\\n                                    \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Portal Settings\"],[13],[2,\"\\n                                    \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"\\n                                        Customize members modal signup flow\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green\"],[16,\"disabled\",[30,[36,13],[[32,0,[\"settings\",\"membersSignupAccess\"]],\"none\"],null]],[24,\"data-test-toggle\",\"portal-settings\"],[24,4,\"button\"],[4,[38,10],[\"click\",[32,0,[\"openPortalSettings\"]]],null],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"Customize Portal →\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\\n                    \"],[10,\"div\"],[14,0,\"gh-setting-rich-dropdown\"],[12],[2,\"\\n                        \"],[8,\"settings/members-subscription-access\",[],[[\"@onChange\"],[[32,0,[\"membersSubscriptionAccessChanged\"]]]],null],[2,\"\\n                        \"],[8,\"settings/members-default-post-access\",[],[[],[]],null],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-setting-members-portalpreview\"],[12],[2,\"\\n                \"],[10,\"div\"],[15,0,[31,[\"gh-setting-members-portal-mock \",[30,[36,5],[[30,[36,6],[\"multipleProducts\"],null],\"mock-enabled\"],null]]]],[12],[2,\"\\n\"],[6,[37,5],[[30,[36,9],[[30,[36,13],[[32,0,[\"settings\",\"membersSignupAccess\"]],\"none\"],null],[32,0,[\"switchFromNoneTask\",\"isRunning\"]]],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-setting-members-portal-disabled\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"lightgrey\"],[12],[1,[30,[36,1],[\"portal-logo-stroke\"],null]],[13],[2,\"\\n                            \"],[10,\"h4\"],[12],[2,\"Portal disabled\"],[13],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Change your Subscription Access setting to re-enable Portal\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                        \"],[8,\"gh-site-iframe\",[[24,\"scrolling\",\"no\"]],[[\"@src\",\"@invisibleUntilLoaded\",\"@onInserted\",\"@onDestroyed\"],[[32,0,[\"portalPreviewUrl\"]],\"portal-ready\",[32,0,[\"portalPreviewInserted\"]],[32,0,[\"portalPreviewDestroyed\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"div\"],[14,0,\"gh-setting-members-tierscontainer\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-settings-members-tiersheader\"],[12],[2,\"\\n                \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Membership tiers\"],[13],[2,\"\\n\"],[6,[37,5],[[32,0,[\"session\",\"user\",\"isAdmin\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[11,\"button\"],[16,0,[31,[\"gh-btn gh-btn-outline gh-btn-stripe-status \",[30,[36,5],[[32,0,[\"isConnectDisallowed\"]],\"disabled\"],null],\" \",[30,[36,5],[[32,0,[\"settings\",\"stripeConnectAccountId\"]],\"connected\",\"\"],null]]]],[24,4,\"button\"],[4,[38,10],[\"click\",[32,0,[\"openStripeConnect\"]]],null],[12],[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"\\n                        \"],[1,[30,[36,5],[[32,0,[\"settings\",\"stripeConnectAccountId\"]],\"Connected to Stripe\",\"Stripe not connected\"],null]],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n            \"],[10,\"section\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Free\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Free member sign up settings\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                        \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-toggle-pub-info\",\"\"],[24,4,\"button\"],[4,[38,10],[\"click\",[30,[36,11],[\"freeOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,5],[[32,0,[\"freeOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,14],[[32,0,[\"freeOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n\"],[6,[37,5],[[30,[36,6],[\"multipleProducts\"],null]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[8,\"gh-product-card\",[],[[\"@product\",\"@products\",\"@openEditProduct\"],[[32,0,[\"freeProduct\"]],[32,0,[\"products\"]],[32,0,[\"openEditProduct\"]]]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"free-welcome-page\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"freeWelcomePage\"],[12],[2,\"Welcome page\"],[13],[2,\"\\n                                \"],[8,\"gh-url-input\",[],[[\"@id\",\"@value\",\"@baseUrl\",\"@setResult\",\"@validateUrl\",\"@placeholder\"],[\"freeWelcomePage\",[30,[36,2],[[32,0,[\"settings\",\"membersFreeSignupRedirect\"]]],null],[30,[36,2],[[32,0,[\"siteUrl\"]]],null],[32,0,[\"setFreeSignupRedirect\"]],[32,0,[\"validateFreeSignupRedirect\"]],[30,[36,2],[[32,0,[\"siteUrl\"]]],null]]],null],[2,\"\\n                                \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[34,7,[\"errors\"]],\"membersFreeSignupRedirect\"]],null],[2,\"\\n                                \"],[10,\"p\"],[12],[2,\"Redirect to this URL after signup for a free membership\"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"section\"],[14,0,\"gh-expandable\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-expandable-block\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-expandable-header\"],[12],[2,\"\\n                        \"],[10,\"div\"],[12],[2,\"\\n                            \"],[10,\"h4\"],[14,0,\"gh-expandable-title\"],[12],[2,\"Premium\"],[13],[2,\"\\n                            \"],[10,\"p\"],[14,0,\"gh-expandable-description\"],[12],[2,\"Set prices and paid member sign up settings\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"settings\",\"stripeConnectAccountId\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[11,\"button\"],[24,0,\"gh-btn\"],[24,\"data-test-toggle-pub-info\",\"\"],[24,4,\"button\"],[4,[38,10],[\"click\",[30,[36,11],[\"paidOpen\",[32,0]],null]],null],[12],[10,\"span\"],[12],[1,[30,[36,5],[[32,0,[\"paidOpen\"]],\"Close\",\"Expand\"],null]],[13],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                            \"],[11,\"button\"],[16,0,[31,[\"stripe-connect \",[30,[36,5],[[30,[36,9],[[30,[36,8],[[32,0,[\"session\",\"user\",\"isAdmin\"]]],null],[32,0,[\"isConnectDisallowed\"]]],null],\"disabled\"],null]]]],[24,4,\"button\"],[4,[38,10],[\"click\",[32,0,[\"openStripeConnect\"]]],null],[12],[2,\"\\n                                \"],[10,\"span\"],[12],[2,\"Connect with Stripe\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n\"],[6,[37,5],[[32,0,[\"isConnectDisallowed\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"div\"],[14,0,\"gh-setting-nossl\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-setting-nossl-container\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"red\"],[12],[1,[30,[36,1],[\"shield-lock\"],null]],[13],[2,\"\\n                            \"],[10,\"h4\"],[12],[2,\"Your site is not secured\"],[13],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Paid memberships through Ghost can only be run on sites secured by SSL (HTTPS vs. HTTP). More information on adding a free SSL Certificate to your Ghost site can be \"],[10,\"a\"],[14,6,\"https://ghost.org/integrations/lets-encrypt/\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[2,\"found here\"],[13],[2,\".\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[10,\"div\"],[14,0,\"gh-expandable-content\"],[12],[2,\"\\n\"],[6,[37,14],[[32,0,[\"paidOpen\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[10,\"div\"],[14,0,\"gh-setting-content-extended\"],[12],[2,\"\\n\"],[6,[37,5],[[32,0,[\"fetchDefaultProduct\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                Loading...\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,5],[[30,[36,6],[\"multipleProducts\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                    \"],[8,\"gh-membership-products-alpha\",[],[[\"@products\",\"@confirmProductSave\"],[[32,0,[\"paidProducts\"]],[32,0,[\"confirmProductSave\"]]]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"prices\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-settings-members-pricelabelcont\"],[12],[2,\"\\n                                            \"],[10,\"label\"],[14,\"for\",\"monthlyPrice\"],[12],[2,\"Prices\"],[13],[2,\"\\n                                            \"],[10,\"span\"],[12],[2,\"–\"],[13],[2,\"\\n                                            \"],[10,\"div\"],[12],[2,\"\\n                                                \"],[10,\"span\"],[14,0,\"gh-setting-members-currency gh-select\"],[12],[2,\"\\n                                                    \"],[10,\"div\"],[14,0,\"gh-setting-members-currencylabel\"],[12],[2,\"\\n                                                        \"],[10,\"span\"],[12],[1,[32,0,[\"currency\"]]],[13],[2,\"\\n                                                        \"],[1,[30,[36,1],[\"arrow-down-small\"],null]],[2,\"\\n                                                    \"],[13],[2,\"\\n                                                    \"],[8,\"one-way-select\",[[24,1,\"currency\"],[24,3,\"currency\"]],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@update\"],[[32,0,[\"selectedCurrency\"]],[30,[36,2],[[32,0,[\"allCurrencies\"]]],null],\"value\",\"label\",[32,0,[\"setStripePlansCurrency\"]]]],null],[2,\"\\n                                                \"],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n                                        \"],[10,\"div\"],[14,0,\"gh-setting-members-prices\"],[12],[2,\"\\n\\n                                            \"],[10,\"div\"],[14,0,\"gh-input-group\"],[12],[2,\"\\n                                                \"],[8,\"gh-text-input\",[],[[\"@id\",\"@value\",\"@type\",\"@input\",\"@focus-out\"],[\"monthlyPrice\",[30,[36,2],[[32,0,[\"stripeMonthlyAmount\"]]],null],\"number\",[30,[36,4],[[32,0],[30,[36,3],[[32,0,[\"stripeMonthlyAmount\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,4],[[32,0],\"validateStripePlans\"],null]]],null],[2,\"\\n                                                \"],[10,\"span\"],[14,0,\"gh-input-append\"],[12],[10,\"span\"],[14,0,\"ttu\"],[12],[1,[32,0,[\"currency\"]]],[13],[2,\"/month\"],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                            \"],[10,\"div\"],[14,0,\"gh-input-group\"],[12],[2,\"\\n                                                \"],[8,\"gh-text-input\",[[16,\"data-test-title-input\",true]],[[\"@id\",\"@value\",\"@type\",\"@input\",\"@focus-out\",\"@placeholder\"],[\"yearlyPrice\",[30,[36,2],[[32,0,[\"stripeYearlyAmount\"]]],null],\"number\",[30,[36,4],[[32,0],[30,[36,3],[[32,0,[\"stripeYearlyAmount\"]]],null]],[[\"value\"],[\"target.value\"]]],[32,0,[\"validateStripePlans\"]],\"\"]],null],[2,\"\\n                                                \"],[10,\"span\"],[14,0,\"gh-input-append\"],[12],[10,\"span\"],[14,0,\"ttu\"],[12],[1,[32,0,[\"currency\"]]],[13],[2,\"/year\"],[13],[2,\"\\n                                            \"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n\"],[6,[37,5],[[32,0,[\"stripePlanError\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                            \"],[10,\"p\"],[14,0,\"response w-100\"],[12],[10,\"span\"],[14,0,\"red\"],[12],[1,[32,0,[\"stripePlanError\"]]],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"]],\"parameters\":[]}]]],[2,\"                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"settings\",\"errors\"]],[32,0,[\"settings\",\"hasValidated\"]],\"paid-welcome-page\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"paidWelcomePage\"],[12],[2,\"Welcome page\"],[13],[2,\"\\n                                    \"],[8,\"gh-url-input\",[],[[\"@value\",\"@baseUrl\",\"@setResult\",\"@validateUrl\",\"@placeholder\"],[[30,[36,2],[[32,0,[\"settings\",\"membersPaidSignupRedirect\"]]],null],[30,[36,2],[[32,0,[\"siteUrl\"]]],null],[32,0,[\"setPaidSignupRedirect\"]],[32,0,[\"validatePaidSignupRedirect\"]],[30,[36,2],[[32,0,[\"siteUrl\"]]],null]]],null],[2,\"\\n                                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[34,7,[\"errors\"]],\"membersPaidSignupRedirect\"]],null],[2,\"\\n                                    \"],[10,\"p\"],[12],[2,\"Redirect to this URL after signup for premium membership\"],[13],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"showLeaveRouteModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[32,0,[\"confirmLeave\"]],[32,0,[\"cancelLeave\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,5],[[32,0,[\"showPortalSettings\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"portal-settings\",[30,[36,0],null,[[\"preloadTask\",\"openStripeSettings\",\"products\"],[[32,0,[\"saveSettingsTask\"]],[32,0,[\"openStripeConnect\"]],[32,0,[\"products\"]]]]],[32,0,[\"closePortalSettings\"]],\"full-overlay portal-settings\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,5],[[32,0,[\"showLeavePortalModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[32,0,[\"confirmClosePortalSettings\"]],[32,0,[\"cancelClosePortalSettings\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,5],[[32,0,[\"showStripeConnect\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"stripe-connect\",[32,0,[\"closeStripeConnect\"]],\"action wide stripe-connect\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,5],[[32,0,[\"showProductModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"product\",[30,[36,0],null,[[\"product\",\"products\"],[[32,0,[\"productModel\"]],[32,0,[\"products\"]]]]],[32,0,[\"confirmProductSave\"]],[32,0,[\"closeProductModal\"]],\"edit-product action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"hash\",\"svg-jar\",\"readonly\",\"mut\",\"action\",\"if\",\"feature\",\"settings\",\"not\",\"or\",\"on\",\"toggle\",\"did-insert\",\"eq\",\"liquid-if\"]}",
    "moduleName": "ghost-admin/templates/settings/membership.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/navigation", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "dikYQRmA",
    "block": "{\"symbols\":[\"navItem\",\"index\",\"navItem\",\"index\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,1],[\"arrow-right\"],null]],[13],[2,\"\\n            Navigation\\n        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[16,\"data-test-save-button\",true]],[[\"@task\",\"@class\"],[[32,0,[\"save\"]],\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,2],[[32,0,[\"showLeaveSettingsModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[30,[36,0],[[32,0],\"leaveSettings\"],null],[30,[36,0],[[32,0],\"toggleLeaveSettingsModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"section\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Primary Navigation\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-content padding-top-s grey\"],[12],[2,\"\\n                \"],[10,\"form\"],[14,1,\"settings-navigation\"],[14,0,\"gh-blognav\"],[14,\"novalidate\",\"novalidate\"],[12],[2,\"\\n                    \"],[8,\"sortable-objects\",[],[[\"@sortableObjectList\",\"@useSwap\"],[[32,0,[\"settings\",\"navigation\"]],false]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,4],[[30,[36,3],[[30,[36,3],[[32,0,[\"settings\",\"navigation\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[8,\"draggable-object\",[],[[\"@content\",\"@dragHandle\",\"@isSortable\"],[[32,3],\".gh-blognav-grab\",true]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[8,\"gh-navitem\",[[16,\"data-test-navitem\",[32,4]]],[[\"@navItem\",\"@baseUrl\",\"@addItem\",\"@deleteItem\",\"@updateUrl\",\"@updateLabel\"],[[32,3],[32,0,[\"blogUrl\"]],[30,[36,0],[[32,0],\"addNavItem\"],null],[30,[36,0],[[32,0],\"deleteNavItem\"],null],[30,[36,0],[[32,0],\"updateUrl\"],null],[30,[36,0],[[32,0],\"updateLabel\"],null]]],null],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[3,4]}]]],[2,\"                    \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[8,\"gh-navitem\",[[24,\"data-test-navitem\",\"new\"]],[[\"@navItem\",\"@baseUrl\",\"@addItem\",\"@updateUrl\",\"@updateLabel\"],[[32,0,[\"newNavItem\"]],[32,0,[\"blogUrl\"]],[30,[36,0],[[32,0],\"addNavItem\"],null],[30,[36,0],[[32,0],\"updateUrl\"],null],[30,[36,0],[[32,0],\"updateLabel\"],null]]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\\n        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Secondary Navigation\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-main-section-content padding-top-s grey\"],[12],[2,\"\\n                \"],[10,\"form\"],[14,1,\"secondary-navigation\"],[14,0,\"gh-blognav\"],[14,\"novalidate\",\"novalidate\"],[12],[2,\"\\n                    \"],[8,\"sortable-objects\",[],[[\"@sortableObjectList\",\"@useSwap\"],[[32,0,[\"settings\",\"secondaryNavigation\"]],false]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,4],[[30,[36,3],[[30,[36,3],[[32,0,[\"settings\",\"secondaryNavigation\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[8,\"draggable-object\",[],[[\"@content\",\"@dragHandle\",\"@isSortable\"],[[32,1],\".gh-blognav-grab\",true]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[8,\"gh-navitem\",[[16,\"data-test-navitem\",[32,2]]],[[\"@navItem\",\"@baseUrl\",\"@addItem\",\"@deleteItem\",\"@updateUrl\",\"@updateLabel\"],[[32,1],[32,0,[\"blogUrl\"]],[30,[36,0],[[32,0],\"addNavItem\"],null],[30,[36,0],[[32,0],\"deleteNavItem\"],null],[30,[36,0],[[32,0],\"updateUrl\"],null],[30,[36,0],[[32,0],\"updateLabel\"],null]]],null],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[1,2]}]]],[2,\"                    \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[8,\"gh-navitem\",[[24,\"data-test-navitem\",\"new\"]],[[\"@navItem\",\"@baseUrl\",\"@addItem\",\"@updateUrl\",\"@updateLabel\"],[[32,0,[\"newSecondaryNavItem\"]],[32,0,[\"blogUrl\"]],[30,[36,0],[[32,0],\"addNavItem\"],null],[30,[36,0],[[32,0],\"updateUrl\"],null],[30,[36,0],[[32,0],\"updateLabel\"],null]]],null],[2,\"\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[1,[30,[36,6],[[30,[36,5],null,null]],null]],[2,\"\\n\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"if\",\"-track-array\",\"each\",\"-outlet\",\"component\"]}",
    "moduleName": "ghost-admin/templates/settings/navigation.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/product", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "56y4XsjY",
    "block": "{\"symbols\":[\"price\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,8],[\"arrow-right\"],null]],[13],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings.products\"]],[[\"default\"],[{\"statements\":[[2,\"Products\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,8],[\"arrow-right\"],null]],[13],[2,\"\\n\"],[6,[37,3],[[35,7,[\"name\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[1,[35,7,[\"name\"]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[10,\"span\"],[14,0,\"midlightgrey\"],[12],[2,\"New product\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"gh-task-button\",[[24,\"data-test-button\",\"save-settings\"]],[[\"@buttonText\",\"@task\",\"@successText\",\"@runningText\",\"@class\"],[\"Save product\",[32,0,[\"saveTask\"]],\"Saved\",\"Saving\",\"gh-btn gh-btn-primary gh-btn-icon\"]],null],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"form\"],[12],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-main-section-block\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small bn\"],[12],[2,\"Product details\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-content grey gh-product-details-form\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-product-details-fields\"],[12],[2,\"\\n                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@classNames\"],[[32,0,[\"product\",\"errors\"]],[32,0,[\"product\",\"hasValidated\"]],\"name\",\"max-width\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"product-name\"],[12],[2,\"Product name\"],[13],[2,\"\\n                    \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"product-name\"]],[[\"@id\",\"@value\"],[\"product-name\",[34,7,[\"name\"]]]],null],[2,\"\\n                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"product\",\"errors\"]],\"name\"]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                \"],[8,\"gh-form-group\",[],[[\"@property\",\"@classNames\"],[\"description\",\"max-width\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"product-description\"],[12],[2,\"Description\"],[13],[2,\"\\n                    \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"product-description\"]],[[\"@value\"],[[34,7,[\"description\"]]]],null],[2,\"\\n                    \"],[8,\"gh-error-message\",[],[[\"@property\"],[\"description\"]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                \"],[8,\"gh-form-group\",[],[[\"@property\",\"@classNames\"],[\"_welcome-page\",\"max-width\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"_welcome-page\"],[12],[2,\"Welcome page\"],[13],[2,\"\\n                    \"],[8,\"gh-url-input\",[],[[\"@value\",\"@baseUrl\",\"@setResult\",\"@validateUrl\",\"@placeholder\"],[[30,[36,9],[[32,0,[\"settings\",\"membersPaidSignupRedirect\"]]],null],[30,[36,9],[[32,0,[\"siteUrl\"]]],null],[30,[36,1],[[32,0],\"setPaidSignupRedirect\"],null],[30,[36,1],[[32,0],\"validatePaidSignupRedirect\"],null],[30,[36,9],[[32,0,[\"siteUrl\"]]],null]]],null],[2,\"\\n                    \"],[10,\"p\"],[12],[2,\"Redirect to this URL after signup for this product\"],[13],[2,\"\\n                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[34,10,[\"errors\"]],\"membersPaidSignupRedirect\"]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-main-section\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-main-section-block p0\"],[12],[2,\"\\n            \"],[10,\"ol\"],[14,0,\"gh-price-list gh-list\"],[12],[2,\"\\n                \"],[10,\"li\"],[14,0,\"gh-list-row header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-list-header\"],[12],[2,\"Prices(\"],[1,[32,0,[\"noOfPrices\"]]],[2,\")\"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-list-header\"],[12],[2,\"Price\"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-list-header\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n\"],[6,[37,2],[[32,0,[\"stripePrices\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"tr\"],[15,0,[31,[\"gh-list-row \",[30,[36,3],[[35,6,[\"active\"]],\"\",\"gh-price-list-archived\"],null]]]],[12],[2,\"\\n                        \"],[10,\"td\"],[14,\"colspan\",\"4\"],[14,0,\"gh-list-data\"],[12],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-price-list-noprices\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"mb2\"],[12],[2,\"There are no prices for this product\"],[13],[2,\"\\n\"],[6,[37,3],[[32,0,[\"membersUtils\",\"isStripeEnabled\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[6,[37,2],[[32,0,[\"product\",\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                        \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green\"],[16,\"disabled\",[32,0,[\"saveTask\",\"isRunning\"]]],[24,4,\"button\"],[4,[38,1],[[32,0],\"openNewPrice\"],null],[12],[2,\"\\n                                            \"],[10,\"span\"],[12],[2,\"Add price\"],[13],[2,\"\\n                                        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]},{\"statements\":[[2,\"                                    You need to \"],[11,\"button\"],[24,0,\"b gh-setting-group\"],[4,[38,5],[\"click\",[32,0,[\"openStripeConnect\"]]],null],[12],[2,\"connect to Stripe\"],[13],[2,\" to add prices\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,12],[[30,[36,11],[[30,[36,11],[[32,0,[\"stripePrices\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"li\"],[15,0,[31,[\"gh-list-row \",[30,[36,3],[[32,1,[\"active\"]],\"\",\"gh-price-list-archived\"],null]]]],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-list-data gh-price-list-title\"],[12],[2,\"\\n                        \"],[10,\"h3\"],[14,0,\"gh-price-list-name\"],[12],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"name\"],[12],[1,[32,1,[\"nickname\"]]],[13],[2,\"\\n\"],[6,[37,2],[[32,1,[\"active\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"span\"],[14,0,\"gh-badge archived\"],[12],[2,\"Archived\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                        \"],[10,\"p\"],[14,0,\"ma0 pa0 f8 midgrey gh-price-list-description\"],[12],[2,\"\\n                            \"],[1,[32,1,[\"description\"]]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\\n                    \"],[10,\"div\"],[14,0,\"gh-list-data gh-price-list-price\"],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[1,[30,[36,4],[[32,1,[\"currency\"]]],null]],[1,[32,1,[\"amount\"]]],[2,\" / \"],[1,[32,1,[\"interval\"]]],[13],[2,\"\\n                    \"],[13],[2,\"\\n\\n                    \"],[10,\"div\"],[14,0,\"gh-list-data gh-price-list-actions\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-price-list-actionlist\"],[12],[2,\"\\n                            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-link\"],[4,[38,1],[[32,0],\"openEditPrice\",[32,1]],null],[12],[2,\"\\n                                \"],[10,\"span\"],[12],[2,\"Edit\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"],[6,[37,3],[[32,1,[\"active\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-link gh-btn-archive-toggle archived\"],[16,\"disabled\",[32,0,[\"saveTask\",\"isRunning\"]]],[4,[38,1],[[32,0],\"archivePrice\",[32,1]],null],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"Archive\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-link gh-btn-archive-toggle\"],[16,\"disabled\",[32,0,[\"saveTask\",\"isRunning\"]]],[4,[38,1],[[32,0],\"activatePrice\",[32,1]],null],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"Activate\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"            \"],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"stripePrices\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,2],[[32,0,[\"product\",\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-green\"],[24,4,\"button\"],[4,[38,1],[[32,0],\"openNewPrice\"],null],[12],[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"Add price\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"showPriceModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"product-price\",[30,[36,0],null,[[\"price\"],[[32,0,[\"priceModel\"]]]]],[30,[36,1],[[32,0],\"savePrice\"],null],[32,0,[\"closePriceModal\"]],\"action wide product-ssprice\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,3],[[32,0,[\"showUnsavedChangesModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[32,0,[\"leaveScreen\"]],[32,0,[\"toggleUnsavedChangesModal\"]],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[13]],\"hasEval\":false,\"upvars\":[\"hash\",\"action\",\"unless\",\"if\",\"currency-symbol\",\"on\",\"price\",\"product\",\"svg-jar\",\"readonly\",\"settings\",\"-track-array\",\"each\"]}",
    "moduleName": "ghost-admin/templates/settings/product.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/products", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "IPEaTkGh",
    "block": "{\"symbols\":[\"product\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n            Products\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-product-list\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-product-card\"],[12],[2,\"\\n                \"],[10,\"span\"],[14,0,\"gh-product-list-icon\"],[12],[1,[30,[36,0],[\"members\"],null]],[13],[2,\"\\n                \"],[10,\"h3\"],[14,0,\"gh-product-card-name\"],[12],[2,\"\\n                    Free membership\\n                \"],[13],[2,\"\\n                \"],[10,\"p\"],[14,0,\"gh-product-card-description\"],[12],[2,\"\\n                    \"],[1,[32,0,[\"settings\",\"membersFreePriceDescription\"]]],[2,\"\\n                \"],[13],[2,\"\\n                \"],[8,\"link-to\",[[24,0,\"gh-btn\"],[4,[38,2],[[32,0],[30,[36,1],[\"showFreeMembershipModal\",[32,0]],null]],null]],[[\"@route\"],[\"settings.products\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Customize\"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n\\n\"],[6,[37,4],[[30,[36,3],[[30,[36,3],[[32,0,[\"products\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"div\"],[14,0,\"gh-product-card\"],[12],[2,\"\\n                \"],[10,\"span\"],[14,0,\"gh-product-list-icon\"],[12],[10,\"div\"],[14,0,\"gh-product-list-siteicon\"],[15,5,[32,0,[\"iconStyle\"]]],[12],[13],[13],[2,\"\\n                \"],[10,\"h3\"],[14,0,\"gh-product-card-name\"],[12],[2,\"\\n                    \"],[1,[32,1,[\"name\"]]],[2,\"\\n                \"],[13],[2,\"\\n                \"],[10,\"p\"],[14,0,\"gh-product-card-description\"],[12],[2,\"\\n                    \"],[1,[32,1,[\"description\"]]],[2,\"\\n                \"],[13],[2,\"\\n                \"],[8,\"link-to\",[[24,0,\"gh-btn\"]],[[\"@route\",\"@model\"],[\"settings.product\",[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"span\"],[12],[2,\"Customize\"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"showFreeMembershipModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"free-membership-settings\",[32,0,[\"closeFreeMembershipModal\"]],\"action wide product-ssprice\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"toggle\",\"action\",\"-track-array\",\"each\",\"if\"]}",
    "moduleName": "ghost-admin/templates/settings/products.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/staff/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "rz6ixbRT",
    "block": "{\"symbols\":[\"user\",\"component\",\"user\",\"component\",\"component\",\"invite\",\"component\"],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n            \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[10,\"span\"],[12],[1,[30,[36,6],[\"arrow-right\"],null]],[13],[2,\"\\n            Staff\\n        \"],[13],[2,\"\\n\"],[6,[37,9],[[32,0,[\"currentUser\",\"isAuthorOrContributor\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n\"],[6,[37,4],[[30,[36,8],[[32,0,[\"session\",\"user\"]]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"span\"],[14,0,\"dropdown\"],[12],[2,\"\\n                        \"],[8,\"gh-dropdown-button\",[[24,\"data-test-button\",\"staff-actions\"]],[[\"@dropdownName\",\"@classNames\",\"@title\"],[\"staff-actions-menu\",\"gh-btn gh-btn-icon icon-only gh-btn-action-icon\",\"Staff Actions\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"span\"],[12],[2,\"\\n                                \"],[1,[30,[36,6],[\"settings\"],null]],[2,\"\\n                                \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"Actions\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[8,\"gh-dropdown\",[],[[\"@name\",\"@tagName\",\"@classNames\"],[\"staff-actions-menu\",\"ul\",\"gh-member-actions-menu dropdown-menu dropdown-triangle-top-right\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"li\"],[12],[2,\"\\n                                \"],[11,\"button\"],[4,[38,7],[\"click\",[30,[36,3],[[32,0],\"toggleResetAllPasswordsModal\"],null]],null],[12],[2,\"\\n                                    \"],[10,\"span\"],[12],[2,\"Reset all passwords\"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-primary\"],[24,\"data-test-button\",\"invite-staff-user\"],[4,[38,7],[\"click\",[30,[36,3],[[32,0],\"toggleInviteUserModal\"],null]],null],[12],[10,\"span\"],[12],[2,\"Invite people\"],[13],[13],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,4],[[32,0,[\"showInviteUserModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"invite-new-user\",[30,[36,3],[[32,0],\"toggleInviteUserModal\"],null],\"action wide invite-user\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,4],[[32,0,[\"showResetAllPasswordsModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"reset-all-passwords\",[30,[36,3],[[32,0],\"toggleResetAllPasswordsModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"section\"],[14,0,\"view-container gh-team\"],[12],[2,\"\\n\"],[6,[37,9],[[32,0,[\"currentUser\",\"isAuthorOrContributor\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,4],[[32,0,[\"invites\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"section\"],[14,0,\"gh-main-section gh-invited-users apps-first-header\"],[14,\"data-test-invited-users\",\"\"],[12],[2,\"\\n            \"],[10,\"h4\"],[14,0,\"gh-main-section-header small\"],[12],[2,\"Invited users\"],[13],[2,\"\\n            \"],[10,\"div\"],[14,0,\"apps-grid\"],[12],[2,\"\\n\\n\"],[6,[37,1],[[30,[36,0],[[30,[36,0],[[32,0,[\"sortedInvites\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[8,\"gh-user-invited\",[],[[\"@invite\",\"@reload\"],[[32,6],[30,[36,5],[\"reload\"],null]]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"div\"],[14,0,\"apps-grid-cell\"],[15,\"data-test-invite-id\",[31,[[32,6,[\"id\"]]]]],[12],[2,\"\\n                            \"],[10,\"article\"],[14,0,\"apps-card-app\"],[12],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-card-left\"],[12],[2,\"\\n                                    \"],[10,\"span\"],[14,0,\"user-list-item-icon\"],[12],[1,[30,[36,6],[\"email\"],null]],[2,\"ic\"],[13],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"apps-card-meta\"],[12],[2,\"\\n                                        \"],[10,\"h3\"],[14,0,\"apps-card-app-title\"],[14,\"data-test-email\",\"\"],[12],[1,[32,6,[\"email\"]]],[13],[2,\"\\n                                        \"],[10,\"p\"],[14,0,\"apps-card-app-desc\"],[12],[2,\"\\n\"],[6,[37,4],[[32,6,[\"pending\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                                \"],[10,\"span\"],[14,0,\"description-error\"],[12],[2,\"\\n                                                    Invitation not sent - please try again\\n                                                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                                \"],[10,\"span\"],[14,0,\"description\"],[14,\"data-test-invite-description\",\"\"],[12],[2,\"\\n                                                    Invitation sent: \"],[1,[32,7,[\"createdAt\"]]],[2,\",\\n                                                    \"],[1,[30,[36,4],[[32,7,[\"isExpired\"]],\"expired\",\"expires\"],null]],[2,\" \"],[1,[32,7,[\"expiresAt\"]]],[2,\"\\n                                                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"div\"],[14,0,\"apps-card-right\"],[12],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"apps-configured\"],[12],[2,\"\\n\"],[6,[37,4],[[32,7,[\"isSending\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                            \"],[10,\"span\"],[12],[2,\"Sending Invite...\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                            \"],[11,\"a\"],[24,0,\"apps-configured-action red-hover\"],[24,6,\"#revoke\"],[24,\"data-test-revoke-button\",\"\"],[4,[38,3],[[32,0],\"revoke\"],[[\"target\"],[[32,7]]]],[12],[2,\"\\n                                                Revoke\\n                                            \"],[13],[2,\"\\n                                            \"],[11,\"a\"],[24,0,\"apps-configured-action green-hover\"],[24,6,\"#resend\"],[24,\"data-test-resend-button\",\"\"],[4,[38,3],[[32,0],\"resend\"],[[\"target\"],[[32,7]]]],[12],[2,\"\\n                                                Resend\\n                                            \"],[13],[2,\"\\n\\n                                            \"],[10,\"span\"],[15,0,[31,[\"apps-configured-action gh-badge \",[32,6,[\"role\",\"lowerCaseName\"]]]]],[14,\"data-test-role-name\",\"\"],[12],[1,[32,6,[\"role\",\"name\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[7]}]]],[2,\"\\n\"]],\"parameters\":[6]}]]],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"section\"],[15,0,[31,[\"gh-main-section gh-active-users \",[30,[36,9],[[32,0,[\"invites\"]],\"apps-first-header\"],null]]]],[14,\"data-test-active-users\",\"\"],[12],[2,\"\\n        \"],[10,\"h4\"],[14,0,\"gh-main-section-header small\"],[12],[2,\"Active users\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"apps-grid\"],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"currentUser\",\"isAuthorOrContributor\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[8,\"gh-user-active\",[],[[\"@user\"],[[32,0,[\"currentUser\"]]]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[8,\"gh-user-list-item\",[],[[\"@user\",\"@component\"],[[32,0,[\"currentUser\"]],[32,5]]],null],[2,\"\\n                \"]],\"parameters\":[5]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[6,[37,2],[[32,0,[\"sortedActiveUsers\"]]],[[\"key\",\"containerSelector\",\"estimateHeight\"],[\"id\",\".gh-main\",75]],[[\"default\"],[{\"statements\":[[2,\"                    \"],[8,\"gh-user-active\",[],[[\"@user\"],[[32,3]]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[8,\"gh-user-list-item\",[],[[\"@user\",\"@component\"],[[32,3],[32,4]]],null],[2,\"\\n                    \"]],\"parameters\":[4]}]]],[2,\"\\n\"]],\"parameters\":[3]}]]]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,4],[[30,[36,11],[[32,0,[\"suspendedUsers\"]],[30,[36,10],[[32,0,[\"currentUser\",\"isAuthorOrContributor\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[10,\"section\"],[14,0,\"apps-grid-container gh-active-users\"],[14,\"data-test-suspended-users\",\"\"],[12],[2,\"\\n        \"],[10,\"span\"],[14,0,\"apps-grid-title\"],[12],[2,\"Suspended users\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"apps-grid\"],[12],[2,\"\\n\"],[6,[37,1],[[30,[36,0],[[30,[36,0],[[32,0,[\"sortedSuspendedUsers\"]]],null]],null]],[[\"key\"],[\"id\"]],[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"gh-user-active\",[],[[\"@user\"],[[32,1]]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[8,\"gh-user-list-item\",[],[[\"@user\",\"@component\"],[[32,1],[32,2]]],null],[2,\"\\n                \"]],\"parameters\":[2]}]]],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"-track-array\",\"each\",\"vertical-collection\",\"action\",\"if\",\"route-action\",\"svg-jar\",\"on\",\"gh-user-can-admin\",\"unless\",\"not\",\"and\"]}",
    "moduleName": "ghost-admin/templates/settings/staff/index.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/staff/user-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "1rWgP8ud",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,1],[[32,0,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"Your profile\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n                \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n                \"],[8,\"link-to\",[[16,\"data-test-staff-link\",true]],[[\"@route\"],[\"settings.staff\"]],[[\"default\"],[{\"statements\":[[2,\"Staff\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[10,\"span\"],[12],[1,[30,[36,0],[\"arrow-right\"],null]],[13],[2,\"\\n                \"],[1,[32,0,[\"user\",\"name\"]]],[2,\"\\n            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-btn gh-btn-primary\"],[12],[10,\"span\"],[12],[2,\"Save\"],[13],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-content\"],[12],[2,\"\\n        \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\"]}",
    "moduleName": "ghost-admin/templates/settings/staff/user-loading.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/staff/user", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "3A8jAV2W",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,5],[[32,0,[\"currentUser\",\"isAuthorOrContributor\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"Your profile\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n                \"],[8,\"link-to\",[],[[\"@route\"],[\"settings\"]],[[\"default\"],[{\"statements\":[[2,\"Settings\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[10,\"span\"],[12],[1,[30,[36,1],[\"arrow-right\"],null]],[13],[2,\"\\n                \"],[8,\"link-to\",[[16,\"data-test-staff-link\",true]],[[\"@route\"],[\"settings.staff\"]],[[\"default\"],[{\"statements\":[[2,\"Staff\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[10,\"span\"],[12],[1,[30,[36,1],[\"arrow-right\"],null]],[13],[2,\"\\n                \"],[1,[32,0,[\"user\",\"name\"]]],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"user\",\"isSuspended\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"span\"],[14,0,\"gh-badge suspended\"],[14,\"data-test-suspended-badge\",\"\"],[12],[2,\"Suspended\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,5],[[32,0,[\"showLeaveSettingsModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"            \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[30,[36,0],[[32,0],\"leaveSettings\"],null],[30,[36,0],[[32,0],\"toggleLeaveSettingsModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n\"],[6,[37,5],[[32,0,[\"userActionsAreVisible\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"span\"],[14,0,\"dropdown\"],[12],[2,\"\\n                    \"],[8,\"gh-dropdown-button\",[[16,\"data-test-user-actions\",true]],[[\"@dropdownName\",\"@classNames\",\"@title\"],[\"user-actions-menu\",\"gh-btn gh-btn-white gh-btn-icon icon-only user-actions-cog\",\"User Actions\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                        \"],[10,\"span\"],[12],[2,\"\\n                            \"],[1,[30,[36,1],[\"settings\"],null]],[2,\"\\n                            \"],[10,\"span\"],[14,0,\"hidden\"],[12],[2,\"User Settings\"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[8,\"gh-dropdown\",[],[[\"@name\",\"@tagName\",\"@classNames\"],[\"user-actions-menu\",\"ul\",\"user-actions-menu dropdown-menu dropdown-align-right\"]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,5],[[32,0,[\"canMakeOwner\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"li\"],[12],[2,\"\\n                                \"],[11,\"button\"],[4,[38,0],[[32,0],\"toggleTransferOwnerModal\"],null],[12],[2,\"\\n                                    Make owner\\n                                \"],[13],[2,\"\\n\"],[6,[37,5],[[32,0,[\"showTransferOwnerModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"transfer-owner\",[30,[36,0],[[32,0],\"transferOwnership\"],null],[30,[36,0],[[32,0],\"toggleTransferOwnerModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,5],[[32,0,[\"deleteUserActionIsVisible\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"li\"],[12],[2,\"\\n                                \"],[11,\"button\"],[24,0,\"delete\"],[24,\"data-test-delete-button\",\"\"],[4,[38,0],[[32,0],\"toggleDeleteUserModal\"],null],[12],[2,\"\\n                                    Delete user\\n                                \"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\"],[6,[37,5],[[32,0,[\"user\",\"isActive\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"li\"],[12],[2,\"\\n                                    \"],[11,\"button\"],[24,0,\"suspend\"],[24,\"data-test-suspend-button\",\"\"],[4,[38,0],[[32,0],\"toggleSuspendUserModal\"],null],[12],[2,\"\\n                                        Suspend user\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,5],[[32,0,[\"user\",\"isSuspended\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[10,\"li\"],[12],[2,\"\\n                                    \"],[11,\"button\"],[24,0,\"unsuspend\"],[24,\"data-test-unsuspend-button\",\"\"],[4,[38,0],[[32,0],\"toggleUnsuspendUserModal\"],null],[12],[2,\"\\n                                        Un-suspend user\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"                    \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n            \"],[8,\"gh-task-button\",[[16,\"data-test-save-button\",true]],[[\"@class\",\"@task\"],[\"gh-btn gh-btn-primary gh-btn-icon\",[32,0,[\"save\"]]]],null],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"showDeleteUserModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"delete-user\",[32,0,[\"user\"]],[30,[36,0],[[32,0],[30,[36,4],[[32,0,[\"deleteUser\"]]],null]],null],[30,[36,0],[[32,0],\"toggleDeleteUserModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,5],[[32,0,[\"showSuspendUserModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"suspend-user\",[32,0,[\"user\"]],[30,[36,0],[[32,0],\"suspendUser\"],null],[30,[36,0],[[32,0],\"toggleSuspendUserModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,5],[[32,0,[\"showUnsuspendUserModal\"]]],null,[[\"default\"],[{\"statements\":[[6,[37,5],[[32,0,[\"limitErrorMessage\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"upgrade-unsuspend-user-host-limit\",[30,[36,6],null,[[\"message\"],[[35,9]]]],[30,[36,0],[[32,0],\"toggleUnsuspendUserModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"unsuspend-user\",[32,0,[\"user\"]],[30,[36,0],[[32,0],\"unsuspendUser\"],null],[30,[36,0],[[32,0],\"toggleUnsuspendUserModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,5],[[35,10,[\"isLocked\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"p\"],[14,0,\"gh-box gh-box-alert\"],[12],[1,[30,[36,1],[\"info\"],null]],[2,\"This user account is locked. To sign in, ask this user to perform a password reset on their account.\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[2,\"    \"],[10,\"section\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gm-main view-container settings-user\"],[12],[2,\"\\n            \"],[11,\"form\"],[24,0,\"user-profile\"],[24,\"novalidate\",\"novalidate\"],[24,\"autocomplete\",\"off\"],[4,[38,0],[[32,0],[30,[36,4],[[32,0,[\"save\"]]],null]],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n\\n                \"],[10,\"figure\"],[14,0,\"user-cover\"],[15,5,[30,[36,11],[[32,0,[\"user\",\"coverImageUrl\"]]],null]],[12],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-default user-cover-edit\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"toggleUploadCoverModal\"],null],[12],[10,\"span\"],[12],[2,\"Change cover\"],[13],[13],[2,\"\\n\"],[6,[37,5],[[32,0,[\"showUploadCoverModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"upload-image\",[30,[36,6],null,[[\"model\",\"imageProperty\"],[[32,0,[\"user\"]],\"coverImage\"]]],[30,[36,0],[[32,0],\"toggleUploadCoverModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n\\n                \"],[10,\"figure\"],[14,0,\"user-image bg-whitegrey\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,1,\"user-image\"],[14,0,\"img\"],[15,5,[30,[36,11],[[32,0,[\"user\",\"profileImageUrl\"]]],null]],[12],[10,\"span\"],[14,0,\"hidden\"],[12],[1,[32,0,[\"user\",\"name\"]]],[2,\"\\\"s picture\"],[13],[13],[2,\"\\n                    \"],[11,\"button\"],[24,0,\"edit-user-image\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"toggleUploadImageModal\"],null],[12],[2,\"Edit picture\"],[13],[2,\"\\n\"],[6,[37,5],[[32,0,[\"showUploadImageModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                        \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"upload-image\",[30,[36,6],null,[[\"model\",\"imageProperty\",\"paramsHash\"],[[32,0,[\"user\"]],\"profileImage\",[30,[36,6],null,[[\"purpose\"],[\"profile_image\"]]]]]],[30,[36,0],[[32,0],\"toggleUploadImageModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n\\n                \"],[10,\"div\"],[14,0,\"pa5\"],[12],[2,\"\\n                    \"],[10,\"fieldset\"],[14,0,\"user-details-bottom\"],[12],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@class\"],[[32,0,[\"user\",\"errors\"]],[32,0,[\"user\",\"hasValidated\"]],\"name\",\"first-form-group\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"user-name\"],[12],[2,\"Full name\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[[16,\"data-test-name-input\",true]],[[\"@id\",\"@class\",\"@autocorrect\",\"@value\",\"@input\",\"@focus-out\"],[\"user-name\",\"user-name\",\"off\",[30,[36,3],[[32,0,[\"user\",\"name\"]]],null],[30,[36,0],[[32,0],[30,[36,8],[[32,0,[\"user\",\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"validate\",\"name\"],[[\"target\"],[[32,0,[\"user\"]]]]]]],null],[2,\"\\n\"],[6,[37,5],[[32,0,[\"user\",\"errors\",\"name\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"user-name\"]],[[\"@errors\",\"@property\"],[[32,0,[\"user\",\"errors\"]],\"name\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"p\"],[12],[2,\"Use your real name so people can recognize you\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"user\",\"errors\"]],[32,0,[\"user\",\"hasValidated\"]],\"slug\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"user-slug\"],[12],[2,\"Slug\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[[16,\"data-test-slug-input\",true]],[[\"@class\",\"@id\",\"@name\",\"@selectOnClick\",\"@autocorrect\",\"@value\",\"@input\",\"@focus-out\"],[\"user-name\",\"user-slug\",\"user\",\"true\",\"off\",[30,[36,3],[[32,0,[\"slugValue\"]]],null],[30,[36,0],[[32,0],[30,[36,8],[[32,0,[\"slugValue\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],[30,[36,4],[[32,0,[\"updateSlug\"]],[32,0,[\"slugValue\"]]],null]],null]]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[8,\"gh-blog-url\",[],[[],[]],null],[2,\"/author/\"],[1,[32,0,[\"slugValue\"]]],[13],[2,\"\\n                            \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"user-slug\"]],[[\"@errors\",\"@property\"],[[32,0,[\"user\",\"errors\"]],\"slug\"]],null],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"user\",\"errors\"]],[32,0,[\"user\",\"hasValidated\"]],\"email\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"user-email\"],[12],[2,\"Email\"],[13],[2,\"\\n\"],[6,[37,5],[[32,0,[\"canChangeEmail\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                \"],[8,\"gh-text-input\",[[16,\"data-test-email-input\",true]],[[\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocapitalize\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"email\",\"user-email\",\"email\",\"jamie@example.com\",\"off\",\"off\",\"off\",[30,[36,3],[[32,0,[\"user\",\"email\"]]],null],[30,[36,0],[[32,0],[30,[36,8],[[32,0,[\"user\",\"email\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"validate\",\"email\"],[[\"target\"],[[32,0,[\"user\"]]]]]]],null],[2,\"\\n                                \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"user-email\"]],[[\"@errors\",\"@property\"],[[32,0,[\"user\",\"errors\"]],\"email\"]],null],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                \"],[10,\"span\"],[12],[1,[32,0,[\"user\",\"email\"]]],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                            \"],[10,\"p\"],[12],[2,\"Used for notifications\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"rolesDropdownIsVisible\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"user-role\"],[12],[2,\"Role\"],[13],[2,\"\\n                                \"],[11,\"div\"],[24,0,\"gh-input pointer\"],[4,[38,7],[\"click\",[30,[36,0],[[32,0],\"toggleRoleSelectionModal\"],null]],null],[12],[1,[32,0,[\"user\",\"role\",\"name\"]]],[1,[30,[36,1],[\"arrow-down-small\"],null]],[13],[2,\"\\n                                \"],[10,\"p\"],[12],[2,\"What permissions should this user have?\"],[13],[2,\"\\n                            \"],[13],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"showRoleSelectionModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"select-user-role\",[30,[36,3],[[32,0,[\"user\",\"role\"]]],null],[30,[36,0],[[32,0],\"changeRole\"],null],[30,[36,0],[[32,0],\"toggleRoleSelectionModal\"],null],\"change-role\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[2,\"\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"user\",\"errors\"]],[32,0,[\"user\",\"hasValidated\"]],\"location\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"user-location\"],[12],[2,\"Location\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[[16,\"data-test-location-input\",true]],[[\"@id\",\"@value\",\"@input\",\"@focus-out\"],[\"user-location\",[30,[36,3],[[32,0,[\"user\",\"location\"]]],null],[30,[36,0],[[32,0],[30,[36,8],[[32,0,[\"user\",\"location\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"validate\",\"location\"],[[\"target\"],[[32,0,[\"user\"]]]]]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"user-location\"]],[[\"@errors\",\"@property\"],[[32,0,[\"user\",\"errors\"]],\"location\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Where in the world do you live?\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"user\",\"errors\"]],[32,0,[\"user\",\"hasValidated\"]],\"website\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"user-website\"],[12],[2,\"Website\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[[16,\"data-test-website-input\",true]],[[\"@type\",\"@id\",\"@autocapitalize\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"url\",\"user-website\",\"off\",\"off\",\"off\",[30,[36,3],[[32,0,[\"user\",\"website\"]]],null],[30,[36,0],[[32,0],[30,[36,8],[[32,0,[\"user\",\"website\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"validate\",\"website\"],[[\"target\"],[[32,0,[\"user\"]]]]]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"user-website\"]],[[\"@errors\",\"@property\"],[[32,0,[\"user\",\"errors\"]],\"website\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"Have a website or blog other than this one? Link it!\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"user\",\"errors\"]],[32,0,[\"user\",\"hasValidated\"]],\"facebook\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"user-facebook\"],[12],[2,\"Facebook profile\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[[16,\"data-test-facebook-input\",true]],[[\"@type\",\"@placeholder\",\"@autocorrect\",\"@id\",\"@name\",\"@value\",\"@input\",\"@focus-out\"],[\"url\",\"https://www.facebook.com/username\",\"off\",\"user-facebook\",\"user[facebook]\",[30,[36,3],[[32,0,[\"user\",\"facebook\"]]],null],[30,[36,0],[[32,0],[30,[36,8],[[32,0,[\"_scratchFacebook\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"validateFacebookUrl\"],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"user-facebook\"]],[[\"@errors\",\"@property\"],[[32,0,[\"user\",\"errors\"]],\"facebook\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"URL of your personal Facebook Profile\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"user\",\"errors\"]],[32,0,[\"user\",\"hasValidated\"]],\"twitter\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"user-twitter\"],[12],[2,\"Twitter profile\"],[13],[2,\"\\n                            \"],[8,\"gh-text-input\",[[16,\"data-test-twitter-input\",true]],[[\"@type\",\"@placeholder\",\"@autocorrect\",\"@id\",\"@name\",\"@value\",\"@input\",\"@focus-out\"],[\"url\",\"https://twitter.com/username\",\"off\",\"user-twitter\",\"user[twitter]\",[30,[36,3],[[32,0,[\"user\",\"twitter\"]]],null],[30,[36,0],[[32,0],[30,[36,8],[[32,0,[\"_scratchTwitter\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"validateTwitterUrl\"],null]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"user-twitter\"]],[[\"@errors\",\"@property\"],[[32,0,[\"user\",\"errors\"]],\"twitter\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"URL of your personal Twitter profile\"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                        \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@class\"],[[32,0,[\"user\",\"errors\"]],[32,0,[\"user\",\"hasValidated\"]],\"bio\",\"bio-container\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"label\"],[14,\"for\",\"user-bio\"],[12],[2,\"Bio\"],[13],[2,\"\\n                            \"],[8,\"gh-textarea\",[[16,\"data-test-bio-input\",true]],[[\"@id\",\"@value\",\"@input\",\"@focus-out\"],[\"user-bio\",[30,[36,3],[[32,0,[\"user\",\"bio\"]]],null],[30,[36,0],[[32,0],[30,[36,8],[[32,0,[\"user\",\"bio\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"validate\",\"bio\"],[[\"target\"],[[32,0,[\"user\"]]]]]]],null],[2,\"\\n                            \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"user-bio\"]],[[\"@errors\",\"@property\"],[[32,0,[\"user\",\"errors\"]],\"bio\"]],null],[2,\"\\n                            \"],[10,\"p\"],[12],[2,\"\\n                                Recommended: \"],[10,\"strong\"],[12],[2,\"200\"],[13],[2,\" characters. \\n                                You've used \"],[1,[30,[36,12],[[32,0,[\"user\",\"bio\"]],200],null]],[2,\"\\n                            \"],[13],[2,\"\\n                        \"]],\"parameters\":[]}]]],[2,\"\\n\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\\n            \"],[13],[2,\" \"],[2,\"\\n\\n\"],[6,[37,5],[[32,0,[\"canChangePassword\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[11,\"form\"],[24,1,\"password-reset\"],[24,0,\"user-profile\"],[24,\"novalidate\",\"novalidate\"],[24,\"autocomplete\",\"off\"],[4,[38,0],[[32,0],[30,[36,4],[[32,0,[\"user\",\"saveNewPassword\"]]],null]],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"pa5\"],[12],[2,\"\\n                        \"],[10,\"fieldset\"],[14,0,\"user-details-form\"],[12],[2,\"\\n\"],[6,[37,5],[[32,0,[\"isOwnProfile\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"user\",\"errors\"]],[32,0,[\"user\",\"hasValidated\"]],\"password\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                    \"],[10,\"label\"],[14,\"for\",\"user-password-old\"],[12],[2,\"Old password\"],[13],[2,\"\\n                                    \"],[8,\"gh-text-input\",[[16,\"data-test-old-pass-input\",true]],[[\"@type\",\"@id\",\"@autocomplete\",\"@value\",\"@input\",\"@keyEvents\"],[\"password\",\"user-password-old\",\"current-password\",[30,[36,3],[[32,0,[\"user\",\"password\"]]],null],[30,[36,0],[[32,0],\"updatePassword\"],[[\"value\"],[\"target.value\"]]],[30,[36,6],null,[[\"Enter\"],[[30,[36,0],[[32,0],[30,[36,4],[[32,0,[\"user\",\"saveNewPassword\"]]],null]],null]]]]]],null],[2,\"\\n                                    \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"user-old-pass\"]],[[\"@errors\",\"@property\"],[[32,0,[\"user\",\"errors\"]],\"password\"]],null],[2,\"\\n                                \"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"user\",\"errors\"]],[32,0,[\"user\",\"hasValidated\"]],\"newPassword\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"user-password-new\"],[12],[2,\"New password\"],[13],[2,\"\\n                                \"],[8,\"gh-text-input\",[[16,\"data-test-new-pass-input\",true]],[[\"@value\",\"@type\",\"@autocomplete\",\"@id\",\"@input\",\"@keyEvents\"],[[30,[36,3],[[32,0,[\"user\",\"newPassword\"]]],null],\"password\",\"new-password\",\"user-password-new\",[30,[36,0],[[32,0],\"updateNewPassword\"],[[\"value\"],[\"target.value\"]]],[30,[36,6],null,[[\"Enter\"],[[30,[36,0],[[32,0],[30,[36,4],[[32,0,[\"user\",\"saveNewPassword\"]]],null]],null]]]]]],null],[2,\"\\n                                \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"user-new-pass\"]],[[\"@errors\",\"@property\"],[[32,0,[\"user\",\"errors\"]],\"newPassword\"]],null],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n\\n                            \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"user\",\"errors\"]],[32,0,[\"user\",\"hasValidated\"]],\"ne2Password\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"user-new-password-verification\"],[12],[2,\"Verify password\"],[13],[2,\"\\n                                \"],[8,\"gh-text-input\",[[16,\"data-test-ne2-pass-input\",true]],[[\"@value\",\"@type\",\"@id\",\"@input\",\"@keyEvents\"],[[30,[36,3],[[32,0,[\"user\",\"ne2Password\"]]],null],\"password\",\"user-new-password-verification\",[30,[36,0],[[32,0],\"updateNe2Password\"],[[\"value\"],[\"target.value\"]]],[30,[36,6],null,[[\"Enter\"],[[30,[36,0],[[32,0],[30,[36,4],[[32,0,[\"user\",\"saveNewPassword\"]]],null]],null]]]]]],null],[2,\"\\n                                \"],[8,\"gh-error-message\",[[24,\"data-test-error\",\"user-ne2-pass\"]],[[\"@errors\",\"@property\"],[[32,0,[\"user\",\"errors\"]],\"ne2Password\"]],null],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n\\n                            \"],[10,\"div\"],[14,0,\"form-group\"],[12],[2,\"\\n                                \"],[8,\"gh-task-button\",[[24,\"data-test-save-pw-button\",\"true\"]],[[\"@buttonText\",\"@idleClass\",\"@class\",\"@task\"],[\"Change Password\",\"gh-btn-red\",\"gh-btn gh-btn-icon button-change-password\",[32,0,[\"user\",\"saveNewPassword\"]]]],null],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\" \"],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,5],[[32,0,[\"isOwnProfile\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[10,\"form\"],[14,0,\"user-profile\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"pa5\"],[12],[2,\"\\n                        \"],[10,\"fieldset\"],[14,0,\"user-details-form\"],[12],[2,\"\\n                            \"],[8,\"gh-form-group\",[],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"label\"],[14,\"for\",\"personal-token\"],[12],[2,\"Staff access token\"],[13],[2,\"\\n                                \"],[10,\"div\"],[15,0,[31,[\"relative flex items-center \",[30,[36,2],[[32,0,[\"copyContentKey\",\"isRunning\"]],\"hide-child-instant\"],null]]]],[12],[2,\"\\n                                    \"],[8,\"gh-text-input\",[[24,\"onclick\",\"this.select()\"]],[[\"@id\",\"@value\",\"@readonly\",\"@type\"],[\"personal-token\",[30,[36,3],[[32,0,[\"personalToken\"]]],null],\"\",\"text\"]],null],[2,\"\\n                                    \"],[10,\"div\"],[14,0,\"app-api-personal-token-buttons child\"],[12],[2,\"\\n                                        \"],[11,\"button\"],[24,0,\"app-button-regenerate\"],[24,\"data-tooltip\",\"Regenerate\"],[24,4,\"button\"],[4,[38,0],[[32,0],\"confirmRegenerateTokenModal\"],null],[12],[2,\"\\n                                            \"],[1,[30,[36,1],[\"reload\"],[[\"class\"],[\"w4 h4 stroke-midgrey\"]]]],[2,\"\\n                                        \"],[13],[2,\"\\n                                        \"],[11,\"button\"],[24,0,\"app-button-copy\"],[24,4,\"button\"],[4,[38,0],[[32,0],[30,[36,4],[[32,0,[\"copyContentKey\"]]],null]],null],[12],[2,\"\\n\"],[6,[37,5],[[32,0,[\"copyContentKey\",\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                                            \"],[1,[30,[36,1],[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-white\"]]]],[2,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                                            Copy\\n\"]],\"parameters\":[]}]]],[2,\"                                        \"],[13],[2,\"\\n                                    \"],[13],[2,\"\\n                                \"],[13],[2,\"\\n                                \"],[10,\"p\"],[12],[2,\"\\n                                    Give apps personal access without sharing your email/password.\\n                                \"],[13],[2,\"\\n\"],[6,[37,5],[[32,0,[\"personalTokenRegenerated\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[10,\"p\"],[14,0,\"green\"],[12],[2,\"Staff access token was successfully regenerated \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[6,[37,5],[[32,0,[\"showRegenerateTokenModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                                    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"regenerate-token\",[30,[36,0],[[32,0],\"regenerateToken\"],null],[30,[36,0],[[32,0],\"cancelRegenerateTokenModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"unless\",\"readonly\",\"perform\",\"if\",\"hash\",\"on\",\"mut\",\"limitErrorMessage\",\"user\",\"background-image-style\",\"gh-count-down-characters\"]}",
    "moduleName": "ghost-admin/templates/settings/staff/user.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/setup", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "rI0enGNG",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"gh-flow\"],[12],[2,\"\\n    \"],[10,\"header\"],[14,0,\"gh-flow-head\"],[12],[2,\"\\n        \"],[10,\"nav\"],[14,0,\"gh-flow-nav\"],[12],[2,\"\\n\"],[6,[37,1],[[32,0,[\"showBackLink\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                \"],[8,\"link-to\",[],[[\"@route\",\"@classNames\"],[[32,0,[\"backRoute\"]],\"gh-flow-back\"]],[[\"default\"],[{\"statements\":[[1,[30,[36,0],[\"arrow-left-small\"],null]],[2,\" Back\"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"            \"],[10,\"ol\"],[12],[2,\"\\n                \"],[8,\"gh-activating-list-item\",[],[[\"@route\",\"@linkClasses\"],[\"setup.one\",\"step\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[1,[30,[36,0],[\"check-circle\"],null]],[10,\"span\"],[14,0,\"num\"],[12],[2,\"1\"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[10,\"li\"],[14,0,\"divider\"],[12],[13],[2,\"\\n                \"],[8,\"gh-activating-list-item\",[],[[\"@route\",\"@linkClasses\"],[\"setup.two\",\"step\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[1,[30,[36,0],[\"check-circle\"],null]],[10,\"span\"],[14,0,\"num\"],[12],[2,\"2\"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[10,\"li\"],[14,0,\"divider\"],[12],[13],[2,\"\\n                \"],[8,\"gh-activating-list-item\",[],[[\"@route\",\"@linkClasses\"],[\"setup.three\",\"step\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[1,[30,[36,0],[\"check-circle\"],null]],[10,\"span\"],[14,0,\"num\"],[12],[2,\"3\"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-flow-content-wrap\"],[12],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-flow-content\"],[12],[2,\"\\n            \"],[1,[30,[36,3],[[30,[36,2],null,null]],null]],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"if\",\"-outlet\",\"component\"]}",
    "moduleName": "ghost-admin/templates/setup.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/setup/one", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "xeWbDEgo",
    "block": "{\"symbols\":[],\"statements\":[[10,\"header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Welcome to \"],[10,\"strong\"],[12],[2,\"Ghost\"],[13],[2,\"!\"],[13],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"All over the world, people have started \"],[10,\"em\"],[12],[2,\"2,000,000+\"],[13],[2,\" incredible sites with Ghost. Today, we’re starting yours.\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"figure\"],[14,0,\"gh-flow-screenshot\"],[12],[2,\"\\n    \"],[10,\"img\"],[14,\"src\",\"assets/img/install-welcome.png\"],[14,\"alt\",\"Ghost screenshot\"],[12],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[8,\"link-to\",[],[[\"@route\",\"@classNames\"],[\"setup.two\",\"gh-btn gh-btn-green gh-btn-lg gh-btn-icon gh-btn-icon-right\"]],[[\"default\"],[{\"statements\":[[2,\"\\n    \"],[10,\"span\"],[12],[2,\"Create your account →\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/templates/setup/one.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/setup/three", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "/rVe/3db",
    "block": "{\"symbols\":[\"task\"],\"statements\":[[10,\"header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Invite staff users\"],[13],[2,\"\\n    \"],[10,\"p\"],[12],[2,\"Ghost works best when shared with others. Collaborate, get feedback on your posts & work together on ideas.\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"div\"],[12],[10,\"img\"],[14,0,\"gh-flow-faces\"],[14,\"src\",\"assets/img/users.png\"],[14,\"alt\",\"\"],[12],[13],[13],[2,\"\\n\\n\"],[11,\"form\"],[24,0,\"gh-flow-invite\"],[4,[38,1],[[32,0],\"invite\"],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"errors\"]],[32,0,[\"hasValidated\"]],\"users\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"label\"],[14,\"for\",\"users\"],[12],[2,\"Enter one email address per line, we’ll handle the rest! \"],[1,[30,[36,0],[\"email\"],null]],[13],[2,\"\\n        \"],[8,\"gh-textarea\",[],[[\"@name\",\"@required\",\"@value\",\"@input\",\"@focus-out\"],[\"users\",\"required\",[30,[36,2],[[32,0,[\"users\"]]],null],[30,[36,1],[[32,0],[30,[36,3],[[32,0,[\"users\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,1],[[32,0],\"validate\"],null]]],null],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[8,\"gh-task-button\",[],[[\"@task\",\"@type\",\"@class\",\"@successClass\",\"@failureClass\"],[[32,0,[\"invite\"]],\"submit\",[31,[\"gh-btn gh-btn-default gh-btn-lg gh-btn-block \",[32,0,[\"buttonClass\"]]]],\"\",\"\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"span\"],[12],[2,\"\\n\"],[6,[37,4],[[32,1,[\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[1,[30,[36,0],[\"spinner\"],[[\"class\"],[\"no-margin\"]]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[1,[32,0,[\"buttonText\"]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"]],\"parameters\":[1]}]]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[11,\"button\"],[24,0,\"gh-flow-skip\"],[4,[38,1],[[32,0],\"skipInvite\"],null],[12],[2,\"\\n    I'll do this later, take me to my site!\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"action\",\"readonly\",\"mut\",\"if\"]}",
    "moduleName": "ghost-admin/templates/setup/three.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/setup/two", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "mOrVWn5R",
    "block": "{\"symbols\":[\"task\"],\"statements\":[[10,\"header\"],[12],[2,\"\\n    \"],[10,\"h1\"],[12],[2,\"Create your account\"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"form\"],[14,1,\"setup\"],[14,0,\"gh-flow-create\"],[12],[2,\"\\n    \"],[8,\"gh-profile-image\",[],[[\"@email\",\"@setImage\"],[[32,0,[\"email\"]],[30,[36,1],[[32,0],\"setImage\"],null]]],null],[2,\"\\n\\n    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"errors\"]],[32,0,[\"hasValidated\"]],\"blogTitle\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"label\"],[14,\"for\",\"blog-title\"],[12],[2,\"Site title\"],[13],[2,\"\\n        \"],[10,\"span\"],[14,0,\"gh-input-icon gh-icon-content\"],[12],[2,\"\\n            \"],[1,[30,[36,0],[\"content\"],null]],[2,\"\\n            \"],[8,\"gh-trim-focus-input\",[[16,\"data-test-blog-title-input\",true]],[[\"@tabindex\",\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@value\",\"@input\",\"@focus-out\"],[\"1\",\"text\",\"blog-title\",\"blog-title\",\"Eg. The Daily Awesome\",\"off\",[30,[36,2],[[32,0,[\"blogTitle\"]]],null],[30,[36,1],[[32,0],[30,[36,3],[[32,0,[\"blogTitle\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,1],[[32,0],\"preValidate\",\"blogTitle\"],null]]],null],[2,\"\\n        \"],[13],[2,\"\\n        \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"blogTitle\"]],null],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"errors\"]],[32,0,[\"hasValidated\"]],\"name\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"label\"],[14,\"for\",\"name\"],[12],[2,\"Full name\"],[13],[2,\"\\n        \"],[10,\"span\"],[14,0,\"gh-input-icon gh-icon-user\"],[12],[2,\"\\n            \"],[1,[30,[36,0],[\"user-circle\"],null]],[2,\"\\n            \"],[8,\"gh-text-input\",[[16,\"data-test-name-input\",true]],[[\"@tabindex\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"2\",\"name\",\"name\",\"Eg. John H. Watson\",\"off\",\"name\",[30,[36,2],[[32,0,[\"name\"]]],null],[30,[36,1],[[32,0],[30,[36,3],[[32,0,[\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,1],[[32,0],\"preValidate\",\"name\"],null]]],null],[2,\"\\n        \"],[13],[2,\"\\n        \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"name\"]],null],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"errors\"]],[32,0,[\"hasValidated\"]],\"email\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"label\"],[14,\"for\",\"email\"],[12],[2,\"Email address\"],[13],[2,\"\\n        \"],[10,\"span\"],[14,0,\"gh-input-icon gh-icon-mail\"],[12],[2,\"\\n            \"],[1,[30,[36,0],[\"email\"],null]],[2,\"\\n            \"],[8,\"gh-text-input\",[[16,\"data-test-email-input\",true]],[[\"@tabindex\",\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"3\",\"email\",\"email\",\"email\",\"Eg. john@example.com\",\"off\",\"username email\",[30,[36,2],[[32,0,[\"email\"]]],null],[30,[36,1],[[32,0],[30,[36,3],[[32,0,[\"email\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,1],[[32,0],\"preValidate\",\"email\"],null]]],null],[2,\"\\n        \"],[13],[2,\"\\n        \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"email\"]],null],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"errors\"]],[32,0,[\"hasValidated\"]],\"password\"]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"label\"],[14,\"for\",\"password\"],[12],[2,\"Password\"],[13],[2,\"\\n        \"],[10,\"span\"],[14,0,\"gh-input-icon gh-icon-lock\"],[12],[2,\"\\n            \"],[1,[30,[36,0],[\"lock\"],null]],[2,\"\\n            \"],[8,\"gh-text-input\",[[16,\"data-test-password-input\",true]],[[\"@tabindex\",\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"4\",\"password\",\"password\",\"password\",\"At least 10 characters\",\"off\",\"new-password\",[30,[36,2],[[32,0,[\"password\"]]],null],[30,[36,1],[[32,0],[30,[36,3],[[32,0,[\"password\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,1],[[32,0],\"preValidate\",\"password\"],null]]],null],[2,\"\\n        \"],[13],[2,\"\\n        \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"errors\"]],\"password\"]],null],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[8,\"gh-task-button\",[],[[\"@task\",\"@type\",\"@tabindex\",\"@class\"],[[32,0,[\"setup\"]],\"submit\",\"5\",\"gh-btn gh-btn-green gh-btn-lg gh-btn-block gh-btn-icon\"]],[[\"default\"],[{\"statements\":[[2,\"\\n\"],[6,[37,4],[[32,1,[\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"            \"],[10,\"span\"],[12],[1,[30,[36,0],[\"spinner\"],[[\"class\"],[\"gh-icon-spinner gh-btn-icon-no-margin\"]]]],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[10,\"span\"],[12],[2,\"Last step: Invite staff users →\"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"    \"]],\"parameters\":[1]}]]],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[10,\"p\"],[14,0,\"main-error\"],[12],[1,[32,0,[\"flowErrors\"]]],[2,\" \"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"action\",\"readonly\",\"mut\",\"if\"]}",
    "moduleName": "ghost-admin/templates/setup/two.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/signin", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "GFjm+F18",
    "block": "{\"symbols\":[\"task\"],\"statements\":[[10,\"div\"],[14,0,\"gh-flow\"],[12],[2,\"\\n    \"],[10,\"div\"],[14,0,\"gh-flow-content-wrap\"],[12],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-flow-content\"],[12],[2,\"\\n\"],[6,[37,2],[[32,0,[\"passwordResetEmailSent\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"div\"],[14,0,\"gh-auth-email\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-auth-animation-container\"],[12],[2,\"\\n                        \"],[10,\"div\"],[14,0,\"gh-auth-email-animation\"],[12],[2,\"\\n                            \"],[1,[30,[36,0],[\"locked-email-back\"],[[\"class\"],[\"gh-auth-envelope-back\"]]]],[2,\"\\n                            \"],[1,[30,[36,0],[\"locked-email-front\"],[[\"class\"],[\"gh-auth-envelope-front\"]]]],[2,\"\\n                            \"],[10,\"div\"],[14,0,\"gh-auth-paper\"],[12],[2,\"\\n                                \"],[1,[30,[36,0],[\"locked-email-lock\"],[[\"class\"],[\"gh-auth-lock\"]]]],[2,\"\\n                            \"],[13],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-auth-lock-body\"],[12],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"\\n                            For security, you need to create a new password. An email has been sent to you with instructions!\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"            \"],[11,\"form\"],[24,1,\"login\"],[24,\"method\",\"post\"],[24,0,\"gh-signin\"],[24,\"novalidate\",\"novalidate\"],[4,[38,1],[[32,0],\"authenticate\"],[[\"on\"],[\"submit\"]]],[12],[2,\"\\n                \"],[10,\"header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-site-icon\"],[15,5,[32,0,[\"siteIconStyle\"]]],[12],[13],[2,\"\\n                    \"],[10,\"h1\"],[12],[2,\"Sign in to \"],[1,[32,0,[\"config\",\"blogTitle\"]]],[2,\".\"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"],[6,[37,2],[[32,0,[\"config\",\"oauth\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"a\"],[14,6,\"oauth/google\"],[14,0,\"login gh-btn gh-btn-login gh-btn-block gh-btn-white gh-btn-icon gh-center\"],[12],[2,\"\\n                        \"],[10,\"span\"],[14,5,\"color: #15171a;\"],[12],[1,[30,[36,0],[\"google-favicon\"],null]],[2,\"Sign in with Google\"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\\n                    \"],[10,\"div\"],[14,0,\"gh-separator\"],[12],[2,\"\\n                        or\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"signin\",\"errors\"]],[32,0,[\"hasValidated\"]],\"identification\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[12],[2,\"Email address\"],[13],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-input-icon gh-icon-mail\"],[12],[2,\"\\n                        \"],[8,\"gh-trim-focus-input\",[],[[\"@class\",\"@type\",\"@placeholder\",\"@name\",\"@autocapitalize\",\"@autocorrect\",\"@autocomplete\",\"@tabindex\",\"@value\",\"@input\",\"@focus-out\"],[\"email\",\"email\",\"jamie@example.com\",\"identification\",\"off\",\"off\",\"username\",\"1\",[30,[36,3],[[32,0,[\"signin\",\"identification\"]]],null],[30,[36,1],[[32,0],[30,[36,4],[[32,0,[\"signin\",\"identification\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,1],[[32,0],\"validate\",\"identification\"],null]]],null],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"signin\",\"errors\"]],[32,0,[\"hasValidated\"]],\"password\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[12],[2,\"Password\"],[13],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-input-icon gh-icon-lock forgotten-wrap\"],[12],[2,\"\\n                        \"],[8,\"gh-text-input\",[],[[\"@class\",\"@type\",\"@placeholder\",\"@name\",\"@tabindex\",\"@autocomplete\",\"@autocorrect\",\"@value\",\"@input\"],[\"password\",\"password\",\"•••••••••••••••\",\"password\",\"2\",\"current-password\",\"off\",[30,[36,3],[[32,0,[\"signin\",\"password\"]]],null],[30,[36,1],[[32,0],[30,[36,4],[[32,0,[\"signin\",\"password\"]]],null]],[[\"value\"],[\"target.value\"]]]]],null],[2,\"\\n\\n                        \"],[8,\"gh-task-button\",[],[[\"@task\",\"@class\",\"@tabindex\",\"@type\",\"@successClass\",\"@failureClass\"],[[32,0,[\"forgotten\"]],\"forgotten-link gh-btn gh-btn-link gh-btn-icon\",\"4\",\"button\",\"\",\"\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                            \"],[10,\"span\"],[12],[6,[37,2],[[32,1,[\"isRunning\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,[30,[36,0],[\"spinner\"],[[\"class\"],[\"gh-spinner\"]]]]],\"parameters\":[]},{\"statements\":[[2,\"Forgot?\"]],\"parameters\":[]}]]],[13],[2,\"\\n                        \"]],\"parameters\":[1]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                \"],[8,\"gh-task-button\",[[16,5,[31,[\"background: \",[32,0,[\"accentColor\"]],\";\"]]]],[[\"@buttonText\",\"@task\",\"@showSuccess\",\"@class\",\"@type\",\"@tabindex\"],[\"Sign in →\",[32,0,[\"validateAndAuthenticate\"]],false,\"login gh-btn gh-btn-login gh-btn-block gh-btn-icon js-login-button\",\"submit\",\"3\"]],null],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"p\"],[14,0,\"main-error\"],[12],[1,[30,[36,2],[[32,0,[\"flowErrors\"]],[32,0,[\"flowErrors\"]]],null]],[2,\" \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"action\",\"if\",\"readonly\",\"mut\"]}",
    "moduleName": "ghost-admin/templates/signin.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/signup", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "1RJo8wjQ",
    "block": "{\"symbols\":[],\"statements\":[[10,\"div\"],[14,0,\"gh-flow\"],[12],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-flow-content-wrap\"],[12],[2,\"\\n        \"],[10,\"section\"],[14,0,\"gh-flow-content\"],[12],[2,\"\\n            \"],[10,\"header\"],[12],[2,\"\\n                \"],[10,\"h1\"],[12],[2,\"Create your account\"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"form\"],[14,1,\"signup\"],[14,0,\"gh-flow-create\"],[14,\"method\",\"post\"],[14,\"novalidate\",\"novalidate\"],[15,\"onsubmit\",[30,[36,0],[[32,0],\"submit\"],null]],[12],[2,\"\\n                \"],[8,\"gh-profile-image\",[],[[\"@email\",\"@setImage\"],[[32,0,[\"signupDetails\",\"email\"]],[30,[36,0],[[32,0],\"setImage\"],null]]],null],[2,\"\\n\\n                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"signupDetails\",\"errors\"]],[32,0,[\"signupDetails\",\"hasValidated\"]],\"name\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"name\"],[12],[2,\"Full name\"],[13],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-input-icon gh-icon-user\"],[12],[2,\"\\n                        \"],[1,[30,[36,1],[\"user-circle\"],null]],[2,\"\\n                        \"],[8,\"gh-trim-focus-input\",[[24,\"data-test-input\",\"name\"]],[[\"@tabindex\",\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"1\",\"text\",\"display-name\",\"display-name\",\"Eg. John H. Watson\",\"off\",\"name\",[30,[36,2],[[32,0,[\"signupDetails\",\"name\"]]],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"signupDetails\",\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"validate\",\"name\"],null]]],null],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"signupDetails\",\"errors\"]],\"name\"]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"signupDetails\",\"errors\"]],[32,0,[\"signupDetails\",\"hasValidated\"]],\"email\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"email\"],[12],[2,\"Email address\"],[13],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-input-icon gh-icon-mail\"],[12],[2,\"\\n                        \"],[1,[30,[36,1],[\"email\"],null]],[2,\"\\n                        \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"email\"]],[[\"@tabindex\",\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"2\",\"text\",\"username\",\"username\",\"Eg. john@example.com\",\"off\",\"username email\",[30,[36,2],[[32,0,[\"signupDetails\",\"email\"]]],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"signupDetails\",\"email\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"validate\",\"email\"],null]]],null],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"signupDetails\",\"errors\"]],\"email\"]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                \"],[8,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[32,0,[\"signupDetails\",\"errors\"]],[32,0,[\"signupDetails\",\"hasValidated\"]],\"password\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[10,\"label\"],[14,\"for\",\"password\"],[12],[2,\"Password\"],[13],[2,\"\\n                    \"],[10,\"span\"],[14,0,\"gh-input-icon gh-icon-lock\"],[12],[2,\"\\n                        \"],[1,[30,[36,1],[\"lock\"],null]],[2,\"\\n                        \"],[8,\"gh-text-input\",[[24,\"data-test-input\",\"password\"]],[[\"@tabindex\",\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"3\",\"password\",\"password\",\"password\",\"At least 10 characters\",\"off\",\"new-password\",[30,[36,2],[[32,0,[\"signupDetails\",\"password\"]]],null],[30,[36,0],[[32,0],[30,[36,3],[[32,0,[\"signupDetails\",\"password\"]]],null]],[[\"value\"],[\"target.value\"]]],[30,[36,0],[[32,0],\"validate\",\"password\"],null]]],null],[2,\"\\n                    \"],[13],[2,\"\\n                    \"],[8,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[32,0,[\"signupDetails\",\"errors\"]],\"password\"]],null],[2,\"\\n                \"]],\"parameters\":[]}]]],[2,\"\\n\\n                \"],[8,\"gh-task-button\",[],[[\"@buttonText\",\"@type\",\"@form\",\"@defaultClick\",\"@runningText\",\"@task\",\"@class\",\"@tabindex\"],[\"Create Account\",\"submit\",\"signup\",true,\"Creating\",[32,0,[\"signup\"]],\"gh-btn-create-account gh-btn gh-btn-green gh-btn-lg gh-btn-block gh-btn-icon\",\"3\"]],null],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"p\"],[14,0,\"main-error\"],[12],[1,[30,[36,4],[[32,0,[\"flowErrors\"]],[32,0,[\"flowErrors\"]]],null]],[2,\" \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"action\",\"svg-jar\",\"readonly\",\"mut\",\"if\"]}",
    "moduleName": "ghost-admin/templates/signup.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/site", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "53Jg8toH",
    "block": "{\"symbols\":[],\"statements\":[[8,\"gh-site-iframe\",[],[[\"@guid\"],[[32,0,[\"guid\"]]]],[[\"default\"],[{\"statements\":[],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/templates/site.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/tag", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Pyl8g7G5",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[10,\"form\"],[14,0,\"mb15\"],[12],[2,\"\\n        \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n            \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"\\n                \"],[8,\"link-to\",[[24,\"data-test-link\",\"tags-back\"]],[[\"@route\"],[\"tags\"]],[[\"default\"],[{\"statements\":[[2,\"Tags\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[10,\"span\"],[12],[1,[30,[36,2],[\"arrow-right\"],null]],[13],[2,\"\\n                \"],[1,[30,[36,3],[[32,0,[\"tag\",\"isNew\"]],\"New tag\",[32,0,[\"tag\",\"name\"]]],null]],[2,\"\\n            \"],[13],[2,\"\\n            \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n                \"],[8,\"gh-task-button\",[],[[\"@task\",\"@type\",\"@class\",\"@data-test-button\"],[[32,0,[\"save\"]],\"button\",\"gh-btn gh-btn-primary gh-btn-icon\",\"save\"]],null],[2,\"\\n            \"],[13],[2,\"\\n        \"]],\"parameters\":[]}]]],[2,\"\\n\\n        \"],[8,\"gh-tag-settings-form\",[],[[\"@tag\",\"@scratchTag\",\"@setProperty\"],[[32,0,[\"tag\"]],[32,0,[\"scratchTag\"]],[30,[36,0],[[32,0],\"setProperty\"],null]]],null],[2,\"\\n    \"],[13],[2,\"\\n\\n\"],[6,[37,4],[[32,0,[\"tag\",\"isNew\"]]],null,[[\"default\"],[{\"statements\":[[2,\"        \"],[10,\"div\"],[12],[2,\"\\n            \"],[11,\"button\"],[24,0,\"gh-btn gh-btn-red gh-btn-icon\"],[24,4,\"button\"],[4,[38,1],[\"click\",[30,[36,0],[[32,0],\"openDeleteTagModal\"],null]],null],[12],[2,\"\\n                \"],[10,\"span\"],[12],[2,\"Delete tag\"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"showUnsavedChangesModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[30,[36,0],[[32,0],\"leaveScreen\"],null],[30,[36,0],[[32,0],\"toggleUnsavedChangesModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n\"],[6,[37,3],[[32,0,[\"showDeleteTagModal\"]]],null,[[\"default\"],[{\"statements\":[[2,\"    \"],[8,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"delete-tag\",[32,0,[\"tag\"]],[30,[36,0],[[32,0],\"deleteTag\"],null],[30,[36,0],[[32,0],\"closeDeleteTagModal\"],null],\"action wide\"]],null],[2,\"\\n\"]],\"parameters\":[]}]]]],\"hasEval\":false,\"upvars\":[\"action\",\"on\",\"svg-jar\",\"if\",\"unless\"]}",
    "moduleName": "ghost-admin/templates/tag.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/tags-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "uN5b8qyj",
    "block": "{\"symbols\":[],\"statements\":[[10,\"section\"],[14,0,\"gh-canvas\"],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"Tags\"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-primary\"]],[[\"@route\"],[\"tag.new\"]],[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[2,\"New tag\"],[13]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"div\"],[14,0,\"gh-content\"],[12],[2,\"\\n        \"],[8,\"gh-loading-spinner\",[],[[],[]],null],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[]}",
    "moduleName": "ghost-admin/templates/tags-loading.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/tags", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "xZcpnk9V",
    "block": "{\"symbols\":[\"tag\"],\"statements\":[[11,\"section\"],[24,0,\"gh-canvas\"],[4,[38,2],[\"c\",[30,[36,1],[[32,0],\"newTag\"],null]],null],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-canvas-title\"],[14,\"data-test-screen-title\",\"\"],[12],[2,\"Tags\"],[13],[2,\"\\n        \"],[10,\"section\"],[14,0,\"view-actions\"],[12],[2,\"\\n            \"],[10,\"div\"],[14,0,\"gh-contentfilter gh-btn-group\"],[12],[2,\"\\n                \"],[11,\"button\"],[16,0,[31,[\"gh-btn \",[30,[36,4],[[30,[36,3],[[32,0,[\"type\"]],\"public\"],null],\"gh-btn-group-selected\"],null]]]],[4,[38,1],[[32,0],\"changeType\",\"public\"],null],[12],[10,\"span\"],[12],[2,\"Etiquetas Publicas\"],[13],[13],[2,\"\\n                \"],[11,\"button\"],[16,0,[31,[\"gh-btn \",[30,[36,4],[[30,[36,3],[[32,0,[\"type\"]],\"internal\"],null],\"gh-btn-group-selected\"],null]]]],[4,[38,1],[[32,0],\"changeType\",\"internal\"],null],[12],[10,\"span\"],[12],[2,\"Etiquetas Internas\"],[13],[13],[2,\"\\n            \"],[13],[2,\"\\n            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-primary\"]],[[\"@route\"],[\"tag.new\"]],[[\"default\"],[{\"statements\":[[10,\"span\"],[12],[2,\"Nueva Etiqueta\"],[13]],\"parameters\":[]}]]],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n\\n    \"],[10,\"section\"],[14,0,\"view-container content-list\"],[12],[2,\"\\n        \"],[10,\"ol\"],[15,0,[31,[\"tags-list gh-list \",[30,[36,5],[[32,0,[\"sortedTags\"]],\"no-posts\"],null]]]],[12],[2,\"\\n\"],[6,[37,4],[[32,0,[\"sortedTags\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                \"],[10,\"li\"],[14,0,\"gh-list-row header\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-list-header gh-list-cellwidth-70\"],[12],[2,\"Etiqueta\"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-list-header gh-list-cellwidth-10\"],[12],[2,\"Slug\"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-list-header gh-list-cellwidth-10\"],[12],[2,\"Cantidad de Publicaciones\"],[13],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"gh-list-header gh-list-cellwidth-10\"],[12],[13],[2,\"\\n                \"],[13],[2,\"\\n                \"],[8,\"vertical-collection\",[],[[\"@items\",\"@key\",\"@containerSelector\",\"@estimateHeight\",\"@bufferSize\"],[[32,0,[\"sortedTags\"]],\"id\",\".gh-main\",60,20]],[[\"default\"],[{\"statements\":[[2,\"\\n                    \"],[8,\"gh-tags-list-item\",[[16,\"data-test-tag-id\",[32,1,[\"id\"]]]],[[\"@tag\"],[[32,1]]],null],[2,\"\\n                \"]],\"parameters\":[1]}]]],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                \"],[10,\"li\"],[14,0,\"no-posts-box\"],[12],[2,\"\\n                    \"],[10,\"div\"],[14,0,\"no-posts\"],[12],[2,\"\\n                            \"],[1,[30,[36,0],[\"tags-placeholder\"],[[\"class\"],[\"gh-tags-placeholder\"]]]],[2,\"\\n                            \"],[10,\"h3\"],[12],[2,\"Aun no has creado ninguna etiqueta!\"],[13],[2,\"\\n                            \"],[8,\"link-to\",[[24,0,\"gh-btn gh-btn-primary gh-btn-lg gh-btn-green\"]],[[\"@route\"],[\"tag.new\"]],[[\"default\"],[{\"statements\":[[2,\"\\n                                \"],[10,\"span\"],[12],[2,\"Crear una nueva etiqueta\"],[13],[2,\"\\n                            \"]],\"parameters\":[]}]]],[2,\"\\n                    \"],[13],[2,\"\\n                \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\\n\"],[1,[30,[36,7],[[30,[36,6],null,null]],null]]],\"hasEval\":false,\"upvars\":[\"svg-jar\",\"action\",\"on-key\",\"eq\",\"if\",\"unless\",\"-outlet\",\"component\"]}",
    "moduleName": "ghost-admin/templates/tags.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/whatsnew", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "GKmyBotj",
    "block": "{\"symbols\":[\"entry\"],\"statements\":[[11,\"section\"],[24,0,\"gh-canvas js-settings-content\"],[4,[38,4],null,null],[12],[2,\"\\n    \"],[8,\"gh-canvas-header\",[[24,0,\"gh-canvas-header\"]],[[],[]],[[\"default\"],[{\"statements\":[[2,\"\\n        \"],[10,\"h2\"],[14,0,\"gh-whats-new-heading\"],[12],[1,[30,[36,5],[\"gift\"],null]],[2,\" What's new?\"],[13],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-about-header-actions\"],[12],[2,\"\\n            \"],[10,\"a\"],[14,0,\"gh-btn gh-btn-outline\"],[14,6,\"https://ghost.org/docs/\"],[14,\"target\",\"_blank\"],[12],[10,\"span\"],[12],[2,\"User documentation\"],[13],[13],[2,\"\\n            \"],[10,\"a\"],[14,0,\"gh-btn gh-btn-outline\"],[14,6,\"https://forum.ghost.org/\"],[14,\"target\",\"_blank\"],[12],[10,\"span\"],[12],[2,\"Get help with Ghost\"],[13],[13],[2,\"\\n            \"],[10,\"a\"],[14,0,\"gh-btn gh-btn-black\"],[14,6,\"https://ghost.org/docs/contributing/\"],[14,\"target\",\"_blank\"],[12],[10,\"span\"],[12],[2,\"Get involved\"],[13],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"]],\"parameters\":[]}]]],[2,\"\\n    \"],[10,\"section\"],[14,0,\"view-container\"],[12],[2,\"\\n        \"],[10,\"div\"],[14,0,\"gh-about-container\"],[12],[2,\"\\n            \"],[11,\"section\"],[24,0,\"gh-whats-new gh-about-box\"],[4,[38,7],[[30,[36,6],[[32,0,[\"whatsNew\",\"updateLastSeen\"]]],null]],null],[12],[2,\"\\n\"],[6,[37,9],[[30,[36,8],[[30,[36,8],[[32,0,[\"whatsNew\",\"entries\"]]],null]],null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[11,\"a\"],[16,6,[31,[[32,1,[\"url\"]]]]],[24,0,\"gh-wn-entry\"],[4,[38,1],null,[[\"shouldScroll\"],[[30,[36,0],[[32,1,[\"slug\"]],[32,0,[\"entry\"]]],null]]]],[12],[2,\"\\n                        \"],[10,\"h4\"],[12],[1,[30,[36,2],[[32,1,[\"published_at\"]],\"DD MMMM YYYY\"],null]],[13],[2,\"\\n                        \"],[10,\"h1\"],[12],[1,[32,1,[\"title\"]]],[13],[2,\"\\n\"],[6,[37,3],[[32,1,[\"feature_image\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                            \"],[10,\"img\"],[14,0,\"mb5\"],[15,\"src\",[32,1,[\"feature_image\"]]],[12],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[10,\"div\"],[14,0,\"gh-wn-content\"],[12],[2,\"\\n\"],[6,[37,3],[[32,1,[\"custom_excerpt\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[2,\"                            \"],[10,\"p\"],[12],[1,[32,1,[\"custom_excerpt\"]]],[13],[2,\"\\n                            \"],[10,\"a\"],[15,6,[32,1,[\"url\"]]],[14,0,\"dib fw6 mb6\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[2,\"Read the full post →\"],[13],[2,\"\\n\"]],\"parameters\":[]},{\"statements\":[[2,\"                            \"],[2,[32,1,[\"html\"]]],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[1]}]]],[2,\"                \"],[10,\"a\"],[14,0,\"green\"],[14,6,\"https://ghost.org/changelog\"],[14,\"target\",\"_blank\"],[14,\"rel\",\"noopener noreferrer\"],[12],[2,\"See all updates →\"],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"div\"],[14,0,\"gh-about-content-actions\"],[12],[2,\"\\n                \"],[10,\"a\"],[14,0,\"gh-btn gh-btn-outline\"],[14,6,\"https://ghost.org/docs/\"],[14,\"target\",\"_blank\"],[12],[10,\"span\"],[12],[2,\"User documentation\"],[13],[13],[2,\"\\n                \"],[10,\"a\"],[14,0,\"gh-btn gh-btn-outline\"],[14,6,\"https://forum.ghost.org/\"],[14,\"target\",\"_blank\"],[12],[10,\"span\"],[12],[2,\"Get help with Ghost\"],[13],[13],[2,\"\\n                \"],[10,\"a\"],[14,0,\"gh-btn gh-btn-black\"],[14,6,\"https://ghost.org/docs/contributing/\"],[14,\"target\",\"_blank\"],[12],[10,\"span\"],[12],[2,\"Get involved\"],[13],[13],[2,\"\\n            \"],[13],[2,\"\\n\\n            \"],[10,\"section\"],[14,0,\"gh-env-details gh-about-box grey\"],[12],[2,\"\\n                \"],[10,\"div\"],[14,0,\"gh-about-logo\"],[12],[2,\"\\n                    \"],[1,[30,[36,5],[\"ghost-logo-orb\"],[[\"alt\"],[\"Ghost\"]]]],[2,\"\\n                \"],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"upgradeStatus\",\"message\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"section\"],[14,0,\"gh-upgrade-notification\"],[12],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"\\n                            \"],[10,\"strong\"],[12],[2,\"Update available!\"],[13],[2,\" \"],[1,[32,0,[\"upgradeStatus\",\"message\"]]],[2,\"\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[10,\"ul\"],[14,0,\"gh-env-list\"],[12],[2,\"\\n                    \"],[10,\"li\"],[12],[10,\"strong\"],[12],[2,\"Version:\"],[13],[2,\" \"],[1,[32,0,[\"config\",\"version\"]]],[13],[2,\"\\n                    \"],[10,\"li\"],[12],[10,\"strong\"],[12],[2,\"Environment:\"],[13],[2,\" \"],[10,\"span\"],[14,0,\"ttc\"],[12],[1,[32,0,[\"config\",\"environment\"]]],[13],[13],[2,\"\\n                    \"],[10,\"li\"],[14,0,\"gh-env-list-database-type\"],[12],[10,\"strong\"],[12],[2,\"Database:\"],[13],[2,\" \"],[1,[32,0,[\"config\",\"database\"]]],[13],[2,\"\\n                    \"],[10,\"li\"],[12],[10,\"strong\"],[12],[2,\"Mail:\"],[13],[2,\" \"],[6,[37,3],[[32,0,[\"config\",\"mail\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,[32,0,[\"config\",\"mail\"]]]],\"parameters\":[]},{\"statements\":[[2,\"Native\"]],\"parameters\":[]}]]],[13],[2,\"\\n\"],[6,[37,3],[[30,[36,10],null,null]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"li\"],[12],[10,\"strong\"],[12],[2,\"Developer experiments:\"],[13],[2,\" \"],[10,\"span\"],[14,0,\"gh-badge\"],[12],[2,\"Enabled\"],[13],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"                \"],[13],[2,\"\\n\\n\"],[6,[37,3],[[32,0,[\"showDatabaseWarning\"]]],null,[[\"default\"],[{\"statements\":[[2,\"                    \"],[10,\"section\"],[14,0,\"gh-upgrade-notification\"],[12],[2,\"\\n                        \"],[10,\"p\"],[12],[2,\"\\n                            \"],[10,\"strong\"],[12],[2,\"Warning:\"],[13],[2,\" MySQL 8 will be the required database in the next major release of Ghost. Make sure your database is up to date to ensure forwards compatibility.\\n                        \"],[13],[2,\"\\n                    \"],[13],[2,\"\\n\"]],\"parameters\":[]}]]],[2,\"\\n                \"],[10,\"footer\"],[14,0,\"gh-copyright-info\"],[12],[2,\"\\n                    Copyright © 2013 – \"],[1,[32,0,[\"copyrightYear\"]]],[2,\" Ghost Foundation, released under the \"],[10,\"a\"],[14,6,\"https://github.com/TryGhost/Ghost/blob/master/LICENSE\"],[14,\"target\",\"_blank\"],[12],[2,\"MIT license\"],[13],[2,\". \"],[10,\"a\"],[14,6,\"https://ghost.org/\"],[14,\"target\",\"_blank\"],[12],[2,\"Ghost\"],[13],[2,\" is a registered trademark of \"],[10,\"a\"],[14,6,\"https://ghost.org/trademark/\"],[14,\"target\",\"_blank\"],[12],[2,\"Ghost Foundation Ltd\"],[13],[2,\".\\n                \"],[13],[2,\"\\n            \"],[13],[2,\"\\n        \"],[13],[2,\"\\n    \"],[13],[2,\"\\n\"],[13],[2,\"\\n\"]],\"hasEval\":false,\"upvars\":[\"eq\",\"scroll-to\",\"moment-format\",\"if\",\"scroll-top\",\"svg-jar\",\"perform\",\"did-insert\",\"-track-array\",\"each\",\"enable-developer-experiments\"]}",
    "moduleName": "ghost-admin/templates/whatsnew.hbs"
  });

  _exports.default = _default;
});
;define("ghost-admin/tests/mirage/mirage.lint-test", [], function () {
  "use strict";

  describe('ESLint | mirage', function () {
    it('mirage/config.js', function () {// test passed
    });
    it('mirage/config/api-keys.js', function () {// test passed
    });
    it('mirage/config/authentication.js', function () {// test passed
    });
    it('mirage/config/config.js', function () {// test passed
    });
    it('mirage/config/custom-theme-settings.js', function () {// test passed
    });
    it('mirage/config/emails.js', function () {// test passed
    });
    it('mirage/config/integrations.js', function () {// test passed
    });
    it('mirage/config/invites.js', function () {// test passed
    });
    it('mirage/config/labels.js', function () {// test passed
    });
    it('mirage/config/members.js', function () {// test passed
    });
    it('mirage/config/offers.js', function () {// test passed
    });
    it('mirage/config/pages.js', function () {// test passed
    });
    it('mirage/config/posts.js', function () {// test passed
    });
    it('mirage/config/products.js', function () {// test passed
    });
    it('mirage/config/roles.js', function () {// test passed
    });
    it('mirage/config/settings.js', function () {// test passed
    });
    it('mirage/config/site.js', function () {// test passed
    });
    it('mirage/config/slugs.js', function () {// test passed
    });
    it('mirage/config/snippets.js', function () {// test passed
    });
    it('mirage/config/tags.js', function () {// test passed
    });
    it('mirage/config/themes.js', function () {// test passed
    });
    it('mirage/config/uploads.js', function () {// test passed
    });
    it('mirage/config/users.js', function () {// test passed
    });
    it('mirage/config/webhooks.js', function () {// test passed
    });
    it('mirage/factories/api-key.js', function () {// test passed
    });
    it('mirage/factories/email.js', function () {// test passed
    });
    it('mirage/factories/integration.js', function () {// test passed
    });
    it('mirage/factories/invite.js', function () {// test passed
    });
    it('mirage/factories/label.js', function () {// test passed
    });
    it('mirage/factories/member-activity-event.js', function () {// test passed
    });
    it('mirage/factories/member.js', function () {// test passed
    });
    it('mirage/factories/notification.js', function () {// test passed
    });
    it('mirage/factories/offer.js', function () {// test passed
    });
    it('mirage/factories/post.js', function () {// test passed
    });
    it('mirage/factories/role.js', function () {// test passed
    });
    it('mirage/factories/tag.js', function () {// test passed
    });
    it('mirage/factories/user.js', function () {// test passed
    });
    it('mirage/factories/webhook.js', function () {// test passed
    });
    it('mirage/fixtures/configs.js', function () {// test passed
    });
    it('mirage/fixtures/products.js', function () {// test passed
    });
    it('mirage/fixtures/roles.js', function () {// test passed
    });
    it('mirage/fixtures/settings.js', function () {// test passed
    });
    it('mirage/fixtures/sites.js', function () {// test passed
    });
    it('mirage/fixtures/themes.js', function () {// test passed
    });
    it('mirage/fixtures/timezones.js', function () {// test passed
    });
    it('mirage/models/api-key.js', function () {// test passed
    });
    it('mirage/models/config.js', function () {// test passed
    });
    it('mirage/models/custom-theme-setting.js', function () {// test passed
    });
    it('mirage/models/email.js', function () {// test passed
    });
    it('mirage/models/integration.js', function () {// test passed
    });
    it('mirage/models/invite.js', function () {// test passed
    });
    it('mirage/models/label.js', function () {// test passed
    });
    it('mirage/models/member-activity-event.js', function () {// test passed
    });
    it('mirage/models/member.js', function () {// test passed
    });
    it('mirage/models/notification.js', function () {// test passed
    });
    it('mirage/models/page.js', function () {// test passed
    });
    it('mirage/models/post.js', function () {// test passed
    });
    it('mirage/models/product.js', function () {// test passed
    });
    it('mirage/models/role.js', function () {// test passed
    });
    it('mirage/models/site.js', function () {// test passed
    });
    it('mirage/models/snippet.js', function () {// test passed
    });
    it('mirage/models/subscriber.js', function () {// test passed
    });
    it('mirage/models/tag.js', function () {// test passed
    });
    it('mirage/models/theme.js', function () {// test passed
    });
    it('mirage/models/user.js', function () {// test passed
    });
    it('mirage/models/webhook.js', function () {// test passed
    });
    it('mirage/scenarios/default.js', function () {// test passed
    });
    it('mirage/serializers/application.js', function () {// test passed
    });
    it('mirage/serializers/integration.js', function () {// test passed
    });
    it('mirage/serializers/label.js', function () {// test passed
    });
    it('mirage/serializers/member-activity-event.js', function () {// test passed
    });
    it('mirage/serializers/page.js', function () {// test passed
    });
    it('mirage/serializers/post.js', function () {// test passed
    });
    it('mirage/serializers/tag.js', function () {// test passed
    });
    it('mirage/serializers/user.js', function () {// test passed
    });
    it('mirage/utils.js', function () {// test passed
    });
  });
});
;define("ghost-admin/transforms/boolean", ["exports", "@ember-data/serializer/-private"], function (_exports, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _private.BooleanTransform;
    }
  });
});
;define("ghost-admin/transforms/date", ["exports", "@ember-data/serializer/-private"], function (_exports, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _private.DateTransform;
    }
  });
});
;define("ghost-admin/transforms/facebook-url-user", ["exports", "@ember-data/serializer/transform"], function (_exports, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      if (serialized) {
        let [, user] = serialized.match(/(\S+)/) || [];
        return `https://www.facebook.com/${user}`;
      }

      return serialized;
    },

    serialize(deserialized) {
      if (deserialized) {
        let [, user] = deserialized.match(/(?:https:\/\/)(?:www\.)(?:facebook\.com)\/(?:#!\/)?(\w+\/?\S+)/mi) || [];
        return user;
      }

      return deserialized;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/json-string", ["exports", "@ember-data/serializer/transform"], function (_exports, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      let _serialized = serialized === '' ? null : serialized;

      return JSON.parse(_serialized);
    },

    serialize(deserialized) {
      return deserialized ? JSON.stringify(deserialized) : null;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/member-product", ["exports", "ghost-admin/models/member-product", "@ember-data/serializer/transform"], function (_exports, _memberProduct, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      let subscriptions, subscriptionArray;
      subscriptionArray = serialized || [];
      subscriptions = subscriptionArray.map(itemDetails => _memberProduct.default.create(itemDetails));
      return Ember.A(subscriptions);
    },

    serialize(deserialized) {
      let subscriptionArray;

      if (Ember.isArray(deserialized)) {
        subscriptionArray = deserialized.map(item => {
          return item;
        }).compact();
      } else {
        subscriptionArray = [];
      }

      return subscriptionArray;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/member-subscription", ["exports", "ghost-admin/models/member-subscription", "@ember-data/serializer/transform"], function (_exports, _memberSubscription, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      let subscriptions, subscriptionArray;
      subscriptionArray = serialized || [];
      subscriptions = subscriptionArray.map(itemDetails => _memberSubscription.default.create(itemDetails));
      return Ember.A(subscriptions);
    },

    serialize(deserialized) {
      let subscriptionArray;

      if (Ember.isArray(deserialized)) {
        subscriptionArray = deserialized.map(item => {
          return item;
        }).compact();
      } else {
        subscriptionArray = [];
      }

      return subscriptionArray;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/members-segment-string", ["exports", "@ember-data/serializer/transform"], function (_exports, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // the members segment supports `'none'` and `'all'` as special-case options
  // but that doesn't map well for options in our token select inputs so we
  // expand/convert them here to make usage elsewhere easier
  class MembersSegmentStringTransform extends _transform.default {
    deserialize(serialized) {
      if (serialized === 'all') {
        return 'status:free,status:-free';
      }

      if (serialized === 'none') {
        return null;
      }

      return serialized;
    }

    serialize(deserialized) {
      if (deserialized === 'status:free,status:-free') {
        return 'all';
      }

      if (!deserialized) {
        return 'none';
      }

      return deserialized;
    }

  }

  _exports.default = MembersSegmentStringTransform;

  window.__CLASSIC_OWN_CLASSES__.set(MembersSegmentStringTransform, true);
});
;define("ghost-admin/transforms/moment-date", ["exports", "@ember-data/serializer/transform", "moment"], function (_exports, _transform, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      if (serialized) {
        return (0, _moment.default)(serialized);
      }

      return serialized;
    },

    serialize(deserialized) {
      if (deserialized) {
        return (0, _moment.default)(deserialized).toDate();
      }

      return deserialized;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/moment-utc", ["exports", "@ember-data/serializer/transform", "moment"], function (_exports, _transform, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      if (serialized) {
        return _moment.default.utc(serialized);
      }

      return serialized;
    },

    serialize(deserialized) {
      if (deserialized) {
        try {
          return deserialized.toJSON();
        } catch (e) {
          return deserialized;
        }
      }

      return deserialized;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/navigation-settings", ["exports", "ghost-admin/models/navigation-item", "@ember-data/serializer/transform"], function (_exports, _navigationItem, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized, options) {
      let navItems, settingsArray;

      try {
        settingsArray = JSON.parse(serialized) || [];
      } catch (e) {
        settingsArray = [];
      }

      navItems = settingsArray.map(itemDetails => {
        itemDetails.isSecondary = options && options.isSecondary || false;
        return _navigationItem.default.create(itemDetails);
      });
      return Ember.A(navItems);
    },

    serialize(deserialized) {
      let settingsArray;

      if (Ember.isArray(deserialized)) {
        settingsArray = deserialized.map(item => {
          let label = item.get('label').trim();
          let url = item.get('url').trim();
          return {
            label,
            url
          };
        }).compact();
      } else {
        settingsArray = [];
      }

      return JSON.stringify(settingsArray);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/number", ["exports", "@ember-data/serializer/-private"], function (_exports, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _private.NumberTransform;
    }
  });
});
;define("ghost-admin/transforms/product-benefits", ["exports", "ghost-admin/models/product-benefit-item", "@ember-data/serializer/transform"], function (_exports, _productBenefitItem, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      let benefitsItems, benefitsArray;
      benefitsArray = serialized || [];
      benefitsItems = benefitsArray.map(itemDetails => {
        return _productBenefitItem.default.create(itemDetails);
      });
      return Ember.A(benefitsItems);
    },

    serialize(deserialized) {
      let benefitsArray;

      if (Ember.isArray(deserialized)) {
        benefitsArray = deserialized.map(item => {
          let name = item.get('name').trim();
          return {
            name
          };
        }).compact();
      } else {
        benefitsArray = [];
      }

      return benefitsArray;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/raw", ["exports", "@ember-data/serializer/transform"], function (_exports, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      return serialized;
    },

    serialize(deserialized) {
      return deserialized;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/slack-settings", ["exports", "ghost-admin/models/slack-integration", "@ember-data/serializer/transform"], function (_exports, _slackIntegration, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _transform.default.extend({
    deserialize(serialized) {
      let settingsArray;

      try {
        settingsArray = JSON.parse(serialized) || [];
      } catch (e) {
        settingsArray = [];
      }

      if (Ember.isEmpty(settingsArray)) {
        settingsArray.push({
          url: '',
          username: ''
        });
      }

      let slackObjs = settingsArray.map(itemDetails => _slackIntegration.default.create(itemDetails));
      return slackObjs;
    },

    serialize(deserialized) {
      let settingsArray;

      if (Ember.isArray(deserialized)) {
        settingsArray = deserialized.map(item => {
          let url = (item.get('url') || '').trim();
          let username = (item.get('username') || '').trim();

          if (url) {
            return {
              url,
              username
            };
          }
        }).compact();
      } else {
        settingsArray = [];
      }

      return JSON.stringify(settingsArray);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/string", ["exports", "@ember-data/serializer/-private"], function (_exports, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _private.StringTransform;
    }
  });
});
;define("ghost-admin/transforms/stripe-price", ["exports", "ghost-admin/models/stripe-price", "@ember-data/serializer/transform"], function (_exports, _stripePrice, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      if (serialized === null || serialized === undefined) {
        return null;
      } else if (Array.isArray(serialized)) {
        const stripePrices = serialized.map(itemDetails => _stripePrice.default.create(itemDetails));
        return Ember.A(stripePrices);
      } else {
        return _stripePrice.default.create(serialized);
      }
    },

    serialize(deserialized) {
      if (Ember.isArray(deserialized)) {
        return deserialized.map(item => {
          return item;
        }).compact();
      } else {
        return deserialized || null;
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/twitter-url-user", ["exports", "@ember-data/serializer/transform"], function (_exports, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      if (serialized) {
        let [, user] = serialized.match(/@?([^/]*)/) || [];
        return `https://twitter.com/${user}`;
      }

      return serialized;
    },

    serialize(deserialized) {
      if (deserialized) {
        let [, user] = deserialized.match(/(?:https:\/\/)(?:twitter\.com)\/(?:#!\/)?@?([^/]*)/) || [];
        return `@${user}`;
      }

      return deserialized;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/visibility-string", ["exports", "@ember-data/serializer/transform"], function (_exports, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // post visibility supports `'members'` and `'paid'` as special-case options
  // but that doesn't map well for options in our token select inputs so we
  // expand/convert them here to make usage elsewhere easier
  class VisibilityString extends _transform.default {
    deserialize(serialized) {
      if (serialized === 'members') {
        return 'status:free,status:-free';
      }

      if (serialized === 'paid') {
        return 'status:-free';
      }

      return serialized;
    }

    serialize(deserialized) {
      if (deserialized === 'status:free,status:-free') {
        return 'members';
      }

      if (deserialized === 'status:-free') {
        return 'paid';
      }

      return deserialized;
    }

  }

  _exports.default = VisibilityString;

  window.__CLASSIC_OWN_CLASSES__.set(VisibilityString, true);
});
;define("ghost-admin/transitions", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  function _default() {
    this.transition(this.hasClass('fullscreen-modal-container'), this.toValue(true), this.use('fade', {
      duration: 150
    }), this.reverse('fade', {
      duration: 150
    }));
    this.transition(this.hasClass('fade-transition'), this.use('crossFade', {
      duration: 100
    })); // TODO: Maybe animate with explode. gh-unsplash-window should ideally slide in from bottom to top of screen
    // this.transition(
    //     this.hasClass('gh-unsplash-window'),
    //     this.toValue(true),
    //     this.use('toUp', {duration: 500}),
    //     this.reverse('toDown', {duration: 500})
    // );
  }
});
;define("ghost-admin/transitions/cross-fade", ["exports", "liquid-fire/transitions/cross-fade"], function (_exports, _crossFade) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _crossFade.default;
    }
  });
});
;define("ghost-admin/transitions/default", ["exports", "liquid-fire/transitions/default"], function (_exports, _default) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _default.default;
    }
  });
});
;define("ghost-admin/transitions/explode", ["exports", "liquid-fire/transitions/explode"], function (_exports, _explode) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _explode.default;
    }
  });
});
;define("ghost-admin/transitions/fade", ["exports", "liquid-fire/transitions/fade"], function (_exports, _fade) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _fade.default;
    }
  });
});
;define("ghost-admin/transitions/flex-grow", ["exports", "liquid-fire/transitions/flex-grow"], function (_exports, _flexGrow) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _flexGrow.default;
    }
  });
});
;define("ghost-admin/transitions/fly-to", ["exports", "liquid-fire/transitions/fly-to"], function (_exports, _flyTo) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _flyTo.default;
    }
  });
});
;define("ghost-admin/transitions/move-over", ["exports", "liquid-fire/transitions/move-over"], function (_exports, _moveOver) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _moveOver.default;
    }
  });
});
;define("ghost-admin/transitions/scale", ["exports", "liquid-fire/transitions/scale"], function (_exports, _scale) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _scale.default;
    }
  });
});
;define("ghost-admin/transitions/scroll-then", ["exports", "liquid-fire/transitions/scroll-then"], function (_exports, _scrollThen) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _scrollThen.default;
    }
  });
});
;define("ghost-admin/transitions/to-down", ["exports", "liquid-fire/transitions/to-down"], function (_exports, _toDown) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _toDown.default;
    }
  });
});
;define("ghost-admin/transitions/to-left", ["exports", "liquid-fire/transitions/to-left"], function (_exports, _toLeft) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _toLeft.default;
    }
  });
});
;define("ghost-admin/transitions/to-right", ["exports", "liquid-fire/transitions/to-right"], function (_exports, _toRight) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _toRight.default;
    }
  });
});
;define("ghost-admin/transitions/to-up", ["exports", "liquid-fire/transitions/to-up"], function (_exports, _toUp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _toUp.default;
    }
  });
});
;define("ghost-admin/transitions/wait", ["exports", "liquid-fire/transitions/wait"], function (_exports, _wait) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _wait.default;
    }
  });
});
;define("ghost-admin/transitions/wormhole", ["exports", "liquid-wormhole/transitions/wormhole"], function (_exports, _wormhole) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  // override liquid-wormhole's default `wormhole` transition to focus the first
  // autofocus element after the transition and element swap happens
  function _default() {
    let newWormholeElement;

    if (this.newElement) {
      newWormholeElement = this.newElement.find('.liquid-wormhole-element:last-child');
    }

    return _wormhole.default.apply(this, arguments).finally(() => {
      if (this.newElement && newWormholeElement) {
        let autofocusElem = newWormholeElement[0].querySelector('[autofocus]');

        if (autofocusElem) {
          autofocusElem.focus();
        }
      }
    });
  }
});
;define("ghost-admin/utils/bound-one-way", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  /**
   * Defines a property similarly to `Ember.computed.oneway`,
   * save that while a `oneway` loses its binding upon being set,
   * the `BoundOneWay` will continue to listen for upstream changes.
   *
   * This is an ideal tool for working with values inside of {{input}}
   * elements.
   * @param {*} upstream
   * @param {function} transform a function to transform the **upstream** value.
   */
  function _default(upstream, transform) {
    if (typeof transform !== 'function') {
      // default to the identity function
      transform = function (value) {
        return value;
      };
    }

    return Ember.computed(upstream, {
      get() {
        return transform(this.get(upstream));
      },

      set(key, value) {
        return value;
      }

    });
  }
});
;define("ghost-admin/utils/caja-sanitizers", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /**
   * google-caja uses url() and id() to verify if the values are allowed.
   */

  /**
   * Check if URL is allowed
   * URLs are allowed if they start with http://, https://, or /.
   * NOTE: # urls are not allowed as clicking them will break the editor when clicked
   */
  let allowedUrl = function (url) {
    url = url.toString().replace(/['"]+/g, '');

    if (/^https?:\/\//.test(url) || /^\//.test(url)) {
      return url;
    }
  };
  /**
   * Check if ID is allowed
   * All ids are allowed at the moment.
   */


  let allowedId = function (id) {
    return id;
  };

  var _default = {
    url: allowedUrl,
    id: allowedId
  };
  _exports.default = _default;
});
;define("ghost-admin/utils/calculate-position", ["exports", "ember-basic-dropdown/utils/calculate-position"], function (_exports, _calculatePosition) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _calculatePosition.default;
    }
  });
});
;define("ghost-admin/utils/copy-text-to-clipboard", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = copyTextToClipboard;

  function copyTextToClipboard(text) {
    navigator.clipboard.writeText(text);
  }
});
;define("ghost-admin/utils/ctrl-or-cmd", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = navigator.userAgent.indexOf('Mac') !== -1 ? 'command' : 'ctrl';

  _exports.default = _default;
});
;define("ghost-admin/utils/currency", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.currencies = void 0;
  _exports.getCurrencyOptions = getCurrencyOptions;
  _exports.getNonDecimal = getNonDecimal;
  _exports.getSymbol = getSymbol;
  const currencies = [{
    isoCode: 'USD',
    name: 'United States dollar'
  }, {
    isoCode: 'EUR',
    name: 'Euro'
  }, {
    isoCode: 'GBP',
    name: 'Pound sterling'
  }, {
    isoCode: 'AUD',
    name: 'Australian dollar'
  }, {
    isoCode: 'CAD',
    name: 'Canadian dollar'
  }, {
    isoCode: 'AED',
    name: 'United Arab Emirates dirham'
  }, {
    isoCode: 'AFN',
    name: 'Afghan afghani'
  }, {
    isoCode: 'ALL',
    name: 'Albanian lek'
  }, {
    isoCode: 'AMD',
    name: 'Armenian dram'
  }, {
    isoCode: 'ANG',
    name: 'Netherlands Antillean guilder'
  }, {
    isoCode: 'AOA',
    name: 'Angolan kwanza'
  }, {
    isoCode: 'ARS',
    name: 'Argentine peso'
  }, {
    isoCode: 'AWG',
    name: 'Aruban florin'
  }, {
    isoCode: 'AZN',
    name: 'Azerbaijani manat'
  }, {
    isoCode: 'BAM',
    name: 'Bosnia and Herzegovina convertible mark'
  }, {
    isoCode: 'BBD',
    name: 'Barbados dollar'
  }, {
    isoCode: 'BDT',
    name: 'Bangladeshi taka'
  }, {
    isoCode: 'BGN',
    name: 'Bulgarian lev'
  }, {
    isoCode: 'BMD',
    name: 'Bermudian dollar'
  }, {
    isoCode: 'BND',
    name: 'Brunei dollar'
  }, {
    isoCode: 'BOB',
    name: 'Boliviano'
  }, {
    isoCode: 'BRL',
    name: 'Brazilian real'
  }, {
    isoCode: 'BSD',
    name: 'Bahamian dollar'
  }, {
    isoCode: 'BWP',
    name: 'Botswana pula'
  }, {
    isoCode: 'BZD',
    name: 'Belize dollar'
  }, {
    isoCode: 'CDF',
    name: 'Congolese franc'
  }, {
    isoCode: 'CHF',
    name: 'Swiss franc'
  }, {
    isoCode: 'CNY',
    name: 'Chinese yuan'
  }, {
    isoCode: 'COP',
    name: 'Colombian peso'
  }, {
    isoCode: 'CRC',
    name: 'Costa Rican colon'
  }, {
    isoCode: 'CVE',
    name: 'Cape Verdean escudo'
  }, {
    isoCode: 'CZK',
    name: 'Czech koruna'
  }, {
    isoCode: 'DKK',
    name: 'Danish krone'
  }, {
    isoCode: 'DOP',
    name: 'Dominican peso'
  }, {
    isoCode: 'DZD',
    name: 'Algerian dinar'
  }, {
    isoCode: 'EGP',
    name: 'Egyptian pound'
  }, {
    isoCode: 'ETB',
    name: 'Ethiopian birr'
  }, {
    isoCode: 'FJD',
    name: 'Fiji dollar'
  }, {
    isoCode: 'FKP',
    name: 'Falkland Islands pound'
  }, {
    isoCode: 'GEL',
    name: 'Georgian lari'
  }, {
    isoCode: 'GIP',
    name: 'Gibraltar pound'
  }, {
    isoCode: 'GMD',
    name: 'Gambian dalasi'
  }, {
    isoCode: 'GTQ',
    name: 'Guatemalan queztal'
  }, {
    isoCode: 'GYD',
    name: 'Guyanese dollar'
  }, {
    isoCode: 'HKD',
    name: 'Hong Kong dollar'
  }, {
    isoCode: 'HNL',
    name: 'Honduran lempira'
  }, {
    isoCode: 'HRK',
    name: 'Croation kuna'
  }, {
    isoCode: 'HTG',
    name: 'Haitian gourde'
  }, {
    isoCode: 'HUF',
    name: 'Hungarian forint'
  }, {
    isoCode: 'IDR',
    name: 'Indonesian rupiah'
  }, {
    isoCode: 'ILS',
    name: 'Israeli new shekel'
  }, {
    isoCode: 'INR',
    name: 'Indian rupee'
  }, {
    isoCode: 'ISK',
    name: 'Icelandic króna'
  }, {
    isoCode: 'JMD',
    name: 'Jamaican dollar'
  }, {
    isoCode: 'KES',
    name: 'Kenyan shilling'
  }, {
    isoCode: 'KGS',
    name: 'Kyrgyzstani som'
  }, {
    isoCode: 'KHR',
    name: 'Cambodian riel'
  }, {
    isoCode: 'KYD',
    name: 'Cayman Islands dollar'
  }, {
    isoCode: 'KZT',
    name: 'Kazakhstani tenge'
  }, {
    isoCode: 'LAK',
    name: 'Lao kip'
  }, {
    isoCode: 'LBP',
    name: 'Lebanese pound'
  }, {
    isoCode: 'LKR',
    name: 'Sri Lankan rupee'
  }, {
    isoCode: 'LRD',
    name: 'Liberian dollar'
  }, {
    isoCode: 'LSL',
    name: 'Lesotho loti'
  }, {
    isoCode: 'MAD',
    name: 'Moroccan dirham'
  }, {
    isoCode: 'MDL',
    name: 'Moldovan leu'
  }, {
    isoCode: 'MKD',
    name: 'Macedonian denar'
  }, {
    isoCode: 'MMK',
    name: 'Myanmar kyat'
  }, {
    isoCode: 'MNT',
    name: 'Mongolian tögrög'
  }, {
    isoCode: 'MOP',
    name: 'Macanese pataca'
  }, {
    isoCode: 'MRO',
    name: 'Mauritanian ouguiya'
  }, {
    isoCode: 'MUR',
    name: 'Mauritian rupee'
  }, {
    isoCode: 'MVR',
    name: 'Maldivian rufiyaa'
  }, {
    isoCode: 'MWK',
    name: 'Malawian kwacha'
  }, {
    isoCode: 'MXN',
    name: 'Mexican peso'
  }, {
    isoCode: 'MYR',
    name: 'Malaysian ringgit'
  }, {
    isoCode: 'MZN',
    name: 'Mozambican metical'
  }, {
    isoCode: 'NAD',
    name: 'Namibian dollar'
  }, {
    isoCode: 'NGN',
    name: 'Nigerian naira'
  }, {
    isoCode: 'NIO',
    name: 'Nicaraguan córdoba'
  }, {
    isoCode: 'NOK',
    name: 'Norwegian krone'
  }, {
    isoCode: 'NPR',
    name: 'Nepalese rupee'
  }, {
    isoCode: 'NZD',
    name: 'New Zealand dollar'
  }, {
    isoCode: 'PAB',
    name: 'Panamanian balboa'
  }, {
    isoCode: 'PEN',
    name: 'Peruvian sol'
  }, {
    isoCode: 'PGK',
    name: 'Papua New Guinean kina'
  }, {
    isoCode: 'PHP',
    name: 'Philippine peso'
  }, {
    isoCode: 'PKR',
    name: 'Pakistani rupee'
  }, {
    isoCode: 'PLN',
    name: 'Polish złoty'
  }, {
    isoCode: 'QAR',
    name: 'Qatari riyal'
  }, {
    isoCode: 'RON',
    name: 'Romanian leu'
  }, {
    isoCode: 'RSD',
    name: 'Serbian dinar'
  }, {
    isoCode: 'RUB',
    name: 'Russian ruble'
  }, {
    isoCode: 'SAR',
    name: 'Saudi riyal'
  }, {
    isoCode: 'SBD',
    name: 'Solomon Islands dollar'
  }, {
    isoCode: 'SCR',
    name: 'Seychelles rupee'
  }, {
    isoCode: 'SEK',
    name: 'Swedish krona'
  }, {
    isoCode: 'SGD',
    name: 'Singapore dollar'
  }, {
    isoCode: 'SHP',
    name: 'Saint Helena pound'
  }, {
    isoCode: 'SLL',
    name: 'Sierra Leonean leone'
  }, {
    isoCode: 'SOS',
    name: 'Somali shilling'
  }, {
    isoCode: 'SRD',
    name: 'Surinamese dollar'
  }, {
    isoCode: 'STD',
    name: 'São Tomé and Príncipe dobra'
  }, {
    isoCode: 'SZL',
    name: 'Salvadoran colón'
  }, {
    isoCode: 'THB',
    name: 'Thai baht'
  }, {
    isoCode: 'TJS',
    name: 'Tajikistani somoni'
  }, {
    isoCode: 'TOP',
    name: 'Tongan paʻanga'
  }, {
    isoCode: 'TRY',
    name: 'Turkish lira'
  }, {
    isoCode: 'TTD',
    name: 'Trinidad and Tobago dollar'
  }, {
    isoCode: 'TWD',
    name: 'New Taiwan dollar'
  }, {
    isoCode: 'TZS',
    name: 'Tanzanian shilling'
  }, {
    isoCode: 'UAH',
    name: 'Ukrainian hryvnia'
  }, {
    isoCode: 'UYU',
    name: 'Uruguayan peso'
  }, {
    isoCode: 'UZS',
    name: 'Uzbekistan som'
  }, {
    isoCode: 'WST',
    name: 'Samoan tala'
  }, {
    isoCode: 'XCD',
    name: 'East Caribbean dollar'
  }, {
    isoCode: 'YER',
    name: 'Yemeni rial'
  }, {
    isoCode: 'ZAR',
    name: 'South African rand'
  }, {
    isoCode: 'ZMW',
    name: 'Zambian kwacha'
  }];
  _exports.currencies = currencies;

  function getSymbol(currency) {
    if (!currency) {
      return '';
    }

    return Intl.NumberFormat('en', {
      currency,
      style: 'currency'
    }).format(0).replace(/[\d\s.]/g, '');
  } // We currently only support decimal currencies


  function getNonDecimal(amount
  /*, currency*/
  ) {
    return amount / 100;
  }

  function getCurrencyOptions() {
    const noOfTopCurrencies = 5;
    const topCurrencies = currencies.slice(0, noOfTopCurrencies).map(currency => {
      return {
        value: currency.isoCode.toLowerCase(),
        label: `${currency.isoCode} - ${currency.name}`,
        isoCode: currency.isoCode
      };
    });
    const otherCurrencies = currencies.slice(noOfTopCurrencies, currencies.length).map(currency => {
      return {
        value: currency.isoCode.toLowerCase(),
        label: `${currency.isoCode} - ${currency.name}`,
        isoCode: currency.isoCode
      };
    });
    return [{
      groupName: '—',
      options: topCurrencies
    }, {
      groupName: '—',
      options: otherCurrencies
    }];
  }
});
;define("ghost-admin/utils/flatten-grouped-options", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = flattenGroupedOptions;

  function flattenGroupedOptions(options) {
    const flatOptions = [];

    function getOptions(option) {
      if (option.options) {
        return option.options.forEach(getOptions);
      }

      flatOptions.push(option);
    }

    options.forEach(getOptions);
    return flatOptions;
  }
});
;define("ghost-admin/utils/format-markdown", ["exports", "markdown-it", "markdown-it-footnote", "markdown-it-lazy-headers", "markdown-it-mark", "koenig-editor/helpers/sanitize-html"], function (_exports, _markdownIt, _markdownItFootnote, _markdownItLazyHeaders, _markdownItMark, _sanitizeHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = formatMarkdown;

  let slugify = function slugify(inputString, usedHeaders) {
    let slug = inputString.replace(/[^\w]/g, '').toLowerCase();

    if (usedHeaders[slug]) {
      usedHeaders[slug] += 1;
      slug += usedHeaders[slug];
    }

    return slug;
  }; // originally from https://github.com/leff/markdown-it-named-headers
  // moved here to avoid pulling in http://stringjs.com dependency


  let markdownitNamedHeaders = function markdownitNamedHeaders(md) {
    let originalHeadingOpen = md.renderer.rules.heading_open; // eslint-disable-next-line camelcase

    md.renderer.rules.heading_open = function (tokens, idx, options, env, self) {
      let usedHeaders = {};
      tokens[idx].attrs = tokens[idx].attrs || [];
      let title = tokens[idx + 1].children.reduce(function (acc, t) {
        return acc + t.content;
      }, '');
      let slug = slugify(title, usedHeaders);
      tokens[idx].attrs.push(['id', slug]);

      if (originalHeadingOpen) {
        return originalHeadingOpen.apply(this, arguments);
      } else {
        return self.renderToken(...arguments);
      }
    };
  };

  let md = (0, _markdownIt.default)({
    html: true,
    breaks: true,
    linkify: true
  }).use(_markdownItFootnote.default).use(_markdownItLazyHeaders.default).use(_markdownItMark.default).use(markdownitNamedHeaders); // configure linkify-it

  md.linkify.set({
    fuzzyLink: false
  });

  function formatMarkdown(_markdown) {
    let replaceJS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let markdown = _markdown || '';
    let escapedhtml = ''; // convert markdown to HTML

    escapedhtml = md.render(markdown);
    return (0, _sanitizeHtml.sanitizeHtml)(escapedhtml, {
      replaceJS
    });
  }
});
;define("ghost-admin/utils/get-scroll-parent", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = getScrollParent;

  function getScrollParent(node) {
    const isElement = node instanceof HTMLElement;
    const overflowY = isElement && window.getComputedStyle(node).overflowY;
    const isScrollable = overflowY !== 'visible' && overflowY !== 'hidden';

    if (!node) {
      return null;
    } else if (isScrollable && node.scrollHeight >= node.clientHeight) {
      return node;
    }

    return getScrollParent(node.parentNode) || document.body;
  }
});
;define("ghost-admin/utils/ghost-paths", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  let makeRoute = function (root, args) {
    let slashAtStart = /^\//;
    let slashAtEnd = /\/$/;
    let parts = Array.prototype.slice.call(args, 0);
    let route = root.replace(slashAtEnd, '');
    parts.forEach(part => {
      if (part) {
        route = [route, part.replace(slashAtStart, '').replace(slashAtEnd, '')].join('/');
      }
    });
    return route += '/';
  };

  function _default() {
    let path = window.location.pathname;
    let subdir = path.substr(0, path.search('/ghost/'));
    let adminRoot = `${subdir}/ghost/`;
    let assetRoot = `${subdir}/ghost/assets/`;
    let apiRoot = `${subdir}/ghost/api/canary/admin`;

    function assetUrl(src) {
      return subdir + src;
    }

    return {
      adminRoot,
      assetRoot,
      apiRoot,
      subdir,
      blogRoot: `${subdir}/`,
      url: {
        admin() {
          return makeRoute(adminRoot, arguments);
        },

        api() {
          return makeRoute(apiRoot, arguments);
        },

        join() {
          if (arguments.length > 1) {
            return makeRoute(arguments[0], Array.prototype.slice.call(arguments, 1));
          } else if (arguments.length === 1) {
            let [arg] = arguments;
            return arg.slice(-1) === '/' ? arg : `${arg}/`;
          }

          return '/';
        },

        asset: assetUrl
      }
    };
  }
});
;define("ghost-admin/utils/isNumber", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;
  // isNumber function from lodash
  const {
    toString
  } = Object.prototype;

  function _default(value) {
    return typeof value === 'number' || value && typeof value === 'object' && toString.call(value) === '[object Number]' || false;
  }
});
;define("ghost-admin/utils/link-component", [], function () {
  "use strict";

  Ember.LinkComponent.reopen({
    active: Ember.computed('attrs.params', '_routing.currentState', function () {
      let isActive = this._super(...arguments);

      if (typeof this.alternateActive === 'function') {
        this.alternateActive(isActive);
      }

      return isActive;
    }),
    activeClass: Ember.computed('tagName', function () {
      return this.tagName === 'button' ? '' : 'active';
    })
  });
});
;define("ghost-admin/utils/password-generator", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = generatePassword;

  /*
   * copied from https://github.com/bermi/password-generator
   * Copyright(c) 2011-2015 Bermi Ferrer <bermi@bermilabs.com>
   * MIT Licensed
   */
  // copied from the NPM module because the switch away from polyfilling `global`
  // via webpack in ember-auto-import resulted in an error finding 'crypto'
  // Module not found: Error: Can't resolve 'crypto'
  const vowel = /[aeiou]$/i;
  const consonant = /[bcdfghjklmnpqrstvwxyz]$/i;

  function rand(min, max) {
    var key,
        value,
        arr = new Uint8Array(max);
    getRandomValues(arr);

    for (key in arr) {
      if (Object.prototype.hasOwnProperty.call(arr, key)) {
        value = arr[key];

        if (value > min && value < max) {
          return value;
        }
      }
    }

    return rand(min, max);
  }

  function getRandomValues(buf) {
    window.crypto.getRandomValues(buf);
  }

  function generatePassword(length, memorable, pattern, prefix) {
    var char = '',
        n,
        i,
        validChars = [];

    if (length === null || typeof length === 'undefined') {
      length = 10;
    }

    if (memorable === null || typeof memorable === 'undefined') {
      memorable = true;
    }

    if (pattern === null || typeof pattern === 'undefined') {
      pattern = /\w/;
    }

    if (prefix === null || typeof prefix === 'undefined') {
      prefix = '';
    } // Non memorable passwords will pick characters from a pre-generated
    // list of characters


    if (!memorable) {
      for (i = 33; 126 > i; i += 1) {
        char = String.fromCharCode(i);

        if (char.match(pattern)) {
          validChars.push(char);
        }
      }

      if (!validChars.length) {
        throw new Error('Could not find characters that match the ' + 'password pattern ' + pattern + '. Patterns must match individual ' + 'characters, not the password as a whole.');
      }
    }

    while (prefix.length < length) {
      if (memorable) {
        if (prefix.match(consonant)) {
          pattern = vowel;
        } else {
          pattern = consonant;
        }

        n = rand(33, 126);
        char = String.fromCharCode(n);
      } else {
        char = validChars[rand(0, validChars.length)];
      }

      if (memorable) {
        char = char.toLowerCase();
      }

      if (char.match(pattern)) {
        prefix = '' + prefix + char;
      }
    }

    return prefix;
  }
});
;define("ghost-admin/utils/route", [], function () {
  "use strict";

  Ember.Route.reopen({
    config: Ember.inject.service(),
    billing: Ember.inject.service(),
    router: Ember.inject.service(),
    actions: {
      willTransition(transition) {
        if (this.get('upgradeStatus.isRequired')) {
          transition.abort();
          this.upgradeStatus.requireUpgrade();
          return false;
        } else if (this.config.get('hostSettings.forceUpgrade')) {
          // Do not prevent transitions to the BMA or to signout
          if (transition.to?.name === 'pro.index' || transition.to?.name === 'signout') {
            return true;
          }

          transition.abort(); // Catch and redirect every route in a force upgrade state

          this.billing.openBillingWindow(this.router.currentURL, '/pro');
          return false;
        } else {
          return true;
        }
      }

    }
  });
});
;define("ghost-admin/utils/titleize", ["exports", "ember-cli-string-helpers/utils/titleize"], function (_exports, _titleize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _titleize.default;
    }
  });
});
;define("ghost-admin/utils/window-proxy", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    changeLocation(url) {
      window.location = url;
    },

    replaceLocation(url) {
      window.location.replace(url);
    },

    replaceState(params, title, url) {
      window.history.replaceState(params, title, url);
    }

  };
  _exports.default = _default;
});
;define("ghost-admin/validators/base", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /**
   * Base validator that all validators should extend
   * Handles checking of individual properties or the entire model
   */
  var _default = Ember.Object.extend({
    passed: false,

    init() {
      this._super(...arguments);

      this.properties = this.properties || [];
    },

    /**
     * When passed a model and (optionally) a property name,
     * checks it against a list of validation functions
     * @param  {Ember.Object} model Model to validate
     * @param  {string} prop  Property name to check
     * @return {boolean}      True if the model passed all (or one) validation(s),
     *                        false if not
     */
    check(model, prop) {
      this.set('passed', true);

      if (prop && this[prop]) {
        this[prop](model);
      } else {
        this.properties.forEach(property => {
          if (this[property]) {
            this[property](model);
          }
        });
      }

      return this.passed;
    },

    invalidate() {
      this.set('passed', false);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/custom-view", ["exports", "ghost-admin/validators/base"], function (_exports, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name'],

    name(model) {
      if (Ember.isBlank(model.name)) {
        model.errors.add('name', 'Please enter a name');
        model.hasValidated.pushObject('name');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/integration", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name'],

    name(model) {
      if (Ember.isBlank(model.name)) {
        model.errors.add('name', 'Please enter a name');
        model.hasValidated.pushObject('name');
        this.invalidate();
      } else if (!_validator.default.isLength(model.name, 0, 191)) {
        model.errors.add('name', 'Name is too long, max 191 chars');
        model.hasValidated.pushObject('name');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/invite-user", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['email', 'role'],

    email(model) {
      let email = model.get('email');

      if (Ember.isBlank(email)) {
        model.get('errors').add('email', 'Please enter an email.');
        this.invalidate();
      } else if (!_validator.default.isEmail(email)) {
        model.get('errors').add('email', 'Invalid Email.');
        this.invalidate();
      }
    },

    role(model) {
      let role = model.get('role');

      if (Ember.isBlank(role)) {
        model.get('errors').add('role', 'Please select a role.');
        model.get('hasValidated').pushObject('role');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/label", ["exports", "ghost-admin/validators/base"], function (_exports, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name'],

    name(model) {
      if (Ember.isBlank(model.name)) {
        model.errors.add('name', 'Please enter a name');
        model.hasValidated.pushObject('name');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/member", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name', 'email', 'note'],

    name(model) {
      if (!_validator.default.isLength(model.name || '', 0, 191)) {
        model.errors.add('name', 'Name cannot be longer than 191 characters.');
        this.invalidate();
      }
    },

    email(model) {
      let email = model.get('email');

      if (Ember.isBlank(email)) {
        model.errors.add('email', 'Please enter an email.');
        this.invalidate();
      } else if (!_validator.default.isEmail(email)) {
        model.errors.add('email', 'Invalid Email.');
        this.invalidate();
      }

      if (!_validator.default.isLength(model.email || '', 0, 191)) {
        model.errors.add('email', 'Email cannot be longer than 191 characters.');
        this.invalidate();
      }

      model.get('hasValidated').addObject('email');
    },

    note(model) {
      let note = model.get('note');

      if (!_validator.default.isLength(note || '', 0, 500)) {
        model.errors.add('note', 'Note is too long.');
        this.invalidate();
      }

      model.get('hasValidated').addObject('note');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/mixins/password", ["exports", "validator"], function (_exports, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const BAD_PASSWORDS = ['1234567890', 'qwertyuiop', 'qwertzuiop', 'asdfghjkl;', 'abcdefghij', '0987654321', '1q2w3e4r5t', '12345asdfg'];
  const DISALLOWED_PASSWORDS = ['ghost', 'password', 'passw0rd'];

  var _default = Ember.Mixin.create({
    /**
    * Counts repeated characters if a string. When 50% or more characters are the same,
    * we return false and therefore invalidate the string.
    * @param {String} stringToTest The password string to check.
    * @return {Boolean}
    */
    _characterOccurance(stringToTest) {
      let chars = {};
      let allowedOccurancy;
      let valid = true;
      allowedOccurancy = stringToTest.length / 2; // Loop through string and accumulate character counts

      for (let i = 0; i < stringToTest.length; i += 1) {
        if (!chars[stringToTest[i]]) {
          chars[stringToTest[i]] = 1;
        } else {
          chars[stringToTest[i]] += 1;
        }
      } // check if any of the accumulated chars exceed the allowed occurancy
      // of 50% of the words' length.


      for (let charCount in chars) {
        if (chars[charCount] >= allowedOccurancy) {
          valid = false;
          return valid;
        }
      }

      return valid;
    },

    passwordValidation(model, password, errorTarget) {
      let blogUrl = model.get('config.blogUrl') || window.location.host;
      let blogTitle = model.get('blogTitle') || model.get('config.blogTitle');
      let blogUrlWithSlash; // the password that needs to be validated can differ from the password in the
      // passed model, e. g. for password changes or reset.

      password = password || model.get('password');
      errorTarget = errorTarget || 'password';
      blogUrl = blogUrl.replace(/^http(s?):\/\//, '');
      blogUrlWithSlash = blogUrl.match(/\/$/) ? blogUrl : `${blogUrl}/`;
      blogTitle = blogTitle ? blogTitle.trim().toLowerCase() : blogTitle; // password must be longer than 10 characters

      if (!_validator.default.isLength(password || '', 10)) {
        model.get('errors').add(errorTarget, 'Password must be at least 10 characters long');
        return this.invalidate();
      }

      password = password.toString(); // dissallow password from badPasswords list (e. g. '1234567890')

      BAD_PASSWORDS.map(badPassword => {
        if (badPassword === password) {
          model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
          this.invalidate();
        }
      }); // password must not match with users' email

      if (password.toLowerCase() === model.get('email').toLowerCase()) {
        model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
        this.invalidate();
      } // password must not contain the words 'ghost', 'password', or 'passw0rd'


      DISALLOWED_PASSWORDS.map(disallowedPassword => {
        if (password.toLowerCase().indexOf(disallowedPassword) >= 0) {
          model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
          this.invalidate();
        }
      }); // password must not match with blog title

      if (password.toLowerCase() === blogTitle) {
        model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
        this.invalidate();
      } // password must not match with blog URL (without protocol, with or without trailing slash)


      if (password.toLowerCase() === blogUrl || password.toLowerCase() === blogUrlWithSlash) {
        model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
        this.invalidate();
      } // dissallow passwords where 50% or more of characters are the same


      if (!this._characterOccurance(password)) {
        model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/nav-item", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['label', 'url'],

    label(model) {
      let label = model.get('label');
      let hasValidated = model.get('hasValidated');

      if (Ember.isBlank(label)) {
        model.get('errors').add('label', 'You must specify a label');
        this.invalidate();
      }

      hasValidated.addObject('label');
    },

    url(model) {
      let url = model.get('url');
      let hasValidated = model.get('hasValidated');
      /* eslint-disable camelcase */

      let validatorOptions = {
        require_protocol: true
      };
      /* eslint-enable camelcase */

      let urlRegex = new RegExp(/^(\/|#|[a-zA-Z0-9-]+:)/);

      if (Ember.isBlank(url)) {
        model.get('errors').add('url', 'You must specify a URL or relative path');
        this.invalidate();
      } else if (url.match(/\s/) || !_validator.default.isURL(url, validatorOptions) && !url.match(urlRegex)) {
        model.get('errors').add('url', 'You must specify a valid URL or relative path');
        this.invalidate();
      }

      hasValidated.addObject('url');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/new-user", ["exports", "ghost-admin/validators/base", "ghost-admin/validators/mixins/password", "validator"], function (_exports, _base, _password, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.extend(_password.default, {
    init() {
      this.properties = this.properties || ['name', 'email', 'password'];

      this._super(...arguments);
    },

    name(model) {
      let name = model.get('name');

      if (!_validator.default.isLength(name || '', 1)) {
        model.get('errors').add('name', 'Please enter a name.');
        model.get('hasValidated').addObject('email');
        this.invalidate();
      }
    },

    email(model) {
      let email = model.get('email');

      if (Ember.isBlank(email)) {
        model.get('errors').add('email', 'Please enter an email.');
        this.invalidate();
      } else if (!_validator.default.isEmail(email)) {
        model.get('errors').add('email', 'Invalid Email.');
        this.invalidate();
      }

      model.get('hasValidated').addObject('email');
    },

    password(model) {
      this.passwordValidation(model);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/offer", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name', 'amount', 'displayTitle', 'displayDescription', 'code', 'durationInMonths'],

    name(model) {
      if (!model.name) {
        model.errors.add('name', 'Please enter a name.');
        this.invalidate();
      }

      if (!_validator.default.isLength(model.name || '', 0, 40)) {
        model.errors.add('name', 'Name cannot be longer than 40 characters.');
        this.invalidate();
      }
    },

    amount(model) {
      if (!model.amount) {
        model.errors.add('amount', 'Please enter the amount.');
        this.invalidate();
      }
    },

    displayDescription(model) {
      if (!_validator.default.isLength(model.displayDescription || '', 0, 191)) {
        model.errors.add('displayDescription', 'Display description cannot be longer than 191 characters.');
        this.invalidate();
      }
    },

    durationInMonths(model) {
      if (model.duration === 'repeating' && !model.durationInMonths) {
        model.errors.add('durationInMonths', 'Please enter the duration in months.');
        this.invalidate();
      }
    },

    code(model) {
      if (!model.code) {
        model.errors.add('code', 'Please enter an offer code.');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/post", ["exports", "ghost-admin/validators/base", "moment", "validator"], function (_exports, _base, _moment, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['title', 'authors', 'customExcerpt', 'canonicalUrl', 'codeinjectionHead', 'codeinjectionFoot', 'metaTitle', 'metaDescription', 'ogtitle', 'ogDescription', 'twitterTitle', 'twitterDescription', 'publishedAtBlogTime', 'publishedAtBlogDate', 'emailSubject', 'featureImageAlt'],

    title(model) {
      if (Ember.isBlank(model.title)) {
        model.errors.add('title', 'You must specify a title for the post.');
        this.invalidate();
      }

      if (!_validator.default.isLength(model.title || '', 0, 255)) {
        model.errors.add('title', 'Title cannot be longer than 255 characters.');
        this.invalidate();
      }
    },

    authors(model) {
      if (Ember.isEmpty(model.authors)) {
        model.errors.add('authors', 'At least one author is required.');
        this.invalidate();
      }
    },

    canonicalUrl(model) {
      let validatorOptions = {
        require_protocol: true
      };
      let urlRegex = new RegExp(/^(\/|[a-zA-Z0-9-]+:)/);
      let url = model.canonicalUrl;

      if (Ember.isBlank(url)) {
        return;
      }

      if (url.match(/\s/) || !_validator.default.isURL(url, validatorOptions) && !url.match(urlRegex)) {
        model.errors.add('canonicalUrl', 'Please enter a valid URL');
        this.invalidate();
      } else if (!_validator.default.isLength(model.canonicalUrl, 0, 2000)) {
        model.errors.add('canonicalUrl', 'Canonical URL is too long, max 2000 chars');
        this.invalidate();
      }
    },

    customExcerpt(model) {
      if (!_validator.default.isLength(model.customExcerpt || '', 0, 300)) {
        model.errors.add('customExcerpt', 'Excerpt cannot be longer than 300 characters.');
        this.invalidate();
      }
    },

    visibility(model) {
      if (Ember.isBlank(model.visibility) && !model.isNew) {
        model.errors.add('visibility', 'Please select at least one tier');
        this.invalidate();
      }
    },

    visibilityFilter(model) {
      if (Ember.isBlank(model.visibilityFilter) && !Ember.isBlank(model.visibility) && model.visibility === 'filter' && !model.isNew) {
        model.errors.add('visibilityFilter', 'Please select at least one tier');
        this.invalidate();
      }
    },

    codeinjectionFoot(model) {
      if (!_validator.default.isLength(model.codeinjectionFoot || '', 0, 65535)) {
        model.errors.add('codeinjectionFoot', 'Footer code cannot be longer than 65535 characters.');
        this.invalidate();
      }
    },

    codeinjectionHead(model) {
      if (!_validator.default.isLength(model.codeinjectionHead || '', 0, 65535)) {
        model.errors.add('codeinjectionHead', 'Header code cannot be longer than 65535 characters.');
        this.invalidate();
      }
    },

    metaTitle(model) {
      if (!_validator.default.isLength(model.metaTitle || '', 0, 300)) {
        model.errors.add('metaTitle', 'Meta Title cannot be longer than 300 characters.');
        this.invalidate();
      }
    },

    metaDescription(model) {
      if (!_validator.default.isLength(model.metaDescription || '', 0, 500)) {
        model.errors.add('metaDescription', 'Meta Description cannot be longer than 500 characters.');
        this.invalidate();
      }
    },

    ogTitle(model) {
      if (!_validator.default.isLength(model.ogTitle || '', 0, 300)) {
        model.errors.add('ogTitle', 'Facebook Title cannot be longer than 300 characters.');
        this.invalidate();
      }
    },

    ogDescription(model) {
      if (!_validator.default.isLength(model.ogDescription || '', 0, 500)) {
        model.errors.add('ogDescription', 'Facebook Description cannot be longer than 500 characters.');
        this.invalidate();
      }
    },

    twitterTitle(model) {
      if (!_validator.default.isLength(model.twitterTitle || '', 0, 300)) {
        model.errors.add('twitterTitle', 'Twitter Title cannot be longer than 300 characters.');
        this.invalidate();
      }
    },

    twitterDescription(model) {
      if (!_validator.default.isLength(model.twitterDescription || '', 0, 500)) {
        model.errors.add('twitterDescription', 'Twitter Description cannot be longer than 500 characters.');
        this.invalidate();
      }
    },

    emailSubject(model) {
      if (!_validator.default.isLength(model.emailSubject || '', 0, 300)) {
        model.errors.add('emailSubject', 'Email Subject cannot be longer than 300 characters.');
        this.invalidate();
      }
    },

    // for posts which haven't been published before and where the blog date/time
    // is blank we should ignore the validation
    _shouldValidatePublishedAtBlog(model) {
      return Ember.isPresent(model.publishedAtUTC) || Ember.isPresent(model.publishedAtBlogDate) || Ember.isPresent(model.publishedAtBlogTime);
    },

    // convenience method as .validate({property: 'x'}) doesn't accept multiple properties
    publishedAtBlog(model) {
      this.publishedAtBlogTime(model);
      this.publishedAtBlogDate(model);
    },

    publishedAtBlogTime(model) {
      let timeRegex = /^(([0-1]?[0-9])|([2][0-3])):([0-5][0-9])$/;

      if (!timeRegex.test(model.publishedAtBlogTime) && this._shouldValidatePublishedAtBlog(model)) {
        model.errors.add('publishedAtBlogTime', 'Must be in format: "15:00"');
        this.invalidate();
      }
    },

    publishedAtBlogDate(model) {
      let publishedAtBlogDate = model.publishedAtBlogDate;
      let publishedAtBlogTime = model.publishedAtBlogTime;

      if (!this._shouldValidatePublishedAtBlog(model)) {
        return;
      } // we have a time string but no date string


      if (Ember.isBlank(publishedAtBlogDate) && !Ember.isBlank(publishedAtBlogTime)) {
        model.errors.add('publishedAtBlogDate', 'Can\'t be blank');
        return this.invalidate();
      } // don't validate the date if the time format is incorrect


      if (Ember.isEmpty(model.errors.errorsFor('publishedAtBlogTime'))) {
        let status = model.statusScratch || model.status;
        let now = (0, _moment.default)();
        let publishedAtUTC = model.publishedAtUTC;
        let publishedAtBlogTZ = model.publishedAtBlogTZ;
        let matchesExisting = publishedAtUTC && publishedAtBlogTZ.isSame(publishedAtUTC);
        let isInFuture = publishedAtBlogTZ.isSameOrAfter(now.add(2, 'minutes')); // draft/published must be in past

        if ((status === 'draft' || status === 'published') && publishedAtBlogTZ.isSameOrAfter(now)) {
          model.errors.add('publishedAtBlogDate', 'Must be in the past');
          this.invalidate(); // scheduled must be at least 2 mins in the future
          // ignore if it matches publishedAtUTC as that is likely an update of a scheduled post
        } else if (status === 'scheduled' && !matchesExisting && !isInFuture) {
          model.errors.add('publishedAtBlogDate', 'Must be at least 2 mins in the future');
          this.invalidate();
        }
      }
    },

    featureImageAlt(model) {
      if (!_validator.default.isLength(model.featureImageAlt || '', 0, 125)) {
        model.errors.add('featureImageAlt', 'Feature image alt text cannot be longer than 125 characters.');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/product-benefit-item", ["exports", "ghost-admin/validators/base"], function (_exports, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name'],

    name(model) {
      let name = model.get('name');
      let hasValidated = model.get('hasValidated');

      if (Ember.isBlank(name)) {
        model.get('errors').add('name', 'Please enter a benefit');
        this.invalidate();
      }

      hasValidated.addObject('name');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/product", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name'],

    name(model) {
      if (!model.name) {
        model.errors.add('name', 'Please enter Name.');
        this.invalidate();
      }

      if (!_validator.default.isLength(model.name || '', 0, 191)) {
        model.errors.add('name', 'Name cannot be longer than 191 characters.');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/reset", ["exports", "ghost-admin/validators/base", "ghost-admin/validators/mixins/password", "validator"], function (_exports, _base, _password, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const resetValidator = _base.default.extend(_password.default, {
    init() {
      this.properties = this.properties || ['newPassword'];

      this._super(...arguments);
    },

    newPassword(model) {
      let p1 = model.get('newPassword');
      let p2 = model.get('ne2Password');

      if (Ember.isBlank(p1)) {
        model.get('errors').add('newPassword', 'Please enter a password.');
        this.invalidate();
      } else if (!_validator.default.equals(p1, p2 || '')) {
        model.get('errors').add('ne2Password', 'The two new passwords don\'t match.');
        this.invalidate();
      }

      this.passwordValidation(model, p1, 'newPassword');
    }

  });

  var _default = resetValidator.create();

  _exports.default = _default;
});
;define("ghost-admin/validators/setting", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['title', 'description', 'password'],

    title(model) {
      let title = model.get('title');

      if (!_validator.default.isLength(title || '', 0, 150)) {
        model.get('errors').add('title', 'Title is too long');
        this.invalidate();
      }
    },

    description(model) {
      let desc = model.get('description');

      if (!_validator.default.isLength(desc || '', 0, 200)) {
        model.get('errors').add('description', 'Description is too long');
        this.invalidate();
      }
    },

    password(model) {
      let isPrivate = model.get('isPrivate');
      let password = model.get('password');

      if (isPrivate && password === '') {
        model.get('errors').add('password', 'Password must be supplied');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/setup", ["exports", "ghost-admin/validators/new-user", "validator"], function (_exports, _newUser, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _newUser.default.create({
    properties: ['name', 'email', 'password', 'blogTitle'],

    blogTitle(model) {
      let blogTitle = model.get('blogTitle');

      if (!_validator.default.isLength(blogTitle || '', 1)) {
        model.get('errors').add('blogTitle', 'Please enter a blog title.');
        this.invalidate();
      }

      if (!_validator.default.isLength(blogTitle || '', 0, 150)) {
        model.get('errors').add('blogTitle', 'Title is too long');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/signin", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['identification', 'signin', 'forgotPassword'],
    invalidMessage: 'Email address is not valid',

    identification(model) {
      let id = model.get('identification');

      if (!Ember.isBlank(id) && !_validator.default.isEmail(id)) {
        model.get('errors').add('identification', this.invalidMessage);
        this.invalidate();
      }
    },

    signin(model) {
      let id = model.get('identification');
      let password = model.get('password');
      model.get('errors').clear();

      if (Ember.isBlank(id)) {
        model.get('errors').add('identification', 'Please enter an email');
        this.invalidate();
      }

      if (!Ember.isBlank(id) && !_validator.default.isEmail(id)) {
        model.get('errors').add('identification', this.invalidMessage);
        this.invalidate();
      }

      if (Ember.isBlank(password)) {
        model.get('errors').add('password', 'Please enter a password');
        this.invalidate();
      }
    },

    forgotPassword(model) {
      let id = model.get('identification');
      model.get('errors').clear();

      if (Ember.isBlank(id) || !_validator.default.isEmail(id)) {
        model.get('errors').add('identification', this.invalidMessage);
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/signup", ["exports", "ghost-admin/validators/new-user"], function (_exports, _newUser) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _newUser.default.create();

  _exports.default = _default;
});
;define("ghost-admin/validators/slack-integration", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['url'],

    url(model) {
      let url = model.get('url');
      let hasValidated = model.get('hasValidated'); // eslint-disable-next-line camelcase

      if (!Ember.isBlank(url) && !_validator.default.isURL(url, {
        require_protocol: true
      })) {
        model.get('errors').add('url', 'The URL must be in a format like https://hooks.slack.com/services/<your personal key>');
        this.invalidate();
      }

      hasValidated.addObject('url');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/snippet", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name', 'mobiledoc'],

    name(model) {
      let {
        name
      } = model;

      if (!_validator.default.isLength(name || '', 0, 191)) {
        model.errors.add('name', 'Name cannot be longer than 191 characters');
        this.invalidate();
      }

      if (Ember.isBlank(name)) {
        model.errors.add('name', 'Name cannot be blank');
        this.invalidate();
      }

      model.get('hasValidated').addObject('name');
    },

    mobiledoc(model) {
      if (Ember.isBlank(model.get('mobiledoc'))) {
        model.errors.add('mobiledoc', 'Content cannot be blank.');
        this.invalidate();
      }

      model.get('hasValidated').addObject('mobiledoc');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/subscriber", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['email'],

    email(model) {
      let email = model.get('email');

      if (Ember.isBlank(email)) {
        model.get('errors').add('email', 'Please enter an email.');
        model.get('hasValidated').pushObject('email');
        this.invalidate();
      } else if (!_validator.default.isEmail(email)) {
        model.get('errors').add('email', 'Invalid email.');
        model.get('hasValidated').pushObject('email');
        this.invalidate();
      } else if (!_validator.default.isLength(email, 0, 191)) {
        model.get('errors').add('email', 'Email is too long');
        model.get('hasValidated').pushObject('email');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/tag-settings", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name', 'slug', 'description', 'metaTitle', 'metaDescription'],

    name(model) {
      let name = model.get('name');

      if (Ember.isBlank(name)) {
        model.get('errors').add('name', 'You must specify a name for the tag.');
        this.invalidate();
      } else if (name.match(/^,/)) {
        model.get('errors').add('name', 'Tag names can\'t start with commas.');
        this.invalidate();
      } else if (!_validator.default.isLength(name, 0, 191)) {
        model.get('errors').add('name', 'Tag names cannot be longer than 191 characters.');
        this.invalidate();
      }
    },

    slug(model) {
      let slug = model.get('slug');

      if (!_validator.default.isLength(slug || '', 0, 191)) {
        model.get('errors').add('slug', 'URL cannot be longer than 191 characters.');
        this.invalidate();
      }
    },

    description(model) {
      let description = model.get('description');

      if (!_validator.default.isLength(description || '', 0, 500)) {
        model.get('errors').add('description', 'Description cannot be longer than 500 characters.');
        this.invalidate();
      }
    },

    metaTitle(model) {
      let metaTitle = model.get('metaTitle');

      if (!_validator.default.isLength(metaTitle || '', 0, 300)) {
        model.get('errors').add('metaTitle', 'Meta Title cannot be longer than 300 characters.');
        this.invalidate();
      }
    },

    metaDescription(model) {
      let metaDescription = model.get('metaDescription');

      if (!_validator.default.isLength(metaDescription || '', 0, 500)) {
        model.get('errors').add('metaDescription', 'Meta Description cannot be longer than 500 characters.');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/user", ["exports", "ghost-admin/validators/base", "ghost-admin/validators/mixins/password", "validator"], function (_exports, _base, _password, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const userValidator = _base.default.extend(_password.default, {
    init() {
      this.properties = this.properties || ['name', 'bio', 'email', 'location', 'website', 'roles'];

      this._super(...arguments);
    },

    isActive(model) {
      return model.get('status') === 'active';
    },

    name(model) {
      let name = model.get('name');

      if (this.isActive(model)) {
        if (Ember.isBlank(name)) {
          model.get('errors').add('name', 'Please enter a name.');
          this.invalidate();
        } else if (!_validator.default.isLength(name, 0, 191)) {
          model.get('errors').add('name', 'Name is too long');
          this.invalidate();
        }
      }
    },

    bio(model) {
      let bio = model.get('bio');

      if (this.isActive(model)) {
        if (!_validator.default.isLength(bio || '', 0, 200)) {
          model.get('errors').add('bio', 'Bio is too long');
          this.invalidate();
        }
      }
    },

    email(model) {
      let email = model.get('email');

      if (!_validator.default.isEmail(email || '')) {
        model.get('errors').add('email', 'Please supply a valid email address');
        this.invalidate();
      }

      if (!_validator.default.isLength(email || '', 0, 191)) {
        model.get('errors').add('email', 'Email is too long');
        this.invalidate();
      }
    },

    location(model) {
      let location = model.get('location');

      if (this.isActive(model)) {
        if (!_validator.default.isLength(location || '', 0, 150)) {
          model.get('errors').add('location', 'Location is too long');
          this.invalidate();
        }
      }
    },

    website(model) {
      let website = model.get('website'); // eslint-disable-next-line camelcase

      let isInvalidWebsite = !_validator.default.isURL(website || '', {
        require_protocol: false
      }) || !_validator.default.isLength(website || '', 0, 2000);

      if (this.isActive(model)) {
        if (!Ember.isBlank(website) && isInvalidWebsite) {
          model.get('errors').add('website', 'Website is not a valid url');
          this.invalidate();
        }
      }
    },

    roles(model) {
      if (!this.isActive(model)) {
        let roles = model.get('roles');

        if (roles.length < 1) {
          model.get('errors').add('role', 'Please select a role');
          this.invalidate();
        }
      }
    },

    passwordChange(model) {
      let newPassword = model.get('newPassword');
      let ne2Password = model.get('ne2Password'); // validation only marks the requested property as validated so we
      // have to add properties manually

      model.get('hasValidated').addObject('newPassword');
      model.get('hasValidated').addObject('ne2Password');

      if (Ember.isBlank(newPassword) && Ember.isBlank(ne2Password)) {
        model.get('errors').add('newPassword', 'Sorry, passwords can\'t be blank');
        this.invalidate();
      } else {
        if (!_validator.default.equals(newPassword, ne2Password || '')) {
          model.get('errors').add('ne2Password', 'Your new passwords do not match');
          this.invalidate();
        }

        this.passwordValidation(model, newPassword, 'newPassword');
      }
    },

    ownPasswordChange(model) {
      let oldPassword = model.get('password');
      this.passwordChange(model); // validation only marks the requested property as validated so we
      // have to add properties manually

      model.get('hasValidated').addObject('password');

      if (Ember.isBlank(oldPassword)) {
        model.get('errors').add('password', 'Your current password is required to set a new one');
        this.invalidate();
      }
    }

  });

  var _default = userValidator.create();

  _exports.default = _default;
});
;define("ghost-admin/validators/webhook", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name', 'event', 'targetUrl'],

    name(model) {
      if (Ember.isBlank(model.name)) {
        model.errors.add('name', 'Please enter a name');
        model.hasValidated.pushObject('name');
        this.invalidate();
      } else if (!_validator.default.isLength(model.name, 0, 191)) {
        model.errors.add('name', 'Name is too long, max 191 chars');
        model.hasValidated.pushObject('name');
        this.invalidate();
      }
    },

    event(model) {
      if (Ember.isBlank(model.event)) {
        model.errors.add('event', 'Please select an event');
        model.hasValidated.pushObject('event');
        this.invalidate();
      }
    },

    targetUrl(model) {
      if (Ember.isBlank(model.targetUrl)) {
        model.errors.add('targetUrl', 'Please enter a target URL');
      } else if (!_validator.default.isURL(model.targetUrl || '', {
        require_protocol: false
      })) {
        model.errors.add('targetUrl', 'Please enter a valid URL');
      } else if (!_validator.default.isLength(model.targetUrl, 0, 2000)) {
        model.errors.add('targetUrl', 'Target URL is too long, max 2000 chars');
      }

      model.hasValidated.pushObject('targetUrl');

      if (model.errors.has('targetUrl')) {
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/views/application", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({});

  _exports.default = _default;
});
;

;define('ghost-admin/config/environment', [], function() {
  var prefix = 'ghost-admin';
try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(decodeURIComponent(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

});

;
          if (!runningTests) {
            require("ghost-admin/app")["default"].create({"version":"4.34","LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_TRANSITIONS_INTERNAL":true,"LOG_VIEW_LOOKUPS":true,"name":"ghost-admin"});
          }
        
//# sourceMappingURL=ghost.map
