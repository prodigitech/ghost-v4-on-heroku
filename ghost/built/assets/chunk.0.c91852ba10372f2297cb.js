(window["webpackJsonp_ember_auto_import_"] = window["webpackJsonp_ember_auto_import_"] || []).push([[0],{

/***/ "./node_modules/@sentry/tracing/esm/browser/backgroundtab.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/backgroundtab.js ***!
  \*******************************************************************/
/*! exports provided: registerBackgroundTabDetection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registerBackgroundTabDetection\", function() { return registerBackgroundTabDetection; });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ \"./node_modules/@sentry/tracing/esm/constants.js\");\n/* harmony import */ var _spanstatus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../spanstatus */ \"./node_modules/@sentry/tracing/esm/spanstatus.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ \"./node_modules/@sentry/tracing/esm/utils.js\");\n\n\n\n\nvar global = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"getGlobalObject\"])();\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\n\nfunction registerBackgroundTabDetection() {\n  if (global && global.document) {\n    global.document.addEventListener('visibilitychange', function () {\n      var activeTransaction = Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"getActiveTransaction\"])();\n\n      if (global.document.hidden && activeTransaction) {\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].log(\"[Tracing] Transaction: \" + _spanstatus__WEBPACK_IMPORTED_MODULE_2__[\"SpanStatus\"].Cancelled + \" -> since tab moved to the background, op: \" + activeTransaction.op); // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n\n        if (!activeTransaction.status) {\n          activeTransaction.setStatus(_spanstatus__WEBPACK_IMPORTED_MODULE_2__[\"SpanStatus\"].Cancelled);\n        }\n\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.setTag(_constants__WEBPACK_IMPORTED_MODULE_1__[\"FINISH_REASON_TAG\"], _constants__WEBPACK_IMPORTED_MODULE_1__[\"IDLE_TRANSACTION_FINISH_REASONS\"][2]);\n        activeTransaction.finish();\n      }\n    });\n  } else {\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/backgroundtab.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/browsertracing.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/browsertracing.js ***!
  \********************************************************************/
/*! exports provided: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS, BrowserTracing, getHeaderContext, getMetaContent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEFAULT_MAX_TRANSACTION_DURATION_SECONDS\", function() { return DEFAULT_MAX_TRANSACTION_DURATION_SECONDS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrowserTracing\", function() { return BrowserTracing; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getHeaderContext\", function() { return getHeaderContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMetaContent\", function() { return getMetaContent; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n/* harmony import */ var _hubextensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hubextensions */ \"./node_modules/@sentry/tracing/esm/hubextensions.js\");\n/* harmony import */ var _idletransaction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../idletransaction */ \"./node_modules/@sentry/tracing/esm/idletransaction.js\");\n/* harmony import */ var _spanstatus__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../spanstatus */ \"./node_modules/@sentry/tracing/esm/spanstatus.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils */ \"./node_modules/@sentry/tracing/esm/utils.js\");\n/* harmony import */ var _backgroundtab__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./backgroundtab */ \"./node_modules/@sentry/tracing/esm/browser/backgroundtab.js\");\n/* harmony import */ var _metrics__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./metrics */ \"./node_modules/@sentry/tracing/esm/browser/metrics.js\");\n/* harmony import */ var _request__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./request */ \"./node_modules/@sentry/tracing/esm/browser/request.js\");\n/* harmony import */ var _router__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./router */ \"./node_modules/@sentry/tracing/esm/browser/router.js\");\n\n\n\n\n\n\n\n\n\n\nvar DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\nvar DEFAULT_BROWSER_TRACING_OPTIONS = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({\n  idleTimeout: _idletransaction__WEBPACK_IMPORTED_MODULE_3__[\"DEFAULT_IDLE_TIMEOUT\"],\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: _router__WEBPACK_IMPORTED_MODULE_9__[\"instrumentRoutingWithDefaults\"],\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true\n}, _request__WEBPACK_IMPORTED_MODULE_8__[\"defaultRequestInstrumentationOptions\"]);\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\n\n\nvar BrowserTracing =\n/** @class */\nfunction () {\n  function BrowserTracing(_options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = BrowserTracing.id;\n    this._emitOptionsWarning = false;\n    /** Store configured idle timeout so that it can be added as a tag to transactions */\n\n    this._configuredIdleTimeout = undefined;\n    var tracingOrigins = _request__WEBPACK_IMPORTED_MODULE_8__[\"defaultRequestInstrumentationOptions\"].tracingOrigins; // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n\n    if (_options) {\n      this._configuredIdleTimeout = _options.idleTimeout;\n\n      if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n        tracingOrigins = _options.tracingOrigins;\n      } else {\n        this._emitOptionsWarning = true;\n      }\n    }\n\n    this.options = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), {\n      tracingOrigins: tracingOrigins\n    });\n    var _metricOptions = this.options._metricOptions;\n    this._metrics = new _metrics__WEBPACK_IMPORTED_MODULE_7__[\"MetricsInstrumentation\"](_metricOptions && _metricOptions._reportAllChanges);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserTracing.prototype.setupOnce = function (_, getCurrentHub) {\n    var _this = this;\n\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].warn('[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.');\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].warn(\"[Tracing] We added a reasonable default for you: \" + _request__WEBPACK_IMPORTED_MODULE_8__[\"defaultRequestInstrumentationOptions\"].tracingOrigins);\n    } // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var _a = this.options,\n        instrumentRouting = _a.routingInstrumentation,\n        startTransactionOnLocationChange = _a.startTransactionOnLocationChange,\n        startTransactionOnPageLoad = _a.startTransactionOnPageLoad,\n        markBackgroundTransactions = _a.markBackgroundTransactions,\n        traceFetch = _a.traceFetch,\n        traceXHR = _a.traceXHR,\n        tracingOrigins = _a.tracingOrigins,\n        shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;\n    instrumentRouting(function (context) {\n      return _this._createRouteTransaction(context);\n    }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n\n    if (markBackgroundTransactions) {\n      Object(_backgroundtab__WEBPACK_IMPORTED_MODULE_6__[\"registerBackgroundTabDetection\"])();\n    }\n\n    Object(_request__WEBPACK_IMPORTED_MODULE_8__[\"instrumentOutgoingRequests\"])({\n      traceFetch: traceFetch,\n      traceXHR: traceXHR,\n      tracingOrigins: tracingOrigins,\n      shouldCreateSpanForRequest: shouldCreateSpanForRequest\n    });\n  };\n  /** Create routing idle transaction. */\n\n\n  BrowserTracing.prototype._createRouteTransaction = function (context) {\n    var _this = this;\n\n    if (!this._getCurrentHub) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].warn(\"[Tracing] Did not create \" + context.op + \" transaction because _getCurrentHub is invalid.\");\n      return undefined;\n    } // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var _a = this.options,\n        beforeNavigate = _a.beforeNavigate,\n        idleTimeout = _a.idleTimeout,\n        maxTransactionDuration = _a.maxTransactionDuration;\n    var parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    var expandedContext = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, context), parentContextFromHeader), {\n      trimEnd: true\n    });\n\n    var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext; // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n\n    var finalContext = modifiedContext === undefined ? Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, expandedContext), {\n      sampled: false\n    }) : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log(\"[Tracing] Will not send \" + finalContext.op + \" transaction because of beforeNavigate.\");\n    }\n\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log(\"[Tracing] Starting \" + finalContext.op + \" transaction on scope\");\n\n    var hub = this._getCurrentHub();\n\n    var location = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"getGlobalObject\"])().location;\n    var idleTransaction = Object(_hubextensions__WEBPACK_IMPORTED_MODULE_2__[\"startIdleTransaction\"])(hub, finalContext, idleTimeout, true, {\n      location: location\n    });\n    idleTransaction.registerBeforeFinishCallback(function (transaction, endTimestamp) {\n      _this._metrics.addPerformanceEntries(transaction);\n\n      adjustTransactionDuration(Object(_utils__WEBPACK_IMPORTED_MODULE_5__[\"secToMs\"])(maxTransactionDuration), transaction, endTimestamp);\n    });\n    idleTransaction.setTag('idleTimeout', this._configuredIdleTimeout);\n    return idleTransaction;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserTracing.id = 'BrowserTracing';\n  return BrowserTracing;\n}();\n\n\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\n\nfunction getHeaderContext() {\n  var header = getMetaContent('sentry-trace');\n\n  if (header) {\n    return Object(_utils__WEBPACK_IMPORTED_MODULE_5__[\"extractTraceparentData\"])(header);\n  }\n\n  return undefined;\n}\n/** Returns the value of a meta tag */\n\nfunction getMetaContent(metaName) {\n  var el = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"getGlobalObject\"])().document.querySelector(\"meta[name=\" + metaName + \"]\");\n  return el ? el.getAttribute('content') : null;\n}\n/** Adjusts transaction value based on max transaction duration */\n\nfunction adjustTransactionDuration(maxDuration, transaction, endTimestamp) {\n  var diff = endTimestamp - transaction.startTimestamp;\n  var isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n\n  if (isOutdatedTransaction) {\n    transaction.setStatus(_spanstatus__WEBPACK_IMPORTED_MODULE_4__[\"SpanStatus\"].DeadlineExceeded);\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/browsertracing.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/index.js ***!
  \***********************************************************/
/*! exports provided: BrowserTracing, instrumentOutgoingRequests, defaultRequestInstrumentationOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _browsertracing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./browsertracing */ \"./node_modules/@sentry/tracing/esm/browser/browsertracing.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BrowserTracing\", function() { return _browsertracing__WEBPACK_IMPORTED_MODULE_0__[\"BrowserTracing\"]; });\n\n/* harmony import */ var _request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./request */ \"./node_modules/@sentry/tracing/esm/browser/request.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"instrumentOutgoingRequests\", function() { return _request__WEBPACK_IMPORTED_MODULE_1__[\"instrumentOutgoingRequests\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"defaultRequestInstrumentationOptions\", function() { return _request__WEBPACK_IMPORTED_MODULE_1__[\"defaultRequestInstrumentationOptions\"]; });\n\n\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/index.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/metrics.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/metrics.js ***!
  \*************************************************************/
/*! exports provided: MetricsInstrumentation, addResourceSpans, _startChild */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MetricsInstrumentation\", function() { return MetricsInstrumentation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addResourceSpans\", function() { return addResourceSpans; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_startChild\", function() { return _startChild; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"./node_modules/@sentry/tracing/esm/utils.js\");\n/* harmony import */ var _web_vitals_getCLS__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./web-vitals/getCLS */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/getCLS.js\");\n/* harmony import */ var _web_vitals_getFID__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./web-vitals/getFID */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/getFID.js\");\n/* harmony import */ var _web_vitals_getLCP__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./web-vitals/getLCP */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/getLCP.js\");\n/* harmony import */ var _web_vitals_lib_getVisibilityWatcher__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./web-vitals/lib/getVisibilityWatcher */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js\");\n\n\n\n\n\n\n\nvar global = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"getGlobalObject\"])();\n/** Class tracking metrics  */\n\nvar MetricsInstrumentation =\n/** @class */\nfunction () {\n  function MetricsInstrumentation(_reportAllChanges) {\n    if (_reportAllChanges === void 0) {\n      _reportAllChanges = false;\n    }\n\n    var _a, _b;\n\n    this._reportAllChanges = _reportAllChanges;\n    this._measurements = {};\n    this._performanceCursor = 0;\n\n    if (!Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"isNodeEnv\"])() && ((_a = global) === null || _a === void 0 ? void 0 : _a.performance) && ((_b = global) === null || _b === void 0 ? void 0 : _b.document)) {\n      if (global.performance.mark) {\n        global.performance.mark('sentry-tracing-init');\n      }\n\n      this._trackCLS();\n\n      this._trackLCP();\n\n      this._trackFID();\n    }\n  }\n  /** Add performance related spans to a transaction */\n\n\n  MetricsInstrumentation.prototype.addPerformanceEntries = function (transaction) {\n    var _this = this;\n\n    if (!global || !global.performance || !global.performance.getEntries || !_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"browserPerformanceTimeOrigin\"]) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Tracing] Adding & adjusting spans using Performance API');\n    var timeOrigin = Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"browserPerformanceTimeOrigin\"]);\n    var entryScriptSrc;\n\n    if (global.document && global.document.scripts) {\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (var i = 0; i < global.document.scripts.length; i++) {\n        // We go through all scripts on the page and look for 'data-entry'\n        // We remember the name and measure the time between this script finished loading and\n        // our mark 'sentry-tracing-init'\n        if (global.document.scripts[i].dataset.entry === 'true') {\n          entryScriptSrc = global.document.scripts[i].src;\n          break;\n        }\n      }\n    }\n\n    var entryScriptStartTimestamp;\n    var tracingInitMarkStartTime;\n    var responseStartTimestamp;\n    var requestStartTimestamp;\n    global.performance.getEntries().slice(this._performanceCursor).forEach(function (entry) {\n      var startTime = Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(entry.startTime);\n      var duration = Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(entry.duration);\n\n      if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n        return;\n      }\n\n      switch (entry.entryType) {\n        case 'navigation':\n          {\n            addNavigationSpans(transaction, entry, timeOrigin);\n            responseStartTimestamp = timeOrigin + Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(entry.responseStart);\n            requestStartTimestamp = timeOrigin + Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(entry.requestStart);\n            break;\n          }\n\n        case 'mark':\n        case 'paint':\n        case 'measure':\n          {\n            var startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n            if (tracingInitMarkStartTime === undefined && entry.name === 'sentry-tracing-init') {\n              tracingInitMarkStartTime = startTimestamp;\n            } // capture web vitals\n\n\n            var firstHidden = Object(_web_vitals_lib_getVisibilityWatcher__WEBPACK_IMPORTED_MODULE_6__[\"getVisibilityWatcher\"])(); // Only report if the page wasn't hidden prior to the web vital.\n\n            var shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n            if (entry.name === 'first-paint' && shouldRecord) {\n              _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Measurements] Adding FP');\n              _this._measurements['fp'] = {\n                value: entry.startTime\n              };\n              _this._measurements['mark.fp'] = {\n                value: startTimestamp\n              };\n            }\n\n            if (entry.name === 'first-contentful-paint' && shouldRecord) {\n              _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Measurements] Adding FCP');\n              _this._measurements['fcp'] = {\n                value: entry.startTime\n              };\n              _this._measurements['mark.fcp'] = {\n                value: startTimestamp\n              };\n            }\n\n            break;\n          }\n\n        case 'resource':\n          {\n            var resourceName = entry.name.replace(global.location.origin, '');\n            var endTimestamp = addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin); // We remember the entry script end time to calculate the difference to the first init mark\n\n            if (entryScriptStartTimestamp === undefined && (entryScriptSrc || '').indexOf(resourceName) > -1) {\n              entryScriptStartTimestamp = endTimestamp;\n            }\n\n            break;\n          }\n\n        default: // Ignore other entry types.\n\n      }\n    });\n\n    if (entryScriptStartTimestamp !== undefined && tracingInitMarkStartTime !== undefined) {\n      _startChild(transaction, {\n        description: 'evaluation',\n        endTimestamp: tracingInitMarkStartTime,\n        op: 'script',\n        startTimestamp: entryScriptStartTimestamp\n      });\n    }\n\n    this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);\n\n    this._trackNavigator(transaction); // Measurements are only available for pageload transactions\n\n\n    if (transaction.op === 'pageload') {\n      // normalize applicable web vital values to be relative to transaction.startTimestamp\n      var timeOrigin_1 = Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"browserPerformanceTimeOrigin\"]); // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n      // start of the response in milliseconds\n\n      if (typeof responseStartTimestamp === 'number') {\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Measurements] Adding TTFB');\n        this._measurements['ttfb'] = {\n          value: (responseStartTimestamp - transaction.startTimestamp) * 1000\n        };\n\n        if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n          // Capture the time spent making the request and receiving the first byte of the response.\n          // This is the time between the start of the request and the start of the response in milliseconds.\n          this._measurements['ttfb.requestTime'] = {\n            value: (responseStartTimestamp - requestStartTimestamp) * 1000\n          };\n        }\n      }\n\n      ['fcp', 'fp', 'lcp'].forEach(function (name) {\n        if (!_this._measurements[name] || timeOrigin_1 >= transaction.startTimestamp) {\n          return;\n        } // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n        // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n        // to be adjusted to be relative to transaction.startTimestamp.\n\n\n        var oldValue = _this._measurements[name].value;\n        var measurementTimestamp = timeOrigin_1 + Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(oldValue); // normalizedValue should be in milliseconds\n\n        var normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n        var delta = normalizedValue - oldValue;\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log(\"[Measurements] Normalized \" + name + \" from \" + oldValue + \" to \" + normalizedValue + \" (\" + delta + \")\");\n        _this._measurements[name].value = normalizedValue;\n      });\n\n      if (this._measurements['mark.fid'] && this._measurements['fid']) {\n        // create span for FID\n        _startChild(transaction, {\n          description: 'first input delay',\n          endTimestamp: this._measurements['mark.fid'].value + Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(this._measurements['fid'].value),\n          op: 'web.vitals',\n          startTimestamp: this._measurements['mark.fid'].value\n        });\n      } // If FCP is not recorded we should not record the cls value\n      // according to the new definition of CLS.\n\n\n      if (!('fcp' in this._measurements)) {\n        delete this._measurements.cls;\n      }\n\n      transaction.setMeasurements(this._measurements);\n\n      this._tagMetricInfo(transaction);\n\n      transaction.setTag('sentry_reportAllChanges', this._reportAllChanges);\n    }\n  };\n  /** Add LCP / CLS data to transaction to allow debugging */\n\n\n  MetricsInstrumentation.prototype._tagMetricInfo = function (transaction) {\n    if (this._lcpEntry) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Measurements] Adding LCP Data'); // Capture Properties of the LCP element that contributes to the LCP.\n\n      if (this._lcpEntry.element) {\n        transaction.setTag('lcp.element', Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"htmlTreeAsString\"])(this._lcpEntry.element));\n      }\n\n      if (this._lcpEntry.id) {\n        transaction.setTag('lcp.id', this._lcpEntry.id);\n      }\n\n      if (this._lcpEntry.url) {\n        // Trim URL to the first 200 characters.\n        transaction.setTag('lcp.url', this._lcpEntry.url.trim().slice(0, 200));\n      }\n\n      transaction.setTag('lcp.size', this._lcpEntry.size);\n    } // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n\n\n    if (this._clsEntry && this._clsEntry.sources) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Measurements] Adding CLS Data');\n\n      this._clsEntry.sources.forEach(function (source, index) {\n        return transaction.setTag(\"cls.source.\" + (index + 1), Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"htmlTreeAsString\"])(source.node));\n      });\n    }\n  };\n  /** Starts tracking the Cumulative Layout Shift on the current page. */\n\n\n  MetricsInstrumentation.prototype._trackCLS = function () {\n    var _this = this; // See:\n    // https://web.dev/evolving-cls/\n    // https://web.dev/cls-web-tooling/\n\n\n    Object(_web_vitals_getCLS__WEBPACK_IMPORTED_MODULE_3__[\"getCLS\"])(function (metric) {\n      var entry = metric.entries.pop();\n\n      if (!entry) {\n        return;\n      }\n\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Measurements] Adding CLS');\n      _this._measurements['cls'] = {\n        value: metric.value\n      };\n      _this._clsEntry = entry;\n    });\n  };\n  /**\n   * Capture the information of the user agent.\n   */\n\n\n  MetricsInstrumentation.prototype._trackNavigator = function (transaction) {\n    var navigator = global.navigator;\n\n    if (!navigator) {\n      return;\n    } // track network connectivity\n\n\n    var connection = navigator.connection;\n\n    if (connection) {\n      if (connection.effectiveType) {\n        transaction.setTag('effectiveConnectionType', connection.effectiveType);\n      }\n\n      if (connection.type) {\n        transaction.setTag('connectionType', connection.type);\n      }\n\n      if (isMeasurementValue(connection.rtt)) {\n        this._measurements['connection.rtt'] = {\n          value: connection.rtt\n        };\n      }\n\n      if (isMeasurementValue(connection.downlink)) {\n        this._measurements['connection.downlink'] = {\n          value: connection.downlink\n        };\n      }\n    }\n\n    if (isMeasurementValue(navigator.deviceMemory)) {\n      transaction.setTag('deviceMemory', String(navigator.deviceMemory));\n    }\n\n    if (isMeasurementValue(navigator.hardwareConcurrency)) {\n      transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n    }\n  };\n  /** Starts tracking the Largest Contentful Paint on the current page. */\n\n\n  MetricsInstrumentation.prototype._trackLCP = function () {\n    var _this = this;\n\n    Object(_web_vitals_getLCP__WEBPACK_IMPORTED_MODULE_5__[\"getLCP\"])(function (metric) {\n      var entry = metric.entries.pop();\n\n      if (!entry) {\n        return;\n      }\n\n      var timeOrigin = Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"browserPerformanceTimeOrigin\"]);\n      var startTime = Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(entry.startTime);\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Measurements] Adding LCP');\n      _this._measurements['lcp'] = {\n        value: metric.value\n      };\n      _this._measurements['mark.lcp'] = {\n        value: timeOrigin + startTime\n      };\n      _this._lcpEntry = entry;\n    }, this._reportAllChanges);\n  };\n  /** Starts tracking the First Input Delay on the current page. */\n\n\n  MetricsInstrumentation.prototype._trackFID = function () {\n    var _this = this;\n\n    Object(_web_vitals_getFID__WEBPACK_IMPORTED_MODULE_4__[\"getFID\"])(function (metric) {\n      var entry = metric.entries.pop();\n\n      if (!entry) {\n        return;\n      }\n\n      var timeOrigin = Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"browserPerformanceTimeOrigin\"]);\n      var startTime = Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(entry.startTime);\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Measurements] Adding FID');\n      _this._measurements['fid'] = {\n        value: metric.value\n      };\n      _this._measurements['mark.fid'] = {\n        value: timeOrigin + startTime\n      };\n    });\n  };\n\n  return MetricsInstrumentation;\n}();\n\n\n/** Instrument navigation entries */\n\nfunction addNavigationSpans(transaction, entry, timeOrigin) {\n  addPerformanceNavigationTiming({\n    transaction: transaction,\n    entry: entry,\n    event: 'unloadEvent',\n    timeOrigin: timeOrigin\n  });\n  addPerformanceNavigationTiming({\n    transaction: transaction,\n    entry: entry,\n    event: 'redirect',\n    timeOrigin: timeOrigin\n  });\n  addPerformanceNavigationTiming({\n    transaction: transaction,\n    entry: entry,\n    event: 'domContentLoadedEvent',\n    timeOrigin: timeOrigin\n  });\n  addPerformanceNavigationTiming({\n    transaction: transaction,\n    entry: entry,\n    event: 'loadEvent',\n    timeOrigin: timeOrigin\n  });\n  addPerformanceNavigationTiming({\n    transaction: transaction,\n    entry: entry,\n    event: 'connect',\n    timeOrigin: timeOrigin\n  });\n  addPerformanceNavigationTiming({\n    transaction: transaction,\n    entry: entry,\n    event: 'secureConnection',\n    timeOrigin: timeOrigin,\n    eventEnd: 'connectEnd',\n    description: 'TLS/SSL'\n  });\n  addPerformanceNavigationTiming({\n    transaction: transaction,\n    entry: entry,\n    event: 'fetch',\n    timeOrigin: timeOrigin,\n    eventEnd: 'domainLookupStart',\n    description: 'cache'\n  });\n  addPerformanceNavigationTiming({\n    transaction: transaction,\n    entry: entry,\n    event: 'domainLookup',\n    timeOrigin: timeOrigin,\n    description: 'DNS'\n  });\n  addRequest(transaction, entry, timeOrigin);\n}\n/** Create measure related spans */\n\n\nfunction addMeasureSpans(transaction, entry, startTime, duration, timeOrigin) {\n  var measureStartTimestamp = timeOrigin + startTime;\n  var measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType,\n    startTimestamp: measureStartTimestamp\n  });\n\n  return measureStartTimestamp;\n}\n/** Create resource-related spans */\n\n\nfunction addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return undefined;\n  }\n\n  var data = {};\n\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n\n  var startTimestamp = timeOrigin + startTime;\n  var endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp: endTimestamp,\n    op: entry.initiatorType ? \"resource.\" + entry.initiatorType : 'resource',\n    startTimestamp: startTimestamp,\n    data: data\n  });\n\n  return endTimestamp;\n}\n/** Create performance navigation related spans */\n\nfunction addPerformanceNavigationTiming(props) {\n  var transaction = props.transaction,\n      entry = props.entry,\n      event = props.event,\n      timeOrigin = props.timeOrigin,\n      eventEnd = props.eventEnd,\n      description = props.description;\n  var end = eventEnd ? entry[eventEnd] : entry[event + \"End\"];\n  var start = entry[event + \"Start\"];\n\n  if (!start || !end) {\n    return;\n  }\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: description !== null && description !== void 0 ? description : event,\n    startTimestamp: timeOrigin + Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(start),\n    endTimestamp: timeOrigin + Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(end)\n  });\n}\n/** Create request and response related spans */\n\n\nfunction addRequest(transaction, entry, timeOrigin) {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(entry.requestStart),\n    endTimestamp: timeOrigin + Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(entry.responseEnd)\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(entry.responseStart),\n    endTimestamp: timeOrigin + Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"msToSec\"])(entry.responseEnd)\n  });\n}\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\n\n\nfunction _startChild(transaction, _a) {\n  var startTimestamp = _a.startTimestamp,\n      ctx = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__rest\"])(_a, [\"startTimestamp\"]);\n\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({\n    startTimestamp: startTimestamp\n  }, ctx));\n}\n/**\n * Checks if a given value is a valid measurement value.\n */\n\nfunction isMeasurementValue(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/metrics.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/request.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/request.js ***!
  \*************************************************************/
/*! exports provided: DEFAULT_TRACING_ORIGINS, defaultRequestInstrumentationOptions, instrumentOutgoingRequests, fetchCallback, xhrCallback */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEFAULT_TRACING_ORIGINS\", function() { return DEFAULT_TRACING_ORIGINS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultRequestInstrumentationOptions\", function() { return defaultRequestInstrumentationOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"instrumentOutgoingRequests\", function() { return instrumentOutgoingRequests; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetchCallback\", function() { return fetchCallback; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"xhrCallback\", function() { return xhrCallback; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n/* harmony import */ var _spanstatus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../spanstatus */ \"./node_modules/@sentry/tracing/esm/spanstatus.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ \"./node_modules/@sentry/tracing/esm/utils.js\");\n\n\n\n\nvar DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\nvar defaultRequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS\n};\n/** Registers span creators for xhr and fetch requests  */\n\nfunction instrumentOutgoingRequests(_options) {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, defaultRequestInstrumentationOptions), _options),\n      traceFetch = _a.traceFetch,\n      traceXHR = _a.traceXHR,\n      tracingOrigins = _a.tracingOrigins,\n      shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest; // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n\n\n  var urlMap = {};\n\n  var defaultShouldCreateSpan = function (url) {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n\n    var origins = tracingOrigins;\n    urlMap[url] = origins.some(function (origin) {\n      return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"isMatchingPattern\"])(url, origin);\n    }) && !Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"isMatchingPattern\"])(url, 'sentry_key');\n    return urlMap[url];\n  }; // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n\n\n  var shouldCreateSpan = defaultShouldCreateSpan;\n\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = function (url) {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  var spans = {};\n\n  if (traceFetch) {\n    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"addInstrumentationHandler\"])({\n      callback: function (handlerData) {\n        fetchCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'fetch'\n    });\n  }\n\n  if (traceXHR) {\n    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"addInstrumentationHandler\"])({\n      callback: function (handlerData) {\n        xhrCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'xhr'\n    });\n  }\n}\n/**\n * Create and track fetch request spans\n */\n\nfunction fetchCallback(handlerData, shouldCreateSpan, spans) {\n  if (!Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"hasTracingEnabled\"])() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp && handlerData.fetchData.__span) {\n    var span = spans[handlerData.fetchData.__span];\n\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n      } else if (handlerData.error) {\n        span.setStatus(_spanstatus__WEBPACK_IMPORTED_MODULE_2__[\"SpanStatus\"].InternalError);\n      }\n\n      span.finish(); // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete spans[handlerData.fetchData.__span];\n    }\n\n    return;\n  }\n\n  var activeTransaction = Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"getActiveTransaction\"])();\n\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, handlerData.fetchData), {\n        type: 'fetch'\n      }),\n      description: handlerData.fetchData.method + \" \" + handlerData.fetchData.url,\n      op: 'http.client'\n    });\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n    var request = handlerData.args[0] = handlerData.args[0]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var options = handlerData.args[1] = handlerData.args[1] || {};\n    var headers = options.headers;\n\n    if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"isInstanceOf\"])(request, Request)) {\n      headers = request.headers;\n    }\n\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__spread\"])(headers, [['sentry-trace', span.toTraceparent()]]);\n      } else {\n        headers = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, headers), {\n          'sentry-trace': span.toTraceparent()\n        });\n      }\n    } else {\n      headers = {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n\n    options.headers = headers;\n  }\n}\n/**\n * Create and track xhr request spans\n */\n\nfunction xhrCallback(handlerData, shouldCreateSpan, spans) {\n  var _a, _b;\n\n  if (!Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"hasTracingEnabled\"])() || ((_a = handlerData.xhr) === null || _a === void 0 ? void 0 : _a.__sentry_own_request__) || !(((_b = handlerData.xhr) === null || _b === void 0 ? void 0 : _b.__sentry_xhr__) && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))) {\n    return;\n  }\n\n  var xhr = handlerData.xhr.__sentry_xhr__; // check first if the request has finished and is tracked by an existing span which should now end\n\n  if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_span_id__) {\n    var span = spans[handlerData.xhr.__sentry_xhr_span_id__];\n\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish(); // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete spans[handlerData.xhr.__sentry_xhr_span_id__];\n    }\n\n    return;\n  } // if not, create a new span to track it\n\n\n  var activeTransaction = Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"getActiveTransaction\"])();\n\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, xhr.data), {\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url\n      }),\n      description: xhr.method + \" \" + xhr.url,\n      op: 'http.client'\n    });\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {// Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/request.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/router.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/router.js ***!
  \************************************************************/
/*! exports provided: instrumentRoutingWithDefaults */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"instrumentRoutingWithDefaults\", function() { return instrumentRoutingWithDefaults; });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n\nvar global = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"getGlobalObject\"])();\n/**\n * Default function implementing pageload and navigation transactions\n */\n\nfunction instrumentRoutingWithDefaults(customStartTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {\n  if (startTransactionOnPageLoad === void 0) {\n    startTransactionOnPageLoad = true;\n  }\n\n  if (startTransactionOnLocationChange === void 0) {\n    startTransactionOnLocationChange = true;\n  }\n\n  if (!global || !global.location) {\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  var startingUrl = global.location.href;\n  var activeTransaction;\n\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: global.location.pathname,\n      op: 'pageload'\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"addInstrumentationHandler\"])({\n      callback: function (_a) {\n        var to = _a.to,\n            from = _a.from;\n        /**\n         * This early return is there to account for some cases where a navigation transaction starts right after\n         * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n         * create an uneccessary navigation transaction.\n         *\n         * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n         * only be caused in certain development environments where the usage of a hot module reloader is causing\n         * errors.\n         */\n\n        if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n          startingUrl = undefined;\n          return;\n        }\n\n        if (from !== to) {\n          startingUrl = undefined;\n\n          if (activeTransaction) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].log(\"[Tracing] Finishing current transaction with op: \" + activeTransaction.op); // If there's an open transaction on the scope, we need to finish it before creating an new one.\n\n            activeTransaction.finish();\n          }\n\n          activeTransaction = customStartTransaction({\n            name: global.location.pathname,\n            op: 'navigation'\n          });\n        }\n      },\n      type: 'history'\n    });\n  }\n}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/router.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/web-vitals/getCLS.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/web-vitals/getCLS.js ***!
  \***********************************************************************/
/*! exports provided: getCLS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCLS\", function() { return getCLS; });\n/* harmony import */ var _lib_bindReporter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/bindReporter */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/bindReporter.js\");\n/* harmony import */ var _lib_initMetric__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/initMetric */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/initMetric.js\");\n/* harmony import */ var _lib_observe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/observe */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/observe.js\");\n/* harmony import */ var _lib_onHidden__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/onHidden */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/onHidden.js\");\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar getCLS = function (onReport, reportAllChanges) {\n  var metric = Object(_lib_initMetric__WEBPACK_IMPORTED_MODULE_1__[\"initMetric\"])('CLS', 0);\n  var report;\n  var sessionValue = 0;\n  var sessionEntries = [];\n\n  var entryHandler = function (entry) {\n    // Only count layout shifts without recent user input.\n    // TODO: Figure out why entry can be undefined\n    if (entry && !entry.hadRecentInput) {\n      var firstSessionEntry = sessionEntries[0];\n      var lastSessionEntry = sessionEntries[sessionEntries.length - 1]; // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n\n      if (sessionValue && sessionEntries.length !== 0 && entry.startTime - lastSessionEntry.startTime < 1000 && entry.startTime - firstSessionEntry.startTime < 5000) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      } // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n\n\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n\n        if (report) {\n          report();\n        }\n      }\n    }\n  };\n\n  var po = Object(_lib_observe__WEBPACK_IMPORTED_MODULE_2__[\"observe\"])('layout-shift', entryHandler);\n\n  if (po) {\n    report = Object(_lib_bindReporter__WEBPACK_IMPORTED_MODULE_0__[\"bindReporter\"])(onReport, metric, reportAllChanges);\n    Object(_lib_onHidden__WEBPACK_IMPORTED_MODULE_3__[\"onHidden\"])(function () {\n      po.takeRecords().map(entryHandler);\n      report(true);\n    });\n  }\n};\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/web-vitals/getCLS.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/web-vitals/getFID.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/web-vitals/getFID.js ***!
  \***********************************************************************/
/*! exports provided: getFID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFID\", function() { return getFID; });\n/* harmony import */ var _lib_bindReporter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/bindReporter */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/bindReporter.js\");\n/* harmony import */ var _lib_getVisibilityWatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/getVisibilityWatcher */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js\");\n/* harmony import */ var _lib_initMetric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/initMetric */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/initMetric.js\");\n/* harmony import */ var _lib_observe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/observe */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/observe.js\");\n/* harmony import */ var _lib_onHidden__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/onHidden */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/onHidden.js\");\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar getFID = function (onReport, reportAllChanges) {\n  var visibilityWatcher = Object(_lib_getVisibilityWatcher__WEBPACK_IMPORTED_MODULE_1__[\"getVisibilityWatcher\"])();\n  var metric = Object(_lib_initMetric__WEBPACK_IMPORTED_MODULE_2__[\"initMetric\"])('FID');\n  var report;\n\n  var entryHandler = function (entry) {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  var po = Object(_lib_observe__WEBPACK_IMPORTED_MODULE_3__[\"observe\"])('first-input', entryHandler);\n\n  if (po) {\n    report = Object(_lib_bindReporter__WEBPACK_IMPORTED_MODULE_0__[\"bindReporter\"])(onReport, metric, reportAllChanges);\n    Object(_lib_onHidden__WEBPACK_IMPORTED_MODULE_4__[\"onHidden\"])(function () {\n      po.takeRecords().map(entryHandler);\n      po.disconnect();\n    }, true);\n  }\n};\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/web-vitals/getFID.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/web-vitals/getLCP.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/web-vitals/getLCP.js ***!
  \***********************************************************************/
/*! exports provided: getLCP */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLCP\", function() { return getLCP; });\n/* harmony import */ var _lib_bindReporter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/bindReporter */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/bindReporter.js\");\n/* harmony import */ var _lib_getVisibilityWatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/getVisibilityWatcher */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js\");\n/* harmony import */ var _lib_initMetric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/initMetric */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/initMetric.js\");\n/* harmony import */ var _lib_observe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/observe */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/observe.js\");\n/* harmony import */ var _lib_onHidden__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/onHidden */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/onHidden.js\");\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar reportedMetricIDs = {};\nvar getLCP = function (onReport, reportAllChanges) {\n  var visibilityWatcher = Object(_lib_getVisibilityWatcher__WEBPACK_IMPORTED_MODULE_1__[\"getVisibilityWatcher\"])();\n  var metric = Object(_lib_initMetric__WEBPACK_IMPORTED_MODULE_2__[\"initMetric\"])('LCP');\n  var report;\n\n  var entryHandler = function (entry) {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    var value = entry.startTime; // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n\n    if (report) {\n      report();\n    }\n  };\n\n  var po = Object(_lib_observe__WEBPACK_IMPORTED_MODULE_3__[\"observe\"])('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = Object(_lib_bindReporter__WEBPACK_IMPORTED_MODULE_0__[\"bindReporter\"])(onReport, metric, reportAllChanges);\n\n    var stopListening_1 = function () {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    }; // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n\n\n    ['keydown', 'click'].forEach(function (type) {\n      addEventListener(type, stopListening_1, {\n        once: true,\n        capture: true\n      });\n    });\n    Object(_lib_onHidden__WEBPACK_IMPORTED_MODULE_4__[\"onHidden\"])(stopListening_1, true);\n  }\n};\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/web-vitals/getLCP.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/bindReporter.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/bindReporter.js ***!
  \*********************************************************************************/
/*! exports provided: bindReporter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bindReporter\", function() { return bindReporter; });\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar bindReporter = function (callback, metric, reportAllChanges) {\n  var prevValue;\n  return function (forceReport) {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        metric.delta = metric.value - (prevValue || 0); // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n\n        if (metric.delta || prevValue === undefined) {\n          prevValue = metric.value;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/bindReporter.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/generateUniqueID.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/generateUniqueID.js ***!
  \*************************************************************************************/
/*! exports provided: generateUniqueID */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateUniqueID\", function() { return generateUniqueID; });\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nvar generateUniqueID = function () {\n  return \"v2-\" + Date.now() + \"-\" + (Math.floor(Math.random() * (9e12 - 1)) + 1e12);\n};\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/generateUniqueID.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js ***!
  \*****************************************************************************************/
/*! exports provided: getVisibilityWatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getVisibilityWatcher\", function() { return getVisibilityWatcher; });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n/* harmony import */ var _onHidden__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./onHidden */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/onHidden.js\");\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar firstHiddenTime = -1;\n\nvar initHiddenTime = function () {\n  return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"getGlobalObject\"])().document.visibilityState === 'hidden' ? 0 : Infinity;\n};\n\nvar trackChanges = function () {\n  // Update the time if/when the document becomes hidden.\n  Object(_onHidden__WEBPACK_IMPORTED_MODULE_1__[\"onHidden\"])(function (_a) {\n    var timeStamp = _a.timeStamp;\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nvar getVisibilityWatcher = function () {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    }\n\n  };\n};\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/initMetric.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/initMetric.js ***!
  \*******************************************************************************/
/*! exports provided: initMetric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initMetric\", function() { return initMetric; });\n/* harmony import */ var _generateUniqueID__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generateUniqueID */ \"./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/generateUniqueID.js\");\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar initMetric = function (name, value) {\n  return {\n    name: name,\n    value: value !== null && value !== void 0 ? value : -1,\n    delta: 0,\n    entries: [],\n    id: Object(_generateUniqueID__WEBPACK_IMPORTED_MODULE_0__[\"generateUniqueID\"])()\n  };\n};\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/initMetric.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/observe.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/observe.js ***!
  \****************************************************************************/
/*! exports provided: observe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"observe\", function() { return observe; });\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nvar observe = function (type, callback) {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      // More extensive feature detect needed for Firefox due to:\n      // https://github.com/GoogleChrome/web-vitals/issues/142\n      if (type === 'first-input' && !('PerformanceEventTiming' in self)) {\n        return;\n      }\n\n      var po = new PerformanceObserver(function (l) {\n        return l.getEntries().map(callback);\n      });\n      po.observe({\n        type: type,\n        buffered: true\n      });\n      return po;\n    }\n  } catch (e) {// Do nothing.\n  }\n\n  return;\n};\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/observe.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/onHidden.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/onHidden.js ***!
  \*****************************************************************************/
/*! exports provided: onHidden */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onHidden\", function() { return onHidden; });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar onHidden = function (cb, once) {\n  var onHiddenOrPageHide = function (event) {\n    if (event.type === 'pagehide' || Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"getGlobalObject\"])().document.visibilityState === 'hidden') {\n      cb(event);\n\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n\n  addEventListener('visibilitychange', onHiddenOrPageHide, true); // Some browsers have buggy implementations of visibilitychange,\n  // so we use pagehide in addition, just to be safe.\n\n  addEventListener('pagehide', onHiddenOrPageHide, true);\n};\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/browser/web-vitals/lib/onHidden.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/constants.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/constants.js ***!
  \*******************************************************/
/*! exports provided: FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FINISH_REASON_TAG\", function() { return FINISH_REASON_TAG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IDLE_TRANSACTION_FINISH_REASONS\", function() { return IDLE_TRANSACTION_FINISH_REASONS; });\n// Store finish reasons in tuple to save on bundle size\n// Readonly type should enforce that this is not mutated.\nvar FINISH_REASON_TAG = 'finishReason';\nvar IDLE_TRANSACTION_FINISH_REASONS = ['heartbeatFailed', 'idleTimeout', 'documentHidden'];\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/constants.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/errors.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/errors.js ***!
  \****************************************************/
/*! exports provided: registerErrorInstrumentation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registerErrorInstrumentation\", function() { return registerErrorInstrumentation; });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n/* harmony import */ var _spanstatus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./spanstatus */ \"./node_modules/@sentry/tracing/esm/spanstatus.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./node_modules/@sentry/tracing/esm/utils.js\");\n\n\n\n/**\n * Configures global error listeners\n */\n\nfunction registerErrorInstrumentation() {\n  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"addInstrumentationHandler\"])({\n    callback: errorCallback,\n    type: 'error'\n  });\n  Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"addInstrumentationHandler\"])({\n    callback: errorCallback,\n    type: 'unhandledrejection'\n  });\n}\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\n\nfunction errorCallback() {\n  var activeTransaction = Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"getActiveTransaction\"])();\n\n  if (activeTransaction) {\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].log(\"[Tracing] Transaction: \" + _spanstatus__WEBPACK_IMPORTED_MODULE_1__[\"SpanStatus\"].InternalError + \" -> Global error occured\");\n    activeTransaction.setStatus(_spanstatus__WEBPACK_IMPORTED_MODULE_1__[\"SpanStatus\"].InternalError);\n  }\n}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/errors.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/hubextensions.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/hubextensions.js ***!
  \***********************************************************/
/*! exports provided: startIdleTransaction, _addTracingExtensions, addExtensionMethods */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"startIdleTransaction\", function() { return startIdleTransaction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_addTracingExtensions\", function() { return _addTracingExtensions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addExtensionMethods\", function() { return addExtensionMethods; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_hub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/hub */ \"./node_modules/@sentry/hub/esm/index.js\");\n/* harmony import */ var _sentry_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/types */ \"./node_modules/@sentry/types/esm/index.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors */ \"./node_modules/@sentry/tracing/esm/errors.js\");\n/* harmony import */ var _idletransaction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./idletransaction */ \"./node_modules/@sentry/tracing/esm/idletransaction.js\");\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transaction */ \"./node_modules/@sentry/tracing/esm/transaction.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils */ \"./node_modules/@sentry/tracing/esm/utils.js\");\n\n\n\n\n\n\n\n\n/** Returns all trace headers that are currently on the top scope. */\n\nfunction traceHeaders() {\n  var scope = this.getScope();\n\n  if (scope) {\n    var span = scope.getSpan();\n\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n  }\n\n  return {};\n}\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\n\n\nfunction sample(transaction, options, samplingContext) {\n  // nothing to do if tracing is not enabled\n  if (!Object(_utils__WEBPACK_IMPORTED_MODULE_7__[\"hasTracingEnabled\"])(options)) {\n    transaction.sampled = false;\n    return transaction;\n  } // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n\n\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: {\n        method: _sentry_types__WEBPACK_IMPORTED_MODULE_2__[\"TransactionSamplingMethod\"].Explicit\n      }\n    });\n    return transaction;\n  } // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n\n\n  var sampleRate;\n\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: _sentry_types__WEBPACK_IMPORTED_MODULE_2__[\"TransactionSamplingMethod\"].Sampler,\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate)\n      }\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: _sentry_types__WEBPACK_IMPORTED_MODULE_2__[\"TransactionSamplingMethod\"].Inheritance\n      }\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: _sentry_types__WEBPACK_IMPORTED_MODULE_2__[\"TransactionSamplingMethod\"].Rate,\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate)\n      }\n    });\n  } // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n\n\n  if (!isValidSampleRate(sampleRate)) {\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn(\"[Tracing] Discarding transaction because of invalid sample rate.\");\n    transaction.sampled = false;\n    return transaction;\n  } // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n\n\n  if (!sampleRate) {\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].log(\"[Tracing] Discarding transaction because \" + (typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'));\n    transaction.sampled = false;\n    return transaction;\n  } // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n\n\n  transaction.sampled = Math.random() < sampleRate; // if we're not going to keep it, we're done\n\n  if (!transaction.sampled) {\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].log(\"[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = \" + Number(sampleRate) + \")\");\n    return transaction;\n  }\n\n  _sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].log(\"[Tracing] starting \" + transaction.op + \" transaction - \" + transaction.name);\n  return transaction;\n}\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\n\n\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn(\"[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got \" + JSON.stringify(rate) + \" of type \" + JSON.stringify(typeof rate) + \".\");\n    return false;\n  } // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n\n\n  if (rate < 0 || rate > 1) {\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn(\"[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got \" + rate + \".\");\n    return false;\n  }\n\n  return true;\n}\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\n\n\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  var _a, _b;\n\n  var options = ((_a = this.getClient()) === null || _a === void 0 ? void 0 : _a.getOptions()) || {};\n  var transaction = new _transaction__WEBPACK_IMPORTED_MODULE_6__[\"Transaction\"](transactionContext, this);\n  transaction = sample(transaction, options, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n\n  if (transaction.sampled) {\n    transaction.initSpanRecorder((_b = options._experiments) === null || _b === void 0 ? void 0 : _b.maxSpans);\n  }\n\n  return transaction;\n}\n/**\n * Create new idle transaction.\n */\n\n\nfunction startIdleTransaction(hub, transactionContext, idleTimeout, onScope, customSamplingContext) {\n  var _a, _b;\n\n  var options = ((_a = hub.getClient()) === null || _a === void 0 ? void 0 : _a.getOptions()) || {};\n  var transaction = new _idletransaction__WEBPACK_IMPORTED_MODULE_5__[\"IdleTransaction\"](transactionContext, hub, idleTimeout, onScope);\n  transaction = sample(transaction, options, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n\n  if (transaction.sampled) {\n    transaction.initSpanRecorder((_b = options._experiments) === null || _b === void 0 ? void 0 : _b.maxSpans);\n  }\n\n  return transaction;\n}\n/**\n * @private\n */\n\nfunction _addTracingExtensions() {\n  var carrier = Object(_sentry_hub__WEBPACK_IMPORTED_MODULE_1__[\"getMainCarrier\"])();\n\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n/**\n * @private\n */\n\nfunction _autoloadDatabaseIntegrations() {\n  var carrier = Object(_sentry_hub__WEBPACK_IMPORTED_MODULE_1__[\"getMainCarrier\"])();\n\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  var packageToIntegrationMapping = {\n    mongodb: function () {\n      var integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"dynamicRequire\"])(module, './integrations/node/mongo');\n      return new integration.Mongo();\n    },\n    mongoose: function () {\n      var integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"dynamicRequire\"])(module, './integrations/node/mongo');\n      return new integration.Mongo({\n        mongoose: true\n      });\n    },\n    mysql: function () {\n      var integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"dynamicRequire\"])(module, './integrations/node/mysql');\n      return new integration.Mysql();\n    },\n    pg: function () {\n      var integration = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"dynamicRequire\"])(module, './integrations/node/postgres');\n      return new integration.Postgres();\n    }\n  };\n  var mappedPackages = Object.keys(packageToIntegrationMapping).filter(function (moduleName) {\n    return !!Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"loadModule\"])(moduleName);\n  }).map(function (pkg) {\n    try {\n      return packageToIntegrationMapping[pkg]();\n    } catch (e) {\n      return undefined;\n    }\n  }).filter(function (p) {\n    return p;\n  });\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__spread\"])(carrier.__SENTRY__.integrations || [], mappedPackages);\n  }\n}\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\n\n\nfunction addExtensionMethods() {\n  _addTracingExtensions(); // Detect and automatically load specified integrations.\n\n\n  if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"isNodeEnv\"])()) {\n    _autoloadDatabaseIntegrations();\n  } // If an error happens globally, we should make sure transaction status is set to error.\n\n\n  Object(_errors__WEBPACK_IMPORTED_MODULE_4__[\"registerErrorInstrumentation\"])();\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/hubextensions.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/idletransaction.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/idletransaction.js ***!
  \*************************************************************/
/*! exports provided: DEFAULT_IDLE_TIMEOUT, HEARTBEAT_INTERVAL, IdleTransactionSpanRecorder, IdleTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEFAULT_IDLE_TIMEOUT\", function() { return DEFAULT_IDLE_TIMEOUT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HEARTBEAT_INTERVAL\", function() { return HEARTBEAT_INTERVAL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IdleTransactionSpanRecorder\", function() { return IdleTransactionSpanRecorder; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IdleTransaction\", function() { return IdleTransaction; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"./node_modules/@sentry/tracing/esm/constants.js\");\n/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./span */ \"./node_modules/@sentry/tracing/esm/span.js\");\n/* harmony import */ var _spanstatus__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./spanstatus */ \"./node_modules/@sentry/tracing/esm/spanstatus.js\");\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transaction */ \"./node_modules/@sentry/tracing/esm/transaction.js\");\n\n\n\n\n\n\nvar DEFAULT_IDLE_TIMEOUT = 1000;\nvar HEARTBEAT_INTERVAL = 5000;\n/**\n * @inheritDoc\n */\n\nvar IdleTransactionSpanRecorder =\n/** @class */\nfunction (_super) {\n  Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__extends\"])(IdleTransactionSpanRecorder, _super);\n\n  function IdleTransactionSpanRecorder(_pushActivity, _popActivity, transactionSpanId, maxlen) {\n    if (transactionSpanId === void 0) {\n      transactionSpanId = '';\n    }\n\n    var _this = _super.call(this, maxlen) || this;\n\n    _this._pushActivity = _pushActivity;\n    _this._popActivity = _popActivity;\n    _this.transactionSpanId = transactionSpanId;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  IdleTransactionSpanRecorder.prototype.add = function (span) {\n    var _this = this; // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n\n\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = function (endTimestamp) {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"timestampWithMs\"])();\n\n        _this._popActivity(span.spanId);\n      }; // We should only push new activities if the span does not have an end timestamp.\n\n\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    _super.prototype.add.call(this, span);\n  };\n\n  return IdleTransactionSpanRecorder;\n}(_span__WEBPACK_IMPORTED_MODULE_3__[\"SpanRecorder\"]);\n\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\n\nvar IdleTransaction =\n/** @class */\nfunction (_super) {\n  Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__extends\"])(IdleTransaction, _super);\n\n  function IdleTransaction(transactionContext, _idleHub,\n  /**\n   * The time to wait in ms until the idle transaction will be finished.\n   * @default 1000\n   */\n  _idleTimeout, // If an idle transaction should be put itself on and off the scope automatically.\n  _onScope) {\n    if (_idleTimeout === void 0) {\n      _idleTimeout = DEFAULT_IDLE_TIMEOUT;\n    }\n\n    if (_onScope === void 0) {\n      _onScope = false;\n    }\n\n    var _this = _super.call(this, transactionContext, _idleHub) || this;\n\n    _this._idleHub = _idleHub;\n    _this._idleTimeout = _idleTimeout;\n    _this._onScope = _onScope; // Activities store a list of active spans\n\n    _this.activities = {}; // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n\n    _this._heartbeatCounter = 0; // We should not use heartbeat if we finished a transaction\n\n    _this._finished = false;\n    _this._beforeFinishCallbacks = [];\n\n    if (_idleHub && _onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub); // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log(\"Setting idle transaction on scope. Span ID: \" + _this.spanId);\n\n      _idleHub.configureScope(function (scope) {\n        return scope.setSpan(_this);\n      });\n    }\n\n    _this._initTimeout = setTimeout(function () {\n      if (!_this._finished) {\n        _this.finish();\n      }\n    }, _this._idleTimeout);\n    return _this;\n  }\n  /** {@inheritDoc} */\n\n\n  IdleTransaction.prototype.finish = function (endTimestamp) {\n    var e_1, _a;\n\n    var _this = this;\n\n    if (endTimestamp === void 0) {\n      endTimestamp = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"timestampWithMs\"])();\n    }\n\n    this._finished = true;\n    this.activities = {};\n\n    if (this.spanRecorder) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      try {\n        for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__values\"])(this._beforeFinishCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var callback = _c.value;\n          callback(this, endTimestamp);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter(function (span) {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === _this.spanId) {\n          return true;\n        } // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n\n\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus(_spanstatus__WEBPACK_IMPORTED_MODULE_4__[\"SpanStatus\"].Cancelled);\n          _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        var keepSpan = span.startTimestamp < endTimestamp;\n\n        if (!keepSpan) {\n          _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Tracing] discarding Span since it happened after Transaction was finished', JSON.stringify(span, undefined, 2));\n        }\n\n        return keepSpan;\n      });\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Tracing] flushing IdleTransaction');\n    } else {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Tracing] No active IdleTransaction');\n    } // this._onScope is true if the transaction was previously on the scope.\n\n\n    if (this._onScope) {\n      clearActiveTransaction(this._idleHub);\n    }\n\n    return _super.prototype.finish.call(this, endTimestamp);\n  };\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n\n\n  IdleTransaction.prototype.registerBeforeFinishCallback = function (callback) {\n    this._beforeFinishCallbacks.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  IdleTransaction.prototype.initSpanRecorder = function (maxlen) {\n    var _this = this;\n\n    if (!this.spanRecorder) {\n      var pushActivity = function (id) {\n        if (_this._finished) {\n          return;\n        }\n\n        _this._pushActivity(id);\n      };\n\n      var popActivity = function (id) {\n        if (_this._finished) {\n          return;\n        }\n\n        _this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen); // Start heartbeat so that transactions do not run forever.\n\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('Starting heartbeat');\n\n      this._pingHeartbeat();\n    }\n\n    this.spanRecorder.add(this);\n  };\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n\n\n  IdleTransaction.prototype._pushActivity = function (spanId) {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n      this._initTimeout = undefined;\n    }\n\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log(\"[Tracing] pushActivity: \" + spanId);\n    this.activities[spanId] = true;\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Tracing] new activities count', Object.keys(this.activities).length);\n  };\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n\n\n  IdleTransaction.prototype._popActivity = function (spanId) {\n    var _this = this;\n\n    if (this.activities[spanId]) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log(\"[Tracing] popActivity \" + spanId); // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete this.activities[spanId];\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      var timeout = this._idleTimeout; // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n\n      var end_1 = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"timestampWithMs\"])() + timeout / 1000;\n      setTimeout(function () {\n        if (!_this._finished) {\n          _this.setTag(_constants__WEBPACK_IMPORTED_MODULE_2__[\"FINISH_REASON_TAG\"], _constants__WEBPACK_IMPORTED_MODULE_2__[\"IDLE_TRANSACTION_FINISH_REASONS\"][1]);\n\n          _this.finish(end_1);\n        }\n      }, timeout);\n    }\n  };\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n\n\n  IdleTransaction.prototype._beat = function () {\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    var heartbeatString = Object.keys(this.activities).join('');\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log(\"[Tracing] Transaction finished because of no change for 3 heart beats\");\n      this.setStatus(_spanstatus__WEBPACK_IMPORTED_MODULE_4__[\"SpanStatus\"].DeadlineExceeded);\n      this.setTag(_constants__WEBPACK_IMPORTED_MODULE_2__[\"FINISH_REASON_TAG\"], _constants__WEBPACK_IMPORTED_MODULE_2__[\"IDLE_TRANSACTION_FINISH_REASONS\"][0]);\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  };\n  /**\n   * Pings the heartbeat\n   */\n\n\n  IdleTransaction.prototype._pingHeartbeat = function () {\n    var _this = this;\n\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log(\"pinging Heartbeat -> current counter: \" + this._heartbeatCounter);\n    setTimeout(function () {\n      _this._beat();\n    }, HEARTBEAT_INTERVAL);\n  };\n\n  return IdleTransaction;\n}(_transaction__WEBPACK_IMPORTED_MODULE_5__[\"Transaction\"]);\n\n\n/**\n * Reset active transaction on scope\n */\n\nfunction clearActiveTransaction(hub) {\n  if (hub) {\n    var scope = hub.getScope();\n\n    if (scope) {\n      var transaction = scope.getTransaction();\n\n      if (transaction) {\n        scope.setSpan(undefined);\n      }\n    }\n  }\n}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/idletransaction.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/index.js ***!
  \***************************************************/
/*! exports provided: Integrations, BrowserTracing, Span, Transaction, registerRequestInstrumentation, defaultRequestInstrumentationOptions, SpanStatus, IdleTransaction, startIdleTransaction, addExtensionMethods, extractTraceparentData, getActiveTransaction, hasTracingEnabled, stripUrlQueryAndFragment, TRACEPARENT_REGEXP */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _hubextensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hubextensions */ \"./node_modules/@sentry/tracing/esm/hubextensions.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"addExtensionMethods\", function() { return _hubextensions__WEBPACK_IMPORTED_MODULE_0__[\"addExtensionMethods\"]; });\n\n/* harmony import */ var _integrations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./integrations */ \"./node_modules/@sentry/tracing/esm/integrations/index.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Integrations\", function() { return _integrations__WEBPACK_IMPORTED_MODULE_1__; });\n/* harmony import */ var _browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./browser */ \"./node_modules/@sentry/tracing/esm/browser/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BrowserTracing\", function() { return _browser__WEBPACK_IMPORTED_MODULE_2__[\"BrowserTracing\"]; });\n\n/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./span */ \"./node_modules/@sentry/tracing/esm/span.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Span\", function() { return _span__WEBPACK_IMPORTED_MODULE_3__[\"Span\"]; });\n\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transaction */ \"./node_modules/@sentry/tracing/esm/transaction.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Transaction\", function() { return _transaction__WEBPACK_IMPORTED_MODULE_4__[\"Transaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"registerRequestInstrumentation\", function() { return _browser__WEBPACK_IMPORTED_MODULE_2__[\"instrumentOutgoingRequests\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"defaultRequestInstrumentationOptions\", function() { return _browser__WEBPACK_IMPORTED_MODULE_2__[\"defaultRequestInstrumentationOptions\"]; });\n\n/* harmony import */ var _spanstatus__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./spanstatus */ \"./node_modules/@sentry/tracing/esm/spanstatus.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"SpanStatus\", function() { return _spanstatus__WEBPACK_IMPORTED_MODULE_5__[\"SpanStatus\"]; });\n\n/* harmony import */ var _idletransaction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./idletransaction */ \"./node_modules/@sentry/tracing/esm/idletransaction.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"IdleTransaction\", function() { return _idletransaction__WEBPACK_IMPORTED_MODULE_6__[\"IdleTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"startIdleTransaction\", function() { return _hubextensions__WEBPACK_IMPORTED_MODULE_0__[\"startIdleTransaction\"]; });\n\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils */ \"./node_modules/@sentry/tracing/esm/utils.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"extractTraceparentData\", function() { return _utils__WEBPACK_IMPORTED_MODULE_7__[\"extractTraceparentData\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"getActiveTransaction\", function() { return _utils__WEBPACK_IMPORTED_MODULE_7__[\"getActiveTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"hasTracingEnabled\", function() { return _utils__WEBPACK_IMPORTED_MODULE_7__[\"hasTracingEnabled\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"stripUrlQueryAndFragment\", function() { return _utils__WEBPACK_IMPORTED_MODULE_7__[\"stripUrlQueryAndFragment\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TRACEPARENT_REGEXP\", function() { return _utils__WEBPACK_IMPORTED_MODULE_7__[\"TRACEPARENT_REGEXP\"]; });\n\n\n\n // This is already exported as part of `Integrations` above (and for the moment will remain so for\n// backwards compatibility), but that interferes with treeshaking, so we also export it separately\n// here.\n//\n// Previously we expected users to import tracing integrations like\n//\n// import { Integrations } from '@sentry/tracing';\n// const instance = new Integrations.BrowserTracing();\n//\n// This makes the integrations unable to be treeshaken though. To address this, we now have\n// this individual export. We now expect users to consume BrowserTracing like so:\n//\n// import { BrowserTracing } from '@sentry/tracing';\n// const instance = new BrowserTracing();\n//\n// For an example of of the new usage of BrowserTracing, see @sentry/nextjs index.client.ts\n\n\n\n\n\n\n\n // We are patching the global object with our hub extension methods\n\nObject(_hubextensions__WEBPACK_IMPORTED_MODULE_0__[\"addExtensionMethods\"])();\n\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/index.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/integrations/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/integrations/index.js ***!
  \****************************************************************/
/*! exports provided: Express, Postgres, Mysql, Mongo, BrowserTracing */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_express__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node/express */ \"./node_modules/@sentry/tracing/esm/integrations/node/express.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Express\", function() { return _node_express__WEBPACK_IMPORTED_MODULE_0__[\"Express\"]; });\n\n/* harmony import */ var _node_postgres__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node/postgres */ \"./node_modules/@sentry/tracing/esm/integrations/node/postgres.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Postgres\", function() { return _node_postgres__WEBPACK_IMPORTED_MODULE_1__[\"Postgres\"]; });\n\n/* harmony import */ var _node_mysql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node/mysql */ \"./node_modules/@sentry/tracing/esm/integrations/node/mysql.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Mysql\", function() { return _node_mysql__WEBPACK_IMPORTED_MODULE_2__[\"Mysql\"]; });\n\n/* harmony import */ var _node_mongo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node/mongo */ \"./node_modules/@sentry/tracing/esm/integrations/node/mongo.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Mongo\", function() { return _node_mongo__WEBPACK_IMPORTED_MODULE_3__[\"Mongo\"]; });\n\n/* harmony import */ var _browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../browser */ \"./node_modules/@sentry/tracing/esm/browser/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BrowserTracing\", function() { return _browser__WEBPACK_IMPORTED_MODULE_4__[\"BrowserTracing\"]; });\n\n\n\n\n // TODO(v7): Remove this export\n// Please see `src/index.ts` for more details.\n\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/integrations/index.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/integrations/node/express.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/integrations/node/express.js ***!
  \***********************************************************************/
/*! exports provided: Express */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Express\", function() { return Express; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n\n\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */\n\nvar Express =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Express(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Express.id;\n    this._router = options.router || options.app;\n    this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Express.prototype.setupOnce = function () {\n    if (!this._router) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n\n    instrumentMiddlewares(this._router, this._methods);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Express.id = 'Express';\n  return Express;\n}();\n\n\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\n\nfunction wrap(fn, method) {\n  var arity = fn.length;\n\n  switch (arity) {\n    case 2:\n      {\n        return function (req, res) {\n          var transaction = res.__sentry_transaction;\n\n          if (transaction) {\n            var span_1 = transaction.startChild({\n              description: fn.name,\n              op: \"express.middleware.\" + method\n            });\n            res.once('finish', function () {\n              span_1.finish();\n            });\n          }\n\n          return fn.call(this, req, res);\n        };\n      }\n\n    case 3:\n      {\n        return function (req, res, next) {\n          var _a;\n\n          var transaction = res.__sentry_transaction;\n          var span = (_a = transaction) === null || _a === void 0 ? void 0 : _a.startChild({\n            description: fn.name,\n            op: \"express.middleware.\" + method\n          });\n          fn.call(this, req, res, function () {\n            var args = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            next.call.apply(next, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__spread\"])([this], args));\n          });\n        };\n      }\n\n    case 4:\n      {\n        return function (err, req, res, next) {\n          var _a;\n\n          var transaction = res.__sentry_transaction;\n          var span = (_a = transaction) === null || _a === void 0 ? void 0 : _a.startChild({\n            description: fn.name,\n            op: \"express.middleware.\" + method\n          });\n          fn.call(this, err, req, res, function () {\n            var args = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            next.call.apply(next, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__spread\"])([this], args));\n          });\n        };\n      }\n\n    default:\n      {\n        throw new Error(\"Express middleware takes 2-4 arguments. Got: \" + arity);\n      }\n  }\n}\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\n\n\nfunction wrapMiddlewareArgs(args, method) {\n  return args.map(function (arg) {\n    if (typeof arg === 'function') {\n      return wrap(arg, method);\n    }\n\n    if (Array.isArray(arg)) {\n      return arg.map(function (a) {\n        if (typeof a === 'function') {\n          return wrap(a, method);\n        }\n\n        return a;\n      });\n    }\n\n    return arg;\n  });\n}\n/**\n * Patches original router to utilize our tracing functionality\n */\n\n\nfunction patchMiddleware(router, method) {\n  var originalCallback = router[method];\n\n  router[method] = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return originalCallback.call.apply(originalCallback, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__spread\"])([this], wrapMiddlewareArgs(args, method)));\n  };\n\n  return router;\n}\n/**\n * Patches original router methods\n */\n\n\nfunction instrumentMiddlewares(router, methods) {\n  if (methods === void 0) {\n    methods = [];\n  }\n\n  methods.forEach(function (method) {\n    return patchMiddleware(router, method);\n  });\n}\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/integrations/node/express.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/integrations/node/mongo.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/integrations/node/mongo.js ***!
  \*********************************************************************/
/*! exports provided: Mongo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mongo\", function() { return Mongo; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n\n\nvar OPERATIONS = ['aggregate', 'bulkWrite', 'countDocuments', 'createIndex', 'createIndexes', 'deleteMany', 'deleteOne', 'distinct', 'drop', 'dropIndex', 'dropIndexes', 'estimatedDocumentCount', 'find', 'findOne', 'findOneAndDelete', 'findOneAndReplace', 'findOneAndUpdate', 'indexes', 'indexExists', 'indexInformation', 'initializeOrderedBulkOp', 'insertMany', 'insertOne', 'isCapped', 'mapReduce', 'options', 'parallelCollectionScan', 'rename', 'replaceOne', 'stats', 'updateMany', 'updateOne']; // All of the operations above take `options` and `callback` as their final parameters, but some of them\n// take additional parameters as well. For those operations, this is a map of\n// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's\n// positional arguments when we add them to the span's `data` object later\n\nvar OPERATION_SIGNATURES = {\n  // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well\n  // see https://github.com/getsentry/sentry-javascript/pull/3102\n  bulkWrite: ['operations'],\n  countDocuments: ['query'],\n  createIndex: ['fieldOrSpec'],\n  createIndexes: ['indexSpecs'],\n  deleteMany: ['filter'],\n  deleteOne: ['filter'],\n  distinct: ['key', 'query'],\n  dropIndex: ['indexName'],\n  find: ['query'],\n  findOne: ['query'],\n  findOneAndDelete: ['filter'],\n  findOneAndReplace: ['filter', 'replacement'],\n  findOneAndUpdate: ['filter', 'update'],\n  indexExists: ['indexes'],\n  insertMany: ['docs'],\n  insertOne: ['doc'],\n  mapReduce: ['map', 'reduce'],\n  rename: ['newName'],\n  replaceOne: ['filter', 'doc'],\n  updateMany: ['filter', 'update'],\n  updateOne: ['filter', 'update']\n};\n/** Tracing integration for mongo package */\n\nvar Mongo =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Mongo(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Mongo.id;\n    this._operations = Array.isArray(options.operations) ? options.operations : OPERATIONS;\n    this._describeOperations = 'describeOperations' in options ? options.describeOperations : true;\n    this._useMongoose = !!options.useMongoose;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Mongo.prototype.setupOnce = function (_, getCurrentHub) {\n    var moduleName = this._useMongoose ? 'mongoose' : 'mongodb';\n    var pkg = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"loadModule\"])(moduleName);\n\n    if (!pkg) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].error(\"Mongo Integration was unable to require `\" + moduleName + \"` package.\");\n      return;\n    }\n\n    this._instrumentOperations(pkg.Collection, this._operations, getCurrentHub);\n  };\n  /**\n   * Patches original collection methods\n   */\n\n\n  Mongo.prototype._instrumentOperations = function (collection, operations, getCurrentHub) {\n    var _this = this;\n\n    operations.forEach(function (operation) {\n      return _this._patchOperation(collection, operation, getCurrentHub);\n    });\n  };\n  /**\n   * Patches original collection to utilize our tracing functionality\n   */\n\n\n  Mongo.prototype._patchOperation = function (collection, operation, getCurrentHub) {\n    if (!(operation in collection.prototype)) return;\n\n    var getSpanContext = this._getSpanContextFromOperationArguments.bind(this);\n\n    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"fill\"])(collection.prototype, operation, function (orig) {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _a, _b, _c, _d;\n\n        var lastArg = args[args.length - 1];\n        var scope = getCurrentHub().getScope();\n        var parentSpan = (_a = scope) === null || _a === void 0 ? void 0 : _a.getSpan(); // Check if the operation was passed a callback. (mapReduce requires a different check, as\n        // its (non-callback) arguments can also be functions.)\n\n        if (typeof lastArg !== 'function' || operation === 'mapReduce' && args.length === 2) {\n          var span_1 = (_b = parentSpan) === null || _b === void 0 ? void 0 : _b.startChild(getSpanContext(this, operation, args));\n          var maybePromise = orig.call.apply(orig, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__spread\"])([this], args));\n\n          if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"isThenable\"])(maybePromise)) {\n            return maybePromise.then(function (res) {\n              var _a;\n\n              (_a = span_1) === null || _a === void 0 ? void 0 : _a.finish();\n              return res;\n            });\n          } else {\n            (_c = span_1) === null || _c === void 0 ? void 0 : _c.finish();\n            return maybePromise;\n          }\n        }\n\n        var span = (_d = parentSpan) === null || _d === void 0 ? void 0 : _d.startChild(getSpanContext(this, operation, args.slice(0, -1)));\n        return orig.call.apply(orig, Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__spread\"])([this], args.slice(0, -1), [function (err, result) {\n          var _a;\n\n          (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n          lastArg(err, result);\n        }]));\n      };\n    });\n  };\n  /**\n   * Form a SpanContext based on the user input to a given operation.\n   */\n\n\n  Mongo.prototype._getSpanContextFromOperationArguments = function (collection, operation, args) {\n    var data = {\n      collectionName: collection.collectionName,\n      dbName: collection.dbName,\n      namespace: collection.namespace\n    };\n    var spanContext = {\n      op: \"db\",\n      description: operation,\n      data: data\n    }; // If the operation takes no arguments besides `options` and `callback`, or if argument\n    // collection is disabled for this operation, just return early.\n\n    var signature = OPERATION_SIGNATURES[operation];\n    var shouldDescribe = Array.isArray(this._describeOperations) ? this._describeOperations.includes(operation) : this._describeOperations;\n\n    if (!signature || !shouldDescribe) {\n      return spanContext;\n    }\n\n    try {\n      // Special case for `mapReduce`, as the only one accepting functions as arguments.\n      if (operation === 'mapReduce') {\n        var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__read\"])(args, 2),\n            map = _a[0],\n            reduce = _a[1];\n\n        data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>';\n        data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>';\n      } else {\n        for (var i = 0; i < signature.length; i++) {\n          data[signature[i]] = JSON.stringify(args[i]);\n        }\n      }\n    } catch (_oO) {// no-empty\n    }\n\n    return spanContext;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Mongo.id = 'Mongo';\n  return Mongo;\n}();\n\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/integrations/node/mongo.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/integrations/node/mysql.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/integrations/node/mysql.js ***!
  \*********************************************************************/
/*! exports provided: Mysql */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mysql\", function() { return Mysql; });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n\n/** Tracing integration for node-mysql package */\n\nvar Mysql =\n/** @class */\nfunction () {\n  function Mysql() {\n    /**\n     * @inheritDoc\n     */\n    this.name = Mysql.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Mysql.prototype.setupOnce = function (_, getCurrentHub) {\n    var pkg = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"loadModule\"])('mysql/lib/Connection.js');\n\n    if (!pkg) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].error('Mysql Integration was unable to require `mysql` package.');\n      return;\n    } // The original function will have one of these signatures:\n    //    function (callback) => void\n    //    function (options, callback) => void\n    //    function (options, values, callback) => void\n\n\n    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"fill\"])(pkg, 'createQuery', function (orig) {\n      return function (options, values, callback) {\n        var _a, _b;\n\n        var scope = getCurrentHub().getScope();\n        var parentSpan = (_a = scope) === null || _a === void 0 ? void 0 : _a.getSpan();\n        var span = (_b = parentSpan) === null || _b === void 0 ? void 0 : _b.startChild({\n          description: typeof options === 'string' ? options : options.sql,\n          op: \"db\"\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, options, values, function (err, result, fields) {\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            callback(err, result, fields);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, options, function (err, result, fields) {\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            values(err, result, fields);\n          });\n        }\n\n        return orig.call(this, options, values, callback);\n      };\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Mysql.id = 'Mysql';\n  return Mysql;\n}();\n\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/integrations/node/mysql.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/integrations/node/postgres.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/integrations/node/postgres.js ***!
  \************************************************************************/
/*! exports provided: Postgres */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Postgres\", function() { return Postgres; });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n\n/** Tracing integration for node-postgres package */\n\nvar Postgres =\n/** @class */\nfunction () {\n  function Postgres(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Postgres.id;\n    this._usePgNative = !!options.usePgNative;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Postgres.prototype.setupOnce = function (_, getCurrentHub) {\n    var _a;\n\n    var pkg = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"loadModule\"])('pg');\n\n    if (!pkg) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n\n    if (this._usePgNative && !((_a = pkg.native) === null || _a === void 0 ? void 0 : _a.Client)) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n\n    var Client = (this._usePgNative ? pkg.native : pkg).Client;\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n\n    Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"fill\"])(Client.prototype, 'query', function (orig) {\n      return function (config, values, callback) {\n        var _a, _b, _c;\n\n        var scope = getCurrentHub().getScope();\n        var parentSpan = (_a = scope) === null || _a === void 0 ? void 0 : _a.getSpan();\n        var span = (_b = parentSpan) === null || _b === void 0 ? void 0 : _b.startChild({\n          description: typeof config === 'string' ? config : config.text,\n          op: \"db\"\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err, result) {\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            callback(err, result);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err, result) {\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            values(err, result);\n          });\n        }\n\n        var rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n\n        if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_0__[\"isThenable\"])(rv)) {\n          return rv.then(function (res) {\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            return res;\n          });\n        }\n\n        (_c = span) === null || _c === void 0 ? void 0 : _c.finish();\n        return rv;\n      };\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Postgres.id = 'Postgres';\n  return Postgres;\n}();\n\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/integrations/node/postgres.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/span.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/span.js ***!
  \**************************************************/
/*! exports provided: SpanRecorder, Span */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SpanRecorder\", function() { return SpanRecorder; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Span\", function() { return Span; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n/* harmony import */ var _spanstatus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./spanstatus */ \"./node_modules/@sentry/tracing/esm/spanstatus.js\");\n\n\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\n\nvar SpanRecorder =\n/** @class */\nfunction () {\n  function SpanRecorder(maxlen) {\n    if (maxlen === void 0) {\n      maxlen = 1000;\n    }\n\n    this.spans = [];\n    this._maxlen = maxlen;\n  }\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n\n\n  SpanRecorder.prototype.add = function (span) {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  };\n\n  return SpanRecorder;\n}();\n\n\n/**\n * Span contains all data about a span\n */\n\nvar Span =\n/** @class */\nfunction () {\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Span(spanContext) {\n    /**\n     * @inheritDoc\n     */\n    this.traceId = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"uuid4\"])();\n    /**\n     * @inheritDoc\n     */\n\n    this.spanId = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"uuid4\"])().substring(16);\n    /**\n     * Timestamp in seconds when the span was created.\n     */\n\n    this.startTimestamp = Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"timestampWithMs\"])();\n    /**\n     * @inheritDoc\n     */\n\n    this.tags = {};\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.data = {};\n\n    if (!spanContext) {\n      return this;\n    }\n\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    } // We want to include booleans as well here\n\n\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n  /**\n   * @inheritDoc\n   * @deprecated\n   */\n\n\n  Span.prototype.child = function (spanContext) {\n    return this.startChild(spanContext);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.startChild = function (spanContext) {\n    var childSpan = new Span(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, spanContext), {\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId\n    }));\n    childSpan.spanRecorder = this.spanRecorder;\n\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n    return childSpan;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.setTag = function (key, value) {\n    var _a;\n\n    this.tags = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, this.tags), (_a = {}, _a[key] = value, _a));\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\n\n  Span.prototype.setData = function (key, value) {\n    var _a;\n\n    this.data = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, this.data), (_a = {}, _a[key] = value, _a));\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.setStatus = function (value) {\n    this.status = value;\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.setHttpStatus = function (httpStatus) {\n    this.setTag('http.status_code', String(httpStatus));\n    var spanStatus = _spanstatus__WEBPACK_IMPORTED_MODULE_2__[\"SpanStatus\"].fromHttpCode(httpStatus);\n\n    if (spanStatus !== _spanstatus__WEBPACK_IMPORTED_MODULE_2__[\"SpanStatus\"].UnknownError) {\n      this.setStatus(spanStatus);\n    }\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.isSuccess = function () {\n    return this.status === _spanstatus__WEBPACK_IMPORTED_MODULE_2__[\"SpanStatus\"].Ok;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.finish = function (endTimestamp) {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"timestampWithMs\"])();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.toTraceparent = function () {\n    var sampledString = '';\n\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n\n    return this.traceId + \"-\" + this.spanId + sampledString;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.toContext = function () {\n    return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"dropUndefinedKeys\"])({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.updateWithContext = function (spanContext) {\n    var _a, _b, _c, _d, _e;\n\n    this.data = (_a = spanContext.data, _a !== null && _a !== void 0 ? _a : {});\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = (_b = spanContext.spanId, _b !== null && _b !== void 0 ? _b : this.spanId);\n    this.startTimestamp = (_c = spanContext.startTimestamp, _c !== null && _c !== void 0 ? _c : this.startTimestamp);\n    this.status = spanContext.status;\n    this.tags = (_d = spanContext.tags, _d !== null && _d !== void 0 ? _d : {});\n    this.traceId = (_e = spanContext.traceId, _e !== null && _e !== void 0 ? _e : this.traceId);\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.getTraceContext = function () {\n    return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"dropUndefinedKeys\"])({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.toJSON = function () {\n    return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"dropUndefinedKeys\"])({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId\n    });\n  };\n\n  return Span;\n}();\n\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/span.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/spanstatus.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/spanstatus.js ***!
  \********************************************************/
/*! exports provided: SpanStatus */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SpanStatus\", function() { return SpanStatus; });\n/** The status of an Span. */\n// eslint-disable-next-line import/export\nvar SpanStatus;\n\n(function (SpanStatus) {\n  /** The operation completed successfully. */\n  SpanStatus[\"Ok\"] = \"ok\";\n  /** Deadline expired before operation could complete. */\n\n  SpanStatus[\"DeadlineExceeded\"] = \"deadline_exceeded\";\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n\n  SpanStatus[\"Unauthenticated\"] = \"unauthenticated\";\n  /** 403 Forbidden */\n\n  SpanStatus[\"PermissionDenied\"] = \"permission_denied\";\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n\n  SpanStatus[\"NotFound\"] = \"not_found\";\n  /** 429 Too Many Requests */\n\n  SpanStatus[\"ResourceExhausted\"] = \"resource_exhausted\";\n  /** Client specified an invalid argument. 4xx. */\n\n  SpanStatus[\"InvalidArgument\"] = \"invalid_argument\";\n  /** 501 Not Implemented */\n\n  SpanStatus[\"Unimplemented\"] = \"unimplemented\";\n  /** 503 Service Unavailable */\n\n  SpanStatus[\"Unavailable\"] = \"unavailable\";\n  /** Other/generic 5xx. */\n\n  SpanStatus[\"InternalError\"] = \"internal_error\";\n  /** Unknown. Any non-standard HTTP status code. */\n\n  SpanStatus[\"UnknownError\"] = \"unknown_error\";\n  /** The operation was cancelled (typically by the user). */\n\n  SpanStatus[\"Cancelled\"] = \"cancelled\";\n  /** Already exists (409) */\n\n  SpanStatus[\"AlreadyExists\"] = \"already_exists\";\n  /** Operation was rejected because the system is not in a state required for the operation's */\n\n  SpanStatus[\"FailedPrecondition\"] = \"failed_precondition\";\n  /** The operation was aborted, typically due to a concurrency issue. */\n\n  SpanStatus[\"Aborted\"] = \"aborted\";\n  /** Operation was attempted past the valid range. */\n\n  SpanStatus[\"OutOfRange\"] = \"out_of_range\";\n  /** Unrecoverable data loss or corruption */\n\n  SpanStatus[\"DataLoss\"] = \"data_loss\";\n})(SpanStatus || (SpanStatus = {})); // eslint-disable-next-line @typescript-eslint/no-namespace, import/export\n\n\n(function (SpanStatus) {\n  /**\n   * Converts a HTTP status code into a {@link SpanStatus}.\n   *\n   * @param httpStatus The HTTP response status code.\n   * @returns The span status or {@link SpanStatus.UnknownError}.\n   */\n  function fromHttpCode(httpStatus) {\n    if (httpStatus < 400 && httpStatus >= 100) {\n      return SpanStatus.Ok;\n    }\n\n    if (httpStatus >= 400 && httpStatus < 500) {\n      switch (httpStatus) {\n        case 401:\n          return SpanStatus.Unauthenticated;\n\n        case 403:\n          return SpanStatus.PermissionDenied;\n\n        case 404:\n          return SpanStatus.NotFound;\n\n        case 409:\n          return SpanStatus.AlreadyExists;\n\n        case 413:\n          return SpanStatus.FailedPrecondition;\n\n        case 429:\n          return SpanStatus.ResourceExhausted;\n\n        default:\n          return SpanStatus.InvalidArgument;\n      }\n    }\n\n    if (httpStatus >= 500 && httpStatus < 600) {\n      switch (httpStatus) {\n        case 501:\n          return SpanStatus.Unimplemented;\n\n        case 503:\n          return SpanStatus.Unavailable;\n\n        case 504:\n          return SpanStatus.DeadlineExceeded;\n\n        default:\n          return SpanStatus.InternalError;\n      }\n    }\n\n    return SpanStatus.UnknownError;\n  }\n\n  SpanStatus.fromHttpCode = fromHttpCode;\n})(SpanStatus || (SpanStatus = {}));\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/spanstatus.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/transaction.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/transaction.js ***!
  \*********************************************************/
/*! exports provided: Transaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Transaction\", function() { return Transaction; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_hub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/hub */ \"./node_modules/@sentry/hub/esm/index.js\");\n/* harmony import */ var _sentry_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/types */ \"./node_modules/@sentry/types/esm/index.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./span */ \"./node_modules/@sentry/tracing/esm/span.js\");\n\n\n\n\n\n/** JSDoc */\n\nvar Transaction =\n/** @class */\nfunction (_super) {\n  Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__extends\"])(Transaction, _super);\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n\n\n  function Transaction(transactionContext, hub) {\n    var _this = _super.call(this, transactionContext) || this;\n\n    _this._measurements = {};\n    /**\n     * The reference to the current hub.\n     */\n\n    _this._hub = Object(_sentry_hub__WEBPACK_IMPORTED_MODULE_1__[\"getCurrentHub\"])();\n\n    if (Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"isInstanceOf\"])(hub, _sentry_hub__WEBPACK_IMPORTED_MODULE_1__[\"Hub\"])) {\n      _this._hub = hub;\n    }\n\n    _this.name = transactionContext.name || '';\n    _this.metadata = transactionContext.metadata || {};\n    _this._trimEnd = transactionContext.trimEnd; // this is because transactions are also spans, and spans have a transaction pointer\n\n    _this.transaction = _this;\n    return _this;\n  }\n  /**\n   * JSDoc\n   */\n\n\n  Transaction.prototype.setName = function (name) {\n    this.name = name;\n  };\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n\n\n  Transaction.prototype.initSpanRecorder = function (maxlen) {\n    if (maxlen === void 0) {\n      maxlen = 1000;\n    }\n\n    if (!this.spanRecorder) {\n      this.spanRecorder = new _span__WEBPACK_IMPORTED_MODULE_4__[\"SpanRecorder\"](maxlen);\n    }\n\n    this.spanRecorder.add(this);\n  };\n  /**\n   * Set observed measurements for this transaction.\n   * @hidden\n   */\n\n\n  Transaction.prototype.setMeasurements = function (measurements) {\n    this._measurements = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, measurements);\n  };\n  /**\n   * Set metadata for this transaction.\n   * @hidden\n   */\n\n\n  Transaction.prototype.setMetadata = function (newMetadata) {\n    this.metadata = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, this.metadata), newMetadata);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Transaction.prototype.finish = function (endTimestamp) {\n    var _this = this;\n\n    var _a, _b, _c, _d, _e; // This transaction is already finished, so we should not flush it again.\n\n\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    } // just sets the end timestamp\n\n\n    _super.prototype.finish.call(this, endTimestamp);\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n      (_e = (_c = (_a = this._hub.getClient()) === null || _a === void 0 ? void 0 : (_b = _a).getTransport) === null || _c === void 0 ? void 0 : (_d = _c.call(_b)).recordLostEvent) === null || _e === void 0 ? void 0 : _e.call(_d, _sentry_types__WEBPACK_IMPORTED_MODULE_2__[\"Outcome\"].SampleRate, 'transaction');\n      return undefined;\n    }\n\n    var finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(function (s) {\n      return s !== _this && s.endTimestamp;\n    }) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce(function (prev, current) {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n\n        return prev;\n      }).endTimestamp;\n    }\n\n    var transaction = {\n      contexts: {\n        trace: this.getTraceContext()\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      debug_meta: this.metadata\n    };\n    var hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      _sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].log('[Measurements] Adding measurements to transaction', JSON.stringify(this._measurements, undefined, 2));\n      transaction.measurements = this._measurements;\n    }\n\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].log(\"[Tracing] Finishing \" + this.op + \" transaction: \" + this.name + \".\");\n    return this._hub.captureEvent(transaction);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Transaction.prototype.toContext = function () {\n    var spanContext = _super.prototype.toContext.call(this);\n\n    return Object(_sentry_utils__WEBPACK_IMPORTED_MODULE_3__[\"dropUndefinedKeys\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__assign\"])({}, spanContext), {\n      name: this.name,\n      trimEnd: this._trimEnd\n    }));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Transaction.prototype.updateWithContext = function (transactionContext) {\n    var _a;\n\n    _super.prototype.updateWithContext.call(this, transactionContext);\n\n    this.name = (_a = transactionContext.name, _a !== null && _a !== void 0 ? _a : '');\n    this._trimEnd = transactionContext.trimEnd;\n    return this;\n  };\n\n  return Transaction;\n}(_span__WEBPACK_IMPORTED_MODULE_4__[\"Span\"]);\n\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/transaction.js?");

/***/ }),

/***/ "./node_modules/@sentry/tracing/esm/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/tracing/esm/utils.js ***!
  \***************************************************/
/*! exports provided: TRACEPARENT_REGEXP, hasTracingEnabled, extractTraceparentData, getActiveTransaction, msToSec, secToMs, stripUrlQueryAndFragment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TRACEPARENT_REGEXP\", function() { return TRACEPARENT_REGEXP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasTracingEnabled\", function() { return hasTracingEnabled; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extractTraceparentData\", function() { return extractTraceparentData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getActiveTransaction\", function() { return getActiveTransaction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"msToSec\", function() { return msToSec; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"secToMs\", function() { return secToMs; });\n/* harmony import */ var _sentry_hub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/hub */ \"./node_modules/@sentry/hub/esm/index.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/esm/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"stripUrlQueryAndFragment\", function() { return _sentry_utils__WEBPACK_IMPORTED_MODULE_1__[\"stripUrlQueryAndFragment\"]; });\n\n\nvar TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' + // whitespace\n'([0-9a-f]{32})?' + // trace_id\n'-?([0-9a-f]{16})?' + // span_id\n'-?([01])?' + // sampled\n'[ \\\\t]*$');\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\n\nfunction hasTracingEnabled(options) {\n  if (options === void 0) {\n    options = (_a = Object(_sentry_hub__WEBPACK_IMPORTED_MODULE_0__[\"getCurrentHub\"])().getClient()) === null || _a === void 0 ? void 0 : _a.getOptions();\n  }\n\n  var _a;\n\n  return !!options && ('tracesSampleRate' in options || 'tracesSampler' in options);\n}\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\n\nfunction extractTraceparentData(traceparent) {\n  var matches = traceparent.match(TRACEPARENT_REGEXP);\n\n  if (matches) {\n    var parentSampled = void 0;\n\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n\n    return {\n      traceId: matches[1],\n      parentSampled: parentSampled,\n      parentSpanId: matches[2]\n    };\n  }\n\n  return undefined;\n}\n/** Grabs active transaction off scope, if any */\n\nfunction getActiveTransaction(hub) {\n  if (hub === void 0) {\n    hub = Object(_sentry_hub__WEBPACK_IMPORTED_MODULE_0__[\"getCurrentHub\"])();\n  }\n\n  var _a, _b;\n\n  return (_b = (_a = hub) === null || _a === void 0 ? void 0 : _a.getScope()) === null || _b === void 0 ? void 0 : _b.getTransaction();\n}\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\n\nfunction msToSec(time) {\n  return time / 1000;\n}\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\n\nfunction secToMs(time) {\n  return time * 1000;\n} // so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\n\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@sentry/tracing/esm/utils.js?");

/***/ })

}]);