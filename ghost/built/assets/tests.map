{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ghost-admin/tests/acceptance/authentication-test.js","ghost-admin/tests/acceptance/content-test.js","ghost-admin/tests/acceptance/custom-post-templates-test.js","ghost-admin/tests/acceptance/dashboard-test.js","ghost-admin/tests/acceptance/editor-test.js","ghost-admin/tests/acceptance/error-handling-test.js","ghost-admin/tests/acceptance/launch-flow-test.js","ghost-admin/tests/acceptance/members-activity-test.js","ghost-admin/tests/acceptance/members-test.js","ghost-admin/tests/acceptance/offers-test.js","ghost-admin/tests/acceptance/password-reset-test.js","ghost-admin/tests/acceptance/settings/amp-test.js","ghost-admin/tests/acceptance/settings/code-injection-test.js","ghost-admin/tests/acceptance/settings/design-test.js","ghost-admin/tests/acceptance/settings/general-test.js","ghost-admin/tests/acceptance/settings/integrations-test.js","ghost-admin/tests/acceptance/settings/labs-test.js","ghost-admin/tests/acceptance/settings/navigation-test.js","ghost-admin/tests/acceptance/settings/slack-test.js","ghost-admin/tests/acceptance/settings/tags-test.js","ghost-admin/tests/acceptance/settings/unsplash-test.js","ghost-admin/tests/acceptance/settings/zapier-test.js","ghost-admin/tests/acceptance/setup-test.js","ghost-admin/tests/acceptance/signin-test.js","ghost-admin/tests/acceptance/signup-test.js","ghost-admin/tests/acceptance/staff-test.js","ghost-admin/tests/helpers/data-transfer.js","ghost-admin/tests/helpers/drag-drop.js","ghost-admin/tests/helpers/ember-drag-drop.js","ghost-admin/tests/helpers/ember-power-calendar.js","ghost-admin/tests/helpers/ember-power-select.js","ghost-admin/tests/helpers/file-upload.js","ghost-admin/tests/helpers/find.js","ghost-admin/tests/helpers/labs-flag.js","ghost-admin/tests/helpers/mock-event.js","ghost-admin/tests/helpers/resolver.js","ghost-admin/tests/helpers/visit.js","ghost-admin/tests/integration/adapters/tag-test.js","ghost-admin/tests/integration/adapters/user-test.js","ghost-admin/tests/integration/components/dashboard/latest-member-activity-test.js","ghost-admin/tests/integration/components/gh-alert-test.js","ghost-admin/tests/integration/components/gh-alerts-test.js","ghost-admin/tests/integration/components/gh-basic-dropdown-test.js","ghost-admin/tests/integration/components/gh-cm-editor-test.js","ghost-admin/tests/integration/components/gh-distribution-action-select-test.js","ghost-admin/tests/integration/components/gh-feature-flag-test.js","ghost-admin/tests/integration/components/gh-file-uploader-test.js","ghost-admin/tests/integration/components/gh-image-uploader-test.js","ghost-admin/tests/integration/components/gh-image-uploader-with-preview-test.js","ghost-admin/tests/integration/components/gh-member-avatar-test.js","ghost-admin/tests/integration/components/gh-members-import-table-test.js","ghost-admin/tests/integration/components/gh-navitem-test.js","ghost-admin/tests/integration/components/gh-navitem-url-input-test.js","ghost-admin/tests/integration/components/gh-notification-test.js","ghost-admin/tests/integration/components/gh-notifications-test.js","ghost-admin/tests/integration/components/gh-profile-image-test.js","ghost-admin/tests/integration/components/gh-psm-tags-input-test.js","ghost-admin/tests/integration/components/gh-psm-template-select-test.js","ghost-admin/tests/integration/components/gh-psm-visibility-input-test.js","ghost-admin/tests/integration/components/gh-search-input-test.js","ghost-admin/tests/integration/components/gh-tag-settings-form-test.js","ghost-admin/tests/integration/components/gh-task-button-test.js","ghost-admin/tests/integration/components/gh-theme-table-test.js","ghost-admin/tests/integration/components/gh-timezone-select-test.js","ghost-admin/tests/integration/components/gh-trim-focus-input-test.js","ghost-admin/tests/integration/components/gh-unsplash-photo-test.js","ghost-admin/tests/integration/components/gh-unsplash-test.js","ghost-admin/tests/integration/components/gh-uploader-test.js","ghost-admin/tests/integration/components/gh-validation-status-container-test.js","ghost-admin/tests/integration/components/gh-whats-new-test.js","ghost-admin/tests/integration/components/modal-import-members-test.js","ghost-admin/tests/integration/components/modal-transfer-owner-test.js","ghost-admin/tests/integration/helpers/background-image-style-test.js","ghost-admin/tests/integration/helpers/clean-basic-html-test.js","ghost-admin/tests/integration/helpers/gh-format-post-time-test.js","ghost-admin/tests/integration/helpers/gh-url-preview-test.js","ghost-admin/tests/integration/helpers/sanitize-html-test.js","ghost-admin/tests/integration/services/ajax-test.js","ghost-admin/tests/integration/services/config-test.js","ghost-admin/tests/integration/services/feature-test.js","ghost-admin/tests/integration/services/lazy-loader-test.js","ghost-admin/tests/integration/services/member-import-validator-test.js","ghost-admin/tests/integration/services/slug-generator-test.js","ghost-admin/tests/integration/services/store-test.js","ghost-admin/tests/lint/app.lint-test.js","ghost-admin/tests/lint/tests.lint-test.js","ghost-admin/tests/test-helper.js","ghost-admin/tests/unit/authenticators/cookie-test.js","ghost-admin/tests/unit/components/gh-post-settings-menu-test.js","ghost-admin/tests/unit/controllers/editor-test.js","ghost-admin/tests/unit/controllers/settings/design-test.js","ghost-admin/tests/unit/helpers/gh-count-characters-test.js","ghost-admin/tests/unit/helpers/gh-count-down-characters-test.js","ghost-admin/tests/unit/helpers/gh-user-can-admin-test.js","ghost-admin/tests/unit/helpers/highlighted-text-test.js","ghost-admin/tests/unit/mixins/validation-engine-test.js","ghost-admin/tests/unit/models/invite-test.js","ghost-admin/tests/unit/models/member-test.js","ghost-admin/tests/unit/models/navigation-item-test.js","ghost-admin/tests/unit/models/post-test.js","ghost-admin/tests/unit/models/role-test.js","ghost-admin/tests/unit/models/setting-test.js","ghost-admin/tests/unit/models/tag-test.js","ghost-admin/tests/unit/models/user-test.js","ghost-admin/tests/unit/serializers/notification-test.js","ghost-admin/tests/unit/services/event-bus-test.js","ghost-admin/tests/unit/services/limit-test.js","ghost-admin/tests/unit/services/member-stats-test.js","ghost-admin/tests/unit/services/notifications-test.js","ghost-admin/tests/unit/services/unsplash-test.js","ghost-admin/tests/unit/transforms/facebook-url-user-test.js","ghost-admin/tests/unit/transforms/json-string-test.js","ghost-admin/tests/unit/transforms/navigation-settings-test.js","ghost-admin/tests/unit/transforms/slack-settings-test.js","ghost-admin/tests/unit/transforms/twitter-url-user-test.js","ghost-admin/tests/unit/utils/ghost-paths-test.js","ghost-admin/tests/unit/validators/nav-item-test.js","ghost-admin/tests/unit/validators/post-test.js","ghost-admin/tests/unit/validators/slack-integration-test.js","ghost-admin/tests/unit/validators/tag-settings-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"ghost-admin/tests/acceptance/authentication-test\", [\"ghost-admin/utils/window-proxy\", \"ember-cli-mirage\", \"mocha\", \"ember-simple-auth/test-support\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\"], function (_windowProxy, _emberCliMirage, _mocha, _testSupport, _testHelpers, _chai, _emberMocha, _testSupport2) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Authentication', function () {\n    let originalReplaceLocation;\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.describe)('setup redirect', function () {\n      (0, _mocha.beforeEach)(function () {\n        // ensure the /users/me route doesn't error\n        this.server.create('user');\n        this.server.get('authentication/setup', function () {\n          return {\n            setup: [{\n              status: false\n            }]\n          };\n        });\n      });\n      (0, _mocha.it)('redirects to setup when setup isn\\'t complete', async function () {\n        await (0, _testHelpers.visit)('settings/labs');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/setup/one');\n      });\n    });\n    (0, _mocha.describe)('general page', function () {\n      let newLocation;\n      (0, _mocha.beforeEach)(function () {\n        originalReplaceLocation = _windowProxy.default.replaceLocation;\n\n        _windowProxy.default.replaceLocation = function (url) {\n          url = url.replace(/^\\/ghost\\//, '/');\n          newLocation = url;\n        };\n\n        newLocation = undefined;\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n      });\n      (0, _mocha.afterEach)(function () {\n        _windowProxy.default.replaceLocation = originalReplaceLocation;\n      });\n      (0, _mocha.it)('invalidates session on 401 API response', async function () {\n        // return a 401 when attempting to retrieve users\n        this.server.get('/users/', () => new _emberCliMirage.Response(401, {}, {\n          errors: [{\n            message: 'Access denied.',\n            type: 'UnauthorizedError'\n          }]\n        }));\n        await (0, _testSupport.authenticateSession)();\n        await (0, _testHelpers.visit)('/settings/staff'); // running `visit(url)` inside windowProxy.replaceLocation breaks\n        // the async behaviour so we need to run `visit` here to simulate\n        // the browser visiting the new page\n\n        if (newLocation) {\n          await (0, _testHelpers.visit)(newLocation);\n        }\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after 401').to.equal('/signin');\n      });\n      (0, _mocha.it)('doesn\\'t show navigation menu on invalid url when not authenticated', async function () {\n        await (0, _testSupport.invalidateSession)();\n        await (0, _testHelpers.visit)('/');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'current url').to.equal('/signin');\n        (0, _chai.expect)((0, _testHelpers.findAll)('nav.gh-nav').length, 'nav menu presence').to.equal(0);\n        await (0, _testHelpers.visit)('/signin/invalidurl/');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after invalid url').to.equal('/signin/invalidurl/');\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)(), 'path after invalid url').to.equal('error404');\n        (0, _chai.expect)((0, _testHelpers.findAll)('nav.gh-nav').length, 'nav menu presence').to.equal(0);\n      });\n      (0, _mocha.it)('shows nav menu on invalid url when authenticated', async function () {\n        await (0, _testSupport.authenticateSession)();\n        await (0, _testHelpers.visit)('/signin/invalidurl/');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after invalid url').to.equal('/signin/invalidurl/');\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)(), 'path after invalid url').to.equal('error404');\n        (0, _chai.expect)((0, _testHelpers.findAll)('nav.gh-nav').length, 'nav menu presence').to.equal(1);\n      });\n    }); // TODO: re-enable once modal reappears correctly\n\n    _mocha.describe.skip('editor', function () {\n      let origDebounce = Ember.run.debounce;\n      let origThrottle = Ember.run.throttle; // we don't want the autosave interfering in this test\n\n      (0, _mocha.beforeEach)(function () {\n        Ember.run.debounce = function () {};\n\n        Ember.run.throttle = function () {};\n      });\n      (0, _mocha.it)('displays re-auth modal attempting to save with invalid session', async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        }); // simulate an invalid session when saving the edited post\n\n        this.server.put('/posts/:id/', function (_ref, _ref2) {\n          let {\n            posts\n          } = _ref;\n          let {\n            params\n          } = _ref2;\n          let post = posts.find(params.id);\n          let attrs = this.normalizedRequestAttrs();\n\n          if (attrs.mobiledoc.cards[0][1].markdown === 'Edited post body') {\n            return new _emberCliMirage.Response(401, {}, {\n              errors: [{\n                message: 'Access denied.',\n                type: 'UnauthorizedError'\n              }]\n            });\n          } else {\n            return post.update(attrs);\n          }\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _testHelpers.visit)('/editor'); // create the post\n\n        await (0, _testHelpers.fillIn)('#entry-title', 'Test Post');\n        await (0, _testHelpers.fillIn)('.__mobiledoc-editor', 'Test post body');\n        await (0, _testHelpers.click)('.js-publish-button'); // we shouldn't have a modal at this point\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.modal-container #login').length, 'modal exists').to.equal(0); // we also shouldn't have any alerts\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length, 'no of alerts').to.equal(0); // update the post\n\n        await (0, _testHelpers.fillIn)('.__mobiledoc-editor', 'Edited post body');\n        await (0, _testHelpers.click)('.js-publish-button'); // we should see a re-auth modal\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal #login').length, 'modal exists').to.equal(1);\n      }); // don't clobber debounce/throttle for future tests\n\n      (0, _mocha.afterEach)(function () {\n        Ember.run.debounce = origDebounce;\n        Ember.run.throttle = origThrottle;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/content-test\", [\"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"ember-power-select/test-support/helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\"], function (_testSupport, _mocha, _testHelpers, _helpers, _chai, _emberMocha, _testSupport2) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Content', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _testHelpers.visit)('/posts');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.describe)('as admin', function () {\n      let admin, editor, publishedPost, scheduledPost, draftPost, authorPost;\n      (0, _mocha.beforeEach)(async function () {\n        let adminRole = this.server.create('role', {\n          name: 'Administrator'\n        });\n        admin = this.server.create('user', {\n          roles: [adminRole]\n        });\n        let editorRole = this.server.create('role', {\n          name: 'Editor'\n        });\n        editor = this.server.create('user', {\n          roles: [editorRole]\n        });\n        publishedPost = this.server.create('post', {\n          authors: [admin],\n          status: 'published',\n          title: 'Published Post'\n        });\n        scheduledPost = this.server.create('post', {\n          authors: [admin],\n          status: 'scheduled',\n          title: 'Scheduled Post'\n        });\n        draftPost = this.server.create('post', {\n          authors: [admin],\n          status: 'draft',\n          title: 'Draft Post'\n        });\n        authorPost = this.server.create('post', {\n          authors: [editor],\n          status: 'published',\n          title: 'Editor Published Post'\n        }); // pages shouldn't appear in the list\n\n        this.server.create('page', {\n          authors: [admin],\n          status: 'published',\n          title: 'Published Page'\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n\n      _mocha.it.skip('displays and filters posts', async function () {\n        await (0, _testHelpers.visit)('/posts'); // Not checking request here as it won't be the last request made\n        // Displays all posts + pages\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-post-id]').length, 'all posts count').to.equal(4); // show draft posts\n\n        await (0, _helpers.selectChoose)('[data-test-type-select]', 'Draft posts'); // API request is correct\n\n        let [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"drafts\" request status filter').to.have.string('status:draft'); // Displays draft post\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-post-id]').length, 'drafts count').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-post-id=\"${draftPost.id}\"]`), 'draft post').to.exist; // show published posts\n\n        await (0, _helpers.selectChoose)('[data-test-type-select]', 'Published posts'); // API request is correct\n\n        [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"published\" request status filter').to.have.string('status:published'); // Displays three published posts + pages\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-post-id]').length, 'published count').to.equal(2);\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-post-id=\"${publishedPost.id}\"]`), 'admin published post').to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-post-id=\"${authorPost.id}\"]`), 'author published post').to.exist; // show scheduled posts\n\n        await (0, _helpers.selectChoose)('[data-test-type-select]', 'Scheduled posts'); // API request is correct\n\n        [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"scheduled\" request status filter').to.have.string('status:scheduled'); // Displays scheduled post\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-post-id]').length, 'scheduled count').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-post-id=\"${scheduledPost.id}\"]`), 'scheduled post').to.exist; // show all posts\n\n        await (0, _helpers.selectChoose)('[data-test-type-select]', 'All posts'); // API request is correct\n\n        [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"all\" request status filter').to.have.string('status:[draft,scheduled,published]'); // show all posts by editor\n\n        await (0, _helpers.selectChoose)('[data-test-author-select]', editor.name); // API request is correct\n\n        [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"editor\" request status filter').to.have.string('status:[draft,scheduled,published]');\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"editor\" request filter param').to.have.string(`authors:${editor.slug}`); // Post status is only visible when members is enabled\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-visibility-select]'), 'access dropdown before members enabled').to.not.exist;\n        let featureService = this.owner.lookup('service:feature');\n        featureService.set('members', true);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-visibility-select]'), 'access dropdown after members enabled').to.exist;\n        await (0, _helpers.selectChoose)('[data-test-visibility-select]', 'Paid members-only');\n        [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"visibility\" request filter param').to.have.string('visibility:paid+status:[draft,scheduled,published]'); // Displays editor post\n        // TODO: implement \"filter\" param support and fix mirage post->author association\n        // expect(find('[data-test-post-id]').length, 'editor post count').to.equal(1);\n        // expect(find(`[data-test-post-id=\"${authorPost.id}\"]`), 'author post').to.exist;\n        // TODO: test tags dropdown\n      }); // TODO: skipped due to consistently random failures on Travis\n      // options[0] is undefined\n      // https://github.com/TryGhost/Ghost/issues/10308\n\n\n      _mocha.it.skip('sorts tags filter alphabetically', async function () {\n        this.server.create('tag', {\n          name: 'B - Second',\n          slug: 'second'\n        });\n        this.server.create('tag', {\n          name: 'Z - Last',\n          slug: 'last'\n        });\n        this.server.create('tag', {\n          name: 'A - First',\n          slug: 'first'\n        });\n        await (0, _testHelpers.visit)('/posts');\n        await (0, _helpers.clickTrigger)('[data-test-tag-select]');\n        let options = (0, _testHelpers.findAll)('.ember-power-select-option');\n        (0, _chai.expect)(options[0].textContent.trim()).to.equal('All tags');\n        (0, _chai.expect)(options[1].textContent.trim()).to.equal('A - First');\n        (0, _chai.expect)(options[2].textContent.trim()).to.equal('B - Second');\n        (0, _chai.expect)(options[3].textContent.trim()).to.equal('Z - Last');\n      });\n\n      (0, _mocha.it)('can add and edit custom views', async function () {\n        // actions are not visible when there's no filter\n        await (0, _testHelpers.visit)('/posts');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"edit-view\"]')).to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"add-view\"]')).to.not.exist; // add action is visible after filtering to a non-default filter\n\n        await (0, _helpers.selectChoose)('[data-test-author-select]', admin.name);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"add-view\"]')).to.exist; // adding view shows it in the sidebar\n\n        await (0, _testHelpers.click)('[data-test-button=\"add-view\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"custom-view-form\"]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"custom-view-form\"] h1').textContent.trim()).to.equal('New view');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"custom-view-name\"]', 'Test view');\n        await (0, _testHelpers.click)('[data-test-button=\"save-custom-view\"]'); // modal closes on save\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"custom-view-form\"]')).to.not.exist; // UI updates\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-custom=\"posts-Test view\"]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-custom=\"posts-Test view\"]').textContent.trim()).to.equal('Test view');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"add-view\"]')).to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"edit-view\"]')).to.exist; // editing view\n\n        await (0, _testHelpers.click)('[data-test-button=\"edit-view\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"custom-view-form\"]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"custom-view-form\"] h1').textContent.trim()).to.equal('Edit view');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"custom-view-name\"]', 'Updated view');\n        await (0, _testHelpers.click)('[data-test-button=\"save-custom-view\"]'); // modal closes on save\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"custom-view-form\"]')).to.not.exist; // UI updates\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-custom=\"posts-Updated view\"]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-custom=\"posts-Updated view\"]').textContent.trim()).to.equal('Updated view');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"add-view\"]')).to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"edit-view\"]')).to.exist;\n      });\n      (0, _mocha.it)('can navigate to custom views', async function () {\n        this.server.create('setting', {\n          group: 'site',\n          key: 'shared_views',\n          value: JSON.stringify([{\n            route: 'posts',\n            name: 'My posts',\n            filter: {\n              author: admin.slug\n            }\n          }])\n        });\n        await (0, _testHelpers.visit)('/posts'); // nav bar contains default + custom views\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-custom=\"posts-Drafts\"]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-custom=\"posts-Scheduled\"]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-custom=\"posts-Published\"]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-custom=\"posts-My posts\"]')).to.exist; // screen has default title and sidebar is showing inactive custom view\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-screen-title]').textContent.trim()).to.equal('Posts');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"posts\"]')).to.have.class('active'); // clicking sidebar custom view link works\n\n        await (0, _testHelpers.click)('[data-test-nav-custom=\"posts-Scheduled\"]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/posts?type=scheduled');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-screen-title]').textContent.trim()).to.match(/Posts[ \\n]+Scheduled/);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-custom=\"posts-Scheduled\"]')).to.have.class('active'); // clicking the main posts link resets\n\n        await (0, _testHelpers.click)('[data-test-nav=\"posts\"]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/posts');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-screen-title]').textContent.trim()).to.equal('Posts');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-custom=\"posts-Scheduled\"]')).to.not.have.class('active'); // changing a filter to match a custom view shows custom view\n\n        await (0, _helpers.selectChoose)('[data-test-type-select]', 'Scheduled posts');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/posts?type=scheduled');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-custom=\"posts-Scheduled\"]')).to.have.class('active');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-screen-title]').textContent.trim()).to.match(/Posts[ \\n]+Scheduled/);\n      });\n    });\n    (0, _mocha.describe)('as author', function () {\n      let author, authorPost;\n      (0, _mocha.beforeEach)(async function () {\n        let authorRole = this.server.create('role', {\n          name: 'Author'\n        });\n        author = this.server.create('user', {\n          roles: [authorRole]\n        });\n        let adminRole = this.server.create('role', {\n          name: 'Administrator'\n        });\n        let admin = this.server.create('user', {\n          roles: [adminRole]\n        }); // create posts\n\n        authorPost = this.server.create('post', {\n          authors: [author],\n          status: 'published',\n          title: 'Author Post'\n        });\n        this.server.create('post', {\n          authors: [admin],\n          status: 'scheduled',\n          title: 'Admin Post'\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('only fetches the author\\'s posts', async function () {\n        await (0, _testHelpers.visit)('/posts'); // trigger a filter request so we can grab the posts API request easily\n\n        await (0, _helpers.selectChoose)('[data-test-type-select]', 'Published posts'); // API request includes author filter\n\n        let [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        (0, _chai.expect)(lastRequest.queryParams.filter).to.have.string(`authors:${author.slug}`); // only author's post is shown\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-post-id]').length, 'post count').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-post-id=\"${authorPost.id}\"]`), 'author post').to.exist;\n      });\n    });\n    (0, _mocha.describe)('as contributor', function () {\n      let contributor, contributorPost;\n      (0, _mocha.beforeEach)(async function () {\n        let contributorRole = this.server.create('role', {\n          name: 'Contributor'\n        });\n        contributor = this.server.create('user', {\n          roles: [contributorRole]\n        });\n        let adminRole = this.server.create('role', {\n          name: 'Administrator'\n        });\n        let admin = this.server.create('user', {\n          roles: [adminRole]\n        }); // Create posts\n\n        contributorPost = this.server.create('post', {\n          authors: [contributor],\n          status: 'draft',\n          title: 'Contributor Post Draft'\n        });\n        this.server.create('post', {\n          authors: [contributor],\n          status: 'published',\n          title: 'Contributor Published Post'\n        });\n        this.server.create('post', {\n          authors: [admin],\n          status: 'scheduled',\n          title: 'Admin Post'\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('only fetches the contributor\\'s draft posts', async function () {\n        await (0, _testHelpers.visit)('/posts'); // Ensure the type, tag, and author selectors don't exist\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-type-select]'), 'type selector').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-tag-select]'), 'tag selector').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-author-select]'), 'author selector').to.not.exist; // Trigger a sort request\n\n        await (0, _helpers.selectChoose)('[data-test-order-select]', 'Oldest'); // API request includes author filter\n\n        let [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        (0, _chai.expect)(lastRequest.queryParams.filter).to.have.string(`authors:${contributor.slug}`); // only contributor's post is shown\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-post-id]').length, 'post count').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-post-id=\"${contributorPost.id}\"]`), 'author post').to.exist;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/custom-post-templates-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\"], function (_ctrlOrCmd, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2) {\n  \"use strict\";\n\n  // keyCodes\n  const KEY_S = 83;\n  (0, _mocha.describe)('Acceptance: Custom Post Templates', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.beforeEach)(async function () {\n      this.server.loadFixtures('settings');\n      let role = this.server.create('role', {\n        name: 'Administrator'\n      });\n      this.server.create('user', {\n        roles: [role]\n      });\n      return await (0, _testSupport.authenticateSession)();\n    });\n    (0, _mocha.describe)('with custom templates', function () {\n      (0, _mocha.beforeEach)(function () {\n        this.server.create('theme', {\n          active: true,\n          name: 'example-theme',\n          package: {\n            name: 'Example Theme',\n            version: '0.1'\n          },\n          templates: [{\n            filename: 'custom-news-bulletin.hbs',\n            name: 'News Bulletin',\n            for: ['post', 'page'],\n            slug: null\n          }, {\n            filename: 'custom-big-images.hbs',\n            name: 'Big Images',\n            for: ['post', 'page'],\n            slug: null\n          }, {\n            filename: 'post-one.hbs',\n            name: 'One',\n            for: ['post'],\n            slug: 'one'\n          }, {\n            filename: 'page-about.hbs',\n            name: 'About',\n            for: ['page'],\n            slug: 'about'\n          }]\n        });\n      });\n      (0, _mocha.it)('can change selected template', async function () {\n        let post = this.server.create('post', {\n          customTemplate: 'custom-news-bulletin.hbs'\n        });\n        await (0, _testHelpers.visit)('/editor/post/1');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // template form should be shown\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-custom-template-form]')).to.exist; // custom template should be selected\n\n        let select = (0, _testHelpers.find)('[data-test-select=\"custom-template\"]');\n        (0, _chai.expect)(select.value, 'selected value').to.equal('custom-news-bulletin.hbs'); // templates list should contain default and custom templates in alphabetical order\n\n        (0, _chai.expect)(select.options.length).to.equal(3);\n        (0, _chai.expect)(select.options.item(0).value, 'default value').to.equal('');\n        (0, _chai.expect)(select.options.item(0).text, 'default text').to.equal('Default');\n        (0, _chai.expect)(select.options.item(1).value, 'first custom value').to.equal('custom-big-images.hbs');\n        (0, _chai.expect)(select.options.item(1).text, 'first custom text').to.equal('Big Images');\n        (0, _chai.expect)(select.options.item(2).value, 'second custom value').to.equal('custom-news-bulletin.hbs');\n        (0, _chai.expect)(select.options.item(2).text, 'second custom text').to.equal('News Bulletin'); // select the default template\n\n        await (0, _testHelpers.fillIn)(select, ''); // save then check server record\n\n        await (0, _testHelpers.triggerKeyEvent)('.gh-app', 'keydown', KEY_S, {\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        });\n        (0, _chai.expect)(this.server.db.posts.find(post.id).customTemplate, 'saved custom template').to.equal('');\n      });\n      (0, _mocha.it)('disables template selector if slug matches slug-based template');\n      (0, _mocha.it)('doesn\\'t query themes endpoint unncessarily', async function () {\n        // eslint-disable-next-line\n        let themeRequests = () => {\n          return this.server.pretender.handledRequests.filter(function (request) {\n            return request.url.match(/\\/themes\\//);\n          });\n        };\n\n        this.server.create('post', {\n          customTemplate: 'custom-news-bulletin.hbs'\n        });\n        await (0, _testHelpers.visit)('/editor/post/1');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]');\n        (0, _chai.expect)(themeRequests().length, 'after first open').to.equal(1);\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // hide\n\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // show\n\n        (0, _chai.expect)(themeRequests().length, 'after second open').to.equal(1);\n      });\n    });\n    (0, _mocha.describe)('without custom templates', function () {\n      (0, _mocha.beforeEach)(function () {\n        this.server.create('theme', {\n          active: true,\n          name: 'example-theme',\n          package: {\n            name: 'Example Theme',\n            version: '0.1'\n          },\n          templates: []\n        });\n      });\n      (0, _mocha.it)('doesn\\'t show template selector', async function () {\n        this.server.create('post', {\n          customTemplate: 'custom-news-bulletin.hbs'\n        });\n        await (0, _testHelpers.visit)('/editor/post/1');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // template form should be shown\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-custom-template-form]')).to.not.exist;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/dashboard-test\", [\"ember-simple-auth/test-support\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\"], function (_testSupport, _testHelpers, _mocha, _chai, _emberMocha, _testSupport2) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Dashboard', function () {\n    const hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('is not accessible when logged out', async function () {\n      await (0, _testHelpers.visit)('/dashboard');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      beforeEach(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('can visit /dashboard', async function () {\n        await (0, _testHelpers.visit)('/dashboard');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/dashboard');\n      });\n      (0, _mocha.it)('/ redirects to /dashboard', async function () {\n        await (0, _testHelpers.visit)('/');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/dashboard');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/editor-test\", [\"ember-cli-mirage\", \"ghost-admin/utils/ctrl-or-cmd\", \"moment\", \"sinon\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"ember-power-datepicker/test-support\", \"chai\", \"ember-power-select/test-support\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_emberCliMirage, _ctrlOrCmd, _moment, _sinon, _testSupport, _mocha, _testHelpers, _testSupport2, _chai, _testSupport3, _emberMocha, _testSupport4, _visit) {\n  \"use strict\";\n\n  // TODO: update ember-power-datepicker to expose modern test helpers\n  // https://github.com/cibernox/ember-power-datepicker/issues/30\n  (0, _mocha.describe)('Acceptance: Editor', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport4.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      let author = this.server.create('user'); // necesary for post-author association\n\n      this.server.create('post', {\n        authors: [author]\n      });\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/editor/post/1');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('does not redirect to staff page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      let author = this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      this.server.create('post', {\n        authors: [author]\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/editor/post/1');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1');\n    });\n    (0, _mocha.it)('does not redirect to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      let author = this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      this.server.create('post', {\n        authors: [author]\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/editor/post/1');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1');\n    });\n    (0, _mocha.it)('does not redirect to staff page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      let author = this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      this.server.create('post', {\n        authors: [author]\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/editor/post/1');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1');\n    });\n    (0, _mocha.it)('displays 404 when post does not exist', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/editor/post/1');\n      (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('error404');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/editor/post/1');\n    });\n    (0, _mocha.it)('when logged in as a contributor, renders a save button instead of a publish menu & hides tags input', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      let author = this.server.create('user', {\n        roles: [role]\n      });\n      this.server.createList('post', 2, {\n        authors: [author]\n      });\n      this.server.loadFixtures('settings');\n      await (0, _testSupport.authenticateSession)(); // post id 1 is a draft, checking for draft behaviour now\n\n      await (0, _visit.visit)('/editor/post/1');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1'); // Expect publish menu to not exist\n\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-trigger]'), 'publish menu trigger').to.not.exist; // Open post settings menu\n\n      await (0, _testHelpers.click)('[data-test-psm-trigger]'); // Check to make sure that tags input doesn't exist\n\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-token-input]'), 'tags input').to.not.exist; // post id 2 is published, we should be redirected to index\n\n      await (0, _visit.visit)('/editor/post/2');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/posts');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      let author;\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        author = this.server.create('user', {\n          roles: [role]\n        });\n        this.server.loadFixtures('settings');\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('renders the editor correctly, PSM Publish Date and Save Button', async function () {\n        let [post1] = this.server.createList('post', 2, {\n          authors: [author]\n        });\n        let futureTime = (0, _moment.default)().tz('Etc/UTC').add(10, 'minutes'); // post id 1 is a draft, checking for draft behaviour now\n\n        await (0, _visit.visit)('/editor/post/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1'); // open post settings menu\n\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // should error, if the publish time is in the wrong format\n\n        await (0, _testHelpers.fillIn)('[data-test-date-time-picker-time-input]', 'foo');\n        await (0, _testHelpers.blur)('[data-test-date-time-picker-time-input]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-error]').textContent.trim(), 'inline error response for invalid time').to.equal('Must be in format: \"15:00\"'); // should error, if the publish time is in the future\n        // NOTE: date must be selected first, changing the time first will save\n        // with the new time\n\n        await (0, _testSupport2.datepickerSelect)('[data-test-date-time-picker-datepicker]', _moment.default.tz('Etc/UTC').toDate());\n        await (0, _testHelpers.fillIn)('[data-test-date-time-picker-time-input]', futureTime.format('HH:mm'));\n        await (0, _testHelpers.blur)('[data-test-date-time-picker-time-input]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-error]').textContent.trim(), 'inline error response for future time').to.equal('Must be in the past'); // closing the PSM will reset the invalid date/time\n\n        await (0, _testHelpers.click)('[data-test-psm-trigger]');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-error]'), 'date picker error after closing PSM').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-date-input]').value, 'PSM date value after closing with invalid date').to.equal((0, _moment.default)(post1.publishedAt).tz('Etc/UTC').format('YYYY-MM-DD'));\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-time-input]').value, 'PSM time value after closing with invalid date').to.equal((0, _moment.default)(post1.publishedAt).tz('Etc/UTC').format('HH:mm')); // saves the post with the new date\n\n        let validTime = (0, _moment.default)('2017-04-09 12:00').tz('Etc/UTC');\n        await (0, _testHelpers.fillIn)('[data-test-date-time-picker-time-input]', validTime.format('HH:mm'));\n        await (0, _testHelpers.blur)('[data-test-date-time-picker-time-input]');\n        await (0, _testSupport2.datepickerSelect)('[data-test-date-time-picker-datepicker]', validTime.toDate()); // hide psm\n\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // checking the flow of the saving button for a draft\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-trigger]').textContent.trim(), 'draft publish button text').to.equal('Publish');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-post-status]').textContent.trim(), 'draft status text').to.match(/Draft\\s+- Saved/); // click on publish now\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-draft]'), 'draft publish menu is shown').to.exist;\n        await (0, _testHelpers.click)('[data-test-publishmenu-scheduled-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'draft post schedule button text').to.equal('Schedule');\n        await (0, _testHelpers.click)('[data-test-publishmenu-published-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'draft post publish button text').to.equal('Publish'); // Publish the post and re-open publish menu\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button updated after draft is published').to.equal('Update');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-published]'), 'publish menu is shown after draft published').to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-post-status]').textContent.trim(), 'post status updated after draft published').to.equal('Published');\n        await (0, _testHelpers.click)('[data-test-publishmenu-cancel]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-unpublished-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'published post unpublish button text').to.equal('Unpublish'); // post id 2 is a published post, checking for published post behaviour now\n\n        await (0, _visit.visit)('/editor/post/2');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/2');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-date-input]').value).to.equal('2015-12-19');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-time-input]').value).to.equal('16:25'); // saves the post with a new date\n\n        await (0, _testSupport2.datepickerSelect)('[data-test-date-time-picker-datepicker]', (0, _moment.default)('2016-05-10 10:00').toDate());\n        await (0, _testHelpers.fillIn)('[data-test-date-time-picker-time-input]', '10:00');\n        await (0, _testHelpers.blur)('[data-test-date-time-picker-time-input]');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // saving\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'published button text').to.equal('Update');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button updated after published post is updated').to.equal('Update'); // go to settings to change the timezone\n\n        await (0, _visit.visit)('/settings/general');\n        await (0, _testHelpers.click)('[data-test-toggle-timezone]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL for settings').to.equal('/settings/general');\n        (0, _chai.expect)((0, _testHelpers.find)('#timezone option:checked').textContent.trim(), 'default timezone').to.equal('(GMT) UTC'); // select a new timezone\n\n        (0, _testHelpers.find)('#timezone option[value=\"Pacific/Kwajalein\"]').selected = true;\n        await (0, _testHelpers.triggerEvent)('#timezone', 'change'); // save the settings\n\n        await (0, _testHelpers.click)('[data-test-button=\"save\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('#timezone option:checked').textContent.trim(), 'new timezone after saving').to.equal('(GMT +12:00) International Date Line West'); // and now go back to the editor\n\n        await (0, _visit.visit)('/editor/post/2');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL in editor').to.equal('/editor/post/2');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-date-input]').value, 'date after timezone change').to.equal('2016-05-10');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-time-input]').value, 'time after timezone change').to.equal('22:00'); // unpublish\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-unpublished-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'published post unpublish button text').to.equal('Unpublish');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button updated after published post is unpublished').to.equal('Publish');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-draft]'), 'draft menu is shown after unpublished').to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-post-status]').textContent.trim(), 'post status updated after unpublished').to.match(/Draft\\s+- Saved/); // schedule post\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-cancel]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-scheduled-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'draft post, schedule button text').to.equal('Schedule'); // get time in current timezone and select the current date\n        // will result in the default +5mins schedule time\n\n        let newFutureTime = _moment.default.tz('Pacific/Kwajalein');\n\n        await (0, _testSupport2.datepickerSelect)('[data-test-publishmenu-draft] [data-test-date-time-picker-datepicker]', new Date(newFutureTime.format().replace(/\\+.*$/, '')));\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button updated after draft is scheduled').to.equal('Reschedule');\n        await (0, _testHelpers.click)('[data-test-publishmenu-cancel]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-scheduled]'), 'publish menu is not shown after closed').to.not.exist; // expect countdown to show warning that post is scheduled to be published\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-schedule-countdown]').textContent.trim(), 'notification countdown').to.match(/Will be published\\s+in (4|5) minutes/);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-trigger]').textContent.trim(), 'scheduled publish button text').to.equal('Scheduled');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-post-status]').textContent.trim(), 'scheduled post status').to.match(/Will be published\\s+in (4|5) minutes/); // Re-schedule\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-scheduled-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'scheduled post button reschedule text').to.equal('Reschedule');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button text for a rescheduled post').to.equal('Reschedule');\n        await (0, _testHelpers.click)('[data-test-publishmenu-cancel]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-scheduled]'), 'publish menu is not shown after closed').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-post-status]').textContent.trim(), 'scheduled status text').to.match(/Will be published\\s+in (4|5) minutes/); // unschedule\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-draft-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button updated after scheduled post is unscheduled').to.equal('Unschedule');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button updated after scheduled post is unscheduled').to.equal('Publish');\n        await (0, _testHelpers.click)('[data-test-publishmenu-cancel]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-trigger]').textContent.trim(), 'publish button text after unschedule').to.equal('Publish');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-post-status]').textContent.trim(), 'status text after unschedule').to.match(/Draft\\s+- Saved/);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-schedule-countdown]'), 'scheduled countdown after unschedule').to.not.exist;\n      });\n      (0, _mocha.it)('handles validation errors when scheduling', async function () {\n        this.server.put('/posts/:id/', function () {\n          return new _emberCliMirage.default.Response(422, {}, {\n            errors: [{\n              type: 'ValidationError',\n              message: 'Error test'\n            }]\n          });\n        });\n        let post = this.server.create('post', 1, {\n          authors: [author],\n          status: 'draft'\n        });\n        let plusTenMin = (0, _moment.default)().utc().add(10, 'minutes');\n        await (0, _visit.visit)(`/editor/post/${post.id}`);\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-scheduled-option]');\n        await (0, _testSupport2.datepickerSelect)('[data-test-publishmenu-draft] [data-test-date-time-picker-datepicker]', plusTenMin.toDate());\n        await (0, _testHelpers.fillIn)('[data-test-publishmenu-draft] [data-test-date-time-picker-time-input]', plusTenMin.format('HH:mm'));\n        await (0, _testHelpers.blur)('[data-test-publishmenu-draft] [data-test-date-time-picker-time-input]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length, 'number of alerts after failed schedule').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent, 'alert text after failed schedule').to.match(/Error test/);\n      });\n      (0, _mocha.it)('handles title validation errors correctly', async function () {\n        this.server.create('post', {\n          authors: [author]\n        }); // post id 1 is a draft, checking for draft behaviour now\n\n        await (0, _visit.visit)('/editor/post/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1');\n        await (0, _testHelpers.fillIn)('[data-test-editor-title-input]', Array(260).join('a'));\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length, 'number of alerts after invalid title').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent, 'alert text after invalid title').to.match(/Title cannot be longer than 255 characters/);\n      }); // NOTE: these tests are specific to the mobiledoc editor\n      // it('inserts a placeholder if the title is blank', async function () {\n      //     this.server.createList('post', 1);\n      //\n      //     // post id 1 is a draft, checking for draft behaviour now\n      //     await visit('/editor/post/1');\n      //\n      //     expect(currentURL(), 'currentURL')\n      //         .to.equal('/editor/post/1');\n      //\n      //     await titleRendered();\n      //\n      //     let title = find('#koenig-title-input div');\n      //     expect(title.data('placeholder')).to.equal('Your Post Title');\n      //     expect(title.hasClass('no-content')).to.be.false;\n      //\n      //     await replaceTitleHTML('');\n      //     expect(title.hasClass('no-content')).to.be.true;\n      //\n      //     await replaceTitleHTML('test');\n      //     expect(title.hasClass('no-content')).to.be.false;\n      // });\n      //\n      // it('removes HTML from the title.', async function () {\n      //     this.server.createList('post', 1);\n      //\n      //     // post id 1 is a draft, checking for draft behaviour now\n      //     await visit('/editor/post/1');\n      //\n      //     expect(currentURL(), 'currentURL')\n      //         .to.equal('/editor/post/1');\n      //\n      //     await titleRendered();\n      //\n      //     let title = find('#koenig-title-input div');\n      //     await replaceTitleHTML('<div>TITLE&nbsp;&#09;&nbsp;&thinsp;&ensp;&emsp;TEST</div>&nbsp;');\n      //     expect(title.html()).to.equal('TITLE      TEST ');\n      // });\n\n      (0, _mocha.it)('renders first countdown notification before scheduled time', async function () {\n        let clock = _sinon.default.useFakeTimers((0, _moment.default)().valueOf());\n\n        let compareDate = (0, _moment.default)().tz('Etc/UTC').add(4, 'minutes');\n        let compareDateString = compareDate.format('YYYY-MM-DD');\n        let compareTimeString = compareDate.format('HH:mm');\n        this.server.create('post', {\n          publishedAt: _moment.default.utc().add(4, 'minutes'),\n          status: 'scheduled',\n          authors: [author]\n        });\n        this.server.create('setting', {\n          timezone: 'Europe/Dublin'\n        });\n        clock.restore();\n        await (0, _visit.visit)('/editor/post/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-date-input]').value, 'scheduled date').to.equal(compareDateString);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-time-input]').value, 'scheduled time').to.equal(compareTimeString); // Dropdown menu should be 'Update Post' and 'Unschedule'\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-trigger]').textContent.trim(), 'text in save button for scheduled post').to.equal('Scheduled'); // expect countdown to show warning, that post is scheduled to be published\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-schedule-countdown]').textContent.trim(), 'notification countdown').to.match(/Will be published\\s+in (4|5) minutes/);\n      });\n      (0, _mocha.it)('shows author token input and allows changing of authors in PSM', async function () {\n        let adminRole = this.server.create('role', {\n          name: 'Adminstrator'\n        });\n        let authorRole = this.server.create('role', {\n          name: 'Author'\n        });\n        let user1 = this.server.create('user', {\n          name: 'Primary',\n          roles: [adminRole]\n        });\n        this.server.create('user', {\n          name: 'Waldo',\n          roles: [authorRole]\n        });\n        this.server.create('post', {\n          authors: [user1]\n        });\n        await (0, _visit.visit)('/editor/post/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]');\n        let tokens = (0, _testHelpers.findAll)('[data-test-input=\"authors\"] .ember-power-select-multiple-option');\n        (0, _chai.expect)(tokens.length).to.equal(1);\n        (0, _chai.expect)(tokens[0].textContent.trim()).to.have.string('Primary');\n        await (0, _testSupport3.selectChoose)('[data-test-input=\"authors\"]', 'Waldo');\n        let savedAuthors = this.server.schema.posts.find('1').authors.models;\n        (0, _chai.expect)(savedAuthors.length).to.equal(2);\n        (0, _chai.expect)(savedAuthors[0].name).to.equal('Primary');\n        (0, _chai.expect)(savedAuthors[1].name).to.equal('Waldo');\n      });\n      (0, _mocha.it)('saves post settings fields', async function () {\n        let post = this.server.create('post', {\n          authors: [author]\n        });\n        await (0, _visit.visit)(`/editor/post/${post.id}`); // TODO: implement tests for other fields\n\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // excerpt has validation\n\n        await (0, _testHelpers.fillIn)('[data-test-field=\"custom-excerpt\"]', Array(302).join('a'));\n        await (0, _testHelpers.blur)('[data-test-field=\"custom-excerpt\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"custom-excerpt\"]').textContent.trim(), 'excerpt too long error').to.match(/cannot be longer than 300/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).customExcerpt, 'saved excerpt after validation error').to.be.null; // changing custom excerpt auto-saves\n\n        await (0, _testHelpers.fillIn)('[data-test-field=\"custom-excerpt\"]', 'Testing excerpt');\n        await (0, _testHelpers.blur)('[data-test-field=\"custom-excerpt\"]');\n        (0, _chai.expect)(this.server.db.posts.find(post.id).customExcerpt, 'saved excerpt').to.equal('Testing excerpt'); // -------\n        // open code injection subview\n\n        await (0, _testHelpers.click)('[data-test-button=\"codeinjection\"]'); // header injection has validation\n\n        let headerCM = (0, _testHelpers.find)('[data-test-field=\"codeinjection-head\"] .CodeMirror').CodeMirror;\n        await headerCM.setValue(Array(65540).join('a'));\n        await (0, _testHelpers.click)(headerCM.getInputField());\n        await (0, _testHelpers.blur)(headerCM.getInputField());\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"codeinjection-head\"]').textContent.trim(), 'header injection too long error').to.match(/cannot be longer than 65535/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).codeinjectionHead, 'saved header injection after validation error').to.be.null; // changing header injection auto-saves\n\n        await headerCM.setValue('<script src=\"http://example.com/inject-head.js\"></script>');\n        await (0, _testHelpers.click)(headerCM.getInputField());\n        await (0, _testHelpers.blur)(headerCM.getInputField());\n        (0, _chai.expect)(this.server.db.posts.find(post.id).codeinjectionHead, 'saved header injection').to.equal('<script src=\"http://example.com/inject-head.js\"></script>'); // footer injection has validation\n\n        let footerCM = (0, _testHelpers.find)('[data-test-field=\"codeinjection-foot\"] .CodeMirror').CodeMirror;\n        await footerCM.setValue(Array(65540).join('a'));\n        await (0, _testHelpers.click)(footerCM.getInputField());\n        await (0, _testHelpers.blur)(footerCM.getInputField());\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"codeinjection-foot\"]').textContent.trim(), 'footer injection too long error').to.match(/cannot be longer than 65535/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).codeinjectionFoot, 'saved footer injection after validation error').to.be.null; // changing footer injection auto-saves\n\n        await footerCM.setValue('<script src=\"http://example.com/inject-foot.js\"></script>');\n        await (0, _testHelpers.click)(footerCM.getInputField());\n        await (0, _testHelpers.blur)(footerCM.getInputField());\n        (0, _chai.expect)(this.server.db.posts.find(post.id).codeinjectionFoot, 'saved footer injection').to.equal('<script src=\"http://example.com/inject-foot.js\"></script>'); // closing subview switches back to main PSM view\n\n        await (0, _testHelpers.click)('[data-test-button=\"close-psm-subview\"]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-field=\"codeinjection-head\"]').length, 'header injection not present after closing subview').to.equal(0); // -------\n        // open twitter data subview\n\n        await (0, _testHelpers.click)('[data-test-button=\"twitter-data\"]'); // twitter title has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"twitter-title\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"twitter-title\"]', Array(302).join('a'));\n        await (0, _testHelpers.blur)('[data-test-field=\"twitter-title\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"twitter-title\"]').textContent.trim(), 'twitter title too long error').to.match(/cannot be longer than 300/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).twitterTitle, 'saved twitter title after validation error').to.be.null; // changing twitter title auto-saves\n        // twitter title has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"twitter-title\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"twitter-title\"]', 'Test Twitter Title');\n        await (0, _testHelpers.blur)('[data-test-field=\"twitter-title\"]');\n        (0, _chai.expect)(this.server.db.posts.find(post.id).twitterTitle, 'saved twitter title').to.equal('Test Twitter Title'); // twitter description has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"twitter-description\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"twitter-description\"]', Array(505).join('a'));\n        await (0, _testHelpers.blur)('[data-test-field=\"twitter-description\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"twitter-description\"]').textContent.trim(), 'twitter description too long error').to.match(/cannot be longer than 500/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).twitterDescription, 'saved twitter description after validation error').to.be.null; // changing twitter description auto-saves\n        // twitter description has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"twitter-description\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"twitter-description\"]', 'Test Twitter Description');\n        await (0, _testHelpers.blur)('[data-test-field=\"twitter-description\"]');\n        (0, _chai.expect)(this.server.db.posts.find(post.id).twitterDescription, 'saved twitter description').to.equal('Test Twitter Description'); // closing subview switches back to main PSM view\n\n        await (0, _testHelpers.click)('[data-test-button=\"close-psm-subview\"]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-field=\"twitter-title\"]').length, 'twitter title not present after closing subview').to.equal(0); // -------\n        // open facebook data subview\n\n        await (0, _testHelpers.click)('[data-test-button=\"facebook-data\"]'); // facebook title has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"og-title\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"og-title\"]', Array(302).join('a'));\n        await (0, _testHelpers.blur)('[data-test-field=\"og-title\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"og-title\"]').textContent.trim(), 'facebook title too long error').to.match(/cannot be longer than 300/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).ogTitle, 'saved facebook title after validation error').to.be.null; // changing facebook title auto-saves\n        // facebook title has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"og-title\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"og-title\"]', 'Test Facebook Title');\n        await (0, _testHelpers.blur)('[data-test-field=\"og-title\"]');\n        (0, _chai.expect)(this.server.db.posts.find(post.id).ogTitle, 'saved facebook title').to.equal('Test Facebook Title'); // facebook description has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"og-description\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"og-description\"]', Array(505).join('a'));\n        await (0, _testHelpers.blur)('[data-test-field=\"og-description\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"og-description\"]').textContent.trim(), 'facebook description too long error').to.match(/cannot be longer than 500/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).ogDescription, 'saved facebook description after validation error').to.be.null; // changing facebook description auto-saves\n        // facebook description has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"og-description\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"og-description\"]', 'Test Facebook Description');\n        await (0, _testHelpers.blur)('[data-test-field=\"og-description\"]');\n        (0, _chai.expect)(this.server.db.posts.find(post.id).ogDescription, 'saved facebook description').to.equal('Test Facebook Description'); // closing subview switches back to main PSM view\n\n        await (0, _testHelpers.click)('[data-test-button=\"close-psm-subview\"]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-field=\"og-title\"]').length, 'facebook title not present after closing subview').to.equal(0);\n      }); // https://github.com/TryGhost/Ghost/issues/11786\n\n      (0, _mocha.it)('save shortcut works when tags/authors field is focused', async function () {\n        let post = this.server.create('post', {\n          authors: [author]\n        });\n        await (0, _visit.visit)(`/editor/post/${post.id}`);\n        await (0, _testHelpers.fillIn)('[data-test-editor-title-input]', 'CMD-S Test');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]');\n        await (0, _testHelpers.click)('[data-test-token-input]');\n        await (0, _testHelpers.triggerEvent)('[data-test-token-input]', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        }); // Check if save request has been sent correctly.\n\n        let [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        let body = JSON.parse(lastRequest.requestBody);\n        (0, _chai.expect)(body.posts[0].title).to.equal('CMD-S Test');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/error-handling-test\", [\"ember-cli-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/mirage/utils\"], function (_emberCliMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _utils) {\n  \"use strict\";\n\n  let htmlErrorResponse = function () {\n    return new _emberCliMirage.default.Response(504, {\n      'Content-Type': 'text/html'\n    }, '<!DOCTYPE html><head><title>Server Error</title></head><body>504 Gateway Timeout</body></html>');\n  };\n\n  (0, _mocha.describe)('Acceptance: Error Handling', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.describe)('VersionMismatch errors', function () {\n      (0, _mocha.describe)('logged in', function () {\n        (0, _mocha.beforeEach)(async function () {\n          let role = this.server.create('role', {\n            name: 'Administrator'\n          });\n          this.server.create('user', {\n            roles: [role]\n          });\n          return await (0, _testSupport.authenticateSession)();\n        });\n        (0, _mocha.it)('displays an alert and disables navigation when saving', async function () {\n          this.server.createList('post', 3); // mock the post save endpoint to return version mismatch\n\n          this.server.put('/posts/:id', _utils.versionMismatchResponse);\n          await (0, _testHelpers.visit)('/posts');\n          await (0, _testHelpers.click)('.posts-list li:nth-of-type(2) a'); // select second post\n\n          await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n          await (0, _testHelpers.click)('[data-test-publishmenu-save]'); // has the refresh to update alert\n\n          (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(1);\n          (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.match(/refresh/); // try navigating back to the content list\n\n          await (0, _testHelpers.click)('[data-test-link=\"posts\"]');\n          (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('editor.edit');\n        });\n        (0, _mocha.it)('displays alert and aborts the transition when navigating', async function () {\n          await (0, _testHelpers.visit)('/posts'); // mock the tags endpoint to return version mismatch\n\n          this.server.get('/tags/', _utils.versionMismatchResponse);\n          await (0, _testHelpers.click)('[data-test-nav=\"tags\"]'); // navigation is blocked on loading screen\n\n          (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('tags_loading'); // has the refresh to update alert\n\n          (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(1);\n          (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.match(/refresh/);\n        });\n      });\n      (0, _mocha.describe)('logged out', function () {\n        (0, _mocha.it)('displays alert', async function () {\n          this.server.post('/session', _utils.versionMismatchResponse);\n          await (0, _testHelpers.visit)('/signin');\n          await (0, _testHelpers.fillIn)('[name=\"identification\"]', 'test@example.com');\n          await (0, _testHelpers.fillIn)('[name=\"password\"]', 'password');\n          await (0, _testHelpers.click)('.js-login-button'); // has the refresh to update alert\n\n          (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(1);\n          (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.match(/refresh/);\n        });\n      });\n    });\n    (0, _mocha.describe)('CloudFlare errors', function () {\n      (0, _mocha.beforeEach)(async function () {\n        this.server.loadFixtures();\n        let roles = this.server.schema.roles.where({\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('handles Ember Data HTML response', async function () {\n        this.server.put('/posts/1/', htmlErrorResponse);\n        this.server.create('post');\n        await (0, _testHelpers.visit)('/editor/post/1');\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.not.match(/html>/);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.match(/Request was rejected due to server error/);\n      });\n      (0, _mocha.it)('handles ember-ajax HTML response', async function () {\n        this.server.del('/themes/foo/', htmlErrorResponse);\n        await (0, _testHelpers.visit)('/settings/design/change-theme');\n        await (0, _testHelpers.click)('[data-test-button=\"toggle-advanced\"]');\n        await (0, _testHelpers.click)('[data-test-theme-id=\"foo\"] [data-test-button=\"actions\"]');\n        await (0, _testHelpers.click)('[data-test-actions-for=\"foo\"] [data-test-button=\"delete\"]');\n        await (0, _testHelpers.click)('[data-test-modal=\"delete-theme\"] [data-test-button=\"confirm\"]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.not.match(/html>/);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.match(/Request was rejected due to server error/);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/launch-flow-test\", [\"ember-simple-auth/test-support\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\"], function (_testSupport, _testHelpers, _mocha, _chai, _emberMocha, _testSupport2) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Launch flow', function () {\n    const hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('is not accessible when logged out', async function () {\n      await (0, _testHelpers.visit)('/launch');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      beforeEach(async function () {\n        let role = this.server.create('role', {\n          name: 'Owner'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('can visit /launch', async function () {\n        await (0, _testHelpers.visit)('/launch');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/launch');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/members-activity-test\", [\"ember-simple-auth/test-support\", \"@ember/test-helpers\", \"mocha\", \"ghost-admin/tests/helpers/labs-flag\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_testSupport, _testHelpers, _mocha, _labsFlag, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Members activity', function () {\n    const hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    beforeEach(function () {\n      (0, _labsFlag.enableLabsFlag)(this.server, 'membersActivityFeed');\n    });\n    (0, _mocha.it)('redirects when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/members-activity');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects non-admins', async function () {\n      await (0, _testSupport.invalidateSession)();\n      const role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/members-activity');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n    });\n    (0, _mocha.describe)('as admin', function () {\n      beforeEach(async function () {\n        const role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('renders', async function () {\n        await (0, _visit.visit)('/members-activity');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/members-activity');\n      });\n      (0, _mocha.it)('requires feature flag', async function () {\n        (0, _labsFlag.disableLabsFlag)(this.server, 'membersActivityFeed');\n        await (0, _visit.visit)('/members-activity');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/dashboard');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/members-test\", [\"moment\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ember-concurrency\", \"ghost-admin/tests/helpers/visit\"], function (_moment, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _emberConcurrency, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Members', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/members');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects non-admins to site', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role]\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/members');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"members\"]'), 'sidebar link').to.not.exist;\n    });\n    (0, _mocha.describe)('as owner', function () {\n      (0, _mocha.beforeEach)(async function () {\n        this.server.loadFixtures('configs');\n        let role = this.server.create('role', {\n          name: 'Owner'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it renders, can be navigated, can edit member', async function () {\n        let member1 = this.server.create('member', {\n          createdAt: _moment.default.utc().subtract(1, 'day').valueOf()\n        });\n        this.server.create('member', {\n          createdAt: _moment.default.utc().subtract(2, 'day').valueOf()\n        });\n        await (0, _visit.visit)('/members');\n        await (0, _testHelpers.settled)(); // lands on correct page\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/members'); // it has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Members - Test Blog'); // it lists all members\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-list=\"members-list-item\"]').length, 'members list count').to.equal(2);\n        let member = (0, _testHelpers.find)('[data-test-list=\"members-list-item\"]');\n        (0, _chai.expect)(member.querySelector('.gh-members-list-name').textContent, 'member list item title').to.equal(member1.name);\n        await (0, _visit.visit)(`/members/${member1.id}`); // // second wait is needed for the member details to settle\n\n        await (0, _testHelpers.settled)(); // it shows selected member form\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"member-name\"]').value, 'loads correct member into form').to.equal(member1.name);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"member-email\"]').value, 'loads correct email into form').to.equal(member1.email); // trigger save\n\n        await (0, _testHelpers.fillIn)('[data-test-input=\"member-name\"]', 'New Name');\n        await (0, _testHelpers.blur)('[data-test-input=\"member-name\"]');\n        await (0, _testHelpers.click)('[data-test-button=\"save\"]'); // extra timeout needed for Travis - sometimes it doesn't update\n        // quick enough and an extra wait() call doesn't help\n\n        await (0, _emberConcurrency.timeout)(100);\n        await (0, _testHelpers.click)('[data-test-link=\"members-back\"]'); // lands on correct page\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/members');\n      });\n      (0, _mocha.it)('can create a new member', async function () {\n        this.server.create('member', {\n          createdAt: _moment.default.utc().subtract(1, 'day').valueOf()\n        });\n        await (0, _visit.visit)('/members');\n        await (0, _testHelpers.settled)(); // lands on correct page\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/members'); // it has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Members - Test Blog'); // it lists all members\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-list=\"members-list-item\"]').length, 'members list count').to.equal(1); //  start new member\n\n        await (0, _testHelpers.click)('[data-test-new-member-button=\"true\"]'); // it navigates to the new member route\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'new member URL').to.equal('/members/new'); // it displays the new member form\n\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-canvas-header h2').textContent, 'settings pane title').to.contain('New member'); // all fields start blank\n\n        (0, _testHelpers.findAll)('.gh-member-settings-primary .gh-input').forEach(function (elem) {\n          (0, _chai.expect)(elem.value, `input field for ${elem.getAttribute('name')}`).to.be.empty;\n        }); // save new member\n\n        await (0, _testHelpers.fillIn)('[data-test-input=\"member-name\"]', 'New Name');\n        await (0, _testHelpers.blur)('[data-test-input=\"member-name\"]');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"member-email\"]', 'example@domain.com');\n        await (0, _testHelpers.blur)('[data-test-input=\"member-email\"]');\n        await (0, _testHelpers.click)('[data-test-button=\"save\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"member-name\"]').value, 'name has been preserved').to.equal('New Name');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"member-email\"]').value, 'email has been preserved').to.equal('example@domain.com');\n      });\n      (0, _mocha.it)('can bulk delete members', async function () {\n        // members to be kept\n        this.server.createList('member', 6); // imported members to be deleted\n\n        const label = this.server.create('label');\n        this.server.createList('member', 5, {\n          labels: [label]\n        });\n        await (0, _visit.visit)('/members');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-member]').length).to.equal(11);\n        await (0, _testHelpers.click)('[data-test-button=\"members-actions\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"delete-selected\"]')).to.not.exist; // a filter is needed for the delete-selected button to show\n\n        await (0, _testHelpers.click)('[data-test-button=\"members-filter-actions\"]');\n        await (0, _testHelpers.click)('.gh-member-label-input-labs input');\n        await (0, _testHelpers.click)(`[data-test-label-filter=\"${label.name}\"]`);\n        await (0, _testHelpers.click)(`[data-test-button=\"members-apply-filter\"]`);\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-member]').length).to.equal(5);\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/members?filter=label%3A%5Blabel-0%5D');\n        await (0, _testHelpers.click)('[data-test-button=\"members-actions\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"delete-selected\"]')).to.exist;\n        await (0, _testHelpers.click)('[data-test-button=\"delete-selected\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"delete-members\"]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"delete-count\"]')).to.have.text('5 members'); // ensure export endpoint gets hit with correct query params when deleting\n\n        let exportQueryParams;\n        this.server.get('/members/upload', (schema, request) => {\n          exportQueryParams = request.queryParams;\n        });\n        await (0, _testHelpers.click)('[data-test-button=\"confirm\"]');\n        (0, _chai.expect)(exportQueryParams).to.deep.equal({\n          filter: 'label:[label-0]',\n          limit: 'all'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"deleted-count\"]')).to.have.text('5 members');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"confirm\"]')).to.not.exist; // members filter is reset\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/members');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-member]').length).to.equal(6);\n        await (0, _testHelpers.click)('[data-test-button=\"close-modal\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"delete-members\"]')).to.not.exist;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/offers-test\", [\"moment\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ember-concurrency\", \"ghost-admin/tests/helpers/visit\"], function (_moment, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _emberConcurrency, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Offers', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/offers');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects non-admins to site', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role]\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/offers');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"offers\"]'), 'sidebar link').to.not.exist;\n    });\n    (0, _mocha.describe)('as owner', function () {\n      (0, _mocha.beforeEach)(async function () {\n        this.server.loadFixtures('products');\n        let role = this.server.create('role', {\n          name: 'Owner'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it renders, can be navigated, can edit offer', async function () {\n        let offer1 = this.server.create('offer', {\n          createdAt: _moment.default.utc().subtract(1, 'day').valueOf()\n        });\n        this.server.create('offer', {\n          createdAt: _moment.default.utc().subtract(2, 'day').valueOf()\n        });\n        await (0, _visit.visit)('/offers');\n        await (0, _testHelpers.settled)(); // lands on correct page\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/offers'); // it has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Offers - Test Blog'); // it lists all offers\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-list=\"offers-list-item\"]').length, 'offers list count').to.equal(2);\n        let offer = (0, _testHelpers.find)('[data-test-list=\"offers-list-item\"]');\n        (0, _chai.expect)(offer.querySelector('[data-test-list=\"offer-name\"] h3').textContent, 'offer list item name').to.equal(offer1.name);\n        await (0, _visit.visit)(`/offers/${offer1.id}`); // second wait is needed for the offer details to settle\n\n        await (0, _testHelpers.settled)(); // it shows selected offer form\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"offer-name\"]').value, 'loads correct offer into form').to.equal(offer1.name); // trigger save\n\n        await (0, _testHelpers.fillIn)('[data-test-input=\"offer-name\"]', 'New Name');\n        await (0, _testHelpers.blur)('[data-test-input=\"offer-name\"]');\n        await (0, _testHelpers.click)('[data-test-button=\"save\"]'); // extra timeout needed for Travis - sometimes it doesn't update\n        // quick enough and an extra wait() call doesn't help\n\n        await (0, _emberConcurrency.timeout)(100);\n        await (0, _testHelpers.click)('[data-test-link=\"offers-back\"]'); // lands on correct page\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/offers');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/password-reset-test\", [\"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-simple-auth/test-support\", \"ember-mocha\", \"ember-cli-mirage/test-support\"], function (_testHelpers, _mocha, _chai, _testSupport, _emberMocha, _testSupport2) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Password Reset', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.describe)('request reset', function () {\n      (0, _mocha.it)('is successful with valid data', async function () {\n        await (0, _testSupport.invalidateSession)();\n        await (0, _testHelpers.visit)('/signin');\n        await (0, _testHelpers.fillIn)('input[name=\"identification\"]', 'test@example.com');\n        await (0, _testHelpers.click)('.forgotten-link'); // an alert with instructions is displayed\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert-blue').length, 'alert count').to.equal(1);\n      });\n      (0, _mocha.it)('shows error messages with invalid data', async function () {\n        await (0, _testHelpers.visit)('/signin'); // no email provided\n\n        await (0, _testHelpers.click)('.forgotten-link'); // email field is invalid\n\n        (0, _chai.expect)((0, _testHelpers.find)('input[name=\"identification\"]').closest('.form-group'), 'email field has error class (no email)').to.match('.error'); // password field is valid\n\n        (0, _chai.expect)((0, _testHelpers.find)('input[name=\"password\"]').closest('.form-group'), 'password field has error class (no email)').to.not.match('.error'); // error message shown\n\n        (0, _chai.expect)((0, _testHelpers.find)('p.main-error').textContent.trim(), 'error message').to.equal('We need your email address to reset your password!'); // invalid email provided\n\n        await (0, _testHelpers.fillIn)('input[name=\"identification\"]', 'test');\n        await (0, _testHelpers.click)('.forgotten-link'); // email field is invalid\n\n        (0, _chai.expect)((0, _testHelpers.find)('input[name=\"identification\"]').closest('.form-group'), 'email field has error class (invalid email)').to.match('.error'); // password field is valid\n\n        (0, _chai.expect)((0, _testHelpers.find)('input[name=\"password\"]').closest('.form-group'), 'password field has error class (invalid email)').to.not.match('.error'); // error message\n\n        (0, _chai.expect)((0, _testHelpers.find)('p.main-error').textContent.trim(), 'error message').to.equal('We need your email address to reset your password!'); // unknown email provided\n\n        await (0, _testHelpers.fillIn)('input[name=\"identification\"]', 'unknown@example.com');\n        await (0, _testHelpers.click)('.forgotten-link'); // email field is invalid\n\n        (0, _chai.expect)((0, _testHelpers.find)('input[name=\"identification\"]').closest('.form-group'), 'email field has error class (unknown email)').to.match('.error'); // password field is valid\n\n        (0, _chai.expect)((0, _testHelpers.find)('input[name=\"password\"]').closest('.form-group'), 'password field has error class (unknown email)').to.not.match('.error'); // error message\n\n        (0, _chai.expect)((0, _testHelpers.find)('p.main-error').textContent.trim(), 'error message').to.equal('There is no user with that email address.');\n      });\n    }); // TODO: add tests for the change password screen\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/amp-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_ctrlOrCmd, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Settings - Integrations - AMP', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/integrations/amp');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/amp');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/amp');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/amp');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it enables or disables AMP properly and saves it', async function () {\n        await (0, _visit.visit)('/settings/integrations/amp'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/amp'); // AMP is enabled by default\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-amp-checkbox]').checked, 'AMP checkbox').to.be.true;\n        await (0, _testHelpers.click)('[data-test-amp-checkbox]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-amp-checkbox]').checked, 'AMP checkbox').to.be.false;\n        await (0, _testHelpers.click)('[data-test-save-button]');\n        let [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        let params = JSON.parse(lastRequest.requestBody);\n        (0, _chai.expect)(params.settings.findBy('key', 'amp').value).to.equal(false); // CMD-S shortcut works\n\n        await (0, _testHelpers.click)('[data-test-amp-checkbox]');\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        }); // we've already saved in this test so there's no on-screen indication\n        // that we've had another save, check the request was fired instead\n\n        let [newRequest] = this.server.pretender.handledRequests.slice(-1);\n        params = JSON.parse(newRequest.requestBody);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-amp-checkbox]').checked, 'AMP checkbox').to.be.true;\n        (0, _chai.expect)(params.settings.findBy('key', 'amp').value).to.equal(true);\n      });\n      (0, _mocha.it)('warns when leaving without saving', async function () {\n        await (0, _visit.visit)('/settings/integrations/amp'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/amp'); // AMP is enabled by default\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-amp-checkbox]').checked, 'AMP checkbox default').to.be.true;\n        await (0, _testHelpers.click)('[data-test-amp-checkbox]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-amp-checkbox]').checked, 'AMP checkbox after click').to.be.false;\n        await (0, _visit.visit)('/settings/staff');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length, 'unsaved changes modal exists').to.equal(1); // Leave without saving\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-leave-button]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL after leave without saving').to.equal('/settings/staff');\n        await (0, _visit.visit)('/settings/integrations/amp');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL after return').to.equal('/settings/integrations/amp'); // settings were not saved\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-amp-checkbox]').checked, 'AMP checkbox').to.be.true;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/code-injection-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_ctrlOrCmd, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Settings - Code-Injection', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/code-injection');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/code-injection');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/code-injection');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/code-injection');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it renders, loads and saves editors correctly', async function () {\n        await (0, _visit.visit)('/settings/code-injection'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/code-injection'); // has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Settings - Code injection - Test Blog');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-save-button]').textContent.trim(), 'save button text').to.equal('Save');\n        (0, _chai.expect)((0, _testHelpers.findAll)('#ghost-head .CodeMirror').length, 'ghost head codemirror element').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('#ghost-head .CodeMirror'), 'ghost head editor theme').to.have.class('cm-s-xq-light');\n        (0, _chai.expect)((0, _testHelpers.findAll)('#ghost-foot .CodeMirror').length, 'ghost head codemirror element').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('#ghost-foot .CodeMirror'), 'ghost head editor theme').to.have.class('cm-s-xq-light');\n        await (0, _testHelpers.click)('[data-test-save-button]');\n        let [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        let params = JSON.parse(lastRequest.requestBody);\n        (0, _chai.expect)(params.settings.findBy('key', 'codeinjection_head').value).to.equal('');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-save-button]').textContent.trim(), 'save button text').to.equal('Save'); // CMD-S shortcut works\n\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        }); // we've already saved in this test so there's no on-screen indication\n        // that we've had another save, check the request was fired instead\n\n        let [newRequest] = this.server.pretender.handledRequests.slice(-1);\n        params = JSON.parse(newRequest.requestBody);\n        (0, _chai.expect)(params.settings.findBy('key', 'codeinjection_head').value).to.equal('');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-save-button]').textContent.trim(), 'save button text').to.equal('Save');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/design-test\", [\"ember-simple-auth/test-support\", \"@ember/test-helpers\", \"chai\", \"ghost-admin/tests/helpers/file-upload\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_testSupport, _testHelpers, _chai, _fileUpload, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  describe('Acceptance: Settings - Design', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    beforeEach(async function () {\n      let role = this.server.create('role', {\n        name: 'Administrator'\n      });\n      this.server.create('user', {\n        roles: [role]\n      });\n      this.server.loadFixtures('themes');\n      return await (0, _testSupport.authenticateSession)();\n    });\n    it('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/general');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    it('renders with no custom theme settings', async function () {\n      await (0, _visit.visit)('/settings');\n      await (0, _testHelpers.click)('[data-test-nav=\"design\"]');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/design');\n      (0, _chai.expect)(document.title, 'page title').to.equal('Settings - Design - Test Blog'); // side nav menu changes\n\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-menu=\"design\"]'), 'design menu').to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-menu=\"main\"]'), 'main menu').to.not.exist; // side nav defaults to general group open\n\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-toggle=\"general\"]'), 'general toggle').to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav-group=\"general\"]'), 'general form').to.exist; // no other side nav groups exist\n\n      (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-nav-toggle]'), 'no of group toggles').to.have.lengthOf(1);\n      (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-nav-group]'), 'no of groups open').to.have.lengthOf(1); // current theme is shown in nav menu\n\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"current-theme\"]')).to.contain.text('casper - v1.0'); // defaults to \"home\" desktop preview\n\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"desktop-preview\"]')).to.have.class('gh-btn-group-selected');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"mobile-preview\"]')).to.not.have.class('gh-btn-group-selected');\n    });\n    it('renders with custom theme settings');\n    it('can install an official theme', async function () {\n      await (0, _visit.visit)('/settings/design');\n      await (0, _testHelpers.click)('[data-test-nav=\"change-theme\"]');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/design/change-theme');\n      await (0, _testHelpers.click)('[data-test-theme-link=\"Journal\"]');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/design/change-theme/Journal');\n      await (0, _testHelpers.click)('[data-test-button=\"install-theme\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"install-theme\"]'), 'install-theme modal').to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-state=\"confirm\"]'), 'confirm state').to.exist;\n      (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-state]').length, 'state count').to.equal(1);\n      await (0, _testHelpers.click)('[data-test-button=\"confirm-install\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-state=\"installed-no-notes\"]'), 'success state').to.exist;\n      (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-state]').length, 'state count').to.equal(1); // navigates back to design screen in background\n\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/design');\n      await (0, _testHelpers.click)('[data-test-button=\"cancel\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"install-theme\"]')).to.not.exist; // nav menu shows current theme\n\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"current-theme\"]')).to.contain.text('Journal - v0.1');\n    });\n    it('can upload custom theme', async function () {\n      this.server.post('/themes/upload/', function (_ref) {\n        let {\n          themes\n        } = _ref;\n        const theme = themes.create({\n          name: 'custom',\n          package: {\n            name: 'Custom',\n            version: '1.0'\n          }\n        });\n        return {\n          themes: [theme]\n        };\n      });\n      await (0, _visit.visit)('/settings/design/change-theme');\n      await (0, _testHelpers.click)('[data-test-button=\"upload-theme\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"upload-theme\"]'), 'upload-theme modal').to.exist;\n      await (0, _fileUpload.fileUpload)('[data-test-modal=\"upload-theme\"] input[type=\"file\"]', ['test'], {\n        name: 'valid-theme.zip',\n        type: 'application/zip'\n      });\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-state=\"installed-no-notes\"]'), 'success state').to.exist;\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after upload').to.equal('/settings/design/change-theme');\n      await (0, _testHelpers.click)('[data-test-button=\"activate\"]');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after activate').to.equal('/settings/design');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"install-theme\"]')).to.not.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"current-theme\"]')).to.contain.text('custom - v1.0');\n    });\n    it('can change between installed themes');\n    it('can delete installed theme');\n    describe('limits', function () {\n      it('displays upgrade notice when custom themes are not allowed', async function () {\n        this.server.loadFixtures('configs');\n        const config = this.server.db.configs.find(1);\n        config.hostSettings = {\n          limits: {\n            customThemes: {\n              allowlist: ['casper', 'dawn', 'lyra'],\n              error: 'All our official built-in themes are available the Starter plan, if you upgrade to one of our higher tiers you will also be able to edit and upload custom themes for your site.'\n            }\n          }\n        };\n        this.server.db.configs.update(1, config);\n        await (0, _visit.visit)('/settings/design/change-theme');\n        await (0, _testHelpers.click)('[data-test-button=\"upload-theme\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"limits/custom-theme\"]'), 'limits/custom-theme modal').to.exist;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/general-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_ctrlOrCmd, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Settings - General', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/general');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/general');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/general');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/general');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it renders, handles image uploads', async function () {\n        await (0, _visit.visit)('/settings/general'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/general'); // has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Settings - General - Test Blog'); // highlights nav menu\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"settings\"]'), 'highlights nav menu item').to.have.class('active');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"save\"]').textContent.trim(), 'save button text').to.equal('Save settings');\n        await (0, _testHelpers.click)('[data-test-toggle-pub-info]');\n        await (0, _testHelpers.fillIn)('[data-test-title-input]', 'New Blog Title');\n        await (0, _testHelpers.click)('[data-test-button=\"save\"]');\n        (0, _chai.expect)(document.title, 'page title').to.equal('Settings - General - New Blog Title'); // CMD-S shortcut works\n        // -------------------------------------------------------------- //\n\n        await (0, _testHelpers.fillIn)('[data-test-title-input]', 'CMD-S Test');\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        }); // we've already saved in this test so there's no on-screen indication\n        // that we've had another save, check the request was fired instead\n\n        let [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        let params = JSON.parse(lastRequest.requestBody);\n        (0, _chai.expect)(params.settings.findBy('key', 'title').value).to.equal('CMD-S Test');\n      });\n      (0, _mocha.it)('renders timezone selector correctly', async function () {\n        await (0, _visit.visit)('/settings/general');\n        await (0, _testHelpers.click)('[data-test-toggle-timezone]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/general');\n        (0, _chai.expect)((0, _testHelpers.findAll)('#timezone option').length, 'available timezones').to.equal(66);\n        (0, _chai.expect)((0, _testHelpers.find)('#timezone option:checked').textContent.trim()).to.equal('(GMT) UTC');\n        (0, _testHelpers.find)('#timezone option[value=\"Africa/Cairo\"]').selected = true;\n        await (0, _testHelpers.triggerEvent)('#timezone', 'change');\n        await (0, _testHelpers.click)('[data-test-button=\"save\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('#timezone option:checked').textContent.trim()).to.equal('(GMT +2:00) Cairo, Egypt');\n      });\n      (0, _mocha.it)('handles private blog settings correctly', async function () {\n        await (0, _visit.visit)('/settings/general'); // handles private blog settings correctly\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-private-checkbox]').checked, 'isPrivate checkbox').to.be.false;\n        await (0, _testHelpers.click)('[data-test-private-checkbox]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-private-checkbox]').checked, 'isPrivate checkbox').to.be.true;\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-password-input]').length, 'password input').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-password-input]').value, 'password default value').to.not.equal('');\n        await (0, _testHelpers.fillIn)('[data-test-password-input]', '');\n        await (0, _testHelpers.blur)('[data-test-password-input]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-password-error]').textContent.trim(), 'empty password error').to.equal('Password must be supplied');\n        await (0, _testHelpers.fillIn)('[data-test-password-input]', 'asdfg');\n        await (0, _testHelpers.blur)('[data-test-password-input]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-password-error]').textContent.trim(), 'present password error').to.equal('');\n      });\n      (0, _mocha.it)('handles social blog settings correctly', async function () {\n        let testSocialInput = async function (type, input, expectedValue) {\n          let expectedError = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n          await (0, _testHelpers.fillIn)(`[data-test-${type}-input]`, input);\n          await (0, _testHelpers.blur)(`[data-test-${type}-input]`);\n          (0, _chai.expect)((0, _testHelpers.find)(`[data-test-${type}-input]`).value, `${type} value for ${input}`).to.equal(expectedValue);\n          (0, _chai.expect)((0, _testHelpers.find)(`[data-test-${type}-error]`).textContent.trim(), `${type} validation response for ${input}`).to.equal(expectedError);\n          (0, _chai.expect)((0, _testHelpers.find)(`[data-test-${type}-input]`).closest('.form-group').classList.contains('error'), `${type} input should be in error state with '${input}'`).to.equal(!!expectedError);\n        };\n\n        let testFacebookValidation = async function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return testSocialInput('facebook', ...args);\n        };\n\n        let testTwitterValidation = async function () {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          return testSocialInput('twitter', ...args);\n        };\n\n        await (0, _visit.visit)('/settings/general');\n        await (0, _testHelpers.click)('[data-test-toggle-social]'); // validates a facebook url correctly\n        // loads fixtures and performs transform\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-facebook-input]').value, 'initial facebook value').to.equal('https://www.facebook.com/test');\n        await (0, _testHelpers.focus)('[data-test-facebook-input]');\n        await (0, _testHelpers.blur)('[data-test-facebook-input]'); // regression test: we still have a value after the input is\n        // focused and then blurred without any changes\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-facebook-input]').value, 'facebook value after blur with no change').to.equal('https://www.facebook.com/test');\n        await testFacebookValidation('facebook.com/username', 'https://www.facebook.com/username');\n        await testFacebookValidation('testuser', 'https://www.facebook.com/testuser');\n        await testFacebookValidation('ab99', 'https://www.facebook.com/ab99');\n        await testFacebookValidation('page/ab99', 'https://www.facebook.com/page/ab99');\n        await testFacebookValidation('page/*(&*(%%))', 'https://www.facebook.com/page/*(&*(%%))');\n        await testFacebookValidation('facebook.com/pages/some-facebook-page/857469375913?ref=ts', 'https://www.facebook.com/pages/some-facebook-page/857469375913?ref=ts');\n        await testFacebookValidation('https://www.facebook.com/groups/savethecrowninn', 'https://www.facebook.com/groups/savethecrowninn');\n        await testFacebookValidation('http://github.com/username', 'http://github.com/username', 'The URL must be in a format like https://www.facebook.com/yourPage');\n        await testFacebookValidation('http://github.com/pages/username', 'http://github.com/pages/username', 'The URL must be in a format like https://www.facebook.com/yourPage'); // validates a twitter url correctly\n        // loads fixtures and performs transform\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-twitter-input]').value, 'initial twitter value').to.equal('https://twitter.com/test');\n        await (0, _testHelpers.focus)('[data-test-twitter-input]');\n        await (0, _testHelpers.blur)('[data-test-twitter-input]'); // regression test: we still have a value after the input is\n        // focused and then blurred without any changes\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-twitter-input]').value, 'twitter value after blur with no change').to.equal('https://twitter.com/test');\n        await testTwitterValidation('twitter.com/username', 'https://twitter.com/username');\n        await testTwitterValidation('testuser', 'https://twitter.com/testuser');\n        await testTwitterValidation('http://github.com/username', 'https://twitter.com/username');\n        await testTwitterValidation('*(&*(%%))', '*(&*(%%))', 'The URL must be in a format like https://twitter.com/yourUsername');\n        await testTwitterValidation('thisusernamehasmorethan15characters', 'thisusernamehasmorethan15characters', 'Your Username is not a valid Twitter Username');\n      });\n      (0, _mocha.it)('warns when leaving without saving', async function () {\n        await (0, _visit.visit)('/settings/general');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-private-checkbox]').checked, 'private blog checkbox').to.be.false;\n        await (0, _testHelpers.click)('[data-test-toggle-pub-info]');\n        await (0, _testHelpers.fillIn)('[data-test-title-input]', 'New Blog Title');\n        await (0, _testHelpers.click)('[data-test-private-checkbox]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-private-checkbox]').checked, 'private blog checkbox').to.be.true;\n        await (0, _visit.visit)('/settings/staff');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length, 'modal exists').to.equal(1); // Leave without saving\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-leave-button]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff');\n        await (0, _visit.visit)('/settings/general');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/general'); // settings were not saved\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-private-checkbox]').checked, 'private blog checkbox').to.be.false;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-title-input]').textContent.trim(), 'Blog title').to.equal('');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/integrations-test\", [\"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Settings - Integrations - Custom', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.describe)('access permissions', function () {\n      (0, _mocha.beforeEach)(function () {\n        this.server.create('integration', {\n          name: 'Test'\n        });\n      });\n      (0, _mocha.it)('redirects /integrations/ to signin when not authenticated', async function () {\n        await (0, _testSupport.invalidateSession)();\n        await (0, _visit.visit)('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n      });\n      (0, _mocha.it)('redirects /integrations/ to home page when authenticated as contributor', async function () {\n        let role = this.server.create('role', {\n          name: 'Contributor'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _visit.visit)('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n      });\n      (0, _mocha.it)('redirects /integrations/ to home page when authenticated as author', async function () {\n        let role = this.server.create('role', {\n          name: 'Author'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _visit.visit)('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n      });\n      (0, _mocha.it)('redirects /integrations/ to home page when authenticated as editor', async function () {\n        let role = this.server.create('role', {\n          name: 'Editor'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n      });\n      (0, _mocha.it)('redirects /integrations/:id/ to signin when not authenticated', async function () {\n        await (0, _testSupport.invalidateSession)();\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n      });\n      (0, _mocha.it)('redirects /integrations/:id/ to home page when authenticated as contributor', async function () {\n        let role = this.server.create('role', {\n          name: 'Contributor'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n      });\n      (0, _mocha.it)('redirects /integrations/:id/ to home page when authenticated as author', async function () {\n        let role = this.server.create('role', {\n          name: 'Author'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n      });\n      (0, _mocha.it)('redirects /integrations/:id/ to home page when authenticated as editor', async function () {\n        let role = this.server.create('role', {\n          name: 'Editor'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n      });\n    });\n    (0, _mocha.describe)('navigation', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('renders correctly', async function () {\n        await (0, _visit.visit)('/settings/integrations'); // slack is not configured in the fixtures\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-app=\"slack\"] [data-test-app-status]').textContent.trim(), 'slack app status').to.equal('Configure'); // amp is enabled in the fixtures\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-app=\"amp\"] [data-test-app-status]').textContent.trim(), 'amp app status').to.equal('Active');\n      });\n      (0, _mocha.it)('it redirects to Slack when clicking on the grid', async function () {\n        await (0, _visit.visit)('/settings/integrations'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations');\n        await (0, _testHelpers.click)('[data-test-link=\"slack\"]'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/slack');\n      });\n      (0, _mocha.it)('it redirects to AMP when clicking on the grid', async function () {\n        await (0, _visit.visit)('/settings/integrations'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations');\n        await (0, _testHelpers.click)('[data-test-link=\"amp\"]'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/amp');\n      });\n      (0, _mocha.it)('it redirects to Unsplash when clicking on the grid', async function () {\n        await (0, _visit.visit)('/settings/integrations'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations');\n        await (0, _testHelpers.click)('[data-test-link=\"unsplash\"]'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/unsplash');\n      });\n    });\n    (0, _mocha.describe)('custom integrations', function () {\n      (0, _mocha.beforeEach)(async function () {\n        this.server.loadFixtures('configs');\n        let config = this.server.schema.configs.first();\n        config.update({\n          enableDeveloperExperiments: true\n        });\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('handles 404', async function () {\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('error404');\n      });\n      (0, _mocha.it)('can add new integration', async function () {\n        // sanity check\n        (0, _chai.expect)(this.server.db.integrations.length, 'number of integrations in db at start').to.equal(0);\n        (0, _chai.expect)(this.server.db.apiKeys.length, 'number of apiKeys in db at start').to.equal(0); // blank slate\n\n        await (0, _visit.visit)('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-blank=\"custom-integrations\"]'), 'initial blank slate').to.exist; // new integration modal opens/closes\n\n        await (0, _testHelpers.click)('[data-test-button=\"new-integration\"]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking new').to.equal('/settings/integrations/new');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"new-integration\"]'), 'modal after clicking new').to.exist;\n        await (0, _testHelpers.click)('[data-test-button=\"cancel-new-integration\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"new-integration\"]'), 'modal after clicking cancel').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-blank=\"custom-integrations\"]'), 'blank slate after cancelled creation').to.exist; // new integration validations\n\n        await (0, _testHelpers.click)('[data-test-button=\"new-integration\"]');\n        await (0, _testHelpers.click)('[data-test-button=\"create-integration\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"new-integration-name\"]').textContent, 'name error after create with blank field').to.have.string('enter a name');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"new-integration-name\"]', 'Duplicate');\n        await (0, _testHelpers.click)('[data-test-button=\"create-integration\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"new-integration-name\"]').textContent, 'name error after create with duplicate name').to.have.string('already been used'); // successful creation\n\n        await (0, _testHelpers.fillIn)('[data-test-input=\"new-integration-name\"]', 'Test');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"new-integration-name\"]').textContent.trim(), 'name error after typing in field').to.be.empty;\n        await (0, _testHelpers.click)('[data-test-button=\"create-integration\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"new-integration\"]'), 'modal after successful create').to.not.exist;\n        (0, _chai.expect)(this.server.db.integrations.length, 'number of integrations in db after create').to.equal(1); // mirage sanity check\n\n        (0, _chai.expect)(this.server.db.apiKeys.length, 'number of api keys in db after create').to.equal(2);\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after integration creation').to.equal('/settings/integrations/1'); // test navigation back to list then back to new integration\n\n        await (0, _testHelpers.click)('[data-test-link=\"integrations-back\"]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking \"Back\"').to.equal('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-blank=\"custom-integrations\"]'), 'blank slate after creation').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-custom-integration]').length, 'number of custom integrations after creation').to.equal(1);\n        await (0, _testHelpers.click)(`[data-test-integration=\"1\"]`);\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking integration in list').to.equal('/settings/integrations/1');\n      });\n\n      _mocha.it.skip('can manage an integration', async function () {\n        this.server.create('integration');\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'initial URL').to.equal('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-screen-title]').textContent, 'screen title').to.have.string('Integration 1'); // fields have expected values\n        // TODO: add test for logo\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"name\"]').value, 'initial name value').to.equal('Integration 1');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"description\"]').value, 'initial description value').to.equal('');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"content-key\"]'), 'content key text').to.have.trimmed.text('integration-1_content_key-12345');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"admin-key\"]'), 'admin key text').to.have.trimmed.text('integration-1_admin_key-12345');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"api-url\"]'), 'api url text').to.have.trimmed.text(window.location.origin); // it can modify integration fields and has validation\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"name\"]').textContent.trim(), 'initial name error').to.be.empty;\n        await (0, _testHelpers.fillIn)('[data-test-input=\"name\"]', '');\n        await await (0, _testHelpers.blur)('[data-test-input=\"name\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"name\"]').textContent, 'name validation for blank string').to.have.string('enter a name');\n        await (0, _testHelpers.click)('[data-test-button=\"save\"]');\n        (0, _chai.expect)(this.server.schema.integrations.first().name, 'db integration name after failed save').to.equal('Integration 1');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"name\"]', 'Test Integration');\n        await await (0, _testHelpers.blur)('[data-test-input=\"name\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"name\"]').textContent.trim(), 'name error after valid entry').to.be.empty;\n        await (0, _testHelpers.fillIn)('[data-test-input=\"description\"]', 'Description for Test Integration');\n        await await (0, _testHelpers.blur)('[data-test-input=\"description\"]');\n        await (0, _testHelpers.click)('[data-test-button=\"save\"]'); // changes are reflected in the integrations list\n\n        await (0, _testHelpers.click)('[data-test-link=\"integrations-back\"]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after saving and clicking \"back\"').to.equal('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-integration=\"1\"] [data-test-text=\"name\"]').textContent.trim(), 'integration name after save').to.equal('Test Integration');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-integration=\"1\"] [data-test-text=\"description\"]').textContent.trim(), 'integration description after save').to.equal('Description for Test Integration');\n        await (0, _testHelpers.click)('[data-test-integration=\"1\"]'); // warns of unsaved changes when leaving\n\n        await (0, _testHelpers.fillIn)('[data-test-input=\"name\"]', 'Unsaved test');\n        await (0, _testHelpers.click)('[data-test-link=\"integrations-back\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"unsaved-settings\"]'), 'modal shown when navigating with unsaved changes').to.exist;\n        await (0, _testHelpers.click)('[data-test-stay-button]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"unsaved-settings\"]'), 'modal is closed after clicking \"stay\"').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking \"stay\"').to.equal('/settings/integrations/1');\n        await (0, _testHelpers.click)('[data-test-link=\"integrations-back\"]');\n        await (0, _testHelpers.click)('[data-test-leave-button]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"unsaved-settings\"]'), 'modal is closed after clicking \"leave\"').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking \"leave\"').to.equal('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-integration=\"1\"] [data-test-text=\"name\"]').textContent.trim(), 'integration name after leaving unsaved changes').to.equal('Test Integration');\n      });\n\n      (0, _mocha.it)('can manage an integration\\'s webhooks', async function () {\n        this.server.create('integration');\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-webhooks-blank-slate]')).to.exist; // open new webhook modal\n\n        await (0, _testHelpers.click)('[data-test-link=\"add-webhook\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"webhook-form\"]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"webhook-form\"] [data-test-text=\"title\"]').textContent).to.have.string('New webhook'); // can cancel new webhook\n\n        await (0, _testHelpers.click)('[data-test-button=\"cancel-webhook\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"webhook-form\"]')).to.not.exist; // create new webhook\n\n        await (0, _testHelpers.click)('[data-test-link=\"add-webhook\"]');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"webhook-name\"]', 'First webhook');\n        await (0, _testHelpers.fillIn)('[data-test-select=\"webhook-event\"]', 'site.changed');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"webhook-targetUrl\"]', 'https://example.com/first-webhook');\n        await (0, _testHelpers.click)('[data-test-button=\"save-webhook\"]'); // modal closed and 1 webhook listed with correct details\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"webhook-form\"]')).to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-webhook-row]')).to.exist;\n        let row = (0, _testHelpers.find)('[data-test-webhook-row=\"1\"]');\n        (0, _chai.expect)(row.querySelector('[data-test-text=\"name\"]').textContent).to.have.string('First webhook');\n        (0, _chai.expect)(row.querySelector('[data-test-text=\"event\"]').textContent).to.have.string('Site changed (rebuild)');\n        (0, _chai.expect)(row.querySelector('[data-test-text=\"targetUrl\"]').textContent).to.have.string('https://example.com/first-webhook');\n        (0, _chai.expect)(row.querySelector('[data-test-text=\"last-triggered\"]').textContent).to.have.string('Not triggered'); // click edit webhook link\n\n        await (0, _testHelpers.click)('[data-test-webhook-row=\"1\"] [data-test-link=\"edit-webhook\"]'); // modal appears and has correct title\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"webhook-form\"]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"webhook-form\"] [data-test-text=\"title\"]').textContent).to.have.string('Edit webhook');\n      }); // test to ensure the `value=description` passed to `gh-text-input` is `readonly`\n\n      (0, _mocha.it)('doesn\\'t show unsaved changes modal after placing focus on description field', async function () {\n        this.server.create('integration');\n        await (0, _visit.visit)('/settings/integrations/1');\n        await (0, _testHelpers.click)('[data-test-input=\"description\"]');\n        await await (0, _testHelpers.blur)('[data-test-input=\"description\"]');\n        await (0, _testHelpers.click)('[data-test-link=\"integrations-back\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"unsaved-settings\"]'), 'unsaved changes modal is not shown').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/settings/integrations');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/labs-test\", [\"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ghost-admin/tests/helpers/file-upload\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_testSupport, _mocha, _testHelpers, _chai, _fileUpload, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  // import wait from 'ember-test-helpers/wait';\n  // import {timeout} from 'ember-concurrency';\n  (0, _mocha.describe)('Acceptance: Settings - Labs', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/labs');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/labs');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/labs');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/labs');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n\n      _mocha.it.skip('it renders, loads modals correctly', async function () {\n        await (0, _visit.visit)('/settings/labs'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/labs'); // has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Settings - Labs - Test Blog'); // highlights nav menu\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"labs\"]'), 'highlights nav menu item').to.have.class('active');\n        await (0, _testHelpers.click)('#settings-resetdb .js-delete');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal .modal-content').length, 'modal element').to.equal(1);\n        await (0, _testHelpers.click)('.fullscreen-modal .modal-footer .gh-btn');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length, 'modal element').to.equal(0);\n      });\n\n      (0, _mocha.it)('can upload/download redirects', async function () {\n        await (0, _visit.visit)('/settings/labs'); // successful upload\n\n        this.server.post('/redirects/upload/', {}, 200);\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"redirects\"] input', ['test'], {\n          name: 'redirects.json',\n          type: 'application/json'\n        }); // TODO: tests for the temporary success/failure state have been\n        // disabled because they were randomly failing\n        // this should be half-way through button reset timeout\n        // await timeout(50);\n        //\n        // // shows success button\n        // let buttons = findAll('[data-test-button=\"upload-redirects\"]');\n        // expect(buttons.length, 'no of success buttons').to.equal(1);\n        // expect(\n        //     buttons[0],\n        //     'success button is green'\n        // ).to.have.class('gh-btn-green);\n        // expect(\n        //     button.textContent,\n        //     'success button text'\n        // ).to.have.string('Uploaded');\n        //\n        // await wait();\n        // returned to normal button\n\n        let buttons = (0, _testHelpers.findAll)('[data-test-button=\"upload-redirects\"]');\n        (0, _chai.expect)(buttons.length, 'no of post-success buttons').to.equal(1);\n        (0, _chai.expect)(buttons[0], 'post-success button doesn\\'t have success class').to.not.have.class('gh-btn-green');\n        (0, _chai.expect)(buttons[0].textContent, 'post-success button text').to.have.string('Upload redirects'); // failed upload\n\n        this.server.post('/redirects/upload/', {\n          errors: [{\n            type: 'BadRequestError',\n            message: 'Test failure message'\n          }]\n        }, 400);\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"redirects\"] input', ['test'], {\n          name: 'redirects-bad.json',\n          type: 'application/json'\n        }); // TODO: tests for the temporary success/failure state have been\n        // disabled because they were randomly failing\n        // this should be half-way through button reset timeout\n        // await timeout(50);\n        //\n        // shows failure button\n        // buttons = findAll('[data-test-button=\"upload-redirects\"]');\n        // expect(buttons.length, 'no of failure buttons').to.equal(1);\n        // expect(\n        //     buttons[0],\n        //     'failure button is red'\n        // ).to.have.class('gh-btn-red);\n        // expect(\n        //     buttons[0].textContent,\n        //     'failure button text'\n        // ).to.have.string('Upload Failed');\n        //\n        // await wait();\n        // shows error message\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"redirects\"]').textContent.trim(), 'upload error text').to.have.string('Test failure message'); // returned to normal button\n\n        buttons = (0, _testHelpers.findAll)('[data-test-button=\"upload-redirects\"]');\n        (0, _chai.expect)(buttons.length, 'no of post-failure buttons').to.equal(1);\n        (0, _chai.expect)(buttons[0], 'post-failure button doesn\\'t have failure class').to.not.have.class('gh-btn-red');\n        (0, _chai.expect)(buttons[0].textContent, 'post-failure button text').to.have.string('Upload redirects'); // successful upload clears error\n\n        this.server.post('/redirects/upload/', {}, 200);\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"redirects\"] input', ['test'], {\n          name: 'redirects-bad.json',\n          type: 'application/json'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"redirects\"]')).to.not.exist; // can download redirects.json\n\n        await (0, _testHelpers.click)('[data-test-link=\"download-redirects\"]');\n        let iframe = document.querySelector('#iframeDownload');\n        (0, _chai.expect)(iframe.getAttribute('src')).to.have.string('/redirects/download/');\n      });\n      (0, _mocha.it)('can upload/download routes.yaml', async function () {\n        await (0, _visit.visit)('/settings/labs'); // successful upload\n\n        this.server.post('/settings/routes/yaml/', {}, 200);\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"routes\"] input', ['test'], {\n          name: 'routes.yaml',\n          type: 'application/x-yaml'\n        }); // TODO: tests for the temporary success/failure state have been\n        // disabled because they were randomly failing\n        // this should be half-way through button reset timeout\n        // await timeout(50);\n        //\n        // // shows success button\n        // let button = find('[data-test-button=\"upload-routes\"]');\n        // expect(button.length, 'no of success buttons').to.equal(1);\n        // expect(\n        //     button.hasClass('gh-btn-green'),\n        //     'success button is green'\n        // ).to.be.true;\n        // expect(\n        //     button.text().trim(),\n        //     'success button text'\n        // ).to.have.string('Uploaded');\n        //\n        // await wait();\n        // returned to normal button\n\n        let buttons = (0, _testHelpers.findAll)('[data-test-button=\"upload-routes\"]');\n        (0, _chai.expect)(buttons.length, 'no of post-success buttons').to.equal(1);\n        (0, _chai.expect)(buttons[0], 'routes post-success button doesn\\'t have success class').to.not.have.class('gh-btn-green');\n        (0, _chai.expect)(buttons[0].textContent, 'routes post-success button text').to.have.string('Upload routes YAML'); // failed upload\n\n        this.server.post('/settings/routes/yaml/', {\n          errors: [{\n            type: 'BadRequestError',\n            message: 'Test failure message'\n          }]\n        }, 400);\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"routes\"] input', ['test'], {\n          name: 'routes-bad.yaml',\n          type: 'application/x-yaml'\n        }); // TODO: tests for the temporary success/failure state have been\n        // disabled because they were randomly failing\n        // this should be half-way through button reset timeout\n        // await timeout(50);\n        //\n        // shows failure button\n        // button = find('[data-test-button=\"upload-routes\"]');\n        // expect(button.length, 'no of failure buttons').to.equal(1);\n        // expect(\n        //     button.hasClass('gh-btn-red'),\n        //     'failure button is red'\n        // ).to.be.true;\n        // expect(\n        //     button.text().trim(),\n        //     'failure button text'\n        // ).to.have.string('Upload Failed');\n        //\n        // await wait();\n        // shows error message\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"routes\"]').textContent, 'routes upload error text').to.have.string('Test failure message'); // returned to normal button\n\n        buttons = (0, _testHelpers.findAll)('[data-test-button=\"upload-routes\"]');\n        (0, _chai.expect)(buttons.length, 'no of post-failure buttons').to.equal(1);\n        (0, _chai.expect)(buttons[0], 'routes post-failure button doesn\\'t have failure class').to.not.have.class('gh-btn-red');\n        (0, _chai.expect)(buttons[0].textContent, 'routes post-failure button text').to.have.string('Upload routes YAML'); // successful upload clears error\n\n        this.server.post('/settings/routes/yaml/', {}, 200);\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"routes\"] input', ['test'], {\n          name: 'routes-good.yaml',\n          type: 'application/x-yaml'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"routes\"]')).to.not.exist; // can download redirects.json\n\n        await (0, _testHelpers.click)('[data-test-link=\"download-routes\"]');\n        let iframe = document.querySelector('#iframeDownload');\n        (0, _chai.expect)(iframe.getAttribute('src')).to.have.string('/settings/routes/yaml/');\n      });\n    });\n    (0, _mocha.describe)('When logged in as Owner', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Owner'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n\n      _mocha.it.skip('sets the mailgunBaseUrl to the default', async function () {\n        await (0, _visit.visit)('/settings/members');\n        await (0, _testHelpers.fillIn)('[data-test-mailgun-api-key-input]', 'i_am_an_api_key');\n        await (0, _testHelpers.fillIn)('[data-test-mailgun-domain-input]', 'https://domain.tld');\n        await (0, _testHelpers.click)('[data-test-button=\"save-members-settings\"]');\n        let [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        let params = JSON.parse(lastRequest.requestBody);\n        (0, _chai.expect)(params.settings.findBy('key', 'mailgun_base_url').value).not.to.equal(null);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/navigation-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_ctrlOrCmd, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  // simulate jQuery's `:visible` pseudo-selector\n  function withText(elements) {\n    return Array.from(elements).filter(elem => elem.textContent.trim() !== '');\n  }\n\n  (0, _mocha.describe)('Acceptance: Settings - Navigation', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('can visit /settings/navigation', async function () {\n        await (0, _visit.visit)('/settings/navigation');\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('settings.navigation');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-save-button]').textContent.trim(), 'save button text').to.equal('Save'); // fixtures contain two nav items, check for four rows as we\n        // should have one extra that's blank for each navigation section\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-navitem]').length, 'navigation items count').to.equal(4);\n      });\n      (0, _mocha.it)('saves navigation settings', async function () {\n        await (0, _visit.visit)('/settings/navigation');\n        await (0, _testHelpers.fillIn)('#settings-navigation [data-test-navitem=\"0\"] [data-test-input=\"label\"]', 'Test');\n        await (0, _testHelpers.typeIn)('#settings-navigation [data-test-navitem=\"0\"] [data-test-input=\"url\"]', '/test');\n        await (0, _testHelpers.click)('[data-test-save-button]');\n        let [navSetting] = this.server.db.settings.where({\n          key: 'navigation'\n        });\n        (0, _chai.expect)(navSetting.value).to.equal('[{\"label\":\"Test\",\"url\":\"/test/\"},{\"label\":\"About\",\"url\":\"/about\"}]'); // don't test against .error directly as it will pick up failed\n        // tests \"pre.error\" elements\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('span.error').length, 'error messages count').to.equal(0);\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length, 'alerts count').to.equal(0);\n        (0, _chai.expect)(withText((0, _testHelpers.findAll)('[data-test-error]')).length, 'validation errors count').to.equal(0);\n      });\n      (0, _mocha.it)('validates new item correctly on save', async function () {\n        await (0, _visit.visit)('/settings/navigation');\n        await (0, _testHelpers.click)('[data-test-save-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('#settings-navigation [data-test-navitem]').length, 'number of nav items after saving with blank new item').to.equal(3);\n        await (0, _testHelpers.fillIn)('#settings-navigation [data-test-navitem=\"new\"] [data-test-input=\"label\"]', 'Test');\n        await (0, _testHelpers.fillIn)('#settings-navigation [data-test-navitem=\"new\"] [data-test-input=\"url\"]', '');\n        await (0, _testHelpers.typeIn)('#settings-navigation [data-test-navitem=\"new\"] [data-test-input=\"url\"]', 'http://invalid domain/');\n        await (0, _testHelpers.click)('[data-test-save-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('#settings-navigation [data-test-navitem]').length, 'number of nav items after saving with invalid new item').to.equal(3);\n        (0, _chai.expect)(withText((0, _testHelpers.findAll)('#settings-navigation [data-test-navitem=\"new\"] [data-test-error]')).length, 'number of invalid fields in new item').to.equal(1);\n      });\n      (0, _mocha.it)('clears unsaved settings when navigating away but warns with a confirmation dialog', async function () {\n        await (0, _visit.visit)('/settings/navigation');\n        await (0, _testHelpers.fillIn)('[data-test-navitem=\"0\"] [data-test-input=\"label\"]', 'Test');\n        await (0, _testHelpers.blur)('[data-test-navitem=\"0\"] [data-test-input=\"label\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"0\"] [data-test-input=\"label\"]').value).to.equal('Test');\n        await (0, _visit.visit)('/settings/code-injection');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length, 'modal exists').to.equal(1); // Leave without saving\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-leave-button]'), 'leave without saving';\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/code-injection');\n        await (0, _visit.visit)('/settings/navigation');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"0\"] [data-test-input=\"label\"]').value).to.equal('Home');\n      });\n      (0, _mocha.it)('can add and remove items', async function () {\n        await (0, _visit.visit)('/settings/navigation');\n        await (0, _testHelpers.click)('#settings-navigation .gh-blognav-add');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"new\"] [data-test-error=\"label\"]').textContent.trim(), 'blank label has validation error').to.not.be.empty;\n        await (0, _testHelpers.fillIn)('[data-test-navitem=\"new\"] [data-test-input=\"label\"]', '');\n        await (0, _testHelpers.typeIn)('[data-test-navitem=\"new\"] [data-test-input=\"label\"]', 'New');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"new\"] [data-test-error=\"label\"]').textContent.trim(), 'label validation is visible after typing').to.be.empty;\n        await (0, _testHelpers.fillIn)('[data-test-navitem=\"new\"] [data-test-input=\"url\"]', '');\n        await (0, _testHelpers.typeIn)('[data-test-navitem=\"new\"] [data-test-input=\"url\"]', '/new');\n        await (0, _testHelpers.blur)('[data-test-navitem=\"new\"] [data-test-input=\"url\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"new\"] [data-test-error=\"url\"]').textContent.trim(), 'url validation is visible after typing').to.be.empty;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"new\"] [data-test-input=\"url\"]').value).to.equal(`${window.location.origin}/new/`);\n        await (0, _testHelpers.click)('.gh-blognav-add');\n        (0, _chai.expect)((0, _testHelpers.findAll)('#settings-navigation [data-test-navitem]').length, 'number of nav items after successful add').to.equal(4);\n        (0, _chai.expect)((0, _testHelpers.find)('#settings-navigation [data-test-navitem=\"new\"] [data-test-input=\"label\"]').value, 'new item label value after successful add').to.be.empty;\n        (0, _chai.expect)((0, _testHelpers.find)('#settings-navigation [data-test-navitem=\"new\"] [data-test-input=\"url\"]').value, 'new item url value after successful add').to.equal(`${window.location.origin}/`);\n        (0, _chai.expect)(withText((0, _testHelpers.findAll)('[data-test-navitem] [data-test-error]')).length, 'number or validation errors shown after successful add').to.equal(0);\n        await (0, _testHelpers.click)('#settings-navigation [data-test-navitem=\"0\"] .gh-blognav-delete');\n        (0, _chai.expect)((0, _testHelpers.findAll)('#settings-navigation [data-test-navitem]').length, 'number of nav items after successful remove').to.equal(3); // CMD-S shortcut works\n\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        });\n        let [navSetting] = this.server.db.settings.where({\n          key: 'navigation'\n        });\n        (0, _chai.expect)(navSetting.value).to.equal('[{\"label\":\"About\",\"url\":\"/about\"},{\"label\":\"New\",\"url\":\"/new/\"}]');\n      });\n      (0, _mocha.it)('can also add and remove items from seconday nav', async function () {\n        await (0, _visit.visit)('/settings/navigation');\n        await (0, _testHelpers.click)('#secondary-navigation .gh-blognav-add');\n        (0, _chai.expect)((0, _testHelpers.find)('#secondary-navigation [data-test-navitem=\"new\"] [data-test-error=\"label\"]').textContent.trim(), 'blank label has validation error').to.not.be.empty;\n        await (0, _testHelpers.fillIn)('#secondary-navigation [data-test-navitem=\"new\"] [data-test-input=\"label\"]', '');\n        await (0, _testHelpers.typeIn)('#secondary-navigation [data-test-navitem=\"new\"] [data-test-input=\"label\"]', 'Foo');\n        (0, _chai.expect)((0, _testHelpers.find)('#secondary-navigation [data-test-navitem=\"new\"] [data-test-error=\"label\"]').textContent.trim(), 'label validation is visible after typing').to.be.empty;\n        await (0, _testHelpers.fillIn)('#secondary-navigation [data-test-navitem=\"new\"] [data-test-input=\"url\"]', '');\n        await (0, _testHelpers.typeIn)('#secondary-navigation [data-test-navitem=\"new\"] [data-test-input=\"url\"]', '/bar');\n        await (0, _testHelpers.blur)('#secondary-navigation [data-test-navitem=\"new\"] [data-test-input=\"url\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('#secondary-navigation [data-test-navitem=\"new\"] [data-test-error=\"url\"]').textContent.trim(), 'url validation is visible after typing').to.be.empty;\n        (0, _chai.expect)((0, _testHelpers.find)('#secondary-navigation [data-test-navitem=\"new\"] [data-test-input=\"url\"]').value).to.equal(`${window.location.origin}/bar/`);\n        await (0, _testHelpers.click)('[data-test-save-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('#secondary-navigation [data-test-navitem]').length, 'number of nav items after successful add').to.equal(2);\n        (0, _chai.expect)((0, _testHelpers.find)('#secondary-navigation [data-test-navitem=\"new\"] [data-test-input=\"label\"]').value, 'new item label value after successful add').to.be.empty;\n        (0, _chai.expect)((0, _testHelpers.find)('#secondary-navigation [data-test-navitem=\"new\"] [data-test-input=\"url\"]').value, 'new item url value after successful add').to.equal(`${window.location.origin}/`);\n        (0, _chai.expect)(withText((0, _testHelpers.findAll)('#secondary-navigation [data-test-navitem] [data-test-error]')).length, 'number or validation errors shown after successful add').to.equal(0);\n        let [navSetting] = this.server.db.settings.where({\n          key: 'secondary_navigation'\n        });\n        (0, _chai.expect)(navSetting.value).to.equal('[{\"label\":\"Foo\",\"url\":\"/bar/\"}]');\n        await (0, _testHelpers.click)('#secondary-navigation [data-test-navitem=\"0\"] .gh-blognav-delete');\n        (0, _chai.expect)((0, _testHelpers.findAll)('#secondary-navigation [data-test-navitem]').length, 'number of nav items after successful remove').to.equal(1); // CMD-S shortcut works\n\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        });\n        [navSetting] = this.server.db.settings.where({\n          key: 'secondary_navigation'\n        });\n        (0, _chai.expect)(navSetting.value).to.equal('[]');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/slack-test\", [\"ember-cli-mirage\", \"ghost-admin/utils/ctrl-or-cmd\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_emberCliMirage, _ctrlOrCmd, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Settings - Integrations - Slack', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/integrations/slack');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/slack');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/slack');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/slack');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it validates and saves slack settings properly', async function () {\n        await (0, _visit.visit)('/settings/integrations/slack'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/slack');\n        await (0, _testHelpers.fillIn)('[data-test-slack-url-input]', 'notacorrecturl');\n        await (0, _testHelpers.click)('[data-test-save-button]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"slack-url\"]').textContent.trim(), 'inline validation response').to.equal('The URL must be in a format like https://hooks.slack.com/services/<your personal key>'); // CMD-S shortcut works\n\n        await (0, _testHelpers.fillIn)('[data-test-slack-url-input]', 'https://hooks.slack.com/services/1275958430');\n        await (0, _testHelpers.fillIn)('[data-test-slack-username-input]', 'SlackBot');\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        });\n        let [newRequest] = this.server.pretender.handledRequests.slice(-1);\n        let params = JSON.parse(newRequest.requestBody);\n        let [result] = JSON.parse(params.settings.findBy('key', 'slack').value);\n        (0, _chai.expect)(result.url).to.equal('https://hooks.slack.com/services/1275958430');\n        (0, _chai.expect)(result.username).to.equal('SlackBot');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"slack-url\"]'), 'inline validation response').to.not.exist;\n        await (0, _testHelpers.fillIn)('[data-test-slack-url-input]', 'https://hooks.slack.com/services/1275958430');\n        await (0, _testHelpers.click)('[data-test-send-notification-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-notification').length, 'number of notifications').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"slack-url\"]'), 'inline validation response').to.not.exist;\n        this.server.put('/settings/', function () {\n          return new _emberCliMirage.default.Response(422, {}, {\n            errors: [{\n              type: 'ValidationError',\n              message: 'Test error'\n            }]\n          });\n        });\n        await (0, _testHelpers.click)('.gh-notification .gh-notification-close');\n        await (0, _testHelpers.click)('[data-test-send-notification-button]'); // we shouldn't try to send the test request if the save fails\n\n        let [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        (0, _chai.expect)(lastRequest.url).to.not.match(/\\/slack\\/test/);\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-notification').length, 'check slack notification after api validation error').to.equal(0);\n      });\n      (0, _mocha.it)('warns when leaving without saving', async function () {\n        await (0, _visit.visit)('/settings/integrations/slack'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/slack');\n        await (0, _testHelpers.fillIn)('[data-test-slack-url-input]', 'https://hooks.slack.com/services/1275958430');\n        await (0, _testHelpers.blur)('[data-test-slack-url-input]');\n        await (0, _visit.visit)('/settings');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length, 'modal exists').to.equal(1); // Leave without saving\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-leave-button]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings');\n        await (0, _visit.visit)('/settings/integrations/slack');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/slack'); // settings were not saved\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-slack-url-input]').textContent.trim(), 'Slack Webhook URL').to.equal('');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/tags-test\", [\"ghost-admin/utils/window-proxy\", \"ember-cli-mirage\", \"mocha\", \"ember-simple-auth/test-support\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ember-concurrency\", \"ghost-admin/tests/helpers/visit\"], function (_windowProxy, _emberCliMirage, _mocha, _testSupport, _testHelpers, _chai, _emberMocha, _testSupport2, _emberConcurrency, _visit) {\n  \"use strict\";\n\n  // Grabbed from keymaster's testing code because Ember's `keyEvent` helper\n  // is for some reason not triggering the events in a way that keymaster detects:\n  // https://github.com/madrobby/keymaster/blob/master/test/keymaster.html#L31\n  const modifierMap = {\n    16: 'shiftKey',\n    18: 'altKey',\n    17: 'ctrlKey',\n    91: 'metaKey'\n  };\n\n  let keydown = function (code, modifiers, el) {\n    let event = document.createEvent('Event');\n    event.initEvent('keydown', true, true);\n    event.keyCode = code;\n\n    if (modifiers && modifiers.length > 0) {\n      for (let i in modifiers) {\n        event[modifierMap[modifiers[i]]] = true;\n      }\n    }\n\n    (el || document).dispatchEvent(event);\n  };\n\n  let keyup = function (code, el) {\n    let event = document.createEvent('Event');\n    event.initEvent('keyup', true, true);\n    event.keyCode = code;\n    (el || document).dispatchEvent(event);\n  };\n\n  _mocha.describe.skip('Acceptance: Tags', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/tags');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/design');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/design');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff/test-user');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      let newLocation, originalReplaceState;\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        originalReplaceState = _windowProxy.default.replaceState;\n\n        _windowProxy.default.replaceState = function (params, title, url) {\n          newLocation = url;\n        };\n\n        newLocation = undefined;\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.afterEach)(function () {\n        _windowProxy.default.replaceState = originalReplaceState;\n      });\n      (0, _mocha.it)('it renders, can be navigated, can edit, create & delete tags', async function () {\n        let tag1 = this.server.create('tag');\n        let tag2 = this.server.create('tag');\n        await (0, _visit.visit)('/tags'); // it redirects to first tag\n        // expect(currentURL(), 'currentURL').to.equal(`/tags/${tag1.slug}`);\n        // it doesn't redirect to first tag\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/tags'); // it has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Tags - Test Blog'); // it highlights nav menu\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"tags\"]'), 'highlights nav menu item').to.have.class('active'); // it lists all tags\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.tags-list .gh-tags-list-item').length, 'tag list count').to.equal(2);\n        let tag = (0, _testHelpers.find)('.tags-list .gh-tags-list-item');\n        (0, _chai.expect)(tag.querySelector('.gh-tag-list-name').textContent, 'tag list item title').to.equal(tag1.name); // it highlights selected tag\n        // expect(find(`a[href=\"/ghost/tags/${tag1.slug}\"]`), 'highlights selected tag')\n        //     .to.have.class('active');\n\n        await (0, _visit.visit)(`/tags/${tag1.slug}`); // second wait is needed for the tag details to settle\n        // it shows selected tag form\n        // expect(find('.tag-settings-pane h4').textContent, 'settings pane title')\n        //     .to.equal('Tag settings');\n\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-tag-basic-settings-form input[name=\"name\"]').value, 'loads correct tag into form').to.equal(tag1.name); // click the second tag in the list\n        // let tagEditButtons = findAll('.tag-edit-button');\n        // await click(tagEditButtons[tagEditButtons.length - 1]);\n        // it navigates to selected tag\n        // expect(currentURL(), 'url after clicking tag').to.equal(`/tags/${tag2.slug}`);\n        // it highlights selected tag\n        // expect(find(`a[href=\"/ghost/tags/${tag2.slug}\"]`), 'highlights selected tag')\n        //     .to.have.class('active');\n        // it shows selected tag form\n        // expect(find('.tag-settings-pane input[name=\"name\"]').value, 'loads correct tag into form')\n        //     .to.equal(tag2.name);\n        // simulate up arrow press\n\n        Ember.run(() => {\n          keydown(38);\n          keyup(38);\n        });\n        await (0, _testHelpers.settled)(); // it navigates to previous tag\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after keyboard up arrow').to.equal(`/tags/${tag1.slug}`); // it highlights selected tag\n        // expect(find(`a[href=\"/ghost/tags/${tag1.slug}\"]`), 'selects previous tag')\n        //     .to.have.class('active');\n        // simulate down arrow press\n\n        Ember.run(() => {\n          keydown(40);\n          keyup(40);\n        });\n        await (0, _testHelpers.settled)(); // it navigates to previous tag\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after keyboard down arrow').to.equal(`/tags/${tag2.slug}`); // it highlights selected tag\n        // expect(find(`a[href=\"/ghost/tags/${tag2.slug}\"]`), 'selects next tag')\n        //     .to.have.class('active');\n        // trigger save\n\n        await (0, _testHelpers.fillIn)('.tag-settings-pane input[name=\"name\"]', 'New Name');\n        await (0, _testHelpers.blur)('.tag-settings-pane input[name=\"name\"]'); // extra timeout needed for Travis - sometimes it doesn't update\n        // quick enough and an extra wait() call doesn't help\n\n        await (0, _emberConcurrency.timeout)(100); // check we update with the data returned from the server\n\n        let tags = (0, _testHelpers.findAll)('.settings-tags .settings-tag');\n        tag = tags[0];\n        (0, _chai.expect)(tag.querySelector('.tag-title').textContent, 'tag list updates on save').to.equal('New Name');\n        (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane input[name=\"name\"]').value, 'settings form updates on save').to.equal('New Name'); // start new tag\n\n        await (0, _testHelpers.click)('.view-actions .gh-btn-green'); // it navigates to the new tag route\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'new tag URL').to.equal('/tags/new'); // it displays the new tag form\n\n        (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane h4').textContent, 'settings pane title').to.equal('New tag'); // all fields start blank\n\n        (0, _testHelpers.findAll)('.tag-settings-pane input, .tag-settings-pane textarea').forEach(function (elem) {\n          (0, _chai.expect)(elem.value, `input field for ${elem.getAttribute('name')}`).to.be.empty;\n        }); // save new tag\n\n        await (0, _testHelpers.fillIn)('.tag-settings-pane input[name=\"name\"]', 'New tag');\n        await (0, _testHelpers.blur)('.tag-settings-pane input[name=\"name\"]'); // extra timeout needed for FF on Linux - sometimes it doesn't update\n        // quick enough, especially on Travis, and an extra wait() call\n        // doesn't help\n\n        await (0, _emberConcurrency.timeout)(100); // it redirects to the new tag's URL\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'URL after tag creation').to.equal('/tags/new-tag'); // it adds the tag to the list and selects\n\n        tags = (0, _testHelpers.findAll)('.settings-tags .settings-tag');\n        tag = tags[1]; // second tag in list due to alphabetical ordering\n\n        (0, _chai.expect)(tags.length, 'tag list count after creation').to.equal(3); // new tag will be second in the list due to alphabetical sorting\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.settings-tags .settings-tag')[1].querySelector('.tag-title').textContent.trim(), 'new tag list item title');\n        (0, _chai.expect)(tag.querySelector('.tag-title').textContent, 'new tag list item title').to.equal('New tag');\n        (0, _chai.expect)((0, _testHelpers.find)('a[href=\"/ghost/tags/new-tag\"]'), 'highlights new tag').to.have.class('active'); // delete tag\n\n        await (0, _testHelpers.click)('.settings-menu-delete-button');\n        await (0, _testHelpers.click)('.fullscreen-modal .gh-btn-red'); // it redirects to the first tag\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'URL after tag deletion').to.equal(`/tags/${tag1.slug}`); // it removes the tag from the list\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.settings-tags .settings-tag').length, 'tag list count after deletion').to.equal(2);\n      }); // TODO: Unskip and fix\n      // skipped because it was failing most of the time on Travis\n      // see https://github.com/TryGhost/Ghost/issues/8805\n\n      _mocha.it.skip('loads tag via slug when accessed directly', async function () {\n        this.server.createList('tag', 2);\n        await (0, _visit.visit)('/tags/tag-1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'URL after direct load').to.equal('/tags/tag-1'); // it loads all other tags\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.settings-tags .settings-tag').length, 'tag list count after direct load').to.equal(2); // selects tag in list\n\n        (0, _chai.expect)((0, _testHelpers.find)('a[href=\"/ghost/tags/tag-1\"]').classList.contains('active'), 'highlights requested tag').to.be.true; // shows requested tag in settings pane\n\n        (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane input[name=\"name\"]').value, 'loads correct tag into form').to.equal('Tag 1');\n      });\n\n      (0, _mocha.it)('shows the internal tag label', async function () {\n        this.server.create('tag', {\n          name: '#internal-tag',\n          slug: 'hash-internal-tag',\n          visibility: 'internal'\n        });\n        await (0, _visit.visit)('tags/');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/tags/hash-internal-tag');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.settings-tags .settings-tag').length, 'tag list count').to.equal(1);\n        let tag = (0, _testHelpers.find)('.settings-tags .settings-tag');\n        (0, _chai.expect)(tag.querySelectorAll('.label.label-blue').length, 'internal tag label').to.equal(1);\n        (0, _chai.expect)(tag.querySelector('.label.label-blue').textContent.trim(), 'internal tag label text').to.equal('internal');\n      });\n      (0, _mocha.it)('updates the URL when slug changes', async function () {\n        this.server.createList('tag', 2);\n        await (0, _visit.visit)('/tags/tag-1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'URL after direct load').to.equal('/tags/tag-1'); // update the slug\n\n        await (0, _testHelpers.fillIn)('.tag-settings-pane input[name=\"slug\"]', 'test');\n        await (0, _testHelpers.blur)('.tag-settings-pane input[name=\"slug\"]'); // tests don't have a location.hash so we can only check that the\n        // slug portion is updated correctly\n\n        (0, _chai.expect)(newLocation, 'URL after slug change').to.equal('test');\n      });\n      (0, _mocha.it)('redirects to 404 when tag does not exist', async function () {\n        this.server.get('/tags/slug/unknown/', function () {\n          return new _emberCliMirage.Response(404, {\n            'Content-Type': 'application/json'\n          }, {\n            errors: [{\n              message: 'Tag not found.',\n              type: 'NotFoundError'\n            }]\n          });\n        });\n        await (0, _visit.visit)('tags/unknown');\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('error404');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/tags/unknown');\n      });\n      (0, _mocha.it)('sorts tags correctly', async function () {\n        this.server.create('tag', {\n          name: 'B - Third',\n          slug: 'third'\n        });\n        this.server.create('tag', {\n          name: 'Z - Last',\n          slug: 'last'\n        });\n        this.server.create('tag', {\n          name: '#A - Second',\n          slug: 'second'\n        });\n        this.server.create('tag', {\n          name: 'A - First',\n          slug: 'first'\n        });\n        await (0, _visit.visit)('tags');\n        let tags = (0, _testHelpers.findAll)('[data-test-tag]');\n        (0, _chai.expect)(tags[0].querySelector('[data-test-name]').textContent.trim()).to.equal('A - First');\n        (0, _chai.expect)(tags[1].querySelector('[data-test-name]').textContent.trim()).to.equal('#A - Second');\n        (0, _chai.expect)(tags[2].querySelector('[data-test-name]').textContent.trim()).to.equal('B - Third');\n        (0, _chai.expect)(tags[3].querySelector('[data-test-name]').textContent.trim()).to.equal('Z - Last');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/unsplash-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_ctrlOrCmd, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Settings - Integrations - Unsplash', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/integrations/unsplash');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/unsplash');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/unsplash');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/unsplash');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it can activate/deactivate', async function () {\n        await (0, _visit.visit)('/settings/integrations/unsplash'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/unsplash'); // it's enabled by default when settings is empty\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-checkbox]').checked, 'checked by default').to.be.true;\n        await (0, _testHelpers.click)('[data-test-unsplash-checkbox]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-checkbox]').checked, 'unsplash checkbox').to.be.false; // trigger a save\n\n        await (0, _testHelpers.click)('[data-test-save-button]'); // server should now have an unsplash setting\n\n        let [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        let params = JSON.parse(lastRequest.requestBody);\n        (0, _chai.expect)(params.settings.findBy('key', 'unsplash').value).to.equal(false); // save via CMD-S shortcut\n\n        await (0, _testHelpers.click)('[data-test-unsplash-checkbox]');\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        }); // we've already saved in this test so there's no on-screen indication\n        // that we've had another save, check the request was fired instead\n\n        let [newRequest] = this.server.pretender.handledRequests.slice(-1);\n        params = JSON.parse(newRequest.requestBody);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-checkbox]').checked, 'AMP checkbox').to.be.true;\n        (0, _chai.expect)(params.settings.findBy('key', 'unsplash').value).to.equal(true);\n      });\n      (0, _mocha.it)('warns when leaving without saving', async function () {\n        await (0, _visit.visit)('/settings/integrations/unsplash'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/unsplash'); // AMP is enabled by default\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-checkbox]').checked, 'AMP checkbox default').to.be.true;\n        await (0, _testHelpers.click)('[data-test-unsplash-checkbox]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-checkbox]').checked, 'Unsplash checkbox').to.be.false;\n        await (0, _visit.visit)('/settings/labs');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length, 'unsaved changes modal exists').to.equal(1); // Leave without saving\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-leave-button]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL after leave without saving').to.equal('/settings/labs');\n        await (0, _visit.visit)('/settings/integrations/unsplash');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/unsplash'); // settings were not saved\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-checkbox]').checked, 'Unsplash checkbox').to.be.true;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/zapier-test\", [\"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Settings - Integrations - Zapier', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/integrations/zapier');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/zapier');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/zapier');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to home page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/zapier');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it loads', async function () {\n        await (0, _visit.visit)('/settings/integrations/zapier'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/zapier');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/setup-test\", [\"moment\", \"ember-cli-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_moment, _emberCliMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Setup', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects if already authenticated', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/setup/one');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n      await (0, _visit.visit)('/setup/two');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n      await (0, _visit.visit)('/setup/three');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to signin if already set up', async function () {\n      // mimick an already setup blog\n      this.server.get('/authentication/setup/', function () {\n        return {\n          setup: [{\n            status: true\n          }]\n        };\n      });\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/setup');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.describe)('with a new blog', function () {\n      (0, _mocha.beforeEach)(function () {\n        // mimick a new blog\n        this.server.get('/authentication/setup/', function () {\n          return {\n            setup: [{\n              status: false\n            }]\n          };\n        });\n      });\n      (0, _mocha.it)('has a successful happy path', async function () {\n        await (0, _testSupport.invalidateSession)();\n        this.server.loadFixtures('roles');\n        await (0, _visit.visit)('/setup'); // it redirects to step one\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after accessing /setup').to.equal('/setup/one'); // it highlights first step\n\n        let stepIcons = (0, _testHelpers.findAll)('.gh-flow-nav .step');\n        (0, _chai.expect)(stepIcons.length, 'sanity check: three steps').to.equal(3);\n        (0, _chai.expect)(stepIcons[0], 'first step').to.have.class('active');\n        (0, _chai.expect)(stepIcons[1], 'second step').to.not.have.class('active');\n        (0, _chai.expect)(stepIcons[2], 'third step').to.not.have.class('active');\n        await (0, _testHelpers.click)('.gh-btn-green'); // it transitions to step two\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking \"Create your account\"').to.equal('/setup/two'); // email field is focused by default\n        // NOTE: $('x').is(':focus') doesn't work in phantomjs CLI runner\n        // https://github.com/ariya/phantomjs/issues/10427\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-blog-title-input]')[0] === document.activeElement, 'blog title has focus').to.be.true;\n        await (0, _testHelpers.click)('.gh-btn-green'); // it marks fields as invalid\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.form-group.error').length, 'number of invalid fields').to.equal(4); // it displays error messages\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.error .response').length, 'number of in-line validation messages').to.equal(4); // it displays main error\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.main-error').length, 'main error is displayed').to.equal(1); // enter valid details and submit\n\n        await (0, _testHelpers.fillIn)('[data-test-email-input]', 'test@example.com');\n        await (0, _testHelpers.fillIn)('[data-test-name-input]', 'Test User');\n        await (0, _testHelpers.fillIn)('[data-test-password-input]', 'thisissupersafe');\n        await (0, _testHelpers.fillIn)('[data-test-blog-title-input]', 'Blog Title');\n        await (0, _testHelpers.click)('.gh-btn-green'); // it transitions to step 3\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after submitting step two').to.equal('/setup/three'); // submit button is \"disabled\"\n\n        (0, _chai.expect)((0, _testHelpers.find)('button[type=\"submit\"]').classList.contains('gh-btn-green'), 'invite button with no emails is white').to.be.false; // fill in a valid email\n\n        await (0, _testHelpers.fillIn)('[name=\"users\"]', 'new-user@example.com'); // submit button is \"enabled\"\n\n        (0, _chai.expect)((0, _testHelpers.find)('button[type=\"submit\"]').classList.contains('gh-btn-green'), 'invite button is green with valid email address').to.be.true; // submit the invite form\n\n        await (0, _testHelpers.click)('button[type=\"submit\"]'); // it redirects to the home / \"content\" screen\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after submitting invites').to.equal('/dashboard'); // it displays success alert\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert-green').length, 'number of success alerts').to.equal(1);\n      });\n      (0, _mocha.it)('handles validation errors in step 2', async function () {\n        let postCount = 0;\n        await (0, _testSupport.invalidateSession)();\n        this.server.loadFixtures('roles');\n        this.server.post('/authentication/setup', function () {\n          postCount += 1; // validation error\n\n          if (postCount === 1) {\n            return new _emberCliMirage.Response(422, {}, {\n              errors: [{\n                type: 'ValidationError',\n                message: 'Server response message'\n              }]\n            });\n          } // server error\n\n\n          if (postCount === 2) {\n            return new _emberCliMirage.Response(500, {}, null);\n          }\n        });\n        await (0, _visit.visit)('/setup/two');\n        await (0, _testHelpers.click)('.gh-btn-green'); // non-server validation\n\n        (0, _chai.expect)((0, _testHelpers.find)('.main-error').textContent.trim(), 'error text').to.not.be.empty;\n        await (0, _testHelpers.fillIn)('[data-test-email-input]', 'test@example.com');\n        await (0, _testHelpers.fillIn)('[data-test-name-input]', 'Test User');\n        await (0, _testHelpers.fillIn)('[data-test-password-input]', 'thisissupersafe');\n        await (0, _testHelpers.fillIn)('[data-test-blog-title-input]', 'Blog Title'); // first post - simulated validation error\n\n        await (0, _testHelpers.click)('.gh-btn-green');\n        (0, _chai.expect)((0, _testHelpers.find)('.main-error').textContent.trim(), 'error text').to.equal('Server response message'); // second post - simulated server error\n\n        await (0, _testHelpers.click)('.gh-btn-green');\n        (0, _chai.expect)((0, _testHelpers.find)('.main-error').textContent.trim(), 'error text').to.be.empty;\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert-red').length, 'number of alerts').to.equal(1);\n      });\n      (0, _mocha.it)('handles invalid origin error on step 2', async function () {\n        // mimick the API response for an invalid origin\n        this.server.post('/session', function () {\n          return new _emberCliMirage.Response(401, {}, {\n            errors: [{\n              type: 'UnauthorizedError',\n              message: 'Access Denied from url: unknown.com. Please use the url configured in config.js.'\n            }]\n          });\n        });\n        await (0, _testSupport.invalidateSession)();\n        this.server.loadFixtures('roles');\n        await (0, _visit.visit)('/setup/two');\n        await (0, _testHelpers.fillIn)('[data-test-email-input]', 'test@example.com');\n        await (0, _testHelpers.fillIn)('[data-test-name-input]', 'Test User');\n        await (0, _testHelpers.fillIn)('[data-test-password-input]', 'thisissupersafe');\n        await (0, _testHelpers.fillIn)('[data-test-blog-title-input]', 'Blog Title');\n        await (0, _testHelpers.click)('.gh-btn-green'); // button should not be spinning\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-btn-green .spinner').length, 'button has spinner').to.equal(0); // we should show an error message\n\n        (0, _chai.expect)((0, _testHelpers.find)('.main-error').textContent, 'error text').to.have.string('Access Denied from url: unknown.com. Please use the url configured in config.js.');\n      });\n      (0, _mocha.it)('handles validation errors in step 3', async function () {\n        let input = '[name=\"users\"]';\n        let postCount = 0;\n        let button, formGroup;\n        await (0, _testSupport.invalidateSession)();\n        this.server.loadFixtures('roles');\n        this.server.post('/invites/', function (_ref) {\n          let {\n            invites\n          } = _ref;\n          let attrs = this.normalizedRequestAttrs();\n          postCount += 1; // invalid\n\n          if (postCount === 1) {\n            return new _emberCliMirage.Response(422, {}, {\n              errors: [{\n                type: 'ValidationError',\n                message: 'Dummy validation error'\n              }]\n            });\n          } // TODO: duplicated from mirage/config/invites - extract method?\n\n\n          attrs.token = `${invites.all().models.length}-token`;\n          attrs.expires = _moment.default.utc().add(1, 'day').valueOf();\n          attrs.createdAt = _moment.default.utc().format();\n          attrs.createdBy = 1;\n          attrs.updatedAt = _moment.default.utc().format();\n          attrs.updatedBy = 1;\n          attrs.status = 'sent';\n          return invites.create(attrs);\n        }); // complete step 2 so we can access step 3\n\n        await (0, _visit.visit)('/setup/two');\n        await (0, _testHelpers.fillIn)('[data-test-email-input]', 'test@example.com');\n        await (0, _testHelpers.fillIn)('[data-test-name-input]', 'Test User');\n        await (0, _testHelpers.fillIn)('[data-test-password-input]', 'thisissupersafe');\n        await (0, _testHelpers.fillIn)('[data-test-blog-title-input]', 'Blog Title');\n        await (0, _testHelpers.click)('.gh-btn-green'); // default field/button state\n\n        formGroup = (0, _testHelpers.find)('.gh-flow-invite .form-group');\n        button = (0, _testHelpers.find)('.gh-flow-invite button[type=\"submit\"]');\n        (0, _chai.expect)(formGroup, 'default field has error class').to.not.have.class('error');\n        (0, _chai.expect)(button.textContent, 'default button text').to.have.string('Invite some users');\n        (0, _chai.expect)(button, 'default button is disabled').to.have.class('gh-btn-minor'); // no users submitted state\n\n        await (0, _testHelpers.click)('.gh-flow-invite button[type=\"submit\"]');\n        (0, _chai.expect)(formGroup, 'no users submitted field has error class').to.have.class('error');\n        (0, _chai.expect)(button.textContent, 'no users submitted button text').to.have.string('No users to invite');\n        (0, _chai.expect)(button, 'no users submitted button is disabled').to.have.class('gh-btn-minor'); // single invalid email\n\n        await (0, _testHelpers.fillIn)(input, 'invalid email');\n        await (0, _testHelpers.blur)(input);\n        (0, _chai.expect)(formGroup, 'invalid field has error class').to.have.class('error');\n        (0, _chai.expect)(button.textContent, 'single invalid button text').to.have.string('1 invalid email address');\n        (0, _chai.expect)(button, 'invalid email button is disabled').to.have.class('gh-btn-minor'); // multiple invalid emails\n\n        await (0, _testHelpers.fillIn)(input, 'invalid email\\nanother invalid address');\n        await (0, _testHelpers.blur)(input);\n        (0, _chai.expect)(button.textContent, 'multiple invalid button text').to.have.string('2 invalid email addresses'); // single valid email\n\n        await (0, _testHelpers.fillIn)(input, 'invited@example.com');\n        await (0, _testHelpers.blur)(input);\n        (0, _chai.expect)(formGroup, 'valid field has error class').to.not.have.class('error');\n        (0, _chai.expect)(button.textContent, 'single valid button text').to.have.string('Invite 1 user');\n        (0, _chai.expect)(button, 'valid email button is enabled').to.have.class('gh-btn-green'); // multiple valid emails\n\n        await (0, _testHelpers.fillIn)(input, 'invited1@example.com\\ninvited2@example.com');\n        await (0, _testHelpers.blur)(input);\n        (0, _chai.expect)(button.textContent, 'multiple valid button text').to.have.string('Invite 2 users'); // submit invitations with simulated failure on 1 invite\n\n        await (0, _testHelpers.click)('.gh-btn-green'); // it redirects to the home / \"content\" screen\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after submitting invites').to.equal('/dashboard'); // it displays success alert\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert-green').length, 'number of success alerts').to.equal(1); // it displays failure alert\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert-red').length, 'number of failure alerts').to.equal(1);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/signin-test\", [\"ember-cli-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_emberCliMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Signin', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects if already authenticated', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/signin');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'current url').to.equal('/site');\n    });\n    (0, _mocha.describe)('when attempting to signin', function () {\n      (0, _mocha.beforeEach)(function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        this.server.post('/session', function (schema, _ref) {\n          let {\n            requestBody\n          } = _ref;\n          let {\n            username,\n            password\n          } = JSON.parse(requestBody);\n          (0, _chai.expect)(username).to.equal('test@example.com');\n\n          if (password === 'thisissupersafe') {\n            return new _emberCliMirage.Response(201);\n          } else {\n            return new _emberCliMirage.Response(401, {}, {\n              errors: [{\n                type: 'UnauthorizedError',\n                message: 'Invalid Password'\n              }]\n            });\n          }\n        });\n      });\n      (0, _mocha.it)('errors correctly', async function () {\n        await (0, _testSupport.invalidateSession)();\n        await (0, _visit.visit)('/signin');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'signin url').to.equal('/signin');\n        (0, _chai.expect)((0, _testHelpers.findAll)('input[name=\"identification\"]').length, 'email input field').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.findAll)('input[name=\"password\"]').length, 'password input field').to.equal(1);\n        await (0, _testHelpers.click)('.js-login-button');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.form-group.error').length, 'number of invalid fields').to.equal(2);\n        (0, _chai.expect)((0, _testHelpers.findAll)('.main-error').length, 'main error is displayed').to.equal(1);\n        await (0, _testHelpers.fillIn)('[name=\"identification\"]', 'test@example.com');\n        await (0, _testHelpers.fillIn)('[name=\"password\"]', 'invalid');\n        await (0, _testHelpers.click)('.js-login-button');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'current url').to.equal('/signin');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.main-error').length, 'main error is displayed').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('.main-error').textContent.trim(), 'main error text').to.equal('Invalid Password');\n      });\n      (0, _mocha.it)('submits successfully', async function () {\n        (0, _testSupport.invalidateSession)();\n        await (0, _visit.visit)('/signin');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'current url').to.equal('/signin');\n        await (0, _testHelpers.fillIn)('[name=\"identification\"]', 'test@example.com');\n        await (0, _testHelpers.fillIn)('[name=\"password\"]', 'thisissupersafe');\n        await (0, _testHelpers.click)('.js-login-button');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/dashboard');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/signup-test\", [\"ember-simple-auth/test-support\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_testSupport, _testHelpers, _mocha, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Signup', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('can signup successfully', async function () {\n      let server = this.server;\n      server.get('/authentication/invitation', function () {\n        return {\n          invitation: [{\n            valid: true\n          }]\n        };\n      });\n      server.post('/authentication/invitation/', function (_ref, _ref2) {\n        let {\n          users\n        } = _ref;\n        let {\n          requestBody\n        } = _ref2;\n        let params = JSON.parse(requestBody);\n        (0, _chai.expect)(params.invitation[0].name).to.equal('Test User');\n        (0, _chai.expect)(params.invitation[0].email).to.equal('kevin+test2@ghost.org');\n        (0, _chai.expect)(params.invitation[0].password).to.equal('thisissupersafe');\n        (0, _chai.expect)(params.invitation[0].token).to.equal('MTQ3MDM0NjAxNzkyOXxrZXZpbit0ZXN0MkBnaG9zdC5vcmd8MmNEblFjM2c3ZlFUajluTks0aUdQU0dmdm9ta0xkWGY2OEZ1V2dTNjZVZz0'); // ensure that `/users/me/` request returns a user\n\n        let role = server.create('role', {\n          name: 'Author'\n        });\n        users.create({\n          email: 'kevin@test2@ghost.org',\n          roles: [role]\n        });\n        return {\n          invitation: [{\n            message: 'Invitation accepted.'\n          }]\n        };\n      }); // token details:\n      // \"1470346017929|kevin+test2@ghost.org|2cDnQc3g7fQTj9nNK4iGPSGfvomkLdXf68FuWgS66Ug=\"\n\n      await (0, _visit.visit)('/signup/MTQ3MDM0NjAxNzkyOXxrZXZpbit0ZXN0MkBnaG9zdC5vcmd8MmNEblFjM2c3ZlFUajluTks0aUdQU0dmdm9ta0xkWGY2OEZ1V2dTNjZVZz0');\n      (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('signup'); // focus out in Name field triggers inline error\n\n      await (0, _testHelpers.blur)('[data-test-input=\"name\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"name\"]').closest('.form-group'), 'name field group has error class when empty').to.have.class('error');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"name\"]').closest('.form-group').querySelector('.response').textContent, 'name inline-error text').to.have.string('Please enter a name'); // entering text in Name field clears error\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"name\"]', 'Test User');\n      await (0, _testHelpers.blur)('[data-test-input=\"name\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"name\"]').closest('.form-group'), 'name field loses error class after text input').to.not.have.class('error');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"name\"]').closest('.form-group').querySelector('.response').textContent.trim(), 'name field error is removed after text input').to.be.empty; // focus out in Email field triggers inline error\n\n      await (0, _testHelpers.click)('[data-test-input=\"email\"]');\n      await (0, _testHelpers.blur)('[data-test-input=\"email\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"email\"]').closest('.form-group'), 'email field group has error class when empty').to.have.class('error');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"email\"]').closest('.form-group').querySelector('.response').textContent, 'email inline-error text').to.have.string('Please enter an email'); // entering text in email field clears error\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"email\"]', 'kevin+test2@ghost.org');\n      await (0, _testHelpers.blur)('[data-test-input=\"email\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"email\"]').closest('.form-group'), 'email field loses error class after text input').to.not.have.class('error');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"email\"]').closest('.form-group').querySelector('.response').textContent.trim(), 'email field error is removed after text input').to.be.empty; // check password validation\n      // focus out in password field triggers inline error\n      // no password\n\n      await (0, _testHelpers.click)('[data-test-input=\"password\"]');\n      await (0, _testHelpers.blur)();\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group'), 'password field group has error class when empty').to.have.class('error');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group').querySelector('.response').textContent, 'password field error text').to.have.string('must be at least 10 characters'); // password too short\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"password\"]', 'short');\n      await (0, _testHelpers.blur)('[data-test-input=\"password\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group').querySelector('.response').textContent, 'password field error text').to.have.string('must be at least 10 characters'); // password must not be a bad password\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"password\"]', '1234567890');\n      await (0, _testHelpers.blur)('[data-test-input=\"password\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group').querySelector('.response').textContent, 'password field error text').to.have.string('you cannot use an insecure password'); // password must not be a disallowed password\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"password\"]', 'password99');\n      await (0, _testHelpers.blur)('[data-test-input=\"password\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group').querySelector('.response').textContent, 'password field error text').to.have.string('you cannot use an insecure password'); // password must not have repeating characters\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"password\"]', '2222222222');\n      await (0, _testHelpers.blur)('[data-test-input=\"password\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group').querySelector('.response').textContent, 'password field error text').to.have.string('you cannot use an insecure password'); // entering valid text in Password field clears error\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"password\"]', 'thisissupersafe');\n      await (0, _testHelpers.blur)('[data-test-input=\"password\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group'), 'password field loses error class after text input').to.not.have.class('error');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group').querySelector('.response').textContent.trim(), 'password field error is removed after text input').to.equal(''); // submitting sends correct details and redirects to content screen\n\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('site');\n    });\n    (0, _mocha.it)('redirects if already logged in', async function () {\n      this.server.get('/authentication/invitation', function () {\n        return {\n          invitation: [{\n            valid: true\n          }]\n        };\n      });\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)(); // token details:\n      // \"1470346017929|kevin+test2@ghost.org|2cDnQc3g7fQTj9nNK4iGPSGfvomkLdXf68FuWgS66Ug=\"\n\n      await (0, _visit.visit)('/signup/MTQ3MDM0NjAxNzkyOXxrZXZpbit0ZXN0MkBnaG9zdC5vcmd8MmNEblFjM2c3ZlFUajluTks0aUdQU0dmdm9ta0xkWGY2OEZ1V2dTNjZVZz0');\n      (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('site');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-alert-content').textContent).to.have.string('sign out to register');\n    });\n    (0, _mocha.it)('redirects with alert on invalid token', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/signup/---invalid---');\n      (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('signin');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-alert-content').textContent).to.have.string('Invalid token');\n    });\n    (0, _mocha.it)('redirects with alert on non-existant or expired token', async function () {\n      this.server.get('/authentication/invitation', function () {\n        return {\n          invitation: [{\n            valid: false\n          }]\n        };\n      });\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/signup/expired');\n      (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('signin');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-alert-content').textContent).to.have.string('not exist');\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/staff-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"moment\", \"ghost-admin/utils/window-proxy\", \"ember-cli-mirage\", \"mocha\", \"ember-simple-auth/test-support\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ember-cli-mirage/test-support\", \"ghost-admin/tests/helpers/visit\"], function (_ctrlOrCmd, _moment, _windowProxy, _emberCliMirage, _mocha, _testSupport, _testHelpers, _chai, _emberMocha, _testSupport2, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Staff', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/staff');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects correctly when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      this.server.create('user', {\n        slug: 'no-access'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/staff/no-access');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff/test-user');\n    });\n    (0, _mocha.it)('redirects correctly when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      this.server.create('user', {\n        slug: 'no-access'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/staff/no-access');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff/test-user');\n    });\n    (0, _mocha.it)('redirects correctly when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      this.server.create('user', {\n        slug: 'no-access'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/staff/no-access');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff');\n    });\n    (0, _mocha.describe)('when logged in as admin', function () {\n      let admin, adminRole, suspendedUser;\n      (0, _mocha.beforeEach)(async function () {\n        this.server.loadFixtures('roles');\n        adminRole = this.server.schema.roles.find(1);\n        admin = this.server.create('user', {\n          email: 'admin@example.com',\n          roles: [adminRole]\n        }); // add an expired invite\n\n        this.server.create('invite', {\n          expires: _moment.default.utc().subtract(1, 'day').valueOf(),\n          role: adminRole\n        }); // add a suspended user\n\n        suspendedUser = this.server.create('user', {\n          email: 'suspended@example.com',\n          roles: [adminRole],\n          status: 'inactive'\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it renders and navigates correctly', async function () {\n        let user1 = this.server.create('user');\n        let user2 = this.server.create('user');\n        await (0, _visit.visit)('/settings/staff'); // doesn't do any redirecting\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff'); // it has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Staff - Test Blog'); // it shows active users in active section\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-active-users] [data-test-user-id]').length, 'number of active users').to.equal(3);\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-active-users] [data-test-user-id=\"${user1.id}\"]`)).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-active-users] [data-test-user-id=\"${user2.id}\"]`)).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-active-users] [data-test-user-id=\"${admin.id}\"]`)).to.exist; // it shows suspended users in suspended section\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-suspended-users] [data-test-user-id]').length, 'number of suspended users').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-suspended-users] [data-test-user-id=\"${suspendedUser.id}\"]`)).to.exist;\n        await (0, _testHelpers.click)(`[data-test-user-id=\"${user2.id}\"]`); // url is correct\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking user').to.equal(`/settings/staff/${user2.slug}`); // title is correct\n\n        (0, _chai.expect)(document.title, 'title after clicking user').to.equal('Staff - User - Test Blog'); // view title should exist and be linkable and active\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-screen-title] a[href=\"/ghost/settings/staff\"]').classList.contains('active'), 'has linkable url back to staff main page').to.be.true;\n        await (0, _testHelpers.click)('[data-test-screen-title] a'); // url should be /staff again\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking back').to.equal('/settings');\n      });\n      (0, _mocha.it)('can manage invites', async function () {\n        await (0, _visit.visit)('/settings/staff'); // invite user button exists\n\n        (0, _chai.expect)((0, _testHelpers.find)('.view-actions .gh-btn-primary'), 'invite people button').to.exist; // existing users are listed\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-user-id]').length, 'initial number of active users').to.equal(2);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-user-id=\"1\"] [data-test-role-name]').textContent.trim(), 'active user\\'s role label').to.equal('Administrator'); // existing invites are shown\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-invite-id]').length, 'initial number of invited users').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id=\"1\"] [data-test-invite-description]').textContent, 'expired invite description').to.match(/expired/); // remove expired invite\n\n        await (0, _testHelpers.click)('[data-test-invite-id=\"1\"] [data-test-revoke-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-invite-id]').length, 'initial number of invited users').to.equal(0); // click the invite people button\n\n        await (0, _testHelpers.click)('[data-test-button=\"invite-staff-user\"]'); // modal is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"invite-staff-user\"]'), 'correct modal is displayed').to.exist; // number of roles is correct\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-option]').length, 'number of selectable roles').to.equal(4);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-option=\"Contributor\"]'), 'contributor role is selected initially').to.have.class('active'); // submit valid invite form\n\n        await (0, _testHelpers.fillIn)('.fullscreen-modal input[name=\"email\"]', 'invite1@example.com');\n        await (0, _testHelpers.click)('[data-test-button=\"send-user-invite\"]'); // modal closes\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-modal]').length, 'number of modals after sending invite').to.equal(0); // invite is displayed, has correct e-mail + role\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-invite-id]').length, 'number of invites after first invite').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id=\"2\"] [data-test-email]').textContent.trim(), 'displayed email of first invite').to.equal('invite1@example.com');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id=\"2\"] [data-test-role-name]').textContent.trim(), 'displayed role of first invite').to.equal('Contributor');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id=\"2\"] [data-test-invite-description]').textContent, 'new invite description').to.match(/expires/); // number of users is unchanged\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-user-id]').length, 'number of active users after first invite').to.equal(2); // submit new invite with different role\n\n        await (0, _testHelpers.click)('.view-actions .gh-btn-primary');\n        await (0, _testHelpers.fillIn)('.fullscreen-modal input[name=\"email\"]', 'invite2@example.com');\n        await (0, _testHelpers.click)('[data-test-option=\"Editor\"]');\n        await (0, _testHelpers.click)('[data-test-button=\"send-user-invite\"]'); // number of invites increases\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-invite-id]').length, 'number of invites after second invite').to.equal(2); // invite has correct e-mail + role\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id=\"3\"] [data-test-email]').textContent.trim(), 'displayed email of second invite').to.equal('invite2@example.com');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id=\"3\"] [data-test-role-name]').textContent.trim(), 'displayed role of second invite').to.equal('Editor'); // submit invite form with existing user\n\n        await (0, _testHelpers.click)('.view-actions .gh-btn-primary');\n        await (0, _testHelpers.fillIn)('.fullscreen-modal input[name=\"email\"]', 'admin@example.com');\n        await (0, _testHelpers.click)('[data-test-button=\"send-user-invite\"]'); // validation message is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal .error .response').textContent.trim(), 'inviting existing user error').to.equal('A user with that email address already exists.'); // submit invite form with existing invite\n\n        await (0, _testHelpers.fillIn)('.fullscreen-modal input[name=\"email\"]', 'invite1@example.com');\n        await (0, _testHelpers.click)('[data-test-button=\"send-user-invite\"]'); // validation message is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal .error .response').textContent.trim(), 'inviting invited user error').to.equal('A user with that email address was already invited.'); // submit invite form with an invalid email\n\n        await (0, _testHelpers.fillIn)('.fullscreen-modal input[name=\"email\"]', 'test');\n        await (0, _testHelpers.click)('[data-test-button=\"send-user-invite\"]'); // validation message is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal .error .response').textContent.trim(), 'inviting invalid email error').to.equal('Invalid Email.');\n        await (0, _testHelpers.click)('.fullscreen-modal a.close'); // revoke latest invite\n\n        await (0, _testHelpers.click)('[data-test-invite-id=\"3\"] [data-test-revoke-button]'); // number of invites decreases\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-invite-id]').length, 'number of invites after revoke').to.equal(1); // notification is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-notification:last-of-type').textContent.trim(), 'notifications contain revoke').to.match(/Invitation revoked\\s+invite2@example\\.com/); // correct invite is removed\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id] [data-test-email]').textContent.trim(), 'displayed email of remaining invite').to.equal('invite1@example.com'); // add another invite to test ordering on resend\n\n        await (0, _testHelpers.click)('.view-actions .gh-btn-primary');\n        await (0, _testHelpers.fillIn)('.fullscreen-modal input[name=\"email\"]', 'invite3@example.com');\n        await (0, _testHelpers.click)('[data-test-button=\"send-user-invite\"]'); // new invite should be last in the list\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id]:last-of-type [data-test-email]').textContent.trim(), 'last invite email in list').to.equal('invite3@example.com'); // resend first invite\n\n        await (0, _testHelpers.click)('[data-test-invite-id=\"2\"] [data-test-resend-button]'); // notification is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-notification:last-of-type').textContent.trim(), 'notifications contain resend').to.match(/Invitation resent! \\(invite1@example\\.com\\)/); // first invite is still at the top\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id]:first-of-type [data-test-email]').textContent.trim(), 'first invite email in list').to.equal('invite1@example.com'); // regression test: can revoke a resent invite\n\n        await (0, _testHelpers.click)('[data-test-invite-id]:first-of-type [data-test-resend-button]');\n        await (0, _testHelpers.click)('[data-test-invite-id]:first-of-type [data-test-revoke-button]'); // number of invites decreases\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-invite-id]').length, 'number of invites after resend/revoke').to.equal(1); // notification is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-notification:last-of-type').textContent.trim(), 'notifications contain revoke after resend/revoke').to.match(/Invitation revoked\\s+invite1@example\\.com/);\n      });\n      (0, _mocha.it)('can manage suspended users', async function () {\n        await (0, _visit.visit)('/settings/staff');\n        await (0, _testHelpers.click)(`[data-test-user-id=\"${suspendedUser.id}\"]`);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-suspended-badge]')).to.exist;\n        await (0, _testHelpers.click)('[data-test-user-actions]');\n        await (0, _testHelpers.click)('[data-test-unsuspend-button]');\n        await (0, _testHelpers.click)('[data-test-modal-confirm]'); // NOTE: there seems to be a timing issue with this test - pausing\n        // here confirms that the badge is removed but the andThen is firing\n        // before the page is updated\n        // andThen(() => {\n        //     expect('[data-test-suspended-badge]').to.not.exist;\n        // });\n\n        await (0, _testHelpers.click)('[data-test-staff-link]'); // suspendedUser is now in active list\n\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-active-users] [data-test-user-id=\"${suspendedUser.id}\"]`)).to.exist; // no suspended users\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-suspended-users] [data-test-user-id]').length).to.equal(0);\n        await (0, _testHelpers.click)(`[data-test-user-id=\"${suspendedUser.id}\"]`);\n        await (0, _testHelpers.click)('[data-test-user-actions]');\n        await (0, _testHelpers.click)('[data-test-suspend-button]');\n        await (0, _testHelpers.click)('[data-test-modal-confirm]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-suspended-badge]')).to.exist;\n      });\n      (0, _mocha.it)('can delete users', async function () {\n        let user1 = this.server.create('user');\n        let user2 = this.server.create('user');\n        let post = this.server.create('post', {\n          authors: [user2]\n        }); // we don't have a full many-to-many relationship in mirage so we\n        // need to add the inverse manually\n\n        user2.posts = [post];\n        user2.save();\n        await (0, _visit.visit)('/settings/staff');\n        await (0, _testHelpers.click)(`[data-test-user-id=\"${user1.id}\"]`); // user deletion displays modal\n\n        await (0, _testHelpers.click)('button.delete');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-modal=\"delete-user\"]').length, 'user deletion modal displayed after button click').to.equal(1); // user has no posts so no warning about post deletion\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-text=\"user-post-count\"]').length, 'deleting user with no posts has no post count').to.equal(0); // cancelling user deletion closes modal\n\n        await (0, _testHelpers.click)('[data-test-button=\"cancel-delete-user\"]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-modal]').length === 0, 'delete user modal is closed when cancelling').to.be.true; // deleting a user with posts\n\n        await (0, _visit.visit)('/settings/staff');\n        await (0, _testHelpers.click)(`[data-test-user-id=\"${user2.id}\"]`);\n        await (0, _testHelpers.click)('button.delete'); // user has  posts so should warn about post deletion\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"user-post-count\"]').textContent, 'deleting user with posts has post count').to.have.string('1 post');\n        await (0, _testHelpers.click)('[data-test-button=\"confirm-delete-user\"]'); // redirected to staff page\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/settings/staff'); // deleted user is not in list\n\n        (0, _chai.expect)((0, _testHelpers.findAll)(`[data-test-user-id=\"${user2.id}\"]`).length, 'deleted user is not in user list after deletion').to.equal(0);\n      });\n      (0, _mocha.describe)('existing user', function () {\n        let user, newLocation, originalReplaceState;\n        (0, _mocha.beforeEach)(function () {\n          user = this.server.create('user', {\n            slug: 'test-1',\n            name: 'Test User',\n            facebook: 'test',\n            twitter: '@test'\n          });\n          originalReplaceState = _windowProxy.default.replaceState;\n\n          _windowProxy.default.replaceState = function (params, title, url) {\n            newLocation = url;\n          };\n\n          newLocation = undefined;\n        });\n        (0, _mocha.afterEach)(function () {\n          _windowProxy.default.replaceState = originalReplaceState;\n        });\n        (0, _mocha.it)('input fields reset and validate correctly', async function () {\n          // test user name\n          await (0, _visit.visit)('/settings/staff/test-1');\n          (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff/test-1');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-name-input]').value, 'current user name').to.equal('Test User');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-save-button]').textContent.trim(), 'save button text').to.equal('Save'); // test empty user name\n\n          await (0, _testHelpers.fillIn)('[data-test-name-input]', '');\n          await (0, _testHelpers.blur)('[data-test-name-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('.user-details-bottom .first-form-group').classList.contains('error'), 'username input is in error state with blank input').to.be.true; // test too long user name\n\n          await (0, _testHelpers.fillIn)('[data-test-name-input]', new Array(195).join('a'));\n          await (0, _testHelpers.blur)('[data-test-name-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('.user-details-bottom .first-form-group').classList.contains('error'), 'username input is in error state with too long input').to.be.true; // reset name field\n\n          await (0, _testHelpers.fillIn)('[data-test-name-input]', 'Test User');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-slug-input]').value, 'slug value is default').to.equal('test-1');\n          await (0, _testHelpers.fillIn)('[data-test-slug-input]', '');\n          await (0, _testHelpers.blur)('[data-test-slug-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-slug-input]').value, 'slug value is reset to original upon empty string').to.equal('test-1'); // Save changes\n\n          await (0, _testHelpers.click)('[data-test-save-button]'); // Since we reset save status so there's no on-screen indication\n          // that we've had a save, check the request was fired instead\n\n          let [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n          let params = JSON.parse(lastRequest.requestBody);\n          (0, _chai.expect)(params.users[0].name).to.equal('Test User'); // CMD-S shortcut works\n\n          await (0, _testHelpers.fillIn)('[data-test-slug-input]', 'Test User');\n          await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n            keyCode: 83,\n            // s\n            metaKey: _ctrlOrCmd.default === 'command',\n            ctrlKey: _ctrlOrCmd.default === 'ctrl'\n          }); // Since we reset save status so there's no on-screen indication\n          // that we've had a save, check the request was fired instead\n\n          [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n          params = JSON.parse(lastRequest.requestBody);\n          (0, _chai.expect)(params.users[0].name).to.equal('Test User'); // check that the history state has been updated\n\n          (0, _chai.expect)(newLocation).to.equal('Test User');\n          await (0, _testHelpers.fillIn)('[data-test-slug-input]', 'white space');\n          await (0, _testHelpers.blur)('[data-test-slug-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-slug-input]').value, 'slug value is correctly dasherized').to.equal('white-space');\n          await (0, _testHelpers.fillIn)('[data-test-email-input]', 'thisisnotanemail');\n          await (0, _testHelpers.blur)('[data-test-email-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('.user-details-bottom .form-group:nth-of-type(3)').classList.contains('error'), 'email input should be in error state with invalid email').to.be.true;\n          await (0, _testHelpers.fillIn)('[data-test-email-input]', 'test@example.com');\n          await (0, _testHelpers.fillIn)('[data-test-location-input]', new Array(160).join('a'));\n          await (0, _testHelpers.blur)('[data-test-location-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-location-input]').closest('.form-group'), 'location input should be in error state').to.have.class('error');\n          await (0, _testHelpers.fillIn)('[data-test-location-input]', '');\n          await (0, _testHelpers.fillIn)('[data-test-website-input]', 'thisisntawebsite');\n          await (0, _testHelpers.blur)('[data-test-website-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-website-input]').closest('.form-group'), 'website input should be in error state').to.have.class('error');\n\n          let testSocialInput = async function (type, input, expectedValue) {\n            let expectedError = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n            await (0, _testHelpers.fillIn)(`[data-test-${type}-input]`, input);\n            await (0, _testHelpers.blur)(`[data-test-${type}-input]`);\n            (0, _chai.expect)((0, _testHelpers.find)(`[data-test-${type}-input]`).value, `${type} value for ${input}`).to.equal(expectedValue);\n            (0, _chai.expect)((0, _testHelpers.find)(`[data-test-error=\"user-${type}\"]`).textContent.trim(), `${type} validation response for ${input}`).to.equal(expectedError);\n            (0, _chai.expect)((0, _testHelpers.find)(`[data-test-error=\"user-${type}\"]`).closest('.form-group').classList.contains('error'), `${type} input should be in error state with '${input}'`).to.equal(!!expectedError);\n          };\n\n          let testFacebookValidation = async function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            return testSocialInput('facebook', ...args);\n          };\n\n          let testTwitterValidation = async function () {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n\n            return testSocialInput('twitter', ...args);\n          }; // Testing Facebook input\n          // displays initial value\n\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-facebook-input]').value, 'initial facebook value').to.equal('https://www.facebook.com/test');\n          await (0, _testHelpers.focus)('[data-test-facebook-input]');\n          await (0, _testHelpers.blur)('[data-test-facebook-input]'); // regression test: we still have a value after the input is\n          // focused and then blurred without any changes\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-facebook-input]').value, 'facebook value after blur with no change').to.equal('https://www.facebook.com/test');\n          await testFacebookValidation('facebook.com/username', 'https://www.facebook.com/username');\n          await testFacebookValidation('testuser', 'https://www.facebook.com/testuser');\n          await testFacebookValidation('ab99', 'https://www.facebook.com/ab99');\n          await testFacebookValidation('page/ab99', 'https://www.facebook.com/page/ab99');\n          await testFacebookValidation('page/*(&*(%%))', 'https://www.facebook.com/page/*(&*(%%))');\n          await testFacebookValidation('facebook.com/pages/some-facebook-page/857469375913?ref=ts', 'https://www.facebook.com/pages/some-facebook-page/857469375913?ref=ts');\n          await testFacebookValidation('https://www.facebook.com/groups/savethecrowninn', 'https://www.facebook.com/groups/savethecrowninn');\n          await testFacebookValidation('http://github.com/username', 'http://github.com/username', 'The URL must be in a format like https://www.facebook.com/yourPage');\n          await testFacebookValidation('http://github.com/pages/username', 'http://github.com/pages/username', 'The URL must be in a format like https://www.facebook.com/yourPage'); // Testing Twitter input\n          // loads fixtures and performs transform\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-twitter-input]').value, 'initial twitter value').to.equal('https://twitter.com/test');\n          await (0, _testHelpers.focus)('[data-test-twitter-input]');\n          await (0, _testHelpers.blur)('[data-test-twitter-input]'); // regression test: we still have a value after the input is\n          // focused and then blurred without any changes\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-twitter-input]').value, 'twitter value after blur with no change').to.equal('https://twitter.com/test');\n          await testTwitterValidation('twitter.com/username', 'https://twitter.com/username');\n          await testTwitterValidation('testuser', 'https://twitter.com/testuser');\n          await testTwitterValidation('http://github.com/username', 'https://twitter.com/username');\n          await testTwitterValidation('*(&*(%%))', '*(&*(%%))', 'The URL must be in a format like https://twitter.com/yourUsername');\n          await testTwitterValidation('thisusernamehasmorethan15characters', 'thisusernamehasmorethan15characters', 'Your Username is not a valid Twitter Username'); // Testing bio input\n\n          await (0, _testHelpers.fillIn)('[data-test-website-input]', '');\n          await (0, _testHelpers.fillIn)('[data-test-bio-input]', new Array(210).join('a'));\n          await (0, _testHelpers.blur)('[data-test-bio-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-bio-input]').closest('.form-group'), 'bio input should be in error state').to.have.class('error'); // password reset ------\n          // button triggers validation\n\n          await (0, _testHelpers.click)('[data-test-save-pw-button]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-new-pass-input]').closest('.form-group'), 'new password has error class when blank').to.have.class('error');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"user-new-pass\"]').textContent, 'new password error when blank').to.have.string('can\\'t be blank'); // validates too short password (< 10 characters)\n\n          await (0, _testHelpers.fillIn)('[data-test-new-pass-input]', 'notlong');\n          await (0, _testHelpers.fillIn)('[data-test-ne2-pass-input]', 'notlong'); // enter key triggers action\n\n          await (0, _testHelpers.triggerKeyEvent)('[data-test-new-pass-input]', 'keyup', 13);\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-new-pass-input]').closest('.form-group'), 'new password has error class when password too short').to.have.class('error');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"user-new-pass\"]').textContent, 'new password error when it\\'s too short').to.have.string('at least 10 characters long'); // validates unsafe password\n\n          await (0, _testHelpers.fillIn)('#user-password-new', 'ghostisawesome');\n          await (0, _testHelpers.fillIn)('[data-test-ne2-pass-input]', 'ghostisawesome'); // enter key triggers action\n\n          await (0, _testHelpers.triggerKeyEvent)('#user-password-new', 'keyup', 13);\n          (0, _chai.expect)((0, _testHelpers.find)('#user-password-new').closest('.form-group'), 'new password has error class when password is insecure').to.have.class('error');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"user-new-pass\"]').textContent, 'new password error when it\\'s insecure').to.match(/you cannot use an insecure password/); // typing in inputs clears validation\n\n          await (0, _testHelpers.fillIn)('[data-test-new-pass-input]', 'thisissupersafe');\n          await (0, _testHelpers.triggerEvent)('[data-test-new-pass-input]', 'input');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-new-pass-input]').closest('.form-group'), 'password validation is visible after typing').to.not.have.class('error'); // enter key triggers action\n\n          await (0, _testHelpers.triggerKeyEvent)('[data-test-new-pass-input]', 'keyup', 13);\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-ne2-pass-input]').closest('.form-group'), 'confirm password has error class when it doesn\\'t match').to.have.class('error');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"user-ne2-pass\"]').textContent, 'confirm password error when it doesn\\'t match').to.have.string('do not match'); // submits with correct details\n\n          await (0, _testHelpers.fillIn)('[data-test-ne2-pass-input]', 'thisissupersafe');\n          await (0, _testHelpers.click)('[data-test-save-pw-button]'); // hits the endpoint\n\n          let [newRequest] = this.server.pretender.handledRequests.slice(-1);\n          params = JSON.parse(newRequest.requestBody);\n          (0, _chai.expect)(newRequest.url, 'password request URL').to.match(/\\/users\\/password/); // eslint-disable-next-line camelcase\n\n          (0, _chai.expect)(params.password[0].user_id).to.equal(user.id.toString());\n          (0, _chai.expect)(params.password[0].newPassword).to.equal('thisissupersafe');\n          (0, _chai.expect)(params.password[0].ne2Password).to.equal('thisissupersafe'); // clears the fields\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-new-pass-input]').value, 'password field after submit').to.be.empty;\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-ne2-pass-input]').value, 'password verification field after submit').to.be.empty; // displays a notification\n\n          (0, _chai.expect)((0, _testHelpers.findAll)('.gh-notifications .gh-notification').length, 'password saved notification is displayed').to.equal(1);\n        });\n        (0, _mocha.it)('warns when leaving without saving', async function () {\n          await (0, _visit.visit)('/settings/staff/test-1');\n          (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff/test-1');\n          await (0, _testHelpers.fillIn)('[data-test-slug-input]', 'another slug');\n          await (0, _testHelpers.blur)('[data-test-slug-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-slug-input]').value).to.be.equal('another-slug');\n          await (0, _testHelpers.fillIn)('[data-test-facebook-input]', 'testuser');\n          await (0, _testHelpers.blur)('[data-test-facebook-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-facebook-input]').value).to.be.equal('https://www.facebook.com/testuser');\n          await (0, _visit.visit)('/settings/staff');\n          (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-modal]').length, 'modal exists').to.equal(1); // Leave without saving\n\n          await (0, _testHelpers.click)('.fullscreen-modal [data-test-leave-button]');\n          (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff');\n          await (0, _visit.visit)('/settings/staff/test-1');\n          (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff/test-1'); // settings were not saved\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-slug-input]').value).to.be.equal('test-1');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-facebook-input]').value).to.be.equal('https://www.facebook.com/test');\n        });\n      });\n      (0, _mocha.describe)('own user', function () {\n        (0, _mocha.it)('requires current password when changing password', async function () {\n          await (0, _visit.visit)(`/settings/staff/${admin.slug}`); // test the \"old password\" field is validated\n\n          await (0, _testHelpers.click)('[data-test-save-pw-button]'); // old password has error\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-old-pass-input]').closest('.form-group'), 'old password has error class when blank').to.have.class('error');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"user-old-pass\"]').textContent, 'old password error when blank').to.have.string('is required'); // new password has error\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-new-pass-input]').closest('.form-group'), 'new password has error class when blank').to.have.class('error');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"user-new-pass\"]').textContent, 'new password error when blank').to.have.string('can\\'t be blank'); // validation is cleared when typing\n\n          await (0, _testHelpers.fillIn)('[data-test-old-pass-input]', 'password');\n          await (0, _testHelpers.triggerEvent)('[data-test-old-pass-input]', 'input');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-old-pass-input]').closest('.form-group'), 'old password validation is in error state after typing').to.not.have.class('error');\n        });\n      });\n      (0, _mocha.it)('redirects to 404 when user does not exist', async function () {\n        this.server.get('/users/slug/unknown/', function () {\n          return new _emberCliMirage.Response(404, {\n            'Content-Type': 'application/json'\n          }, {\n            errors: [{\n              message: 'User not found.',\n              type: 'NotFoundError'\n            }]\n          });\n        });\n        await (0, _visit.visit)('/settings/staff/unknown');\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('error404');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/settings/staff/unknown');\n      });\n    });\n    (0, _mocha.describe)('when logged in as author', function () {\n      let adminRole, authorRole;\n      (0, _mocha.beforeEach)(async function () {\n        adminRole = this.server.create('role', {\n          name: 'Administrator'\n        });\n        authorRole = this.server.create('role', {\n          name: 'Author'\n        });\n        this.server.create('user', {\n          roles: [authorRole]\n        });\n        this.server.get('/invites/', function () {\n          return new _emberCliMirage.Response(403, {}, {\n            errors: [{\n              type: 'NoPermissionError',\n              message: 'You do not have permission to perform this action'\n            }]\n          });\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('is redirected to user profile page', async function () {\n        this.server.create('user', {\n          roles: [adminRole]\n        });\n        this.server.create('invite', {\n          role: authorRole\n        });\n        await (0, _visit.visit)('/settings/staff');\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('settings.staff.user');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(0);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/helpers/data-transfer\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var c = Ember.Object.extend({\n    getData: function () {\n      return this.get('payload');\n    },\n    setData: function (dataType, payload) {\n      this.set(\"data\", {\n        dataType: dataType,\n        payload: payload\n      });\n    }\n  });\n  c.reopenClass({\n    makeMockEvent: function (payload) {\n      var transfer = this.create({\n        payload: payload\n      });\n      var res = {\n        dataTransfer: transfer\n      };\n      res.originalEvent = res;\n\n      res.originalEvent.preventDefault = function () {\n        console.log('prevent default');\n      };\n\n      res.originalEvent.stopPropagation = function () {\n        console.log('stop propagation');\n      };\n\n      return res;\n    },\n    createDomEvent: function (type) {\n      var event = document.createEvent(\"CustomEvent\");\n      event.initCustomEvent(type, true, true, null);\n      event.dataTransfer = {\n        data: {},\n        setData: function (type, val) {\n          this.data[type] = val;\n        },\n        getData: function (type) {\n          return this.data[type];\n        }\n      };\n      return event;\n    }\n  });\n  var _default = c;\n  _exports.default = _default;\n});","define(\"ghost-admin/tests/helpers/drag-drop\", [\"exports\", \"ember-native-dom-helpers\", \"ghost-admin/tests/helpers/mock-event\"], function (_exports, _emberNativeDomHelpers, _mockEvent) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.drag = drag;\n\n  async function dragOver(dropSelector, moves) {\n    moves = moves || [[{\n      clientX: 1,\n      clientY: 1\n    }, dropSelector]];\n    return moves.forEach(async _ref => {\n      let [position, selector] = _ref;\n      let event = new _mockEvent.default(position);\n      await (0, _emberNativeDomHelpers.triggerEvent)(selector || dropSelector, 'dragover', event);\n    });\n  }\n\n  async function drop(dragSelector, dragEvent, options) {\n    let {\n      drop: dropSelector,\n      dropEndOptions,\n      dragOverMoves\n    } = options;\n    let dropElement = await (0, _emberNativeDomHelpers.find)(dropSelector);\n\n    if (!dropElement) {\n      throw `There are no drop targets by the given selector: '${dropSelector}'`;\n    }\n\n    await dragOver(dropSelector, dragOverMoves);\n\n    if (options.beforeDrop) {\n      await options.beforeDrop.call();\n    }\n\n    let event = new _mockEvent.default().useDataTransferData(dragEvent);\n    await (0, _emberNativeDomHelpers.triggerEvent)(dropSelector, 'drop', event);\n    return await (0, _emberNativeDomHelpers.triggerEvent)(dragSelector, 'dragend', dropEndOptions);\n  }\n\n  async function drag(dragSelector) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let dragEvent = new _mockEvent.default(options.dragStartOptions);\n    await (0, _emberNativeDomHelpers.triggerEvent)(dragSelector, 'mouseover');\n    await (0, _emberNativeDomHelpers.triggerEvent)(dragSelector, 'dragstart', dragEvent);\n\n    if (options.afterDrag) {\n      await options.afterDrag.call();\n    }\n\n    if (options.drop) {\n      await drop(dragSelector, dragEvent, options);\n    }\n  }\n});","define(\"ghost-admin/tests/helpers/ember-drag-drop\", [\"exports\", \"jquery\", \"ghost-admin/tests/helpers/data-transfer\"], function (_exports, _jquery, _dataTransfer) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.drag = drag;\n\n  function drop($dragHandle, dropCssPath, dragEvent) {\n    let $dropTarget = (0, _jquery.default)(dropCssPath);\n\n    if ($dropTarget.length === 0) {\n      throw `There are no drop targets by the given selector: '${dropCssPath}'`;\n    }\n\n    Ember.run(() => {\n      triggerEvent($dropTarget, 'dragover', _dataTransfer.default.makeMockEvent());\n    });\n    Ember.run(() => {\n      triggerEvent($dropTarget, 'drop', _dataTransfer.default.makeMockEvent(dragEvent.dataTransfer.get('data.payload')));\n    });\n    Ember.run(() => {\n      triggerEvent($dragHandle, 'dragend', _dataTransfer.default.makeMockEvent());\n    });\n  }\n\n  function drag(cssPath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    let dragEvent = _dataTransfer.default.makeMockEvent();\n\n    let $dragHandle = (0, _jquery.default)(cssPath);\n    Ember.run(() => {\n      triggerEvent($dragHandle, 'mouseover');\n    });\n    Ember.run(() => {\n      triggerEvent($dragHandle, 'dragstart', dragEvent);\n    });\n    andThen(function () {\n      if (options.beforeDrop) {\n        options.beforeDrop.call();\n      }\n    });\n    andThen(function () {\n      if (options.drop) {\n        drop($dragHandle, options.drop, dragEvent);\n      }\n    });\n  }\n});","define(\"ghost-admin/tests/helpers/ember-power-calendar\", [\"exports\", \"ember-power-calendar/test-support\"], function (_exports, _testSupport) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _default;\n\n  function _default() {\n    Ember.Test.registerAsyncHelper('calendarCenter', async function (app, selector, newCenter) {\n      return (0, _testSupport.calendarCenter)(selector, newCenter);\n    });\n    Ember.Test.registerAsyncHelper('calendarSelect', async function (app, selector, selected) {\n      return (0, _testSupport.calendarSelect)(selector, selected);\n    });\n  }\n});","define(\"ghost-admin/tests/helpers/ember-power-select\", [\"exports\", \"ember-power-select/test-support/helpers\"], function (_exports, _helpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.clickTrigger = void 0;\n  _exports.default = deprecatedRegisterHelpers;\n  _exports.typeInSearch = _exports.triggerKeydown = _exports.touchTrigger = _exports.selectChoose = _exports.nativeTouch = _exports.nativeMouseUp = _exports.nativeMouseDown = _exports.findContains = void 0;\n\n  function deprecateHelper(fn, name) {\n    return function () {\n      (true && !(false) && Ember.deprecate(`DEPRECATED \\`import { ${name} } from '../../tests/helpers/ember-power-select';\\` is deprecated. Please, replace it with \\`import { ${name} } from 'ember-power-select/test-support/helpers';\\``, false, {\n        until: '1.11.0',\n        id: `ember-power-select-test-support-${name}`\n      }));\n      return fn(...arguments);\n    };\n  }\n\n  let findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  _exports.findContains = findContains;\n  let nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  _exports.nativeMouseDown = nativeMouseDown;\n  let nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  _exports.nativeMouseUp = nativeMouseUp;\n  let triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  _exports.triggerKeydown = triggerKeydown;\n  let typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  _exports.typeInSearch = typeInSearch;\n  let clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  _exports.clickTrigger = clickTrigger;\n  let nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  _exports.nativeTouch = nativeTouch;\n  let touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  _exports.touchTrigger = touchTrigger;\n  let selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n  _exports.selectChoose = selectChoose;\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, {\n      until: '1.11.0',\n      id: 'ember-power-select-test-support-register-helpers'\n    }));\n    return (0, _helpers.default)();\n  }\n});","define(\"ghost-admin/tests/helpers/file-upload\", [\"exports\", \"@ember/test-helpers\"], function (_exports, _testHelpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.createFile = createFile;\n  _exports.fileUpload = fileUpload;\n\n  function createFile() {\n    let content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['test'];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n      name,\n      type\n    } = options;\n    let file = new Blob(content, {\n      type: type ? type : 'text/plain'\n    });\n    file.name = name ? name : 'test.txt';\n    return file;\n  }\n\n  function fileUpload(target, content, options) {\n    let file = createFile(content, options);\n    return (0, _testHelpers.triggerEvent)(target, 'change', {\n      files: [file]\n    });\n  }\n});","define(\"ghost-admin/tests/helpers/find\", [\"exports\", \"@ember/test-helpers\"], function (_exports, _testHelpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.elementHasText = elementHasText;\n  _exports.findAllWithText = findAllWithText;\n  _exports.findWithText = findWithText;\n\n  function elementHasText(element, text) {\n    return RegExp(text).test(element.textContent);\n  }\n\n  function findWithText(selector, text) {\n    return Array.from((0, _testHelpers.findAll)(selector)).find(element => elementHasText(element, text));\n  }\n\n  function findAllWithText(selector, text) {\n    return Array.from((0, _testHelpers.findAll)(selector)).filter(element => elementHasText(element, text));\n  }\n});","define(\"ghost-admin/tests/helpers/labs-flag\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.disableLabsFlag = disableLabsFlag;\n  _exports.enableLabsFlag = enableLabsFlag;\n\n  function enableLabsFlag(server, flag) {\n    if (!server.schema.configs.all().length) {\n      server.loadFixtures('configs');\n    }\n\n    if (!server.schema.settings.all().length) {\n      server.loadFixtures('settings');\n    }\n\n    const config = server.schema.configs.first();\n    config.update({\n      enableDeveloperExperiments: true\n    });\n    const labsSetting = {};\n    labsSetting[flag] = true;\n    server.db.settings.update({\n      key: 'labs'\n    }, {\n      value: JSON.stringify(labsSetting)\n    });\n  }\n\n  function disableLabsFlag(server, flag) {\n    if (!server.schema.configs.all().length) {\n      server.loadFixtures('configs');\n    }\n\n    if (!server.schema.settings.all().length) {\n      server.loadFixtures('settings');\n    }\n\n    const config = server.schema.configs.first();\n    config.update({\n      enableDeveloperExperiments: true\n    });\n    const labsSetting = {};\n    labsSetting[flag] = false;\n    server.db.settings.update({\n      key: 'labs'\n    }, {\n      value: JSON.stringify(labsSetting)\n    });\n  }\n});","define(\"ghost-admin/tests/helpers/mock-event\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.createDomEvent = createDomEvent;\n  _exports.default = void 0;\n\n  class DataTransfer {\n    constructor() {\n      this.data = {};\n    }\n\n    setData(type, value) {\n      this.data[type] = value;\n      return this;\n    }\n\n    getData() {\n      let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Text\";\n      return this.data[type];\n    }\n\n    setDragImage() {}\n\n  }\n\n  window.__CLASSIC_HAS_CONSTRUCTOR__.set(DataTransfer, true);\n\n  window.__CLASSIC_OWN_CLASSES__.set(DataTransfer, true);\n\n  class MockEvent {\n    constructor() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.dataTransfer = new DataTransfer();\n      this.dataTransfer.setData('Text', options.dataTransferData);\n      this.originalEvent = this;\n      this.setProperties(options);\n    }\n\n    useDataTransferData(otherEvent) {\n      this.dataTransfer.setData('Text', otherEvent.dataTransfer.getData());\n      return this;\n    }\n\n    setProperties(props) {\n      for (let prop in props) {\n        this[prop] = props[prop];\n      }\n\n      return this;\n    }\n\n    preventDefault() {}\n\n    stopPropagation() {}\n\n  }\n\n  _exports.default = MockEvent;\n\n  window.__CLASSIC_HAS_CONSTRUCTOR__.set(MockEvent, true);\n\n  window.__CLASSIC_OWN_CLASSES__.set(MockEvent, true);\n\n  function createDomEvent(type) {\n    let event = document.createEvent(\"CustomEvent\");\n    event.initCustomEvent(type, true, true, null);\n    event.dataTransfer = new DataTransfer();\n    return event;\n  }\n});","define(\"ghost-admin/tests/helpers/resolver\", [\"exports\", \"ghost-admin/resolver\", \"ghost-admin/config/environment\"], function (_exports, _resolver, _environment) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n\n  const resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n  var _default = resolver;\n  _exports.default = _default;\n});","define(\"ghost-admin/tests/helpers/visit\", [\"exports\", \"@ember/test-helpers\"], function (_exports, _testHelpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.visit = visit;\n\n  // TODO: remove once bug is fixed in Ember\n  // see https://github.com/emberjs/ember-test-helpers/issues/332\n  async function visit(url) {\n    try {\n      await (0, _testHelpers.visit)(url);\n    } catch (e) {\n      if (e.message !== 'TransitionAborted') {\n        throw e;\n      }\n    }\n\n    await (0, _testHelpers.settled)();\n  }\n});","define(\"ghost-admin/tests/integration/adapters/tag-test\", [\"pretender\", \"ghost-admin/utils/ghost-paths\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _ghostPaths, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Adapter: tag', function () {\n    (0, _emberMocha.setupTest)();\n    let server, store;\n    beforeEach(function () {\n      store = this.owner.lookup('service:store');\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('loads tags from regular endpoint when all are fetched', function (done) {\n      server.get(`${(0, _ghostPaths.default)().apiRoot}/tags/`, function () {\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          tags: [{\n            id: 1,\n            name: 'Tag 1',\n            slug: 'tag-1'\n          }, {\n            id: 2,\n            name: 'Tag 2',\n            slug: 'tag-2'\n          }]\n        })];\n      });\n      store.findAll('tag', {\n        reload: true\n      }).then(tags => {\n        (0, _chai.expect)(tags).to.be.ok;\n        (0, _chai.expect)(tags.objectAtContent(0).get('name')).to.equal('Tag 1');\n        done();\n      });\n    });\n    (0, _mocha.it)('loads tag from slug endpoint when single tag is queried and slug is passed in', function (done) {\n      server.get(`${(0, _ghostPaths.default)().apiRoot}/tags/slug/tag-1/`, function () {\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          tags: [{\n            id: 1,\n            slug: 'tag-1',\n            name: 'Tag 1'\n          }]\n        })];\n      });\n      store.queryRecord('tag', {\n        slug: 'tag-1'\n      }).then(tag => {\n        (0, _chai.expect)(tag).to.be.ok;\n        (0, _chai.expect)(tag.get('name')).to.equal('Tag 1');\n        done();\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/adapters/user-test\", [\"pretender\", \"ghost-admin/utils/ghost-paths\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _ghostPaths, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Adapter: user', function () {\n    (0, _emberMocha.setupTest)();\n    let server, store;\n    beforeEach(function () {\n      store = this.owner.lookup('service:store');\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('loads users from regular endpoint when all are fetched', function (done) {\n      server.get(`${(0, _ghostPaths.default)().apiRoot}/users/`, function () {\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          users: [{\n            id: 1,\n            name: 'User 1',\n            slug: 'user-1'\n          }, {\n            id: 2,\n            name: 'User 2',\n            slug: 'user-2'\n          }]\n        })];\n      });\n      store.findAll('user', {\n        reload: true\n      }).then(users => {\n        (0, _chai.expect)(users).to.be.ok;\n        (0, _chai.expect)(users.objectAtContent(0).get('name')).to.equal('User 1');\n        done();\n      });\n    });\n    (0, _mocha.it)('loads user from slug endpoint when single user is queried and slug is passed in', function (done) {\n      server.get(`${(0, _ghostPaths.default)().apiRoot}/users/slug/user-1/`, function () {\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          users: [{\n            id: 1,\n            slug: 'user-1',\n            name: 'User 1'\n          }]\n        })];\n      });\n      store.queryRecord('user', {\n        slug: 'user-1'\n      }).then(user => {\n        (0, _chai.expect)(user).to.be.ok;\n        (0, _chai.expect)(user.get('name')).to.equal('User 1');\n        done();\n      });\n    });\n    (0, _mocha.it)('handles \"include\" parameter when querying single user via slug', function (done) {\n      server.get(`${(0, _ghostPaths.default)().apiRoot}/users/slug/user-1/`, request => {\n        let params = request.queryParams;\n        (0, _chai.expect)(params.include, 'include query').to.equal('roles,count.posts');\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          users: [{\n            id: 1,\n            slug: 'user-1',\n            name: 'User 1',\n            count: {\n              posts: 5\n            }\n          }]\n        })];\n      });\n      store.queryRecord('user', {\n        slug: 'user-1',\n        include: 'count.posts'\n      }).then(user => {\n        (0, _chai.expect)(user).to.be.ok;\n        (0, _chai.expect)(user.get('name')).to.equal('User 1');\n        (0, _chai.expect)(user.get('count.posts')).to.equal(5);\n        done();\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/dashboard/latest-member-activity-test\", [\"ember-simple-auth/test-support\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-cli-mirage/test-support\", \"ember-mocha\"], function (_testSupport, _mocha, _chai, _testHelpers, _testSupport2, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: <Dashboard::LatestMemberActivity>', function () {\n    const hooks = (0, _emberMocha.setupRenderingTest)();\n    (0, _testSupport2.setupMirage)(hooks);\n    (0, _mocha.it)('renders with no activities', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Dashboard::LatestMemberActivity />\n      */\n      {\n        \"id\": \"OAfzbizn\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"dashboard/latest-member-activity\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-dashboard-member-activity]')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-no-member-activities]')).to.exist;\n    });\n    (0, _mocha.it)('renders 5 latest activities', async function () {\n      this.server.createList('member-activity-event', 10);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Dashboard::LatestMemberActivity />\n      */\n      {\n        \"id\": \"OAfzbizn\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"dashboard/latest-member-activity\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-dashboard-member-activity]')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-no-member-activities]')).to.not.exist;\n      (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-dashboard-member-activity-item]').length).to.equal(5);\n    });\n    (0, _mocha.it)('renders nothing when owner has not completed launch', async function () {\n      let role = this.server.create('role', {\n        name: 'Owner'\n      });\n      this.server.create('user', {\n        roles: [role]\n      });\n      await (0, _testSupport.authenticateSession)();\n      const sessionService = this.owner.lookup('service:session');\n      await sessionService.populateUser();\n      this.server.create('setting', {\n        key: 'editor_is_launch_complete',\n        value: false,\n        group: 'editor'\n      });\n      const settingsService = this.owner.lookup('service:settings');\n      await settingsService.fetch();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Dashboard::LatestMemberActivity />\n      */\n      {\n        \"id\": \"OAfzbizn\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"dashboard/latest-member-activity\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-dashboard-member-activity]')).to.not.exist;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-alert-test\", [\"sinon\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-alert', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      this.set('message', {\n        message: 'Test message',\n        type: 'success'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-alert message=message}}\n      */\n      {\n        \"id\": \"bwebYfEk\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"message\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"message\\\",\\\"gh-alert\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let alert = this.element.querySelector('article.gh-alert');\n      (0, _chai.expect)(alert).to.exist;\n      (0, _chai.expect)(alert).to.contain.text('Test message');\n    });\n    (0, _mocha.it)('maps message types to CSS classes', async function () {\n      this.set('message', {\n        message: 'Test message',\n        type: 'success'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-alert message=message}}\n      */\n      {\n        \"id\": \"bwebYfEk\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"message\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"message\\\",\\\"gh-alert\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let alert = this.element.querySelector('article.gh-alert');\n      this.set('message.type', 'success');\n      (0, _chai.expect)(alert, 'success class is green').to.have.class('gh-alert-green');\n      this.set('message.type', 'error');\n      (0, _chai.expect)(alert, 'error class is red').to.have.class('gh-alert-red');\n      this.set('message.type', 'warn');\n      (0, _chai.expect)(alert, 'warn class is yellow').to.have.class('gh-alert-blue');\n      this.set('message.type', 'info');\n      (0, _chai.expect)(alert, 'info class is blue').to.have.class('gh-alert-blue');\n    });\n    (0, _mocha.it)('closes notification through notifications service', async function () {\n      let message = {\n        message: 'Test close',\n        type: 'success'\n      };\n      this.set('message', message);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-alert message=message}}\n      */\n      {\n        \"id\": \"bwebYfEk\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"message\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"message\\\",\\\"gh-alert\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('article.gh-alert')).to.exist;\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.closeNotification = _sinon.default.stub();\n      await (0, _testHelpers.click)('[data-test-button=\"close-notification\"]');\n      (0, _chai.expect)(notifications.closeNotification.calledWith(message)).to.be.true;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-alerts-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  let notificationsStub = Ember.Service.extend({\n    alerts: Ember.A()\n  });\n  (0, _mocha.describe)('Integration: Component: gh-alerts', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      this.owner.register('service:notifications', notificationsStub);\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('alerts', [{\n        message: 'First',\n        type: 'error'\n      }, {\n        message: 'Second',\n        type: 'warn'\n      }]);\n    });\n    (0, _mocha.it)('renders', async function () {\n      let notifications = this.owner.lookup('service:notifications');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-alerts}}\n      */\n      {\n        \"id\": \"FRh6LxKe\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"gh-alerts\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alerts').length).to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-alerts').children.length).to.equal(2);\n      notifications.set('alerts', Ember.A());\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-alerts').children.length).to.equal(0);\n    });\n    (0, _mocha.it)('triggers \"notify\" action when message count changes', async function () {\n      let notifications = this.owner.lookup('service:notifications');\n      let expectedCount = 0; // test double for notify action\n\n      this.set('notify', count => (0, _chai.expect)(count).to.equal(expectedCount));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-alerts notify=(action notify)}}\n      */\n      {\n        \"id\": \"7/NtfZLm\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,2],null,[[\\\"notify\\\"],[[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"notify\\\",\\\"action\\\",\\\"gh-alerts\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      expectedCount = 3;\n      notifications.alerts.pushObject({\n        message: 'Third',\n        type: 'success'\n      });\n      await (0, _testHelpers.settled)();\n      expectedCount = 0;\n      notifications.set('alerts', Ember.A());\n      await (0, _testHelpers.settled)();\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-basic-dropdown-test\", [\"ember-basic-dropdown/test-support/helpers\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_helpers, _mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-basic-dropdown', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('closes when dropdown service fires close event', async function () {\n      let dropdownService = this.owner.lookup('service:dropdown');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  <GhBasicDropdown as |dropdown|>\n                      <dropdown.Trigger>Click me!</dropdown.Trigger>\n                      <dropdown.Content><div id=\"dropdown-is-opened\">Content of the trigger</div></dropdown.Content>\n                  </GhBasicDropdown>\n              \n      */\n      {\n        \"id\": \"IyyMqPe6\",\n        \"block\": \"{\\\"symbols\\\":[\\\"dropdown\\\"],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[8,\\\"gh-basic-dropdown\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n                \\\"],[8,[32,1,[\\\"Trigger\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"Click me!\\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n                \\\"],[8,[32,1,[\\\"Content\\\"]],[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[10,\\\"div\\\"],[14,1,\\\"dropdown-is-opened\\\"],[12],[2,\\\"Content of the trigger\\\"],[13]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n            \\\"]],\\\"parameters\\\":[1]}]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _helpers.clickTrigger)();\n      (0, _chai.expect)((0, _testHelpers.find)('#dropdown-is-opened')).to.exist;\n      dropdownService.closeDropdowns();\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)((0, _testHelpers.find)('#dropdown-is-opened')).to.not.exist;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-cm-editor-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  // NOTE: If the browser window is not focused/visible CodeMirror (or Chrome?) will\n  // take longer to respond to/fire events so it's possible that some of these tests\n  // will take 1-3 seconds\n  (0, _mocha.describe)('Integration: Component: gh-cm-editor', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('handles change event', async function () {\n      this.set('text', '');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-cm-editor text class=\"gh-input\" update=(action (mut text))}}\n      */\n      {\n        \"id\": \"6MzBEwe/\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],[[35,0]],[[\\\"class\\\",\\\"update\\\"],[\\\"gh-input\\\",[30,[36,2],[[32,0],[30,[36,1],[[35,0]],null]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"text\\\",\\\"mut\\\",\\\"action\\\",\\\"gh-cm-editor\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      })); // access CodeMirror directly as it doesn't pick up changes to the textarea\n\n      let cm = (0, _testHelpers.find)('.gh-input .CodeMirror').CodeMirror;\n      cm.setValue('Testing');\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)(this.text, 'text value after CM editor change').to.equal('Testing');\n    });\n    (0, _mocha.it)('can autofocus', async function () {\n      // CodeMirror's events are triggered outside of anything we can watch for\n      // in the tests so let's run the class check when we know the event has\n      // been fired and timeout if it's not fired as we expect\n      let onFocus = async () => {\n        // wait for runloop to finish so that the new class has been rendered\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-input').classList.contains('focus'), 'has focused class on first render with autofocus').to.be.true;\n      };\n\n      this.set('onFocus', onFocus);\n      this.set('text', '');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-cm-editor text class=\"gh-input\" update=(action (mut text)) autofocus=true focus-in=(action onFocus)}}\n      */\n      {\n        \"id\": \"FqyP1It8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],[[35,2]],[[\\\"class\\\",\\\"update\\\",\\\"autofocus\\\",\\\"focus-in\\\"],[\\\"gh-input\\\",[30,[36,1],[[32,0],[30,[36,3],[[35,2]],null]],null],true,[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"onFocus\\\",\\\"action\\\",\\\"text\\\",\\\"mut\\\",\\\"gh-cm-editor\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-distribution-action-select-test\", [\"ghost-admin/mirage/config/posts\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\", \"ghost-admin/initializers/ember-cli-mirage\"], function (_posts, _mocha, _chai, _testHelpers, _emberMocha, _emberCliMirage) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-distribution-action-select', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = (0, _emberCliMirage.startMirage)();\n      let author = server.create('user');\n      (0, _posts.default)(server);\n      server.create('post', {\n        authors: [author]\n      });\n      this.set('store', this.owner.lookup('service:store'));\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('renders', async function () {\n      this.set('post', this.store.findRecord('post', 1));\n      await (0, _testHelpers.settled)();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhDistributionActionSelect @post=post />\n      */\n      {\n        \"id\": \"cKyQf52F\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-distribution-action-select\\\",[],[[\\\"@post\\\"],[\\\"post\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element, 'top-level elements').to.exist;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-feature-flag-test\", [\"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  const featureStub = Ember.Service.extend({\n    testFlag: true\n  });\n  (0, _mocha.describe)('Integration: Component: gh-feature-flag', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      this.owner.register('service:feature', featureStub);\n    });\n    (0, _mocha.it)('renders properties correctly', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhFeatureFlag @flag=\"testFlag\" />\n      */\n      {\n        \"id\": \"lpKyB+kC\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-feature-flag\\\",[],[[\\\"@flag\\\"],[\\\"testFlag\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('label').getAttribute('for')).to.equal((0, _testHelpers.find)('input[type=\"checkbox\"]').id);\n    });\n    (0, _mocha.it)('renders correctly when flag is set to true', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhFeatureFlag @flag=\"testFlag\" />\n      */\n      {\n        \"id\": \"lpKyB+kC\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-feature-flag\\\",[],[[\\\"@flag\\\"],[\\\"testFlag\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('label input[type=\"checkbox\"]').checked).to.be.true;\n    });\n    (0, _mocha.it)('renders correctly when flag is set to false', async function () {\n      let feature = this.owner.lookup('service:feature');\n      feature.set('testFlag', false);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhFeatureFlag @flag=\"testFlag\" />\n      */\n      {\n        \"id\": \"lpKyB+kC\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-feature-flag\\\",[],[[\\\"@flag\\\"],[\\\"testFlag\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('label input[type=\"checkbox\"]').checked).to.be.false;\n    });\n    (0, _mocha.it)('updates to reflect changes in flag property', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhFeatureFlag @flag=\"testFlag\" />\n      */\n      {\n        \"id\": \"lpKyB+kC\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-feature-flag\\\",[],[[\\\"@flag\\\"],[\\\"testFlag\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('label input[type=\"checkbox\"]').checked).to.be.true;\n      await (0, _testHelpers.click)('label');\n      (0, _chai.expect)((0, _testHelpers.find)('label input[type=\"checkbox\"]').checked).to.be.false;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-file-uploader-test\", [\"jquery\", \"pretender\", \"ghost-admin/utils/ghost-paths\", \"sinon\", \"ghost-admin/services/ajax\", \"@ember/test-helpers\", \"ghost-admin/tests/helpers/file-upload\", \"mocha\", \"chai\", \"ember-mocha\"], function (_jquery, _pretender, _ghostPaths, _sinon, _ajax, _testHelpers, _fileUpload, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  const notificationsStub = Ember.Service.extend({\n    showAPIError() {// noop - to be stubbed\n    }\n\n  });\n\n  const stubSuccessfulUpload = function (server) {\n    let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    server.post(`${(0, _ghostPaths.default)().apiRoot}/images/`, function () {\n      return [200, {\n        'Content-Type': 'application/json'\n      }, '{\"url\":\"/content/images/test.png\"}'];\n    }, delay);\n  };\n\n  const stubFailedUpload = function (server, code, error) {\n    let delay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    server.post(`${(0, _ghostPaths.default)().apiRoot}/images/`, function () {\n      return [code, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        errors: [{\n          type: error,\n          message: `Error: ${error}`\n        }]\n      })];\n    }, delay);\n  };\n\n  (0, _mocha.describe)('Integration: Component: gh-file-uploader', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n      this.set('uploadUrl', `${(0, _ghostPaths.default)().apiRoot}/images/`);\n      this.owner.register('service:notifications', notificationsStub);\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('renders', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader}}\n      */\n      {\n        \"id\": \"DVe0RFn2\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('label').textContent.trim(), 'default label').to.equal('Select or drag-and-drop a file');\n    });\n    (0, _mocha.it)('allows file input \"accept\" attribute to be changed', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader}}\n      */\n      {\n        \"id\": \"DVe0RFn2\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input[type=\"file\"]').getAttribute('accept'), 'default \"accept\" attribute').to.equal('text/csv');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader accept=\"application/zip\"}}\n      */\n      {\n        \"id\": \"7+me41JW\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,0],null,[[\\\"accept\\\"],[\\\"application/zip\\\"]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input[type=\"file\"]').getAttribute('accept'), 'specified \"accept\" attribute').to.equal('application/zip');\n    });\n    (0, _mocha.it)('renders form with supplied label text', async function () {\n      this.set('labelText', 'My label');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader labelText=labelText}}\n      */\n      {\n        \"id\": \"kHqUN39K\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"labelText\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"labelText\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('label').textContent.trim(), 'label').to.equal('My label');\n    });\n    (0, _mocha.it)('generates request to supplied endpoint', async function () {\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl}}\n      */\n      {\n        \"id\": \"u+hL5Tfp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"url\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(server.handledRequests.length).to.equal(1);\n      (0, _chai.expect)(server.handledRequests[0].url).to.equal(`${(0, _ghostPaths.default)().apiRoot}/images/`);\n    });\n    (0, _mocha.it)('fires uploadSuccess action on successful upload', async function () {\n      let uploadSuccess = _sinon.default.spy();\n\n      this.set('uploadSuccess', uploadSuccess);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl uploadSuccess=(action uploadSuccess)}}\n      */\n      {\n        \"id\": \"bBuqHDDe\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"url\\\",\\\"uploadSuccess\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadSuccess\\\",\\\"action\\\",\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(uploadSuccess.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.firstCall.args[0]).to.eql({\n        url: '/content/images/test.png'\n      });\n    });\n    (0, _mocha.it)('doesn\\'t fire uploadSuccess action on failed upload', async function () {\n      let uploadSuccess = _sinon.default.spy();\n\n      this.set('uploadSuccess', uploadSuccess);\n      stubFailedUpload(server, 500);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl uploadSuccess=(action uploadSuccess)}}\n      */\n      {\n        \"id\": \"bBuqHDDe\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"url\\\",\\\"uploadSuccess\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadSuccess\\\",\\\"action\\\",\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)(uploadSuccess.calledOnce).to.be.false;\n    });\n    (0, _mocha.it)('fires fileSelected action on file selection', async function () {\n      let fileSelected = _sinon.default.spy();\n\n      this.set('fileSelected', fileSelected);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl fileSelected=(action fileSelected)}}\n      */\n      {\n        \"id\": \"Uu4UtzOg\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"url\\\",\\\"fileSelected\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"fileSelected\\\",\\\"action\\\",\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(fileSelected.calledOnce).to.be.true;\n      (0, _chai.expect)(fileSelected.args[0]).to.not.be.empty;\n    });\n    (0, _mocha.it)('fires uploadStarted action on upload start', async function () {\n      let uploadStarted = _sinon.default.spy();\n\n      this.set('uploadStarted', uploadStarted);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl uploadStarted=(action uploadStarted)}}\n      */\n      {\n        \"id\": \"8zmyk4EA\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"url\\\",\\\"uploadStarted\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadStarted\\\",\\\"action\\\",\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(uploadStarted.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('fires uploadFinished action on successful upload', async function () {\n      let uploadFinished = _sinon.default.spy();\n\n      this.set('uploadFinished', uploadFinished);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl uploadFinished=(action uploadFinished)}}\n      */\n      {\n        \"id\": \"MoSzAQ6b\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"url\\\",\\\"uploadFinished\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadFinished\\\",\\\"action\\\",\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(uploadFinished.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('fires uploadFinished action on failed upload', async function () {\n      let uploadFinished = _sinon.default.spy();\n\n      this.set('uploadFinished', uploadFinished);\n      stubFailedUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl uploadFinished=(action uploadFinished)}}\n      */\n      {\n        \"id\": \"MoSzAQ6b\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"url\\\",\\\"uploadFinished\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadFinished\\\",\\\"action\\\",\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(uploadFinished.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('displays invalid file type error', async function () {\n      stubFailedUpload(server, 415, 'UnsupportedMediaTypeError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl}}\n      */\n      {\n        \"id\": \"u+hL5Tfp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"url\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file type you uploaded is not supported/);\n      (0, _chai.expect)((0, _testHelpers.findAll)('.gh-btn-green').length, 'reset button is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-btn-green').textContent).to.equal('Try Again');\n    });\n    (0, _mocha.it)('displays file too large for server error', async function () {\n      stubFailedUpload(server, 413, 'RequestEntityTooLargeError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl}}\n      */\n      {\n        \"id\": \"u+hL5Tfp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"url\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file you uploaded was larger/);\n    });\n    (0, _mocha.it)('handles file too large error directly from the web server', async function () {\n      server.post(`${(0, _ghostPaths.default)().apiRoot}/images/`, function () {\n        return [413, {}, ''];\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl}}\n      */\n      {\n        \"id\": \"u+hL5Tfp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"url\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file you uploaded was larger/);\n    });\n    (0, _mocha.it)('displays other server-side error with message', async function () {\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl}}\n      */\n      {\n        \"id\": \"u+hL5Tfp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"url\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/Error: UnknownError/);\n    });\n    (0, _mocha.it)('handles unknown failure', async function () {\n      server.post(`${(0, _ghostPaths.default)().apiRoot}/images/`, function () {\n        return [500, {\n          'Content-Type': 'application/json'\n        }, ''];\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl}}\n      */\n      {\n        \"id\": \"u+hL5Tfp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"url\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/Something went wrong/);\n    });\n    (0, _mocha.it)('triggers notifications.showAPIError for VersionMismatchError', async function () {\n      let showAPIError = _sinon.default.spy();\n\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('showAPIError', showAPIError);\n      stubFailedUpload(server, 400, 'VersionMismatchError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl}}\n      */\n      {\n        \"id\": \"u+hL5Tfp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"url\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(showAPIError.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('doesn\\'t trigger notifications.showAPIError for other errors', async function () {\n      let showAPIError = _sinon.default.spy();\n\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('showAPIError', showAPIError);\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl}}\n      */\n      {\n        \"id\": \"u+hL5Tfp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"url\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(showAPIError.called).to.be.false;\n    });\n    (0, _mocha.it)('can be reset after a failed upload', async function () {\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl}}\n      */\n      {\n        \"id\": \"u+hL5Tfp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"url\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.findAll)('input[type=\"file\"]').length).to.equal(1);\n    });\n    (0, _mocha.it)('handles drag over/leave', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader}}\n      */\n      {\n        \"id\": \"DVe0RFn2\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      Ember.run(() => {\n        // eslint-disable-next-line new-cap\n        let dragover = _jquery.default.Event('dragover', {\n          dataTransfer: {\n            files: []\n          }\n        });\n\n        (0, _jquery.default)((0, _testHelpers.find)('.gh-image-uploader')).trigger(dragover);\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-image-uploader').classList.contains('-drag-over'), 'has drag-over class').to.be.true;\n      await (0, _testHelpers.triggerEvent)('.gh-image-uploader', 'dragleave');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-image-uploader').classList.contains('-drag-over'), 'has drag-over class').to.be.false;\n    });\n    (0, _mocha.it)('triggers file upload on file drop', async function () {\n      let uploadSuccess = _sinon.default.spy(); // eslint-disable-next-line new-cap\n\n\n      let drop = _jquery.default.Event('drop', {\n        dataTransfer: {\n          files: [(0, _fileUpload.createFile)(['test'], {\n            name: 'test.csv'\n          })]\n        }\n      });\n\n      this.set('uploadSuccess', uploadSuccess);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader url=uploadUrl uploadSuccess=(action uploadSuccess)}}\n      */\n      {\n        \"id\": \"bBuqHDDe\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"url\\\",\\\"uploadSuccess\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadSuccess\\\",\\\"action\\\",\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      Ember.run(() => {\n        (0, _jquery.default)((0, _testHelpers.find)('.gh-image-uploader')).trigger(drop);\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)(uploadSuccess.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.firstCall.args[0]).to.eql({\n        url: '/content/images/test.png'\n      });\n    });\n    (0, _mocha.it)('validates extension by default', async function () {\n      let uploadSuccess = _sinon.default.spy();\n\n      let uploadFailed = _sinon.default.spy();\n\n      this.set('uploadSuccess', uploadSuccess);\n      this.set('uploadFailed', uploadFailed);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader\n                  url=uploadUrl\n                  uploadSuccess=(action uploadSuccess)\n                  uploadFailed=(action uploadFailed)}}\n      */\n      {\n        \"id\": \"iOBlg1bY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"url\\\",\\\"uploadSuccess\\\",\\\"uploadFailed\\\"],[[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadFailed\\\",\\\"action\\\",\\\"uploadSuccess\\\",\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.txt'\n      });\n      (0, _chai.expect)(uploadSuccess.called).to.be.false;\n      (0, _chai.expect)(uploadFailed.calledOnce).to.be.true;\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file type you uploaded is not supported/);\n    });\n    (0, _mocha.it)('uploads if validate action supplied and returns true', async function () {\n      let validate = _sinon.default.stub().returns(true);\n\n      let uploadSuccess = _sinon.default.spy();\n\n      this.set('validate', validate);\n      this.set('uploadSuccess', uploadSuccess);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader\n                  url=uploadUrl\n                  uploadSuccess=(action uploadSuccess)\n                  validate=(action validate)}}\n      */\n      {\n        \"id\": \"NioFQAFL\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"url\\\",\\\"uploadSuccess\\\",\\\"validate\\\"],[[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"validate\\\",\\\"action\\\",\\\"uploadSuccess\\\",\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)(validate.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('skips upload and displays error if validate action supplied and doesn\\'t return true', async function () {\n      let validate = _sinon.default.stub().returns(new _ajax.UnsupportedMediaTypeError());\n\n      let uploadSuccess = _sinon.default.spy();\n\n      let uploadFailed = _sinon.default.spy();\n\n      this.set('validate', validate);\n      this.set('uploadSuccess', uploadSuccess);\n      this.set('uploadFailed', uploadFailed);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-file-uploader\n                  url=uploadUrl\n                  uploadSuccess=(action uploadSuccess)\n                  uploadFailed=(action uploadFailed)\n                  validate=(action validate)}}\n      */\n      {\n        \"id\": \"IFlBdpb+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,5],null,[[\\\"url\\\",\\\"uploadSuccess\\\",\\\"uploadFailed\\\",\\\"validate\\\"],[[35,4],[30,[36,1],[[32,0],[35,3]],null],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"validate\\\",\\\"action\\\",\\\"uploadFailed\\\",\\\"uploadSuccess\\\",\\\"uploadUrl\\\",\\\"gh-file-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(validate.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.called).to.be.false;\n      (0, _chai.expect)(uploadFailed.calledOnce).to.be.true;\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file type you uploaded is not supported/);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-image-uploader-test\", [\"jquery\", \"pretender\", \"ghost-admin/utils/ghost-paths\", \"sinon\", \"ghost-admin/services/ajax\", \"@ember/test-helpers\", \"ghost-admin/tests/helpers/file-upload\", \"mocha\", \"chai\", \"ember-mocha\"], function (_jquery, _pretender, _ghostPaths, _sinon, _ajax, _testHelpers, _fileUpload, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  const notificationsStub = Ember.Service.extend({\n    showAPIError() {// noop - to be stubbed\n    }\n\n  });\n  const sessionStub = Ember.Service.extend({\n    isAuthenticated: false,\n\n    init() {\n      this._super(...arguments);\n\n      let authenticated = {\n        access_token: 'AccessMe123'\n      };\n      this.authenticated = authenticated;\n      this.data = {\n        authenticated\n      };\n    }\n\n  });\n\n  const stubSuccessfulUpload = function (server) {\n    let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    server.post(`${(0, _ghostPaths.default)().apiRoot}/images/upload/`, function () {\n      return [200, {\n        'Content-Type': 'application/json'\n      }, '{\"images\": [{\"url\":\"/content/images/test.png\"}]}'];\n    }, delay);\n  };\n\n  const stubFailedUpload = function (server, code, error) {\n    let delay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    server.post(`${(0, _ghostPaths.default)().apiRoot}/images/upload/`, function () {\n      return [code, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        errors: [{\n          type: error,\n          message: `Error: ${error}`\n        }]\n      })];\n    }, delay);\n  };\n\n  (0, _mocha.describe)('Integration: Component: gh-image-uploader', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      this.owner.register('service:session', sessionStub);\n      this.owner.register('service:notifications', notificationsStub);\n      this.set('update', function () {});\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('renders form with supplied alt text', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image altText=\"text test\"}}\n      */\n      {\n        \"id\": \"86KhIoeq\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"image\\\",\\\"altText\\\"],[[35,0],\\\"text test\\\"]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-file-input-description]')).to.have.trimmed.text('Upload image of \"text test\"');\n    });\n    (0, _mocha.it)('renders form with supplied text', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image text=\"text test\"}}\n      */\n      {\n        \"id\": \"SexQBUib\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"image\\\",\\\"text\\\"],[[35,0],\\\"text test\\\"]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-file-input-description]')).to.have.trimmed.text('text test');\n    });\n    (0, _mocha.it)('generates request to correct endpoint', async function () {\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image update=(action update)}}\n      */\n      {\n        \"id\": \"lK+8df00\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"update\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(server.handledRequests.length).to.equal(1);\n      (0, _chai.expect)(server.handledRequests[0].url).to.equal(`${(0, _ghostPaths.default)().apiRoot}/images/upload/`);\n      (0, _chai.expect)(server.handledRequests[0].requestHeaders.Authorization).to.be.undefined;\n    });\n    (0, _mocha.it)('fires update action on successful upload', async function () {\n      let update = _sinon.default.spy();\n\n      this.set('update', update);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image update=(action update)}}\n      */\n      {\n        \"id\": \"lK+8df00\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"update\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(update.calledOnce).to.be.true;\n      (0, _chai.expect)(update.firstCall.args[0]).to.equal('/content/images/test.png');\n    });\n    (0, _mocha.it)('doesn\\'t fire update action on failed upload', async function () {\n      let update = _sinon.default.spy();\n\n      this.set('update', update);\n      stubFailedUpload(server, 500);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image update=(action update)}}\n      */\n      {\n        \"id\": \"lK+8df00\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"update\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(update.calledOnce).to.be.false;\n    });\n    (0, _mocha.it)('fires fileSelected action on file selection', async function () {\n      let fileSelected = _sinon.default.spy();\n\n      this.set('fileSelected', fileSelected);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image fileSelected=(action fileSelected) update=(action update)}}\n      */\n      {\n        \"id\": \"IMo//Qb3\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"image\\\",\\\"fileSelected\\\",\\\"update\\\"],[[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"fileSelected\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(fileSelected.calledOnce).to.be.true;\n      (0, _chai.expect)(fileSelected.args[0]).to.not.be.empty;\n    });\n    (0, _mocha.it)('fires uploadStarted action on upload start', async function () {\n      let uploadStarted = _sinon.default.spy();\n\n      this.set('uploadStarted', uploadStarted);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image uploadStarted=(action uploadStarted) update=(action update)}}\n      */\n      {\n        \"id\": \"46E0nHOY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"image\\\",\\\"uploadStarted\\\",\\\"update\\\"],[[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"uploadStarted\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(uploadStarted.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('fires uploadFinished action on successful upload', async function () {\n      let uploadFinished = _sinon.default.spy();\n\n      this.set('uploadFinished', uploadFinished);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image uploadFinished=(action uploadFinished) update=(action update)}}\n      */\n      {\n        \"id\": \"xYgz3LYF\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"image\\\",\\\"uploadFinished\\\",\\\"update\\\"],[[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"uploadFinished\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(uploadFinished.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('fires uploadFinished action on failed upload', async function () {\n      let uploadFinished = _sinon.default.spy();\n\n      this.set('uploadFinished', uploadFinished);\n      stubFailedUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image uploadFinished=(action uploadFinished) update=(action update)}}\n      */\n      {\n        \"id\": \"xYgz3LYF\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"image\\\",\\\"uploadFinished\\\",\\\"update\\\"],[[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"uploadFinished\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(uploadFinished.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('displays invalid file type error', async function () {\n      stubFailedUpload(server, 415, 'UnsupportedMediaTypeError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image update=(action update)}}\n      */\n      {\n        \"id\": \"lK+8df00\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"update\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The image type you uploaded is not supported/);\n      (0, _chai.expect)((0, _testHelpers.findAll)('.gh-btn-green').length, 'reset button is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-btn-green').textContent).to.equal('Try Again');\n    });\n    (0, _mocha.it)('displays file too large for server error', async function () {\n      stubFailedUpload(server, 413, 'RequestEntityTooLargeError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image update=(action update)}}\n      */\n      {\n        \"id\": \"lK+8df00\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"update\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The image you uploaded was larger/);\n    });\n    (0, _mocha.it)('handles file too large error directly from the web server', async function () {\n      server.post(`${(0, _ghostPaths.default)().apiRoot}/images/upload/`, function () {\n        return [413, {}, ''];\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image update=(action update)}}\n      */\n      {\n        \"id\": \"lK+8df00\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"update\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The image you uploaded was larger/);\n    });\n    (0, _mocha.it)('displays other server-side error with message', async function () {\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image update=(action update)}}\n      */\n      {\n        \"id\": \"lK+8df00\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"update\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/Error: UnknownError/);\n    });\n    (0, _mocha.it)('handles unknown failure', async function () {\n      server.post(`${(0, _ghostPaths.default)().apiRoot}/images/upload/`, function () {\n        return [500, {\n          'Content-Type': 'application/json'\n        }, ''];\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image update=(action update)}}\n      */\n      {\n        \"id\": \"lK+8df00\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"update\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/Something went wrong/);\n    });\n    (0, _mocha.it)('triggers notifications.showAPIError for VersionMismatchError', async function () {\n      let showAPIError = _sinon.default.spy();\n\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('showAPIError', showAPIError);\n      stubFailedUpload(server, 400, 'VersionMismatchError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image update=(action update)}}\n      */\n      {\n        \"id\": \"lK+8df00\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"update\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(showAPIError.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('doesn\\'t trigger notifications.showAPIError for other errors', async function () {\n      let showAPIError = _sinon.default.spy();\n\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('showAPIError', showAPIError);\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image update=(action update)}}\n      */\n      {\n        \"id\": \"lK+8df00\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"update\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(showAPIError.called).to.be.false;\n    });\n    (0, _mocha.it)('can be reset after a failed upload', async function () {\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image update=(action update)}}\n      */\n      {\n        \"id\": \"lK+8df00\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"update\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        type: 'test.png'\n      });\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.findAll)('input[type=\"file\"]').length).to.equal(1);\n    });\n    (0, _mocha.it)('handles drag over/leave', async function () {\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader image=image update=(action update)}}\n      */\n      {\n        \"id\": \"lK+8df00\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"update\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      Ember.run(() => {\n        // eslint-disable-next-line new-cap\n        let dragover = _jquery.default.Event('dragover', {\n          dataTransfer: {\n            files: []\n          }\n        });\n\n        (0, _jquery.default)((0, _testHelpers.find)('.gh-image-uploader')).trigger(dragover);\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-image-uploader').classList.contains('-drag-over'), 'has drag-over class').to.be.true;\n      await (0, _testHelpers.triggerEvent)('.gh-image-uploader', 'dragleave');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-image-uploader').classList.contains('-drag-over'), 'has drag-over class').to.be.false;\n    });\n    (0, _mocha.it)('triggers file upload on file drop', async function () {\n      let uploadSuccess = _sinon.default.spy(); // eslint-disable-next-line new-cap\n\n\n      let drop = _jquery.default.Event('drop', {\n        dataTransfer: {\n          files: [(0, _fileUpload.createFile)(['test'], {\n            name: 'test.png'\n          })]\n        }\n      });\n\n      this.set('uploadSuccess', uploadSuccess);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader uploadSuccess=(action uploadSuccess)}}\n      */\n      {\n        \"id\": \"FYP8tqCx\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,2],null,[[\\\"uploadSuccess\\\"],[[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadSuccess\\\",\\\"action\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      Ember.run(() => {\n        (0, _jquery.default)((0, _testHelpers.find)('.gh-image-uploader')).trigger(drop);\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)(uploadSuccess.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.firstCall.args[0]).to.equal('/content/images/test.png');\n    });\n    (0, _mocha.it)('validates extension by default', async function () {\n      let uploadSuccess = _sinon.default.spy();\n\n      let uploadFailed = _sinon.default.spy();\n\n      this.set('uploadSuccess', uploadSuccess);\n      this.set('uploadFailed', uploadFailed);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader\n                  uploadSuccess=(action uploadSuccess)\n                  uploadFailed=(action uploadFailed)}}\n      */\n      {\n        \"id\": \"xxRJoZLK\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"uploadSuccess\\\",\\\"uploadFailed\\\"],[[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadFailed\\\",\\\"action\\\",\\\"uploadSuccess\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.json'\n      });\n      (0, _chai.expect)(uploadSuccess.called).to.be.false;\n      (0, _chai.expect)(uploadFailed.calledOnce).to.be.true;\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The image type you uploaded is not supported/);\n    });\n    (0, _mocha.it)('uploads if validate action supplied and returns true', async function () {\n      let validate = _sinon.default.stub().returns(true);\n\n      let uploadSuccess = _sinon.default.spy();\n\n      this.set('validate', validate);\n      this.set('uploadSuccess', uploadSuccess);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader\n                  uploadSuccess=(action uploadSuccess)\n                  validate=(action validate)}}\n      */\n      {\n        \"id\": \"sXtzf47J\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"uploadSuccess\\\",\\\"validate\\\"],[[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"validate\\\",\\\"action\\\",\\\"uploadSuccess\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.txt'\n      });\n      (0, _chai.expect)(validate.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('skips upload and displays error if validate action supplied and doesn\\'t return true', async function () {\n      let validate = _sinon.default.stub().returns(new _ajax.UnsupportedMediaTypeError());\n\n      let uploadSuccess = _sinon.default.spy();\n\n      let uploadFailed = _sinon.default.spy();\n\n      this.set('validate', validate);\n      this.set('uploadSuccess', uploadSuccess);\n      this.set('uploadFailed', uploadFailed);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader\n                  uploadSuccess=(action uploadSuccess)\n                  uploadFailed=(action uploadFailed)\n                  validate=(action validate)}}\n      */\n      {\n        \"id\": \"aZA2Uyl0\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"uploadSuccess\\\",\\\"uploadFailed\\\",\\\"validate\\\"],[[30,[36,1],[[32,0],[35,3]],null],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"validate\\\",\\\"action\\\",\\\"uploadFailed\\\",\\\"uploadSuccess\\\",\\\"gh-image-uploader\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(validate.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.called).to.be.false;\n      (0, _chai.expect)(uploadFailed.calledOnce).to.be.true;\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The image type you uploaded is not supported/);\n    });\n    (0, _mocha.describe)('unsplash', function () {\n      (0, _mocha.it)('has unsplash icon only when unsplash is active & allowed');\n      (0, _mocha.it)('opens unsplash modal when icon clicked');\n      (0, _mocha.it)('inserts unsplash image when selected');\n      (0, _mocha.it)('closes unsplash modal when close is triggered');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-image-uploader-with-preview-test\", [\"sinon\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-image-uploader-with-preview', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders image if provided', async function () {\n      let remove = _sinon.default.spy();\n\n      this.set('remove', remove);\n      this.set('image', 'http://example.com/test.png');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader-with-preview image=image remove=(action remove)}}\n      */\n      {\n        \"id\": \"77RiuC5x\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"remove\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"remove\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader-with-preview\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('.gh-image-uploader.-with-image').length).to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('img').getAttribute('src')).to.equal('http://example.com/test.png');\n    });\n    (0, _mocha.it)('renders upload form when no image provided', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader-with-preview image=image}}\n      */\n      {\n        \"id\": \"5i2Rw1nc\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"image\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"image\\\",\\\"gh-image-uploader-with-preview\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('input[type=\"file\"]').length).to.equal(1);\n    });\n    (0, _mocha.it)('triggers remove action when delete icon is clicked', async function () {\n      let remove = _sinon.default.spy();\n\n      this.set('remove', remove);\n      this.set('image', 'http://example.com/test.png');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-image-uploader-with-preview image=image remove=(action remove)}}\n      */\n      {\n        \"id\": \"77RiuC5x\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"image\\\",\\\"remove\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"remove\\\",\\\"action\\\",\\\"image\\\",\\\"gh-image-uploader-with-preview\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.click)('.image-delete');\n      (0, _chai.expect)(remove.calledOnce).to.be.true;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-member-avatar-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-member-avatar', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      this.set('member', {\n        get(key) {\n          if (key === 'name') {\n            return 'Homer Simpson';\n          }\n        }\n\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhMemberAvatar @member={{member}} />\n      */\n      {\n        \"id\": \"27wIMegC\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-member-avatar\\\",[],[[\\\"@member\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"member\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let avatar = this.element;\n      (0, _chai.expect)(avatar).to.exist;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-members-import-table-test\", [\"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-members-import-table', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders members data with all the properties', async function () {\n      this.set('importData', [{\n        name: 'Kevin',\n        email: 'kevin@example.com'\n      }]);\n      this.set('setMapping', () => {});\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  <GhMembersImportTable @data={{this.importData}} @setMapping={{this.setMapping}}/>\n              \n      */\n      {\n        \"id\": \"V9LhZ2F4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[8,\\\"gh-members-import-table\\\",[],[[\\\"@data\\\",\\\"@setMapping\\\"],[[32,0,[\\\"importData\\\"]],[32,0,[\\\"setMapping\\\"]]]],null],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr').length).to.equal(2);\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[0].textContent).to.equal('name');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[1].textContent).to.equal('Kevin');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[2].textContent).to.match(/Not imported/);\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[3].textContent).to.equal('email');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[4].textContent).to.equal('kevin@example.com');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[5].textContent).to.match(/Not imported/);\n    });\n    (0, _mocha.it)('navigates through data when next and previous are clicked', async function () {\n      this.set('importData', [{\n        name: 'Kevin',\n        email: 'kevin@example.com'\n      }, {\n        name: 'Rish',\n        email: 'rish@example.com'\n      }]);\n      this.set('setMapping', () => {});\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  <GhMembersImportTable @data={{this.importData}} @setMapping={{this.setMapping}}/>\n              \n      */\n      {\n        \"id\": \"V9LhZ2F4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[8,\\\"gh-members-import-table\\\",[],[[\\\"@data\\\",\\\"@setMapping\\\"],[[32,0,[\\\"importData\\\"]],[32,0,[\\\"setMapping\\\"]]]],null],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr').length).to.equal(2);\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[0].textContent).to.equal('name');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[1].textContent).to.equal('Kevin');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[2].textContent).to.match(/Not imported/);\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[3].textContent).to.equal('email');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[4].textContent).to.equal('kevin@example.com');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[5].textContent).to.match(/Not imported/);\n      await (0, _testHelpers.click)('[data-test-import-next]');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr').length).to.equal(2);\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[0].textContent).to.equal('name');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[1].textContent).to.equal('Rish');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[2].textContent).to.match(/Not imported/);\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[3].textContent).to.equal('email');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[4].textContent).to.equal('rish@example.com');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[5].textContent).to.match(/Not imported/);\n      await (0, _testHelpers.click)('[data-test-import-prev]');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr').length).to.equal(2);\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[0].textContent).to.equal('name');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[1].textContent).to.equal('Kevin');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[2].textContent).to.match(/Not imported/);\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[3].textContent).to.equal('email');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[4].textContent).to.equal('kevin@example.com');\n      (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[5].textContent).to.match(/Not imported/);\n    });\n    (0, _mocha.it)('cannot navigate through data when only one data item is present', async function () {\n      (0, _mocha.it)('renders members data with all the properties', async function () {\n        this.set('importData', [{\n          name: 'Egg',\n          email: 'egg@example.com'\n        }]);\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                        <GhMembersImportTable @importData={{this.importData}} />\n                    \n        */\n        {\n          \"id\": \"5yIU7ZpY\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n                \\\"],[8,\\\"gh-members-import-table\\\",[],[[\\\"@importData\\\"],[[32,0,[\\\"importData\\\"]]]],null],[2,\\\"\\\\n            \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        await (0, _testHelpers.click)('[data-test-import-prev]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr').length).to.equal(2);\n        (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[0].textContent).to.equal('name');\n        (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[1].textContent).to.equal('Egg');\n        (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[2].textContent).to.equal('email');\n        (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[3].textContent).to.equal('egg@example.com');\n        await (0, _testHelpers.click)('[data-test-import-next]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr').length).to.equal(2);\n        (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[0].textContent).to.equal('name');\n        (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[1].textContent).to.equal('Egg');\n        (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[2].textContent).to.equal('email');\n        (0, _chai.expect)((0, _testHelpers.findAll)('table tbody tr td')[3].textContent).to.equal('egg@example.com');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-navitem-test\", [\"ghost-admin/models/navigation-item\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_navigationItem, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-navitem', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      this.set('baseUrl', 'http://localhost:2368');\n    });\n    (0, _mocha.it)('renders', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url'\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-navitem navItem=navItem baseUrl=baseUrl}}\n      */\n      {\n        \"id\": \"dcfwnbAU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,2],null,[[\\\"navItem\\\",\\\"baseUrl\\\"],[[35,1],[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"baseUrl\\\",\\\"navItem\\\",\\\"gh-navitem\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let item = (0, _testHelpers.find)('.gh-blognav-item');\n      (0, _chai.expect)(item.querySelector('.gh-blognav-grab')).to.exist;\n      (0, _chai.expect)(item.querySelector('.gh-blognav-label')).to.exist;\n      (0, _chai.expect)(item.querySelector('.gh-blognav-url')).to.exist;\n      (0, _chai.expect)(item.querySelector('.gh-blognav-delete')).to.exist; // doesn't show any errors\n\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-blognav-item--error')).to.not.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('.error')).to.not.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('.response')).to.not.be.displayed;\n    });\n    (0, _mocha.it)('doesn\\'t show drag handle for new items', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url',\n        isNew: true\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-navitem navItem=navItem baseUrl=baseUrl}}\n      */\n      {\n        \"id\": \"dcfwnbAU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,2],null,[[\\\"navItem\\\",\\\"baseUrl\\\"],[[35,1],[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"baseUrl\\\",\\\"navItem\\\",\\\"gh-navitem\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let item = (0, _testHelpers.find)('.gh-blognav-item');\n      (0, _chai.expect)(item.querySelector('.gh-blognav-grab')).to.not.exist;\n    });\n    (0, _mocha.it)('shows add button for new items', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url',\n        isNew: true\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-navitem navItem=navItem baseUrl=baseUrl}}\n      */\n      {\n        \"id\": \"dcfwnbAU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,2],null,[[\\\"navItem\\\",\\\"baseUrl\\\"],[[35,1],[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"baseUrl\\\",\\\"navItem\\\",\\\"gh-navitem\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let item = (0, _testHelpers.find)('.gh-blognav-item');\n      (0, _chai.expect)(item.querySelector('.gh-blognav-add')).to.exist;\n      (0, _chai.expect)(item.querySelector('.gh-blognav-delete')).to.not.exist;\n    });\n    (0, _mocha.it)('triggers delete action', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url'\n      }));\n      let deleteActionCallCount = 0;\n      this.set('deleteItem', navItem => {\n        (0, _chai.expect)(navItem).to.equal(this.navItem);\n        deleteActionCallCount += 1;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-navitem navItem=navItem baseUrl=baseUrl deleteItem=(action deleteItem)}}\n      */\n      {\n        \"id\": \"aNqzDpRA\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"navItem\\\",\\\"baseUrl\\\",\\\"deleteItem\\\"],[[35,3],[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"deleteItem\\\",\\\"action\\\",\\\"baseUrl\\\",\\\"navItem\\\",\\\"gh-navitem\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.click)('.gh-blognav-delete');\n      (0, _chai.expect)(deleteActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('triggers add action', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url',\n        isNew: true\n      }));\n      let addActionCallCount = 0;\n      this.set('add', () => {\n        addActionCallCount += 1;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-navitem navItem=navItem baseUrl=baseUrl addItem=(action add)}}\n      */\n      {\n        \"id\": \"Kz3lYDIj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"navItem\\\",\\\"baseUrl\\\",\\\"addItem\\\"],[[35,3],[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"add\\\",\\\"action\\\",\\\"baseUrl\\\",\\\"navItem\\\",\\\"gh-navitem\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.click)('.gh-blognav-add');\n      (0, _chai.expect)(addActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('triggers update url action', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url'\n      }));\n      let updateActionCallCount = 0;\n      this.set('update', value => {\n        updateActionCallCount += 1;\n        return value;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-navitem navItem=navItem baseUrl=baseUrl updateUrl=(action update)}}\n      */\n      {\n        \"id\": \"J/eVVXaT\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"navItem\\\",\\\"baseUrl\\\",\\\"updateUrl\\\"],[[35,3],[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"baseUrl\\\",\\\"navItem\\\",\\\"gh-navitem\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.triggerEvent)('.gh-blognav-url input', 'blur');\n      (0, _chai.expect)(updateActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('triggers update label action', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url'\n      }));\n      let updateActionCallCount = 0;\n      this.set('update', value => {\n        updateActionCallCount += 1;\n        return value;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-navitem navItem=navItem baseUrl=baseUrl updateLabel=(action update)}}\n      */\n      {\n        \"id\": \"3VxHwCcn\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"navItem\\\",\\\"baseUrl\\\",\\\"updateLabel\\\"],[[35,3],[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"baseUrl\\\",\\\"navItem\\\",\\\"gh-navitem\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.triggerEvent)('.gh-blognav-label input', 'blur');\n      (0, _chai.expect)(updateActionCallCount).to.equal(2);\n    });\n    (0, _mocha.it)('displays inline errors', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: '',\n        url: ''\n      }));\n      this.navItem.validate();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-navitem navItem=navItem baseUrl=baseUrl}}\n      */\n      {\n        \"id\": \"dcfwnbAU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,2],null,[[\\\"navItem\\\",\\\"baseUrl\\\"],[[35,1],[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"baseUrl\\\",\\\"navItem\\\",\\\"gh-navitem\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let item = (0, _testHelpers.find)('.gh-blognav-item');\n      (0, _chai.expect)(item).to.have.class('gh-blognav-item--error');\n      (0, _chai.expect)(item.querySelector('.gh-blognav-label')).to.have.class('error');\n      (0, _chai.expect)(item.querySelector('.gh-blognav-label .response')).to.have.trimmed.text('You must specify a label');\n      (0, _chai.expect)(item.querySelector('.gh-blognav-url')).to.have.class('error');\n      (0, _chai.expect)(item.querySelector('.gh-blognav-url .response')).to.have.trimmed.text('You must specify a URL or relative path');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-navitem-url-input-test\", [\"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  // we want baseUrl to match the running domain so relative URLs are\n  // handled as expected (browser auto-sets the domain when using a.href)\n  let currentUrl = `${window.location.protocol}//${window.location.host}/`;\n  (0, _mocha.describe)('Integration: Component: gh-navitem-url-input', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      // set defaults\n      this.set('baseUrl', currentUrl);\n      this.set('url', '');\n      this.set('isNew', false);\n      this.set('clearErrors', function () {\n        return null;\n      });\n    });\n    (0, _mocha.it)('renders correctly with blank url', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"30CYcInz\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,5],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"clearErrors\\\"],[[35,4],[35,3],[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('input')).to.have.length(1);\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.class('gh-input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(currentUrl);\n    });\n    (0, _mocha.it)('renders correctly with relative urls', async function () {\n      this.set('url', '/about');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"30CYcInz\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,5],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"clearErrors\\\"],[[35,4],[35,3],[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(`${currentUrl}about`);\n      this.set('url', '/about#contact');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(`${currentUrl}about#contact`);\n    });\n    (0, _mocha.it)('renders correctly with absolute urls', async function () {\n      this.set('url', 'https://example.com:2368/#test');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"30CYcInz\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,5],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"clearErrors\\\"],[[35,4],[35,3],[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('https://example.com:2368/#test');\n      this.set('url', 'mailto:test@example.com');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('mailto:test@example.com');\n      this.set('url', 'tel:01234-5678-90');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('tel:01234-5678-90');\n      this.set('url', '//protocol-less-url.com');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('//protocol-less-url.com');\n      this.set('url', '#anchor');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('#anchor');\n    });\n    (0, _mocha.it)('deletes base URL on backspace', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"30CYcInz\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,5],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"clearErrors\\\"],[[35,4],[35,3],[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(currentUrl);\n      await (0, _testHelpers.triggerKeyEvent)('input', 'keydown', 8);\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('');\n    });\n    (0, _mocha.it)('deletes base URL on delete', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"30CYcInz\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,5],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"clearErrors\\\"],[[35,4],[35,3],[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(currentUrl);\n      await (0, _testHelpers.triggerKeyEvent)('input', 'keydown', 46);\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('');\n    });\n    (0, _mocha.it)('adds base url to relative urls on blur', async function () {\n      this.set('updateUrl', val => val);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.fillIn)('input', '/about');\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(`${currentUrl}about/`);\n    });\n    (0, _mocha.it)('adds \"mailto:\" to email addresses on blur', async function () {\n      this.set('updateUrl', val => val);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.fillIn)('input', 'test@example.com');\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('mailto:test@example.com'); // ensure we don't double-up on the mailto:\n\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('mailto:test@example.com');\n    });\n    (0, _mocha.it)('doesn\\'t add base url to invalid urls on blur', async function () {\n      this.set('updateUrl', val => val);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n\n      let changeValue = async value => {\n        await (0, _testHelpers.fillIn)('input', value);\n        await (0, _testHelpers.blur)('input');\n      };\n\n      await changeValue('with spaces');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('with spaces');\n      await changeValue('/with spaces');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('/with spaces');\n    });\n    (0, _mocha.it)('doesn\\'t mangle invalid urls on blur', async function () {\n      this.set('updateUrl', val => val);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.fillIn)('input', `${currentUrl} /test`);\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(`${currentUrl} /test`);\n    }); // https://github.com/TryGhost/Ghost/issues/9373\n\n    (0, _mocha.it)('doesn\\'t mangle urls when baseUrl has unicode characters', async function () {\n      this.set('updateUrl', val => val);\n      this.set('baseUrl', 'http://exämple.com');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.fillIn)('input', `${currentUrl}/test`);\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(`${currentUrl}/test`);\n    });\n    (0, _mocha.it)('triggers \"update\" action on blur', async function () {\n      let changeActionCallCount = 0;\n      this.set('updateUrl', val => {\n        changeActionCallCount += 1;\n        return val;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.click)('input');\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)(changeActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('triggers \"update\" action on enter', async function () {\n      let changeActionCallCount = 0;\n      this.set('updateUrl', val => {\n        changeActionCallCount += 1;\n        return val;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.triggerKeyEvent)('input', 'keypress', 13);\n      (0, _chai.expect)(changeActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('triggers \"update\" action on CMD-S', async function () {\n      let changeActionCallCount = 0;\n      this.set('updateUrl', val => {\n        changeActionCallCount += 1;\n        return val;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.triggerKeyEvent)('input', 'keydown', 83, {\n        metaKey: true\n      });\n      (0, _chai.expect)(changeActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('sends absolute urls straight through to update action', async function () {\n      let lastSeenUrl = '';\n      this.set('updateUrl', url => {\n        lastSeenUrl = url;\n        return url;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n\n      let testUrl = async url => {\n        await (0, _testHelpers.fillIn)('input', url);\n        await (0, _testHelpers.blur)('input');\n        (0, _chai.expect)(lastSeenUrl).to.equal(url);\n      };\n\n      await testUrl('http://example.com');\n      await testUrl('http://example.com/');\n      await testUrl('https://example.com');\n      await testUrl('//example.com');\n      await testUrl('//localhost:1234');\n      await testUrl('#anchor');\n      await testUrl('mailto:test@example.com');\n      await testUrl('tel:12345-567890');\n      await testUrl('javascript:alert(\"testing\");');\n    });\n    (0, _mocha.it)('strips base url from relative urls before sending to update action', async function () {\n      let lastSeenUrl = '';\n      this.set('updateUrl', url => {\n        lastSeenUrl = url;\n        return url;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n\n      let testUrl = async url => {\n        await (0, _testHelpers.fillIn)('input', `${currentUrl}${url}`);\n        await (0, _testHelpers.blur)('input');\n        (0, _chai.expect)(lastSeenUrl).to.equal(`/${url}`);\n      };\n\n      await testUrl('about/');\n      await testUrl('about#contact');\n      await testUrl('test/nested/');\n    });\n    (0, _mocha.it)('handles links to subdomains of blog domain', async function () {\n      let expectedUrl = '';\n      this.set('baseUrl', 'http://example.com/');\n      this.set('updateUrl', url => {\n        (0, _chai.expect)(url).to.equal(expectedUrl);\n        return url;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      expectedUrl = 'http://test.example.com/';\n      await (0, _testHelpers.fillIn)('input', expectedUrl);\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(expectedUrl);\n    });\n    (0, _mocha.it)('adds trailing slash to relative URL', async function () {\n      let lastSeenUrl = '';\n      this.set('updateUrl', url => {\n        lastSeenUrl = url;\n        return url;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n\n      let testUrl = async url => {\n        await (0, _testHelpers.fillIn)('input', `${currentUrl}${url}`);\n        await (0, _testHelpers.blur)('input');\n        (0, _chai.expect)(lastSeenUrl).to.equal(`/${url}/`);\n      };\n\n      await testUrl('about');\n      await testUrl('test/nested');\n    });\n    (0, _mocha.it)('does not add trailing slash on relative URL with [.?#]', async function () {\n      let lastSeenUrl = '';\n      this.set('updateUrl', url => {\n        lastSeenUrl = url;\n        return url;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n\n      let testUrl = async url => {\n        await (0, _testHelpers.fillIn)('input', `${currentUrl}${url}`);\n        await (0, _testHelpers.blur)('input');\n        (0, _chai.expect)(lastSeenUrl).to.equal(`/${url}`);\n      };\n\n      await testUrl('about#contact');\n      await testUrl('test/nested.svg');\n      await testUrl('test?gho=sties');\n      await testUrl('test/nested?sli=mer');\n    });\n    (0, _mocha.it)('does not add trailing slash on non-relative URLs', async function () {\n      let lastSeenUrl = '';\n      this.set('updateUrl', url => {\n        lastSeenUrl = url;\n        return url;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n              \n      */\n      {\n        \"id\": \"7Snn0gaQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n\n      let testUrl = async url => {\n        await (0, _testHelpers.fillIn)('input', url);\n        await (0, _testHelpers.blur)('input');\n        (0, _chai.expect)(lastSeenUrl).to.equal(url);\n      };\n\n      await testUrl('http://woo.ff/test');\n      await testUrl('http://me.ow:2342/nested/test');\n      await testUrl('https://wro.om/car#race');\n      await testUrl('https://kabo.om/explosion?really=now');\n    });\n    (0, _mocha.describe)('with sub-folder baseUrl', function () {\n      beforeEach(function () {\n        this.set('baseUrl', `${currentUrl}blog/`);\n      });\n      (0, _mocha.it)('handles URLs relative to base url', async function () {\n        let lastSeenUrl = '';\n        this.set('updateUrl', url => {\n          lastSeenUrl = url;\n          return url;\n        });\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                        {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n                    \n        */\n        {\n          \"id\": \"E50Dd0YV\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n                \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n            \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n\n        let testUrl = async url => {\n          await (0, _testHelpers.fillIn)('input', `${currentUrl}blog${url}`);\n          await (0, _testHelpers.blur)('input');\n          (0, _chai.expect)(lastSeenUrl).to.equal(url);\n        };\n\n        await testUrl('/about/');\n        await testUrl('/about#contact');\n        await testUrl('/test/nested/');\n      });\n      (0, _mocha.it)('handles URLs relative to base host', async function () {\n        let lastSeenUrl = '';\n        this.set('updateUrl', url => {\n          lastSeenUrl = url;\n          return url;\n        });\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                        {{gh-navitem-url-input baseUrl=baseUrl url=url isNew=isNew update=(action updateUrl) clearErrors=(action clearErrors)}}\n                    \n        */\n        {\n          \"id\": \"E50Dd0YV\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n                \\\"],[1,[30,[36,6],null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[35,5],[35,4],[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n            \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"clearErrors\\\",\\\"action\\\",\\\"updateUrl\\\",\\\"isNew\\\",\\\"url\\\",\\\"baseUrl\\\",\\\"gh-navitem-url-input\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n\n        let testUrl = async url => {\n          await (0, _testHelpers.fillIn)('input', url);\n          await (0, _testHelpers.blur)('input');\n          (0, _chai.expect)(lastSeenUrl).to.equal(url);\n        };\n\n        await testUrl(`http://${window.location.host}`);\n        await testUrl(`https://${window.location.host}`);\n        await testUrl(`http://${window.location.host}/`);\n        await testUrl(`https://${window.location.host}/`);\n        await testUrl(`http://${window.location.host}/test`);\n        await testUrl(`https://${window.location.host}/test`);\n        await testUrl(`http://${window.location.host}/#test`);\n        await testUrl(`https://${window.location.host}/#test`);\n        await testUrl(`http://${window.location.host}/another/folder`);\n        await testUrl(`https://${window.location.host}/another/folder`);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-notification-test\", [\"sinon\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-notification', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      this.set('message', {\n        message: 'Test message',\n        type: 'success'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-notification message=message}}\n      */\n      {\n        \"id\": \"QQ9R5bOw\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"message\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"message\\\",\\\"gh-notification\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('article.gh-notification')).to.exist;\n      let notification = (0, _testHelpers.find)('.gh-notification');\n      (0, _chai.expect)(notification).to.have.class('gh-notification-passive');\n      (0, _chai.expect)(notification).to.contain.text('Test message');\n    });\n    (0, _mocha.it)('maps message types to CSS classes', async function () {\n      this.set('message', {\n        message: 'Test message',\n        type: 'success'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-notification message=message}}\n      */\n      {\n        \"id\": \"QQ9R5bOw\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"message\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"message\\\",\\\"gh-notification\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let notification = (0, _testHelpers.find)('.gh-notification');\n      this.set('message.type', 'error');\n      (0, _chai.expect)(notification, 'success class is red').to.have.class('gh-notification-red');\n      this.set('message.type', 'warn');\n      (0, _chai.expect)(notification, 'success class is yellow').to.have.class('gh-notification-yellow');\n    });\n    (0, _mocha.it)('closes notification through notifications service', async function () {\n      let message = {\n        message: 'Test close',\n        type: 'success'\n      };\n      this.set('message', message);\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.closeNotification = _sinon.default.stub();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-notification message=message}}\n      */\n      {\n        \"id\": \"QQ9R5bOw\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"message\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"message\\\",\\\"gh-notification\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-notification')).to.exist;\n      await (0, _testHelpers.click)('[data-test-button=\"close-notification\"]');\n      (0, _chai.expect)(notifications.closeNotification.calledWith(message)).to.be.true;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-notifications-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  let notificationsStub = Ember.Service.extend({\n    notifications: Ember.A()\n  });\n  (0, _mocha.describe)('Integration: Component: gh-notifications', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      this.owner.register('service:notifications', notificationsStub);\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('notifications', [{\n        message: 'First',\n        type: 'error'\n      }, {\n        message: 'Second',\n        type: 'warn'\n      }]);\n    });\n    (0, _mocha.it)('renders', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-notifications}}\n      */\n      {\n        \"id\": \"Cv5B+bat\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"gh-notifications\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-notifications')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-notifications').children.length).to.equal(2);\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('notifications', Ember.A());\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-notifications').children.length).to.equal(0);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-profile-image-test\", [\"pretender\", \"blueimp-md5\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\", \"ember-concurrency\"], function (_pretender, _blueimpMd, _mocha, _chai, _testHelpers, _emberMocha, _emberConcurrency) {\n  \"use strict\";\n\n  let pathsStub = Ember.Service.extend({\n    assetRoot: '/ghost/assets/',\n\n    init() {\n      this._super(...arguments);\n\n      this.url = {\n        api() {\n          return '';\n        },\n\n        asset(src) {\n          return src;\n        }\n\n      };\n    }\n\n  });\n\n  const stubKnownGravatar = function (server) {\n    server.get('http://www.gravatar.com/avatar/:md5', function () {\n      return [200, {\n        'Content-Type': 'image/png'\n      }, ''];\n    });\n    server.head('http://www.gravatar.com/avatar/:md5', function () {\n      return [200, {\n        'Content-Type': 'image/png'\n      }, ''];\n    });\n  };\n\n  const stubUnknownGravatar = function (server) {\n    server.get('http://www.gravatar.com/avatar/:md5', function () {\n      return [404, {}, ''];\n    });\n    server.head('http://www.gravatar.com/avatar/:md5', function () {\n      return [404, {}, ''];\n    });\n  };\n\n  let configStubuseGravatar = Ember.Service.extend({\n    useGravatar: true\n  });\n  (0, _mocha.describe)('Integration: Component: gh-profile-image', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      this.owner.register('service:ghost-paths', pathsStub);\n      this.owner.register('service:config', configStubuseGravatar);\n      server = new _pretender.default();\n      stubKnownGravatar(server);\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('renders', async function () {\n      this.set('email', '');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-profile-image email=email}}\n              \n      */\n      {\n        \"id\": \"gjpZ8Zlp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,1],null,[[\\\"email\\\"],[[35,0]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"email\\\",\\\"gh-profile-image\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.account-image')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('.placeholder-img')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('input[type=\"file\"]')).to.exist;\n    });\n    (0, _mocha.it)('renders default image if no email supplied', async function () {\n      this.set('email', null);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-profile-image email=email size=100 debounce=50}}\n              \n      */\n      {\n        \"id\": \"r47OBKhY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,1],null,[[\\\"email\\\",\\\"size\\\",\\\"debounce\\\"],[[35,0],100,50]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"email\\\",\\\"gh-profile-image\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), 'gravatar image style').to.have.attribute('style', 'display: none');\n    });\n    (0, _mocha.it)('renders the gravatar if valid email supplied and privacy.useGravatar allows it', async function () {\n      let email = 'test@example.com';\n      let expectedUrl = `//www.gravatar.com/avatar/${(0, _blueimpMd.default)(email)}?s=100&d=404`;\n      this.set('email', email);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-profile-image email=email size=100 debounce=50}}\n              \n      */\n      {\n        \"id\": \"r47OBKhY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,1],null,[[\\\"email\\\",\\\"size\\\",\\\"debounce\\\"],[[35,0],100,50]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"email\\\",\\\"gh-profile-image\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), 'gravatar image style').to.have.attribute('style', `background-image: url(${expectedUrl}); display: block`);\n    });\n    (0, _mocha.it)('doesn\\'t render the gravatar if valid email supplied but privacy.useGravatar forbids it', async function () {\n      let config = this.owner.lookup('service:config');\n      let email = 'test@example.com';\n      this.set('email', email);\n      config.set('useGravatar', false);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-profile-image email=email size=100 debounce=50}}\n              \n      */\n      {\n        \"id\": \"r47OBKhY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,1],null,[[\\\"email\\\",\\\"size\\\",\\\"debounce\\\"],[[35,0],100,50]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"email\\\",\\\"gh-profile-image\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), 'gravatar image style').to.have.attribute('style', 'display: none');\n    });\n    (0, _mocha.it)('doesn\\'t add background url if gravatar image doesn\\'t exist', async function () {\n      stubUnknownGravatar(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-profile-image email=\"test@example.com\" size=100 debounce=50}}\n              \n      */\n      {\n        \"id\": \"w9KPnGIc\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,0],null,[[\\\"email\\\",\\\"size\\\",\\\"debounce\\\"],[\\\"test@example.com\\\",100,50]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"gh-profile-image\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), 'gravatar image style').to.have.attribute('style', 'background-image: url(); display: none');\n    }); // skipped due to random failures on Travis - https://github.com/TryGhost/Ghost/issues/10308\n\n    _mocha.it.skip('throttles gravatar loading as email is changed', async function () {\n      let email = 'test@example.com';\n      let expectedUrl = `//www.gravatar.com/avatar/${(0, _blueimpMd.default)(email)}?s=100&d=404`;\n      this.set('email', 'test');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-profile-image email=email size=100 debounce=300}}\n              \n      */\n      {\n        \"id\": \"MmSFzQtt\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,1],null,[[\\\"email\\\",\\\"size\\\",\\\"debounce\\\"],[[35,0],100,300]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"email\\\",\\\"gh-profile-image\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      this.set('email', email);\n      await (0, _emberConcurrency.timeout)(50);\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), '.gravatar-img background not immediately changed on email change').to.have.attribute('style', 'display: none');\n      await (0, _emberConcurrency.timeout)(250);\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), '.gravatar-img background still not changed before debounce timeout').to.have.attribute('style', 'display: none');\n      await (0, _emberConcurrency.timeout)(100);\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), '.gravatar-img background changed after debounce timeout').to.have.attribute('style', `background-image: url(${expectedUrl}); display: block`);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-psm-tags-input-test\", [\"ghost-admin/mirage/config/posts\", \"ghost-admin/mirage/config/themes\", \"@ember/test-helpers\", \"ember-power-select/test-support/helpers\", \"mocha\", \"chai\", \"ember-mocha\", \"ghost-admin/initializers/ember-cli-mirage\", \"ember-concurrency\"], function (_posts, _themes, _testHelpers, _helpers, _mocha, _chai, _emberMocha, _emberCliMirage, _emberConcurrency) {\n  \"use strict\";\n\n  // NOTE: although Mirage has posts<->tags relationship and can respond\n  // to :post-id/?include=tags all ordering information is lost so we\n  // need to build the tags array manually\n  const assignPostWithTags = async function postWithTags(context) {\n    let post = await context.store.findRecord('post', 1);\n    let tags = await context.store.findAll('tag');\n\n    for (var _len = arguments.length, slugs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      slugs[_key - 1] = arguments[_key];\n    }\n\n    slugs.forEach(slug => {\n      post.get('tags').pushObject(tags.findBy('slug', slug));\n    });\n    context.set('post', post);\n    await (0, _testHelpers.settled)();\n  };\n\n  (0, _mocha.describe)('Integration: Component: gh-psm-tags-input', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = (0, _emberCliMirage.startMirage)();\n      let author = server.create('user');\n      (0, _posts.default)(server);\n      (0, _themes.default)(server);\n      server.create('post', {\n        authors: [author]\n      });\n      server.create('tag', {\n        name: 'Tag 1',\n        slug: 'one'\n      });\n      server.create('tag', {\n        name: '#Tag 2',\n        visibility: 'internal',\n        slug: 'two'\n      });\n      server.create('tag', {\n        name: 'Tag 3',\n        slug: 'three'\n      });\n      server.create('tag', {\n        name: 'Tag 4',\n        slug: 'four'\n      });\n      this.set('store', this.owner.lookup('service:store'));\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('shows selected tags on render', async function () {\n      await assignPostWithTags(this, 'one', 'three');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-psm-tags-input post=post}}\n      */\n      {\n        \"id\": \"lc1mhq6Y\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"post\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"post\\\",\\\"gh-psm-tags-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let selected = (0, _testHelpers.findAll)('.tag-token');\n      (0, _chai.expect)(selected.length).to.equal(2);\n      (0, _chai.expect)(selected[0]).to.contain.text('Tag 1');\n      (0, _chai.expect)(selected[1]).to.contain.text('Tag 3');\n    }); // skipped because FF 85 on Linux (CI) is failing. FF 85 on mac is fine.\n    // possible difference in `localeCompare()` across systems\n\n    _mocha.it.skip('exposes all tags as options sorted alphabetically', async function () {\n      this.set('post', this.store.findRecord('post', 1));\n      await (0, _testHelpers.settled)();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-psm-tags-input post=post}}\n      */\n      {\n        \"id\": \"lc1mhq6Y\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"post\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"post\\\",\\\"gh-psm-tags-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _helpers.clickTrigger)();\n      await (0, _testHelpers.settled)(); // unsure why settled() is sometimes not catching the update\n\n      await (0, _emberConcurrency.timeout)(100);\n      let options = (0, _testHelpers.findAll)('.ember-power-select-option');\n      (0, _chai.expect)(options.length).to.equal(4);\n      (0, _chai.expect)(options[0]).to.contain.text('Tag 1');\n      (0, _chai.expect)(options[1]).to.contain.text('#Tag 2');\n      (0, _chai.expect)(options[2]).to.contain.text('Tag 3');\n      (0, _chai.expect)(options[3]).to.contain.text('Tag 4');\n    });\n\n    (0, _mocha.it)('matches options on lowercase tag names', async function () {\n      this.set('post', this.store.findRecord('post', 1));\n      await (0, _testHelpers.settled)();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-psm-tags-input post=post}}\n      */\n      {\n        \"id\": \"lc1mhq6Y\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"post\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"post\\\",\\\"gh-psm-tags-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _helpers.clickTrigger)();\n      await (0, _helpers.typeInSearch)('2');\n      await (0, _testHelpers.settled)(); // unsure why settled() is sometimes not catching the update\n\n      await (0, _emberConcurrency.timeout)(100);\n      let options = (0, _testHelpers.findAll)('.ember-power-select-option');\n      (0, _chai.expect)(options.length).to.equal(2);\n      (0, _chai.expect)(options[0]).to.contain.text('Add \"2\"...');\n      (0, _chai.expect)(options[1]).to.contain.text('Tag 2');\n    });\n    (0, _mocha.it)('hides create option on exact matches', async function () {\n      this.set('post', this.store.findRecord('post', 1));\n      await (0, _testHelpers.settled)();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-psm-tags-input post=post}}\n      */\n      {\n        \"id\": \"lc1mhq6Y\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"post\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"post\\\",\\\"gh-psm-tags-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _helpers.clickTrigger)();\n      await (0, _helpers.typeInSearch)('#Tag 2');\n      await (0, _testHelpers.settled)(); // unsure why settled() is sometimes not catching the update\n\n      await (0, _emberConcurrency.timeout)(100);\n      let options = (0, _testHelpers.findAll)('.ember-power-select-option');\n      (0, _chai.expect)(options.length).to.equal(1);\n      (0, _chai.expect)(options[0]).to.contain.text('#Tag 2');\n    });\n    (0, _mocha.it)('highlights internal tags', async function () {\n      await assignPostWithTags(this, 'two', 'three');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-psm-tags-input post=post}}\n      */\n      {\n        \"id\": \"lc1mhq6Y\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"post\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"post\\\",\\\"gh-psm-tags-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let selected = (0, _testHelpers.findAll)('.tag-token');\n      (0, _chai.expect)(selected.length).to.equal(2);\n      (0, _chai.expect)(selected[0]).to.have.class('tag-token--internal');\n      (0, _chai.expect)(selected[1]).to.not.have.class('tag-token--internal');\n    });\n    (0, _mocha.describe)('updateTags', function () {\n      (0, _mocha.it)('modifies post.tags', async function () {\n        await assignPostWithTags(this, 'two', 'three');\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{gh-psm-tags-input post=post}}\n        */\n        {\n          \"id\": \"lc1mhq6Y\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"post\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"post\\\",\\\"gh-psm-tags-input\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        await (0, _helpers.selectChoose)('.ember-power-select-trigger', 'Tag 1');\n        (0, _chai.expect)(this.post.tags.mapBy('name').join(',')).to.equal('#Tag 2,Tag 3,Tag 1');\n      }); // TODO: skipped due to consistently random failures on Travis\n      // '#ember-basic-dropdown-content-ember17494 Add \"New\"...' is not a valid selector\n      // https://github.com/TryGhost/Ghost/issues/10308\n\n      _mocha.it.skip('destroys new tag records when not selected', async function () {\n        await assignPostWithTags(this, 'two', 'three');\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{gh-psm-tags-input post=post}}\n        */\n        {\n          \"id\": \"lc1mhq6Y\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"post\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"post\\\",\\\"gh-psm-tags-input\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        await (0, _helpers.clickTrigger)();\n        await (0, _helpers.typeInSearch)('New');\n        await (0, _testHelpers.settled)();\n        await (0, _helpers.selectChoose)('.ember-power-select-trigger', 'Add \"New\"...');\n        let tags = await this.store.peekAll('tag');\n        (0, _chai.expect)(tags.length).to.equal(5);\n        let removeBtns = (0, _testHelpers.findAll)('.ember-power-select-multiple-remove-btn');\n        await (0, _testHelpers.click)(removeBtns[removeBtns.length - 1]);\n        tags = await this.store.peekAll('tag');\n        (0, _chai.expect)(tags.length).to.equal(4);\n      });\n    });\n    (0, _mocha.describe)('createTag', function () {\n      (0, _mocha.it)('creates new records', async function () {\n        await assignPostWithTags(this, 'two', 'three');\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{gh-psm-tags-input post=post}}\n        */\n        {\n          \"id\": \"lc1mhq6Y\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"post\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"post\\\",\\\"gh-psm-tags-input\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        await (0, _helpers.clickTrigger)();\n        await (0, _helpers.typeInSearch)('New One');\n        await (0, _testHelpers.settled)();\n        await (0, _helpers.selectChoose)('.ember-power-select-trigger', '.ember-power-select-option', 0);\n        await (0, _helpers.typeInSearch)('New Two');\n        await (0, _testHelpers.settled)();\n        await (0, _helpers.selectChoose)('.ember-power-select-trigger', '.ember-power-select-option', 0);\n        let tags = await this.store.peekAll('tag');\n        (0, _chai.expect)(tags.length).to.equal(6);\n        (0, _chai.expect)(tags.findBy('name', 'New One').isNew).to.be.true;\n        (0, _chai.expect)(tags.findBy('name', 'New Two').isNew).to.be.true;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-psm-template-select-test\", [\"ghost-admin/mirage/config/themes\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\", \"ghost-admin/initializers/ember-cli-mirage\"], function (_themes, _mocha, _chai, _testHelpers, _emberMocha, _emberCliMirage) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-psm-template-select', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = (0, _emberCliMirage.startMirage)();\n      server.create('theme', {\n        active: true,\n        name: 'example-theme',\n        package: {\n          name: 'Example Theme',\n          version: '0.1'\n        },\n        templates: [{\n          filename: 'custom-news-bulletin.hbs',\n          name: 'News Bulletin',\n          for: ['post', 'page'],\n          slug: null\n        }, {\n          filename: 'custom-big-images.hbs',\n          name: 'Big Images',\n          for: ['post', 'page'],\n          slug: null\n        }, {\n          filename: 'post-one.hbs',\n          name: 'One',\n          for: ['post'],\n          slug: 'one'\n        }, {\n          filename: 'page-about.hbs',\n          name: 'About',\n          for: ['page'],\n          slug: 'about'\n        }]\n      });\n      (0, _themes.default)(server);\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('disables template selector if slug matches post template', async function () {\n      this.set('post', {\n        slug: 'one',\n        constructor: {\n          modelName: 'post'\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-psm-template-select post=post}}\n      */\n      {\n        \"id\": \"90f57fuh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"post\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"post\\\",\\\"gh-psm-template-select\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('select').disabled, 'select is disabled').to.be.true;\n      (0, _chai.expect)((0, _testHelpers.find)('p')).to.contain.text('post-one.hbs');\n    });\n    (0, _mocha.it)('disables template selector if slug matches page template', async function () {\n      this.set('post', {\n        slug: 'about',\n        constructor: {\n          modelName: 'page'\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-psm-template-select post=post}}\n      */\n      {\n        \"id\": \"90f57fuh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"post\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"post\\\",\\\"gh-psm-template-select\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('select').disabled, 'select is disabled').to.be.true;\n      (0, _chai.expect)((0, _testHelpers.find)('p')).to.contain.text('page-about.hbs');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-psm-visibility-input-test\", [\"sinon\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-psm-visibility-input', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      this.set('post', {\n        visibility: 'members'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-psm-visibility-input post=post}}\n      */\n      {\n        \"id\": \"UXt6Ndbp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"post\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"post\\\",\\\"gh-psm-visibility-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element, 'top-level elements').to.exist;\n      (0, _chai.expect)((0, _testHelpers.findAll)('option'), 'number of options').to.have.length(3);\n      (0, _chai.expect)((0, _testHelpers.find)('select').value, 'selected option value').to.equal('members');\n    });\n    (0, _mocha.it)('updates post visibility on change', async function () {\n      let setVisibility = _sinon.default.spy();\n\n      this.set('post', {\n        visibility: 'public',\n        set: setVisibility\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-psm-visibility-input post=post}}\n      */\n      {\n        \"id\": \"UXt6Ndbp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"post\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"post\\\",\\\"gh-psm-visibility-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element, 'top-level elements').to.exist;\n      (0, _chai.expect)((0, _testHelpers.findAll)('option'), 'number of options').to.have.length(3);\n      (0, _chai.expect)((0, _testHelpers.find)('select').value, 'selected option value').to.equal('public');\n      await (0, _testHelpers.fillIn)('select', 'paid');\n      await (0, _testHelpers.blur)('select');\n      (0, _chai.expect)(setVisibility.calledTwice).to.be.true;\n      (0, _chai.expect)(setVisibility.calledWith('visibility', 'paid')).to.be.true;\n      (0, _chai.expect)(setVisibility.calledWith('visibilityFilter', null)).to.be.true;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-search-input-test\", [\"pretender\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_pretender, _mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-search-input', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('renders', async function () {\n      // renders the component on the page\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-search-input}}\n      */\n      {\n        \"id\": \"mvERPCmV\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"gh-search-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.ember-power-select-search input')).to.exist;\n    });\n    (0, _mocha.it)('opens the dropdown on text entry', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-search-input}}\n      */\n      {\n        \"id\": \"mvERPCmV\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"gh-search-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.fillIn)('input[type=\"search\"]', 'test');\n      (0, _chai.expect)((0, _testHelpers.findAll)('.ember-basic-dropdown-content').length).to.equal(1);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-tag-settings-form-test\", [\"ember-data\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_emberData, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  // TODO: remove usage of Ember Data's private `Errors` class when refactoring validations\n  // eslint-disable-next-line\n  const {\n    Errors\n  } = _emberData.default;\n  let configStub = Ember.Service.extend({\n    blogUrl: 'http://localhost:2368'\n  });\n  let mediaQueriesStub = Ember.Service.extend({\n    maxWidth600: false\n  });\n\n  _mocha.describe.skip('Integration: Component: gh-tag-settings-form', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      /* eslint-disable camelcase */\n      let tag = Ember.Object.create({\n        id: 1,\n        name: 'Test',\n        slug: 'test',\n        description: 'Description.',\n        metaTitle: 'Meta Title',\n        metaDescription: 'Meta description',\n        errors: Errors.create(),\n        hasValidated: []\n      });\n      /* eslint-enable camelcase */\n\n      this.set('tag', tag);\n      this.set('setProperty', function (property, value) {\n        // this should be overridden if a call is expected\n        // eslint-disable-next-line no-console\n        console.error(`setProperty called '${property}: ${value}'`);\n      });\n      this.owner.register('service:config', configStub);\n      this.owner.register('service:media-queries', mediaQueriesStub);\n    });\n    (0, _mocha.it)('has the correct title', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty)}}\n              \n      */\n      {\n        \"id\": \"jFHwMgo8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,3],null,[[\\\"tag\\\",\\\"setProperty\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"setProperty\\\",\\\"action\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane h4').textContent, 'existing tag title').to.equal('Tag settings');\n      this.set('tag.isNew', true);\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane h4').textContent, 'new tag title').to.equal('New tag');\n    });\n    (0, _mocha.it)('renders main settings', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty)}}\n              \n      */\n      {\n        \"id\": \"jFHwMgo8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,3],null,[[\\\"tag\\\",\\\"setProperty\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"setProperty\\\",\\\"action\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('.gh-image-uploader').length, 'displays image uploader').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('input[name=\"name\"]').value, 'name field value').to.equal('Test');\n      (0, _chai.expect)((0, _testHelpers.find)('input[name=\"slug\"]').value, 'slug field value').to.equal('test');\n      (0, _chai.expect)((0, _testHelpers.find)('textarea[name=\"description\"]').value, 'description field value').to.equal('Description.');\n      (0, _chai.expect)((0, _testHelpers.find)('input[name=\"metaTitle\"]').value, 'metaTitle field value').to.equal('Meta Title');\n      (0, _chai.expect)((0, _testHelpers.find)('textarea[name=\"metaDescription\"]').value, 'metaDescription field value').to.equal('Meta description');\n    });\n    (0, _mocha.it)('can switch between main/meta settings', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty)}}\n              \n      */\n      {\n        \"id\": \"jFHwMgo8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,3],null,[[\\\"tag\\\",\\\"setProperty\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"setProperty\\\",\\\"action\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane').classList.contains('settings-menu-pane-in'), 'main settings are displayed by default').to.be.true;\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-meta-settings-pane').classList.contains('settings-menu-pane-out-right'), 'meta settings are hidden by default').to.be.true;\n      await (0, _testHelpers.click)('.meta-data-button');\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane').classList.contains('settings-menu-pane-out-left'), 'main settings are hidden after clicking Meta Data button').to.be.true;\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-meta-settings-pane').classList.contains('settings-menu-pane-in'), 'meta settings are displayed after clicking Meta Data button').to.be.true;\n      await (0, _testHelpers.click)('.back');\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane').classList.contains('settings-menu-pane-in'), 'main settings are displayed after clicking \"back\"').to.be.true;\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-meta-settings-pane').classList.contains('settings-menu-pane-out-right'), 'meta settings are hidden after clicking \"back\"').to.be.true;\n    });\n    (0, _mocha.it)('has one-way binding for properties', async function () {\n      this.set('setProperty', function () {// noop\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty)}}\n              \n      */\n      {\n        \"id\": \"jFHwMgo8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,3],null,[[\\\"tag\\\",\\\"setProperty\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"setProperty\\\",\\\"action\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.fillIn)('input[name=\"name\"]', 'New name');\n      await (0, _testHelpers.fillIn)('input[name=\"slug\"]', 'new-slug');\n      await (0, _testHelpers.fillIn)('textarea[name=\"description\"]', 'New description');\n      await (0, _testHelpers.fillIn)('input[name=\"metaTitle\"]', 'New metaTitle');\n      await (0, _testHelpers.fillIn)('textarea[name=\"metaDescription\"]', 'New metaDescription');\n      (0, _chai.expect)(this.get('tag.name'), 'tag name').to.equal('Test');\n      (0, _chai.expect)(this.get('tag.slug'), 'tag slug').to.equal('test');\n      (0, _chai.expect)(this.get('tag.description'), 'tag description').to.equal('Description.');\n      (0, _chai.expect)(this.get('tag.metaTitle'), 'tag metaTitle').to.equal('Meta Title');\n      (0, _chai.expect)(this.get('tag.metaDescription'), 'tag metaDescription').to.equal('Meta description');\n    });\n    (0, _mocha.it)('triggers setProperty action on blur of all fields', async function () {\n      let lastSeenProperty = '';\n      let lastSeenValue = '';\n      this.set('setProperty', function (property, value) {\n        lastSeenProperty = property;\n        lastSeenValue = value;\n      });\n\n      let testSetProperty = async (selector, expectedProperty, expectedValue) => {\n        await (0, _testHelpers.click)(selector);\n        await (0, _testHelpers.fillIn)(selector, expectedValue);\n        await (0, _testHelpers.blur)(selector);\n        (0, _chai.expect)(lastSeenProperty, 'property').to.equal(expectedProperty);\n        (0, _chai.expect)(lastSeenValue, 'value').to.equal(expectedValue);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty)}}\n              \n      */\n      {\n        \"id\": \"jFHwMgo8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,3],null,[[\\\"tag\\\",\\\"setProperty\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"setProperty\\\",\\\"action\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await testSetProperty('input[name=\"name\"]', 'name', 'New name');\n      await testSetProperty('input[name=\"slug\"]', 'slug', 'new-slug');\n      await testSetProperty('textarea[name=\"description\"]', 'description', 'New description');\n      await testSetProperty('input[name=\"metaTitle\"]', 'metaTitle', 'New metaTitle');\n      await testSetProperty('textarea[name=\"metaDescription\"]', 'metaDescription', 'New metaDescription');\n    });\n    (0, _mocha.it)('displays error messages for validated fields', async function () {\n      let errors = this.get('tag.errors');\n      let hasValidated = this.get('tag.hasValidated');\n      errors.add('name', 'must be present');\n      hasValidated.push('name');\n      errors.add('slug', 'must be present');\n      hasValidated.push('slug');\n      errors.add('description', 'is too long');\n      hasValidated.push('description');\n      errors.add('metaTitle', 'is too long');\n      hasValidated.push('metaTitle');\n      errors.add('metaDescription', 'is too long');\n      hasValidated.push('metaDescription');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty)}}\n              \n      */\n      {\n        \"id\": \"jFHwMgo8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,3],null,[[\\\"tag\\\",\\\"setProperty\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"setProperty\\\",\\\"action\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let nameFormGroup = (0, _testHelpers.find)('input[name=\"name\"]').closest('.form-group');\n      (0, _chai.expect)(nameFormGroup, 'name form group has error state').to.have.class('error');\n      (0, _chai.expect)(nameFormGroup.querySelector('.response'), 'name form group has error message').to.exist;\n      let slugFormGroup = (0, _testHelpers.find)('input[name=\"slug\"]').closest('.form-group');\n      (0, _chai.expect)(slugFormGroup, 'slug form group has error state').to.have.class('error');\n      (0, _chai.expect)(slugFormGroup.querySelector('.response'), 'slug form group has error message').to.exist;\n      let descriptionFormGroup = (0, _testHelpers.find)('textarea[name=\"description\"]').closest('.form-group');\n      (0, _chai.expect)(descriptionFormGroup, 'description form group has error state').to.have.class('error');\n      let metaTitleFormGroup = (0, _testHelpers.find)('input[name=\"metaTitle\"]').closest('.form-group');\n      (0, _chai.expect)(metaTitleFormGroup, 'metaTitle form group has error state').to.have.class('error');\n      (0, _chai.expect)(metaTitleFormGroup.querySelector('.response'), 'metaTitle form group has error message').to.exist;\n      let metaDescriptionFormGroup = (0, _testHelpers.find)('textarea[name=\"metaDescription\"]').closest('.form-group');\n      (0, _chai.expect)(metaDescriptionFormGroup, 'metaDescription form group has error state').to.have.class('error');\n      (0, _chai.expect)(metaDescriptionFormGroup.querySelector('.response'), 'metaDescription form group has error message').to.exist;\n    });\n    (0, _mocha.it)('displays char count for text fields', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty)}}\n              \n      */\n      {\n        \"id\": \"jFHwMgo8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,3],null,[[\\\"tag\\\",\\\"setProperty\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"setProperty\\\",\\\"action\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let descriptionFormGroup = (0, _testHelpers.find)('textarea[name=\"description\"]').closest('.form-group');\n      (0, _chai.expect)(descriptionFormGroup.querySelector('.word-count'), 'description char count').to.have.trimmed.text('12');\n      let metaDescriptionFormGroup = (0, _testHelpers.find)('textarea[name=\"metaDescription\"]').closest('.form-group');\n      (0, _chai.expect)(metaDescriptionFormGroup.querySelector('.word-count'), 'description char count').to.have.trimmed.text('16');\n    });\n    (0, _mocha.it)('renders SEO title preview', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty)}}\n              \n      */\n      {\n        \"id\": \"jFHwMgo8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,3],null,[[\\\"tag\\\",\\\"setProperty\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"setProperty\\\",\\\"action\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-title').textContent, 'displays meta title if present').to.equal('Meta Title');\n      this.set('tag.metaTitle', '');\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-title').textContent, 'falls back to tag name without metaTitle').to.equal('Test');\n      this.set('tag.name', new Array(151).join('x'));\n      let expectedLength = 70 + '…'.length;\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-title').textContent.length, 'cuts title to max 70 chars').to.equal(expectedLength);\n    });\n    (0, _mocha.it)('renders SEO URL preview', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty)}}\n              \n      */\n      {\n        \"id\": \"jFHwMgo8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,3],null,[[\\\"tag\\\",\\\"setProperty\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"setProperty\\\",\\\"action\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-link').textContent, 'adds url and tag prefix').to.equal('http://localhost:2368/tag/test/');\n      this.set('tag.slug', new Array(151).join('x'));\n      let expectedLength = 70 + '…'.length;\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-link').textContent.length, 'cuts slug to max 70 chars').to.equal(expectedLength);\n    });\n    (0, _mocha.it)('renders SEO description preview', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty)}}\n              \n      */\n      {\n        \"id\": \"jFHwMgo8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,3],null,[[\\\"tag\\\",\\\"setProperty\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"setProperty\\\",\\\"action\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-description').textContent, 'displays meta description if present').to.equal('Meta description');\n      this.set('tag.metaDescription', '');\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-description').textContent, 'falls back to tag description without metaDescription').to.equal('Description.');\n      this.set('tag.description', new Array(500).join('x'));\n      let expectedLength = 156 + '…'.length;\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-description').textContent.length, 'cuts description to max 156 chars').to.equal(expectedLength);\n    });\n    (0, _mocha.it)('resets if a new tag is received', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty)}}\n              \n      */\n      {\n        \"id\": \"jFHwMgo8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,3],null,[[\\\"tag\\\",\\\"setProperty\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"setProperty\\\",\\\"action\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.click)('.meta-data-button');\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-meta-settings-pane').classList.contains('settings-menu-pane-in'), 'meta data pane is shown').to.be.true;\n      this.set('tag', Ember.Object.create({\n        id: '2'\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane').classList.contains('settings-menu-pane-in'), 'resets to main settings').to.be.true;\n    });\n    (0, _mocha.it)('triggers delete tag modal on delete click', async function () {\n      let openModalFired = false;\n      this.set('openModal', () => {\n        openModalFired = true;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty) showDeleteTagModal=(action openModal)}}\n              \n      */\n      {\n        \"id\": \"e34cNwzi\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,4],null,[[\\\"tag\\\",\\\"setProperty\\\",\\\"showDeleteTagModal\\\"],[[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"openModal\\\",\\\"action\\\",\\\"setProperty\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.click)('.settings-menu-delete-button');\n      (0, _chai.expect)(openModalFired).to.be.true;\n    });\n    (0, _mocha.it)('shows tags arrow link on mobile', async function () {\n      let mediaQueries = this.owner.lookup('service:media-queries');\n      mediaQueries.set('maxWidth600', true);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-tag-settings-form tag=tag setProperty=(action setProperty)}}\n              \n      */\n      {\n        \"id\": \"jFHwMgo8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,3],null,[[\\\"tag\\\",\\\"setProperty\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]],[2,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"setProperty\\\",\\\"action\\\",\\\"tag\\\",\\\"gh-tag-settings-form\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('.tag-settings-pane .settings-menu-header .settings-menu-header-action').length, 'tags link is shown').to.equal(1);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-task-button-test\", [\"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\", \"ember-concurrency\"], function (_testHelpers, _mocha, _chai, _emberMocha, _emberConcurrency) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-task-button', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      // sets button text using positional param\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @buttonText=\"Test\" />\n      */\n      {\n        \"id\": \"FfPPV/td\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@buttonText\\\"],[\\\"Test\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Test');\n      (0, _chai.expect)((0, _testHelpers.find)('button').disabled).to.be.false;\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @class=\"testing\" />\n      */\n      {\n        \"id\": \"Z0kpFMUS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@class\\\"],[\\\"testing\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.class('testing'); // default button text is \"Save\"\n\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Save'); // passes disabled attr\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @disabled={{true}} @buttonText=\"Test\" />\n      */\n      {\n        \"id\": \"0AREPlq5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@disabled\\\",\\\"@buttonText\\\"],[true,\\\"Test\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('button').disabled).to.be.true; // allows button text to be set via hash param\n\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Test'); // passes type attr\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @type=\"submit\" />\n      */\n      {\n        \"id\": \"aZoSOF4e\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@type\\\"],[\\\"submit\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.attr('type', 'submit'); // passes tabindex attr\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @tabindex=\"-1\" />\n      */\n      {\n        \"id\": \"rHlnB2DL\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@tabindex\\\"],[\\\"-1\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.attr('tabindex', '-1');\n    });\n    (0, _mocha.it)('shows spinner whilst running', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @task={{myTask}} />\n      */\n      {\n        \"id\": \"Gvf7yyL4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@task\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"myTask\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      this.myTask.perform();\n      await (0, _testHelpers.waitFor)('button svg', {\n        timeout: 50\n      });\n      await (0, _testHelpers.settled)();\n    });\n    (0, _mocha.it)('shows running text when passed whilst running', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @task={{myTask}} @runningText=\"Running\" />\n      */\n      {\n        \"id\": \"xSOpqdvB\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@task\\\",\\\"@runningText\\\"],[[34,0],\\\"Running\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"myTask\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      this.myTask.perform();\n      await (0, _testHelpers.waitFor)('button svg', {\n        timeout: 50\n      });\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Running');\n      await (0, _testHelpers.settled)();\n    });\n    (0, _mocha.it)('appears disabled whilst running', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @task={{myTask}} />\n      */\n      {\n        \"id\": \"Gvf7yyL4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@task\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"myTask\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('button'), 'initial class').to.not.have.class('appear-disabled');\n      this.myTask.perform();\n      await (0, _testHelpers.waitFor)('button.appear-disabled', {\n        timeout: 100\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)((0, _testHelpers.find)('button'), 'ended class').to.not.have.class('appear-disabled');\n    });\n    (0, _mocha.it)('shows success on success', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n        return true;\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @task={{myTask}} />\n      */\n      {\n        \"id\": \"Gvf7yyL4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@task\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"myTask\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await this.myTask.perform();\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.class('gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Saved');\n    });\n    (0, _mocha.it)('assigns specified success class on success', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n        return true;\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @task={{myTask}} @successClass=\"im-a-success\" />\n      */\n      {\n        \"id\": \"VAmQwndJ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@task\\\",\\\"@successClass\\\"],[[34,0],\\\"im-a-success\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"myTask\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await this.myTask.perform();\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.not.have.class('gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.class('im-a-success');\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Saved');\n    });\n    (0, _mocha.it)('shows failure when task errors', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        try {\n          yield (0, _emberConcurrency.timeout)(50);\n          throw new ReferenceError('test error');\n        } catch (error) {// noop, prevent mocha triggering unhandled error assert\n        }\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @task={{myTask}} @failureClass=\"is-failed\" />\n      */\n      {\n        \"id\": \"uZqUTtWF\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@task\\\",\\\"@failureClass\\\"],[[34,0],\\\"is-failed\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"myTask\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      this.myTask.perform();\n      await (0, _testHelpers.waitFor)('button.is-failed');\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Retry');\n      await (0, _testHelpers.settled)();\n    });\n    (0, _mocha.it)('shows failure on falsy response', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n        return false;\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @task={{myTask}} />\n      */\n      {\n        \"id\": \"Gvf7yyL4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@task\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"myTask\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      this.myTask.perform();\n      await (0, _testHelpers.waitFor)('button.gh-btn-red', {\n        timeout: 50\n      });\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Retry');\n      await (0, _testHelpers.settled)();\n    });\n    (0, _mocha.it)('assigns specified failure class on failure', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n        return false;\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @task={{myTask}} @failureClass=\"im-a-failure\" />\n      */\n      {\n        \"id\": \"oEVhXXpQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@task\\\",\\\"@failureClass\\\"],[[34,0],\\\"im-a-failure\\\"]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"myTask\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      this.myTask.perform();\n      await (0, _testHelpers.waitFor)('button.im-a-failure', {\n        timeout: 50\n      });\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.not.have.class('gh-btn-red');\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Retry');\n      await (0, _testHelpers.settled)();\n    });\n    (0, _mocha.it)('performs task on click', async function () {\n      let taskCount = 0;\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n        taskCount = taskCount + 1;\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @task={{myTask}} />\n      */\n      {\n        \"id\": \"Gvf7yyL4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@task\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"myTask\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.click)('button');\n      (0, _chai.expect)(taskCount, 'taskCount').to.equal(1);\n    });\n\n    _mocha.it.skip('keeps button size when showing spinner', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhTaskButton @task={{myTask}} />\n      */\n      {\n        \"id\": \"Gvf7yyL4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-task-button\\\",[],[[\\\"@task\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"myTask\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let width = (0, _testHelpers.find)('button').clientWidth;\n      let height = (0, _testHelpers.find)('button').clientHeight;\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.not.have.attr('style');\n      this.myTask.perform();\n      Ember.run.later(this, function () {\n        // we can't test exact width/height because Chrome/Firefox use different rounding methods\n        // expect(find('button')).to.have.attr('style', `width: ${width}px; height: ${height}px;`);\n        let [widthInt] = width.toString().split('.');\n        let [heightInt] = height.toString().split('.');\n        (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.attr('style', `width: ${widthInt}`);\n        (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.attr('style', `height: ${heightInt}`);\n      }, 20);\n      Ember.run.later(this, function () {\n        (0, _chai.expect)((0, _testHelpers.find)('button').getAttribute('style')).to.be.empty;\n      }, 100);\n      await (0, _testHelpers.settled)();\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-theme-table-test\", [\"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-theme-table', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      this.set('themes', [{\n        name: 'Daring',\n        package: {\n          name: 'Daring',\n          version: '0.1.4'\n        },\n        active: true\n      }, {\n        name: 'casper',\n        package: {\n          name: 'Casper',\n          version: '1.3.1'\n        }\n      }, {\n        name: 'oscar-ghost-1.1.0',\n        package: {\n          name: 'Lanyon',\n          version: '1.1.0'\n        }\n      }, {\n        name: 'foo'\n      }]);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhThemeTable @themes={{themes}} />\n      */\n      {\n        \"id\": \"xqA/125V\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-theme-table\\\",[],[[\\\"@themes\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"themes\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-themes-list]').length, 'themes list is present').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-theme-id]').length, 'number of rows').to.equal(4);\n      let packageNames = (0, _testHelpers.findAll)('[data-test-theme-title]').map(name => name.textContent.trim());\n      (0, _chai.expect)(packageNames[0]).to.match(/Casper \\(default\\)/);\n      (0, _chai.expect)(packageNames[1]).to.match(/Daring\\s+Active/);\n      (0, _chai.expect)(packageNames[2]).to.match(/foo/);\n      (0, _chai.expect)(packageNames[3]).to.match(/Lanyon/);\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-active=\"true\"]').querySelector('[data-test-theme-title]'), 'active theme is highlighted').to.contain.text('Daring');\n      (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-button=\"activate\"]').length, 'non-active themes have an activate link').to.equal(3);\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-active=\"true\"]').querySelector('[data-test-button=\"activate\"]'), 'active theme doesn\\'t have an activate link').to.not.exist;\n    });\n    (0, _mocha.it)('has download button in actions dropdown for all themes', async function () {\n      const themes = [{\n        name: 'Daring',\n        package: {\n          name: 'Daring',\n          version: '0.1.4'\n        },\n        active: true\n      }, {\n        name: 'casper',\n        package: {\n          name: 'Casper',\n          version: '1.3.1'\n        }\n      }, {\n        name: 'oscar-ghost-1.1.0',\n        package: {\n          name: 'Lanyon',\n          version: '1.1.0'\n        }\n      }, {\n        name: 'foo'\n      }];\n      this.set('themes', themes);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhThemeTable @themes={{themes}} />\n      */\n      {\n        \"id\": \"xqA/125V\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-theme-table\\\",[],[[\\\"@themes\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"themes\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n\n      for (const theme of themes) {\n        await (0, _testHelpers.click)(`[data-test-theme-id=\"${theme.name}\"] [data-test-button=\"actions\"]`);\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-actions-for=\"${theme.name}\"] [data-test-button=\"download\"]`)).to.exist;\n      }\n    });\n    (0, _mocha.it)('has delete button for non-active, non-default, themes', async function () {\n      const themes = [{\n        name: 'Daring',\n        package: {\n          name: 'Daring',\n          version: '0.1.4'\n        }\n      }, {\n        name: 'oscar-ghost-1.1.0',\n        package: {\n          name: 'Lanyon',\n          version: '1.1.0'\n        }\n      }, {\n        name: 'foo'\n      }];\n      this.set('themes', themes);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhThemeTable @themes={{themes}} />\n      */\n      {\n        \"id\": \"xqA/125V\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-theme-table\\\",[],[[\\\"@themes\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"themes\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n\n      for (const theme of themes) {\n        await (0, _testHelpers.click)(`[data-test-theme-id=\"${theme.name}\"] [data-test-button=\"actions\"]`);\n        (0, _chai.expect)((0, _testHelpers.find)(`[data-test-actions-for=\"${theme.name}\"] [data-test-button=\"delete\"]`)).to.exist;\n      }\n    });\n    (0, _mocha.it)('does not show delete action for casper', async function () {\n      const themes = [{\n        name: 'Daring',\n        package: {\n          name: 'Daring',\n          version: '0.1.4'\n        },\n        active: true\n      }, {\n        name: 'casper',\n        package: {\n          name: 'Casper',\n          version: '1.3.1'\n        }\n      }, {\n        name: 'oscar-ghost-1.1.0',\n        package: {\n          name: 'Lanyon',\n          version: '1.1.0'\n        }\n      }, {\n        name: 'foo'\n      }];\n      this.set('themes', themes);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhThemeTable @themes={{themes}} />\n      */\n      {\n        \"id\": \"xqA/125V\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-theme-table\\\",[],[[\\\"@themes\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"themes\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.click)(`[data-test-theme-id=\"casper\"] [data-test-button=\"actions\"]`);\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-actions-for=\"casper\"]')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)(`[data-test-actions-for=\"casper\"] [data-test-button=\"delete\"]`)).to.not.exist;\n    });\n    (0, _mocha.it)('does not show delete action for active theme', async function () {\n      const themes = [{\n        name: 'Daring',\n        package: {\n          name: 'Daring',\n          version: '0.1.4'\n        },\n        active: true\n      }, {\n        name: 'casper',\n        package: {\n          name: 'Casper',\n          version: '1.3.1'\n        }\n      }, {\n        name: 'oscar-ghost-1.1.0',\n        package: {\n          name: 'Lanyon',\n          version: '1.1.0'\n        }\n      }, {\n        name: 'foo'\n      }];\n      this.set('themes', themes);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhThemeTable @themes={{themes}} />\n      */\n      {\n        \"id\": \"xqA/125V\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-theme-table\\\",[],[[\\\"@themes\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"themes\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.click)(`[data-test-theme-id=\"Daring\"] [data-test-button=\"actions\"]`);\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-actions-for=\"Daring\"]')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)(`[data-test-actions-for=\"Daring\"] [data-test-button=\"delete\"]`)).to.not.exist;\n    });\n    (0, _mocha.it)('displays folder names if there are duplicate package names', async function () {\n      this.set('themes', [{\n        name: 'daring',\n        package: {\n          name: 'Daring',\n          version: '0.1.4'\n        }\n      }, {\n        name: 'daring-0.1.5',\n        package: {\n          name: 'Daring',\n          version: '0.1.4'\n        }\n      }, {\n        name: 'casper',\n        package: {\n          name: 'Casper',\n          version: '1.3.1'\n        }\n      }, {\n        name: 'another',\n        package: {\n          name: 'Casper',\n          version: '1.3.1'\n        }\n      }, {\n        name: 'mine',\n        package: {\n          name: 'Casper',\n          version: '1.3.1'\n        }\n      }, {\n        name: 'foo'\n      }]);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhThemeTable @themes={{themes}} />\n      */\n      {\n        \"id\": \"xqA/125V\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-theme-table\\\",[],[[\\\"@themes\\\"],[[34,0]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"themes\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      let packageNames = (0, _testHelpers.findAll)('[data-test-theme-title]').map(name => name.textContent.trim());\n      (0, _chai.expect)(packageNames, 'themes are ordered by label, folder names shown for duplicates').to.deep.equal(['Casper (another)', 'Casper (default)', 'Casper (mine)', 'Daring (daring)', 'Daring (daring-0.1.5)', 'foo']);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-timezone-select-test\", [\"sinon\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-timezone-select', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      this.set('availableTimezones', [{\n        name: 'Pacific/Pago_Pago',\n        label: '(GMT -11:00) Midway Island, Samoa'\n      }, {\n        name: 'Etc/UTC',\n        label: '(GMT) UTC'\n      }, {\n        name: 'Pacific/Kwajalein',\n        label: '(GMT +12:00) International Date Line West'\n      }]);\n      this.set('timezone', 'Etc/UTC');\n    });\n    (0, _mocha.it)('renders', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-timezone-select\n                  availableTimezones=availableTimezones\n                  timezone=timezone}}\n      */\n      {\n        \"id\": \"GrX+pFS4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,2],null,[[\\\"availableTimezones\\\",\\\"timezone\\\"],[[35,1],[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"timezone\\\",\\\"availableTimezones\\\",\\\"gh-timezone-select\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element, 'top-level elements').to.exist;\n      (0, _chai.expect)((0, _testHelpers.findAll)('option'), 'number of options').to.have.length(3);\n      (0, _chai.expect)((0, _testHelpers.find)('select').value, 'selected option value').to.equal('Etc/UTC');\n    });\n    (0, _mocha.it)('handles an unknown timezone', async function () {\n      this.set('timezone', 'Europe/London');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-timezone-select\n                  availableTimezones=availableTimezones\n                  timezone=timezone}}\n      */\n      {\n        \"id\": \"GrX+pFS4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,2],null,[[\\\"availableTimezones\\\",\\\"timezone\\\"],[[35,1],[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"timezone\\\",\\\"availableTimezones\\\",\\\"gh-timezone-select\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      })); // we have an additional blank option at the top\n\n      (0, _chai.expect)((0, _testHelpers.findAll)('option'), 'number of options').to.have.length(4); // blank option is selected\n\n      (0, _chai.expect)((0, _testHelpers.find)('select').value, 'selected option value').to.equal(''); // we indicate the manual override\n\n      (0, _chai.expect)((0, _testHelpers.find)('p').textContent).to.match(/Your timezone has been automatically set to Europe\\/London/);\n    });\n    (0, _mocha.it)('triggers update action on change', async function () {\n      let update = _sinon.default.spy();\n\n      this.set('update', update);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-timezone-select\n                  availableTimezones=availableTimezones\n                  timezone=timezone\n                  update=(action update)}}\n      */\n      {\n        \"id\": \"Gc3Xd010\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"availableTimezones\\\",\\\"timezone\\\",\\\"update\\\"],[[35,3],[35,2],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"update\\\",\\\"action\\\",\\\"timezone\\\",\\\"availableTimezones\\\",\\\"gh-timezone-select\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.fillIn)('select', 'Pacific/Pago_Pago');\n      await (0, _testHelpers.blur)('select');\n      (0, _chai.expect)(update.calledOnce, 'update was called once').to.be.true;\n      (0, _chai.expect)(update.firstCall.args[0].name, 'update was passed new timezone').to.equal('Pacific/Pago_Pago');\n    }); // TODO: mock clock service, fake the time, test we have the correct\n    // local time and it changes alongside selection changes\n\n    (0, _mocha.it)('renders local time');\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-trim-focus-input-test\", [\"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-trim-focus-input', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('trims value on focusOut', async function () {\n      this.set('text', 'some random stuff    ');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-trim-focus-input value=(readonly text) input=(action (mut text) value=\"target.value\")}}\n      */\n      {\n        \"id\": \"Ybt9Cam2\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,4],null,[[\\\"value\\\",\\\"input\\\"],[[30,[36,3],[[35,0]],null],[30,[36,2],[[32,0],[30,[36,1],[[35,0]],null]],[[\\\"value\\\"],[\\\"target.value\\\"]]]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"text\\\",\\\"mut\\\",\\\"action\\\",\\\"readonly\\\",\\\"gh-trim-focus-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)(this.text).to.equal('some random stuff');\n    });\n    (0, _mocha.it)('trims value on focusOut before calling custom focus-out', async function () {\n      this.set('text', 'some random stuff    ');\n      this.set('customFocusOut', function (value) {\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-input').value, 'input value').to.equal('some random stuff');\n        (0, _chai.expect)(value, 'value').to.equal('some random stuff');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-trim-focus-input\n                  value=(readonly text)\n                  input=(action (mut text) value=\"target.value\")\n                  focus-out=(action customFocusOut)\n              }}\n      */\n      {\n        \"id\": \"QJUam4fj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,5],null,[[\\\"value\\\",\\\"input\\\",\\\"focus-out\\\"],[[30,[36,4],[[35,2]],null],[30,[36,1],[[32,0],[30,[36,3],[[35,2]],null]],[[\\\"value\\\"],[\\\"target.value\\\"]]],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"customFocusOut\\\",\\\"action\\\",\\\"text\\\",\\\"mut\\\",\\\"readonly\\\",\\\"gh-trim-focus-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)(this.text).to.equal('some random stuff');\n    });\n    (0, _mocha.it)('does not have the autofocus attribute if not set to focus', async function () {\n      this.set('text', 'some text');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-trim-focus-input value=(readonly text) shouldFocus=false}}\n      */\n      {\n        \"id\": \"NJxghGPG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,2],null,[[\\\"value\\\",\\\"shouldFocus\\\"],[[30,[36,1],[[35,0]],null],false]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"text\\\",\\\"readonly\\\",\\\"gh-trim-focus-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input').autofocus).to.not.be.ok;\n    });\n    (0, _mocha.it)('has the autofocus attribute if set to focus', async function () {\n      this.set('text', 'some text');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-trim-focus-input value=(readonly text) shouldFocus=true}}\n      */\n      {\n        \"id\": \"r+l/YkQo\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,2],null,[[\\\"value\\\",\\\"shouldFocus\\\"],[[30,[36,1],[[35,0]],null],true]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"text\\\",\\\"readonly\\\",\\\"gh-trim-focus-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input').autofocus).to.be.ok;\n    });\n    (0, _mocha.it)('handles undefined values', async function () {\n      this.set('text', undefined);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-trim-focus-input value=(readonly text) shouldFocus=true}}\n      */\n      {\n        \"id\": \"r+l/YkQo\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,2],null,[[\\\"value\\\",\\\"shouldFocus\\\"],[[30,[36,1],[[35,0]],null],true]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"text\\\",\\\"readonly\\\",\\\"gh-trim-focus-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input').autofocus).to.be.ok;\n    });\n    (0, _mocha.it)('handles non-string values', async function () {\n      this.set('text', 10);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-trim-focus-input value=(readonly text) shouldFocus=true}}\n      */\n      {\n        \"id\": \"r+l/YkQo\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,2],null,[[\\\"value\\\",\\\"shouldFocus\\\"],[[30,[36,1],[[35,0]],null],true]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"text\\\",\\\"readonly\\\",\\\"gh-trim-focus-input\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input').value).to.equal('10');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-unsplash-photo-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-unsplash-photo', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      // NOTE: images.unsplash.com replaced with example.com to ensure we aren't\n      // loading lots of images during tests and we get an immediate 404\n      this.set('photo', {\n        id: 'OYFHT4X5isg',\n        created_at: '2017-08-09T00:20:42-04:00',\n        updated_at: '2017-08-11T08:27:42-04:00',\n        width: 5184,\n        height: 3456,\n        color: '#A8A99B',\n        likes: 58,\n        liked_by_user: false,\n        description: null,\n        user: {\n          id: 'cEpP9pR9Q7E',\n          updated_at: '2017-08-11T08:27:42-04:00',\n          username: 'danotis',\n          name: 'Dan Otis',\n          first_name: 'Dan',\n          last_name: 'Otis',\n          twitter_username: 'danotis',\n          portfolio_url: 'http://dan.exposure.co',\n          bio: 'Senior Visual Designer at Huge ',\n          location: 'San Jose, CA',\n          total_likes: 0,\n          total_photos: 8,\n          total_collections: 0,\n          profile_image: {\n            small: 'https://example.com/profile-fb-1502251227-8fe7a0522137.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=37f67120fc464d7d920ff23c84963b38',\n            medium: 'https://example.com/profile-fb-1502251227-8fe7a0522137.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=0a4f8a583caec826ac6b1ca80161fa43',\n            large: 'https://example.com/profile-fb-1502251227-8fe7a0522137.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=b3aa4206e5d87f3eaa7bbe9180ebcd2b'\n          },\n          links: {\n            self: 'https://api.unsplash.com/users/danotis',\n            html: 'https://unsplash.com/@danotis',\n            photos: 'https://api.unsplash.com/users/danotis/photos',\n            likes: 'https://api.unsplash.com/users/danotis/likes',\n            portfolio: 'https://api.unsplash.com/users/danotis/portfolio',\n            following: 'https://api.unsplash.com/users/danotis/following',\n            followers: 'https://api.unsplash.com/users/danotis/followers'\n          }\n        },\n        current_user_collections: [],\n        urls: {\n          raw: 'https://example.com/photo-1502252430442-aac78f397426',\n          full: 'https://example.com/photo-1502252430442-aac78f397426?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=20f86c2f7bbb019122498a45d8260ee9',\n          regular: 'https://example.com/photo-1502252430442-aac78f397426?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=181760db8b7a61fa60a35277d7eb434e',\n          small: 'https://example.com/photo-1502252430442-aac78f397426?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=1e2265597b59e874a1a002b4c3fd961c',\n          thumb: 'https://example.com/photo-1502252430442-aac78f397426?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=57c86b0692bea92a282b9ab0dbfdacf4'\n        },\n        categories: [],\n        links: {\n          self: 'https://api.unsplash.com/photos/OYFHT4X5isg',\n          html: 'https://unsplash.com/photos/OYFHT4X5isg',\n          download: 'https://unsplash.com/photos/OYFHT4X5isg/download',\n          download_location: 'https://api.unsplash.com/photos/OYFHT4X5isg/download'\n        },\n        ratio: 0.6666666666666666\n      });\n    });\n    (0, _mocha.it)('sets background-color style', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-unsplash-photo photo=photo}}\n      */\n      {\n        \"id\": \"oThYcLfU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"photo\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"photo\\\",\\\"gh-unsplash-photo\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-photo-container]').attributes.style.value).to.have.string('background-color: #A8A99B');\n    });\n    (0, _mocha.it)('sets padding-bottom style', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-unsplash-photo photo=photo}}\n      */\n      {\n        \"id\": \"oThYcLfU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"photo\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"photo\\\",\\\"gh-unsplash-photo\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      })); // don't check full padding-bottom value as it will likely vary across\n      // browsers\n\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-photo-container]').attributes.style.value).to.have.string('padding-bottom: 66.66');\n    });\n    (0, _mocha.it)('uses correct image size url', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-unsplash-photo photo=photo}}\n      */\n      {\n        \"id\": \"oThYcLfU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"photo\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"photo\\\",\\\"gh-unsplash-photo\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-photo-image]').attributes.src.value).to.have.string('&w=1200');\n    });\n    (0, _mocha.it)('calculates image width/height', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-unsplash-photo photo=photo}}\n      */\n      {\n        \"id\": \"oThYcLfU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],null,[[\\\"photo\\\"],[[35,0]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"photo\\\",\\\"gh-unsplash-photo\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-photo-image]').attributes.width.value).to.equal('1200');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-photo-image]').attributes.height.value).to.equal('800');\n    });\n    (0, _mocha.it)('triggers insert action');\n    (0, _mocha.it)('triggers zoom action');\n    (0, _mocha.describe)('zoomed', function () {\n      (0, _mocha.it)('omits padding-bottom style');\n      (0, _mocha.it)('triggers insert action');\n      (0, _mocha.it)('triggers zoom action');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-unsplash-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-unsplash', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      // Template block usage:\n      // await render(hbs`\n      //   {{#gh-unsplash}}\n      //     template content\n      //   {{/gh-unsplash}}\n      // `);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-unsplash}}\n      */\n      {\n        \"id\": \"nReFD4FR\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"gh-unsplash\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.exist;\n    });\n    (0, _mocha.it)('loads new photos by default');\n    (0, _mocha.it)('has responsive columns');\n    (0, _mocha.it)('can zoom');\n    (0, _mocha.it)('can close zoom by clicking on image');\n    (0, _mocha.it)('can close zoom by clicking outside image');\n    (0, _mocha.it)('triggers insert action');\n    (0, _mocha.it)('handles errors');\n    (0, _mocha.describe)('searching', function () {\n      (0, _mocha.it)('works');\n      (0, _mocha.it)('handles no results');\n      (0, _mocha.it)('handles error');\n    });\n    (0, _mocha.describe)('closing', function () {\n      (0, _mocha.it)('triggers close action');\n      (0, _mocha.it)('can be triggerd by escape key');\n      (0, _mocha.it)('cannot be triggered by escape key when zoomed');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-uploader-test\", [\"pretender\", \"ghost-admin/utils/ghost-paths\", \"sinon\", \"@ember/test-helpers\", \"ghost-admin/tests/helpers/file-upload\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _ghostPaths, _sinon, _testHelpers, _fileUpload, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  const stubSuccessfulUpload = function (server) {\n    let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    server.post(`${(0, _ghostPaths.default)().apiRoot}/images/upload/`, function () {\n      return [200, {\n        'Content-Type': 'application/json'\n      }, '{\"images\": [{\"url\": \"/content/images/test.png\"}]}'];\n    }, delay);\n  };\n\n  const stubFailedUpload = function (server, code, error) {\n    let delay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    server.post(`${(0, _ghostPaths.default)().apiRoot}/images/upload/`, function () {\n      return [code, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        errors: [{\n          type: error,\n          message: `Error: ${error}`\n        }]\n      })];\n    }, delay);\n  };\n\n  (0, _mocha.describe)('Integration: Component: gh-uploader', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.describe)('uploads', function () {\n      beforeEach(function () {\n        stubSuccessfulUpload(server);\n      });\n      (0, _mocha.it)('triggers uploads when `files` is set', async function () {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{#gh-uploader files=files}}{{/gh-uploader}}\n        */\n        {\n          \"id\": \"OcnO1Max\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,[37,1],null,[[\\\"files\\\"],[[35,0]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)();\n        let [lastRequest] = server.handledRequests;\n        (0, _chai.expect)(server.handledRequests.length).to.equal(1);\n        (0, _chai.expect)(lastRequest.url).to.equal(`${(0, _ghostPaths.default)().apiRoot}/images/upload/`); // requestBody is a FormData object\n        // this will fail in anything other than Chrome and Firefox\n        // https://developer.mozilla.org/en-US/docs/Web/API/FormData#Browser_compatibility\n\n        (0, _chai.expect)(lastRequest.requestBody.has('file')).to.be.true;\n      });\n      (0, _mocha.it)('triggers multiple uploads', async function () {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{#gh-uploader files=files}}{{/gh-uploader}}\n        */\n        {\n          \"id\": \"OcnO1Max\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,[37,1],null,[[\\\"files\\\"],[[35,0]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(), (0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(server.handledRequests.length).to.equal(2);\n      });\n      (0, _mocha.it)('triggers onStart when upload starts', async function () {\n        this.set('uploadStarted', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{#gh-uploader files=files onStart=(action uploadStarted)}}{{/gh-uploader}}\n        */\n        {\n          \"id\": \"ZuPbe7sv\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,[37,3],null,[[\\\"files\\\",\\\"onStart\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadStarted\\\",\\\"action\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(), (0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(this.uploadStarted.calledOnce).to.be.true;\n      });\n      (0, _mocha.it)('triggers onUploadSuccess when a file uploads', async function () {\n        this.set('fileUploaded', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{#gh-uploader files=files onUploadSuccess=(action fileUploaded)}}{{/gh-uploader}}\n        */\n        {\n          \"id\": \"UEG+EqTX\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,[37,3],null,[[\\\"files\\\",\\\"onUploadSuccess\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"fileUploaded\\\",\\\"action\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        }), (0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)(); // triggered for each file\n\n        (0, _chai.expect)(this.fileUploaded.calledTwice).to.be.true; // filename and url is passed in arg\n\n        let firstCall = this.fileUploaded.getCall(0);\n        (0, _chai.expect)(firstCall.args[0].fileName).to.equal('file1.png');\n        (0, _chai.expect)(firstCall.args[0].url).to.equal('/content/images/test.png');\n      });\n      (0, _mocha.it)('triggers onComplete when all files uploaded', async function () {\n        this.set('uploadsFinished', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{#gh-uploader files=files onComplete=(action uploadsFinished)}}{{/gh-uploader}}\n        */\n        {\n          \"id\": \"uKnhyF0t\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,[37,3],null,[[\\\"files\\\",\\\"onComplete\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadsFinished\\\",\\\"action\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        }), (0, _fileUpload.createFile)(['test'], {\n          name: 'file2.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(this.uploadsFinished.calledOnce).to.be.true; // array of filenames and urls is passed in arg\n\n        let [result] = this.uploadsFinished.getCall(0).args;\n        (0, _chai.expect)(result.length).to.equal(2);\n        (0, _chai.expect)(result[0].fileName).to.equal('file1.png');\n        (0, _chai.expect)(result[0].url).to.equal('/content/images/test.png');\n        (0, _chai.expect)(result[1].fileName).to.equal('file2.png');\n        (0, _chai.expect)(result[1].url).to.equal('/content/images/test.png');\n      });\n      (0, _mocha.it)('onComplete only passes results for last upload', async function () {\n        this.set('uploadsFinished', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{#gh-uploader files=files onComplete=(action uploadsFinished)}}{{/gh-uploader}}\n        */\n        {\n          \"id\": \"uKnhyF0t\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,[37,3],null,[[\\\"files\\\",\\\"onComplete\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadsFinished\\\",\\\"action\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file2.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        let [results] = this.uploadsFinished.getCall(1).args;\n        (0, _chai.expect)(results.length).to.equal(1);\n        (0, _chai.expect)(results[0].fileName).to.equal('file2.png');\n      });\n      (0, _mocha.it)('onComplete returns results in same order as selected', async function () {\n        // first request has a delay to simulate larger file\n        server.post(`${(0, _ghostPaths.default)().apiRoot}/images/upload/`, function () {\n          // second request has no delay to simulate small file\n          stubSuccessfulUpload(server, 0);\n          return [200, {\n            'Content-Type': 'application/json'\n          }, '\"/content/images/test.png\"'];\n        }, 100);\n        this.set('uploadsFinished', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{#gh-uploader files=files onComplete=(action uploadsFinished)}}{{/gh-uploader}}\n        */\n        {\n          \"id\": \"uKnhyF0t\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,[37,3],null,[[\\\"files\\\",\\\"onComplete\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadsFinished\\\",\\\"action\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        }), // large - finishes last\n        (0, _fileUpload.createFile)(['test'], {\n          name: 'file2.png'\n        }) // small - finishes first\n        ]);\n        await (0, _testHelpers.settled)();\n        let [results] = this.uploadsFinished.getCall(0).args;\n        (0, _chai.expect)(results.length).to.equal(2);\n        (0, _chai.expect)(results[0].fileName).to.equal('file1.png');\n      });\n      (0, _mocha.it)('doesn\\'t allow new files to be set whilst uploading', async function () {\n        let errorSpy = _sinon.default.spy(console, 'error');\n\n        stubSuccessfulUpload(server, 100);\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{#gh-uploader files=files}}{{/gh-uploader}}\n        */\n        {\n          \"id\": \"OcnO1Max\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,[37,1],null,[[\\\"files\\\"],[[35,0]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)()]); // logs error because upload is in progress\n\n        this.set('files', [(0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)(); // runs ok because original upload has finished\n\n        this.set('files', [(0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(server.handledRequests.length).to.equal(2);\n        (0, _chai.expect)(errorSpy.calledOnce).to.be.true;\n        errorSpy.restore();\n      });\n      (0, _mocha.it)('yields isUploading whilst upload is in progress', async function () {\n        stubSuccessfulUpload(server, 100);\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                    {{#gh-uploader files=files as |uploader|}}\n                        {{#if uploader.isUploading}}\n                            <div class=\"is-uploading-test\"></div>\n                        {{/if}}\n                    {{/gh-uploader}}\n        */\n        {\n          \"id\": \"HAkB57hF\",\n          \"block\": \"{\\\"symbols\\\":[\\\"uploader\\\"],\\\"statements\\\":[[2,\\\"\\\\n\\\"],[6,[37,2],null,[[\\\"files\\\"],[[35,1]]],[[\\\"default\\\"],[{\\\"statements\\\":[[6,[37,0],[[32,1,[\\\"isUploading\\\"]]],null,[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"                    \\\"],[10,\\\"div\\\"],[14,0,\\\"is-uploading-test\\\"],[12],[13],[2,\\\"\\\\n\\\"]],\\\"parameters\\\":[]}]]]],\\\"parameters\\\":[1]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"if\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(), (0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.waitFor)('.is-uploading-test', {\n          timeout: 150\n        });\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)((0, _testHelpers.find)('.is-uploading-test')).to.not.exist;\n      });\n      (0, _mocha.it)('yields progressBar component with total upload progress', async function () {\n        stubSuccessfulUpload(server, 100);\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                    {{#gh-uploader files=files as |uploader|}}\n                        {{uploader.progressBar}}\n                    {{/gh-uploader}}\n        */\n        {\n          \"id\": \"3b9mGS96\",\n          \"block\": \"{\\\"symbols\\\":[\\\"uploader\\\"],\\\"statements\\\":[[2,\\\"\\\\n\\\"],[6,[37,1],null,[[\\\"files\\\"],[[35,0]]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"                \\\"],[1,[32,1,[\\\"progressBar\\\"]]],[2,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(), (0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.waitFor)('[data-test-progress-bar]', {\n          timeout: 150\n        });\n        let progressBar = (0, _testHelpers.find)('[data-test-progress-bar]');\n        await (0, _testHelpers.waitUntil)(() => {\n          let width = parseInt(progressBar.style.width);\n          return width > 50;\n        }, {\n          timeout: 150\n        });\n        await (0, _testHelpers.settled)();\n        let finalProgressWidth = parseInt((0, _testHelpers.find)('[data-test-progress-bar]').style.width);\n        (0, _chai.expect)(finalProgressWidth, 'final progress width').to.equal(100);\n      });\n      (0, _mocha.it)('yields files property', async function () {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                    {{#gh-uploader files=files as |uploader|}}\n                        {{#each uploader.files as |file|}}\n                            <div class=\"file\">{{file.name}}</div>\n                        {{/each}}\n                    {{/gh-uploader}}\n        */\n        {\n          \"id\": \"yVXgj8iL\",\n          \"block\": \"{\\\"symbols\\\":[\\\"uploader\\\",\\\"file\\\"],\\\"statements\\\":[[2,\\\"\\\\n\\\"],[6,[37,3],null,[[\\\"files\\\"],[[35,2]]],[[\\\"default\\\"],[{\\\"statements\\\":[[6,[37,1],[[30,[36,0],[[30,[36,0],[[32,1,[\\\"files\\\"]]],null]],null]],null,[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"                    \\\"],[10,\\\"div\\\"],[14,0,\\\"file\\\"],[12],[1,[32,2,[\\\"name\\\"]]],[13],[2,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]}]]]],\\\"parameters\\\":[1]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"-track-array\\\",\\\"each\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        }), (0, _fileUpload.createFile)(['test'], {\n          name: 'file2.png'\n        })]);\n        (0, _chai.expect)((0, _testHelpers.findAll)('.file')[0].textContent).to.equal('file1.png');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.file')[1].textContent).to.equal('file2.png');\n      });\n      (0, _mocha.it)('can be cancelled', async function () {\n        stubSuccessfulUpload(server, 200);\n        this.set('cancelled', _sinon.default.spy());\n        this.set('complete', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                    {{#gh-uploader files=files onCancel=(action cancelled) as |uploader|}}\n                        {{#if uploader.isUploading}}\n                            <button class=\"cancel-button\" {{action uploader.cancel}}>Cancel</button>\n                        {{/if}}\n                    {{/gh-uploader}}\n        */\n        {\n          \"id\": \"o+/w0QUS\",\n          \"block\": \"{\\\"symbols\\\":[\\\"uploader\\\"],\\\"statements\\\":[[2,\\\"\\\\n\\\"],[6,[37,4],null,[[\\\"files\\\",\\\"onCancel\\\"],[[35,3],[30,[36,0],[[32,0],[35,2]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[[6,[37,1],[[32,1,[\\\"isUploading\\\"]]],null,[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"                    \\\"],[11,\\\"button\\\"],[24,0,\\\"cancel-button\\\"],[4,[38,0],[[32,0],[32,1,[\\\"cancel\\\"]]],null],[12],[2,\\\"Cancel\\\"],[13],[2,\\\"\\\\n\\\"]],\\\"parameters\\\":[]}]]]],\\\"parameters\\\":[1]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"action\\\",\\\"if\\\",\\\"cancelled\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.waitFor)('.cancel-button');\n        await (0, _testHelpers.click)('.cancel-button');\n        (0, _chai.expect)(this.cancelled.calledOnce, 'onCancel triggered').to.be.true;\n        (0, _chai.expect)(this.complete.notCalled, 'onComplete triggered').to.be.true;\n      });\n      (0, _mocha.it)('uploads to supplied `uploadUrl`', async function () {\n        server.post(`${(0, _ghostPaths.default)().apiRoot}/images/`, function () {\n          return [200, {\n            'Content-Type': 'application/json'\n          }, '{\"images\": [{\"url\": \"/content/images/test.png\"}]'];\n        });\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{#gh-uploader files=files uploadUrl=\"/images/\"}}{{/gh-uploader}}\n        */\n        {\n          \"id\": \"61OVn41u\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,[37,1],null,[[\\\"files\\\",\\\"uploadUrl\\\"],[[35,0],\\\"/images/\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)();\n        let [lastRequest] = server.handledRequests;\n        (0, _chai.expect)(lastRequest.url).to.equal(`${(0, _ghostPaths.default)().apiRoot}/images/`);\n      });\n      (0, _mocha.it)('passes supplied paramName in request', async function () {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          {{#gh-uploader files=files paramName=\"testupload\"}}{{/gh-uploader}}\n        */\n        {\n          \"id\": \"vvYvZgMq\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,[37,1],null,[[\\\"files\\\",\\\"paramName\\\"],[[35,0],\\\"testupload\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)();\n        let [lastRequest] = server.handledRequests; // requestBody is a FormData object\n        // this will fail in anything other than Chrome and Firefox\n        // https://developer.mozilla.org/en-US/docs/Web/API/FormData#Browser_compatibility\n\n        (0, _chai.expect)(lastRequest.requestBody.has('testupload')).to.be.true;\n      });\n    });\n    (0, _mocha.describe)('validation', function () {\n      (0, _mocha.it)('validates file extensions by default', async function () {\n        this.set('onFailed', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                        {{#gh-uploader files=files extensions=\"jpg,jpeg\" onFailed=(action onFailed)}}{{/gh-uploader}}\n                    \n        */\n        {\n          \"id\": \"CdYcXXgD\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n                \\\"],[6,[37,3],null,[[\\\"files\\\",\\\"extensions\\\",\\\"onFailed\\\"],[[35,2],\\\"jpg,jpeg\\\",[30,[36,1],[[32,0],[35,0]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n            \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"onFailed\\\",\\\"action\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'test.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        let [onFailedResult] = this.onFailed.firstCall.args;\n        (0, _chai.expect)(onFailedResult.length).to.equal(1);\n        (0, _chai.expect)(onFailedResult[0].fileName, 'onFailed file name').to.equal('test.png');\n        (0, _chai.expect)(onFailedResult[0].message, 'onFailed message').to.match(/not supported/);\n      });\n      (0, _mocha.it)('accepts custom validation method', async function () {\n        this.set('validate', function (file) {\n          return `${file.name} failed test validation`;\n        });\n        this.set('onFailed', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                        {{#gh-uploader files=files validate=(action validate) onFailed=(action onFailed)}}{{/gh-uploader}}\n                    \n        */\n        {\n          \"id\": \"tR/4Jbbw\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n                \\\"],[6,[37,4],null,[[\\\"files\\\",\\\"validate\\\",\\\"onFailed\\\"],[[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n            \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"onFailed\\\",\\\"action\\\",\\\"validate\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'test.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        let [onFailedResult] = this.onFailed.firstCall.args;\n        (0, _chai.expect)(onFailedResult.length).to.equal(1);\n        (0, _chai.expect)(onFailedResult[0].fileName).to.equal('test.png');\n        (0, _chai.expect)(onFailedResult[0].message).to.equal('test.png failed test validation');\n      });\n      (0, _mocha.it)('yields errors when validation fails', async function () {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                        {{#gh-uploader files=files extensions=\"jpg,jpeg\" as |uploader|}}\n                            {{#each uploader.errors as |error|}}\n                                <div class=\"error-fileName\">{{error.fileName}}</div>\n                                <div class=\"error-message\">{{error.message}}</div>\n                            {{/each}}\n                        {{/gh-uploader}}\n                    \n        */\n        {\n          \"id\": \"s1ErMiwb\",\n          \"block\": \"{\\\"symbols\\\":[\\\"uploader\\\",\\\"error\\\"],\\\"statements\\\":[[2,\\\"\\\\n\\\"],[6,[37,3],null,[[\\\"files\\\",\\\"extensions\\\"],[[35,2],\\\"jpg,jpeg\\\"]],[[\\\"default\\\"],[{\\\"statements\\\":[[6,[37,1],[[30,[36,0],[[30,[36,0],[[32,1,[\\\"errors\\\"]]],null]],null]],null,[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"                        \\\"],[10,\\\"div\\\"],[14,0,\\\"error-fileName\\\"],[12],[1,[32,2,[\\\"fileName\\\"]]],[13],[2,\\\"\\\\n                        \\\"],[10,\\\"div\\\"],[14,0,\\\"error-message\\\"],[12],[1,[32,2,[\\\"message\\\"]]],[13],[2,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]}]]]],\\\"parameters\\\":[1]}]]],[2,\\\"            \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"-track-array\\\",\\\"each\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'test.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)((0, _testHelpers.find)('.error-fileName').textContent).to.equal('test.png');\n        (0, _chai.expect)((0, _testHelpers.find)('.error-message').textContent).to.match(/not supported/);\n      });\n    });\n    (0, _mocha.describe)('server errors', function () {\n      beforeEach(function () {\n        stubFailedUpload(server, 500, 'No upload for you');\n      });\n      (0, _mocha.it)('triggers onFailed when uploads complete', async function () {\n        this.set('uploadFailed', _sinon.default.spy());\n        this.set('uploadComplete', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                        {{#gh-uploader\n                            files=files\n                            onFailed=(action uploadFailed)\n                            onComplete=(action uploadComplete)}}\n                        {{/gh-uploader}}\n                    \n        */\n        {\n          \"id\": \"/WYIYmXu\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n\\\"],[6,[37,4],null,[[\\\"files\\\",\\\"onFailed\\\",\\\"onComplete\\\"],[[35,3],[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"            \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadComplete\\\",\\\"action\\\",\\\"uploadFailed\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        }), (0, _fileUpload.createFile)(['test'], {\n          name: 'file2.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(this.uploadFailed.calledOnce).to.be.true;\n        (0, _chai.expect)(this.uploadComplete.calledOnce).to.be.true;\n        let [failures] = this.uploadFailed.firstCall.args;\n        (0, _chai.expect)(failures.length).to.equal(2);\n        (0, _chai.expect)(failures[0].fileName).to.equal('file1.png');\n        (0, _chai.expect)(failures[0].message).to.equal('Error: No upload for you');\n      });\n      (0, _mocha.it)('triggers onUploadFailure when each upload fails', async function () {\n        this.set('uploadFail', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                        {{#gh-uploader\n                            files=files\n                            onUploadFailure=(action uploadFail)}}\n                        {{/gh-uploader}}\n                    \n        */\n        {\n          \"id\": \"29QNJh4M\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n\\\"],[6,[37,3],null,[[\\\"files\\\",\\\"onUploadFailure\\\"],[[35,2],[30,[36,1],[[32,0],[35,0]],null]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"            \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"uploadFail\\\",\\\"action\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        }), (0, _fileUpload.createFile)(['test'], {\n          name: 'file2.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(this.uploadFail.calledTwice).to.be.true;\n        let [firstFailure] = this.uploadFail.firstCall.args;\n        (0, _chai.expect)(firstFailure.fileName).to.equal('file1.png');\n        (0, _chai.expect)(firstFailure.message).to.equal('Error: No upload for you');\n        let [secondFailure] = this.uploadFail.secondCall.args;\n        (0, _chai.expect)(secondFailure.fileName).to.equal('file2.png');\n        (0, _chai.expect)(secondFailure.message).to.equal('Error: No upload for you');\n      });\n      (0, _mocha.it)('yields errors when uploads fail', async function () {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          \n                        {{#gh-uploader files=files as |uploader|}}\n                            {{#each uploader.errors as |error|}}\n                                <div class=\"error-fileName\">{{error.fileName}}</div>\n                                <div class=\"error-message\">{{error.message}}</div>\n                            {{/each}}\n                        {{/gh-uploader}}\n                    \n        */\n        {\n          \"id\": \"mCYamQDe\",\n          \"block\": \"{\\\"symbols\\\":[\\\"uploader\\\",\\\"error\\\"],\\\"statements\\\":[[2,\\\"\\\\n\\\"],[6,[37,3],null,[[\\\"files\\\"],[[35,2]]],[[\\\"default\\\"],[{\\\"statements\\\":[[6,[37,1],[[30,[36,0],[[30,[36,0],[[32,1,[\\\"errors\\\"]]],null]],null]],null,[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"                        \\\"],[10,\\\"div\\\"],[14,0,\\\"error-fileName\\\"],[12],[1,[32,2,[\\\"fileName\\\"]]],[13],[2,\\\"\\\\n                        \\\"],[10,\\\"div\\\"],[14,0,\\\"error-message\\\"],[12],[1,[32,2,[\\\"message\\\"]]],[13],[2,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]}]]]],\\\"parameters\\\":[1]}]]],[2,\\\"            \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"-track-array\\\",\\\"each\\\",\\\"files\\\",\\\"gh-uploader\\\"]}\",\n          \"moduleName\": \"(unknown template module)\"\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'test.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)((0, _testHelpers.find)('.error-fileName').textContent).to.equal('test.png');\n        (0, _chai.expect)((0, _testHelpers.find)('.error-message').textContent).to.equal('Error: No upload for you');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-validation-status-container-test\", [\"ember-data\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_emberData, _mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  // TODO: remove usage of Ember Data's private `Errors` class when refactoring validations\n  // eslint-disable-next-line\n  const {\n    Errors\n  } = _emberData.default;\n  (0, _mocha.describe)('Integration: Component: gh-validation-status-container', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      let testObject = Ember.Object.create();\n      testObject.set('name', 'Test');\n      testObject.set('hasValidated', []);\n      testObject.set('errors', Errors.create());\n      this.set('testObject', testObject);\n    });\n    (0, _mocha.it)('has no success/error class by default', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{#gh-validation-status-container class=\"gh-test\" property=\"name\" errors=testObject.errors hasValidated=testObject.hasValidated}}\n                  {{/gh-validation-status-container}}\n              \n      */\n      {\n        \"id\": \"bImPLUto\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n\\\"],[6,[37,1],null,[[\\\"class\\\",\\\"property\\\",\\\"errors\\\",\\\"hasValidated\\\"],[\\\"gh-test\\\",\\\"name\\\",[35,0,[\\\"errors\\\"]],[35,0,[\\\"hasValidated\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"testObject\\\",\\\"gh-validation-status-container\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.not.have.class('success');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.not.have.class('error');\n    });\n    (0, _mocha.it)('has success class when valid', async function () {\n      this.get('testObject.hasValidated').push('name');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{#gh-validation-status-container class=\"gh-test\" property=\"name\" errors=testObject.errors hasValidated=testObject.hasValidated}}\n                  {{/gh-validation-status-container}}\n              \n      */\n      {\n        \"id\": \"bImPLUto\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n\\\"],[6,[37,1],null,[[\\\"class\\\",\\\"property\\\",\\\"errors\\\",\\\"hasValidated\\\"],[\\\"gh-test\\\",\\\"name\\\",[35,0,[\\\"errors\\\"]],[35,0,[\\\"hasValidated\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"testObject\\\",\\\"gh-validation-status-container\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.have.class('success');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.not.have.class('error');\n    });\n    (0, _mocha.it)('has error class when invalid', async function () {\n      this.get('testObject.hasValidated').push('name');\n      this.get('testObject.errors').add('name', 'has error');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{#gh-validation-status-container class=\"gh-test\" property=\"name\" errors=testObject.errors hasValidated=testObject.hasValidated}}\n                  {{/gh-validation-status-container}}\n              \n      */\n      {\n        \"id\": \"bImPLUto\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n\\\"],[6,[37,1],null,[[\\\"class\\\",\\\"property\\\",\\\"errors\\\",\\\"hasValidated\\\"],[\\\"gh-test\\\",\\\"name\\\",[35,0,[\\\"errors\\\"]],[35,0,[\\\"hasValidated\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"testObject\\\",\\\"gh-validation-status-container\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.not.have.class('success');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.have.class('error');\n    });\n    (0, _mocha.it)('still renders if hasValidated is undefined', async function () {\n      this.set('testObject.hasValidated', undefined);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{#gh-validation-status-container class=\"gh-test\" property=\"name\" errors=testObject.errors hasValidated=testObject.hasValidated}}\n                  {{/gh-validation-status-container}}\n              \n      */\n      {\n        \"id\": \"bImPLUto\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n\\\"],[6,[37,1],null,[[\\\"class\\\",\\\"property\\\",\\\"errors\\\",\\\"hasValidated\\\"],[\\\"gh-test\\\",\\\"name\\\",[35,0,[\\\"errors\\\"]],[35,0,[\\\"hasValidated\\\"]]]],[[\\\"default\\\"],[{\\\"statements\\\":[],\\\"parameters\\\":[]}]]],[2,\\\"        \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"testObject\\\",\\\"gh-validation-status-container\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.exist;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-whats-new-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  _mocha.describe.skip('Integration: Component: gh-whats-new', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <GhWhatsNew />\n      */\n      {\n        \"id\": \"Auf9gJBN\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"gh-whats-new\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element.textContent.trim()).to.equal(''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <GhWhatsNew>\n              template block text\n            </GhWhatsNew>\n          \n      */\n      {\n        \"id\": \"krzFhOIF\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"gh-whats-new\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element.textContent.trim()).to.equal('template block text');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/modal-import-members-test\", [\"pretender\", \"ghost-admin/utils/ghost-paths\", \"sinon\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ghost-admin/tests/helpers/file-upload\", \"ember-mocha\"], function (_pretender, _ghostPaths, _sinon, _testHelpers, _mocha, _chai, _fileUpload, _emberMocha) {\n  \"use strict\";\n\n  const notificationsStub = Ember.Service.extend({\n    showAPIError() {// noop - to be stubbed\n    }\n\n  });\n\n  const stubSuccessfulUpload = function (server) {\n    let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    server.post(`${(0, _ghostPaths.default)().apiRoot}/members/upload/`, function () {\n      return [200, {\n        'Content-Type': 'application/json'\n      }, '{\"url\":\"/content/images/test.png\"}'];\n    }, delay);\n  };\n\n  const stubFailedUpload = function (server, code, error) {\n    let delay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    server.post(`${(0, _ghostPaths.default)().apiRoot}/members/upload/`, function () {\n      return [code, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        errors: [{\n          type: error,\n          message: `Error: ${error}`\n        }]\n      })];\n    }, delay);\n  };\n\n  (0, _mocha.describe)('Integration: Component: modal-import-members-test', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n      this.set('uploadUrl', `${(0, _ghostPaths.default)().apiRoot}/members/upload/`);\n      this.owner.register('service:notifications', notificationsStub);\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('renders', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{modal-import-members}}\n      */\n      {\n        \"id\": \"cj1W1p3N\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"modal-import-members\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('h1').textContent.trim(), 'default header').to.equal('Import members');\n      (0, _chai.expect)((0, _testHelpers.find)('.description').textContent.trim(), 'upload label').to.equal('Select or drop a CSV file');\n    });\n    (0, _mocha.it)('generates request to supplied endpoint', async function () {\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{modal-import-members}}\n      */\n      {\n        \"id\": \"cj1W1p3N\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"modal-import-members\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['name,email\\r\\nmembername,memberemail@example.com'], {\n        name: 'test.csv'\n      });\n      await (0, _testHelpers.waitFor)('table', {\n        timeout: 50\n      });\n      (0, _chai.expect)((0, _testHelpers.find)('label').textContent.trim(), 'labels label').to.equal('Label these members');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-btn-green').textContent).to.match(/Import/g);\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)(server.handledRequests.length).to.equal(1);\n      (0, _chai.expect)(server.handledRequests[0].url).to.equal(`${(0, _ghostPaths.default)().apiRoot}/members/upload/`);\n    });\n    (0, _mocha.it)('displays server error', async function () {\n      stubFailedUpload(server, 415, 'UnsupportedMediaTypeError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{modal-import-members}}\n      */\n      {\n        \"id\": \"cj1W1p3N\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"modal-import-members\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['name,email\\r\\nmembername,memberemail@example.com'], {\n        name: 'test.csv'\n      }); // Wait for async CSV parsing to finish\n\n      await (0, _testHelpers.waitFor)('table', {\n        timeout: 50\n      });\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file type you uploaded is not supported/);\n    });\n    (0, _mocha.it)('displays file too large for server error', async function () {\n      stubFailedUpload(server, 413, 'RequestEntityTooLargeError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{modal-import-members}}\n      */\n      {\n        \"id\": \"cj1W1p3N\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"modal-import-members\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['name,email\\r\\nmembername,memberemail@example.com'], {\n        name: 'test.csv'\n      }); // Wait for async CSV parsing to finish\n\n      await (0, _testHelpers.waitFor)('table', {\n        timeout: 50\n      });\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file you uploaded was larger/);\n    });\n    (0, _mocha.it)('handles file too large error directly from the web server', async function () {\n      server.post(`${(0, _ghostPaths.default)().apiRoot}/members/upload/`, function () {\n        return [413, {}, ''];\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{modal-import-members}}\n      */\n      {\n        \"id\": \"cj1W1p3N\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"modal-import-members\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['name,email\\r\\nmembername,memberemail@example.com'], {\n        name: 'test.csv'\n      }); // Wait for async CSV parsing to finish\n\n      await (0, _testHelpers.waitFor)('table', {\n        timeout: 50\n      });\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file you uploaded was larger/);\n    });\n    (0, _mocha.it)('displays other server-side error with message', async function () {\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{modal-import-members}}\n      */\n      {\n        \"id\": \"cj1W1p3N\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"modal-import-members\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['name,email\\r\\nmembername,memberemail@example.com'], {\n        name: 'test.csv'\n      }); // Wait for async CSV parsing to finish\n\n      await (0, _testHelpers.waitFor)('table', {\n        timeout: 50\n      });\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/Error: UnknownError/);\n    });\n    (0, _mocha.it)('handles unknown failure', async function () {\n      server.post(`${(0, _ghostPaths.default)().apiRoot}/members/upload/`, function () {\n        return [500, {\n          'Content-Type': 'application/json'\n        }, ''];\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{modal-import-members}}\n      */\n      {\n        \"id\": \"cj1W1p3N\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"modal-import-members\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['name,email\\r\\nmembername,memberemail@example.com'], {\n        name: 'test.csv'\n      }); // Wait for async CSV parsing to finish\n\n      await (0, _testHelpers.waitFor)('table', {\n        timeout: 50\n      });\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/Something went wrong/);\n    });\n    (0, _mocha.it)('triggers notifications.showAPIError for VersionMismatchError', async function () {\n      let showAPIError = _sinon.default.spy();\n\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('showAPIError', showAPIError);\n      stubFailedUpload(server, 400, 'VersionMismatchError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{modal-import-members}}\n      */\n      {\n        \"id\": \"cj1W1p3N\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"modal-import-members\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['name,email\\r\\nmembername,memberemail@example.com'], {\n        name: 'test.csv'\n      }); // Wait for async CSV parsing to finish\n\n      await (0, _testHelpers.waitFor)('table', {\n        timeout: 50\n      });\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)(showAPIError.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('doesn\\'t trigger notifications.showAPIError for other errors', async function () {\n      let showAPIError = _sinon.default.spy();\n\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('showAPIError', showAPIError);\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{modal-import-members}}\n      */\n      {\n        \"id\": \"cj1W1p3N\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"modal-import-members\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['name,email\\r\\nmembername,memberemail@example.com'], {\n        name: 'test.csv'\n      }); // Wait for async CSV parsing to finish\n\n      await (0, _testHelpers.waitFor)('table', {\n        timeout: 50\n      });\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)(showAPIError.called).to.be.false;\n    });\n    (0, _mocha.it)('validates extension by default', async function () {\n      stubFailedUpload(server, 415);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{modal-import-members}}\n      */\n      {\n        \"id\": \"cj1W1p3N\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[34,0]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"modal-import-members\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['name,email\\r\\nmembername,memberemail@example.com'], {\n        name: 'test.csv'\n      }); // Wait for async CSV parsing to finish\n\n      await (0, _testHelpers.waitFor)('table', {\n        timeout: 50\n      });\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file type you uploaded is not supported/);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/modal-transfer-owner-test\", [\"sinon\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: modal-transfer-owner', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('triggers confirm action', async function () {\n      let confirm = _sinon.default.stub();\n\n      let closeModal = _sinon.default.spy();\n\n      confirm.returns(Ember.RSVP.resolve({}));\n      this.set('confirm', confirm);\n      this.set('closeModal', closeModal);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{modal-transfer-owner confirm=(action confirm) closeModal=(action closeModal)}}\n      */\n      {\n        \"id\": \"dp8atLcE\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,3],null,[[\\\"confirm\\\",\\\"closeModal\\\"],[[30,[36,1],[[32,0],[35,2]],null],[30,[36,1],[[32,0],[35,0]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"closeModal\\\",\\\"action\\\",\\\"confirm\\\",\\\"modal-transfer-owner\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      await (0, _testHelpers.click)('.gh-btn.gh-btn-red');\n      (0, _chai.expect)(confirm.calledOnce, 'confirm called').to.be.true;\n      (0, _chai.expect)(closeModal.calledOnce, 'closeModal called').to.be.true;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/helpers/background-image-style-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Helper: background-image-style', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{background-image-style \"test.png\"}}\n      */\n      {\n        \"id\": \"m3DuKdrl\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,0],[\\\"test.png\\\"],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"background-image-style\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('background-image: url(test.png);');\n    });\n    (0, _mocha.it)('escapes URLs', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{background-image-style \"test image.png\"}}\n      */\n      {\n        \"id\": \"hNGnirr+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,0],[\\\"test image.png\\\"],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"background-image-style\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('background-image: url(test%20image.png);');\n    });\n    (0, _mocha.it)('handles already escaped URLs', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{background-image-style \"test%20image.png\"}}\n      */\n      {\n        \"id\": \"UPNZ8C3E\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,0],[\\\"test%20image.png\\\"],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"background-image-style\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('background-image: url(test%20image.png);');\n    });\n    (0, _mocha.it)('handles empty URLs', async function () {\n      this.set('testImage', undefined);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{background-image-style testImage}}\n      */\n      {\n        \"id\": \"LkEPtOAz\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"testImage\\\",\\\"background-image-style\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element, 'undefined').to.have.trimmed.text('');\n      this.set('testImage', null);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{background-image-style testImage}}\n      */\n      {\n        \"id\": \"LkEPtOAz\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"testImage\\\",\\\"background-image-style\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element, 'null').to.have.trimmed.text('');\n      this.set('testImage', '');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{background-image-style testImage}}\n      */\n      {\n        \"id\": \"LkEPtOAz\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"testImage\\\",\\\"background-image-style\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element, 'blank').to.have.trimmed.text('');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/helpers/clean-basic-html-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Helper: clean-basic-html', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      this.set('inputValue', '1234');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{clean-basic-html inputValue}}\n      */\n      {\n        \"id\": \"aGjcZSVL\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"inputValue\\\",\\\"clean-basic-html\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('1234');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/helpers/gh-format-post-time-test\", [\"moment\", \"sinon\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_moment, _sinon, _mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  // because why not?\n  const timezoneForTest = 'Iceland';\n  (0, _mocha.describe)('Integration: Helper: gh-format-post-time', function () {\n    (0, _emberMocha.setupRenderingTest)();\n\n    let sandbox = _sinon.default.createSandbox();\n\n    beforeEach(function () {\n      let settings = this.owner.lookup('service:settings');\n      settings.content = {};\n      settings.set('timezone', timezoneForTest);\n    });\n    afterEach(function () {\n      sandbox.restore();\n    });\n\n    function setupMockDate(_ref2) {\n      let {\n        date,\n        utcDate\n      } = _ref2;\n      let mockDate = (0, _moment.default)(date); // compute expectedTime before we override\n\n      let expectedTime = _moment.default.tz(mockDate, timezoneForTest).format('HH:mm'); // stub moment.utc to return our provided utcDate\n\n\n      let utcStub = sandbox.stub(_moment.default, 'utc');\n      utcStub.returns((0, _moment.default)(utcDate));\n      utcStub.onFirstCall().returns(mockDate);\n      return {\n        expectedTime,\n        mockDate\n      };\n    }\n\n    (0, _mocha.it)('returns basic time difference if post is draft', async function () {\n      let mockDate = _moment.default.utc().subtract(1, 'hour');\n\n      this.set('mockDate', mockDate);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-format-post-time mockDate draft=true}}\n      */\n      {\n        \"id\": \"BcZj6SRY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],[[\\\"draft\\\"],[true]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"mockDate\\\",\\\"gh-format-post-time\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('an hour ago');\n    });\n    (0, _mocha.it)('returns difference if post was published less than 2 minutes ago', async function () {\n      let mockDate = _moment.default.utc().subtract(13, 'minutes');\n\n      this.set('mockDate', mockDate);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-format-post-time mockDate published=true}}\n      */\n      {\n        \"id\": \"dze5Jb/1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],[[\\\"published\\\"],[true]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"mockDate\\\",\\\"gh-format-post-time\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('13 minutes ago');\n    });\n    (0, _mocha.it)('returns difference if post is scheduled for less than 2 minutes from now', async function () {\n      let mockDate = _moment.default.utc().add(13, 'minutes');\n\n      this.set('mockDate', mockDate);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-format-post-time mockDate scheduled=true}}\n      */\n      {\n        \"id\": \"1hjNdbM1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],[[\\\"scheduled\\\"],[true]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"mockDate\\\",\\\"gh-format-post-time\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('in 13 minutes');\n    });\n    (0, _mocha.it)('returns correct format if post was published on the same day', async function () {\n      // needs to be outside of 12 hours\n      let {\n        mockDate,\n        expectedTime\n      } = setupMockDate({\n        date: '2017-09-06T06:00:00Z',\n        utcDate: '2017-09-06T19:00:00Z'\n      });\n      this.set('mockDate', mockDate);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-format-post-time mockDate published=true}}\n      */\n      {\n        \"id\": \"dze5Jb/1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],[[\\\"published\\\"],[true]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"mockDate\\\",\\\"gh-format-post-time\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text(`${expectedTime} (UTC) Today`);\n    });\n    (0, _mocha.it)('returns correct format if post is scheduled for the same day', async function () {\n      // needs to be outside of 12 hours\n      let {\n        mockDate,\n        expectedTime\n      } = setupMockDate({\n        date: '2017-09-06T06:00:00Z',\n        utcDate: '2017-09-06T19:00:00Z'\n      });\n      this.set('mockDate', mockDate);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-format-post-time mockDate scheduled=true}}\n      */\n      {\n        \"id\": \"1hjNdbM1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],[[\\\"scheduled\\\"],[true]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"mockDate\\\",\\\"gh-format-post-time\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text(`at ${expectedTime} (UTC) Today`);\n    });\n    (0, _mocha.it)('returns correct format if post was published yesterday', async function () {\n      let {\n        mockDate,\n        expectedTime\n      } = setupMockDate({\n        date: '2017-09-05T16:00:00Z',\n        utcDate: '2017-09-06T18:00:00Z'\n      });\n      this.set('mockDate', mockDate);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-format-post-time mockDate published=true}}\n      */\n      {\n        \"id\": \"dze5Jb/1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],[[\\\"published\\\"],[true]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"mockDate\\\",\\\"gh-format-post-time\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text(`${expectedTime} (UTC) Yesterday`);\n    });\n    (0, _mocha.it)('returns correct format if post is scheduled for tomorrow', async function () {\n      let {\n        mockDate,\n        expectedTime\n      } = setupMockDate({\n        date: '2017-09-07T18:00:00Z',\n        utcDate: '2017-09-06T16:00:00Z'\n      });\n      this.set('mockDate', mockDate);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-format-post-time mockDate scheduled=true}}\n      */\n      {\n        \"id\": \"1hjNdbM1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],[[\\\"scheduled\\\"],[true]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"mockDate\\\",\\\"gh-format-post-time\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text(`at ${expectedTime} (UTC) tomorrow`);\n    });\n    (0, _mocha.it)('returns correct format if post was published prior to yesterday', async function () {\n      let {\n        mockDate\n      } = setupMockDate({\n        date: '2017-09-02T16:00:00Z',\n        utcDate: '2017-09-06T18:00:00Z'\n      });\n      this.set('mockDate', mockDate);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-format-post-time mockDate published=true}}\n      */\n      {\n        \"id\": \"dze5Jb/1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],[[\\\"published\\\"],[true]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"mockDate\\\",\\\"gh-format-post-time\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('02 Sep 2017');\n    });\n    (0, _mocha.it)('returns correct format if post is scheduled for later than tomorrow', async function () {\n      let {\n        mockDate,\n        expectedTime\n      } = setupMockDate({\n        date: '2017-09-10T18:00:00Z',\n        utcDate: '2017-09-06T16:00:00Z'\n      });\n      this.set('mockDate', mockDate);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{gh-format-post-time mockDate scheduled=true}}\n      */\n      {\n        \"id\": \"1hjNdbM1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],[[\\\"scheduled\\\"],[true]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"mockDate\\\",\\\"gh-format-post-time\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text(`at ${expectedTime} (UTC) on 10 Sep 2017`);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/helpers/gh-url-preview-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Component: gh-url-preview', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      let configStub = Ember.Service.extend({\n        blogUrl: 'http://my-ghost-blog.com'\n      });\n      this.owner.register('service:config', configStub);\n    });\n    (0, _mocha.it)('generates the correct preview URL with a prefix', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-url-preview\n                      prefix=\"tag\"\n                      slug=\"test-slug\"\n                      tagName=\"p\"\n                      classNames=\"test-class\"}}\n      */\n      {\n        \"id\": \"LHKWcBsL\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,0],null,[[\\\"prefix\\\",\\\"slug\\\",\\\"tagName\\\",\\\"classNames\\\"],[\\\"tag\\\",\\\"test-slug\\\",\\\"p\\\",\\\"test-class\\\"]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"gh-url-preview\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('my-ghost-blog.com/tag/test-slug/');\n    });\n    (0, _mocha.it)('generates the correct preview URL without a prefix', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  {{gh-url-preview\n                      slug=\"test-slug\"\n                      tagName=\"p\"\n                      classNames=\"test-class\"}}\n      */\n      {\n        \"id\": \"MdLhD7UU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n            \\\"],[1,[30,[36,0],null,[[\\\"slug\\\",\\\"tagName\\\",\\\"classNames\\\"],[\\\"test-slug\\\",\\\"p\\\",\\\"test-class\\\"]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"gh-url-preview\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('my-ghost-blog.com/test-slug/');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/helpers/sanitize-html-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Helper: sanitize-html', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders html', async function () {\n      this.set('inputValue', '<strong>bold</strong>');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{{sanitize-html inputValue}}}\n      */\n      {\n        \"id\": \"C1MSMYjQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,[30,[36,1],[[35,0]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"inputValue\\\",\\\"sanitize-html\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.html('<strong>bold</strong>');\n    });\n    (0, _mocha.it)('replaces scripts', async function () {\n      this.set('inputValue', '<script></script>');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{{sanitize-html inputValue}}}\n      */\n      {\n        \"id\": \"C1MSMYjQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,[30,[36,1],[[35,0]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"inputValue\\\",\\\"sanitize-html\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.html('<pre class=\"js-embed-placeholder\">Embedded JavaScript</pre>');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/ajax-test\", [\"pretender\", \"ghost-admin/config/environment\", \"mocha\", \"chai\", \"ember-ajax/errors\", \"ghost-admin/services/ajax\", \"ember-mocha\"], function (_pretender, _environment, _mocha, _chai, _errors, _ajax, _emberMocha) {\n  \"use strict\";\n\n  function stubAjaxEndpoint(server) {\n    let response = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n    server.get('/test/', function () {\n      return [code, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(response)];\n    });\n  }\n\n  (0, _mocha.describe)('Integration: Service: ajax', function () {\n    (0, _emberMocha.setupTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('adds Ghost version header to requests', function (done) {\n      let {\n        version\n      } = _environment.default.APP;\n      let ajax = this.owner.lookup('service:ajax');\n      stubAjaxEndpoint(server, {});\n      ajax.request('/test/').then(() => {\n        let [request] = server.handledRequests;\n        (0, _chai.expect)(request.requestHeaders['X-Ghost-Version']).to.equal(version);\n        done();\n      });\n    });\n    (0, _mocha.it)('correctly parses single message response text', function (done) {\n      let errorResponse = {\n        message: 'Test Error'\n      };\n      stubAjaxEndpoint(server, errorResponse, 500);\n      let ajax = this.owner.lookup('service:ajax');\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true();\n      }).catch(error => {\n        (0, _chai.expect)(error.payload.errors.length).to.equal(1);\n        (0, _chai.expect)(error.payload.errors[0].message).to.equal('Test Error');\n        done();\n      });\n    });\n    (0, _mocha.it)('correctly parses single error response text', function (done) {\n      let errorResponse = {\n        error: 'Test Error'\n      };\n      stubAjaxEndpoint(server, errorResponse, 500);\n      let ajax = this.owner.lookup('service:ajax');\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true();\n      }).catch(error => {\n        (0, _chai.expect)(error.payload.errors.length).to.equal(1);\n        (0, _chai.expect)(error.payload.errors[0].message).to.equal('Test Error');\n        done();\n      });\n    });\n    (0, _mocha.it)('correctly parses multiple error messages', function (done) {\n      let errorResponse = {\n        errors: ['First Error', 'Second Error']\n      };\n      stubAjaxEndpoint(server, errorResponse, 500);\n      let ajax = this.owner.lookup('service:ajax');\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true();\n      }).catch(error => {\n        (0, _chai.expect)(error.payload.errors.length).to.equal(2);\n        (0, _chai.expect)(error.payload.errors[0].message).to.equal('First Error');\n        (0, _chai.expect)(error.payload.errors[1].message).to.equal('Second Error');\n        done();\n      });\n    });\n    (0, _mocha.it)('returns default error object for non built-in error', function (done) {\n      stubAjaxEndpoint(server, {}, 500);\n      let ajax = this.owner.lookup('service:ajax');\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true;\n      }).catch(error => {\n        (0, _chai.expect)((0, _errors.isAjaxError)(error)).to.be.true;\n        done();\n      });\n    });\n    (0, _mocha.it)('handles error checking for built-in errors', function (done) {\n      stubAjaxEndpoint(server, '', 401);\n      let ajax = this.owner.lookup('service:ajax');\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true;\n      }).catch(error => {\n        (0, _chai.expect)((0, _errors.isUnauthorizedError)(error)).to.be.true;\n        done();\n      });\n    });\n    (0, _mocha.it)('handles error checking for VersionMismatchError', function (done) {\n      server.get('/test/', function () {\n        return [400, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          errors: [{\n            type: 'VersionMismatchError',\n            statusCode: 400\n          }]\n        })];\n      });\n      let ajax = this.owner.lookup('service:ajax');\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true;\n      }).catch(error => {\n        (0, _chai.expect)((0, _ajax.isVersionMismatchError)(error)).to.be.true;\n        done();\n      });\n    });\n    (0, _mocha.it)('handles error checking for RequestEntityTooLargeError on 413 errors', function (done) {\n      stubAjaxEndpoint(server, {}, 413);\n      let ajax = this.owner.lookup('service:ajax');\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true;\n      }).catch(error => {\n        (0, _chai.expect)((0, _ajax.isRequestEntityTooLargeError)(error)).to.be.true;\n        done();\n      });\n    });\n    (0, _mocha.it)('handles error checking for UnsupportedMediaTypeError on 415 errors', function (done) {\n      stubAjaxEndpoint(server, {}, 415);\n      let ajax = this.owner.lookup('service:ajax');\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true;\n      }).catch(error => {\n        (0, _chai.expect)((0, _ajax.isUnsupportedMediaTypeError)(error)).to.be.true;\n        done();\n      });\n    });\n    (0, _mocha.it)('handles error checking for MaintenanceError on 503 errors', function (done) {\n      stubAjaxEndpoint(server, {}, 503);\n      let ajax = this.owner.lookup('service:ajax');\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true;\n      }).catch(error => {\n        (0, _chai.expect)((0, _ajax.isMaintenanceError)(error)).to.be.true;\n        done();\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/config-test\", [\"pretender\", \"ghost-admin/utils/ghost-paths\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_pretender, _ghostPaths, _mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Service: config', function () {\n    (0, _emberMocha.setupTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('returns a list of timezones in the expected format', function (done) {\n      let service = this.owner.lookup('service:config');\n      service.get('availableTimezones').then(function (timezones) {\n        (0, _chai.expect)(timezones.length).to.equal(66);\n        (0, _chai.expect)(timezones[0].name).to.equal('Pacific/Pago_Pago');\n        (0, _chai.expect)(timezones[0].label).to.equal('(GMT -11:00) Midway Island, Samoa');\n        (0, _chai.expect)(timezones[1].name).to.equal('Pacific/Honolulu');\n        (0, _chai.expect)(timezones[1].label).to.equal('(GMT -10:00) Hawaii');\n        done();\n      });\n    });\n    (0, _mocha.it)('normalizes blogUrl to non-trailing-slash', function (done) {\n      let stubBlogUrl = function stubBlogUrl(url) {\n        server.get(`${(0, _ghostPaths.default)().apiRoot}/config/`, function () {\n          return [200, {\n            'Content-Type': 'application/json'\n          }, JSON.stringify({})];\n        });\n        server.get(`${(0, _ghostPaths.default)().apiRoot}/site/`, function () {\n          return [200, {\n            'Content-Type': 'application/json'\n          }, JSON.stringify({\n            site: {\n              url\n            }\n          })];\n        });\n      };\n\n      let service = this.owner.lookup('service:config');\n      stubBlogUrl('http://localhost:2368/');\n      service.fetch().then(() => {\n        (0, _chai.expect)(service.get('blogUrl'), 'trailing-slash').to.equal('http://localhost:2368');\n      });\n      (0, _testHelpers.settled)().then(() => {\n        stubBlogUrl('http://localhost:2368');\n        service.fetch().then(() => {\n          (0, _chai.expect)(service.get('blogUrl'), 'non-trailing-slash').to.equal('http://localhost:2368');\n          done();\n        });\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/feature-test\", [\"ghost-admin/services/feature\", \"pretender\", \"ghost-admin/utils/ghost-paths\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_feature, _pretender, _ghostPaths, _mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  function stubSettings(server, labs) {\n    let validSave = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let settings = [{\n      id: '1',\n      type: 'labs',\n      key: 'labs',\n      value: JSON.stringify(labs)\n    }];\n    server.get(`${(0, _ghostPaths.default)().apiRoot}/settings/`, function () {\n      return [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        settings\n      })];\n    });\n    server.put(`${(0, _ghostPaths.default)().apiRoot}/settings/`, function (request) {\n      let statusCode = validSave ? 200 : 400;\n      let response = validSave ? request.requestBody : JSON.stringify({\n        errors: [{\n          message: 'Test Error'\n        }]\n      });\n      return [statusCode, {\n        'Content-Type': 'application/json'\n      }, response];\n    });\n  }\n\n  function stubUser(server, accessibility) {\n    let validSave = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let users = [{\n      id: '1',\n      // Add extra properties for the validations\n      name: 'Test User',\n      email: 'test@example.com',\n      accessibility: JSON.stringify(accessibility),\n      roles: [{\n        id: 1,\n        name: 'Owner',\n        description: 'Owner'\n      }]\n    }];\n    server.get(`${(0, _ghostPaths.default)().apiRoot}/users/me/`, function () {\n      return [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        users\n      })];\n    });\n    server.put(`${(0, _ghostPaths.default)().apiRoot}/users/1/`, function (request) {\n      let statusCode = validSave ? 200 : 400;\n      let response = validSave ? request.requestBody : JSON.stringify({\n        errors: [{\n          message: 'Test Error'\n        }]\n      });\n      return [statusCode, {\n        'Content-Type': 'application/json'\n      }, response];\n    });\n  }\n\n  function addTestFlag() {\n    _feature.default.reopen({\n      testFlag: (0, _feature.feature)('testFlag'),\n      testUserFlag: (0, _feature.feature)('testUserFlag', {\n        user: true\n      })\n    });\n  }\n\n  (0, _mocha.describe)('Integration: Service: feature', function () {\n    (0, _emberMocha.setupTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('loads labs and user settings correctly', async function () {\n      stubSettings(server, {\n        testFlag: true\n      });\n      stubUser(server, {\n        testUserFlag: true\n      });\n      addTestFlag();\n      let session = this.owner.lookup('service:session');\n      await session.populateUser();\n      let service = this.owner.lookup('service:feature');\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('testFlag')).to.be.true;\n        (0, _chai.expect)(service.get('testUserFlag')).to.be.true;\n      });\n    });\n    (0, _mocha.it)('returns false for set flag with config false and labs false', async function () {\n      stubSettings(server, {\n        testFlag: false\n      });\n      stubUser(server, {});\n      addTestFlag();\n      let session = this.owner.lookup('service:session');\n      await session.populateUser();\n      let service = this.owner.lookup('service:feature');\n      service.get('config').set('testFlag', false);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('labs.testFlag')).to.be.false;\n        (0, _chai.expect)(service.get('testFlag')).to.be.false;\n      });\n    });\n    (0, _mocha.it)('returns true for set flag with config true and labs false', async function () {\n      stubSettings(server, {\n        testFlag: false\n      });\n      stubUser(server, {});\n      addTestFlag();\n      let session = this.owner.lookup('service:session');\n      await session.populateUser();\n      let service = this.owner.lookup('service:feature');\n      service.get('config').set('testFlag', true);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('labs.testFlag')).to.be.false;\n        (0, _chai.expect)(service.get('testFlag')).to.be.true;\n      });\n    });\n    (0, _mocha.it)('returns true for set flag with config false and labs true', async function () {\n      stubSettings(server, {\n        testFlag: true\n      });\n      stubUser(server, {});\n      addTestFlag();\n      let session = this.owner.lookup('service:session');\n      await session.populateUser();\n      let service = this.owner.lookup('service:feature');\n      service.get('config').set('testFlag', false);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('labs.testFlag')).to.be.true;\n        (0, _chai.expect)(service.get('testFlag')).to.be.true;\n      });\n    });\n    (0, _mocha.it)('returns true for set flag with config true and labs true', async function () {\n      stubSettings(server, {\n        testFlag: true\n      });\n      stubUser(server, {});\n      addTestFlag();\n      let session = this.owner.lookup('service:session');\n      await session.populateUser();\n      let service = this.owner.lookup('service:feature');\n      service.get('config').set('testFlag', true);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('labs.testFlag')).to.be.true;\n        (0, _chai.expect)(service.get('testFlag')).to.be.true;\n      });\n    });\n    (0, _mocha.it)('returns false for set flag with accessibility false', async function () {\n      stubSettings(server, {});\n      stubUser(server, {\n        testUserFlag: false\n      });\n      addTestFlag();\n      let session = this.owner.lookup('service:session');\n      await session.populateUser();\n      let service = this.owner.lookup('service:feature');\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('accessibility.testUserFlag')).to.be.false;\n        (0, _chai.expect)(service.get('testUserFlag')).to.be.false;\n      });\n    });\n    (0, _mocha.it)('returns true for set flag with accessibility true', async function () {\n      stubSettings(server, {});\n      stubUser(server, {\n        testUserFlag: true\n      });\n      addTestFlag();\n      let session = this.owner.lookup('service:session');\n      await session.populateUser();\n      let service = this.owner.lookup('service:feature');\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('accessibility.testUserFlag')).to.be.true;\n        (0, _chai.expect)(service.get('testUserFlag')).to.be.true;\n      });\n    });\n    (0, _mocha.it)('saves labs setting correctly', async function () {\n      stubSettings(server, {\n        testFlag: false\n      });\n      stubUser(server, {\n        testUserFlag: false\n      });\n      addTestFlag();\n      let session = this.owner.lookup('service:session');\n      await session.populateUser();\n      let service = this.owner.lookup('service:feature');\n      service.get('config').set('testFlag', false);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('testFlag')).to.be.false;\n        Ember.run(() => {\n          service.set('testFlag', true);\n        });\n        return (0, _testHelpers.settled)().then(() => {\n          (0, _chai.expect)(server.handlers[1].numberOfCalls).to.equal(1);\n          (0, _chai.expect)(service.get('testFlag')).to.be.true;\n        });\n      });\n    });\n    (0, _mocha.it)('saves accessibility setting correctly', async function () {\n      stubSettings(server, {});\n      stubUser(server, {\n        testUserFlag: false\n      });\n      addTestFlag();\n      let session = this.owner.lookup('service:session');\n      await session.populateUser();\n      let service = this.owner.lookup('service:feature');\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('testUserFlag')).to.be.false;\n        Ember.run(() => {\n          service.set('testUserFlag', true);\n        });\n        return (0, _testHelpers.settled)().then(() => {\n          (0, _chai.expect)(server.handlers[3].numberOfCalls).to.equal(1);\n          (0, _chai.expect)(service.get('testUserFlag')).to.be.true;\n        });\n      });\n    });\n    (0, _mocha.it)('notifies for server errors on labs save', async function () {\n      stubSettings(server, {\n        testFlag: false\n      }, false);\n      stubUser(server, {});\n      addTestFlag();\n      let session = this.owner.lookup('service:session');\n      await session.populateUser();\n      let service = this.owner.lookup('service:feature');\n      service.get('config').set('testFlag', false);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('testFlag')).to.be.false;\n        Ember.run(() => {\n          service.set('testFlag', true);\n        });\n        return (0, _testHelpers.settled)().then(() => {\n          (0, _chai.expect)(server.handlers[1].numberOfCalls, 'PUT call is made').to.equal(1);\n          (0, _chai.expect)(service.get('notifications.alerts').length, 'number of alerts shown').to.equal(1);\n          (0, _chai.expect)(service.get('testFlag')).to.be.false;\n        });\n      });\n    });\n    (0, _mocha.it)('notifies for server errors on accessibility save', async function () {\n      stubSettings(server, {});\n      stubUser(server, {\n        testUserFlag: false\n      }, false);\n      addTestFlag();\n      let session = this.owner.lookup('service:session');\n      await session.populateUser();\n      let service = this.owner.lookup('service:feature');\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('testUserFlag')).to.be.false;\n        Ember.run(() => {\n          service.set('testUserFlag', true);\n        });\n        return (0, _testHelpers.settled)().then(() => {\n          (0, _chai.expect)(server.handlers[3].numberOfCalls, 'PUT call is made').to.equal(1);\n          (0, _chai.expect)(service.get('notifications.alerts').length, 'number of alerts shown').to.equal(1);\n          (0, _chai.expect)(service.get('testUserFlag')).to.be.false;\n        });\n      });\n    });\n    (0, _mocha.it)('notifies for validation errors', async function () {\n      stubSettings(server, {\n        testFlag: false\n      }, true, false);\n      stubUser(server, {});\n      addTestFlag();\n      let session = this.owner.lookup('service:session');\n      await session.populateUser();\n      let service = this.owner.lookup('service:feature');\n      service.get('config').set('testFlag', false);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('testFlag')).to.be.false;\n        Ember.run(() => {\n          (0, _chai.expect)(() => {\n            service.set('testFlag', true);\n          }, Ember.Error, 'threw validation error');\n        });\n        return (0, _testHelpers.settled)().then(() => {\n          // ensure validation is happening before the API is hit\n          (0, _chai.expect)(server.handlers[1].numberOfCalls).to.equal(0);\n          (0, _chai.expect)(service.get('testFlag')).to.be.false;\n        });\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/lazy-loader-test\", [\"pretender\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Service: lazy-loader', function () {\n    (0, _emberMocha.setupTest)();\n    let server;\n    let ghostPaths = {\n      adminRoot: '/assets/'\n    };\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('loads a script correctly and only once', async function () {\n      let subject = this.owner.lookup('service:lazy-loader');\n      subject.setProperties({\n        ghostPaths,\n        scriptPromises: {},\n        testing: false\n      }); // first load should add script element\n\n      await subject.loadScript('test', 'lazy-test.js').then(() => {}).catch(() => {});\n      (0, _chai.expect)(document.querySelectorAll('script[src=\"/assets/lazy-test.js\"]').length, 'no of script tags on first load').to.equal(1); // second load should not add another script element\n\n      await subject.loadScript('test', '/assets/lazy-test.js').then(() => {}).catch(() => {});\n      (0, _chai.expect)(document.querySelectorAll('script[src=\"/assets/lazy-test.js\"]').length, 'no of script tags on second load').to.equal(1);\n    });\n    (0, _mocha.it)('loads styles correctly', function () {\n      let subject = this.owner.lookup('service:lazy-loader');\n      subject.setProperties({\n        ghostPaths,\n        testing: false\n      });\n      return subject.loadStyle('testing', 'style.css').catch(() => {\n        // we add a catch handler here because `/assets/style.css` doesn't exist\n        (0, _chai.expect)(document.querySelectorAll('#testing-styles').length).to.equal(1);\n        (0, _chai.expect)(document.querySelector('#testing-styles').getAttribute('href')).to.equal('/assets/style.css');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/member-import-validator-test\", [\"pretender\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  let MembersUtilsStub = Ember.Service.extend({\n    isStripeEnabled: true\n  });\n  (0, _mocha.describe)('Integration: Service: member-import-validator', function () {\n    (0, _emberMocha.setupTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n      this.owner.register('service:membersUtils', MembersUtilsStub);\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('checks correct data without Stripe customer', async function () {\n      let service = this.owner.lookup('service:member-import-validator');\n      const mapping = await service.check([{\n        name: 'Rish',\n        email: 'validemail@example.com'\n      }]);\n      (0, _chai.expect)(mapping.email).to.equal('email');\n    });\n    (0, _mocha.describe)('data sampling method', function () {\n      (0, _mocha.it)('returns whole data set when sampled size is less then default 30', async function () {\n        this.owner.register('service:membersUtils', Ember.Service.extend({\n          isStripeEnabled: false\n        }));\n        let service = this.owner.lookup('service:member-import-validator');\n        const result = await service._sampleData([{\n          email: 'email@example.com'\n        }, {\n          email: 'email2@example.com'\n        }]);\n        (0, _chai.expect)(result.length).to.equal(2);\n      });\n      (0, _mocha.it)('returns dataset with sample size for non empty values only', async function () {\n        this.owner.register('service:membersUtils', Ember.Service.extend({\n          isStripeEnabled: false\n        }));\n        let service = this.owner.lookup('service:member-import-validator');\n        let data = [{\n          email: null\n        }, {\n          email: 'email2@example.com'\n        }, {\n          email: 'email3@example.com'\n        }, {\n          email: 'email4@example.com'\n        }, {\n          email: ''\n        }];\n        const result = await service._sampleData(data, 3);\n        (0, _chai.expect)(result.length).to.equal(3);\n        (0, _chai.expect)(result[0].email).to.equal('email2@example.com');\n        (0, _chai.expect)(result[1].email).to.equal('email3@example.com');\n        (0, _chai.expect)(result[2].email).to.equal('email4@example.com');\n      });\n      (0, _mocha.it)('returns dataset with sample size for non empty values for objects with multiple properties', async function () {\n        this.owner.register('service:membersUtils', Ember.Service.extend({\n          isStripeEnabled: false\n        }));\n        let service = this.owner.lookup('service:member-import-validator');\n        let data = [{\n          email: null,\n          other_prop: 'non empty 1'\n        }, {\n          email: 'email2@example.com',\n          other_prop: 'non empty 2'\n        }, {\n          email: 'email3@example.com',\n          other_prop: ''\n        }, {\n          email: 'email4@example.com'\n        }, {\n          email: '',\n          other_prop: 'non empty 5'\n        }];\n        const result = await service._sampleData(data, 3);\n        (0, _chai.expect)(result.length).to.equal(3);\n        (0, _chai.expect)(result[0].email).to.equal('email2@example.com');\n        (0, _chai.expect)(result[0].other_prop).to.equal('non empty 1');\n        (0, _chai.expect)(result[1].email).to.equal('email3@example.com');\n        (0, _chai.expect)(result[1].other_prop).to.equal('non empty 2');\n        (0, _chai.expect)(result[2].email).to.equal('email4@example.com');\n        (0, _chai.expect)(result[2].other_prop).to.equal('non empty 5');\n      });\n    });\n    (0, _mocha.describe)('data detection method', function () {\n      (0, _mocha.it)('correctly detects only email mapping', async function () {\n        this.owner.register('service:membersUtils', Ember.Service.extend({\n          isStripeEnabled: false\n        }));\n        let service = this.owner.lookup('service:member-import-validator');\n\n        const result = service._detectDataTypes([{\n          correo_electronico: 'email@example.com'\n        }, {\n          correo_electronico: 'email2@example.com'\n        }]);\n\n        (0, _chai.expect)(result.email).to.equal('correo_electronico');\n        (0, _chai.expect)(result.stripe_customer_id).to.equal(undefined);\n      });\n      (0, _mocha.it)('correctly detects only email mapping', async function () {\n        this.owner.register('service:membersUtils', Ember.Service.extend({\n          isStripeEnabled: false\n        }));\n        let service = this.owner.lookup('service:member-import-validator');\n\n        const result = service._detectDataTypes([{\n          correo_electronico: 'email@example.com',\n          stripe_id: ''\n        }, {\n          correo_electronico: '',\n          stripe_id: 'cus_'\n        }]);\n\n        (0, _chai.expect)(result.email).to.equal('correo_electronico');\n      });\n      (0, _mocha.it)('correctly detects variation of \"name\" mapping', async function () {\n        this.owner.register('service:membersUtils', Ember.Service.extend({\n          isStripeEnabled: false\n        }));\n        let service = this.owner.lookup('service:member-import-validator');\n\n        const result = service._detectDataTypes([{\n          first_name: 'Rish'\n        }]);\n\n        (0, _chai.expect)(result.name).to.equal('first_name');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/slug-generator-test\", [\"pretender\", \"ghost-admin/utils/ghost-paths\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _ghostPaths, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  function stubSlugEndpoint(server, type, slug) {\n    server.get(`${(0, _ghostPaths.default)().apiRoot}/slugs/:type/:slug/`, function (request) {\n      (0, _chai.expect)(request.params.type).to.equal(type);\n      (0, _chai.expect)(request.params.slug).to.equal(slug);\n      return [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        slugs: [{\n          slug: Ember.String.dasherize(slug)\n        }]\n      })];\n    });\n  }\n\n  (0, _mocha.describe)('Integration: Service: slug-generator', function () {\n    (0, _emberMocha.setupTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('returns empty if no slug is provided', function (done) {\n      let service = this.owner.lookup('service:slug-generator');\n      service.generateSlug('post', '').then(function (slug) {\n        (0, _chai.expect)(slug).to.equal('');\n        done();\n      });\n    });\n    (0, _mocha.it)('calls correct endpoint and returns correct data', function (done) {\n      let rawSlug = 'a test post';\n      stubSlugEndpoint(server, 'post', rawSlug);\n      let service = this.owner.lookup('service:slug-generator');\n      service.generateSlug('post', rawSlug).then(function (slug) {\n        (0, _chai.expect)(slug).to.equal(Ember.String.dasherize(rawSlug));\n        done();\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/store-test\", [\"pretender\", \"ghost-admin/config/environment\", \"ghost-admin/utils/ghost-paths\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _environment, _ghostPaths, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Service: store', function () {\n    (0, _emberMocha.setupTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('adds Ghost version header to requests', function (done) {\n      let {\n        version\n      } = _environment.default.APP;\n      let store = this.owner.lookup('service:store');\n      server.get(`${(0, _ghostPaths.default)().apiRoot}/posts/1/`, function () {\n        return [404, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({})];\n      });\n      store.find('post', 1).catch(() => {\n        let [request] = server.handledRequests;\n        (0, _chai.expect)(request.requestHeaders['X-Ghost-Version']).to.equal(version);\n        done();\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  describe('ESLint | app', function () {\n    it('adapters/api-key.js', function () {// test passed\n    });\n    it('adapters/application.js', function () {// test passed\n    });\n    it('adapters/base.js', function () {// test passed\n    });\n    it('adapters/custom-theme-setting-list.js', function () {// test passed\n    });\n    it('adapters/email.js', function () {// test passed\n    });\n    it('adapters/embedded-relation-adapter.js', function () {// test passed\n    });\n    it('adapters/label.js', function () {// test passed\n    });\n    it('adapters/member.js', function () {// test passed\n    });\n    it('adapters/offer.js', function () {// test passed\n    });\n    it('adapters/page.js', function () {// test passed\n    });\n    it('adapters/post.js', function () {// test passed\n    });\n    it('adapters/product.js', function () {// test passed\n    });\n    it('adapters/setting.js', function () {// test passed\n    });\n    it('adapters/tag.js', function () {// test passed\n    });\n    it('adapters/theme.js', function () {// test passed\n    });\n    it('adapters/user.js', function () {// test passed\n    });\n    it('app.js', function () {// test passed\n    });\n    it('authenticators/cookie.js', function () {// test passed\n    });\n    it('components/aspect-ratio-box.js', function () {// test passed\n    });\n    it('components/custom-theme-settings/boolean.js', function () {// test passed\n    });\n    it('components/custom-theme-settings/color.js', function () {// test passed\n    });\n    it('components/custom-theme-settings/image.js', function () {// test passed\n    });\n    it('components/custom-theme-settings/select.js', function () {// test passed\n    });\n    it('components/custom-theme-settings/text.js', function () {// test passed\n    });\n    it('components/dashboard/latest-member-activity.js', function () {// test passed\n    });\n    it('components/epm-modal-container.js', function () {// test passed\n    });\n    it('components/gh-activating-list-item.js', function () {// test passed\n    });\n    it('components/gh-alert.js', function () {// test passed\n    });\n    it('components/gh-alerts.js', function () {// test passed\n    });\n    it('components/gh-basic-dropdown.js', function () {// test passed\n    });\n    it('components/gh-benefit-item.js', function () {// test passed\n    });\n    it('components/gh-billing-iframe.js', function () {// test passed\n    });\n    it('components/gh-billing-modal.js', function () {// test passed\n    });\n    it('components/gh-billing-update-button.js', function () {// test passed\n    });\n    it('components/gh-blog-url.js', function () {// test passed\n    });\n    it('components/gh-brand-settings-form.js', function () {// test passed\n    });\n    it('components/gh-canvas-header.js', function () {// test passed\n    });\n    it('components/gh-cm-editor.js', function () {// test passed\n    });\n    it('components/gh-content-cover.js', function () {// test passed\n    });\n    it('components/gh-contentfilter.js', function () {// test passed\n    });\n    it('components/gh-custom-view-title.js', function () {// test passed\n    });\n    it('components/gh-date-time-picker.js', function () {// test passed\n    });\n    it('components/gh-distribution-action-select.js', function () {// test passed\n    });\n    it('components/gh-dropdown-button.js', function () {// test passed\n    });\n    it('components/gh-dropdown.js', function () {// test passed\n    });\n    it('components/gh-editor-feature-image.js', function () {// test passed\n    });\n    it('components/gh-editor-post-status.js', function () {// test passed\n    });\n    it('components/gh-editor.js', function () {// test passed\n    });\n    it('components/gh-email-preview-link.js', function () {// test passed\n    });\n    it('components/gh-error-message.js', function () {// test passed\n    });\n    it('components/gh-feature-flag.js', function () {// test passed\n    });\n    it('components/gh-file-input.js', function () {// test passed\n    });\n    it('components/gh-file-upload.js', function () {// test passed\n    });\n    it('components/gh-file-uploader.js', function () {// test passed\n    });\n    it('components/gh-font-selector.js', function () {// test passed\n    });\n    it('components/gh-form-group.js', function () {// test passed\n    });\n    it('components/gh-fullscreen-modal.js', function () {// test passed\n    });\n    it('components/gh-html-iframe.js', function () {// test passed\n    });\n    it('components/gh-image-uploader.js', function () {// test passed\n    });\n    it('components/gh-infinity-loader.js', function () {// test passed\n    });\n    it('components/gh-input-with-select/index.js', function () {// test passed\n    });\n    it('components/gh-input-with-select/trigger.js', function () {// test passed\n    });\n    it('components/gh-koenig-editor.js', function () {// test passed\n    });\n    it('components/gh-launch-wizard/connect-stripe.js', function () {// test passed\n    });\n    it('components/gh-launch-wizard/customise-design.js', function () {// test passed\n    });\n    it('components/gh-launch-wizard/finalise.js', function () {// test passed\n    });\n    it('components/gh-launch-wizard/set-pricing.js', function () {// test passed\n    });\n    it('components/gh-link-to-custom-views-index.js', function () {// test passed\n    });\n    it('components/gh-loading-spinner.js', function () {// test passed\n    });\n    it('components/gh-markdown-editor.js', function () {// test passed\n    });\n    it('components/gh-member-activity-feed.js', function () {// test passed\n    });\n    it('components/gh-member-avatar.js', function () {// test passed\n    });\n    it('components/gh-member-label-input-labs.js', function () {// test passed\n    });\n    it('components/gh-member-label-input.js', function () {// test passed\n    });\n    it('components/gh-member-settings-form.js', function () {// test passed\n    });\n    it('components/gh-member-single-label-input.js', function () {// test passed\n    });\n    it('components/gh-members-chart.js', function () {// test passed\n    });\n    it('components/gh-members-filter-count.js', function () {// test passed\n    });\n    it('components/gh-members-filter-labs.js', function () {// test passed\n    });\n    it('components/gh-members-filter-value-labs.js', function () {// test passed\n    });\n    it('components/gh-members-filter.js', function () {// test passed\n    });\n    it('components/gh-members-import-mapping-input.js', function () {// test passed\n    });\n    it('components/gh-members-import-table.js', function () {// test passed\n    });\n    it('components/gh-members-list-item-column.js', function () {// test passed\n    });\n    it('components/gh-members-no-members.js', function () {// test passed\n    });\n    it('components/gh-members-payments-setting.js', function () {// test passed\n    });\n    it('components/gh-members-recipient-select.js', function () {// test passed\n    });\n    it('components/gh-members-segment-count.js', function () {// test passed\n    });\n    it('components/gh-members-segment-select.js', function () {// test passed\n    });\n    it('components/gh-membership-products-alpha.js', function () {// test passed\n    });\n    it('components/gh-mobile-nav-bar.js', function () {// test passed\n    });\n    it('components/gh-nav-menu.js', function () {// test passed\n    });\n    it('components/gh-nav-menu/design.js', function () {// test passed\n    });\n    it('components/gh-nav-menu/footer.js', function () {// test passed\n    });\n    it('components/gh-nav-menu/main.js', function () {// test passed\n    });\n    it('components/gh-navitem-url-input.js', function () {// test passed\n    });\n    it('components/gh-navitem.js', function () {// test passed\n    });\n    it('components/gh-notification.js', function () {// test passed\n    });\n    it('components/gh-notifications.js', function () {// test passed\n    });\n    it('components/gh-portal-links.js', function () {// test passed\n    });\n    it('components/gh-post-settings-menu.js', function () {// test passed\n    });\n    it('components/gh-post-settings-menu/email.js', function () {// test passed\n    });\n    it('components/gh-posts-list-item.js', function () {// test passed\n    });\n    it('components/gh-power-select/trigger.js', function () {// test passed\n    });\n    it('components/gh-product-card.js', function () {// test passed\n    });\n    it('components/gh-products-price-billingperiod.js', function () {// test passed\n    });\n    it('components/gh-profile-image.js', function () {// test passed\n    });\n    it('components/gh-progress-bar.js', function () {// test passed\n    });\n    it('components/gh-psm-authors-input.js', function () {// test passed\n    });\n    it('components/gh-psm-tags-input.js', function () {// test passed\n    });\n    it('components/gh-psm-template-select.js', function () {// test passed\n    });\n    it('components/gh-psm-visibility-input.js', function () {// test passed\n    });\n    it('components/gh-publishmenu-draft.js', function () {// test passed\n    });\n    it('components/gh-publishmenu-scheduled.js', function () {// test passed\n    });\n    it('components/gh-publishmenu.js', function () {// test passed\n    });\n    it('components/gh-role-selection.js', function () {// test passed\n    });\n    it('components/gh-scroll-trigger.js', function () {// test passed\n    });\n    it('components/gh-search-input.js', function () {// test passed\n    });\n    it('components/gh-simplemde.js', function () {// test passed\n    });\n    it('components/gh-site-iframe.js', function () {// test passed\n    });\n    it('components/gh-skip-link.js', function () {// test passed\n    });\n    it('components/gh-tag-settings-form.js', function () {// test passed\n    });\n    it('components/gh-task-button.js', function () {// test passed\n    });\n    it('components/gh-text-input.js', function () {// test passed\n    });\n    it('components/gh-textarea.js', function () {// test passed\n    });\n    it('components/gh-theme-error-li.js', function () {// test passed\n    });\n    it('components/gh-theme-table.js', function () {// test passed\n    });\n    it('components/gh-timezone-select.js', function () {// test passed\n    });\n    it('components/gh-token-input.js', function () {// test passed\n    });\n    it('components/gh-token-input/label-token-labs.js', function () {// test passed\n    });\n    it('components/gh-token-input/label-token.js', function () {// test passed\n    });\n    it('components/gh-token-input/select-multiple.js', function () {// test passed\n    });\n    it('components/gh-token-input/tag-token.js', function () {// test passed\n    });\n    it('components/gh-token-input/trigger.js', function () {// test passed\n    });\n    it('components/gh-trim-focus-input.js', function () {// test passed\n    });\n    it('components/gh-unsplash-photo.js', function () {// test passed\n    });\n    it('components/gh-unsplash.js', function () {// test passed\n    });\n    it('components/gh-uploader.js', function () {// test passed\n    });\n    it('components/gh-url-input.js', function () {// test passed\n    });\n    it('components/gh-url-preview.js', function () {// test passed\n    });\n    it('components/gh-user-active.js', function () {// test passed\n    });\n    it('components/gh-user-invited.js', function () {// test passed\n    });\n    it('components/gh-user-list-item.js', function () {// test passed\n    });\n    it('components/gh-validation-status-container.js', function () {// test passed\n    });\n    it('components/gh-view-title.js', function () {// test passed\n    });\n    it('components/members-activity/event-type-filter.js', function () {// test passed\n    });\n    it('components/members-activity/member-filter.js', function () {// test passed\n    });\n    it('components/modal-add-label-members.js', function () {// test passed\n    });\n    it('components/modal-base.js', function () {// test passed\n    });\n    it('components/modal-custom-view-form.js', function () {// test passed\n    });\n    it('components/modal-delete-all.js', function () {// test passed\n    });\n    it('components/modal-delete-integration.js', function () {// test passed\n    });\n    it('components/modal-delete-member.js', function () {// test passed\n    });\n    it('components/modal-delete-members.js', function () {// test passed\n    });\n    it('components/modal-delete-snippet.js', function () {// test passed\n    });\n    it('components/modal-delete-tag.js', function () {// test passed\n    });\n    it('components/modal-delete-user.js', function () {// test passed\n    });\n    it('components/modal-delete-webhook.js', function () {// test passed\n    });\n    it('components/modal-disconnect-stripe.js', function () {// test passed\n    });\n    it('components/modal-early-access.js', function () {// test passed\n    });\n    it('components/modal-email-design-settings.js', function () {// test passed\n    });\n    it('components/modal-enable-tiers.js', function () {// test passed\n    });\n    it('components/modal-free-membership-settings.js', function () {// test passed\n    });\n    it('components/modal-impersonate-member.js', function () {// test passed\n    });\n    it('components/modal-import-members.js', function () {// test passed\n    });\n    it('components/modal-import-members/csv-file-mapping.js', function () {// test passed\n    });\n    it('components/modal-import-members/csv-file-select.js', function () {// test passed\n    });\n    it('components/modal-invite-new-user.js', function () {// test passed\n    });\n    it('components/modal-leave-settings.js', function () {// test passed\n    });\n    it('components/modal-markdown-help.js', function () {// test passed\n    });\n    it('components/modal-member-product.js', function () {// test passed\n    });\n    it('components/modal-members-label-form.js', function () {// test passed\n    });\n    it('components/modal-portal-settings.js', function () {// test passed\n    });\n    it('components/modal-product-price.js', function () {// test passed\n    });\n    it('components/modal-product.js', function () {// test passed\n    });\n    it('components/modal-re-authenticate.js', function () {// test passed\n    });\n    it('components/modal-regenerate-key.js', function () {// test passed\n    });\n    it('components/modal-regenerate-token.js', function () {// test passed\n    });\n    it('components/modal-remove-label-members.js', function () {// test passed\n    });\n    it('components/modal-reset-all-passwords.js', function () {// test passed\n    });\n    it('components/modal-select-user-role.js', function () {// test passed\n    });\n    it('components/modal-stripe-connect.js', function () {// test passed\n    });\n    it('components/modal-suspend-user.js', function () {// test passed\n    });\n    it('components/modal-transfer-owner.js', function () {// test passed\n    });\n    it('components/modal-unsubscribe-members.js', function () {// test passed\n    });\n    it('components/modal-unsuspend-user.js', function () {// test passed\n    });\n    it('components/modal-update-snippet.js', function () {// test passed\n    });\n    it('components/modal-upgrade-host-limit.js', function () {// test passed\n    });\n    it('components/modal-upgrade-unsuspend-user-host-limit.js', function () {// test passed\n    });\n    it('components/modal-upload-image.js', function () {// test passed\n    });\n    it('components/modal-webhook-form.js', function () {// test passed\n    });\n    it('components/modal-whats-new.js', function () {// test passed\n    });\n    it('components/modals/delete-post.js', function () {// test passed\n    });\n    it('components/modals/design/confirm-delete-theme.js', function () {// test passed\n    });\n    it('components/modals/design/install-theme.js', function () {// test passed\n    });\n    it('components/modals/design/upload-theme.js', function () {// test passed\n    });\n    it('components/modals/design/view-theme.js', function () {// test passed\n    });\n    it('components/modals/editor/confirm-publish.js', function () {// test passed\n    });\n    it('components/modals/email-preview.js', function () {// test passed\n    });\n    it('components/modals/new-custom-integration.js', function () {// test passed\n    });\n    it('components/modals/offers/archive.js', function () {// test passed\n    });\n    it('components/modals/offers/link.js', function () {// test passed\n    });\n    it('components/modals/offers/unarchive.js', function () {// test passed\n    });\n    it('components/modals/post-preview.js', function () {// test passed\n    });\n    it('components/modals/post-preview/browser.js', function () {// test passed\n    });\n    it('components/modals/post-preview/email.js', function () {// test passed\n    });\n    it('components/modals/post-preview/mobile.js', function () {// test passed\n    });\n    it('components/modals/post-preview/social.js', function () {// test passed\n    });\n    it('components/modals/search.js', function () {// test passed\n    });\n    it('components/power-select-vertical-collection-options.js', function () {// test passed\n    });\n    it('components/settings/design/general-settings-form.js', function () {// test passed\n    });\n    it('components/settings/members-default-post-access.js', function () {// test passed\n    });\n    it('components/settings/members-email.js', function () {// test passed\n    });\n    it('components/settings/members-email/default-recipients-select.js', function () {// test passed\n    });\n    it('components/settings/members-subscription-access.js', function () {// test passed\n    });\n    it('controllers/application.js', function () {// test passed\n    });\n    it('controllers/billing.js', function () {// test passed\n    });\n    it('controllers/dashboard.js', function () {// test passed\n    });\n    it('controllers/designsandbox.js', function () {// test passed\n    });\n    it('controllers/editor.js', function () {// test passed\n    });\n    it('controllers/editor/edit-loading.js', function () {// test passed\n    });\n    it('controllers/error.js', function () {// test passed\n    });\n    it('controllers/launch.js', function () {// test passed\n    });\n    it('controllers/member.js', function () {// test passed\n    });\n    it('controllers/members-activity.js', function () {// test passed\n    });\n    it('controllers/members.js', function () {// test passed\n    });\n    it('controllers/members/import.js', function () {// test passed\n    });\n    it('controllers/offer.js', function () {// test passed\n    });\n    it('controllers/offers.js', function () {// test passed\n    });\n    it('controllers/pages-loading.js', function () {// test passed\n    });\n    it('controllers/pages.js', function () {// test passed\n    });\n    it('controllers/posts-loading.js', function () {// test passed\n    });\n    it('controllers/posts.js', function () {// test passed\n    });\n    it('controllers/reset.js', function () {// test passed\n    });\n    it('controllers/settings.js', function () {// test passed\n    });\n    it('controllers/settings/code-injection.js', function () {// test passed\n    });\n    it('controllers/settings/design.js', function () {// test passed\n    });\n    it('controllers/settings/design/change-theme.js', function () {// test passed\n    });\n    it('controllers/settings/design/change-theme/install.js', function () {// test passed\n    });\n    it('controllers/settings/design/index.js', function () {// test passed\n    });\n    it('controllers/settings/general.js', function () {// test passed\n    });\n    it('controllers/settings/integration.js', function () {// test passed\n    });\n    it('controllers/settings/integration/webhooks/edit.js', function () {// test passed\n    });\n    it('controllers/settings/integration/webhooks/new.js', function () {// test passed\n    });\n    it('controllers/settings/integrations.js', function () {// test passed\n    });\n    it('controllers/settings/integrations/amp.js', function () {// test passed\n    });\n    it('controllers/settings/integrations/firstpromoter.js', function () {// test passed\n    });\n    it('controllers/settings/integrations/slack.js', function () {// test passed\n    });\n    it('controllers/settings/integrations/unsplash.js', function () {// test passed\n    });\n    it('controllers/settings/integrations/zapier.js', function () {// test passed\n    });\n    it('controllers/settings/labs.js', function () {// test passed\n    });\n    it('controllers/settings/members-email.js', function () {// test passed\n    });\n    it('controllers/settings/membership.js', function () {// test passed\n    });\n    it('controllers/settings/navigation.js', function () {// test passed\n    });\n    it('controllers/settings/product.js', function () {// test passed\n    });\n    it('controllers/settings/products.js', function () {// test passed\n    });\n    it('controllers/settings/staff/index.js', function () {// test passed\n    });\n    it('controllers/settings/staff/user-loading.js', function () {// test passed\n    });\n    it('controllers/settings/staff/user.js', function () {// test passed\n    });\n    it('controllers/setup.js', function () {// test passed\n    });\n    it('controllers/setup/three.js', function () {// test passed\n    });\n    it('controllers/setup/two.js', function () {// test passed\n    });\n    it('controllers/signin.js', function () {// test passed\n    });\n    it('controllers/signup.js', function () {// test passed\n    });\n    it('controllers/site.js', function () {// test passed\n    });\n    it('controllers/tag.js', function () {// test passed\n    });\n    it('controllers/tags.js', function () {// test passed\n    });\n    it('controllers/whatsnew.js', function () {// test passed\n    });\n    it('errors/email-failed-error.js', function () {// test passed\n    });\n    it('errors/member-import-error.js', function () {// test passed\n    });\n    it('helpers/author-names.js', function () {// test passed\n    });\n    it('helpers/background-image-style.js', function () {// test passed\n    });\n    it('helpers/currency-symbol.js', function () {// test passed\n    });\n    it('helpers/enable-developer-experiments.js', function () {// test passed\n    });\n    it('helpers/event-name.js', function () {// test passed\n    });\n    it('helpers/feature.js', function () {// test passed\n    });\n    it('helpers/format-number.js', function () {// test passed\n    });\n    it('helpers/full-email-address.js', function () {// test passed\n    });\n    it('helpers/gh-count-characters.js', function () {// test passed\n    });\n    it('helpers/gh-count-down-characters.js', function () {// test passed\n    });\n    it('helpers/gh-format-post-time.js', function () {// test passed\n    });\n    it('helpers/gh-pluralize.js', function () {// test passed\n    });\n    it('helpers/gh-price-amount.js', function () {// test passed\n    });\n    it('helpers/gh-user-can-admin.js', function () {// test passed\n    });\n    it('helpers/gravatar.js', function () {// test passed\n    });\n    it('helpers/hex-adjust.js', function () {// test passed\n    });\n    it('helpers/hex-contrast.js', function () {// test passed\n    });\n    it('helpers/highlighted-text.js', function () {// test passed\n    });\n    it('helpers/humanize-setting-key.js', function () {// test passed\n    });\n    it('helpers/integration-icon-style.js', function () {// test passed\n    });\n    it('helpers/members-event-fetcher.js', function () {// test passed\n    });\n    it('helpers/members-event-filter.js', function () {// test passed\n    });\n    it('helpers/noop.js', function () {// test passed\n    });\n    it('helpers/parse-member-event.js', function () {// test passed\n    });\n    it('helpers/reset-query-params.js', function () {// test passed\n    });\n    it('helpers/set-has.js', function () {// test passed\n    });\n    it('helpers/ui-btn-span.js', function () {// test passed\n    });\n    it('helpers/ui-btn.js', function () {// test passed\n    });\n    it('helpers/ui-text.js', function () {// test passed\n    });\n    it('initializers/ember-simple-auth.js', function () {// test passed\n    });\n    it('initializers/trailing-hash.js', function () {// test passed\n    });\n    it('initializers/upgrade-status.js', function () {// test passed\n    });\n    it('mixins/body-event-listener.js', function () {// test passed\n    });\n    it('mixins/dropdown-mixin.js', function () {// test passed\n    });\n    it('mixins/shortcuts-route.js', function () {// test passed\n    });\n    it('mixins/shortcuts.js', function () {// test passed\n    });\n    it('mixins/slug-url.js', function () {// test passed\n    });\n    it('mixins/text-input.js', function () {// test passed\n    });\n    it('mixins/validation-engine.js', function () {// test passed\n    });\n    it('mixins/validation-state.js', function () {// test passed\n    });\n    it('models/action.js', function () {// test passed\n    });\n    it('models/api-key.js', function () {// test passed\n    });\n    it('models/base.js', function () {// test passed\n    });\n    it('models/custom-theme-setting-list.js', function () {// test passed\n    });\n    it('models/custom-theme-setting.js', function () {// test passed\n    });\n    it('models/email-recipient.js', function () {// test passed\n    });\n    it('models/email.js', function () {// test passed\n    });\n    it('models/integration.js', function () {// test passed\n    });\n    it('models/invite.js', function () {// test passed\n    });\n    it('models/label.js', function () {// test passed\n    });\n    it('models/member-product.js', function () {// test passed\n    });\n    it('models/member-subscription.js', function () {// test passed\n    });\n    it('models/member.js', function () {// test passed\n    });\n    it('models/navigation-item.js', function () {// test passed\n    });\n    it('models/notification.js', function () {// test passed\n    });\n    it('models/offer.js', function () {// test passed\n    });\n    it('models/page.js', function () {// test passed\n    });\n    it('models/post.js', function () {// test passed\n    });\n    it('models/product-benefit-item.js', function () {// test passed\n    });\n    it('models/product.js', function () {// test passed\n    });\n    it('models/role.js', function () {// test passed\n    });\n    it('models/setting.js', function () {// test passed\n    });\n    it('models/slack-integration.js', function () {// test passed\n    });\n    it('models/snippet.js', function () {// test passed\n    });\n    it('models/stripe-price.js', function () {// test passed\n    });\n    it('models/tag.js', function () {// test passed\n    });\n    it('models/theme.js', function () {// test passed\n    });\n    it('models/user.js', function () {// test passed\n    });\n    it('models/webhook.js', function () {// test passed\n    });\n    it('modifiers/autofocus.js', function () {// test passed\n    });\n    it('modifiers/movable.js', function () {// test passed\n    });\n    it('modifiers/scroll-into-view.js', function () {// test passed\n    });\n    it('modifiers/scroll-to.js', function () {// test passed\n    });\n    it('modifiers/scroll-top.js', function () {// test passed\n    });\n    it('router.js', function () {// test passed\n    });\n    it('routes/admin.js', function () {// test passed\n    });\n    it('routes/application.js', function () {// test passed\n    });\n    it('routes/authenticated.js', function () {// test passed\n    });\n    it('routes/dashboard.js', function () {// test passed\n    });\n    it('routes/designsandbox.js', function () {// test passed\n    });\n    it('routes/editor.js', function () {// test passed\n    });\n    it('routes/editor/edit.js', function () {// test passed\n    });\n    it('routes/editor/index.js', function () {// test passed\n    });\n    it('routes/editor/new.js', function () {// test passed\n    });\n    it('routes/error404.js', function () {// test passed\n    });\n    it('routes/home.js', function () {// test passed\n    });\n    it('routes/launch.js', function () {// test passed\n    });\n    it('routes/member.js', function () {// test passed\n    });\n    it('routes/member/new.js', function () {// test passed\n    });\n    it('routes/members-activity.js', function () {// test passed\n    });\n    it('routes/members.js', function () {// test passed\n    });\n    it('routes/members/import.js', function () {// test passed\n    });\n    it('routes/offer.js', function () {// test passed\n    });\n    it('routes/offer/new.js', function () {// test passed\n    });\n    it('routes/offers.js', function () {// test passed\n    });\n    it('routes/pages.js', function () {// test passed\n    });\n    it('routes/posts.js', function () {// test passed\n    });\n    it('routes/pro.js', function () {// test passed\n    });\n    it('routes/reset.js', function () {// test passed\n    });\n    it('routes/settings.js', function () {// test passed\n    });\n    it('routes/settings/code-injection.js', function () {// test passed\n    });\n    it('routes/settings/design.js', function () {// test passed\n    });\n    it('routes/settings/design/change-theme.js', function () {// test passed\n    });\n    it('routes/settings/design/change-theme/install.js', function () {// test passed\n    });\n    it('routes/settings/design/change-theme/view.js', function () {// test passed\n    });\n    it('routes/settings/design/index.js', function () {// test passed\n    });\n    it('routes/settings/general.js', function () {// test passed\n    });\n    it('routes/settings/integration.js', function () {// test passed\n    });\n    it('routes/settings/integration/webhooks/edit.js', function () {// test passed\n    });\n    it('routes/settings/integration/webhooks/new.js', function () {// test passed\n    });\n    it('routes/settings/integrations.js', function () {// test passed\n    });\n    it('routes/settings/integrations/amp.js', function () {// test passed\n    });\n    it('routes/settings/integrations/firstpromoter.js', function () {// test passed\n    });\n    it('routes/settings/integrations/new.js', function () {// test passed\n    });\n    it('routes/settings/integrations/slack.js', function () {// test passed\n    });\n    it('routes/settings/integrations/unsplash.js', function () {// test passed\n    });\n    it('routes/settings/integrations/zapier.js', function () {// test passed\n    });\n    it('routes/settings/labs.js', function () {// test passed\n    });\n    it('routes/settings/members-email.js', function () {// test passed\n    });\n    it('routes/settings/membership.js', function () {// test passed\n    });\n    it('routes/settings/navigation.js', function () {// test passed\n    });\n    it('routes/settings/product.js', function () {// test passed\n    });\n    it('routes/settings/product/new.js', function () {// test passed\n    });\n    it('routes/settings/products.js', function () {// test passed\n    });\n    it('routes/settings/staff/index.js', function () {// test passed\n    });\n    it('routes/settings/staff/user.js', function () {// test passed\n    });\n    it('routes/settings/theme-install.js', function () {// test passed\n    });\n    it('routes/setup.js', function () {// test passed\n    });\n    it('routes/setup/index.js', function () {// test passed\n    });\n    it('routes/setup/three.js', function () {// test passed\n    });\n    it('routes/signin.js', function () {// test passed\n    });\n    it('routes/signout.js', function () {// test passed\n    });\n    it('routes/signup.js', function () {// test passed\n    });\n    it('routes/site.js', function () {// test passed\n    });\n    it('routes/tag.js', function () {// test passed\n    });\n    it('routes/tag/new.js', function () {// test passed\n    });\n    it('routes/tags.js', function () {// test passed\n    });\n    it('routes/unauthenticated.js', function () {// test passed\n    });\n    it('routes/whatsnew.js', function () {// test passed\n    });\n    it('serializers/action.js', function () {// test passed\n    });\n    it('serializers/api-key.js', function () {// test passed\n    });\n    it('serializers/application.js', function () {// test passed\n    });\n    it('serializers/custom-theme-setting-list.js', function () {// test passed\n    });\n    it('serializers/email-recipient.js', function () {// test passed\n    });\n    it('serializers/email.js', function () {// test passed\n    });\n    it('serializers/integration.js', function () {// test passed\n    });\n    it('serializers/invite.js', function () {// test passed\n    });\n    it('serializers/label.js', function () {// test passed\n    });\n    it('serializers/member.js', function () {// test passed\n    });\n    it('serializers/notification.js', function () {// test passed\n    });\n    it('serializers/page.js', function () {// test passed\n    });\n    it('serializers/post.js', function () {// test passed\n    });\n    it('serializers/role.js', function () {// test passed\n    });\n    it('serializers/setting.js', function () {// test passed\n    });\n    it('serializers/tag.js', function () {// test passed\n    });\n    it('serializers/theme.js', function () {// test passed\n    });\n    it('serializers/user.js', function () {// test passed\n    });\n    it('serializers/webhook.js', function () {// test passed\n    });\n    it('services/ajax.js', function () {// test passed\n    });\n    it('services/billing.js', function () {// test passed\n    });\n    it('services/clock.js', function () {// test passed\n    });\n    it('services/config.js', function () {// test passed\n    });\n    it('services/custom-theme-settings.js', function () {// test passed\n    });\n    it('services/custom-views.js', function () {// test passed\n    });\n    it('services/data-cache.js', function () {// test passed\n    });\n    it('services/dropdown.js', function () {// test passed\n    });\n    it('services/event-bus.js', function () {// test passed\n    });\n    it('services/feature.js', function () {// test passed\n    });\n    it('services/frontend.js', function () {// test passed\n    });\n    it('services/ghost-paths.js', function () {// test passed\n    });\n    it('services/lazy-loader.js', function () {// test passed\n    });\n    it('services/limit.js', function () {// test passed\n    });\n    it('services/media-queries.js', function () {// test passed\n    });\n    it('services/media.js', function () {// test passed\n    });\n    it('services/member-import-validator.js', function () {// test passed\n    });\n    it('services/members-count-cache.js', function () {// test passed\n    });\n    it('services/members-stats.js', function () {// test passed\n    });\n    it('services/members-utils.js', function () {// test passed\n    });\n    it('services/modals.js', function () {// test passed\n    });\n    it('services/navigation.js', function () {// test passed\n    });\n    it('services/notifications.js', function () {// test passed\n    });\n    it('services/resize-detector.js', function () {// test passed\n    });\n    it('services/session.js', function () {// test passed\n    });\n    it('services/settings.js', function () {// test passed\n    });\n    it('services/slug-generator.js', function () {// test passed\n    });\n    it('services/tenor.js', function () {// test passed\n    });\n    it('services/theme-management.js', function () {// test passed\n    });\n    it('services/ui.js', function () {// test passed\n    });\n    it('services/unsplash.js', function () {// test passed\n    });\n    it('services/upgrade-status.js', function () {// test passed\n    });\n    it('services/utils.js', function () {// test passed\n    });\n    it('services/whats-new.js', function () {// test passed\n    });\n    it('session-stores/application.js', function () {// test passed\n    });\n    it('transforms/facebook-url-user.js', function () {// test passed\n    });\n    it('transforms/json-string.js', function () {// test passed\n    });\n    it('transforms/member-product.js', function () {// test passed\n    });\n    it('transforms/member-subscription.js', function () {// test passed\n    });\n    it('transforms/members-segment-string.js', function () {// test passed\n    });\n    it('transforms/moment-date.js', function () {// test passed\n    });\n    it('transforms/moment-utc.js', function () {// test passed\n    });\n    it('transforms/navigation-settings.js', function () {// test passed\n    });\n    it('transforms/product-benefits.js', function () {// test passed\n    });\n    it('transforms/raw.js', function () {// test passed\n    });\n    it('transforms/slack-settings.js', function () {// test passed\n    });\n    it('transforms/stripe-price.js', function () {// test passed\n    });\n    it('transforms/twitter-url-user.js', function () {// test passed\n    });\n    it('transforms/visibility-string.js', function () {// test passed\n    });\n    it('transitions.js', function () {// test passed\n    });\n    it('transitions/wormhole.js', function () {// test passed\n    });\n    it('utils/bound-one-way.js', function () {// test passed\n    });\n    it('utils/caja-sanitizers.js', function () {// test passed\n    });\n    it('utils/copy-text-to-clipboard.js', function () {// test passed\n    });\n    it('utils/ctrl-or-cmd.js', function () {// test passed\n    });\n    it('utils/currency.js', function () {// test passed\n    });\n    it('utils/flatten-grouped-options.js', function () {// test passed\n    });\n    it('utils/format-markdown.js', function () {// test passed\n    });\n    it('utils/get-scroll-parent.js', function () {// test passed\n    });\n    it('utils/ghost-paths.js', function () {// test passed\n    });\n    it('utils/isNumber.js', function () {// test passed\n    });\n    it('utils/link-component.js', function () {// test passed\n    });\n    it('utils/password-generator.js', function () {// test passed\n    });\n    it('utils/route.js', function () {// test passed\n    });\n    it('utils/window-proxy.js', function () {// test passed\n    });\n    it('validators/base.js', function () {// test passed\n    });\n    it('validators/custom-view.js', function () {// test passed\n    });\n    it('validators/integration.js', function () {// test passed\n    });\n    it('validators/invite-user.js', function () {// test passed\n    });\n    it('validators/label.js', function () {// test passed\n    });\n    it('validators/member.js', function () {// test passed\n    });\n    it('validators/mixins/password.js', function () {// test passed\n    });\n    it('validators/nav-item.js', function () {// test passed\n    });\n    it('validators/new-user.js', function () {// test passed\n    });\n    it('validators/offer.js', function () {// test passed\n    });\n    it('validators/post.js', function () {// test passed\n    });\n    it('validators/product-benefit-item.js', function () {// test passed\n    });\n    it('validators/product.js', function () {// test passed\n    });\n    it('validators/reset.js', function () {// test passed\n    });\n    it('validators/setting.js', function () {// test passed\n    });\n    it('validators/setup.js', function () {// test passed\n    });\n    it('validators/signin.js', function () {// test passed\n    });\n    it('validators/signup.js', function () {// test passed\n    });\n    it('validators/slack-integration.js', function () {// test passed\n    });\n    it('validators/snippet.js', function () {// test passed\n    });\n    it('validators/subscriber.js', function () {// test passed\n    });\n    it('validators/tag-settings.js', function () {// test passed\n    });\n    it('validators/user.js', function () {// test passed\n    });\n    it('validators/webhook.js', function () {// test passed\n    });\n  });\n});","define(\"ghost-admin/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  describe('ESLint | tests', function () {\n    it('acceptance/authentication-test.js', function () {// test passed\n    });\n    it('acceptance/content-test.js', function () {// test passed\n    });\n    it('acceptance/custom-post-templates-test.js', function () {// test passed\n    });\n    it('acceptance/dashboard-test.js', function () {// test passed\n    });\n    it('acceptance/editor-test.js', function () {// test passed\n    });\n    it('acceptance/error-handling-test.js', function () {// test passed\n    });\n    it('acceptance/launch-flow-test.js', function () {// test passed\n    });\n    it('acceptance/members-activity-test.js', function () {// test passed\n    });\n    it('acceptance/members-test.js', function () {// test passed\n    });\n    it('acceptance/offers-test.js', function () {// test passed\n    });\n    it('acceptance/password-reset-test.js', function () {// test passed\n    });\n    it('acceptance/settings/amp-test.js', function () {// test passed\n    });\n    it('acceptance/settings/code-injection-test.js', function () {// test passed\n    });\n    it('acceptance/settings/design-test.js', function () {// test passed\n    });\n    it('acceptance/settings/general-test.js', function () {// test passed\n    });\n    it('acceptance/settings/integrations-test.js', function () {// test passed\n    });\n    it('acceptance/settings/labs-test.js', function () {// test passed\n    });\n    it('acceptance/settings/navigation-test.js', function () {// test passed\n    });\n    it('acceptance/settings/slack-test.js', function () {// test passed\n    });\n    it('acceptance/settings/tags-test.js', function () {// test passed\n    });\n    it('acceptance/settings/unsplash-test.js', function () {// test passed\n    });\n    it('acceptance/settings/zapier-test.js', function () {// test passed\n    });\n    it('acceptance/setup-test.js', function () {// test passed\n    });\n    it('acceptance/signin-test.js', function () {// test passed\n    });\n    it('acceptance/signup-test.js', function () {// test passed\n    });\n    it('acceptance/staff-test.js', function () {// test passed\n    });\n    it('helpers/file-upload.js', function () {// test passed\n    });\n    it('helpers/find.js', function () {// test passed\n    });\n    it('helpers/labs-flag.js', function () {// test passed\n    });\n    it('helpers/resolver.js', function () {// test passed\n    });\n    it('helpers/visit.js', function () {// test passed\n    });\n    it('integration/adapters/tag-test.js', function () {// test passed\n    });\n    it('integration/adapters/user-test.js', function () {// test passed\n    });\n    it('integration/components/dashboard/latest-member-activity-test.js', function () {// test passed\n    });\n    it('integration/components/gh-alert-test.js', function () {// test passed\n    });\n    it('integration/components/gh-alerts-test.js', function () {// test passed\n    });\n    it('integration/components/gh-basic-dropdown-test.js', function () {// test passed\n    });\n    it('integration/components/gh-cm-editor-test.js', function () {// test passed\n    });\n    it('integration/components/gh-distribution-action-select-test.js', function () {// test passed\n    });\n    it('integration/components/gh-feature-flag-test.js', function () {// test passed\n    });\n    it('integration/components/gh-file-uploader-test.js', function () {// test passed\n    });\n    it('integration/components/gh-image-uploader-test.js', function () {// test passed\n    });\n    it('integration/components/gh-image-uploader-with-preview-test.js', function () {// test passed\n    });\n    it('integration/components/gh-member-avatar-test.js', function () {// test passed\n    });\n    it('integration/components/gh-members-import-table-test.js', function () {// test passed\n    });\n    it('integration/components/gh-navitem-test.js', function () {// test passed\n    });\n    it('integration/components/gh-navitem-url-input-test.js', function () {// test passed\n    });\n    it('integration/components/gh-notification-test.js', function () {// test passed\n    });\n    it('integration/components/gh-notifications-test.js', function () {// test passed\n    });\n    it('integration/components/gh-profile-image-test.js', function () {// test passed\n    });\n    it('integration/components/gh-psm-tags-input-test.js', function () {// test passed\n    });\n    it('integration/components/gh-psm-template-select-test.js', function () {// test passed\n    });\n    it('integration/components/gh-psm-visibility-input-test.js', function () {// test passed\n    });\n    it('integration/components/gh-search-input-test.js', function () {// test passed\n    });\n    it('integration/components/gh-tag-settings-form-test.js', function () {// test passed\n    });\n    it('integration/components/gh-task-button-test.js', function () {// test passed\n    });\n    it('integration/components/gh-theme-table-test.js', function () {// test passed\n    });\n    it('integration/components/gh-timezone-select-test.js', function () {// test passed\n    });\n    it('integration/components/gh-trim-focus-input-test.js', function () {// test passed\n    });\n    it('integration/components/gh-unsplash-photo-test.js', function () {// test passed\n    });\n    it('integration/components/gh-unsplash-test.js', function () {// test passed\n    });\n    it('integration/components/gh-uploader-test.js', function () {// test passed\n    });\n    it('integration/components/gh-validation-status-container-test.js', function () {// test passed\n    });\n    it('integration/components/gh-whats-new-test.js', function () {// test passed\n    });\n    it('integration/components/modal-import-members-test.js', function () {// test passed\n    });\n    it('integration/components/modal-transfer-owner-test.js', function () {// test passed\n    });\n    it('integration/helpers/background-image-style-test.js', function () {// test passed\n    });\n    it('integration/helpers/clean-basic-html-test.js', function () {// test passed\n    });\n    it('integration/helpers/gh-format-post-time-test.js', function () {// test passed\n    });\n    it('integration/helpers/gh-url-preview-test.js', function () {// test passed\n    });\n    it('integration/helpers/sanitize-html-test.js', function () {// test passed\n    });\n    it('integration/services/ajax-test.js', function () {// test passed\n    });\n    it('integration/services/config-test.js', function () {// test passed\n    });\n    it('integration/services/feature-test.js', function () {// test passed\n    });\n    it('integration/services/lazy-loader-test.js', function () {// test passed\n    });\n    it('integration/services/member-import-validator-test.js', function () {// test passed\n    });\n    it('integration/services/slug-generator-test.js', function () {// test passed\n    });\n    it('integration/services/store-test.js', function () {// test passed\n    });\n    it('test-helper.js', function () {// test passed\n    });\n    it('unit/authenticators/cookie-test.js', function () {// test passed\n    });\n    it('unit/components/gh-post-settings-menu-test.js', function () {// test passed\n    });\n    it('unit/controllers/editor-test.js', function () {// test passed\n    });\n    it('unit/controllers/settings/design-test.js', function () {// test passed\n    });\n    it('unit/helpers/gh-count-characters-test.js', function () {// test passed\n    });\n    it('unit/helpers/gh-count-down-characters-test.js', function () {// test passed\n    });\n    it('unit/helpers/gh-user-can-admin-test.js', function () {// test passed\n    });\n    it('unit/helpers/highlighted-text-test.js', function () {// test passed\n    });\n    it('unit/mixins/validation-engine-test.js', function () {// test passed\n    });\n    it('unit/models/invite-test.js', function () {// test passed\n    });\n    it('unit/models/member-test.js', function () {// test passed\n    });\n    it('unit/models/navigation-item-test.js', function () {// test passed\n    });\n    it('unit/models/post-test.js', function () {// test passed\n    });\n    it('unit/models/role-test.js', function () {// test passed\n    });\n    it('unit/models/setting-test.js', function () {// test passed\n    });\n    it('unit/models/tag-test.js', function () {// test passed\n    });\n    it('unit/models/user-test.js', function () {// test passed\n    });\n    it('unit/serializers/notification-test.js', function () {// test passed\n    });\n    it('unit/services/event-bus-test.js', function () {// test passed\n    });\n    it('unit/services/limit-test.js', function () {// test passed\n    });\n    it('unit/services/member-stats-test.js', function () {// test passed\n    });\n    it('unit/services/notifications-test.js', function () {// test passed\n    });\n    it('unit/services/unsplash-test.js', function () {// test passed\n    });\n    it('unit/transforms/facebook-url-user-test.js', function () {// test passed\n    });\n    it('unit/transforms/json-string-test.js', function () {// test passed\n    });\n    it('unit/transforms/navigation-settings-test.js', function () {// test passed\n    });\n    it('unit/transforms/slack-settings-test.js', function () {// test passed\n    });\n    it('unit/transforms/twitter-url-user-test.js', function () {// test passed\n    });\n    it('unit/utils/ghost-paths-test.js', function () {// test passed\n    });\n    it('unit/validators/nav-item-test.js', function () {// test passed\n    });\n    it('unit/validators/post-test.js', function () {// test passed\n    });\n    it('unit/validators/slack-integration-test.js', function () {// test passed\n    });\n    it('unit/validators/tag-settings-test.js', function () {// test passed\n    });\n  });\n});","define(\"ghost-admin/tests/test-helper\", [\"ghost-admin/app\", \"ghost-admin/config/environment\", \"ember-raf-scheduler/test-support/register-waiter\", \"ember-exam/test-support/start\", \"@ember/test-helpers\", \"chai\", \"chai-dom\"], function (_app, _environment, _registerWaiter, _start, _testHelpers, _chai, _chaiDom) {\n  \"use strict\";\n\n  _chai.default.use(_chaiDom.default);\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _registerWaiter.default)();\n  mocha.setup({\n    timeout: 15000,\n    slow: 500\n  });\n  (0, _start.default)();\n});","define(\"ghost-admin/tests/unit/authenticators/cookie-test\", [\"ghost-admin/utils/ghost-paths\", \"sinon\", \"mocha\", \"chai\", \"ember-mocha\"], function (_ghostPaths, _sinon, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  const mockAjax = Ember.Service.extend({\n    skipSessionDeletion: false,\n\n    init() {\n      this._super(...arguments);\n\n      this.post = _sinon.default.stub().resolves();\n      this.del = _sinon.default.stub().resolves();\n    }\n\n  });\n  const mockConfig = Ember.Service.extend({\n    init() {\n      this._super(...arguments);\n\n      this.fetchAuthenticated = _sinon.default.stub().resolves();\n    }\n\n  });\n  const mockFeature = Ember.Service.extend({\n    init() {\n      this._super(...arguments);\n\n      this.fetch = _sinon.default.stub().resolves();\n    }\n\n  });\n  const mockSettings = Ember.Service.extend({\n    init() {\n      this._super(...arguments);\n\n      this.fetch = _sinon.default.stub().resolves();\n    }\n\n  });\n  const mockGhostPaths = Ember.Service.extend({\n    apiRoot: (0, _ghostPaths.default)().apiRoot\n  });\n  (0, _mocha.describe)('Unit: Authenticator: cookie', () => {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.beforeEach)(function () {\n      this.owner.register('service:ajax', mockAjax);\n      this.owner.register('service:config', mockConfig);\n      this.owner.register('service:feature', mockFeature);\n      this.owner.register('service:settings', mockSettings);\n      this.owner.register('service:ghost-paths', mockGhostPaths);\n    });\n    (0, _mocha.describe)('#restore', function () {\n      (0, _mocha.it)('returns a resolving promise', function () {\n        return this.owner.lookup('authenticator:cookie').restore();\n      });\n    });\n    (0, _mocha.describe)('#authenticate', function () {\n      (0, _mocha.it)('posts the username and password to the sessionEndpoint and returns the promise', function () {\n        let authenticator = this.owner.lookup('authenticator:cookie');\n        let post = authenticator.ajax.post;\n        return authenticator.authenticate('AzureDiamond', 'hunter2').then(() => {\n          (0, _chai.expect)(post.args[0][0]).to.equal(`${(0, _ghostPaths.default)().apiRoot}/session`);\n          (0, _chai.expect)(post.args[0][1]).to.deep.include({\n            data: {\n              username: 'AzureDiamond',\n              password: 'hunter2'\n            }\n          });\n          (0, _chai.expect)(post.args[0][1]).to.deep.include({\n            dataType: 'text'\n          });\n          (0, _chai.expect)(post.args[0][1]).to.deep.include({\n            contentType: 'application/json;charset=utf-8'\n          });\n        });\n      });\n    });\n    (0, _mocha.describe)('#invalidate', function () {\n      (0, _mocha.it)('makes a delete request to the sessionEndpoint', function () {\n        let authenticator = this.owner.lookup('authenticator:cookie');\n        let del = authenticator.ajax.del;\n        return authenticator.invalidate().then(() => {\n          (0, _chai.expect)(del.args[0][0]).to.equal(`${(0, _ghostPaths.default)().apiRoot}/session`);\n        });\n      });\n    });\n  });\n});","// /* eslint-disable camelcase */\n// import EmberObject from '@ember/object';\n// import RSVP from 'rsvp';\n// import boundOneWay from 'ghost-admin/utils/bound-one-way';\n// import {describe, it} from 'mocha';\n// import {expect} from 'chai';\n// import {run} from '@ember/runloop';\n// import {setupComponentTest} from 'ember-mocha';\n// function K() {\n//     return this;\n// }\n// TODO: convert to integration tests\n// (commented out because top-level describe.skip was tripping up ember-mocha)\n// describe('Unit: Component: post-settings-menu', function () {\n//     setupComponentTest('gh-post-settings-menu', {\n//         needs: ['service:notifications', 'service:slug-generator', 'service:settings']\n//     });\n//     it('slugValue is one-way bound to post.slug', function () {\n//         let component = this.subject({\n//             post: EmberObject.create({\n//                 slug: 'a-slug'\n//             })\n//         });\n//         expect(component.get('post.slug')).to.equal('a-slug');\n//         expect(component.get('slugValue')).to.equal('a-slug');\n//         run(function () {\n//             component.set('post.slug', 'changed-slug');\n//             expect(component.get('slugValue')).to.equal('changed-slug');\n//         });\n//         run(function () {\n//             component.set('slugValue', 'changed-directly');\n//             expect(component.get('post.slug')).to.equal('changed-slug');\n//             expect(component.get('slugValue')).to.equal('changed-directly');\n//         });\n//         run(function () {\n//             // test that the one-way binding is still in place\n//             component.set('post.slug', 'should-update');\n//             expect(component.get('slugValue')).to.equal('should-update');\n//         });\n//     });\n//     it('metaTitleScratch is one-way bound to post.metaTitle', function () {\n//         let component = this.subject({\n//             post: EmberObject.extend({\n//                 metaTitle: 'a title',\n//                 metaTitleScratch: boundOneWay('metaTitle')\n//             }).create()\n//         });\n//         expect(component.get('post.metaTitle')).to.equal('a title');\n//         expect(component.get('metaTitleScratch')).to.equal('a title');\n//         run(function () {\n//             component.set('post.metaTitle', 'a different title');\n//             expect(component.get('metaTitleScratch')).to.equal('a different title');\n//         });\n//         run(function () {\n//             component.set('metaTitleScratch', 'changed directly');\n//             expect(component.get('post.metaTitle')).to.equal('a different title');\n//             expect(component.get('post.metaTitleScratch')).to.equal('changed directly');\n//         });\n//         run(function () {\n//             // test that the one-way binding is still in place\n//             component.set('post.metaTitle', 'should update');\n//             expect(component.get('metaTitleScratch')).to.equal('should update');\n//         });\n//     });\n//     it('metaDescriptionScratch is one-way bound to post.metaDescription', function () {\n//         let component = this.subject({\n//             post: EmberObject.extend({\n//                 metaDescription: 'a description',\n//                 metaDescriptionScratch: boundOneWay('metaDescription')\n//             }).create()\n//         });\n//         expect(component.get('post.metaDescription')).to.equal('a description');\n//         expect(component.get('metaDescriptionScratch')).to.equal('a description');\n//         run(function () {\n//             component.set('post.metaDescription', 'a different description');\n//             expect(component.get('metaDescriptionScratch')).to.equal('a different description');\n//         });\n//         run(function () {\n//             component.set('metaDescriptionScratch', 'changed directly');\n//             expect(component.get('post.metaDescription')).to.equal('a different description');\n//             expect(component.get('metaDescriptionScratch')).to.equal('changed directly');\n//         });\n//         run(function () {\n//             // test that the one-way binding is still in place\n//             component.set('post.metaDescription', 'should update');\n//             expect(component.get('metaDescriptionScratch')).to.equal('should update');\n//         });\n//     });\n//     describe('seoTitle', function () {\n//         it('should be the metaTitle if one exists', function () {\n//             let component = this.subject({\n//                 post: EmberObject.extend({\n//                     titleScratch: 'should not be used',\n//                     metaTitle: 'a meta-title',\n//                     metaTitleScratch: boundOneWay('metaTitle')\n//                 }).create()\n//             });\n//             expect(component.get('seoTitle')).to.equal('a meta-title');\n//         });\n//         it('should default to the title if an explicit meta-title does not exist', function () {\n//             let component = this.subject({\n//                 post: EmberObject.create({\n//                     titleScratch: 'should be the meta-title'\n//                 })\n//             });\n//             expect(component.get('seoTitle')).to.equal('should be the meta-title');\n//         });\n//         it('should be the metaTitle if both title and metaTitle exist', function () {\n//             let component = this.subject({\n//                 post: EmberObject.extend({\n//                     titleScratch: 'a title',\n//                     metaTitle: 'a meta-title',\n//                     metaTitleScratch: boundOneWay('metaTitle')\n//                 }).create()\n//             });\n//             expect(component.get('seoTitle')).to.equal('a meta-title');\n//         });\n//         it('should revert to the title if explicit metaTitle is removed', function () {\n//             let component = this.subject({\n//                 post: EmberObject.extend({\n//                     titleScratch: 'a title',\n//                     metaTitle: 'a meta-title',\n//                     metaTitleScratch: boundOneWay('metaTitle')\n//                 }).create()\n//             });\n//             expect(component.get('seoTitle')).to.equal('a meta-title');\n//             run(function () {\n//                 component.set('post.metaTitle', '');\n//                 expect(component.get('seoTitle')).to.equal('a title');\n//             });\n//         });\n//         it('should truncate to 70 characters with an appended ellipsis', function () {\n//             let longTitle = new Array(100).join('a');\n//             let component = this.subject({\n//                 post: EmberObject.create()\n//             });\n//             expect(longTitle.length).to.equal(99);\n//             run(function () {\n//                 let expected = `${longTitle.substr(0, 70)}&hellip;`;\n//                 component.set('metaTitleScratch', longTitle);\n//                 expect(component.get('seoTitle').toString().length).to.equal(78);\n//                 expect(component.get('seoTitle').toString()).to.equal(expected);\n//             });\n//         });\n//     });\n//     describe('seoDescription', function () {\n//         it('should be the metaDescription if one exists', function () {\n//             let component = this.subject({\n//                 post: EmberObject.extend({\n//                     metaDescription: 'a description',\n//                     metaDescriptionScratch: boundOneWay('metaDescription')\n//                 }).create()\n//             });\n//             expect(component.get('seoDescription')).to.equal('a description');\n//         });\n//         it('should be generated from the rendered mobiledoc if not explicitly set', function () {\n//             let component = this.subject({\n//                 post: EmberObject.extend({\n//                     metaDescription: null,\n//                     metaDescriptionScratch: boundOneWay('metaDescription'),\n//                     author: RSVP.resolve(),\n//                     init() {\n//                         this._super(...arguments);\n//                         this.scratch = {\n//                             cards: [\n//                                 ['markdown-card', {\n//                                     markdown: '# This is a <strong>test</strong> <script>foo</script>'\n//                                 }]\n//                             ]\n//                         };\n//                     }\n//                 }).create()\n//             });\n//             expect(component.get('seoDescription')).to.equal('This is a test');\n//         });\n//         it('should truncate to 156 characters with an appended ellipsis', function () {\n//             let longDescription = new Array(200).join('a');\n//             let component = this.subject({\n//                 post: EmberObject.create()\n//             });\n//             expect(longDescription.length).to.equal(199);\n//             run(function () {\n//                 let expected = `${longDescription.substr(0, 156)}&hellip;`;\n//                 component.set('metaDescriptionScratch', longDescription);\n//                 expect(component.get('seoDescription').toString().length).to.equal(164);\n//                 expect(component.get('seoDescription').toString()).to.equal(expected);\n//             });\n//         });\n//     });\n//     describe('seoURL', function () {\n//         it('should be the URL of the blog if no post slug exists', function () {\n//             let component = this.subject({\n//                 config: EmberObject.create({blogUrl: 'http://my-ghost-blog.com'}),\n//                 post: EmberObject.create()\n//             });\n//             expect(component.get('seoURL')).to.equal('http://my-ghost-blog.com/');\n//         });\n//         it('should be the URL of the blog plus the post slug', function () {\n//             let component = this.subject({\n//                 config: EmberObject.create({blogUrl: 'http://my-ghost-blog.com'}),\n//                 post: EmberObject.create({slug: 'post-slug'})\n//             });\n//             expect(component.get('seoURL')).to.equal('http://my-ghost-blog.com/post-slug/');\n//         });\n//         it('should update when the post slug changes', function () {\n//             let component = this.subject({\n//                 config: EmberObject.create({blogUrl: 'http://my-ghost-blog.com'}),\n//                 post: EmberObject.create({slug: 'post-slug'})\n//             });\n//             expect(component.get('seoURL')).to.equal('http://my-ghost-blog.com/post-slug/');\n//             run(function () {\n//                 component.set('post.slug', 'changed-slug');\n//                 expect(component.get('seoURL')).to.equal('http://my-ghost-blog.com/changed-slug/');\n//             });\n//         });\n//         it('should truncate a long URL to 70 characters with an appended ellipsis', function () {\n//             let blogURL = 'http://my-ghost-blog.com';\n//             let longSlug = new Array(75).join('a');\n//             let component = this.subject({\n//                 config: EmberObject.create({blogUrl: blogURL}),\n//                 post: EmberObject.create({slug: longSlug})\n//             });\n//             let expected;\n//             expect(longSlug.length).to.equal(74);\n//             expected = `${blogURL}/${longSlug}/`;\n//             expected = `${expected.substr(0, 70)}&hellip;`;\n//             expect(component.get('seoURL').toString().length).to.equal(78);\n//             expect(component.get('seoURL').toString()).to.equal(expected);\n//         });\n//     });\n//     describe('toggleFeatured', function () {\n//         it('should toggle the featured property', function () {\n//             let component = this.subject({\n//                 post: EmberObject.create({\n//                     featured: false,\n//                     isNew: true\n//                 })\n//             });\n//             run(function () {\n//                 component.send('toggleFeatured');\n//                 expect(component.get('post.featured')).to.be.ok;\n//             });\n//         });\n//         it('should not save the post if it is still new', function () {\n//             let component = this.subject({\n//                 post: EmberObject.create({\n//                     featured: false,\n//                     isNew: true,\n//                     save() {\n//                         this.incrementProperty('saved');\n//                         return RSVP.resolve();\n//                     }\n//                 })\n//             });\n//             run(function () {\n//                 component.send('toggleFeatured');\n//                 expect(component.get('post.featured')).to.be.ok;\n//                 expect(component.get('post.saved')).to.not.be.ok;\n//             });\n//         });\n//         it('should save the post if it is not new', function () {\n//             let component = this.subject({\n//                 post: EmberObject.create({\n//                     featured: false,\n//                     isNew: false,\n//                     save() {\n//                         this.incrementProperty('saved');\n//                         return RSVP.resolve();\n//                     }\n//                 })\n//             });\n//             run(function () {\n//                 component.send('toggleFeatured');\n//                 expect(component.get('post.featured')).to.be.ok;\n//                 expect(component.get('post.saved')).to.equal(1);\n//             });\n//         });\n//     });\n//     describe('updateSlug', function () {\n//         it('should reset slugValue to the previous slug when the new slug is blank or unchanged', function () {\n//             let component = this.subject({\n//                 post: EmberObject.create({\n//                     slug: 'slug'\n//                 })\n//             });\n//             run(function () {\n//                 // unchanged\n//                 component.set('slugValue', 'slug');\n//                 component.send('updateSlug', component.get('slugValue'));\n//                 expect(component.get('post.slug')).to.equal('slug');\n//                 expect(component.get('slugValue')).to.equal('slug');\n//             });\n//             run(function () {\n//                 // unchanged after trim\n//                 component.set('slugValue', 'slug  ');\n//                 component.send('updateSlug', component.get('slugValue'));\n//                 expect(component.get('post.slug')).to.equal('slug');\n//                 expect(component.get('slugValue')).to.equal('slug');\n//             });\n//             run(function () {\n//                 // blank\n//                 component.set('slugValue', '');\n//                 component.send('updateSlug', component.get('slugValue'));\n//                 expect(component.get('post.slug')).to.equal('slug');\n//                 expect(component.get('slugValue')).to.equal('slug');\n//             });\n//         });\n//         it('should not set a new slug if the server-generated slug matches existing slug', function (done) {\n//             let component = this.subject({\n//                 slugGenerator: EmberObject.create({\n//                     generateSlug(slugType, str) {\n//                         let promise = RSVP.resolve(str.split('#')[0]);\n//                         this.set('lastPromise', promise);\n//                         return promise;\n//                     }\n//                 }),\n//                 post: EmberObject.create({\n//                     slug: 'whatever'\n//                 })\n//             });\n//             run(function () {\n//                 component.set('slugValue', 'whatever#slug');\n//                 component.send('updateSlug', component.get('slugValue'));\n//                 RSVP.resolve(component.get('lastPromise')).then(function () {\n//                     expect(component.get('post.slug')).to.equal('whatever');\n//                     done();\n//                 }).catch(done);\n//             });\n//         });\n//         it('should not set a new slug if the only change is to the appended increment value', function (done) {\n//             let component = this.subject({\n//                 slugGenerator: EmberObject.create({\n//                     generateSlug(slugType, str) {\n//                         let sanitizedStr = str.replace(/[^a-zA-Z]/g, '');\n//                         let promise = RSVP.resolve(`${sanitizedStr}-2`);\n//                         this.set('lastPromise', promise);\n//                         return promise;\n//                     }\n//                 }),\n//                 post: EmberObject.create({\n//                     slug: 'whatever'\n//                 })\n//             });\n//             run(function () {\n//                 component.set('slugValue', 'whatever!');\n//                 component.send('updateSlug', component.get('slugValue'));\n//                 RSVP.resolve(component.get('lastPromise')).then(function () {\n//                     expect(component.get('post.slug')).to.equal('whatever');\n//                     done();\n//                 }).catch(done);\n//             });\n//         });\n//         it('should set the slug if the new slug is different', function (done) {\n//             let component = this.subject({\n//                 slugGenerator: EmberObject.create({\n//                     generateSlug(slugType, str) {\n//                         let promise = RSVP.resolve(str);\n//                         this.set('lastPromise', promise);\n//                         return promise;\n//                     }\n//                 }),\n//                 post: EmberObject.create({\n//                     slug: 'whatever',\n//                     save: K\n//                 })\n//             });\n//             run(function () {\n//                 component.set('slugValue', 'changed');\n//                 component.send('updateSlug', component.get('slugValue'));\n//                 RSVP.resolve(component.get('lastPromise')).then(function () {\n//                     expect(component.get('post.slug')).to.equal('changed');\n//                     done();\n//                 }).catch(done);\n//             });\n//         });\n//         it('should save the post when the slug changes and the post is not new', function (done) {\n//             let component = this.subject({\n//                 slugGenerator: EmberObject.create({\n//                     generateSlug(slugType, str) {\n//                         let promise = RSVP.resolve(str);\n//                         this.set('lastPromise', promise);\n//                         return promise;\n//                     }\n//                 }),\n//                 post: EmberObject.create({\n//                     slug: 'whatever',\n//                     saved: 0,\n//                     isNew: false,\n//                     save() {\n//                         this.incrementProperty('saved');\n//                     }\n//                 })\n//             });\n//             run(function () {\n//                 component.set('slugValue', 'changed');\n//                 component.send('updateSlug', component.get('slugValue'));\n//                 RSVP.resolve(component.get('lastPromise')).then(function () {\n//                     expect(component.get('post.slug')).to.equal('changed');\n//                     expect(component.get('post.saved')).to.equal(1);\n//                     done();\n//                 }).catch(done);\n//             });\n//         });\n//         it('should not save the post when the slug changes and the post is new', function (done) {\n//             let component = this.subject({\n//                 slugGenerator: EmberObject.create({\n//                     generateSlug(slugType, str) {\n//                         let promise = RSVP.resolve(str);\n//                         this.set('lastPromise', promise);\n//                         return promise;\n//                     }\n//                 }),\n//                 post: EmberObject.create({\n//                     slug: 'whatever',\n//                     saved: 0,\n//                     isNew: true,\n//                     save() {\n//                         this.incrementProperty('saved');\n//                     }\n//                 })\n//             });\n//             run(function () {\n//                 component.set('slugValue', 'changed');\n//                 component.send('updateSlug', component.get('slugValue'));\n//                 RSVP.resolve(component.get('lastPromise')).then(function () {\n//                     expect(component.get('post.slug')).to.equal('changed');\n//                     expect(component.get('post.saved')).to.equal(0);\n//                     done();\n//                 }).catch(done);\n//             });\n//         });\n//     });\n// });\ndefine(\"ghost-admin/tests/unit/components/gh-post-settings-menu-test\", [], function () {\n  \"use strict\";\n});","define(\"ghost-admin/tests/unit/controllers/editor-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\", \"ember-concurrency\"], function (_mocha, _chai, _testHelpers, _emberMocha, _emberConcurrency) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Controller: editor', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.describe)('generateSlug', function () {\n      (0, _mocha.it)('should generate a slug and set it on the post', async function () {\n        let controller = this.owner.lookup('controller:editor');\n        controller.set('slugGenerator', Ember.Object.create({\n          generateSlug(slugType, str) {\n            return Ember.RSVP.resolve(`${str}-slug`);\n          }\n\n        }));\n        controller.set('post', Ember.Object.create({\n          slug: ''\n        }));\n        controller.set('post.titleScratch', 'title');\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(controller.get('post.slug')).to.equal('');\n        await controller.generateSlugTask.perform();\n        (0, _chai.expect)(controller.get('post.slug')).to.equal('title-slug');\n      });\n      (0, _mocha.it)('should not set the destination if the title is \"(Untitled)\" and the post already has a slug', async function () {\n        let controller = this.owner.lookup('controller:editor');\n        controller.set('slugGenerator', Ember.Object.create({\n          generateSlug(slugType, str) {\n            return Ember.RSVP.resolve(`${str}-slug`);\n          }\n\n        }));\n        controller.set('post', Ember.Object.create({\n          slug: 'whatever'\n        }));\n        (0, _chai.expect)(controller.get('post.slug')).to.equal('whatever');\n        controller.set('post.titleScratch', '(Untitled)');\n        await controller.generateSlugTask.perform();\n        (0, _chai.expect)(controller.get('post.slug')).to.equal('whatever');\n      });\n    });\n    (0, _mocha.describe)('saveTitleTask', function () {\n      beforeEach(function () {\n        this.controller = this.owner.lookup('controller:editor');\n        this.controller.set('target', {\n          send() {}\n\n        });\n      });\n      (0, _mocha.it)('should invoke generateSlug if the post is new and a title has not been set', async function () {\n        let {\n          controller\n        } = this;\n        controller.set('target', {\n          send() {}\n\n        });\n        Ember.defineProperty(controller, 'generateSlugTask', (0, _emberConcurrency.task)(function* () {\n          this.set('post.slug', 'test-slug');\n          yield Ember.RSVP.resolve();\n        }));\n        controller.set('post', Ember.Object.create({\n          isNew: true\n        }));\n        (0, _chai.expect)(controller.get('post.isNew')).to.be.true;\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.not.be.ok;\n        controller.set('post.titleScratch', 'test');\n        await controller.saveTitleTask.perform();\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.equal('test');\n        (0, _chai.expect)(controller.get('post.slug')).to.equal('test-slug');\n      });\n      (0, _mocha.it)('should invoke generateSlug if the post is not new and it\\'s title is \"(Untitled)\"', async function () {\n        let {\n          controller\n        } = this;\n        controller.set('target', {\n          send() {}\n\n        });\n        Ember.defineProperty(controller, 'generateSlugTask', (0, _emberConcurrency.task)(function* () {\n          this.set('post.slug', 'test-slug');\n          yield Ember.RSVP.resolve();\n        }));\n        controller.set('post', Ember.Object.create({\n          isNew: false,\n          title: '(Untitled)'\n        }));\n        (0, _chai.expect)(controller.get('post.isNew')).to.be.false;\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.not.be.ok;\n        controller.set('post.titleScratch', 'New Title');\n        await controller.saveTitleTask.perform();\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.equal('New Title');\n        (0, _chai.expect)(controller.get('post.slug')).to.equal('test-slug');\n      });\n      (0, _mocha.it)('should not invoke generateSlug if the post is new but has a title', async function () {\n        let {\n          controller\n        } = this;\n        controller.set('target', {\n          send() {}\n\n        });\n        Ember.defineProperty(controller, 'generateSlugTask', (0, _emberConcurrency.task)(function* () {\n          (0, _chai.expect)(false, 'generateSlug should not be called').to.equal(true);\n          yield Ember.RSVP.resolve();\n        }));\n        controller.set('post', Ember.Object.create({\n          isNew: true,\n          title: 'a title'\n        }));\n        (0, _chai.expect)(controller.get('post.isNew')).to.be.true;\n        (0, _chai.expect)(controller.get('post.title')).to.equal('a title');\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.not.be.ok;\n        controller.set('post.titleScratch', 'test');\n        await controller.saveTitleTask.perform();\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.equal('test');\n        (0, _chai.expect)(controller.get('post.slug')).to.not.be.ok;\n      });\n      (0, _mocha.it)('should not invoke generateSlug if the post is not new and the title is not \"(Untitled)\"', async function () {\n        let {\n          controller\n        } = this;\n        controller.set('target', {\n          send() {}\n\n        });\n        Ember.defineProperty(controller, 'generateSlugTask', (0, _emberConcurrency.task)(function* () {\n          (0, _chai.expect)(false, 'generateSlug should not be called').to.equal(true);\n          yield Ember.RSVP.resolve();\n        }));\n        controller.set('post', Ember.Object.create({\n          isNew: false\n        }));\n        (0, _chai.expect)(controller.get('post.isNew')).to.be.false;\n        (0, _chai.expect)(controller.get('post.title')).to.not.be.ok;\n        controller.set('post.titleScratch', 'title');\n        await controller.saveTitleTask.perform();\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.equal('title');\n        (0, _chai.expect)(controller.get('post.slug')).to.not.be.ok;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/controllers/settings/design-test\", [\"ghost-admin/models/navigation-item\", \"chai\", \"mocha\", \"ember-mocha\"], function (_navigationItem, _chai, _mocha, _emberMocha) {\n  \"use strict\";\n\n  // const navSettingJSON = `[\n  //     {\"label\":\"Home\",\"url\":\"/\"},\n  //     {\"label\":\"JS Test\",\"url\":\"javascript:alert('hello');\"},\n  //     {\"label\":\"About\",\"url\":\"/about\"},\n  //     {\"label\":\"Sub Folder\",\"url\":\"/blah/blah\"},\n  //     {\"label\":\"Telephone\",\"url\":\"tel:01234-567890\"},\n  //     {\"label\":\"Mailto\",\"url\":\"mailto:test@example.com\"},\n  //     {\"label\":\"External\",\"url\":\"https://example.com/testing?query=test#anchor\"},\n  //     {\"label\":\"No Protocol\",\"url\":\"//example.com\"}\n  // ]`;\n  _mocha.describe.skip('Unit: Controller: settings/design', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.it)('blogUrl: captures config and ensures trailing slash', function () {\n      let ctrl = this.owner.lookup('controller:settings/design');\n      ctrl.set('config.blogUrl', 'http://localhost:2368/blog');\n      (0, _chai.expect)(ctrl.get('blogUrl')).to.equal('http://localhost:2368/blog/');\n    });\n    (0, _mocha.it)('init: creates a new navigation item', function () {\n      let ctrl = this.owner.lookup('controller:settings/design');\n      Ember.run(() => {\n        (0, _chai.expect)(ctrl.get('newNavItem')).to.exist;\n        (0, _chai.expect)(ctrl.get('newNavItem.isNew')).to.be.true;\n      });\n    });\n    (0, _mocha.it)('blogUrl: captures config and ensures trailing slash', function () {\n      let ctrl = this.owner.lookup('controller:settings/design');\n      ctrl.set('config.blogUrl', 'http://localhost:2368/blog');\n      (0, _chai.expect)(ctrl.get('blogUrl')).to.equal('http://localhost:2368/blog/');\n    });\n    (0, _mocha.it)('save: validates nav items', function (done) {\n      let ctrl = this.owner.lookup('controller:settings/design');\n      Ember.run(() => {\n        ctrl.set('settings', Ember.Object.create({\n          navigation: [_navigationItem.default.create({\n            label: 'First',\n            url: '/'\n          }), _navigationItem.default.create({\n            label: '',\n            url: '/second'\n          }), _navigationItem.default.create({\n            label: 'Third',\n            url: ''\n          })]\n        })); // blank item won't get added because the last item is incomplete\n\n        (0, _chai.expect)(ctrl.get('settings.navigation.length')).to.equal(3);\n        ctrl.get('save').perform().then(function passedValidation() {\n          (0, _chai.assert)(false, 'navigationItems weren\\'t validated on save');\n          done();\n        }).catch(function failedValidation() {\n          let navItems = ctrl.get('settings.navigation');\n          (0, _chai.expect)(navItems[0].get('errors').toArray()).to.be.empty;\n          (0, _chai.expect)(navItems[1].get('errors.firstObject.attribute')).to.equal('label');\n          (0, _chai.expect)(navItems[2].get('errors.firstObject.attribute')).to.equal('url');\n          done();\n        });\n      });\n    });\n    (0, _mocha.it)('save: ignores blank last item when saving', function (done) {\n      let ctrl = this.owner.lookup('controller:settings/design');\n      Ember.run(() => {\n        ctrl.set('settings', Ember.Object.create({\n          navigation: [_navigationItem.default.create({\n            label: 'First',\n            url: '/'\n          }), _navigationItem.default.create({\n            label: '',\n            url: ''\n          })]\n        }));\n        (0, _chai.expect)(ctrl.get('settings.navigation.length')).to.equal(2);\n        ctrl.get('save').perform().then(function passedValidation() {\n          (0, _chai.assert)(false, 'navigationItems weren\\'t validated on save');\n          done();\n        }).catch(function failedValidation() {\n          let navItems = ctrl.get('settings.navigation');\n          (0, _chai.expect)(navItems[0].get('errors').toArray()).to.be.empty;\n          done();\n        });\n      });\n    });\n    (0, _mocha.it)('action - addNavItem: adds item to navigationItems', function () {\n      let ctrl = this.owner.lookup('controller:settings/design');\n      Ember.run(() => {\n        ctrl.set('settings', Ember.Object.create({\n          navigation: [_navigationItem.default.create({\n            label: 'First',\n            url: '/first',\n            last: true\n          })]\n        }));\n      });\n      (0, _chai.expect)(ctrl.get('settings.navigation.length')).to.equal(1);\n      ctrl.set('newNavItem.label', 'New');\n      ctrl.set('newNavItem.url', '/new');\n      Ember.run(() => {\n        ctrl.send('addNavItem', ctrl.get('newNavItem'));\n      });\n      (0, _chai.expect)(ctrl.get('settings.navigation.length')).to.equal(2);\n      (0, _chai.expect)(ctrl.get('settings.navigation.lastObject.label')).to.equal('New');\n      (0, _chai.expect)(ctrl.get('settings.navigation.lastObject.url')).to.equal('/new');\n      (0, _chai.expect)(ctrl.get('settings.navigation.lastObject.isNew')).to.be.false;\n      (0, _chai.expect)(ctrl.get('newNavItem.label')).to.be.empty;\n      (0, _chai.expect)(ctrl.get('newNavItem.url')).to.be.empty;\n      (0, _chai.expect)(ctrl.get('newNavItem.isNew')).to.be.true;\n    });\n    (0, _mocha.it)('action - addNavItem: doesn\\'t insert new item if last object is incomplete', function () {\n      let ctrl = this.owner.lookup('controller:settings/design');\n      Ember.run(() => {\n        ctrl.set('settings', Ember.Object.create({\n          navigation: [_navigationItem.default.create({\n            label: '',\n            url: '',\n            last: true\n          })]\n        }));\n        (0, _chai.expect)(ctrl.get('settings.navigation.length')).to.equal(1);\n        ctrl.send('addNavItem', ctrl.get('settings.navigation.lastObject'));\n        (0, _chai.expect)(ctrl.get('settings.navigation.length')).to.equal(1);\n      });\n    });\n    (0, _mocha.it)('action - deleteNavItem: removes item from navigationItems', function () {\n      let ctrl = this.owner.lookup('controller:settings/design');\n      let navItems = [_navigationItem.default.create({\n        label: 'First',\n        url: '/first'\n      }), _navigationItem.default.create({\n        label: 'Second',\n        url: '/second',\n        last: true\n      })];\n      Ember.run(() => {\n        ctrl.set('settings', Ember.Object.create({\n          navigation: navItems\n        }));\n        (0, _chai.expect)(ctrl.get('settings.navigation').mapBy('label')).to.deep.equal(['First', 'Second']);\n        ctrl.send('deleteNavItem', ctrl.get('settings.navigation.firstObject'));\n        (0, _chai.expect)(ctrl.get('settings.navigation').mapBy('label')).to.deep.equal(['Second']);\n      });\n    });\n    (0, _mocha.it)('action - updateUrl: updates URL on navigationItem', function () {\n      let ctrl = this.owner.lookup('controller:settings/design');\n      let navItems = [_navigationItem.default.create({\n        label: 'First',\n        url: '/first'\n      }), _navigationItem.default.create({\n        label: 'Second',\n        url: '/second',\n        last: true\n      })];\n      Ember.run(() => {\n        ctrl.set('settings', Ember.Object.create({\n          navigation: navItems\n        }));\n        (0, _chai.expect)(ctrl.get('settings.navigation').mapBy('url')).to.deep.equal(['/first', '/second']);\n        ctrl.send('updateUrl', '/new', ctrl.get('settings.navigation.firstObject'));\n        (0, _chai.expect)(ctrl.get('settings.navigation').mapBy('url')).to.deep.equal(['/new', '/second']);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/helpers/gh-count-characters-test\", [\"ghost-admin/helpers/gh-count-characters\", \"mocha\", \"chai\"], function (_ghCountCharacters, _mocha, _chai) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Helper: gh-count-characters', function () {\n    let defaultStyle = 'color: rgb(69, 195, 46);';\n    let errorStyle = 'color: rgb(240, 82, 48);';\n    (0, _mocha.it)('counts remaining chars', function () {\n      let result = (0, _ghCountCharacters.countCharacters)(['test']);\n      (0, _chai.expect)(result.string).to.equal(`<span class=\"word-count\" style=\"${defaultStyle}\">196</span>`);\n    });\n    (0, _mocha.it)('warns when nearing limit', function () {\n      let result = (0, _ghCountCharacters.countCharacters)([Array(195 + 1).join('x')]);\n      (0, _chai.expect)(result.string).to.equal(`<span class=\"word-count\" style=\"${errorStyle}\">5</span>`);\n    });\n    (0, _mocha.it)('indicates too many chars', function () {\n      let result = (0, _ghCountCharacters.countCharacters)([Array(205 + 1).join('x')]);\n      (0, _chai.expect)(result.string).to.equal(`<span class=\"word-count\" style=\"${errorStyle}\">-5</span>`);\n    });\n    (0, _mocha.it)('counts multibyte correctly', function () {\n      let result = (0, _ghCountCharacters.countCharacters)(['💩']);\n      (0, _chai.expect)(result.string).to.equal(`<span class=\"word-count\" style=\"${defaultStyle}\">199</span>`); // emoji + modifier is still two chars\n\n      result = (0, _ghCountCharacters.countCharacters)(['💃🏻']);\n      (0, _chai.expect)(result.string).to.equal(`<span class=\"word-count\" style=\"${defaultStyle}\">198</span>`);\n    });\n  });\n});","define(\"ghost-admin/tests/unit/helpers/gh-count-down-characters-test\", [\"ghost-admin/helpers/gh-count-down-characters\", \"mocha\", \"chai\"], function (_ghCountDownCharacters, _mocha, _chai) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Helper: gh-count-down-characters', function () {\n    let validStyle = 'color: rgb(48, 207, 67);';\n    let errorStyle = 'color: rgb(226, 84, 64);';\n    (0, _mocha.it)('counts chars', function () {\n      let result = (0, _ghCountDownCharacters.countDownCharacters)(['test', 200]);\n      (0, _chai.expect)(result.string).to.equal(`<span class=\"word-count\" style=\"${validStyle}\">4</span>`);\n    });\n    (0, _mocha.it)('warns with too many chars', function () {\n      let result = (0, _ghCountDownCharacters.countDownCharacters)([Array(205 + 1).join('x'), 200]);\n      (0, _chai.expect)(result.string).to.equal(`<span class=\"word-count\" style=\"${errorStyle}\">205</span>`);\n    });\n    (0, _mocha.it)('counts multibyte correctly', function () {\n      let result = (0, _ghCountDownCharacters.countDownCharacters)(['💩', 200]);\n      (0, _chai.expect)(result.string).to.equal(`<span class=\"word-count\" style=\"${validStyle}\">1</span>`); // emoji + modifier is still two chars\n\n      result = (0, _ghCountDownCharacters.countDownCharacters)(['💃🏻', 200]);\n      (0, _chai.expect)(result.string).to.equal(`<span class=\"word-count\" style=\"${validStyle}\">2</span>`);\n    });\n  });\n});","define(\"ghost-admin/tests/unit/helpers/gh-user-can-admin-test\", [\"mocha\", \"chai\", \"ghost-admin/helpers/gh-user-can-admin\"], function (_mocha, _chai, _ghUserCanAdmin) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Helper: gh-user-can-admin', function () {\n    // Mock up roles and test for truthy\n    (0, _mocha.describe)('Owner or admin roles', function () {\n      let user = {\n        get(role) {\n          if (role === 'isAdmin') {\n            return true;\n          }\n\n          throw new Error('unsupported'); // Make sure we only call get('isAdmin')\n        }\n\n      };\n      (0, _mocha.it)(' - can be Admin', function () {\n        let result = (0, _ghUserCanAdmin.ghUserCanAdmin)([user]);\n        (0, _chai.expect)(result).to.equal(true);\n      });\n    });\n    (0, _mocha.describe)('Editor, Author & Contributor roles', function () {\n      let user = {\n        get(role) {\n          if (role === 'isAdmin') {\n            return false;\n          }\n\n          throw new Error('unsupported'); // Make sure we only call get('isAdmin')\n        }\n\n      };\n      (0, _mocha.it)(' - cannot be Admin', function () {\n        let result = (0, _ghUserCanAdmin.ghUserCanAdmin)([user]);\n        (0, _chai.expect)(result).to.equal(false);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/helpers/highlighted-text-test\", [\"mocha\", \"chai\", \"ghost-admin/helpers/highlighted-text\"], function (_mocha, _chai, _highlightedText) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Helper: highlighted-text', function () {\n    (0, _mocha.it)('works', function () {\n      let result = (0, _highlightedText.highlightedText)(['Test', 'e']);\n      (0, _chai.expect)(result).to.be.an('object');\n      (0, _chai.expect)(result.string).to.equal('T<span class=\"highlight\">e</span>st');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/mixins/validation-engine-test\", [\"mocha\"], function (_mocha) {\n  \"use strict\";\n\n  // import {expect} from 'chai';\n  // import EmberObject from 'ember-object';\n  // import ValidationEngineMixin from 'ghost-admin/mixins/validation-engine';\n  (0, _mocha.describe)('ValidationEngineMixin', function () {\n    (0, _mocha.describe)('#validate', function () {\n      (0, _mocha.it)('loads the correct validator');\n      (0, _mocha.it)('rejects if the validator doesn\\'t exist');\n      (0, _mocha.it)('resolves with valid object');\n      (0, _mocha.it)('rejects with invalid object');\n      (0, _mocha.it)('clears all existing errors');\n      (0, _mocha.describe)('with a specified property', function () {\n        (0, _mocha.it)('resolves with valid property');\n        (0, _mocha.it)('rejects with invalid property');\n        (0, _mocha.it)('adds property to hasValidated array');\n        (0, _mocha.it)('clears existing error on specified property');\n      });\n      (0, _mocha.it)('handles a passed in model');\n      (0, _mocha.it)('uses this.model if available');\n    });\n    (0, _mocha.describe)('#save', function () {\n      (0, _mocha.it)('calls validate');\n      (0, _mocha.it)('rejects with validation errors');\n      (0, _mocha.it)('calls object\\'s #save if validation passes');\n      (0, _mocha.it)('skips validation if it\\'s a deletion');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/invite-test\", [\"pretender\", \"ghost-admin/utils/ghost-paths\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_pretender, _ghostPaths, _mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: invite', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.describe)('with network', function () {\n      let server;\n      beforeEach(function () {\n        server = new _pretender.default();\n      });\n      afterEach(function () {\n        server.shutdown();\n      });\n      (0, _mocha.it)('resend hits correct endpoints', async function () {\n        let store = this.owner.lookup('service:store');\n        let model = store.createRecord('invite', {\n          id: 42\n        });\n        let role;\n        server.delete(`${(0, _ghostPaths.default)().apiRoot}/invites/42`, function () {\n          return [204, {}, '{}'];\n        });\n        server.post(`${(0, _ghostPaths.default)().apiRoot}/invites/`, function () {\n          return [200, {}, '{}'];\n        });\n        Ember.run(() => {\n          role = store.push({\n            data: {\n              id: 1,\n              type: 'role',\n              attributes: {\n                name: 'Editor'\n              }\n            }\n          });\n          model.set('email', 'resend-test@example.com');\n          model.set('role', role);\n          model.resend();\n        });\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(server.handledRequests.length, 'number of requests').to.equal(2);\n        let [, lastRequest] = server.handledRequests;\n        let requestBody = JSON.parse(lastRequest.requestBody);\n        let [invite] = requestBody.invites;\n        (0, _chai.expect)(requestBody.invites.length, 'number of invites in request body').to.equal(1);\n        (0, _chai.expect)(invite.email).to.equal('resend-test@example.com'); // eslint-disable-next-line camelcase\n\n        (0, _chai.expect)(invite.role_id, 'role ID').to.equal('1');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/member-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: member', function () {\n    (0, _emberMocha.setupTest)();\n    let store;\n    beforeEach(function () {\n      store = this.owner.lookup('service:store');\n    });\n    (0, _mocha.it)('has a validation type of \"member\"', function () {\n      let model = store.createRecord('member');\n      (0, _chai.expect)(model.get('validationType')).to.equal('member');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/navigation-item-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: navigation-item', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.it)('isComplete is true when label and url are filled', function () {\n      let model = this.owner.lookup('model:navigation-item');\n      model.set('label', 'test');\n      model.set('url', 'test');\n      (0, _chai.expect)(model.get('isComplete')).to.be.true;\n    });\n    (0, _mocha.it)('isComplete is false when label is blank', function () {\n      let model = this.owner.lookup('model:navigation-item');\n      model.set('label', '');\n      model.set('url', 'test');\n      (0, _chai.expect)(model.get('isComplete')).to.be.false;\n    });\n    (0, _mocha.it)('isComplete is false when url is blank', function () {\n      let model = this.owner.lookup('model:navigation-item');\n      model.set('label', 'test');\n      model.set('url', '');\n      (0, _chai.expect)(model.get('isComplete')).to.be.false;\n    });\n    (0, _mocha.it)('isBlank is true when label and url are blank', function () {\n      let model = this.owner.lookup('model:navigation-item');\n      model.set('label', '');\n      model.set('url', '');\n      (0, _chai.expect)(model.get('isBlank')).to.be.true;\n    });\n    (0, _mocha.it)('isBlank is false when label is present', function () {\n      let model = this.owner.lookup('model:navigation-item');\n      model.set('label', 'test');\n      model.set('url', '');\n      (0, _chai.expect)(model.get('isBlank')).to.be.false;\n    });\n    (0, _mocha.it)('isBlank is false when url is present', function () {\n      let model = this.owner.lookup('model:navigation-item');\n      model.set('label', '');\n      model.set('url', 'test');\n      (0, _chai.expect)(model.get('isBlank')).to.be.false;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/post-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: post', function () {\n    (0, _emberMocha.setupTest)();\n    let store;\n    beforeEach(function () {\n      store = this.owner.lookup('service:store');\n    });\n    (0, _mocha.it)('has a validation type of \"post\"', function () {\n      let model = store.createRecord('post');\n      (0, _chai.expect)(model.validationType).to.equal('post');\n    });\n    (0, _mocha.it)('isPublished, isDraft and isScheduled are correct', function () {\n      let model = store.createRecord('post', {\n        status: 'published'\n      });\n      (0, _chai.expect)(model.get('isPublished')).to.be.ok;\n      (0, _chai.expect)(model.get('isDraft')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isScheduled')).to.not.be.ok;\n      Ember.run(function () {\n        model.set('status', 'draft');\n        (0, _chai.expect)(model.get('isPublished')).to.not.be.ok;\n        (0, _chai.expect)(model.get('isDraft')).to.be.ok;\n        (0, _chai.expect)(model.get('isScheduled')).to.not.be.ok;\n      });\n      Ember.run(function () {\n        model.set('status', 'scheduled');\n        (0, _chai.expect)(model.get('isScheduled')).to.be.ok;\n        (0, _chai.expect)(model.get('isPublished')).to.not.be.ok;\n        (0, _chai.expect)(model.get('isDraft')).to.not.be.ok;\n      });\n    });\n    (0, _mocha.it)('isAuthoredByUser is correct', function () {\n      let user1 = store.createRecord('user', {\n        id: 'abcd1234'\n      });\n      let user2 = store.createRecord('user', {\n        id: 'wxyz9876'\n      });\n      let model = store.createRecord('post', {\n        authors: [user1]\n      });\n      (0, _chai.expect)(model.isAuthoredByUser(user1)).to.be.ok;\n      Ember.run(function () {\n        model.set('authors', [user2]);\n        (0, _chai.expect)(model.isAuthoredByUser(user1)).to.not.be.ok;\n      });\n    });\n    (0, _mocha.it)('updateTags removes and deletes old tags', function () {\n      let model = store.createRecord('post');\n      Ember.run(this, function () {\n        let modelTags = model.get('tags');\n        let tag1 = store.createRecord('tag', {\n          id: '1'\n        });\n        let tag2 = store.createRecord('tag', {\n          id: '2'\n        });\n        let tag3 = store.createRecord('tag'); // During testing a record created without an explicit id will get\n        // an id of 'fixture-n' instead of null\n\n        tag3.set('id', null);\n        modelTags.pushObject(tag1);\n        modelTags.pushObject(tag2);\n        modelTags.pushObject(tag3);\n        (0, _chai.expect)(model.get('tags.length')).to.equal(3);\n        model.updateTags();\n        (0, _chai.expect)(model.get('tags.length')).to.equal(2);\n        (0, _chai.expect)(model.get('tags.firstObject.id')).to.equal('1');\n        (0, _chai.expect)(model.get('tags').objectAt(1).get('id')).to.equal('2');\n        (0, _chai.expect)(tag1.get('isDeleted')).to.not.be.ok;\n        (0, _chai.expect)(tag2.get('isDeleted')).to.not.be.ok;\n        (0, _chai.expect)(tag3.get('isDeleted')).to.be.ok;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/role-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: role', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.it)('provides a lowercase version of the name', function () {\n      let model = this.owner.lookup('service:store').createRecord('role', {\n        name: 'Author'\n      });\n      (0, _chai.expect)(model.get('name')).to.equal('Author');\n      (0, _chai.expect)(model.get('lowerCaseName')).to.equal('author');\n      Ember.run(function () {\n        model.set('name', 'Editor');\n        (0, _chai.expect)(model.get('name')).to.equal('Editor');\n        (0, _chai.expect)(model.get('lowerCaseName')).to.equal('editor');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/setting-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: setting', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.it)('has a validation type of \"setting\"', function () {\n      let model = this.owner.lookup('service:store').createRecord('setting');\n      (0, _chai.expect)(model.get('validationType')).to.equal('setting');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/tag-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: tag', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.it)('has a validation type of \"tag\"', function () {\n      let model = this.owner.lookup('service:store').createRecord('tag');\n      (0, _chai.expect)(model.get('validationType')).to.equal('tag');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/user-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: user', function () {\n    (0, _emberMocha.setupTest)();\n    let store;\n    beforeEach(function () {\n      store = this.owner.lookup('service:store');\n    });\n    (0, _mocha.it)('has a validation type of \"user\"', function () {\n      let model = store.createRecord('user');\n      (0, _chai.expect)(model.get('validationType')).to.equal('user');\n    });\n    (0, _mocha.it)('isActive/isSuspended properties are correct', function () {\n      let model = store.createRecord('user', {\n        status: 'active'\n      });\n      (0, _chai.expect)(model.get('isActive')).to.be.ok;\n      (0, _chai.expect)(model.get('isSuspended')).to.not.be.ok;\n      ['warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].forEach(function (status) {\n        Ember.run(() => {\n          model.set('status', status);\n        });\n        (0, _chai.expect)(model.get('isActive')).to.be.ok;\n        (0, _chai.expect)(model.get('isSuspended')).to.not.be.ok;\n      });\n      Ember.run(() => {\n        model.set('status', 'inactive');\n      });\n      (0, _chai.expect)(model.get('isSuspended')).to.be.ok;\n      (0, _chai.expect)(model.get('isActive')).to.not.be.ok;\n    });\n    (0, _mocha.it)('role property is correct', function () {\n      let model = store.createRecord('user');\n      Ember.run(() => {\n        let role = store.push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Author'\n            }\n          }\n        });\n        model.get('roles').pushObject(role);\n      });\n      (0, _chai.expect)(model.get('role.name')).to.equal('Author');\n      Ember.run(() => {\n        let role = store.push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Editor'\n            }\n          }\n        });\n        model.set('role', role);\n      });\n      (0, _chai.expect)(model.get('role.name')).to.equal('Editor');\n    });\n    (0, _mocha.it)('isContributor property is correct', function () {\n      let model = store.createRecord('user');\n      Ember.run(() => {\n        let role = store.push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Contributor'\n            }\n          }\n        });\n        model.set('role', role);\n      });\n      (0, _chai.expect)(model.get('isContributor')).to.be.ok;\n      (0, _chai.expect)(model.get('isAuthorOrContributor')).to.be.ok;\n      (0, _chai.expect)(model.get('isAuthor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isEditor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAdminOnly')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isOwnerOnly')).to.not.be.ok;\n    });\n    (0, _mocha.it)('isAuthor property is correct', function () {\n      let model = store.createRecord('user');\n      Ember.run(() => {\n        let role = store.push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Author'\n            }\n          }\n        });\n        model.set('role', role);\n      });\n      (0, _chai.expect)(model.get('isAuthor')).to.be.ok;\n      (0, _chai.expect)(model.get('isContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAuthorOrContributor')).to.be.ok;\n      (0, _chai.expect)(model.get('isEditor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAdminOnly')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isOwnerOnly')).to.not.be.ok;\n    });\n    (0, _mocha.it)('isEditor property is correct', function () {\n      let model = store.createRecord('user');\n      Ember.run(() => {\n        let role = store.push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Editor'\n            }\n          }\n        });\n        model.set('role', role);\n      });\n      (0, _chai.expect)(model.get('isEditor')).to.be.ok;\n      (0, _chai.expect)(model.get('isAuthor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAuthorOrContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAdminOnly')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isOwnerOnly')).to.not.be.ok;\n    });\n    (0, _mocha.it)('isAdminOnly property is correct', function () {\n      let model = store.createRecord('user');\n      Ember.run(() => {\n        let role = store.push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Administrator'\n            }\n          }\n        });\n        model.set('role', role);\n      });\n      (0, _chai.expect)(model.get('isAdminOnly')).to.be.ok;\n      (0, _chai.expect)(model.get('isAuthor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAuthorOrContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isEditor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isOwnerOnly')).to.not.be.ok;\n    });\n    (0, _mocha.it)('isOwnerOnly property is correct', function () {\n      let model = store.createRecord('user');\n      Ember.run(() => {\n        let role = store.push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Owner'\n            }\n          }\n        });\n        model.set('role', role);\n      });\n      (0, _chai.expect)(model.get('isOwnerOnly')).to.be.ok;\n      (0, _chai.expect)(model.get('isAuthor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAuthorOrContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAdminOnly')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isEditor')).to.not.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/serializers/notification-test\", [\"pretender\", \"ghost-admin/utils/ghost-paths\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _ghostPaths, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Serializer: notification', function () {\n    (0, _emberMocha.setupTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('converts location->key when deserializing', function () {\n      server.get(`${(0, _ghostPaths.default)().apiRoot}/notifications`, function () {\n        let response = {\n          notifications: [{\n            id: 1,\n            dismissible: false,\n            status: 'alert',\n            type: 'info',\n            location: 'test.foo',\n            message: 'This is a test'\n          }]\n        };\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify(response)];\n      });\n      let store = this.owner.lookup('service:store');\n      return store.findAll('notification').then(notifications => {\n        (0, _chai.expect)(notifications.get('length')).to.equal(1);\n        (0, _chai.expect)(notifications.get('firstObject.key')).to.equal('test.foo');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/services/event-bus-test\", [\"sinon\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Service: event-bus', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.it)('works', function () {\n      let service = this.owner.lookup('service:event-bus');\n\n      let eventHandler = _sinon.default.spy();\n\n      service.subscribe('test-event', this, eventHandler);\n      service.publish('test-event', 'test');\n      service.unsubscribe('test-event', this, eventHandler);\n      service.publish('test-event', 'test two');\n      (0, _chai.expect)(eventHandler.calledOnce, 'event handler only triggered once').to.be.true;\n      (0, _chai.expect)(eventHandler.calledWith('test'), 'event handler was passed correct arguments').to.be.true;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/services/limit-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit | Service | limit', function () {\n    (0, _emberMocha.setupTest)();\n    let limitService;\n    beforeEach(function () {\n      limitService = this.owner.lookup('service:limit');\n    });\n    (0, _mocha.it)('exists', function () {\n      (0, _chai.expect)(limitService).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/services/member-stats-test\", [\"moment\", \"mocha\", \"chai\", \"ember-mocha\"], function (_moment, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Service: membersStats', function () {\n    (0, _emberMocha.setupTest)();\n    let memberStatsService;\n    beforeEach(function () {\n      memberStatsService = this.owner.lookup('service:membersStats');\n    });\n    (0, _mocha.it)('fills correct date and value for mrr data when no data points', function () {\n      const data = [];\n      const output = memberStatsService.fillDates(data);\n      const values = Object.values(output);\n      const keys = Object.keys(output);\n      (0, _chai.expect)(values[0]).to.equal(0);\n      (0, _chai.expect)(keys[0]).to.equal((0, _moment.default)().subtract(30, 'days').format('YYYY-MM-DD'));\n      (0, _chai.expect)(keys[keys.length - 1]).to.equal((0, _moment.default)().format('YYYY-MM-DD'));\n      (0, _chai.expect)(values[values.length - 1]).to.equal(0);\n    });\n    (0, _mocha.it)('fills correct date and value for mrr data when no data point in range', function () {\n      const data = [{\n        date: (0, _moment.default)().subtract(40, 'days').format('YYYY-MM-DD'),\n        value: 10459\n      }, {\n        date: (0, _moment.default)().subtract(31, 'days').format('YYYY-MM-DD'),\n        value: 14459\n      }];\n      const output = memberStatsService.fillDates(data);\n      const values = Object.values(output);\n      const keys = Object.keys(output);\n      (0, _chai.expect)(values[0]).to.equal(14459);\n      (0, _chai.expect)(keys[0]).to.equal((0, _moment.default)().subtract(30, 'days').format('YYYY-MM-DD'));\n      (0, _chai.expect)(keys[keys.length - 1]).to.equal((0, _moment.default)().format('YYYY-MM-DD'));\n      (0, _chai.expect)(values[values.length - 1]).to.equal(14459);\n    });\n    (0, _mocha.it)('fills correct date and value for mrr data when first data point outside range', function () {\n      const data = [{\n        date: (0, _moment.default)().subtract(31, 'days').format('YYYY-MM-DD'),\n        value: 14459\n      }, {\n        date: (0, _moment.default)().subtract(10, 'days').format('YYYY-MM-DD'),\n        value: 98176\n      }];\n      const output = memberStatsService.fillDates(data);\n      const values = Object.values(output);\n      const keys = Object.keys(output);\n      (0, _chai.expect)(values[0]).to.equal(14459);\n      (0, _chai.expect)(keys[0]).to.equal((0, _moment.default)().subtract(30, 'days').format('YYYY-MM-DD'));\n      (0, _chai.expect)(keys[keys.length - 1]).to.equal((0, _moment.default)().format('YYYY-MM-DD'));\n      (0, _chai.expect)(values[values.length - 1]).to.equal(98176);\n    });\n    (0, _mocha.it)('fills correct date and value for mrr data when only 1 data point in range', function () {\n      const data = [{\n        date: (0, _moment.default)().subtract(29, 'days').format('YYYY-MM-DD'),\n        value: 14459\n      }];\n      const output = memberStatsService.fillDates(data);\n      const values = Object.values(output);\n      const keys = Object.keys(output);\n      (0, _chai.expect)(values[0]).to.equal(14459);\n      (0, _chai.expect)(keys[0]).to.equal((0, _moment.default)().subtract(30, 'days').format('YYYY-MM-DD'));\n      (0, _chai.expect)(keys[keys.length - 1]).to.equal((0, _moment.default)().format('YYYY-MM-DD'));\n      (0, _chai.expect)(values[values.length - 1]).to.equal(14459);\n    });\n  });\n});","define(\"ghost-admin/tests/unit/services/notifications-test\", [\"sinon\", \"ember-ajax/errors\", \"ghost-admin/services/ajax\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _errors, _ajax, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  // notifications service determines if a notification is a model instance by\n  // checking `notification.constructor.modelName === 'notification'`\n  const NotificationStub = Ember.Object.extend();\n  NotificationStub.modelName = 'notification';\n  (0, _mocha.describe)('Unit: Service: notifications', function () {\n    (0, _emberMocha.setupTest)();\n    beforeEach(function () {\n      this.owner.lookup('service:notifications').set('content', Ember.A());\n      this.owner.lookup('service:notifications').set('delayedNotifications', Ember.A());\n    });\n    (0, _mocha.it)('filters alerts/notifications', function () {\n      let notifications = this.owner.lookup('service:notifications'); // wrapped in run-loop to enure alerts/notifications CPs are updated\n\n      Ember.run(() => {\n        notifications.showAlert('Alert');\n        notifications.showNotification('Notification');\n      });\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(1);\n      (0, _chai.expect)(notifications.get('alerts.firstObject.message')).to.equal('Alert');\n      (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n      (0, _chai.expect)(notifications.get('notifications.firstObject.message')).to.equal('Notification');\n    });\n    (0, _mocha.it)('#handleNotification deals with DS.Notification notifications', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      let notification = NotificationStub.create({\n        message: '<h1>Test</h1>',\n        status: 'alert'\n      });\n      notifications.handleNotification(notification);\n      notification = notifications.get('alerts')[0]; // alerts received from the server should be marked html safe\n\n      (0, _chai.expect)(notification.get('message')).to.have.property('toHTML');\n    });\n    (0, _mocha.it)('#handleNotification defaults to notification if no status supplied', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.handleNotification({\n        message: 'Test'\n      }, false);\n      (0, _chai.expect)(notifications.get('content')).to.deep.include({\n        message: 'Test',\n        status: 'notification'\n      });\n    });\n    (0, _mocha.it)('#showAlert adds POJO alerts', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      Ember.run(() => {\n        notifications.showAlert('Test Alert', {\n          type: 'error'\n        });\n      });\n      (0, _chai.expect)(notifications.get('alerts')).to.deep.include({\n        message: 'Test Alert',\n        status: 'alert',\n        type: 'error',\n        key: undefined,\n        actions: undefined,\n        description: undefined,\n        icon: undefined\n      });\n    });\n    (0, _mocha.it)('#showAlert adds delayed notifications', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      Ember.run(() => {\n        notifications.showNotification('Test Alert', {\n          type: 'error',\n          delayed: true\n        });\n      });\n      (0, _chai.expect)(notifications.get('delayedNotifications')).to.deep.include({\n        message: 'Test Alert',\n        status: 'notification',\n        type: 'error',\n        key: undefined,\n        actions: undefined,\n        description: undefined,\n        icon: undefined\n      });\n    }); // in order to cater for complex keys that are suitable for i18n\n    // we split on the second period and treat the resulting base as\n    // the key for duplicate checking\n\n    (0, _mocha.it)('#showAlert clears duplicates using keys', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      Ember.run(() => {\n        notifications.showAlert('Kept');\n        notifications.showAlert('Duplicate', {\n          key: 'duplicate.key.fail'\n        });\n      });\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n      Ember.run(() => {\n        notifications.showAlert('Duplicate with new message', {\n          key: 'duplicate.key.success'\n        });\n      });\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n      (0, _chai.expect)(notifications.get('alerts.lastObject.message')).to.equal('Duplicate with new message');\n    });\n    (0, _mocha.it)('#showAlert clears duplicates using message text', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.showAlert('Not duplicate');\n      notifications.showAlert('Duplicate', {\n        key: 'duplicate'\n      });\n      notifications.showAlert('Duplicate');\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n      (0, _chai.expect)(notifications.get('alerts.lastObject.key')).to.not.exist;\n    });\n    (0, _mocha.it)('#showNotification adds POJO notifications', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      Ember.run(() => {\n        notifications.showNotification('Test Notification', {\n          type: 'success'\n        });\n      });\n      (0, _chai.expect)(notifications.get('notifications')).to.deep.include({\n        message: 'Test Notification',\n        status: 'notification',\n        type: 'success',\n        key: undefined,\n        actions: undefined,\n        description: undefined,\n        icon: undefined\n      });\n    });\n    (0, _mocha.it)('#showNotification adds delayed notifications', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      Ember.run(() => {\n        notifications.showNotification('Test Notification', {\n          delayed: true\n        });\n      });\n      (0, _chai.expect)(notifications.get('delayedNotifications')).to.deep.include({\n        message: 'Test Notification',\n        status: 'notification',\n        type: undefined,\n        key: undefined,\n        actions: undefined,\n        description: undefined,\n        icon: undefined\n      });\n    });\n    (0, _mocha.it)('#showAPIError handles single json response error', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      let error = new _errors.AjaxError({\n        errors: [{\n          message: 'Single error'\n        }]\n      });\n      Ember.run(() => {\n        notifications.showAPIError(error);\n      });\n      let alert = notifications.get('alerts.firstObject');\n      (0, _chai.expect)(Ember.get(alert, 'message')).to.equal('Single error');\n      (0, _chai.expect)(Ember.get(alert, 'status')).to.equal('alert');\n      (0, _chai.expect)(Ember.get(alert, 'type')).to.equal('error');\n      (0, _chai.expect)(Ember.get(alert, 'key')).to.equal('api-error');\n    });\n    (0, _mocha.it)('#showAPIError handles multiple json response errors', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      let error = new _errors.AjaxError({\n        errors: [{\n          title: 'First error',\n          message: 'First error message'\n        }, {\n          title: 'Second error',\n          message: 'Second error message'\n        }]\n      });\n      Ember.run(() => {\n        notifications.showAPIError(error);\n      });\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n      let [alert1, alert2] = notifications.get('alerts');\n      (0, _chai.expect)(alert1).to.deep.equal({\n        message: 'First error message',\n        status: 'alert',\n        type: 'error',\n        key: 'api-error.first-error',\n        actions: undefined,\n        description: undefined,\n        icon: undefined\n      });\n      (0, _chai.expect)(alert2).to.deep.equal({\n        message: 'Second error message',\n        status: 'alert',\n        type: 'error',\n        key: 'api-error.second-error',\n        actions: undefined,\n        description: undefined,\n        icon: undefined\n      });\n    });\n    (0, _mocha.it)('#showAPIError displays default error text if response has no error/message', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      let resp = false;\n      Ember.run(() => {\n        notifications.showAPIError(resp);\n      });\n      (0, _chai.expect)(notifications.get('content').toArray()).to.deep.equal([{\n        message: 'There was a problem on the server, please try again.',\n        status: 'alert',\n        type: 'error',\n        key: 'api-error',\n        actions: undefined,\n        description: undefined,\n        icon: undefined\n      }]);\n      notifications.set('content', Ember.A());\n      Ember.run(() => {\n        notifications.showAPIError(resp, {\n          defaultErrorText: 'Overridden default'\n        });\n      });\n      (0, _chai.expect)(notifications.get('content').toArray()).to.deep.equal([{\n        message: 'Overridden default',\n        status: 'alert',\n        type: 'error',\n        key: 'api-error',\n        actions: undefined,\n        description: undefined,\n        icon: undefined\n      }]);\n    });\n    (0, _mocha.it)('#showAPIError sets correct key when passed a base key', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      Ember.run(() => {\n        notifications.showAPIError('Test', {\n          key: 'test.alert'\n        });\n      });\n      (0, _chai.expect)(notifications.get('alerts.firstObject.key')).to.equal('api-error.test.alert');\n    });\n    (0, _mocha.it)('#showAPIError sets correct key when not passed a key', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      Ember.run(() => {\n        notifications.showAPIError('Test');\n      });\n      (0, _chai.expect)(notifications.get('alerts.firstObject.key')).to.equal('api-error');\n    });\n    (0, _mocha.it)('#showAPIError parses default ember-ajax errors correctly', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      let error = new _errors.InvalidError();\n      Ember.run(() => {\n        notifications.showAPIError(error);\n      });\n      let notification = notifications.get('alerts.firstObject');\n      (0, _chai.expect)(Ember.get(notification, 'message')).to.equal('Request was rejected because it was invalid');\n      (0, _chai.expect)(Ember.get(notification, 'status')).to.equal('alert');\n      (0, _chai.expect)(Ember.get(notification, 'type')).to.equal('error');\n      (0, _chai.expect)(Ember.get(notification, 'key')).to.equal('api-error');\n    });\n    (0, _mocha.it)('#showAPIError parses custom ember-ajax errors correctly', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      let error = new _ajax.ServerUnreachableError();\n      Ember.run(() => {\n        notifications.showAPIError(error);\n      });\n      let notification = notifications.get('alerts.firstObject');\n      (0, _chai.expect)(Ember.get(notification, 'message')).to.equal('Server was unreachable');\n      (0, _chai.expect)(Ember.get(notification, 'status')).to.equal('alert');\n      (0, _chai.expect)(Ember.get(notification, 'type')).to.equal('error');\n      (0, _chai.expect)(Ember.get(notification, 'key')).to.equal('api-error');\n    });\n    (0, _mocha.it)('#showAPIError adds error context to message if available', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      let error = new _errors.AjaxError({\n        errors: [{\n          message: 'Authorization Error.',\n          context: 'Please sign in.'\n        }]\n      });\n      Ember.run(() => {\n        notifications.showAPIError(error);\n      });\n      let alert = notifications.get('alerts.firstObject');\n      (0, _chai.expect)(Ember.get(alert, 'message')).to.equal('Authorization Error. Please sign in.');\n      (0, _chai.expect)(Ember.get(alert, 'status')).to.equal('alert');\n      (0, _chai.expect)(Ember.get(alert, 'type')).to.equal('error');\n      (0, _chai.expect)(Ember.get(alert, 'key')).to.equal('api-error');\n    });\n    (0, _mocha.it)('#displayDelayed moves delayed notifications into content', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      Ember.run(() => {\n        notifications.showNotification('First', {\n          delayed: true\n        });\n        notifications.showNotification('Second', {\n          delayed: true\n        });\n        notifications.showNotification('Third', {\n          delayed: false\n        });\n        notifications.displayDelayed();\n      });\n      (0, _chai.expect)(notifications.get('notifications')).to.deep.equal([{\n        message: 'Third',\n        status: 'notification',\n        type: undefined,\n        key: undefined,\n        actions: undefined,\n        description: undefined,\n        icon: undefined\n      }, {\n        message: 'First',\n        status: 'notification',\n        type: undefined,\n        key: undefined,\n        actions: undefined,\n        description: undefined,\n        icon: undefined\n      }, {\n        message: 'Second',\n        status: 'notification',\n        type: undefined,\n        key: undefined,\n        actions: undefined,\n        description: undefined,\n        icon: undefined\n      }]);\n    });\n    (0, _mocha.it)('#closeNotification removes POJO notifications', function () {\n      let notification = {\n        message: 'Close test',\n        status: 'notification'\n      };\n      let notifications = this.owner.lookup('service:notifications');\n      Ember.run(() => {\n        notifications.handleNotification(notification);\n      });\n      (0, _chai.expect)(notifications.get('notifications')).to.include(notification);\n      Ember.run(() => {\n        notifications.closeNotification(notification);\n      });\n      (0, _chai.expect)(notifications.get('notifications')).to.not.include(notification);\n    });\n    (0, _mocha.it)('#closeNotification removes and deletes DS.Notification records', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      let notification = NotificationStub.create({\n        message: 'Close test',\n        status: 'alert'\n      });\n\n      notification.deleteRecord = function () {};\n\n      _sinon.default.spy(notification, 'deleteRecord');\n\n      notification.save = function () {\n        return {\n          finally(callback) {\n            return callback(notification);\n          }\n\n        };\n      };\n\n      _sinon.default.spy(notification, 'save');\n\n      Ember.run(() => {\n        notifications.handleNotification(notification);\n      });\n      (0, _chai.expect)(notifications.get('alerts')).to.include(notification);\n      Ember.run(() => {\n        notifications.closeNotification(notification);\n      });\n      (0, _chai.expect)(notification.deleteRecord.calledOnce).to.be.true;\n      (0, _chai.expect)(notification.save.calledOnce).to.be.true;\n      (0, _chai.expect)(notifications.get('alerts')).to.not.include(notification);\n    });\n    (0, _mocha.it)('#closeNotifications only removes notifications', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      Ember.run(() => {\n        notifications.showAlert('First alert');\n        notifications.showNotification('First notification');\n        notifications.showNotification('Second notification');\n      });\n      (0, _chai.expect)(notifications.get('alerts.length'), 'alerts count').to.equal(1);\n      (0, _chai.expect)(notifications.get('notifications.length'), 'notifications count').to.equal(2);\n      Ember.run(() => {\n        notifications.closeNotifications();\n      });\n      (0, _chai.expect)(notifications.get('alerts.length'), 'alerts count').to.equal(1);\n      (0, _chai.expect)(notifications.get('notifications.length'), 'notifications count').to.equal(0);\n    });\n    (0, _mocha.it)('#closeNotifications only closes notifications with specified key', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      Ember.run(() => {\n        notifications.showAlert('First alert'); // using handleNotification as showNotification will auto-prune duplicates\n\n        notifications.handleNotification({\n          message: 'First notification',\n          key: 'test.close',\n          status: 'notification'\n        });\n        notifications.handleNotification({\n          message: 'Second notification',\n          key: 'test.keep',\n          status: 'notification'\n        });\n        notifications.handleNotification({\n          message: 'Third notification',\n          key: 'test.close',\n          status: 'notification'\n        });\n      });\n      Ember.run(() => {\n        notifications.closeNotifications('test.close');\n      });\n      (0, _chai.expect)(notifications.get('notifications.length'), 'notifications count').to.equal(1);\n      (0, _chai.expect)(notifications.get('notifications.firstObject.message'), 'notification message').to.equal('Second notification');\n      (0, _chai.expect)(notifications.get('alerts.length'), 'alerts count').to.equal(1);\n    });\n    (0, _mocha.it)('#clearAll removes everything without deletion', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      let notificationModel = Ember.Object.create({\n        message: 'model'\n      });\n\n      notificationModel.deleteRecord = function () {};\n\n      _sinon.default.spy(notificationModel, 'deleteRecord');\n\n      notificationModel.save = function () {\n        return {\n          finally(callback) {\n            return callback(notificationModel);\n          }\n\n        };\n      };\n\n      _sinon.default.spy(notificationModel, 'save');\n\n      notifications.handleNotification(notificationModel);\n      notifications.handleNotification({\n        message: 'pojo'\n      });\n      notifications.clearAll();\n      (0, _chai.expect)(notifications.get('content')).to.be.empty;\n      (0, _chai.expect)(notificationModel.deleteRecord.called).to.be.false;\n      (0, _chai.expect)(notificationModel.save.called).to.be.false;\n    });\n    (0, _mocha.it)('#closeAlerts only removes alerts', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.showNotification('First notification');\n      notifications.showAlert('First alert');\n      notifications.showAlert('Second alert');\n      Ember.run(() => {\n        notifications.closeAlerts();\n      });\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(0);\n      (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n    });\n    (0, _mocha.it)('#closeAlerts closes only alerts with specified key', function () {\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.showNotification('First notification');\n      notifications.showAlert('First alert', {\n        key: 'test.close'\n      });\n      notifications.showAlert('Second alert', {\n        key: 'test.keep'\n      });\n      notifications.showAlert('Third alert', {\n        key: 'test.close'\n      });\n      Ember.run(() => {\n        notifications.closeAlerts('test.close');\n      });\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(1);\n      (0, _chai.expect)(notifications.get('alerts.firstObject.message')).to.equal('Second alert');\n      (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n    });\n  });\n});","define(\"ghost-admin/tests/unit/services/unsplash-test\", [\"pretender\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_pretender, _mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Service: unsplash', function () {\n    (0, _emberMocha.setupTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('can load new');\n    (0, _mocha.it)('can load next page');\n    (0, _mocha.describe)('search', function () {\n      (0, _mocha.it)('sends search request');\n      (0, _mocha.it)('debounces query updates');\n      (0, _mocha.it)('can load next page of search results');\n      (0, _mocha.it)('clears photos when starting new search');\n      (0, _mocha.it)('loads new when query is cleared');\n    });\n    (0, _mocha.describe)('columns', function () {\n      (0, _mocha.it)('sorts photos into columns based on column height');\n      (0, _mocha.it)('can change column count');\n    });\n    (0, _mocha.describe)('error handling', function () {\n      (0, _mocha.it)('handles rate limit exceeded', async function () {\n        server.get('https://api.unsplash.com/photos', function () {\n          return [403, {\n            'x-ratelimit-remaining': '0'\n          }, 'Rate Limit Exceeded'];\n        });\n        let service = this.owner.lookup('service:unsplash');\n        Ember.run(() => {\n          service.loadNextPage();\n        });\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(service.get('error')).to.have.string('Unsplash API rate limit reached');\n      });\n      (0, _mocha.it)('handles json errors', async function () {\n        server.get('https://api.unsplash.com/photos', function () {\n          return [500, {\n            'Content-Type': 'application/json'\n          }, JSON.stringify({\n            errors: ['Unsplash API Error']\n          })];\n        });\n        let service = this.owner.lookup('service:unsplash');\n        Ember.run(() => {\n          service.loadNextPage();\n        });\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(service.get('error')).to.equal('Unsplash API Error');\n      });\n      (0, _mocha.it)('handles text errors', async function () {\n        server.get('https://api.unsplash.com/photos', function () {\n          return [500, {\n            'Content-Type': 'text/xml'\n          }, 'Unsplash text error'];\n        });\n        let service = this.owner.lookup('service:unsplash');\n        Ember.run(() => {\n          service.loadNextPage();\n        });\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(service.get('error')).to.equal('Unsplash text error');\n      });\n    });\n    (0, _mocha.describe)('isLoading', function () {\n      (0, _mocha.it)('is false by default');\n      (0, _mocha.it)('is true when loading new');\n      (0, _mocha.it)('is true when loading next page');\n      (0, _mocha.it)('is true when searching');\n      (0, _mocha.it)('returns to false when finished');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/transforms/facebook-url-user-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Transform: facebook-url-user', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.it)('deserializes facebook url', function () {\n      let transform = this.owner.lookup('transform:facebook-url-user');\n      let serialized = 'testuser';\n      let result = transform.deserialize(serialized);\n      (0, _chai.expect)(result).to.equal('https://www.facebook.com/testuser');\n    });\n    (0, _mocha.it)('serializes url to facebook username', function () {\n      let transform = this.owner.lookup('transform:facebook-url-user');\n      let deserialized = 'https://www.facebook.com/testuser';\n      let result = transform.serialize(deserialized);\n      (0, _chai.expect)(result).to.equal('testuser');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/transforms/json-string-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Transform: json-string', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.it)('serialises an Object to a JSON String', function () {\n      let transform = this.owner.lookup('transform:json-string');\n      let obj = {\n        one: 'one',\n        two: 'two'\n      };\n      (0, _chai.expect)(transform.serialize(obj)).to.equal(JSON.stringify(obj));\n    });\n    (0, _mocha.it)('deserialises a JSON String to an Object', function () {\n      let transform = this.owner.lookup('transform:json-string');\n      let obj = {\n        one: 'one',\n        two: 'two'\n      };\n      (0, _chai.expect)(transform.deserialize(JSON.stringify(obj))).to.deep.equal(obj);\n    });\n    (0, _mocha.it)('handles deserializing a blank string', function () {\n      let transform = this.owner.lookup('transform:json-string');\n      (0, _chai.expect)(transform.deserialize('')).to.equal(null);\n    });\n  });\n});","define(\"ghost-admin/tests/unit/transforms/navigation-settings-test\", [\"ghost-admin/models/navigation-item\", \"mocha\", \"chai\", \"ember-mocha\"], function (_navigationItem, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Transform: navigation-settings', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.it)('deserializes navigation json', function () {\n      let transform = this.owner.lookup('transform:navigation-settings');\n      let serialized = '[{\"label\":\"One\",\"url\":\"/one\"},{\"label\":\"Two\",\"url\":\"/two\"}]';\n      let result = transform.deserialize(serialized);\n      (0, _chai.expect)(result.length).to.equal(2);\n      (0, _chai.expect)(result[0]).to.be.instanceof(_navigationItem.default);\n      (0, _chai.expect)(result[0].get('label')).to.equal('One');\n      (0, _chai.expect)(result[0].get('url')).to.equal('/one');\n      (0, _chai.expect)(result[1]).to.be.instanceof(_navigationItem.default);\n      (0, _chai.expect)(result[1].get('label')).to.equal('Two');\n      (0, _chai.expect)(result[1].get('url')).to.equal('/two');\n    });\n    (0, _mocha.it)('serializes array of NavigationItems', function () {\n      let transform = this.owner.lookup('transform:navigation-settings');\n      let deserialized = Ember.A([_navigationItem.default.create({\n        label: 'One',\n        url: '/one'\n      }), _navigationItem.default.create({\n        label: 'Two',\n        url: '/two'\n      })]);\n      let result = transform.serialize(deserialized);\n      (0, _chai.expect)(result).to.equal('[{\"label\":\"One\",\"url\":\"/one\"},{\"label\":\"Two\",\"url\":\"/two\"}]');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/transforms/slack-settings-test\", [\"ghost-admin/models/slack-integration\", \"mocha\", \"chai\", \"ember-mocha\"], function (_slackIntegration, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Transform: slack-settings', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.it)('deserializes settings json', function () {\n      let transform = this.owner.lookup('transform:slack-settings');\n      let serialized = '[{\"url\":\"http://myblog.com/blogpost1\",\"username\":\"SlackBot\"}]';\n      let result = transform.deserialize(serialized);\n      (0, _chai.expect)(result.length).to.equal(1);\n      (0, _chai.expect)(result[0]).to.be.instanceof(_slackIntegration.default);\n      (0, _chai.expect)(result[0].get('url')).to.equal('http://myblog.com/blogpost1');\n      (0, _chai.expect)(result[0].get('username')).to.equal('SlackBot');\n    });\n    (0, _mocha.it)('deserializes empty array', function () {\n      let transform = this.owner.lookup('transform:slack-settings');\n      let serialized = '[]';\n      let result = transform.deserialize(serialized);\n      (0, _chai.expect)(result.length).to.equal(1);\n      (0, _chai.expect)(result[0]).to.be.instanceof(_slackIntegration.default);\n      (0, _chai.expect)(result[0].get('url')).to.equal('');\n      (0, _chai.expect)(result[0].get('username')).to.equal('');\n    });\n    (0, _mocha.it)('serializes array of Slack settings', function () {\n      let transform = this.owner.lookup('transform:slack-settings');\n      let deserialized = Ember.A([_slackIntegration.default.create({\n        url: 'http://myblog.com/blogpost1',\n        username: 'SlackBot'\n      })]);\n      let result = transform.serialize(deserialized);\n      (0, _chai.expect)(result).to.equal('[{\"url\":\"http://myblog.com/blogpost1\",\"username\":\"SlackBot\"}]');\n    });\n    (0, _mocha.it)('serializes empty SlackIntegration objects', function () {\n      let transform = this.owner.lookup('transform:slack-settings');\n      let deserialized = Ember.A([_slackIntegration.default.create({\n        url: ''\n      })]);\n      let result = transform.serialize(deserialized);\n      (0, _chai.expect)(result).to.equal('[]');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/transforms/twitter-url-user-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Transform: twitter-url-user', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.it)('deserializes twitter url', function () {\n      let transform = this.owner.lookup('transform:twitter-url-user');\n      let serialized = '@testuser';\n      let result = transform.deserialize(serialized);\n      (0, _chai.expect)(result).to.equal('https://twitter.com/testuser');\n    });\n    (0, _mocha.it)('serializes url to twitter username', function () {\n      let transform = this.owner.lookup('transform:twitter-url-user');\n      let deserialized = 'https://twitter.com/testuser';\n      let result = transform.serialize(deserialized);\n      (0, _chai.expect)(result).to.equal('@testuser');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/utils/ghost-paths-test\", [\"ghost-admin/utils/ghost-paths\", \"mocha\", \"chai\"], function (_ghostPaths, _mocha, _chai) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Util: ghost-paths', function () {\n    (0, _mocha.describe)('join', function () {\n      let {\n        join\n      } = (0, _ghostPaths.default)().url;\n      (0, _mocha.it)('should join two or more paths, normalizing slashes', function () {\n        let path;\n        path = join('/one/', '/two/');\n        (0, _chai.expect)(path).to.equal('/one/two/');\n        path = join('/one', '/two/');\n        (0, _chai.expect)(path).to.equal('/one/two/');\n        path = join('/one/', 'two/');\n        (0, _chai.expect)(path).to.equal('/one/two/');\n        path = join('/one/', 'two/', '/three/');\n        (0, _chai.expect)(path).to.equal('/one/two/three/');\n        path = join('/one/', 'two', 'three/');\n        (0, _chai.expect)(path).to.equal('/one/two/three/');\n      });\n      (0, _mocha.it)('should not change the slash at the beginning', function () {\n        let path;\n        path = join('one/');\n        (0, _chai.expect)(path).to.equal('one/');\n        path = join('one/', 'two');\n        (0, _chai.expect)(path).to.equal('one/two/');\n        path = join('/one/', 'two');\n        (0, _chai.expect)(path).to.equal('/one/two/');\n        path = join('one/', 'two', 'three');\n        (0, _chai.expect)(path).to.equal('one/two/three/');\n        path = join('/one/', 'two', 'three');\n        (0, _chai.expect)(path).to.equal('/one/two/three/');\n      });\n      (0, _mocha.it)('should always return a slash at the end', function () {\n        let path;\n        path = join();\n        (0, _chai.expect)(path).to.equal('/');\n        path = join('');\n        (0, _chai.expect)(path).to.equal('/');\n        path = join('one');\n        (0, _chai.expect)(path).to.equal('one/');\n        path = join('one/');\n        (0, _chai.expect)(path).to.equal('one/');\n        path = join('one', 'two');\n        (0, _chai.expect)(path).to.equal('one/two/');\n        path = join('one', 'two/');\n        (0, _chai.expect)(path).to.equal('one/two/');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/validators/nav-item-test\", [\"ghost-admin/models/navigation-item\", \"ghost-admin/validators/nav-item\", \"mocha\", \"chai\"], function (_navigationItem, _navItem, _mocha, _chai) {\n  \"use strict\";\n\n  const testInvalidUrl = function (url) {\n    let navItem = _navigationItem.default.create({\n      url\n    });\n\n    _navItem.default.check(navItem, 'url');\n\n    (0, _chai.expect)(_navItem.default.get('passed'), `\"${url}\" passed`).to.be.false;\n    (0, _chai.expect)(navItem.get('errors').errorsFor('url').toArray()).to.deep.equal([{\n      attribute: 'url',\n      message: 'You must specify a valid URL or relative path'\n    }]);\n    (0, _chai.expect)(navItem.get('hasValidated')).to.include('url');\n  };\n\n  const testValidUrl = function (url) {\n    let navItem = _navigationItem.default.create({\n      url\n    });\n\n    _navItem.default.check(navItem, 'url');\n\n    (0, _chai.expect)(_navItem.default.get('passed'), `\"${url}\" failed`).to.be.true;\n    (0, _chai.expect)(navItem.get('hasValidated')).to.include('url');\n  };\n\n  (0, _mocha.describe)('Unit: Validator: nav-item', function () {\n    (0, _mocha.it)('requires label presence', function () {\n      let navItem = _navigationItem.default.create();\n\n      _navItem.default.check(navItem, 'label');\n\n      (0, _chai.expect)(_navItem.default.get('passed')).to.be.false;\n      (0, _chai.expect)(navItem.get('errors').errorsFor('label').toArray()).to.deep.equal([{\n        attribute: 'label',\n        message: 'You must specify a label'\n      }]);\n      (0, _chai.expect)(navItem.get('hasValidated')).to.include('label');\n    });\n    (0, _mocha.it)('requires url presence', function () {\n      let navItem = _navigationItem.default.create();\n\n      _navItem.default.check(navItem, 'url');\n\n      (0, _chai.expect)(_navItem.default.get('passed')).to.be.false;\n      (0, _chai.expect)(navItem.get('errors').errorsFor('url').toArray()).to.deep.equal([{\n        attribute: 'url',\n        message: 'You must specify a URL or relative path'\n      }]);\n      (0, _chai.expect)(navItem.get('hasValidated')).to.include('url');\n    });\n    (0, _mocha.it)('fails on invalid url values', function () {\n      let invalidUrls = ['test@example.com', '/has spaces', 'no-leading-slash', 'http://example.com/with spaces'];\n      invalidUrls.forEach(function (url) {\n        testInvalidUrl(url);\n      });\n    });\n    (0, _mocha.it)('passes on valid url values', function () {\n      let validUrls = ['http://localhost:2368', 'http://localhost:2368/some-path', 'https://localhost:2368/some-path', '//localhost:2368/some-path', 'http://localhost:2368/#test', 'http://localhost:2368/?query=test&another=example', 'http://localhost:2368/?query=test&another=example#test', 'tel:01234-567890', 'mailto:test@example.com', 'http://some:user@example.com:1234', '/relative/path'];\n      validUrls.forEach(function (url) {\n        testValidUrl(url);\n      });\n    });\n    (0, _mocha.it)('validates url and label by default', function () {\n      let navItem = _navigationItem.default.create();\n\n      _navItem.default.check(navItem);\n\n      (0, _chai.expect)(navItem.get('errors').errorsFor('label')).to.not.be.empty;\n      (0, _chai.expect)(navItem.get('errors').errorsFor('url')).to.not.be.empty;\n      (0, _chai.expect)(_navItem.default.get('passed')).to.be.false;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/validators/post-test\", [\"ghost-admin/mixins/validation-engine\", \"mocha\", \"chai\"], function (_validationEngine, _mocha, _chai) {\n  \"use strict\";\n\n  const Post = Ember.Object.extend(_validationEngine.default, {\n    validationType: 'post',\n    email: null\n  });\n  (0, _mocha.describe)('Unit: Validator: post', function () {\n    (0, _mocha.describe)('canonicalUrl', function () {\n      (0, _mocha.it)('can be blank', async function () {\n        let post = Post.create({\n          canonicalUrl: ''\n        });\n        let passed = await post.validate({\n          property: 'canonicalUrl'\n        }).then(() => true);\n        (0, _chai.expect)(passed, 'passed').to.be.true;\n        (0, _chai.expect)(post.hasValidated).to.include('canonicalUrl');\n      });\n      (0, _mocha.it)('can be an absolute URL', async function () {\n        let post = Post.create({\n          canonicalUrl: 'http://example.com'\n        });\n        let passed = await post.validate({\n          property: 'canonicalUrl'\n        }).then(() => true);\n        (0, _chai.expect)(passed, 'passed').to.be.true;\n        (0, _chai.expect)(post.hasValidated).to.include('canonicalUrl');\n      });\n      (0, _mocha.it)('can be a relative URL', async function () {\n        let post = Post.create({\n          canonicalUrl: '/my-other-post'\n        });\n        let passed = await post.validate({\n          property: 'canonicalUrl'\n        }).then(() => true);\n        (0, _chai.expect)(passed, 'passed').to.be.true;\n        (0, _chai.expect)(post.hasValidated).to.include('canonicalUrl');\n      });\n      (0, _mocha.it)('cannot be a random string', async function () {\n        let post = Post.create({\n          canonicalUrl: 'asdfghjk'\n        });\n        let passed = await post.validate({\n          property: 'canonicalUrl'\n        }).then(() => true).catch(() => false);\n        (0, _chai.expect)(passed, 'passed').to.be.false;\n        (0, _chai.expect)(post.hasValidated).to.include('canonicalUrl');\n        let error = post.errors.errorsFor('canonicalUrl').get(0);\n        (0, _chai.expect)(error.attribute).to.equal('canonicalUrl');\n        (0, _chai.expect)(error.message).to.equal('Please enter a valid URL');\n      });\n      (0, _mocha.it)('cannot be too long', async function () {\n        let post = Post.create({\n          canonicalUrl: `http://example.com/${new Array(1983).join('x')}`\n        });\n        let passed = await post.validate({\n          property: 'canonicalUrl'\n        }).then(() => true).catch(() => false);\n        (0, _chai.expect)(passed, 'passed').to.be.false;\n        (0, _chai.expect)(post.hasValidated).to.include('canonicalUrl');\n        let error = post.errors.errorsFor('canonicalUrl').get(0);\n        (0, _chai.expect)(error.attribute).to.equal('canonicalUrl');\n        (0, _chai.expect)(error.message).to.equal('Canonical URL is too long, max 2000 chars');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/validators/slack-integration-test\", [\"ghost-admin/models/slack-integration\", \"ghost-admin/validators/slack-integration\", \"mocha\", \"chai\"], function (_slackIntegration, _slackIntegration2, _mocha, _chai) {\n  \"use strict\";\n\n  const testInvalidUrl = function (url) {\n    let slackObject = _slackIntegration.default.create({\n      url\n    });\n\n    _slackIntegration2.default.check(slackObject, 'url');\n\n    (0, _chai.expect)(_slackIntegration2.default.get('passed'), `\"${url}\" passed`).to.be.false;\n    (0, _chai.expect)(slackObject.get('errors').errorsFor('url').toArray()).to.deep.equal([{\n      attribute: 'url',\n      message: 'The URL must be in a format like https://hooks.slack.com/services/<your personal key>'\n    }]);\n    (0, _chai.expect)(slackObject.get('hasValidated')).to.include('url');\n  };\n\n  const testValidUrl = function (url) {\n    let slackObject = _slackIntegration.default.create({\n      url\n    });\n\n    _slackIntegration2.default.check(slackObject, 'url');\n\n    (0, _chai.expect)(_slackIntegration2.default.get('passed'), `\"${url}\" failed`).to.be.true;\n    (0, _chai.expect)(slackObject.get('hasValidated')).to.include('url');\n  };\n\n  (0, _mocha.describe)('Unit: Validator: slack-integration', function () {\n    (0, _mocha.it)('fails on invalid url values', function () {\n      let invalidUrls = ['test@example.com', '/has spaces', 'no-leading-slash', 'http://example.com/with spaces'];\n      invalidUrls.forEach(function (url) {\n        testInvalidUrl(url);\n      });\n    });\n    (0, _mocha.it)('passes on valid url values', function () {\n      let validUrls = ['https://hooks.slack.com/services/;alskdjf', 'https://hooks.slack.com/services/123445678', 'https://hooks.slack.com/services/some_webhook', 'https://discordapp.com/api/webhooks/380692408364433418/mGLHSRyEoUaTvY91Te16WOT8Obn-BrJoiTNoxeUqhb6klKERb9xaZkUBYC5AeduwYCCy/slack'];\n      validUrls.forEach(function (url) {\n        testValidUrl(url);\n      });\n    });\n    (0, _mocha.it)('validates url by default', function () {\n      let slackObject = _slackIntegration.default.create();\n\n      _slackIntegration2.default.check(slackObject);\n\n      (0, _chai.expect)(slackObject.get('errors').errorsFor('url')).to.be.empty;\n      (0, _chai.expect)(_slackIntegration2.default.get('passed')).to.be.true;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/validators/tag-settings-test\", [\"ghost-admin/mixins/validation-engine\", \"mocha\", \"chai\"], function (_validationEngine, _mocha, _chai) {\n  \"use strict\";\n\n  const Tag = Ember.Object.extend(_validationEngine.default, {\n    validationType: 'tag',\n    name: null,\n    description: null,\n    metaTitle: null,\n    metaDescription: null\n  }); // TODO: These tests have way too much duplication, consider creating test\n  // helpers for validations\n  // TODO: Move testing of validation-engine behaviour into validation-engine-test\n  // and replace these tests with specific validator tests\n\n  (0, _mocha.describe)('Unit: Validator: tag-settings', function () {\n    (0, _mocha.it)('validates all fields by default', function () {\n      let tag = Tag.create({});\n      let properties = tag.get('validators.tag.properties'); // TODO: This is checking implementation details rather than expected\n      // behaviour. Replace once we have consistent behaviour (see below)\n\n      (0, _chai.expect)(properties, 'properties').to.include('name');\n      (0, _chai.expect)(properties, 'properties').to.include('slug');\n      (0, _chai.expect)(properties, 'properties').to.include('description');\n      (0, _chai.expect)(properties, 'properties').to.include('metaTitle');\n      (0, _chai.expect)(properties, 'properties').to.include('metaDescription'); // TODO: .validate (and  by extension .save) doesn't currently affect\n      // .hasValidated - it would be good to make this consistent.\n      // The following tests currently fail:\n      //\n      // run(() => {\n      //     tag.validate();\n      // });\n      //\n      // expect(tag.get('hasValidated'), 'hasValidated').to.include('name');\n      // expect(tag.get('hasValidated'), 'hasValidated').to.include('description');\n      // expect(tag.get('hasValidated'), 'hasValidated').to.include('metaTitle');\n      // expect(tag.get('hasValidated'), 'hasValidated').to.include('metaDescription');\n    });\n    (0, _mocha.it)('passes with valid name', function () {\n      // longest valid name\n      let tag = Tag.create({\n        name: new Array(192).join('x')\n      });\n      let passed = false;\n      (0, _chai.expect)(tag.get('name').length, 'name length').to.equal(191);\n      Ember.run(() => {\n        tag.validate({\n          property: 'name'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      (0, _chai.expect)(passed, 'passed').to.be.true;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n    });\n    (0, _mocha.it)('validates name presence', function () {\n      let tag = Tag.create();\n      let passed = false;\n      let nameErrors; // TODO: validator is currently a singleton meaning state leaks\n      // between all objects that use it. Each object should either\n      // get it's own validator instance or validator objects should not\n      // contain state. The following currently fails:\n      //\n      // let validator = tag.get('validators.tag')\n      // expect(validator.get('passed'), 'passed').to.be.false;\n\n      Ember.run(() => {\n        tag.validate({\n          property: 'name'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      nameErrors = tag.get('errors').errorsFor('name').get(0);\n      (0, _chai.expect)(nameErrors.attribute, 'errors.name.attribute').to.equal('name');\n      (0, _chai.expect)(nameErrors.message, 'errors.name.message').to.equal('You must specify a name for the tag.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n    });\n    (0, _mocha.it)('validates names starting with a comma', function () {\n      let tag = Tag.create({\n        name: ',test'\n      });\n      let passed = false;\n      let nameErrors;\n      Ember.run(() => {\n        tag.validate({\n          property: 'name'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      nameErrors = tag.get('errors').errorsFor('name').get(0);\n      (0, _chai.expect)(nameErrors.attribute, 'errors.name.attribute').to.equal('name');\n      (0, _chai.expect)(nameErrors.message, 'errors.name.message').to.equal('Tag names can\\'t start with commas.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n    });\n    (0, _mocha.it)('validates name length', function () {\n      // shortest invalid name\n      let tag = Tag.create({\n        name: new Array(193).join('x')\n      });\n      let passed = false;\n      let nameErrors;\n      (0, _chai.expect)(tag.get('name').length, 'name length').to.equal(192);\n      Ember.run(() => {\n        tag.validate({\n          property: 'name'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      nameErrors = tag.get('errors').errorsFor('name')[0];\n      (0, _chai.expect)(nameErrors.attribute, 'errors.name.attribute').to.equal('name');\n      (0, _chai.expect)(nameErrors.message, 'errors.name.message').to.equal('Tag names cannot be longer than 191 characters.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n    });\n    (0, _mocha.it)('passes with valid slug', function () {\n      // longest valid slug\n      let tag = Tag.create({\n        slug: new Array(192).join('x')\n      });\n      let passed = false;\n      (0, _chai.expect)(tag.get('slug').length, 'slug length').to.equal(191);\n      Ember.run(() => {\n        tag.validate({\n          property: 'slug'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      (0, _chai.expect)(passed, 'passed').to.be.true;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('slug');\n    });\n    (0, _mocha.it)('validates slug length', function () {\n      // shortest invalid slug\n      let tag = Tag.create({\n        slug: new Array(193).join('x')\n      });\n      let passed = false;\n      let slugErrors;\n      (0, _chai.expect)(tag.get('slug').length, 'slug length').to.equal(192);\n      Ember.run(() => {\n        tag.validate({\n          property: 'slug'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      slugErrors = tag.get('errors').errorsFor('slug')[0];\n      (0, _chai.expect)(slugErrors.attribute, 'errors.slug.attribute').to.equal('slug');\n      (0, _chai.expect)(slugErrors.message, 'errors.slug.message').to.equal('URL cannot be longer than 191 characters.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('slug');\n    });\n    (0, _mocha.it)('passes with a valid description', function () {\n      // longest valid description\n      let tag = Tag.create({\n        description: new Array(501).join('x')\n      });\n      let passed = false;\n      (0, _chai.expect)(tag.get('description').length, 'description length').to.equal(500);\n      Ember.run(() => {\n        tag.validate({\n          property: 'description'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      (0, _chai.expect)(passed, 'passed').to.be.true;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('description');\n    });\n    (0, _mocha.it)('validates description length', function () {\n      // shortest invalid description\n      let tag = Tag.create({\n        description: new Array(502).join('x')\n      });\n      let passed = false;\n      let errors;\n      (0, _chai.expect)(tag.get('description').length, 'description length').to.equal(501);\n      Ember.run(() => {\n        tag.validate({\n          property: 'description'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      errors = tag.get('errors').errorsFor('description')[0];\n      (0, _chai.expect)(errors.attribute, 'errors.description.attribute').to.equal('description');\n      (0, _chai.expect)(errors.message, 'errors.description.message').to.equal('Description cannot be longer than 500 characters.'); // TODO: tag.errors appears to be a singleton and previous errors are\n      // not cleared despite creating a new tag object\n      //\n      // console.log(JSON.stringify(tag.get('errors')));\n      // expect(tag.get('errors.length')).to.equal(1);\n\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('description');\n    }); // TODO: we have both metaTitle and metaTitle property names on the\n    // model/validator respectively - this should be standardised\n\n    (0, _mocha.it)('passes with a valid metaTitle', function () {\n      // longest valid metaTitle\n      let tag = Tag.create({\n        metaTitle: new Array(301).join('x')\n      });\n      let passed = false;\n      (0, _chai.expect)(tag.get('metaTitle').length, 'metaTitle length').to.equal(300);\n      Ember.run(() => {\n        tag.validate({\n          property: 'metaTitle'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      (0, _chai.expect)(passed, 'passed').to.be.true;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaTitle');\n    });\n    (0, _mocha.it)('validates metaTitle length', function () {\n      // shortest invalid metaTitle\n      let tag = Tag.create({\n        metaTitle: new Array(302).join('x')\n      });\n      let passed = false;\n      let errors;\n      (0, _chai.expect)(tag.get('metaTitle').length, 'metaTitle length').to.equal(301);\n      Ember.run(() => {\n        tag.validate({\n          property: 'metaTitle'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      errors = tag.get('errors').errorsFor('metaTitle')[0];\n      (0, _chai.expect)(errors.attribute, 'errors.metaTitle.attribute').to.equal('metaTitle');\n      (0, _chai.expect)(errors.message, 'errors.metaTitle.message').to.equal('Meta Title cannot be longer than 300 characters.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaTitle');\n    }); // TODO: we have both metaDescription and metaDescription property names on\n    // the model/validator respectively - this should be standardised\n\n    (0, _mocha.it)('passes with a valid metaDescription', function () {\n      // longest valid description\n      let tag = Tag.create({\n        metaDescription: new Array(501).join('x')\n      });\n      let passed = false;\n      (0, _chai.expect)(tag.get('metaDescription').length, 'metaDescription length').to.equal(500);\n      Ember.run(() => {\n        tag.validate({\n          property: 'metaDescription'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      (0, _chai.expect)(passed, 'passed').to.be.true;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaDescription');\n    });\n    (0, _mocha.it)('validates metaDescription length', function () {\n      // shortest invalid metaDescription\n      let tag = Tag.create({\n        metaDescription: new Array(502).join('x')\n      });\n      let passed = false;\n      let errors;\n      (0, _chai.expect)(tag.get('metaDescription').length, 'metaDescription length').to.equal(501);\n      Ember.run(() => {\n        tag.validate({\n          property: 'metaDescription'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      errors = tag.get('errors').errorsFor('metaDescription')[0];\n      (0, _chai.expect)(errors.attribute, 'errors.metaDescription.attribute').to.equal('metaDescription');\n      (0, _chai.expect)(errors.message, 'errors.metaDescription.message').to.equal('Meta Description cannot be longer than 500 characters.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaDescription');\n    });\n  });\n});","define('ghost-admin/config/environment', [], function() {\n  var prefix = 'ghost-admin';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('ghost-admin/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingshvfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhvnzzzrgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACppEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzglgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnznvfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACptKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACttngBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClllJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtzSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACztgpOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlblKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACllEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}